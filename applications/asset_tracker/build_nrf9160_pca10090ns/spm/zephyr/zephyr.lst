
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20001d30 	.word	0x20001d30

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   4:	000016b9 	.word	0x000016b9
   8:	000034c3 	.word	0x000034c3
   c:	00001095 	.word	0x00001095
		if (fdtable[fd].obj == NULL) {
  10:	00001095 	.word	0x00001095
  14:	00001095 	.word	0x00001095
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	00001095 	.word	0x00001095

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE0(K_SYSCALL_Z_ERRNO, z_errno, int *)
  1c:	00001095 	.word	0x00001095
	errno = ENFILE;
  20:	00001095 	.word	0x00001095
	return -1;
  24:	00001095 	.word	0x00001095

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
  28:	00001095 	.word	0x00001095
  2c:	00001059 	.word	0x00001059
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	00001095 	.word	0x00001095
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	00001095 	.word	0x00001095
  38:	00001001 	.word	0x00001001
  3c:	000033eb 	.word	0x000033eb

00000040 <_irq_vector_table>:
  40:	000010b9 000010b9 000010b9 000010b9     ................
  50:	000010b9 000010b9 000010b9 000010b9     ................
  60:	000010b9 000010b9 000010b9 000010b9     ................
  70:	000010b9 000010b9 000010b9 000010b9     ................
  80:	000010b9 000010b9 000010b9 000010b9     ................
  90:	000010b9 000010b9 000010b9 000010b9     ................
  a0:	000010b9 000010b9 000010b9 000010b9     ................
  b0:	000010b9 000010b9 000010b9 000010b9     ................
  c0:	000010b9 000010b9 000010b9 000010b9     ................
  d0:	000010b9 000010b9 000010b9 000010b9     ................
  e0:	000010b9 000010b9 000010b9 000010b9     ................
  f0:	000010b9 000010b9 000010b9 000010b9     ................
 100:	000010b9 000010b9 000010b9 000010b9     ................
 110:	000010b9 000010b9 000010b9 000010b9     ................
 120:	000010b9 000010b9 000010b9 000010b9     ................
 130:	000010b9 000010b9 000010b9 000010b9     ................
 140:	000010b9                                ....

Disassembly of section _TEXT_SECTION_NAME_2:

00000144 <__aeabi_ldivmod>:
     144:	b97b      	cbnz	r3, 166 <__aeabi_ldivmod+0x22>
     146:	b972      	cbnz	r2, 166 <__aeabi_ldivmod+0x22>
     148:	2900      	cmp	r1, #0
     14a:	bfbe      	ittt	lt
     14c:	2000      	movlt	r0, #0
     14e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     152:	e006      	blt.n	162 <__aeabi_ldivmod+0x1e>
     154:	bf08      	it	eq
     156:	2800      	cmpeq	r0, #0
     158:	bf1c      	itt	ne
     15a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     15e:	f04f 30ff 	movne.w	r0, #4294967295
     162:	f000 b9af 	b.w	4c4 <__aeabi_idiv0>
     166:	f1ad 0c08 	sub.w	ip, sp, #8
     16a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     16e:	2900      	cmp	r1, #0
     170:	db09      	blt.n	186 <__aeabi_ldivmod+0x42>
     172:	2b00      	cmp	r3, #0
     174:	db1a      	blt.n	1ac <__aeabi_ldivmod+0x68>
     176:	f000 f835 	bl	1e4 <__udivmoddi4>
     17a:	f8dd e004 	ldr.w	lr, [sp, #4]
     17e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     182:	b004      	add	sp, #16
     184:	4770      	bx	lr
     186:	4240      	negs	r0, r0
     188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     18c:	2b00      	cmp	r3, #0
     18e:	db1b      	blt.n	1c8 <__aeabi_ldivmod+0x84>
     190:	f000 f828 	bl	1e4 <__udivmoddi4>
     194:	f8dd e004 	ldr.w	lr, [sp, #4]
     198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     19c:	b004      	add	sp, #16
     19e:	4240      	negs	r0, r0
     1a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1a4:	4252      	negs	r2, r2
     1a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1aa:	4770      	bx	lr
     1ac:	4252      	negs	r2, r2
     1ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1b2:	f000 f817 	bl	1e4 <__udivmoddi4>
     1b6:	f8dd e004 	ldr.w	lr, [sp, #4]
     1ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1be:	b004      	add	sp, #16
     1c0:	4240      	negs	r0, r0
     1c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1c6:	4770      	bx	lr
     1c8:	4252      	negs	r2, r2
     1ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1ce:	f000 f809 	bl	1e4 <__udivmoddi4>
     1d2:	f8dd e004 	ldr.w	lr, [sp, #4]
     1d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1da:	b004      	add	sp, #16
     1dc:	4252      	negs	r2, r2
     1de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1e2:	4770      	bx	lr

000001e4 <__udivmoddi4>:
     1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1e8:	468c      	mov	ip, r1
     1ea:	9d08      	ldr	r5, [sp, #32]
     1ec:	4604      	mov	r4, r0
     1ee:	468a      	mov	sl, r1
     1f0:	2b00      	cmp	r3, #0
     1f2:	d14a      	bne.n	28a <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x8a>
     1f4:	428a      	cmp	r2, r1
     1f6:	4617      	mov	r7, r2
     1f8:	d962      	bls.n	2c0 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0xc0>
     1fa:	fab2 f682 	clz	r6, r2
     1fe:	b14e      	cbz	r6, 214 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x14>
     200:	f1c6 0e20 	rsb	lr, r6, #32
     204:	fa01 f306 	lsl.w	r3, r1, r6
     208:	40b7      	lsls	r7, r6
     20a:	40b4      	lsls	r4, r6
     20c:	fa20 fe0e 	lsr.w	lr, r0, lr
     210:	ea4e 0a03 	orr.w	sl, lr, r3
     214:	ea4f 4817 	mov.w	r8, r7, lsr #16
     218:	0c23      	lsrs	r3, r4, #16
     21a:	fa1f f987 	uxth.w	r9, r7
     21e:	fbba fef8 	udiv	lr, sl, r8
     222:	fb08 aa1e 	mls	sl, r8, lr, sl
     226:	fb0e f209 	mul.w	r2, lr, r9
     22a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
     22e:	429a      	cmp	r2, r3
     230:	d90b      	bls.n	24a <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x4a>
     232:	18fb      	adds	r3, r7, r3
     234:	f10e 31ff 	add.w	r1, lr, #4294967295
     238:	bf2c      	ite	cs
     23a:	2001      	movcs	r0, #1
     23c:	2000      	movcc	r0, #0
     23e:	429a      	cmp	r2, r3
     240:	d902      	bls.n	248 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x48>
     242:	2800      	cmp	r0, #0
     244:	f000 812a 	beq.w	49c <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x9c>
     248:	468e      	mov	lr, r1
     24a:	1a9a      	subs	r2, r3, r2
     24c:	b2a3      	uxth	r3, r4
     24e:	fbb2 f0f8 	udiv	r0, r2, r8
     252:	fb08 2210 	mls	r2, r8, r0, r2
     256:	fb00 f909 	mul.w	r9, r0, r9
     25a:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
     25e:	45a1      	cmp	r9, r4
     260:	d907      	bls.n	272 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x72>
     262:	193c      	adds	r4, r7, r4
     264:	f100 33ff 	add.w	r3, r0, #4294967295
     268:	d202      	bcs.n	270 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x70>
     26a:	45a1      	cmp	r9, r4
     26c:	f200 8110 	bhi.w	490 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x90>
     270:	4618      	mov	r0, r3
     272:	eba4 0409 	sub.w	r4, r4, r9
     276:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     27a:	2100      	movs	r1, #0
     27c:	b11d      	cbz	r5, 286 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x86>
     27e:	40f4      	lsrs	r4, r6
     280:	2300      	movs	r3, #0
     282:	e9c5 4300 	strd	r4, r3, [r5]
     286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     28a:	428b      	cmp	r3, r1
     28c:	d908      	bls.n	2a0 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0xa0>
     28e:	2d00      	cmp	r5, #0
     290:	f000 80f2 	beq.w	478 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x78>
     294:	2100      	movs	r1, #0
     296:	e9c5 0c00 	strd	r0, ip, [r5]
     29a:	4608      	mov	r0, r1
     29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2a0:	fab3 f183 	clz	r1, r3
     2a4:	2900      	cmp	r1, #0
     2a6:	d14e      	bne.n	346 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x146>
     2a8:	4563      	cmp	r3, ip
     2aa:	f0c0 80e8 	bcc.w	47e <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x7e>
     2ae:	4282      	cmp	r2, r0
     2b0:	f240 80e5 	bls.w	47e <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x7e>
     2b4:	4608      	mov	r0, r1
     2b6:	2d00      	cmp	r5, #0
     2b8:	d0e5      	beq.n	286 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x86>
     2ba:	e9c5 4a00 	strd	r4, sl, [r5]
     2be:	e7e2      	b.n	286 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x86>
     2c0:	b902      	cbnz	r2, 2c4 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0xc4>
     2c2:	deff      	udf	#255	; 0xff
     2c4:	fab2 f682 	clz	r6, r2
     2c8:	2e00      	cmp	r6, #0
     2ca:	f040 8099 	bne.w	400 <CONFIG_AT_CMD_THREAD_STACK_SIZE>
     2ce:	1a8b      	subs	r3, r1, r2
     2d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
     2d4:	fa1f f882 	uxth.w	r8, r2
     2d8:	2101      	movs	r1, #1
     2da:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     2de:	fbb3 f2fe 	udiv	r2, r3, lr
     2e2:	fb0e 3012 	mls	r0, lr, r2, r3
     2e6:	fb08 f902 	mul.w	r9, r8, r2
     2ea:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
     2ee:	45e1      	cmp	r9, ip
     2f0:	d908      	bls.n	304 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x104>
     2f2:	eb17 0c0c 	adds.w	ip, r7, ip
     2f6:	f102 33ff 	add.w	r3, r2, #4294967295
     2fa:	d202      	bcs.n	302 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x102>
     2fc:	45e1      	cmp	r9, ip
     2fe:	f200 80ca 	bhi.w	496 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x96>
     302:	461a      	mov	r2, r3
     304:	ebac 0c09 	sub.w	ip, ip, r9
     308:	b2a3      	uxth	r3, r4
     30a:	fbbc f0fe 	udiv	r0, ip, lr
     30e:	fb0e cc10 	mls	ip, lr, r0, ip
     312:	fb08 f800 	mul.w	r8, r8, r0
     316:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
     31a:	45a0      	cmp	r8, r4
     31c:	d90e      	bls.n	33c <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x13c>
     31e:	193c      	adds	r4, r7, r4
     320:	f100 33ff 	add.w	r3, r0, #4294967295
     324:	bf2c      	ite	cs
     326:	f04f 0c01 	movcs.w	ip, #1
     32a:	f04f 0c00 	movcc.w	ip, #0
     32e:	45a0      	cmp	r8, r4
     330:	d903      	bls.n	33a <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x13a>
     332:	f1bc 0f00 	cmp.w	ip, #0
     336:	f000 80a8 	beq.w	48a <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x8a>
     33a:	4618      	mov	r0, r3
     33c:	eba4 0408 	sub.w	r4, r4, r8
     340:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
     344:	e79a      	b.n	27c <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x7c>
     346:	f1c1 0420 	rsb	r4, r1, #32
     34a:	408b      	lsls	r3, r1
     34c:	fa02 fe01 	lsl.w	lr, r2, r1
     350:	fa0c f601 	lsl.w	r6, ip, r1
     354:	40e2      	lsrs	r2, r4
     356:	fa20 f704 	lsr.w	r7, r0, r4
     35a:	fa2c fc04 	lsr.w	ip, ip, r4
     35e:	fa00 f801 	lsl.w	r8, r0, r1
     362:	4313      	orrs	r3, r2
     364:	433e      	orrs	r6, r7
     366:	0c1f      	lsrs	r7, r3, #16
     368:	0c32      	lsrs	r2, r6, #16
     36a:	fa1f f983 	uxth.w	r9, r3
     36e:	fbbc f0f7 	udiv	r0, ip, r7
     372:	fb07 cc10 	mls	ip, r7, r0, ip
     376:	fb00 fa09 	mul.w	sl, r0, r9
     37a:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     37e:	45e2      	cmp	sl, ip
     380:	d908      	bls.n	394 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x194>
     382:	eb13 0c0c 	adds.w	ip, r3, ip
     386:	f100 32ff 	add.w	r2, r0, #4294967295
     38a:	d202      	bcs.n	392 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x192>
     38c:	45e2      	cmp	sl, ip
     38e:	f200 8089 	bhi.w	4a4 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0xa4>
     392:	4610      	mov	r0, r2
     394:	ebac 0c0a 	sub.w	ip, ip, sl
     398:	b2b6      	uxth	r6, r6
     39a:	fbbc faf7 	udiv	sl, ip, r7
     39e:	fb07 cc1a 	mls	ip, r7, sl, ip
     3a2:	fb0a f909 	mul.w	r9, sl, r9
     3a6:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
     3aa:	4591      	cmp	r9, r2
     3ac:	d906      	bls.n	3bc <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x1bc>
     3ae:	189a      	adds	r2, r3, r2
     3b0:	f10a 36ff 	add.w	r6, sl, #4294967295
     3b4:	d201      	bcs.n	3ba <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x1ba>
     3b6:	4591      	cmp	r9, r2
     3b8:	d87a      	bhi.n	4b0 <CONFIG_NET_TX_STACK_SIZE>
     3ba:	46b2      	mov	sl, r6
     3bc:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
     3c0:	eba2 0209 	sub.w	r2, r2, r9
     3c4:	fba0 670e 	umull	r6, r7, r0, lr
     3c8:	42ba      	cmp	r2, r7
     3ca:	46b4      	mov	ip, r6
     3cc:	46b9      	mov	r9, r7
     3ce:	d302      	bcc.n	3d6 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x1d6>
     3d0:	d107      	bne.n	3e2 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x1e2>
     3d2:	45b0      	cmp	r8, r6
     3d4:	d205      	bcs.n	3e2 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x1e2>
     3d6:	ebb6 0c0e 	subs.w	ip, r6, lr
     3da:	eb67 0303 	sbc.w	r3, r7, r3
     3de:	3801      	subs	r0, #1
     3e0:	4699      	mov	r9, r3
     3e2:	2d00      	cmp	r5, #0
     3e4:	d06b      	beq.n	4be <CONFIG_NET_TX_STACK_SIZE+0xe>
     3e6:	ebb8 030c 	subs.w	r3, r8, ip
     3ea:	eb62 0209 	sbc.w	r2, r2, r9
     3ee:	fa02 f404 	lsl.w	r4, r2, r4
     3f2:	40cb      	lsrs	r3, r1
     3f4:	40ca      	lsrs	r2, r1
     3f6:	2100      	movs	r1, #0
     3f8:	431c      	orrs	r4, r3
     3fa:	e9c5 4200 	strd	r4, r2, [r5]
     3fe:	e742      	b.n	286 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x86>
     400:	40b7      	lsls	r7, r6
     402:	f1c6 0220 	rsb	r2, r6, #32
     406:	fa01 f306 	lsl.w	r3, r1, r6
     40a:	40b4      	lsls	r4, r6
     40c:	fa21 fc02 	lsr.w	ip, r1, r2
     410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     414:	fa20 f202 	lsr.w	r2, r0, r2
     418:	fa1f f887 	uxth.w	r8, r7
     41c:	fbbc f1fe 	udiv	r1, ip, lr
     420:	431a      	orrs	r2, r3
     422:	fb0e cc11 	mls	ip, lr, r1, ip
     426:	fb01 f008 	mul.w	r0, r1, r8
     42a:	0c13      	lsrs	r3, r2, #16
     42c:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
     430:	4560      	cmp	r0, ip
     432:	d907      	bls.n	444 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x44>
     434:	eb17 0c0c 	adds.w	ip, r7, ip
     438:	f101 33ff 	add.w	r3, r1, #4294967295
     43c:	d201      	bcs.n	442 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x42>
     43e:	4560      	cmp	r0, ip
     440:	d833      	bhi.n	4aa <CONFIG_AT_CMD_THREAD_STACK_SIZE+0xaa>
     442:	4619      	mov	r1, r3
     444:	ebac 0c00 	sub.w	ip, ip, r0
     448:	b292      	uxth	r2, r2
     44a:	fbbc f0fe 	udiv	r0, ip, lr
     44e:	fb0e cc10 	mls	ip, lr, r0, ip
     452:	fb00 f308 	mul.w	r3, r0, r8
     456:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     45a:	4563      	cmp	r3, ip
     45c:	d907      	bls.n	46e <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x6e>
     45e:	eb17 0c0c 	adds.w	ip, r7, ip
     462:	f100 32ff 	add.w	r2, r0, #4294967295
     466:	d201      	bcs.n	46c <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x6c>
     468:	4563      	cmp	r3, ip
     46a:	d825      	bhi.n	4b8 <CONFIG_NET_TX_STACK_SIZE+0x8>
     46c:	4610      	mov	r0, r2
     46e:	ebac 0303 	sub.w	r3, ip, r3
     472:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     476:	e730      	b.n	2da <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0xda>
     478:	4629      	mov	r1, r5
     47a:	4628      	mov	r0, r5
     47c:	e703      	b.n	286 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x86>
     47e:	1a84      	subs	r4, r0, r2
     480:	eb6c 0303 	sbc.w	r3, ip, r3
     484:	2001      	movs	r0, #1
     486:	469a      	mov	sl, r3
     488:	e715      	b.n	2b6 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0xb6>
     48a:	3802      	subs	r0, #2
     48c:	443c      	add	r4, r7
     48e:	e755      	b.n	33c <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x13c>
     490:	3802      	subs	r0, #2
     492:	443c      	add	r4, r7
     494:	e6ed      	b.n	272 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x72>
     496:	3a02      	subs	r2, #2
     498:	44bc      	add	ip, r7
     49a:	e733      	b.n	304 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x104>
     49c:	f1ae 0e02 	sub.w	lr, lr, #2
     4a0:	443b      	add	r3, r7
     4a2:	e6d2      	b.n	24a <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x4a>
     4a4:	3802      	subs	r0, #2
     4a6:	449c      	add	ip, r3
     4a8:	e774      	b.n	394 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x194>
     4aa:	3902      	subs	r1, #2
     4ac:	44bc      	add	ip, r7
     4ae:	e7c9      	b.n	444 <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x44>
     4b0:	f1aa 0a02 	sub.w	sl, sl, #2
     4b4:	441a      	add	r2, r3
     4b6:	e781      	b.n	3bc <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x1bc>
     4b8:	3802      	subs	r0, #2
     4ba:	44bc      	add	ip, r7
     4bc:	e7d7      	b.n	46e <CONFIG_AT_CMD_THREAD_STACK_SIZE+0x6e>
     4be:	4629      	mov	r1, r5
     4c0:	e6e1      	b.n	286 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x86>
     4c2:	bf00      	nop

000004c4 <__aeabi_idiv0>:
     4c4:	4770      	bx	lr
     4c6:	bf00      	nop

000004c8 <__gnu_cmse_nonsecure_call>:
     4c8:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     4cc:	4627      	mov	r7, r4
     4ce:	46a0      	mov	r8, r4
     4d0:	46a1      	mov	r9, r4
     4d2:	46a2      	mov	sl, r4
     4d4:	46a3      	mov	fp, r4
     4d6:	46a4      	mov	ip, r4
     4d8:	ed2d 8b10 	vpush	{d8-d15}
     4dc:	f04f 0500 	mov.w	r5, #0
     4e0:	ec45 5b18 	vmov	d8, r5, r5
     4e4:	ec45 5a19 	vmov	s18, s19, r5, r5
     4e8:	ec45 5a1a 	vmov	s20, s21, r5, r5
     4ec:	ec45 5a1b 	vmov	s22, s23, r5, r5
     4f0:	ec45 5a1c 	vmov	s24, s25, r5, r5
     4f4:	ec45 5a1d 	vmov	s26, s27, r5, r5
     4f8:	ec45 5a1e 	vmov	s28, s29, r5, r5
     4fc:	ec45 5a1f 	vmov	s30, s31, r5, r5
     500:	eef1 5a10 	vmrs	r5, fpscr
     504:	f64f 7660 	movw	r6, #65376	; 0xff60
     508:	f6c0 76ff 	movt	r6, #4095	; 0xfff
     50c:	4035      	ands	r5, r6
     50e:	eee1 5a10 	vmsr	fpscr, r5
     512:	f384 8800 	msr	CPSR_f, r4
     516:	4625      	mov	r5, r4
     518:	4626      	mov	r6, r4
     51a:	47a4      	blxns	r4
     51c:	ecbd 8b10 	vpop	{d8-d15}
     520:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

00000524 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
     524:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
     526:	4b0c      	ldr	r3, [pc, #48]	; (558 <tz_nonsecure_state_setup+0x34>)
     528:	609a      	str	r2, [r3, #8]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
     52a:	6803      	ldr	r3, [r0, #0]
     52c:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
     530:	6843      	ldr	r3, [r0, #4]
     532:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
     536:	7b02      	ldrb	r2, [r0, #12]
     538:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
     53c:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
     540:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
     544:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
     546:	bf48      	it	mi
     548:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
     54c:	b109      	cbz	r1, 552 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
     54e:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
     552:	f383 8894 	msr	CONTROL_NS, r3
}
     556:	4770      	bx	lr
     558:	e002ed00 	.word	0xe002ed00

0000055c <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     55c:	4a08      	ldr	r2, [pc, #32]	; (580 <tz_nbanked_exception_target_state_set+0x24>)
     55e:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
     560:	b148      	cbz	r0, 576 <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
     562:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     566:	041b      	lsls	r3, r3, #16
     568:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
     56a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
     56e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
     572:	60d3      	str	r3, [r2, #12]
}
     574:	4770      	bx	lr
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     576:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
     578:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     57c:	e7f5      	b.n	56a <tz_nbanked_exception_target_state_set+0xe>
     57e:	bf00      	nop
     580:	e000ed00 	.word	0xe000ed00

00000584 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     584:	4a08      	ldr	r2, [pc, #32]	; (5a8 <tz_nonsecure_exception_prio_config+0x24>)
     586:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
     588:	b140      	cbz	r0, 59c <tz_nonsecure_exception_prio_config+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     58a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
     58c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
     590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
     594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
     598:	60d3      	str	r3, [r2, #12]
}
     59a:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
     59c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
     5a0:	041b      	lsls	r3, r3, #16
     5a2:	0c1b      	lsrs	r3, r3, #16
     5a4:	e7f4      	b.n	590 <tz_nonsecure_exception_prio_config+0xc>
     5a6:	bf00      	nop
     5a8:	e000ed00 	.word	0xe000ed00

000005ac <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     5ac:	4a08      	ldr	r2, [pc, #32]	; (5d0 <tz_nonsecure_system_reset_req_block+0x24>)
     5ae:	68d3      	ldr	r3, [r2, #12]
	if (block) {
     5b0:	b140      	cbz	r0, 5c4 <tz_nonsecure_system_reset_req_block+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     5b2:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
     5b4:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
     5b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
     5bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
     5c0:	60d3      	str	r3, [r2, #12]
}
     5c2:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
     5c4:	f023 0308 	bic.w	r3, r3, #8
     5c8:	041b      	lsls	r3, r3, #16
     5ca:	0c1b      	lsrs	r3, r3, #16
     5cc:	e7f4      	b.n	5b8 <tz_nonsecure_system_reset_req_block+0xc>
     5ce:	bf00      	nop
     5d0:	e000ed00 	.word	0xe000ed00

000005d4 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
     5d4:	4a03      	ldr	r2, [pc, #12]	; (5e4 <CONFIG_NET_RX_STACK_SIZE+0x8>)
     5d6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
     5da:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
     5de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
     5e2:	4770      	bx	lr
     5e4:	e000ed00 	.word	0xe000ed00

000005e8 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
     5e8:	4b08      	ldr	r3, [pc, #32]	; (60c <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
     5ea:	681a      	ldr	r2, [r3, #0]
	if (enable) {
     5ec:	b118      	cbz	r0, 5f6 <tz_sau_configure+0xe>
     5ee:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
     5f2:	601a      	str	r2, [r3, #0]
		}
	}
}
     5f4:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
     5f6:	f022 0201 	bic.w	r2, r2, #1
     5fa:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
     5fc:	681a      	ldr	r2, [r3, #0]
		if (allns) {
     5fe:	b111      	cbz	r1, 606 <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
     600:	f042 0202 	orr.w	r2, r2, #2
     604:	e7f5      	b.n	5f2 <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
     606:	f022 0202 	bic.w	r2, r2, #2
     60a:	e7f2      	b.n	5f2 <tz_sau_configure+0xa>
     60c:	e000edd0 	.word	0xe000edd0

00000610 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     610:	680b      	ldr	r3, [r1, #0]
     612:	3301      	adds	r3, #1
     614:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     616:	4b01      	ldr	r3, [pc, #4]	; (61c <char_out+0xc>)
     618:	681b      	ldr	r3, [r3, #0]
     61a:	4718      	bx	r3
     61c:	20002670 	.word	0x20002670

00000620 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     624:	b085      	sub	sp, #20
     626:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     628:	469b      	mov	fp, r3
     62a:	2c01      	cmp	r4, #1
     62c:	bfb8      	it	lt
     62e:	2401      	movlt	r4, #1
     630:	2b01      	cmp	r3, #1
     632:	bf0c      	ite	eq
     634:	2330      	moveq	r3, #48	; 0x30
     636:	2320      	movne	r3, #32
     638:	4615      	mov	r5, r2
     63a:	4680      	mov	r8, r0
     63c:	4689      	mov	r9, r1
     63e:	2601      	movs	r6, #1
     640:	270a      	movs	r7, #10
     642:	2200      	movs	r2, #0
     644:	f8df a070 	ldr.w	sl, [pc, #112]	; 6b8 <_printk_dec_ulong+0x98>
     648:	9401      	str	r4, [sp, #4]
     64a:	9302      	str	r3, [sp, #8]
     64c:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit != 0 || remainder > pos) {
     650:	b90a      	cbnz	r2, 656 <_printk_dec_ulong+0x36>
     652:	45aa      	cmp	sl, r5
     654:	d21e      	bcs.n	694 <_printk_dec_ulong+0x74>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     656:	fbb5 f0f4 	udiv	r0, r5, r4
     65a:	4649      	mov	r1, r9
     65c:	3030      	adds	r0, #48	; 0x30
     65e:	47c0      	blx	r8
			found_largest_digit = 1;
     660:	2201      	movs	r2, #1
			digits++;
     662:	3601      	adds	r6, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= (pos + 1);
     664:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     668:	230a      	movs	r3, #10
		remaining--;
     66a:	3f01      	subs	r7, #1
	while (pos >= 9) {
     66c:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     66e:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     672:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     676:	d1e9      	bne.n	64c <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     678:	4649      	mov	r1, r9
     67a:	f105 0030 	add.w	r0, r5, #48	; 0x30
     67e:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     680:	f1bb 0f03 	cmp.w	fp, #3
     684:	d103      	bne.n	68e <_printk_dec_ulong+0x6e>
		remaining = min_width - digits;
     686:	9b01      	ldr	r3, [sp, #4]
     688:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     68a:	2c00      	cmp	r4, #0
     68c:	dc0f      	bgt.n	6ae <_printk_dec_ulong+0x8e>
			out(' ', ctx);
		}
	}
}
     68e:	b005      	add	sp, #20
     690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     694:	9b01      	ldr	r3, [sp, #4]
     696:	42bb      	cmp	r3, r7
     698:	dbe4      	blt.n	664 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     69a:	f1bb 0f02 	cmp.w	fp, #2
     69e:	d8e1      	bhi.n	664 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     6a0:	4649      	mov	r1, r9
     6a2:	9802      	ldr	r0, [sp, #8]
     6a4:	9203      	str	r2, [sp, #12]
			digits++;
     6a6:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     6a8:	47c0      	blx	r8
			digits++;
     6aa:	9a03      	ldr	r2, [sp, #12]
     6ac:	e7da      	b.n	664 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     6ae:	4649      	mov	r1, r9
     6b0:	2020      	movs	r0, #32
     6b2:	47c0      	blx	r8
     6b4:	3c01      	subs	r4, #1
     6b6:	e7e8      	b.n	68a <_printk_dec_ulong+0x6a>
     6b8:	3b9ac9ff 	.word	0x3b9ac9ff

000006bc <__printk_hook_install>:
	_char_out = fn;
     6bc:	4b01      	ldr	r3, [pc, #4]	; (6c4 <__printk_hook_install+0x8>)
     6be:	6018      	str	r0, [r3, #0]
}
     6c0:	4770      	bx	lr
     6c2:	bf00      	nop
     6c4:	20002670 	.word	0x20002670

000006c8 <vprintk>:
	struct out_context ctx = { 0 };
     6c8:	2300      	movs	r3, #0
{
     6ca:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     6cc:	ac02      	add	r4, sp, #8
     6ce:	f844 3d04 	str.w	r3, [r4, #-4]!
	z_vprintk(char_out, &ctx, fmt, ap);
     6d2:	4602      	mov	r2, r0
     6d4:	460b      	mov	r3, r1
     6d6:	4803      	ldr	r0, [pc, #12]	; (6e4 <vprintk+0x1c>)
     6d8:	4621      	mov	r1, r4
     6da:	f002 fcd8 	bl	308e <z_vprintk>
}
     6de:	b002      	add	sp, #8
     6e0:	bd10      	pop	{r4, pc}
     6e2:	bf00      	nop
     6e4:	00000611 	.word	0x00000611

000006e8 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     6e8:	f04f 0220 	mov.w	r2, #32
     6ec:	f3ef 8311 	mrs	r3, BASEPRI
     6f0:	f382 8811 	msr	BASEPRI, r2
     6f4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     6f8:	2101      	movs	r1, #1
     6fa:	4a04      	ldr	r2, [pc, #16]	; (70c <nordicsemi_nrf91_init+0x24>)
     6fc:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     700:	f383 8811 	msr	BASEPRI, r3
     704:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     708:	2000      	movs	r0, #0
     70a:	4770      	bx	lr
     70c:	50039000 	.word	0x50039000

00000710 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
     710:	4a52      	ldr	r2, [pc, #328]	; (85c <CONFIG_ISR_STACK_SIZE+0x5c>)
     712:	6813      	ldr	r3, [r2, #0]
     714:	f043 0302 	orr.w	r3, r3, #2
     718:	6013      	str	r3, [r2, #0]
        #endif

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim 
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
     71a:	2200      	movs	r2, #0
     71c:	00d3      	lsls	r3, r2, #3
     71e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
     722:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
     726:	3101      	adds	r1, #1
     728:	d008      	beq.n	73c <SystemInit+0x2c>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
     72a:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
     72e:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
     730:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
     734:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
     738:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
     73a:	d1ef      	bne.n	71c <SystemInit+0xc>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
     73c:	4a48      	ldr	r2, [pc, #288]	; (860 <CONFIG_ISR_STACK_SIZE+0x60>)
     73e:	69d3      	ldr	r3, [r2, #28]
     740:	f013 0301 	ands.w	r3, r3, #1
     744:	d03b      	beq.n	7be <SystemInit+0xae>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
     746:	4b47      	ldr	r3, [pc, #284]	; (864 <CONFIG_ISR_STACK_SIZE+0x64>)
     748:	4619      	mov	r1, r3
     74a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     74e:	2a01      	cmp	r2, #1
     750:	d1fb      	bne.n	74a <SystemInit+0x3a>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
     752:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
     756:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
     75a:	2b01      	cmp	r3, #1
     75c:	d1fb      	bne.n	756 <SystemInit+0x46>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
     75e:	4b40      	ldr	r3, [pc, #256]	; (860 <CONFIG_ISR_STACK_SIZE+0x60>)
     760:	69da      	ldr	r2, [r3, #28]
     762:	07d2      	lsls	r2, r2, #31
     764:	d508      	bpl.n	778 <SystemInit+0x68>
            NRF_UICR_S->HFXOSRC = (NRF_UICR_S->HFXOSRC & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
     766:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
     768:	493e      	ldr	r1, [pc, #248]	; (864 <CONFIG_ISR_STACK_SIZE+0x64>)
            NRF_UICR_S->HFXOSRC = (NRF_UICR_S->HFXOSRC & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
     76a:	f022 0201 	bic.w	r2, r2, #1
     76e:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
     770:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
     774:	2a01      	cmp	r2, #1
     776:	d1fb      	bne.n	770 <SystemInit+0x60>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
     778:	6a1a      	ldr	r2, [r3, #32]
     77a:	3201      	adds	r2, #1
     77c:	d10a      	bne.n	794 <SystemInit+0x84>
            NRF_UICR_S->HFXOCNT = (NRF_UICR_S->HFXOCNT & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
     77e:	6a1a      	ldr	r2, [r3, #32]
     780:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
     784:	f042 0220 	orr.w	r2, r2, #32
     788:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
     78a:	4a36      	ldr	r2, [pc, #216]	; (864 <CONFIG_ISR_STACK_SIZE+0x64>)
     78c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     790:	2b01      	cmp	r3, #1
     792:	d1fb      	bne.n	78c <SystemInit+0x7c>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
     794:	2200      	movs	r2, #0
     796:	4b33      	ldr	r3, [pc, #204]	; (864 <CONFIG_ISR_STACK_SIZE+0x64>)
     798:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
     79c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7a0:	2a01      	cmp	r2, #1
     7a2:	d1fb      	bne.n	79c <SystemInit+0x8c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     7a4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     7a8:	492f      	ldr	r1, [pc, #188]	; (868 <CONFIG_ISR_STACK_SIZE+0x68>)
     7aa:	4b30      	ldr	r3, [pc, #192]	; (86c <CONFIG_ISR_STACK_SIZE+0x6c>)
     7ac:	68ca      	ldr	r2, [r1, #12]
     7ae:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     7b2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     7b4:	60cb      	str	r3, [r1, #12]
     7b6:	f3bf 8f4f 	dsb	sy
    __NOP();
     7ba:	bf00      	nop
     7bc:	e7fd      	b.n	7ba <SystemInit+0xaa>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
     7be:	6a12      	ldr	r2, [r2, #32]
     7c0:	3201      	adds	r2, #1
     7c2:	d0c0      	beq.n	746 <SystemInit+0x36>
    }
    

    bool errata_6()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
     7c4:	4a2a      	ldr	r2, [pc, #168]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     7c6:	6811      	ldr	r1, [r2, #0]
     7c8:	2909      	cmp	r1, #9
     7ca:	d10a      	bne.n	7e2 <CONFIG_GPS_SIM_FIX_TIME+0x12>
            if (*(uint32_t *)0x00FF0134 == 0x01ul){
     7cc:	4929      	ldr	r1, [pc, #164]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     7ce:	6809      	ldr	r1, [r1, #0]
     7d0:	3901      	subs	r1, #1
     7d2:	2901      	cmp	r1, #1
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
     7d4:	bf9e      	ittt	ls
     7d6:	f04f 2150 	movls.w	r1, #1342197760	; 0x50005000
     7da:	f8c1 3114 	strls.w	r3, [r1, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
     7de:	f8c1 3118 	strls.w	r3, [r1, #280]	; 0x118
    }

    
    bool errata_14()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
     7e2:	6813      	ldr	r3, [r2, #0]
     7e4:	2b09      	cmp	r3, #9
     7e6:	d109      	bne.n	7fc <CONFIG_GPS_SIM_FIX_TIME+0x2c>
            if (*(uint32_t *)0x00FF0134 == 0x01ul){
     7e8:	4b22      	ldr	r3, [pc, #136]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     7ea:	681b      	ldr	r3, [r3, #0]
     7ec:	2b01      	cmp	r3, #1
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
     7ee:	bf01      	itttt	eq
     7f0:	4a21      	ldreq	r2, [pc, #132]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7f2:	6013      	streq	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
     7f4:	f6a2 2238 	subweq	r2, r2, #2616	; 0xa38
     7f8:	f8c2 3578 	streq.w	r3, [r2, #1400]	; 0x578
    }


    bool errata_15()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
     7fc:	4b1c      	ldr	r3, [pc, #112]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     7fe:	681a      	ldr	r2, [r3, #0]
     800:	2a09      	cmp	r2, #9
     802:	d10b      	bne.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
     804:	4a1b      	ldr	r2, [pc, #108]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     806:	6812      	ldr	r2, [r2, #0]
     808:	2a02      	cmp	r2, #2
     80a:	d107      	bne.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
            *((volatile uint32_t *)0x50004A38) = 0x00ul;
     80c:	2100      	movs	r1, #0
     80e:	4a1a      	ldr	r2, [pc, #104]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     810:	6011      	str	r1, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
     812:	2101      	movs	r1, #1
     814:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
     818:	f8c2 1578 	str.w	r1, [r2, #1400]	; 0x578
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
     81c:	681b      	ldr	r3, [r3, #0]
     81e:	2b09      	cmp	r3, #9
     820:	d106      	bne.n	830 <CONFIG_ISR_STACK_SIZE+0x30>
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
     822:	4b14      	ldr	r3, [pc, #80]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     824:	681b      	ldr	r3, [r3, #0]
     826:	2b02      	cmp	r3, #2
            *((volatile uint32_t *)0x5003AEE4) = 0xC;
     828:	bf02      	ittt	eq
     82a:	220c      	moveq	r2, #12
     82c:	4b13      	ldreq	r3, [pc, #76]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     82e:	601a      	streq	r2, [r3, #0]
        SCB->NSACR |= (3UL << 10);
     830:	4b0d      	ldr	r3, [pc, #52]	; (868 <CONFIG_ISR_STACK_SIZE+0x68>)
     832:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
     836:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
     83a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
     83e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     842:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
     84a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     84e:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
     852:	4b0b      	ldr	r3, [pc, #44]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     854:	4a0b      	ldr	r2, [pc, #44]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     856:	601a      	str	r2, [r3, #0]
}
     858:	4770      	bx	lr
     85a:	bf00      	nop
     85c:	e000edd0 	.word	0xe000edd0
     860:	00ff8000 	.word	0x00ff8000
     864:	50039000 	.word	0x50039000
     868:	e000ed00 	.word	0xe000ed00
     86c:	05fa0004 	.word	0x05fa0004
     870:	00ff0130 	.word	0x00ff0130
     874:	00ff0134 	.word	0x00ff0134
     878:	50004a38 	.word	0x50004a38
     87c:	5003aee4 	.word	0x5003aee4
     880:	20002674 	.word	0x20002674
     884:	03d09000 	.word	0x03d09000

00000888 <sys_reboot>:
     888:	b508      	push	{r3, lr}
     88a:	4604      	mov	r4, r0
     88c:	f04f 0220 	mov.w	r2, #32
     890:	f3ef 8311 	mrs	r3, BASEPRI
     894:	f382 8811 	msr	BASEPRI, r2
     898:	f3bf 8f6f 	isb	sy
     89c:	f002 fda7 	bl	33ee <sys_clock_disable>
     8a0:	4620      	mov	r0, r4
     8a2:	f000 ff4f 	bl	1744 <sys_arch_reboot>
     8a6:	4803      	ldr	r0, [pc, #12]	; (8b4 <sys_reboot+0x2c>)
     8a8:	f002 fd4d 	bl	3346 <printk>
     8ac:	f000 fbec 	bl	1088 <k_cpu_idle>
     8b0:	e7fc      	b.n	8ac <sys_reboot+0x24>
     8b2:	bf00      	nop
     8b4:	00003d8b 	.word	0x00003d8b

000008b8 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     8b8:	280a      	cmp	r0, #10
{
     8ba:	b538      	push	{r3, r4, r5, lr}
     8bc:	4604      	mov	r4, r0
     8be:	4d07      	ldr	r5, [pc, #28]	; (8dc <console_out+0x24>)
	if ('\n' == c) {
     8c0:	d104      	bne.n	8cc <console_out+0x14>
     8c2:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
     8c4:	210d      	movs	r1, #13
     8c6:	6843      	ldr	r3, [r0, #4]
     8c8:	685b      	ldr	r3, [r3, #4]
     8ca:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
     8cc:	6828      	ldr	r0, [r5, #0]
     8ce:	b2e1      	uxtb	r1, r4
     8d0:	6843      	ldr	r3, [r0, #4]
     8d2:	685b      	ldr	r3, [r3, #4]
     8d4:	4798      	blx	r3

	return c;
}
     8d6:	4620      	mov	r0, r4
     8d8:	bd38      	pop	{r3, r4, r5, pc}
     8da:	bf00      	nop
     8dc:	20000008 	.word	0x20000008

000008e0 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
     8e0:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
     8e2:	4c04      	ldr	r4, [pc, #16]	; (8f4 <uart_console_hook_install+0x14>)
     8e4:	4620      	mov	r0, r4
     8e6:	f001 f8cf 	bl	1a88 <__stdout_hook_install>
	__printk_hook_install(console_out);
     8ea:	4620      	mov	r0, r4
}
     8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
     8f0:	f7ff bee4 	b.w	6bc <__printk_hook_install>
     8f4:	000008b9 	.word	0x000008b9

000008f8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     8f8:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
     8fa:	4804      	ldr	r0, [pc, #16]	; (90c <uart_console_init+0x14>)
     8fc:	f001 f9da 	bl	1cb4 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     900:	4b03      	ldr	r3, [pc, #12]	; (910 <uart_console_init+0x18>)
     902:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
     904:	f7ff ffec 	bl	8e0 <uart_console_hook_install>

	return 0;
}
     908:	2000      	movs	r0, #0
     90a:	bd08      	pop	{r3, pc}
     90c:	00003db4 	.word	0x00003db4
     910:	20000008 	.word	0x20000008

00000914 <m16src_stop>:
		return -EINPROGRESS;
	}
}

static int m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
     914:	b510      	push	{r4, lr}
	__asm__ volatile(
     916:	f04f 0320 	mov.w	r3, #32
     91a:	f3ef 8211 	mrs	r2, BASEPRI
     91e:	f383 8811 	msr	BASEPRI, r3
     922:	f3bf 8f6f 	isb	sy
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
     926:	4c15      	ldr	r4, [pc, #84]	; (97c <m16src_stop+0x68>)
     928:	7823      	ldrb	r3, [r4, #0]
     92a:	b933      	cbnz	r3, 93a <m16src_stop+0x26>
	__asm__ volatile(
     92c:	f382 8811 	msr	BASEPRI, r2
     930:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		return -EALREADY;
     934:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0U;

	return 0;
}
     938:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
     93a:	3b01      	subs	r3, #1
     93c:	b2db      	uxtb	r3, r3
     93e:	7023      	strb	r3, [r4, #0]
     940:	b133      	cbz	r3, 950 <m16src_stop+0x3c>
     942:	f382 8811 	msr	BASEPRI, r2
     946:	f3bf 8f6f 	isb	sy
		return -EBUSY;
     94a:	f06f 000f 	mvn.w	r0, #15
     94e:	e7f3      	b.n	938 <m16src_stop+0x24>
	if (m16src_grd) {
     950:	4b0b      	ldr	r3, [pc, #44]	; (980 <m16src_stop+0x6c>)
     952:	2101      	movs	r1, #1
     954:	7818      	ldrb	r0, [r3, #0]
     956:	b138      	cbz	r0, 968 <m16src_stop+0x54>
		m16src_ref++;
     958:	7021      	strb	r1, [r4, #0]
     95a:	f382 8811 	msr	BASEPRI, r2
     95e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
     962:	f06f 000a 	mvn.w	r0, #10
     966:	e7e7      	b.n	938 <m16src_stop+0x24>
	m16src_grd = 1U;
     968:	7019      	strb	r1, [r3, #0]
     96a:	f382 8811 	msr	BASEPRI, r2
     96e:	f3bf 8f6f 	isb	sy
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
     972:	4a04      	ldr	r2, [pc, #16]	; (984 <m16src_stop+0x70>)
     974:	6011      	str	r1, [r2, #0]
	m16src_grd = 0U;
     976:	7018      	strb	r0, [r3, #0]
	return 0;
     978:	e7de      	b.n	938 <m16src_stop+0x24>
     97a:	bf00      	nop
     97c:	2000191e 	.word	0x2000191e
     980:	2000191d 	.word	0x2000191d
     984:	50005004 	.word	0x50005004

00000988 <k32src_start>:

static int k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
     988:	b510      	push	{r4, lr}
	__asm__ volatile(
     98a:	f04f 0220 	mov.w	r2, #32
     98e:	f3ef 8311 	mrs	r3, BASEPRI
     992:	f382 8811 	msr	BASEPRI, r2
     996:	f3bf 8f6f 	isb	sy
	 * initialized flag.
	 */

	imask = irq_lock();

	if (k32src_initialized) {
     99a:	4c14      	ldr	r4, [pc, #80]	; (9ec <k32src_start+0x64>)
     99c:	7820      	ldrb	r0, [r4, #0]
     99e:	b198      	cbz	r0, 9c8 <k32src_start+0x40>
	__asm__ volatile(
     9a0:	f383 8811 	msr	BASEPRI, r3
     9a4:	f3bf 8f6f 	isb	sy
		}
	}
#endif /* NRF_CLOCK_HAS_CALIBRATION */

lf_already_started:
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
     9a8:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     9ac:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	       CLOCK_LFCLKSTAT_STATE_Msk;
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
     9b0:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
     9b4:	f003 0303 	and.w	r3, r3, #3
     9b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
     9bc:	4393      	bics	r3, r2
		return 0;
	} else {
		return -EINPROGRESS;
	}
}
     9be:	bf14      	ite	ne
     9c0:	f06f 0043 	mvnne.w	r0, #67	; 0x43
     9c4:	2000      	moveq	r0, #0
     9c6:	bd10      	pop	{r4, pc}
	k32src_initialized = 1U;
     9c8:	2201      	movs	r2, #1
     9ca:	7022      	strb	r2, [r4, #0]
     9cc:	f383 8811 	msr	BASEPRI, r3
     9d0:	f3bf 8f6f 	isb	sy
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     9d4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     9d8:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
     9dc:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
     9e0:	2102      	movs	r1, #2
     9e2:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
     9e6:	609a      	str	r2, [r3, #8]
     9e8:	e7de      	b.n	9a8 <k32src_start+0x20>
     9ea:	bf00      	nop
     9ec:	2000191c 	.word	0x2000191c

000009f0 <m16src_start>:
{
     9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
     9f2:	f04f 0220 	mov.w	r2, #32
     9f6:	f3ef 8311 	mrs	r3, BASEPRI
     9fa:	f382 8811 	msr	BASEPRI, r2
     9fe:	f3bf 8f6f 	isb	sy
	if (m16src_ref++) {
     a02:	4a29      	ldr	r2, [pc, #164]	; (aa8 <m16src_start+0xb8>)
     a04:	7810      	ldrb	r0, [r2, #0]
     a06:	1c44      	adds	r4, r0, #1
     a08:	7014      	strb	r4, [r2, #0]
     a0a:	b180      	cbz	r0, a2e <m16src_start+0x3e>
	__asm__ volatile(
     a0c:	f383 8811 	msr	BASEPRI, r3
     a10:	f3bf 8f6f 	isb	sy
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
     a14:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     a18:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
     a1c:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
     a20:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
     a24:	bf0c      	ite	eq
     a26:	2000      	moveq	r0, #0
     a28:	f06f 0043 	mvnne.w	r0, #67	; 0x43
     a2c:	e009      	b.n	a42 <m16src_start+0x52>
	if (m16src_grd) {
     a2e:	4d1f      	ldr	r5, [pc, #124]	; (aac <m16src_start+0xbc>)
     a30:	782f      	ldrb	r7, [r5, #0]
     a32:	b13f      	cbz	r7, a44 <m16src_start+0x54>
		m16src_ref--;
     a34:	7010      	strb	r0, [r2, #0]
     a36:	f383 8811 	msr	BASEPRI, r3
     a3a:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
     a3e:	f06f 000a 	mvn.w	r0, #10
}
     a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1U;
     a44:	2601      	movs	r6, #1
     a46:	702e      	strb	r6, [r5, #0]
     a48:	f383 8811 	msr	BASEPRI, r3
     a4c:	f3bf 8f6f 	isb	sy
     a50:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
	if (blocking) {
     a54:	b321      	cbz	r1, aa0 <m16src_start+0xb0>
		irq_disable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
     a56:	2005      	movs	r0, #5
     a58:	f000 fd54 	bl	1504 <z_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     a5c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
     a60:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
     a64:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
     a68:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
     a6a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
     a6e:	b19a      	cbz	r2, a98 <m16src_start+0xa8>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     a70:	2200      	movs	r2, #0
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
     a72:	07db      	lsls	r3, r3, #31
    NRF_CLOCK->INTENCLR = int_mask;
     a74:	bf58      	it	pl
     a76:	2301      	movpl	r3, #1
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     a78:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a7c:	f04f 0220 	mov.w	r2, #32
     a80:	bf58      	it	pl
     a82:	f8c4 3308 	strpl.w	r3, [r4, #776]	; 0x308
     a86:	4b0a      	ldr	r3, [pc, #40]	; (ab0 <m16src_start+0xc0>)
		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
     a88:	2005      	movs	r0, #5
     a8a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     a8e:	f000 fd29 	bl	14e4 <z_arch_irq_enable>
	m16src_grd = 0U;
     a92:	2300      	movs	r3, #0
     a94:	702b      	strb	r3, [r5, #0]
     a96:	e7bd      	b.n	a14 <m16src_start+0x24>
			__WFE();
     a98:	bf20      	wfe
			__SEV();
     a9a:	bf40      	sev
			__WFE();
     a9c:	bf20      	wfe
     a9e:	e7e4      	b.n	a6a <m16src_start+0x7a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     aa0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
     aa4:	6026      	str	r6, [r4, #0]
     aa6:	e7f4      	b.n	a92 <m16src_start+0xa2>
     aa8:	2000191e 	.word	0x2000191e
     aac:	2000191d 	.word	0x2000191d
     ab0:	e000e100 	.word	0xe000e100

00000ab4 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
     ab4:	2200      	movs	r2, #0
     ab6:	4b10      	ldr	r3, [pc, #64]	; (af8 <rtc1_nrf_isr+0x44>)
{
     ab8:	b410      	push	{r4}
	RTC->EVENTS_COMPARE[0] = 0;
     aba:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
     abe:	f04f 0220 	mov.w	r2, #32
     ac2:	f3ef 8411 	mrs	r4, BASEPRI
     ac6:	f382 8811 	msr	BASEPRI, r2
     aca:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     ace:	4a0b      	ldr	r2, [pc, #44]	; (afc <rtc1_nrf_isr+0x48>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
     ad0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
     ad4:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
     ad6:	1a40      	subs	r0, r0, r1

	last_count += dticks * CYC_PER_TICK;
     ad8:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
     adc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     ae0:	440b      	add	r3, r1
     ae2:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
     ae4:	f384 8811 	msr	BASEPRI, r4
     ae8:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     aec:	f3c0 200f 	ubfx	r0, r0, #8, #16
}
     af0:	f85d 4b04 	ldr.w	r4, [sp], #4
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     af4:	f001 bcd6 	b.w	24a4 <z_clock_announce>
     af8:	50015000 	.word	0x50015000
     afc:	2000000c 	.word	0x2000000c

00000b00 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
     b00:	b538      	push	{r3, r4, r5, lr}
     b02:	481a      	ldr	r0, [pc, #104]	; (b6c <z_clock_driver_init+0x6c>)
     b04:	f001 f8d6 	bl	1cb4 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_NORDIC_NRF_CLOCK_0_LABEL "_32K");
	if (!clock) {
     b08:	b360      	cbz	r0, b64 <z_clock_driver_init+0x64>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
     b0a:	6843      	ldr	r3, [r0, #4]
     b0c:	2102      	movs	r1, #2
     b0e:	681b      	ldr	r3, [r3, #0]
     b10:	4798      	blx	r3
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     b12:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
     b14:	f44f 7380 	mov.w	r3, #256	; 0x100
    p_reg->PRESCALER = val;
     b18:	4d15      	ldr	r5, [pc, #84]	; (b70 <z_clock_driver_init+0x70>)
     b1a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     b1e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
     b22:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
     b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     b2a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     b2e:	4b11      	ldr	r3, [pc, #68]	; (b74 <z_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
     b30:	2101      	movs	r1, #1
     b32:	601c      	str	r4, [r3, #0]
     b34:	4b10      	ldr	r3, [pc, #64]	; (b78 <z_clock_driver_init+0x78>)
     b36:	2015      	movs	r0, #21
     b38:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     b3c:	4622      	mov	r2, r4
     b3e:	f000 fcf5 	bl	152c <z_irq_priority_set>
	irq_enable(RTC1_IRQn);
     b42:	2015      	movs	r0, #21
     b44:	f000 fcce 	bl	14e4 <z_arch_irq_enable>
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     b48:	2301      	movs	r3, #1

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
     b4a:	4620      	mov	r0, r4
     b4c:	4a0b      	ldr	r2, [pc, #44]	; (b7c <z_clock_driver_init+0x7c>)
     b4e:	6013      	str	r3, [r2, #0]
     b50:	602b      	str	r3, [r5, #0]
     return p_reg->COUNTER;
     b52:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
     b56:	f503 7380 	add.w	r3, r3, #256	; 0x100
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     b5a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     b5e:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
     b62:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
     b64:	f04f 30ff 	mov.w	r0, #4294967295
     b68:	e7fb      	b.n	b62 <z_clock_driver_init+0x62>
     b6a:	bf00      	nop
     b6c:	00003dbb 	.word	0x00003dbb
     b70:	50015000 	.word	0x50015000
     b74:	50015140 	.word	0x50015140
     b78:	e000e100 	.word	0xe000e100
     b7c:	50015008 	.word	0x50015008

00000b80 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
     b80:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
     b82:	f64f 76fe 	movw	r6, #65534	; 0xfffe
     b86:	f1b0 3fff 	cmp.w	r0, #4294967295
     b8a:	bf08      	it	eq
     b8c:	4630      	moveq	r0, r6
	__asm__ volatile(
     b8e:	f04f 0320 	mov.w	r3, #32
     b92:	f3ef 8411 	mrs	r4, BASEPRI
     b96:	f383 8811 	msr	BASEPRI, r3
     b9a:	f3bf 8f6f 	isb	sy
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     b9e:	1e42      	subs	r2, r0, #1
     ba0:	42b2      	cmp	r2, r6
     ba2:	bfa8      	it	ge
     ba4:	4632      	movge	r2, r6
     return p_reg->COUNTER;
     ba6:	4d10      	ldr	r5, [pc, #64]	; (be8 <z_clock_set_timeout+0x68>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, t = counter();

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
     ba8:	4b10      	ldr	r3, [pc, #64]	; (bec <z_clock_set_timeout+0x6c>)
     baa:	f8d5 1504 	ldr.w	r1, [r5, #1284]	; 0x504
     bae:	681b      	ldr	r3, [r3, #0]
     bb0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	return (a - b) & COUNTER_MAX;
     bb4:	1ac8      	subs	r0, r1, r3
     bb6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
     bba:	30ff      	adds	r0, #255	; 0xff
     bbc:	eb00 2002 	add.w	r0, r0, r2, lsl #8
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
     bc0:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
	cyc += last_count;
     bc4:	4403      	add	r3, r0
	return (a - b) & COUNTER_MAX;
     bc6:	1a59      	subs	r1, r3, r1
     bc8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

	if (counter_sub(cyc, t) < MIN_DELAY) {
     bcc:	291f      	cmp	r1, #31
		cyc += CYC_PER_TICK;
     bce:	bf98      	it	ls
     bd0:	f503 7380 	addls.w	r3, r3, #256	; 0x100
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     bd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     bd8:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	__asm__ volatile(
     bdc:	f384 8811 	msr	BASEPRI, r4
     be0:	f3bf 8f6f 	isb	sy
	}

	set_comparator(cyc);
	k_spin_unlock(&lock, key);
#endif
}
     be4:	bd70      	pop	{r4, r5, r6, pc}
     be6:	bf00      	nop
     be8:	50015000 	.word	0x50015000
     bec:	2000000c 	.word	0x2000000c

00000bf0 <z_clock_elapsed>:
	__asm__ volatile(
     bf0:	f04f 0220 	mov.w	r2, #32
     bf4:	f3ef 8311 	mrs	r3, BASEPRI
     bf8:	f382 8811 	msr	BASEPRI, r2
     bfc:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     c00:	4a06      	ldr	r2, [pc, #24]	; (c1c <z_clock_elapsed+0x2c>)
     c02:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     c06:	4a06      	ldr	r2, [pc, #24]	; (c20 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
     c08:	6812      	ldr	r2, [r2, #0]
     c0a:	1a80      	subs	r0, r0, r2
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     c0c:	f3c0 200f 	ubfx	r0, r0, #8, #16
	__asm__ volatile(
     c10:	f383 8811 	msr	BASEPRI, r3
     c14:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     c18:	4770      	bx	lr
     c1a:	bf00      	nop
     c1c:	50015000 	.word	0x50015000
     c20:	2000000c 	.word	0x2000000c

00000c24 <spm_config_peripheral.constprop.1>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(u8_t id, bool dma_present)
     c24:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
     c26:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     c28:	2b00      	cmp	r3, #0
     c2a:	db0c      	blt.n	c46 <spm_config_peripheral.constprop.1+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c2c:	2201      	movs	r2, #1
     c2e:	f000 011f 	and.w	r1, r0, #31
     c32:	408a      	lsls	r2, r1
     c34:	095b      	lsrs	r3, r3, #5
     c36:	4910      	ldr	r1, [pc, #64]	; (c78 <spm_config_peripheral.constprop.1+0x54>)
     c38:	3320      	adds	r3, #32
     c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
     c3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c42:	f3bf 8f6f 	isb	sy
     c46:	0083      	lsls	r3, r0, #2
     c48:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
     c4c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     c50:	2831      	cmp	r0, #49	; 0x31
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
     c52:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     c56:	d006      	beq.n	c66 <spm_config_peripheral.constprop.1+0x42>
	return present && (usel || split);
     c58:	2a00      	cmp	r2, #0
     c5a:	da07      	bge.n	c6c <spm_config_peripheral.constprop.1+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
     c5c:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
     c60:	3a02      	subs	r2, #2

	if (usel_or_split(id)) {
     c62:	2a01      	cmp	r2, #1
     c64:	d802      	bhi.n	c6c <spm_config_peripheral.constprop.1+0x48>
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
     c66:	4a05      	ldr	r2, [pc, #20]	; (c7c <spm_config_peripheral.constprop.1+0x58>)
     c68:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, 0);
     c6c:	2100      	movs	r1, #0
     c6e:	f002 fbfb 	bl	3468 <irq_target_state_set>
	return 0;
}
     c72:	2000      	movs	r0, #0
     c74:	bd08      	pop	{r3, pc}
     c76:	bf00      	nop
     c78:	e000e100 	.word	0xe000e100
     c7c:	80000100 	.word	0x80000100

00000c80 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
     c80:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	u32_t *vtor_ns = (u32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     c82:	f44f 4440 	mov.w	r4, #49152	; 0xc000
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     c86:	f24c 0504 	movw	r5, #49156	; 0xc004
{
     c8a:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
     c8c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     c90:	482c      	ldr	r0, [pc, #176]	; (d44 <spm_jump+0xc4>)
     c92:	f002 fb58 	bl	3346 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     c96:	6821      	ldr	r1, [r4, #0]
     c98:	482b      	ldr	r0, [pc, #172]	; (d48 <spm_jump+0xc8>)
     c9a:	f002 fb54 	bl	3346 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     c9e:	6829      	ldr	r1, [r5, #0]
     ca0:	482a      	ldr	r0, [pc, #168]	; (d4c <spm_jump+0xcc>)
     ca2:	f002 fb50 	bl	3346 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     ca6:	2210      	movs	r2, #16
     ca8:	2100      	movs	r1, #0
     caa:	4668      	mov	r0, sp
     cac:	f002 fc8b 	bl	35c6 <memset>
		.vtor_ns = (u32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
     cb0:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
     cb2:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     cb4:	9300      	str	r3, [sp, #0]
     cb6:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
     cb8:	f7ff fc34 	bl	524 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
     cbc:	2001      	movs	r0, #1
     cbe:	f7ff fc61 	bl	584 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
     cc2:	2000      	movs	r0, #0
     cc4:	f7ff fc4a 	bl	55c <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(1);
     cc8:	2001      	movs	r0, #1
     cca:	f7ff fc6f 	bl	5ac <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
     cce:	2101      	movs	r1, #1
     cd0:	2000      	movs	r0, #0
     cd2:	f7ff fc89 	bl	5e8 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
     cd6:	f7ff fc7d 	bl	5d4 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     cda:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
     cdc:	481c      	ldr	r0, [pc, #112]	; (d50 <spm_jump+0xd0>)
     cde:	f002 fb32 	bl	3346 <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
     ce2:	2008      	movs	r0, #8
     ce4:	f7ff ff9e 	bl	c24 <spm_config_peripheral.constprop.1>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     ce8:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
     cec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     cf0:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
     cf4:	0864      	lsrs	r4, r4, #1
     cf6:	0064      	lsls	r4, r4, #1
     cf8:	4620      	mov	r0, r4
     cfa:	4621      	mov	r1, r4
     cfc:	4622      	mov	r2, r4
     cfe:	4623      	mov	r3, r4
     d00:	ed9f 0a14 	vldr	s0, [pc, #80]	; d54 <spm_jump+0xd4>
     d04:	eddf 0a13 	vldr	s1, [pc, #76]	; d54 <spm_jump+0xd4>
     d08:	ed9f 1a12 	vldr	s2, [pc, #72]	; d54 <spm_jump+0xd4>
     d0c:	eddf 1a11 	vldr	s3, [pc, #68]	; d54 <spm_jump+0xd4>
     d10:	ed9f 2a10 	vldr	s4, [pc, #64]	; d54 <spm_jump+0xd4>
     d14:	eddf 2a0f 	vldr	s5, [pc, #60]	; d54 <spm_jump+0xd4>
     d18:	ed9f 3a0e 	vldr	s6, [pc, #56]	; d54 <spm_jump+0xd4>
     d1c:	eddf 3a0d 	vldr	s7, [pc, #52]	; d54 <spm_jump+0xd4>
     d20:	ed9f 4a0c 	vldr	s8, [pc, #48]	; d54 <spm_jump+0xd4>
     d24:	eddf 4a0b 	vldr	s9, [pc, #44]	; d54 <spm_jump+0xd4>
     d28:	ed9f 5a0a 	vldr	s10, [pc, #40]	; d54 <spm_jump+0xd4>
     d2c:	eddf 5a09 	vldr	s11, [pc, #36]	; d54 <spm_jump+0xd4>
     d30:	ed9f 6a08 	vldr	s12, [pc, #32]	; d54 <spm_jump+0xd4>
     d34:	eddf 6a07 	vldr	s13, [pc, #28]	; d54 <spm_jump+0xd4>
     d38:	ed9f 7a06 	vldr	s14, [pc, #24]	; d54 <spm_jump+0xd4>
     d3c:	eddf 7a05 	vldr	s15, [pc, #20]	; d54 <spm_jump+0xd4>
     d40:	f7ff fbc2 	bl	4c8 <__gnu_cmse_nonsecure_call>
     d44:	00003eec 	.word	0x00003eec
     d48:	00003f03 	.word	0x00003f03
     d4c:	00003f18 	.word	0x00003f18
     d50:	00003f36 	.word	0x00003f36
     d54:	00000000 	.word	0x00000000

00000d58 <spm_config>:
		      (u32_t)reset_ns);
	}
}

void spm_config(void)
{
     d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash region\t\tDomain\t\tPermissions\n");
     d5c:	4869      	ldr	r0, [pc, #420]	; (f04 <spm_config+0x1ac>)
     d5e:	f002 faf2 	bl	3346 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(flash_perm); i++) {
     d62:	2100      	movs	r1, #0
		NRF_SPU->FLASHREGION[i].PERM = flash_perm[i];
     d64:	f8df 81e4 	ldr.w	r8, [pc, #484]	; f4c <spm_config+0x1f4>
     d68:	4f67      	ldr	r7, [pc, #412]	; (f08 <spm_config+0x1b0>)
		PRINT("%c", flash_perm[i] & FLASH_READ  ? 'r' : '-');
     d6a:	4d68      	ldr	r5, [pc, #416]	; (f0c <spm_config+0x1b4>)
		NRF_SPU->FLASHREGION[i].PERM = flash_perm[i];
     d6c:	f858 4021 	ldr.w	r4, [r8, r1, lsl #2]
     d70:	03ca      	lsls	r2, r1, #15
     d72:	f501 73c0 	add.w	r3, r1, #384	; 0x180
     d76:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
		PRINT("%02u 0x%05x 0x%05x \t", i, 32 * KB(i), 32 * KB(i + 1));
     d7a:	4865      	ldr	r0, [pc, #404]	; (f10 <spm_config+0x1b8>)
     d7c:	f502 4300 	add.w	r3, r2, #32768	; 0x8000
     d80:	1c4e      	adds	r6, r1, #1
     d82:	f002 fae0 	bl	3346 <printk>
		PRINT("%s", flash_perm[i] & FLASH_SECURE ? "Secure\t\t" :
     d86:	4b63      	ldr	r3, [pc, #396]	; (f14 <spm_config+0x1bc>)
     d88:	f014 0f10 	tst.w	r4, #16
     d8c:	4962      	ldr	r1, [pc, #392]	; (f18 <spm_config+0x1c0>)
     d8e:	4863      	ldr	r0, [pc, #396]	; (f1c <spm_config+0x1c4>)
     d90:	bf08      	it	eq
     d92:	4619      	moveq	r1, r3
     d94:	f002 fad7 	bl	3346 <printk>
		PRINT("%c", flash_perm[i] & FLASH_READ  ? 'r' : '-');
     d98:	f014 0f04 	tst.w	r4, #4
     d9c:	bf14      	ite	ne
     d9e:	2172      	movne	r1, #114	; 0x72
     da0:	212d      	moveq	r1, #45	; 0x2d
     da2:	4628      	mov	r0, r5
     da4:	f002 facf 	bl	3346 <printk>
		PRINT("%c", flash_perm[i] & FLASH_WRITE ? 'w' : '-');
     da8:	f014 0f02 	tst.w	r4, #2
     dac:	bf14      	ite	ne
     dae:	2177      	movne	r1, #119	; 0x77
     db0:	212d      	moveq	r1, #45	; 0x2d
     db2:	4628      	mov	r0, r5
     db4:	f002 fac7 	bl	3346 <printk>
		PRINT("%c", flash_perm[i] & FLASH_EXEC  ? 'x' : '-');
     db8:	f014 0f01 	tst.w	r4, #1
     dbc:	bf14      	ite	ne
     dbe:	2178      	movne	r1, #120	; 0x78
     dc0:	212d      	moveq	r1, #45	; 0x2d
     dc2:	4628      	mov	r0, r5
     dc4:	f002 fabf 	bl	3346 <printk>
		PRINT("%c", flash_perm[i] & FLASH_LOCK  ? 'l' : '-');
     dc8:	f414 7f80 	tst.w	r4, #256	; 0x100
     dcc:	bf14      	ite	ne
     dce:	216c      	movne	r1, #108	; 0x6c
     dd0:	212d      	moveq	r1, #45	; 0x2d
     dd2:	4628      	mov	r0, r5
     dd4:	f002 fab7 	bl	3346 <printk>
		PRINT("\n");
     dd8:	4851      	ldr	r0, [pc, #324]	; (f20 <spm_config+0x1c8>)
     dda:	f002 fab4 	bl	3346 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(flash_perm); i++) {
     dde:	2e20      	cmp	r6, #32
     de0:	4631      	mov	r1, r6
     de2:	d1c3      	bne.n	d6c <spm_config+0x14>
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
     de4:	4b4f      	ldr	r3, [pc, #316]	; (f24 <spm_config+0x1cc>)
	NRF_SPU->FLASHNSC[0].REGION = FLASH_NSC_REGION_FROM_ADDR(__sg_start);
     de6:	4c48      	ldr	r4, [pc, #288]	; (f08 <spm_config+0x1b0>)
     de8:	f3c3 32c4 	ubfx	r2, r3, #15, #5
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
     dec:	f3c3 030e 	ubfx	r3, r3, #0, #15
     df0:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
	NRF_SPU->FLASHNSC[0].SIZE = FLASH_NSC_SIZE_REG(nsc_size);
     df4:	f3c3 1343 	ubfx	r3, r3, #5, #4
	NRF_SPU->FLASHNSC[0].REGION = FLASH_NSC_REGION_FROM_ADDR(__sg_start);
     df8:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
	NRF_SPU->FLASHNSC[0].SIZE = FLASH_NSC_SIZE_REG(nsc_size);
     dfc:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
     e00:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
     e04:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
     e08:	4847      	ldr	r0, [pc, #284]	; (f28 <spm_config+0x1d0>)
     e0a:	0152      	lsls	r2, r2, #5
     e0c:	f002 fa9b 	bl	3346 <printk>
	PRINT("\n");
     e10:	4843      	ldr	r0, [pc, #268]	; (f20 <spm_config+0x1c8>)
     e12:	f002 fa98 	bl	3346 <printk>
	PRINT("\n");
     e16:	4842      	ldr	r0, [pc, #264]	; (f20 <spm_config+0x1c8>)
     e18:	f002 fa95 	bl	3346 <printk>
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
     e1c:	4843      	ldr	r0, [pc, #268]	; (f2c <spm_config+0x1d4>)
     e1e:	f002 fa92 	bl	3346 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(sram_perm); i++) {
     e22:	2100      	movs	r1, #0
		NRF_SPU->RAMREGION[i].PERM = sram_perm[i];
     e24:	f8df 8128 	ldr.w	r8, [pc, #296]	; f50 <spm_config+0x1f8>
		PRINT("%c", sram_perm[i] & SRAM_READ  ? 'r' : '-');
     e28:	4e38      	ldr	r6, [pc, #224]	; (f0c <spm_config+0x1b4>)
		NRF_SPU->RAMREGION[i].PERM = sram_perm[i];
     e2a:	f858 5021 	ldr.w	r5, [r8, r1, lsl #2]
     e2e:	034a      	lsls	r2, r1, #13
     e30:	f501 73e0 	add.w	r3, r1, #448	; 0x1c0
     e34:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
		PRINT("%02u 0x%05x 0x%05x\t", i, 8 * KB(i), 8 * KB(i + 1));
     e38:	483d      	ldr	r0, [pc, #244]	; (f30 <spm_config+0x1d8>)
     e3a:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
     e3e:	1c4f      	adds	r7, r1, #1
     e40:	f002 fa81 	bl	3346 <printk>
		PRINT("%s", sram_perm[i] & SRAM_SECURE ? "Secure\t\t" :
     e44:	4b33      	ldr	r3, [pc, #204]	; (f14 <spm_config+0x1bc>)
     e46:	f015 0f10 	tst.w	r5, #16
     e4a:	4933      	ldr	r1, [pc, #204]	; (f18 <spm_config+0x1c0>)
     e4c:	4833      	ldr	r0, [pc, #204]	; (f1c <spm_config+0x1c4>)
     e4e:	bf08      	it	eq
     e50:	4619      	moveq	r1, r3
     e52:	f002 fa78 	bl	3346 <printk>
		PRINT("%c", sram_perm[i] & SRAM_READ  ? 'r' : '-');
     e56:	f015 0f04 	tst.w	r5, #4
     e5a:	bf14      	ite	ne
     e5c:	2172      	movne	r1, #114	; 0x72
     e5e:	212d      	moveq	r1, #45	; 0x2d
     e60:	4630      	mov	r0, r6
     e62:	f002 fa70 	bl	3346 <printk>
		PRINT("%c", sram_perm[i] & SRAM_WRITE ? 'w' : '-');
     e66:	f015 0f02 	tst.w	r5, #2
     e6a:	bf14      	ite	ne
     e6c:	2177      	movne	r1, #119	; 0x77
     e6e:	212d      	moveq	r1, #45	; 0x2d
     e70:	4630      	mov	r0, r6
     e72:	f002 fa68 	bl	3346 <printk>
		PRINT("%c", sram_perm[i] & SRAM_EXEC  ? 'x' : '-');
     e76:	f015 0f01 	tst.w	r5, #1
     e7a:	bf14      	ite	ne
     e7c:	2178      	movne	r1, #120	; 0x78
     e7e:	212d      	moveq	r1, #45	; 0x2d
     e80:	4630      	mov	r0, r6
     e82:	f002 fa60 	bl	3346 <printk>
		PRINT("%c", sram_perm[i] & SRAM_LOCK  ? 'l' : '-');
     e86:	f415 7f80 	tst.w	r5, #256	; 0x100
     e8a:	bf14      	ite	ne
     e8c:	216c      	movne	r1, #108	; 0x6c
     e8e:	212d      	moveq	r1, #45	; 0x2d
     e90:	4630      	mov	r0, r6
     e92:	f002 fa58 	bl	3346 <printk>
		PRINT("\n");
     e96:	4822      	ldr	r0, [pc, #136]	; (f20 <spm_config+0x1c8>)
     e98:	f002 fa55 	bl	3346 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(sram_perm); i++) {
     e9c:	2f20      	cmp	r7, #32
     e9e:	4639      	mov	r1, r7
     ea0:	d1c3      	bne.n	e2a <spm_config+0xd2>
		NRF_SPU->GPIOPORT[0].PERM = 0;
     ea2:	2400      	movs	r4, #0
	PRINT("\n");
     ea4:	481e      	ldr	r0, [pc, #120]	; (f20 <spm_config+0x1c8>)
     ea6:	f002 fa4e 	bl	3346 <printk>
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
     eaa:	4822      	ldr	r0, [pc, #136]	; (f34 <spm_config+0x1dc>)
     eac:	f002 fa4b 	bl	3346 <printk>
		NRF_SPU->GPIOPORT[0].PERM = 0;
     eb0:	4b15      	ldr	r3, [pc, #84]	; (f08 <spm_config+0x1b0>)
		PRINT("%02u %s\t\t%s", i, periph[i].name,
     eb2:	4d21      	ldr	r5, [pc, #132]	; (f38 <spm_config+0x1e0>)
     eb4:	f8df 809c 	ldr.w	r8, [pc, #156]	; f54 <spm_config+0x1fc>
     eb8:	f8df 909c 	ldr.w	r9, [pc, #156]	; f58 <spm_config+0x200>
		NRF_SPU->GPIOPORT[0].PERM = 0;
     ebc:	f8c3 44c0 	str.w	r4, [r3, #1216]	; 0x4c0
     ec0:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
		PRINT("%02u %s\t\t%s", i, periph[i].name,
     ec4:	7977      	ldrb	r7, [r6, #5]
     ec6:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
     eca:	2f00      	cmp	r7, #0
     ecc:	bf14      	ite	ne
     ece:	4643      	movne	r3, r8
     ed0:	464b      	moveq	r3, r9
     ed2:	4621      	mov	r1, r4
     ed4:	4819      	ldr	r0, [pc, #100]	; (f3c <spm_config+0x1e4>)
     ed6:	f002 fa36 	bl	3346 <printk>
		if (!periph[i].nonsecure) {
     eda:	b957      	cbnz	r7, ef2 <spm_config+0x19a>
			PRINT("\tSKIP\n");
     edc:	4818      	ldr	r0, [pc, #96]	; (f40 <spm_config+0x1e8>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     ede:	3401      	adds	r4, #1
			PRINT("\tOK\n");
     ee0:	f002 fa31 	bl	3346 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     ee4:	2c16      	cmp	r4, #22
     ee6:	d1eb      	bne.n	ec0 <spm_config+0x168>
	PRINT("\n");
     ee8:	480d      	ldr	r0, [pc, #52]	; (f20 <spm_config+0x1c8>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
     eea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
     eee:	f002 ba2a 	b.w	3346 <printk>
		err = spm_config_peripheral(periph[i].id, false);
     ef2:	7930      	ldrb	r0, [r6, #4]
     ef4:	f7ff fe96 	bl	c24 <spm_config_peripheral.constprop.1>
		if (err) {
     ef8:	b108      	cbz	r0, efe <spm_config+0x1a6>
			PRINT("\tERROR\n");
     efa:	4812      	ldr	r0, [pc, #72]	; (f44 <spm_config+0x1ec>)
     efc:	e7ef      	b.n	ede <spm_config+0x186>
			PRINT("\tOK\n");
     efe:	4812      	ldr	r0, [pc, #72]	; (f48 <spm_config+0x1f0>)
     f00:	e7ed      	b.n	ede <spm_config+0x186>
     f02:	bf00      	nop
     f04:	00003df9 	.word	0x00003df9
     f08:	50003000 	.word	0x50003000
     f0c:	00003e31 	.word	0x00003e31
     f10:	00003e1c 	.word	0x00003e1c
     f14:	00003de2 	.word	0x00003de2
     f18:	00003dd9 	.word	0x00003dd9
     f1c:	00003ed5 	.word	0x00003ed5
     f20:	000042f1 	.word	0x000042f1
     f24:	00007fe0 	.word	0x00007fe0
     f28:	00003e34 	.word	0x00003e34
     f2c:	00003e7a 	.word	0x00003e7a
     f30:	00003e9c 	.word	0x00003e9c
     f34:	00003eb0 	.word	0x00003eb0
     f38:	00003ba4 	.word	0x00003ba4
     f3c:	00003ecc 	.word	0x00003ecc
     f40:	00003ed8 	.word	0x00003ed8
     f44:	00003edf 	.word	0x00003edf
     f48:	00003ee7 	.word	0x00003ee7
     f4c:	00003b24 	.word	0x00003b24
     f50:	00003c54 	.word	0x00003c54
     f54:	00003dee 	.word	0x00003dee
     f58:	00003de6 	.word	0x00003de6

00000f5c <__acle_se_spm_request_random_number>:
     f5c:	2990      	cmp	r1, #144	; 0x90
     f5e:	b508      	push	{r3, lr}
     f60:	4613      	mov	r3, r2
     f62:	d139      	bne.n	fd8 <__acle_se_spm_request_random_number+0x7c>
     f64:	460a      	mov	r2, r1
     f66:	4601      	mov	r1, r0
     f68:	481d      	ldr	r0, [pc, #116]	; (fe0 <__acle_se_spm_request_random_number+0x84>)
     f6a:	f001 fb05 	bl	2578 <mbedtls_hardware_poll>
     f6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     f72:	4671      	mov	r1, lr
     f74:	4672      	mov	r2, lr
     f76:	4673      	mov	r3, lr
     f78:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     f7c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     f80:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     f84:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     f88:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     f8c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     f90:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     f94:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     f98:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     f9c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     fa0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     fa4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     fa8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     fac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     fb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     fb4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     fb8:	f38e 8c00 	msr	CPSR_fs, lr
     fbc:	b410      	push	{r4}
     fbe:	eef1 ca10 	vmrs	ip, fpscr
     fc2:	f64f 7460 	movw	r4, #65376	; 0xff60
     fc6:	f6c0 74ff 	movt	r4, #4095	; 0xfff
     fca:	ea0c 0c04 	and.w	ip, ip, r4
     fce:	eee1 ca10 	vmsr	fpscr, ip
     fd2:	bc10      	pop	{r4}
     fd4:	46f4      	mov	ip, lr
     fd6:	4774      	bxns	lr
     fd8:	f06f 0015 	mvn.w	r0, #21
     fdc:	e7c7      	b.n	f6e <__acle_se_spm_request_random_number+0x12>
     fde:	bf00      	nop
     fe0:	20000010 	.word	0x20000010

00000fe4 <_IntExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     fe4:	4804      	ldr	r0, [pc, #16]	; (ff8 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     fe6:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
     fe8:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
     fea:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     fec:	d003      	beq.n	ff6 <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     fee:	4903      	ldr	r1, [pc, #12]	; (ffc <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     ff4:	600a      	str	r2, [r1, #0]

00000ff6 <_EXIT_EXC>:
    mov lr, r1
#else
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */
    bx lr
     ff6:	4770      	bx	lr
    ldr r0, =_kernel
     ff8:	200018dc 	.word	0x200018dc
    ldr r1, =_SCS_ICSR
     ffc:	e000ed04 	.word	0xe000ed04

00001000 <__pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1000:	4913      	ldr	r1, [pc, #76]	; (1050 <__pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1002:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1004:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    1008:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    100a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    100e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1012:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1014:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1018:	f3bf 8f6f 	isb	sy
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    101c:	4f0d      	ldr	r7, [pc, #52]	; (1054 <__pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    101e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1022:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    1024:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1026:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1028:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
    102a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    102c:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    102e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1032:	b504      	push	{r2, lr}
    ldr r0, =_kernel
    1034:	4806      	ldr	r0, [pc, #24]	; (1050 <__pendsv+0x50>)
    ldr r0, [r0, #_kernel_offset_to_current]
    1036:	6880      	ldr	r0, [r0, #8]
    bl z_arch_configure_dynamic_mpu_regions
    1038:	f002 fa4a 	bl	34d0 <z_arch_configure_dynamic_mpu_regions>
    pop {r2,lr}
    103c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1040:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    1044:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

    msr PSP, ip
    1048:	f38c 8809 	msr	PSP, ip
    pop {r0, lr}
#endif
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
    104c:	4770      	bx	lr
    104e:	0000      	.short	0x0000
    ldr r1, =_kernel
    1050:	200018dc 	.word	0x200018dc
    ldr v4, =_SCS_ICSR
    1054:	e000ed04 	.word	0xe000ed04

00001058 <__svc>:
 * - System Calls (User mode)
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    1058:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    105c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    105e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1062:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1066:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read encoding */
    ldrh r1, [r1, #-2]
    1068:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    106c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    1070:	2902      	cmp	r1, #2
    beq _oops
    1072:	d0ff      	beq.n	1074 <_oops>

00001074 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {r0, lr}
    1074:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1076:	f002 fa20 	bl	34ba <z_do_kernel_oops>
    pop {r0, pc}
    107a:	bd01      	pop	{r0, pc}

0000107c <z_CpuIdleInit>:
 *
 * void z_CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, z_CpuIdleInit)
	ldr r1, =_SCB_SCR
    107c:	4901      	ldr	r1, [pc, #4]	; (1084 <z_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    107e:	2210      	movs	r2, #16
	str r2, [r1]
    1080:	600a      	str	r2, [r1, #0]
	bx lr
    1082:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1084:	e000ed10 	.word	0xe000ed10

00001088 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1088:	4040      	eors	r0, r0
	msr BASEPRI, r0
    108a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    108e:	bf30      	wfi

	bx lr
    1090:	4770      	bx	lr
    1092:	bf00      	nop

00001094 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1094:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1096:	f380 8811 	msr	BASEPRI, r0
	/* RETTOBASE flag is not banked between security states.
	 * Therefore, we cannot rely on this flag, to obtain the SP
	 * of the current security state.
	 * Instead, we use the EXC_RETURN.SPSEL flag.
	 */
 	ldr r0, =0x4
    109a:	f04f 0004 	mov.w	r0, #4
	mov r1, lr
    109e:	4671      	mov	r1, lr
	tst r1, r0
    10a0:	4201      	tst	r1, r0
	beq _s_stack_frame_msp
    10a2:	d002      	beq.n	10aa <_s_stack_frame_msp>
	mrs r0, PSP
    10a4:	f3ef 8009 	mrs	r0, PSP
	bne _s_stack_frame_endif
    10a8:	d101      	bne.n	10ae <_s_stack_frame_endif>

000010aa <_s_stack_frame_msp>:
_s_stack_frame_msp:
	mrs r0, MSP
    10aa:	f3ef 8008 	mrs	r0, MSP

000010ae <_s_stack_frame_endif>:
	 *
	 * To determine this we need to inspect the EXC_RETURN value
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
    10ae:	4671      	mov	r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    10b0:	b501      	push	{r0, lr}
	bl _Fault
    10b2:	f000 f975 	bl	13a0 <_Fault>

	pop {r0, pc}
    10b6:	bd01      	pop	{r0, pc}

000010b8 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {r0,lr}		/* r0, lr are now the first items on the stack */
    10b8:	b501      	push	{r0, lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, z_sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    10ba:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    10bc:	4a0b      	ldr	r2, [pc, #44]	; (10ec <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    10be:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    10c0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    10c2:	bf1e      	ittt	ne
	movne	r1, #0
    10c4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    10c6:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    10c8:	f002 fae0 	blne	368c <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    10cc:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    10ce:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    10d2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    10d6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    10da:	4905      	ldr	r1, [pc, #20]	; (10f0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    10dc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    10de:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    10e0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    10e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
    10e6:	4803      	ldr	r0, [pc, #12]	; (10f4 <_isr_wrapper+0x3c>)
	bx r0
    10e8:	4700      	bx	r0
    10ea:	0000      	.short	0x0000
	ldr r2, =_kernel
    10ec:	200018dc 	.word	0x200018dc
	ldr r1, =_sw_isr_table
    10f0:	0000387c 	.word	0x0000387c
	ldr r0, =_IntExit
    10f4:	00000fe5 	.word	0x00000fe5

000010f8 <z_IntLibInit>:
 * @return N/A
 */

void z_IntLibInit(void)
{
	int irq = 0;
    10f8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10fa:	2120      	movs	r1, #32
    10fc:	4803      	ldr	r0, [pc, #12]	; (110c <z_IntLibInit+0x14>)
    10fe:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1100:	3301      	adds	r3, #1
    1102:	2b41      	cmp	r3, #65	; 0x41
    1104:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1108:	d1f9      	bne.n	10fe <z_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    110a:	4770      	bx	lr
    110c:	e000e100 	.word	0xe000e100

00001110 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1110:	4a09      	ldr	r2, [pc, #36]	; (1138 <__swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1112:	490a      	ldr	r1, [pc, #40]	; (113c <__swap+0x2c>)
	_current->arch.basepri = key;
    1114:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1116:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    1118:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    111a:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    111c:	4908      	ldr	r1, [pc, #32]	; (1140 <__swap+0x30>)
    111e:	684b      	ldr	r3, [r1, #4]
    1120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1124:	604b      	str	r3, [r1, #4]
    1126:	2300      	movs	r3, #0
    1128:	f383 8811 	msr	BASEPRI, r3
    112c:	f3bf 8f6f 	isb	sy
	irq_unlock(0);

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1130:	6893      	ldr	r3, [r2, #8]
}
    1132:	6e98      	ldr	r0, [r3, #104]	; 0x68
    1134:	4770      	bx	lr
    1136:	bf00      	nop
    1138:	200018dc 	.word	0x200018dc
    113c:	00003d04 	.word	0x00003d04
    1140:	e000ed00 	.word	0xe000ed00

00001144 <MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
    1144:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1146:	4c1b      	ldr	r4, [pc, #108]	; (11b4 <MpuFault.isra.2+0x70>)
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
    1148:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    114a:	481b      	ldr	r0, [pc, #108]	; (11b8 <MpuFault.isra.2+0x74>)
    114c:	f002 f8fb 	bl	3346 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1150:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1152:	06d9      	lsls	r1, r3, #27
    1154:	d502      	bpl.n	115c <MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error (context area might be"
    1156:	4819      	ldr	r0, [pc, #100]	; (11bc <MpuFault.isra.2+0x78>)
    1158:	f002 f8f5 	bl	3346 <printk>
			" not valid)\n");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    115c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    115e:	071a      	lsls	r2, r3, #28
    1160:	d502      	bpl.n	1168 <MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    1162:	4817      	ldr	r0, [pc, #92]	; (11c0 <MpuFault.isra.2+0x7c>)
    1164:	f002 f8ef 	bl	3346 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1168:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    116a:	079b      	lsls	r3, r3, #30
    116c:	d50e      	bpl.n	118c <MpuFault.isra.2+0x48>
		PR_FAULT_INFO("  Data Access Violation\n");
    116e:	4815      	ldr	r0, [pc, #84]	; (11c4 <MpuFault.isra.2+0x80>)
    1170:	f002 f8e9 	bl	3346 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    1174:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1176:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1178:	0618      	lsls	r0, r3, #24
    117a:	d507      	bpl.n	118c <MpuFault.isra.2+0x48>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
    117c:	4812      	ldr	r0, [pc, #72]	; (11c8 <MpuFault.isra.2+0x84>)
    117e:	f002 f8e2 	bl	3346 <printk>
			if (fromHardFault) {
    1182:	b11d      	cbz	r5, 118c <MpuFault.isra.2+0x48>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1184:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    118a:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    118c:	4c09      	ldr	r4, [pc, #36]	; (11b4 <MpuFault.isra.2+0x70>)
    118e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1190:	07da      	lsls	r2, r3, #31
    1192:	d502      	bpl.n	119a <MpuFault.isra.2+0x56>
		PR_FAULT_INFO("  Instruction Access Violation\n");
    1194:	480d      	ldr	r0, [pc, #52]	; (11cc <MpuFault.isra.2+0x88>)
    1196:	f002 f8d6 	bl	3346 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    119a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    119c:	069b      	lsls	r3, r3, #26
    119e:	d502      	bpl.n	11a6 <MpuFault.isra.2+0x62>
		PR_FAULT_INFO(
    11a0:	480b      	ldr	r0, [pc, #44]	; (11d0 <MpuFault.isra.2+0x8c>)
    11a2:	f002 f8d0 	bl	3346 <printk>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    11a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    11a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    11aa:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    11ac:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    11b0:	62a3      	str	r3, [r4, #40]	; 0x28
}
    11b2:	bd38      	pop	{r3, r4, r5, pc}
    11b4:	e000ed00 	.word	0xe000ed00
    11b8:	000040c1 	.word	0x000040c1
    11bc:	000040d8 	.word	0x000040d8
    11c0:	0000410c 	.word	0x0000410c
    11c4:	00004120 	.word	0x00004120
    11c8:	00004139 	.word	0x00004139
    11cc:	00004150 	.word	0x00004150
    11d0:	00004170 	.word	0x00004170

000011d4 <BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int BusFault(NANO_ESF *esf, int fromHardFault)
    11d4:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    11d6:	4c1e      	ldr	r4, [pc, #120]	; (1250 <BusFault.isra.3+0x7c>)
static int BusFault(NANO_ESF *esf, int fromHardFault)
    11d8:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
    11da:	481e      	ldr	r0, [pc, #120]	; (1254 <BusFault.isra.3+0x80>)
    11dc:	f002 f8b3 	bl	3346 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    11e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    11e2:	04d9      	lsls	r1, r3, #19
    11e4:	d502      	bpl.n	11ec <BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Stacking error\n");
    11e6:	481c      	ldr	r0, [pc, #112]	; (1258 <BusFault.isra.3+0x84>)
    11e8:	f002 f8ad 	bl	3346 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    11ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    11ee:	051a      	lsls	r2, r3, #20
    11f0:	d502      	bpl.n	11f8 <BusFault.isra.3+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    11f2:	481a      	ldr	r0, [pc, #104]	; (125c <BusFault.isra.3+0x88>)
    11f4:	f002 f8a7 	bl	3346 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    11f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    11fa:	059b      	lsls	r3, r3, #22
    11fc:	d50e      	bpl.n	121c <BusFault.isra.3+0x48>
		PR_FAULT_INFO("  Precise data bus error\n");
    11fe:	4818      	ldr	r0, [pc, #96]	; (1260 <BusFault.isra.3+0x8c>)
    1200:	f002 f8a1 	bl	3346 <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1204:	6ba1      	ldr	r1, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1206:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1208:	0418      	lsls	r0, r3, #16
    120a:	d507      	bpl.n	121c <BusFault.isra.3+0x48>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
    120c:	4815      	ldr	r0, [pc, #84]	; (1264 <BusFault.isra.3+0x90>)
    120e:	f002 f89a 	bl	3346 <printk>
			if (fromHardFault) {
    1212:	b11d      	cbz	r5, 121c <BusFault.isra.3+0x48>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1214:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1216:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    121a:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    121c:	4c0c      	ldr	r4, [pc, #48]	; (1250 <BusFault.isra.3+0x7c>)
    121e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1220:	0559      	lsls	r1, r3, #21
    1222:	d502      	bpl.n	122a <BusFault.isra.3+0x56>
		PR_FAULT_INFO("  Imprecise data bus error\n");
    1224:	4810      	ldr	r0, [pc, #64]	; (1268 <BusFault.isra.3+0x94>)
    1226:	f002 f88e 	bl	3346 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    122a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    122c:	05da      	lsls	r2, r3, #23
    122e:	d509      	bpl.n	1244 <BusFault.isra.3+0x70>
		PR_FAULT_INFO("  Instruction bus error\n");
    1230:	480e      	ldr	r0, [pc, #56]	; (126c <BusFault.isra.3+0x98>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    1232:	f002 f888 	bl	3346 <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1236:	4a06      	ldr	r2, [pc, #24]	; (1250 <BusFault.isra.3+0x7c>)
	if (MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    1238:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    123a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    123c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1240:	6293      	str	r3, [r2, #40]	; 0x28
}
    1242:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1244:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1246:	049b      	lsls	r3, r3, #18
    1248:	d5f5      	bpl.n	1236 <BusFault.isra.3+0x62>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    124a:	4809      	ldr	r0, [pc, #36]	; (1270 <BusFault.isra.3+0x9c>)
    124c:	e7f1      	b.n	1232 <BusFault.isra.3+0x5e>
    124e:	bf00      	nop
    1250:	e000ed00 	.word	0xe000ed00
    1254:	00004033 	.word	0x00004033
    1258:	0000404a 	.word	0x0000404a
    125c:	0000410c 	.word	0x0000410c
    1260:	0000405c 	.word	0x0000405c
    1264:	00004076 	.word	0x00004076
    1268:	0000408c 	.word	0x0000408c
    126c:	000040a8 	.word	0x000040a8
    1270:	00004170 	.word	0x00004170

00001274 <UsageFault.isra.4>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t UsageFault(const NANO_ESF *esf)
    1274:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1276:	4c1c      	ldr	r4, [pc, #112]	; (12e8 <UsageFault.isra.4+0x74>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    1278:	481c      	ldr	r0, [pc, #112]	; (12ec <UsageFault.isra.4+0x78>)
    127a:	f002 f864 	bl	3346 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    127e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1280:	019a      	lsls	r2, r3, #6
    1282:	d502      	bpl.n	128a <UsageFault.isra.4+0x16>
		PR_FAULT_INFO("  Division by zero\n");
    1284:	481a      	ldr	r0, [pc, #104]	; (12f0 <UsageFault.isra.4+0x7c>)
    1286:	f002 f85e 	bl	3346 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    128a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    128c:	01db      	lsls	r3, r3, #7
    128e:	d502      	bpl.n	1296 <UsageFault.isra.4+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
    1290:	4818      	ldr	r0, [pc, #96]	; (12f4 <UsageFault.isra.4+0x80>)
    1292:	f002 f858 	bl	3346 <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1296:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1298:	02dc      	lsls	r4, r3, #11
    129a:	d502      	bpl.n	12a2 <UsageFault.isra.4+0x2e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)\n");
    129c:	4816      	ldr	r0, [pc, #88]	; (12f8 <UsageFault.isra.4+0x84>)
    129e:	f002 f852 	bl	3346 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    12a2:	4c11      	ldr	r4, [pc, #68]	; (12e8 <UsageFault.isra.4+0x74>)
    12a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    12a6:	0318      	lsls	r0, r3, #12
    12a8:	d502      	bpl.n	12b0 <UsageFault.isra.4+0x3c>
		PR_FAULT_INFO("  No coprocessor instructions\n");
    12aa:	4814      	ldr	r0, [pc, #80]	; (12fc <UsageFault.isra.4+0x88>)
    12ac:	f002 f84b 	bl	3346 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    12b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    12b2:	0359      	lsls	r1, r3, #13
    12b4:	d502      	bpl.n	12bc <UsageFault.isra.4+0x48>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
    12b6:	4812      	ldr	r0, [pc, #72]	; (1300 <UsageFault.isra.4+0x8c>)
    12b8:	f002 f845 	bl	3346 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    12bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    12be:	039a      	lsls	r2, r3, #14
    12c0:	d502      	bpl.n	12c8 <UsageFault.isra.4+0x54>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
    12c2:	4810      	ldr	r0, [pc, #64]	; (1304 <UsageFault.isra.4+0x90>)
    12c4:	f002 f83f 	bl	3346 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    12c8:	4c07      	ldr	r4, [pc, #28]	; (12e8 <UsageFault.isra.4+0x74>)
    12ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    12cc:	03db      	lsls	r3, r3, #15
    12ce:	d502      	bpl.n	12d6 <UsageFault.isra.4+0x62>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
    12d0:	480d      	ldr	r0, [pc, #52]	; (1308 <UsageFault.isra.4+0x94>)
    12d2:	f002 f838 	bl	3346 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    12d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28

	return reason;
}
    12d8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    12da:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    12de:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    12e2:	62a3      	str	r3, [r4, #40]	; 0x28
}
    12e4:	bd10      	pop	{r4, pc}
    12e6:	bf00      	nop
    12e8:	e000ed00 	.word	0xe000ed00
    12ec:	00004280 	.word	0x00004280
    12f0:	00004299 	.word	0x00004299
    12f4:	000042ad 	.word	0x000042ad
    12f8:	000042c8 	.word	0x000042c8
    12fc:	000042f3 	.word	0x000042f3
    1300:	00004312 	.word	0x00004312
    1304:	00004338 	.word	0x00004338
    1308:	00004353 	.word	0x00004353

0000130c <SecureFault.isra.5>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void SecureFault(const NANO_ESF *esf)
    130c:	b510      	push	{r4, lr}
{
	PR_FAULT_INFO("***** SECURE FAULT *****\n");

	STORE_xFAR(sfar, SAU->SFAR);
    130e:	4c1a      	ldr	r4, [pc, #104]	; (1378 <SecureFault.isra.5+0x6c>)
	PR_FAULT_INFO("***** SECURE FAULT *****\n");
    1310:	481a      	ldr	r0, [pc, #104]	; (137c <SecureFault.isra.5+0x70>)
    1312:	f002 f818 	bl	3346 <printk>
	STORE_xFAR(sfar, SAU->SFAR);
    1316:	69a1      	ldr	r1, [r4, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    1318:	6963      	ldr	r3, [r4, #20]
    131a:	0658      	lsls	r0, r3, #25
    131c:	d502      	bpl.n	1324 <SecureFault.isra.5+0x18>
		PR_EXC("  Address: 0x%x\n", sfar);
    131e:	4818      	ldr	r0, [pc, #96]	; (1380 <SecureFault.isra.5+0x74>)
    1320:	f002 f811 	bl	3346 <printk>
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    1324:	6963      	ldr	r3, [r4, #20]
    1326:	07d9      	lsls	r1, r3, #31
    1328:	d507      	bpl.n	133a <SecureFault.isra.5+0x2e>
		PR_FAULT_INFO("  Invalid entry point\n");
    132a:	4816      	ldr	r0, [pc, #88]	; (1384 <SecureFault.isra.5+0x78>)
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
		PR_FAULT_INFO("  Invalid transition\n");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state preservation\n");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state error\n");
    132c:	f002 f80b 	bl	3346 <printk>
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    1330:	6963      	ldr	r3, [r4, #20]
    1332:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1336:	6163      	str	r3, [r4, #20]
}
    1338:	bd10      	pop	{r4, pc}
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    133a:	6963      	ldr	r3, [r4, #20]
    133c:	079a      	lsls	r2, r3, #30
    133e:	d501      	bpl.n	1344 <SecureFault.isra.5+0x38>
		PR_FAULT_INFO("  Invalid integrity signature\n");
    1340:	4811      	ldr	r0, [pc, #68]	; (1388 <SecureFault.isra.5+0x7c>)
    1342:	e7f3      	b.n	132c <SecureFault.isra.5+0x20>
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    1344:	6963      	ldr	r3, [r4, #20]
    1346:	075b      	lsls	r3, r3, #29
    1348:	d501      	bpl.n	134e <SecureFault.isra.5+0x42>
		PR_FAULT_INFO("  Invalid exception return\n");
    134a:	4810      	ldr	r0, [pc, #64]	; (138c <SecureFault.isra.5+0x80>)
    134c:	e7ee      	b.n	132c <SecureFault.isra.5+0x20>
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    134e:	6963      	ldr	r3, [r4, #20]
    1350:	0718      	lsls	r0, r3, #28
    1352:	d501      	bpl.n	1358 <SecureFault.isra.5+0x4c>
		PR_FAULT_INFO("  Attribution unit violation\n");
    1354:	480e      	ldr	r0, [pc, #56]	; (1390 <SecureFault.isra.5+0x84>)
    1356:	e7e9      	b.n	132c <SecureFault.isra.5+0x20>
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    1358:	6963      	ldr	r3, [r4, #20]
    135a:	06d9      	lsls	r1, r3, #27
    135c:	d501      	bpl.n	1362 <SecureFault.isra.5+0x56>
		PR_FAULT_INFO("  Invalid transition\n");
    135e:	480d      	ldr	r0, [pc, #52]	; (1394 <SecureFault.isra.5+0x88>)
    1360:	e7e4      	b.n	132c <SecureFault.isra.5+0x20>
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    1362:	6963      	ldr	r3, [r4, #20]
    1364:	069a      	lsls	r2, r3, #26
    1366:	d501      	bpl.n	136c <SecureFault.isra.5+0x60>
		PR_FAULT_INFO("  Lazy state preservation\n");
    1368:	480b      	ldr	r0, [pc, #44]	; (1398 <SecureFault.isra.5+0x8c>)
    136a:	e7df      	b.n	132c <SecureFault.isra.5+0x20>
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    136c:	6963      	ldr	r3, [r4, #20]
    136e:	061b      	lsls	r3, r3, #24
    1370:	d5de      	bpl.n	1330 <SecureFault.isra.5+0x24>
		PR_FAULT_INFO("  Lazy state error\n");
    1372:	480a      	ldr	r0, [pc, #40]	; (139c <SecureFault.isra.5+0x90>)
    1374:	e7da      	b.n	132c <SecureFault.isra.5+0x20>
    1376:	bf00      	nop
    1378:	e000edd0 	.word	0xe000edd0
    137c:	000041a0 	.word	0x000041a0
    1380:	000041ba 	.word	0x000041ba
    1384:	000041cb 	.word	0x000041cb
    1388:	000041e2 	.word	0x000041e2
    138c:	00004201 	.word	0x00004201
    1390:	0000421d 	.word	0x0000421d
    1394:	0000423b 	.word	0x0000423b
    1398:	00004251 	.word	0x00004251
    139c:	0000426c 	.word	0x0000426c

000013a0 <_Fault>:
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    13a0:	4b3d      	ldr	r3, [pc, #244]	; (1498 <_Fault+0xf8>)
{
    13a2:	b570      	push	{r4, r5, r6, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    13a4:	685e      	ldr	r6, [r3, #4]

	LOG_PANIC();

#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    13a6:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
    13aa:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
{
    13ae:	4605      	mov	r5, r0
    13b0:	460c      	mov	r4, r1
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    13b2:	d15d      	bne.n	1470 <_Fault+0xd0>
			EXC_RETURN_INDICATOR_PREFIX) {
		/* Invalid EXC_RETURN value */
		goto _exit_fatal;
	}
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    13b4:	f011 0001 	ands.w	r0, r1, #1
    13b8:	d041      	beq.n	143e <_Fault+0x9e>
		 * This is a fatal error.
		 */
		goto _exit_fatal;
	}

	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    13ba:	0648      	lsls	r0, r1, #25
    13bc:	d41b      	bmi.n	13f6 <_Fault+0x56>
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    13be:	6829      	ldr	r1, [r5, #0]
    13c0:	4b36      	ldr	r3, [pc, #216]	; (149c <_Fault+0xfc>)
	PR_FAULT_INFO("  S instruction address:  0x%x\n", sec_ret_addr);
    13c2:	4837      	ldr	r0, [pc, #220]	; (14a0 <_Fault+0x100>)
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    13c4:	440b      	add	r3, r1
    13c6:	2b01      	cmp	r3, #1
		sec_ret_addr = secure_esf->basic.pc;
    13c8:	bf98      	it	ls
    13ca:	6c29      	ldrls	r1, [r5, #64]	; 0x40
	PR_FAULT_INFO("  S instruction address:  0x%x\n", sec_ret_addr);
    13cc:	f001 ffbb 	bl	3346 <printk>

		/* Handle the actual fault.
		 * Extract the correct stack frame from the Non-Secure state
		 * and supply it to the fault handing function.
		 */
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    13d0:	f014 0408 	ands.w	r4, r4, #8
    13d4:	4b30      	ldr	r3, [pc, #192]	; (1498 <_Fault+0xf8>)
    13d6:	d009      	beq.n	13ec <_Fault+0x4c>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    13d8:	f3ef 8589 	mrs	r5, PSP_NS
			esf = (NANO_ESF *)__TZ_get_PSP_NS();
			if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) == 0) {
    13dc:	685c      	ldr	r4, [r3, #4]
    13de:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    13e2:	d108      	bne.n	13f6 <_Fault+0x56>
				goto _exit_fatal;
			}
		} else {
			esf = (NANO_ESF *)__TZ_get_MSP_NS();
			if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0) {
				PR_EXC("RETTOBASE does not match EXC_RETURN\n");
    13e4:	482f      	ldr	r0, [pc, #188]	; (14a4 <_Fault+0x104>)
	PR_FAULT_INFO(
    13e6:	f001 ffae 	bl	3346 <printk>
    13ea:	e041      	b.n	1470 <_Fault+0xd0>
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    13ec:	f3ef 8588 	mrs	r5, MSP_NS
			if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0) {
    13f0:	685b      	ldr	r3, [r3, #4]
    13f2:	0519      	lsls	r1, r3, #20
    13f4:	d4f6      	bmi.n	13e4 <_Fault+0x44>
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    13f6:	f3c6 0608 	ubfx	r6, r6, #0, #9
	switch (fault) {
    13fa:	1ef2      	subs	r2, r6, #3
    13fc:	2a09      	cmp	r2, #9
    13fe:	d83f      	bhi.n	1480 <_Fault+0xe0>
    1400:	e8df f002 	tbb	[pc, r2]
    1404:	2d3a3805 	.word	0x2d3a3805
    1408:	3e3e3e34 	.word	0x3e3e3e34
    140c:	3c3e      	.short	0x3c3e
	PR_FAULT_INFO("***** HARD FAULT *****\n");
    140e:	4826      	ldr	r0, [pc, #152]	; (14a8 <_Fault+0x108>)
    1410:	f001 ff99 	bl	3346 <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1414:	4b20      	ldr	r3, [pc, #128]	; (1498 <_Fault+0xf8>)
    1416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1418:	0792      	lsls	r2, r2, #30
    141a:	d501      	bpl.n	1420 <_Fault+0x80>
		PR_EXC("  Bus fault on vector table read\n");
    141c:	4823      	ldr	r0, [pc, #140]	; (14ac <_Fault+0x10c>)
    141e:	e7e2      	b.n	13e6 <_Fault+0x46>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1420:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1422:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    1426:	d00a      	beq.n	143e <_Fault+0x9e>
		PR_EXC("  Fault escalation (see below)\n");
    1428:	4821      	ldr	r0, [pc, #132]	; (14b0 <_Fault+0x110>)
    142a:	f001 ff8c 	bl	3346 <printk>
		if (SCB_MMFSR != 0) {
    142e:	4b21      	ldr	r3, [pc, #132]	; (14b4 <_Fault+0x114>)
    1430:	781b      	ldrb	r3, [r3, #0]
    1432:	b14b      	cbz	r3, 1448 <_Fault+0xa8>
			reason = MpuFault(esf, 1);
    1434:	2001      	movs	r0, #1
		reason = MpuFault(esf, 0);
    1436:	f7ff fe85 	bl	1144 <MpuFault.isra.2>
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = FaultHandle(esf, fault);

	if (reason == _NANO_ERR_RECOVERABLE) {
    143a:	2806      	cmp	r0, #6
    143c:	d02b      	beq.n	1496 <_Fault+0xf6>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_NanoFatalErrorHandler(reason, esf);
    143e:	4629      	mov	r1, r5
}
    1440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_NanoFatalErrorHandler(reason, esf);
    1444:	f000 b8b4 	b.w	15b0 <z_NanoFatalErrorHandler>
		} else if (SCB_BFSR != 0) {
    1448:	4b1b      	ldr	r3, [pc, #108]	; (14b8 <_Fault+0x118>)
    144a:	781b      	ldrb	r3, [r3, #0]
    144c:	b11b      	cbz	r3, 1456 <_Fault+0xb6>
			reason = BusFault(esf, 1);
    144e:	2001      	movs	r0, #1
		reason = BusFault(esf, 0);
    1450:	f7ff fec0 	bl	11d4 <BusFault.isra.3>
    1454:	e7f1      	b.n	143a <_Fault+0x9a>
		} else if (SCB_UFSR != 0) {
    1456:	4b19      	ldr	r3, [pc, #100]	; (14bc <_Fault+0x11c>)
    1458:	8818      	ldrh	r0, [r3, #0]
    145a:	b284      	uxth	r4, r0
    145c:	b114      	cbz	r4, 1464 <_Fault+0xc4>
		reason = UsageFault(esf);
    145e:	f7ff ff09 	bl	1274 <UsageFault.isra.4>
    1462:	e7ea      	b.n	143a <_Fault+0x9a>
		} else if (SAU->SFSR != 0) {
    1464:	4b16      	ldr	r3, [pc, #88]	; (14c0 <_Fault+0x120>)
    1466:	6958      	ldr	r0, [r3, #20]
    1468:	2800      	cmp	r0, #0
    146a:	d0e8      	beq.n	143e <_Fault+0x9e>
		SecureFault(esf);
    146c:	f7ff ff4e 	bl	130c <SecureFault.isra.5>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    1470:	2000      	movs	r0, #0
    1472:	e7e4      	b.n	143e <_Fault+0x9e>
		reason = MpuFault(esf, 0);
    1474:	2000      	movs	r0, #0
    1476:	e7de      	b.n	1436 <_Fault+0x96>
		reason = BusFault(esf, 0);
    1478:	2000      	movs	r0, #0
    147a:	e7e9      	b.n	1450 <_Fault+0xb0>
	PR_FAULT_INFO(
    147c:	4811      	ldr	r0, [pc, #68]	; (14c4 <_Fault+0x124>)
    147e:	e7b2      	b.n	13e6 <_Fault+0x46>
	PR_FAULT_INFO("***** %s %d) *****\n",
    1480:	4811      	ldr	r0, [pc, #68]	; (14c8 <_Fault+0x128>)
    1482:	4912      	ldr	r1, [pc, #72]	; (14cc <_Fault+0x12c>)
    1484:	f1a6 0210 	sub.w	r2, r6, #16
    1488:	2e0f      	cmp	r6, #15
    148a:	bfd8      	it	le
    148c:	4601      	movle	r1, r0
    148e:	4810      	ldr	r0, [pc, #64]	; (14d0 <_Fault+0x130>)
    1490:	f001 ff59 	bl	3346 <printk>
    1494:	e7ec      	b.n	1470 <_Fault+0xd0>
}
    1496:	bd70      	pop	{r4, r5, r6, pc}
    1498:	e000ed00 	.word	0xe000ed00
    149c:	0105eda6 	.word	0x0105eda6
    14a0:	000043ad 	.word	0x000043ad
    14a4:	000043cd 	.word	0x000043cd
    14a8:	000043f2 	.word	0x000043f2
    14ac:	0000440a 	.word	0x0000440a
    14b0:	0000442c 	.word	0x0000442c
    14b4:	e000ed28 	.word	0xe000ed28
    14b8:	e000ed29 	.word	0xe000ed29
    14bc:	e000ed2a 	.word	0xe000ed2a
    14c0:	e000edd0 	.word	0xe000edd0
    14c4:	0000444c 	.word	0x0000444c
    14c8:	0000437f 	.word	0x0000437f
    14cc:	00004394 	.word	0x00004394
    14d0:	00004483 	.word	0x00004483

000014d4 <z_FaultInit>:
 */
void z_FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    14d4:	4a02      	ldr	r2, [pc, #8]	; (14e0 <z_FaultInit+0xc>)
    14d6:	6953      	ldr	r3, [r2, #20]
    14d8:	f043 0310 	orr.w	r3, r3, #16
    14dc:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    14de:	4770      	bx	lr
    14e0:	e000ed00 	.word	0xe000ed00

000014e4 <z_arch_irq_enable>:
 *
 * @return N/A
 */
void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    14e4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    14e6:	2b00      	cmp	r3, #0
    14e8:	db08      	blt.n	14fc <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14ea:	2201      	movs	r2, #1
    14ec:	f000 001f 	and.w	r0, r0, #31
    14f0:	fa02 f000 	lsl.w	r0, r2, r0
    14f4:	4a02      	ldr	r2, [pc, #8]	; (1500 <z_arch_irq_enable+0x1c>)
    14f6:	095b      	lsrs	r3, r3, #5
    14f8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    14fc:	4770      	bx	lr
    14fe:	bf00      	nop
    1500:	e000e100 	.word	0xe000e100

00001504 <z_arch_irq_disable>:
 *
 * @return N/A
 */
void z_arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1504:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1506:	2b00      	cmp	r3, #0
    1508:	db0d      	blt.n	1526 <z_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    150a:	2201      	movs	r2, #1
    150c:	f000 001f 	and.w	r0, r0, #31
    1510:	fa02 f000 	lsl.w	r0, r2, r0
    1514:	095b      	lsrs	r3, r3, #5
    1516:	4a04      	ldr	r2, [pc, #16]	; (1528 <z_arch_irq_disable+0x24>)
    1518:	3320      	adds	r3, #32
    151a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    151e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1522:	f3bf 8f6f 	isb	sy
}
    1526:	4770      	bx	lr
    1528:	e000e100 	.word	0xe000e100

0000152c <z_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    152c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    152e:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    1530:	f101 0101 	add.w	r1, r1, #1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1534:	bfa8      	it	ge
    1536:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    153a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    153e:	bfb8      	it	lt
    1540:	4b05      	ldrlt	r3, [pc, #20]	; (1558 <z_irq_priority_set+0x2c>)
    1542:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1544:	bfab      	itete	ge
    1546:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    154a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    154e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1552:	5419      	strblt	r1, [r3, r0]
}
    1554:	4770      	bx	lr
    1556:	bf00      	nop
    1558:	e000ed14 	.word	0xe000ed14

0000155c <z_new_thread>:

void z_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    155c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 * k_thread_create(). If K_THREAD_STACK_SIZEOF() is used, the
	 * Guard size has already been take out of stackSize.
	 */
	stackSize -= MPU_GUARD_ALIGN_AND_SIZE;
#endif
	stackEnd = pStackMem + stackSize;
    1560:	188c      	adds	r4, r1, r2
{
    1562:	4688      	mov	r8, r1
    1564:	4617      	mov	r7, r2
    1566:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1568:	2204      	movs	r2, #4
    156a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    156c:	9909      	ldr	r1, [sp, #36]	; 0x24
    156e:	4605      	mov	r5, r0
    1570:	f002 f936 	bl	37e0 <z_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    1574:	2200      	movs	r2, #0
#else
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    1576:	490d      	ldr	r1, [pc, #52]	; (15ac <z_new_thread+0x50>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1578:	f1a4 0320 	sub.w	r3, r4, #32
    157c:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    1580:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    1584:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    1588:	e9c5 8716 	strd	r8, r7, [r5, #88]	; 0x58
    158c:	6199      	str	r1, [r3, #24]

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    158e:	9906      	ldr	r1, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    1590:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    1592:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    1594:	9907      	ldr	r1, [sp, #28]
    1596:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    1598:	9908      	ldr	r1, [sp, #32]
    159a:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
    159c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    15a0:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    15a2:	64ab      	str	r3, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    15a4:	666a      	str	r2, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    15a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15aa:	bf00      	nop
    15ac:	0000305b 	.word	0x0000305b

000015b0 <z_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void z_NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    15b0:	b538      	push	{r3, r4, r5, lr}
    15b2:	4604      	mov	r4, r0
    15b4:	460d      	mov	r5, r1
	const char *thread_name = k_thread_name_get(k_current_get());
#endif

	LOG_PANIC();

	switch (reason) {
    15b6:	2805      	cmp	r0, #5
    15b8:	d81a      	bhi.n	15f0 <z_NanoFatalErrorHandler+0x40>
    15ba:	e8df f000 	tbb	[pc, r0]
    15be:	1903      	.short	0x1903
    15c0:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
    15c4:	480d      	ldr	r0, [pc, #52]	; (15fc <z_NanoFatalErrorHandler+0x4c>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    15c6:	f001 febe 	bl	3346 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    15ca:	f000 fe27 	bl	221c <z_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p"
    15ce:	69aa      	ldr	r2, [r5, #24]
    15d0:	4601      	mov	r1, r0
    15d2:	480b      	ldr	r0, [pc, #44]	; (1600 <z_NanoFatalErrorHandler+0x50>)
    15d4:	f001 feb7 	bl	3346 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	z_SysFatalErrorHandler(reason, pEsf);
    15d8:	4629      	mov	r1, r5
    15da:	4620      	mov	r0, r4
}
    15dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_SysFatalErrorHandler(reason, pEsf);
    15e0:	f000 b818 	b.w	1614 <z_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
    15e4:	4807      	ldr	r0, [pc, #28]	; (1604 <z_NanoFatalErrorHandler+0x54>)
    15e6:	e7ee      	b.n	15c6 <z_NanoFatalErrorHandler+0x16>
		printk("***** Kernel OOPS! *****\n");
    15e8:	4807      	ldr	r0, [pc, #28]	; (1608 <z_NanoFatalErrorHandler+0x58>)
    15ea:	e7ec      	b.n	15c6 <z_NanoFatalErrorHandler+0x16>
		printk("***** Kernel Panic! *****\n");
    15ec:	4807      	ldr	r0, [pc, #28]	; (160c <z_NanoFatalErrorHandler+0x5c>)
    15ee:	e7ea      	b.n	15c6 <z_NanoFatalErrorHandler+0x16>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    15f0:	4601      	mov	r1, r0
    15f2:	4807      	ldr	r0, [pc, #28]	; (1610 <z_NanoFatalErrorHandler+0x60>)
    15f4:	f001 fea7 	bl	3346 <printk>
		break;
    15f8:	e7e7      	b.n	15ca <z_NanoFatalErrorHandler+0x1a>
    15fa:	bf00      	nop
    15fc:	00004497 	.word	0x00004497
    1600:	00004535 	.word	0x00004535
    1604:	000044b7 	.word	0x000044b7
    1608:	000044dd 	.word	0x000044dd
    160c:	000044f7 	.word	0x000044f7
    1610:	00004512 	.word	0x00004512

00001614 <z_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1614:	2805      	cmp	r0, #5
{
    1616:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1618:	d00c      	beq.n	1634 <z_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || z_is_thread_essential()) {
    161a:	f000 fe05 	bl	2228 <k_is_in_isr>
    161e:	b160      	cbz	r0, 163a <z_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1620:	f000 fe02 	bl	2228 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1624:	490c      	ldr	r1, [pc, #48]	; (1658 <z_SysFatalErrorHandler+0x44>)
    1626:	4b0d      	ldr	r3, [pc, #52]	; (165c <z_SysFatalErrorHandler+0x48>)
    1628:	2800      	cmp	r0, #0
    162a:	bf08      	it	eq
    162c:	4619      	moveq	r1, r3
    162e:	480c      	ldr	r0, [pc, #48]	; (1660 <z_SysFatalErrorHandler+0x4c>)
    1630:	f001 fe89 	bl	3346 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1634:	f7ff fd28 	bl	1088 <k_cpu_idle>
    1638:	e7fc      	b.n	1634 <z_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || z_is_thread_essential()) {
    163a:	f000 fe05 	bl	2248 <z_is_thread_essential>
    163e:	2800      	cmp	r0, #0
    1640:	d1ee      	bne.n	1620 <z_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1642:	4c08      	ldr	r4, [pc, #32]	; (1664 <z_SysFatalErrorHandler+0x50>)
    1644:	4808      	ldr	r0, [pc, #32]	; (1668 <z_SysFatalErrorHandler+0x54>)
    1646:	68a1      	ldr	r1, [r4, #8]
    1648:	f001 fe7d 	bl	3346 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    164c:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    164e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1652:	f000 b80b 	b.w	166c <z_impl_k_thread_abort>
    1656:	bf00      	nop
    1658:	00004571 	.word	0x00004571
    165c:	00004575 	.word	0x00004575
    1660:	00004586 	.word	0x00004586
    1664:	200018dc 	.word	0x200018dc
    1668:	000045a6 	.word	0x000045a6

0000166c <z_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    166c:	b538      	push	{r3, r4, r5, lr}
    166e:	4605      	mov	r5, r0
	__asm__ volatile(
    1670:	f04f 0320 	mov.w	r3, #32
    1674:	f3ef 8411 	mrs	r4, BASEPRI
    1678:	f383 8811 	msr	BASEPRI, r3
    167c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    1680:	f002 f88f 	bl	37a2 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    1684:	4b0a      	ldr	r3, [pc, #40]	; (16b0 <z_impl_k_thread_abort+0x44>)
    1686:	689b      	ldr	r3, [r3, #8]
    1688:	42ab      	cmp	r3, r5
    168a:	d10b      	bne.n	16a4 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    168c:	4b09      	ldr	r3, [pc, #36]	; (16b4 <z_impl_k_thread_abort+0x48>)
    168e:	685a      	ldr	r2, [r3, #4]
    1690:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1694:	b912      	cbnz	r2, 169c <z_impl_k_thread_abort+0x30>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    1696:	4620      	mov	r0, r4
    1698:	f7ff fd3a 	bl	1110 <__swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    169c:	685a      	ldr	r2, [r3, #4]
    169e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    16a2:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    16a4:	4620      	mov	r0, r4
}
    16a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    16aa:	f002 b821 	b.w	36f0 <z_reschedule_irqlock>
    16ae:	bf00      	nop
    16b0:	200018dc 	.word	0x200018dc
    16b4:	e000ed00 	.word	0xe000ed00

000016b8 <__reset>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    16b8:	f001 fe53 	bl	3362 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    16bc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    16be:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    16c2:	4808      	ldr	r0, [pc, #32]	; (16e4 <__reset+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    16c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    16c8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    16ca:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    16ce:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    16d2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    16d4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    16d6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    16da:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    16de:	f000 f807 	bl	16f0 <_PrepC>
    16e2:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    16e4:	20001e70 	.word	0x20001e70

000016e8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    16e8:	bf30      	wfi
    b z_SysNmiOnReset
    16ea:	f7ff bffd 	b.w	16e8 <z_SysNmiOnReset>
    16ee:	bf00      	nop

000016f0 <_PrepC>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    16f0:	4a11      	ldr	r2, [pc, #68]	; (1738 <_PrepC+0x48>)

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    16f2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    16f4:	4b11      	ldr	r3, [pc, #68]	; (173c <_PrepC+0x4c>)
    16f6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    16fa:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    16fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1700:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    1704:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1708:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    170c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
    1710:	4a0b      	ldr	r2, [pc, #44]	; (1740 <_PrepC+0x50>)
    1712:	6853      	ldr	r3, [r2, #4]
    1714:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    1718:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    171a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    171e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    1722:	2300      	movs	r3, #0
    1724:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    1728:	f000 fb04 	bl	1d34 <z_bss_zero>
	z_data_copy();
    172c:	f000 fb0c 	bl	1d48 <z_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	z_IntLibInit();
    1730:	f7ff fce2 	bl	10f8 <z_IntLibInit>
	z_cstart();
    1734:	f000 fb3a 	bl	1dac <z_cstart>
    1738:	00000000 	.word	0x00000000
    173c:	e000ed00 	.word	0xe000ed00
    1740:	e000ef30 	.word	0xe000ef30

00001744 <sys_arch_reboot>:
    1744:	f3bf 8f4f 	dsb	sy
    1748:	4905      	ldr	r1, [pc, #20]	; (1760 <sys_arch_reboot+0x1c>)
    174a:	4b06      	ldr	r3, [pc, #24]	; (1764 <sys_arch_reboot+0x20>)
    174c:	68ca      	ldr	r2, [r1, #12]
    174e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1752:	4313      	orrs	r3, r2
    1754:	60cb      	str	r3, [r1, #12]
    1756:	f3bf 8f4f 	dsb	sy
    175a:	bf00      	nop
    175c:	e7fd      	b.n	175a <sys_arch_reboot+0x16>
    175e:	bf00      	nop
    1760:	e000ed00 	.word	0xe000ed00
    1764:	05fa0004 	.word	0x05fa0004

00001768 <z_arch_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_static_mpu_regions(void)
{
    1768:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    176a:	4b0e      	ldr	r3, [pc, #56]	; (17a4 <z_arch_configure_static_mpu_regions+0x3c>)
{
    176c:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    176e:	9302      	str	r3, [sp, #8]
    1770:	4b0d      	ldr	r3, [pc, #52]	; (17a8 <z_arch_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1772:	4c0e      	ldr	r4, [pc, #56]	; (17ac <z_arch_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    1774:	9303      	str	r3, [sp, #12]
    1776:	4b0e      	ldr	r3, [pc, #56]	; (17b0 <z_arch_configure_static_mpu_regions+0x48>)
	const struct k_mem_partition *static_regions[] = {
    1778:	a808      	add	r0, sp, #32
		const struct k_mem_partition ramfunc_region =
    177a:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    177c:	ab02      	add	r3, sp, #8
    177e:	f840 3d1c 	str.w	r3, [r0, #-28]!
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1782:	4a0c      	ldr	r2, [pc, #48]	; (17b4 <z_arch_configure_static_mpu_regions+0x4c>)
    1784:	4623      	mov	r3, r4
    1786:	2101      	movs	r1, #1
    1788:	f000 f902 	bl	1990 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    178c:	2300      	movs	r3, #0
    178e:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    1790:	4b09      	ldr	r3, [pc, #36]	; (17b8 <z_arch_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1792:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    1794:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1796:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    1798:	9305      	str	r3, [sp, #20]
    179a:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    179c:	f000 f902 	bl	19a4 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    17a0:	b008      	add	sp, #32
    17a2:	bd10      	pop	{r4, pc}
    17a4:	20000000 	.word	0x20000000
    17a8:	00000000 	.word	0x00000000
    17ac:	20010000 	.word	0x20010000
    17b0:	00010006 	.word	0x00010006
    17b4:	20000000 	.word	0x20000000
    17b8:	20000000 	.word	0x20000000

000017bc <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    17bc:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    17be:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    17c0:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    17c2:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    17c6:	f004 021f 	and.w	r2, r4, #31
    17ca:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    17cc:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    17ce:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    17d0:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    17d4:	4904      	ldr	r1, [pc, #16]	; (17e8 <region_init+0x2c>)
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    17d6:	f043 0301 	orr.w	r3, r3, #1
    17da:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    17de:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    17e0:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    17e2:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    17e4:	bd10      	pop	{r4, pc}
    17e6:	bf00      	nop
    17e8:	e000ed90 	.word	0xe000ed90

000017ec <mpu_configure_regions.constprop.1>:

/* This internal function programs a set of given MPU regions
 * over a background memory area, optionally performing a
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
    17ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17f0:	4680      	mov	r8, r0
    17f2:	4689      	mov	r9, r1
    17f4:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    17f6:	2700      	movs	r7, #0
	MPU->RNR = index;
    17f8:	4d48      	ldr	r5, [pc, #288]	; (191c <mpu_configure_regions.constprop.1+0x130>)
static int mpu_configure_regions(const struct k_mem_partition
    17fa:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    17fc:	454f      	cmp	r7, r9
    17fe:	da07      	bge.n	1810 <mpu_configure_regions.constprop.1+0x24>
		if (regions[i]->size == 0U) {
    1800:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
    1804:	685e      	ldr	r6, [r3, #4]
    1806:	b3c6      	cbz	r6, 187a <mpu_configure_regions.constprop.1+0x8e>
		&&
    1808:	2e1f      	cmp	r6, #31
    180a:	d805      	bhi.n	1818 <mpu_configure_regions.constprop.1+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    180c:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    1810:	4620      	mov	r0, r4
    1812:	b005      	add	sp, #20
    1814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    1818:	06f2      	lsls	r2, r6, #27
    181a:	d1f7      	bne.n	180c <mpu_configure_regions.constprop.1+0x20>
		((part->start &
    181c:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    1820:	f01a 0f1f 	tst.w	sl, #31
    1824:	d1f2      	bne.n	180c <mpu_configure_regions.constprop.1+0x20>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1826:	4650      	mov	r0, sl
    1828:	f001 fb9f 	bl	2f6a <arm_cmse_mpu_region_get>
    182c:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    182e:	eb06 000a 	add.w	r0, r6, sl
    1832:	3801      	subs	r0, #1
    1834:	f001 fb99 	bl	2f6a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1838:	4583      	cmp	fp, r0
    183a:	d1e7      	bne.n	180c <mpu_configure_regions.constprop.1+0x20>
		if ((u_reg_index == -EINVAL) ||
    183c:	f11b 0f16 	cmn.w	fp, #22
    1840:	d0e4      	beq.n	180c <mpu_configure_regions.constprop.1+0x20>
			(u_reg_index > (reg_index - 1))) {
    1842:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    1844:	455b      	cmp	r3, fp
    1846:	dbe1      	blt.n	180c <mpu_configure_regions.constprop.1+0x20>
	MPU->RNR = index;
    1848:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    184c:	68e8      	ldr	r0, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    184e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
    1852:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1856:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    1858:	f020 001f 	bic.w	r0, r0, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    185c:	e9d1 3200 	ldrd	r3, r2, [r1]
    1860:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    1862:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1864:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    1868:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    186c:	d118      	bne.n	18a0 <mpu_configure_regions.constprop.1+0xb4>
    186e:	4556      	cmp	r6, sl
    1870:	d105      	bne.n	187e <mpu_configure_regions.constprop.1+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
    1872:	fa5f f08b 	uxtb.w	r0, fp
    1876:	f001 fe33 	bl	34e0 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    187a:	3701      	adds	r7, #1
    187c:	e7be      	b.n	17fc <mpu_configure_regions.constprop.1+0x10>
	MPU->RNR = index;
    187e:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1882:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    1884:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1888:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    188c:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    188e:	60ea      	str	r2, [r5, #12]
			reg_index =
    1890:	b2e0      	uxtb	r0, r4
			reg_index =
    1892:	f001 fe25 	bl	34e0 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1896:	f110 0f16 	cmn.w	r0, #22
    189a:	d0b7      	beq.n	180c <mpu_configure_regions.constprop.1+0x20>
			reg_index++;
    189c:	1c44      	adds	r4, r0, #1
    189e:	e7ec      	b.n	187a <mpu_configure_regions.constprop.1+0x8e>
	MPU->RNR = index;
    18a0:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    18a4:	692a      	ldr	r2, [r5, #16]
    18a6:	3b01      	subs	r3, #1
    18a8:	f023 031f 	bic.w	r3, r3, #31
    18ac:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    18b0:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    18b2:	4556      	cmp	r6, sl
    18b4:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    18b6:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    18b8:	d0eb      	beq.n	1892 <mpu_configure_regions.constprop.1+0xa6>
			reg_index =
    18ba:	f001 fe11 	bl	34e0 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    18be:	f110 0f16 	cmn.w	r0, #22
    18c2:	d0a3      	beq.n	180c <mpu_configure_regions.constprop.1+0x20>
	MPU->RNR = index;
    18c4:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    18c8:	68ea      	ldr	r2, [r5, #12]
    18ca:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    18ce:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
    18d0:	f362 0304 	bfi	r3, r2, #0, #5
    18d4:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    18d8:	692b      	ldr	r3, [r5, #16]
    18da:	f89d 2008 	ldrb.w	r2, [sp, #8]
    18de:	085b      	lsrs	r3, r3, #1
    18e0:	f363 1247 	bfi	r2, r3, #5, #3
    18e4:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    18e8:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
    18ec:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
    18ee:	e9d2 3200 	ldrd	r3, r2, [r2]
    18f2:	4413      	add	r3, r2
    18f4:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    18f6:	f023 031f 	bic.w	r3, r3, #31
    18fa:	441e      	add	r6, r3
    18fc:	eba6 060a 	sub.w	r6, r6, sl
    1900:	b2c4      	uxtb	r4, r0
    1902:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    1906:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    1908:	9603      	str	r6, [sp, #12]
    190a:	f63f af7f 	bhi.w	180c <mpu_configure_regions.constprop.1+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    190e:	4620      	mov	r0, r4
    1910:	4669      	mov	r1, sp
    1912:	f7ff ff53 	bl	17bc <region_init>
			reg_index++;
    1916:	3401      	adds	r4, #1
    1918:	e7af      	b.n	187a <mpu_configure_regions.constprop.1+0x8e>
    191a:	bf00      	nop
    191c:	e000ed90 	.word	0xe000ed90

00001920 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1920:	2205      	movs	r2, #5
    1922:	4b03      	ldr	r3, [pc, #12]	; (1930 <arm_core_mpu_enable+0x10>)
    1924:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1926:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    192a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    192e:	4770      	bx	lr
    1930:	e000ed90 	.word	0xe000ed90

00001934 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1934:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1938:	2200      	movs	r2, #0
    193a:	4b01      	ldr	r3, [pc, #4]	; (1940 <arm_core_mpu_disable+0xc>)
    193c:	605a      	str	r2, [r3, #4]
}
    193e:	4770      	bx	lr
    1940:	e000ed90 	.word	0xe000ed90

00001944 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    1944:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1946:	4d0e      	ldr	r5, [pc, #56]	; (1980 <arm_mpu_init+0x3c>)
    1948:	682e      	ldr	r6, [r5, #0]
    194a:	2e10      	cmp	r6, #16
    194c:	d815      	bhi.n	197a <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    194e:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    1950:	f7ff fff0 	bl	1934 <arm_core_mpu_disable>
	MPU->MAIR0 =
    1954:	4b0b      	ldr	r3, [pc, #44]	; (1984 <arm_mpu_init+0x40>)
    1956:	4a0c      	ldr	r2, [pc, #48]	; (1988 <arm_mpu_init+0x44>)
    1958:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    195a:	42a6      	cmp	r6, r4
    195c:	d105      	bne.n	196a <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    195e:	4b0b      	ldr	r3, [pc, #44]	; (198c <arm_mpu_init+0x48>)
    1960:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    1962:	f7ff ffdd 	bl	1920 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    1966:	2000      	movs	r0, #0
}
    1968:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    196a:	6869      	ldr	r1, [r5, #4]
    196c:	4620      	mov	r0, r4
    196e:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    1972:	f7ff ff23 	bl	17bc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1976:	3401      	adds	r4, #1
    1978:	e7ef      	b.n	195a <arm_mpu_init+0x16>
		return -1;
    197a:	f04f 30ff 	mov.w	r0, #4294967295
    197e:	e7f3      	b.n	1968 <arm_mpu_init+0x24>
    1980:	00003ae4 	.word	0x00003ae4
    1984:	e000ed90 	.word	0xe000ed90
    1988:	0044ffaa 	.word	0x0044ffaa
    198c:	2000191f 	.word	0x2000191f

00001990 <arm_core_mpu_configure_static_mpu_regions>:
{
    1990:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1992:	4c03      	ldr	r4, [pc, #12]	; (19a0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1994:	7822      	ldrb	r2, [r4, #0]
    1996:	f7ff ff29 	bl	17ec <mpu_configure_regions.constprop.1>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    199a:	7020      	strb	r0, [r4, #0]
}
    199c:	bd10      	pop	{r4, pc}
    199e:	bf00      	nop
    19a0:	2000191f 	.word	0x2000191f

000019a4 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    19a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19a8:	4689      	mov	r9, r1
    19aa:	4607      	mov	r7, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    19ac:	2600      	movs	r6, #0
    19ae:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1a40 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>
		if (dyn_reg_info[i].index == -EINVAL) {

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    19b2:	f8df a090 	ldr.w	sl, [pc, #144]	; 1a44 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
	MPU->RNR = index;
    19b6:	4c21      	ldr	r4, [pc, #132]	; (1a3c <arm_core_mpu_mark_areas_for_dynamic_regions+0x98>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    19b8:	454e      	cmp	r6, r9
    19ba:	da19      	bge.n	19f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
		if (dyn_region_areas[i].size == 0U) {
    19bc:	f8d7 b004 	ldr.w	fp, [r7, #4]
    19c0:	f1bb 0f00 	cmp.w	fp, #0
    19c4:	d036      	beq.n	1a34 <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
			get_region_index(dyn_region_areas[i].start,
    19c6:	683b      	ldr	r3, [r7, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    19c8:	4618      	mov	r0, r3
    19ca:	9301      	str	r3, [sp, #4]
    19cc:	f001 facd 	bl	2f6a <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    19d0:	9b01      	ldr	r3, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    19d2:	4605      	mov	r5, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    19d4:	eb0b 0003 	add.w	r0, fp, r3
    19d8:	3801      	subs	r0, #1
    19da:	f001 fac6 	bl	2f6a <arm_cmse_mpu_region_get>
    19de:	2314      	movs	r3, #20
	if (region_start_addr == region_end_addr) {
    19e0:	4285      	cmp	r5, r0
    19e2:	fb03 f306 	mul.w	r3, r3, r6
    19e6:	d006      	beq.n	19f6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x52>
		dyn_reg_info[i].index =
    19e8:	f06f 0215 	mvn.w	r2, #21
    19ec:	f848 2003 	str.w	r2, [r8, r3]
}
    19f0:	b003      	add	sp, #12
    19f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_reg_info[i].index == -EINVAL) {
    19f6:	f115 0f16 	cmn.w	r5, #22
		dyn_reg_info[i].index =
    19fa:	f848 5003 	str.w	r5, [r8, r3]
		if (dyn_reg_info[i].index == -EINVAL) {
    19fe:	d0f7      	beq.n	19f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
		if (dyn_reg_info[i].index >= static_regions_num) {
    1a00:	f89a 2000 	ldrb.w	r2, [sl]
    1a04:	42aa      	cmp	r2, r5
    1a06:	ddf3      	ble.n	19f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
	MPU->RNR = index;
    1a08:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
    1a0a:	4443      	add	r3, r8
	MPU->RNR = index;
    1a0c:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
    1a0e:	68e0      	ldr	r0, [r4, #12]
    1a10:	7b19      	ldrb	r1, [r3, #12]
    1a12:	f360 0104 	bfi	r1, r0, #0, #5
    1a16:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1a18:	6921      	ldr	r1, [r4, #16]
    1a1a:	7b18      	ldrb	r0, [r3, #12]
    1a1c:	0849      	lsrs	r1, r1, #1
    1a1e:	f361 1047 	bfi	r0, r1, #5, #3
    1a22:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    1a24:	68e2      	ldr	r2, [r4, #12]
    1a26:	f022 021f 	bic.w	r2, r2, #31
    1a2a:	605a      	str	r2, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    1a2c:	6922      	ldr	r2, [r4, #16]
    1a2e:	f022 021f 	bic.w	r2, r2, #31
    1a32:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1a34:	3601      	adds	r6, #1
    1a36:	370c      	adds	r7, #12
    1a38:	e7be      	b.n	19b8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    1a3a:	bf00      	nop
    1a3c:	e000ed90 	.word	0xe000ed90
    1a40:	200017f0 	.word	0x200017f0
    1a44:	2000191f 	.word	0x2000191f

00001a48 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    1a48:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    1a4a:	4b0c      	ldr	r3, [pc, #48]	; (1a7c <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    1a4c:	460e      	mov	r6, r1
    1a4e:	781c      	ldrb	r4, [r3, #0]
    1a50:	4605      	mov	r5, r0
    1a52:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
    1a54:	2100      	movs	r1, #0
  mpu->RNR = rnr;
    1a56:	4a0a      	ldr	r2, [pc, #40]	; (1a80 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1a58:	2b0f      	cmp	r3, #15
    1a5a:	dd0b      	ble.n	1a74 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>

	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
    1a5c:	4b09      	ldr	r3, [pc, #36]	; (1a84 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    1a5e:	1d19      	adds	r1, r3, #4
    1a60:	6818      	ldr	r0, [r3, #0]
    1a62:	f7ff feab 	bl	17bc <region_init>
	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1a66:	4622      	mov	r2, r4
    1a68:	4631      	mov	r1, r6
    1a6a:	4628      	mov	r0, r5
}
    1a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1a70:	f7ff bebc 	b.w	17ec <mpu_configure_regions.constprop.1>
    1a74:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    1a76:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1a78:	3301      	adds	r3, #1
    1a7a:	e7ed      	b.n	1a58 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
    1a7c:	2000191f 	.word	0x2000191f
    1a80:	e000ed90 	.word	0xe000ed90
    1a84:	200017f0 	.word	0x200017f0

00001a88 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1a88:	4b01      	ldr	r3, [pc, #4]	; (1a90 <__stdout_hook_install+0x8>)
    1a8a:	6018      	str	r0, [r3, #0]
}
    1a8c:	4770      	bx	lr
    1a8e:	bf00      	nop
    1a90:	20002678 	.word	0x20002678

00001a94 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    1a94:	b570      	push	{r4, r5, r6, lr}
	nrf_uarte_parity_t parity;
	nrf_uarte_hwfc_t hwfc;

	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    1a96:	794b      	ldrb	r3, [r1, #5]
    1a98:	2b01      	cmp	r3, #1
    1a9a:	d123      	bne.n	1ae4 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1a9c:	798b      	ldrb	r3, [r1, #6]
    1a9e:	2b03      	cmp	r3, #3
    1aa0:	d120      	bne.n	1ae4 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1aa2:	79cc      	ldrb	r4, [r1, #7]
    1aa4:	b12c      	cbz	r4, 1ab2 <uarte_nrfx_configure+0x1e>
    1aa6:	2c01      	cmp	r4, #1
    1aa8:	d11c      	bne.n	1ae4 <uarte_nrfx_configure+0x50>
	return dev->config->config_info;
    1aaa:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    1aac:	689b      	ldr	r3, [r3, #8]
    1aae:	791b      	ldrb	r3, [r3, #4]
    1ab0:	b1c3      	cbz	r3, 1ae4 <uarte_nrfx_configure+0x50>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
    1ab2:	790a      	ldrb	r2, [r1, #4]
    1ab4:	b112      	cbz	r2, 1abc <uarte_nrfx_configure+0x28>
    1ab6:	2a02      	cmp	r2, #2
    1ab8:	d114      	bne.n	1ae4 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UARTE_PARITY_INCLUDED;
    1aba:	220e      	movs	r2, #14
	switch (baudrate) {
    1abc:	f647 2612 	movw	r6, #31250	; 0x7a12
	return dev->config->config_info;
    1ac0:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
    1ac2:	689b      	ldr	r3, [r3, #8]
    1ac4:	681d      	ldr	r5, [r3, #0]
	switch (baudrate) {
    1ac6:	680b      	ldr	r3, [r1, #0]
    1ac8:	42b3      	cmp	r3, r6
    1aca:	d06b      	beq.n	1ba4 <uarte_nrfx_configure+0x110>
    1acc:	d827      	bhi.n	1b1e <uarte_nrfx_configure+0x8a>
    1ace:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1ad2:	d061      	beq.n	1b98 <uarte_nrfx_configure+0x104>
    1ad4:	d812      	bhi.n	1afc <uarte_nrfx_configure+0x68>
    1ad6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1ada:	d04d      	beq.n	1b78 <uarte_nrfx_configure+0xe4>
    1adc:	d805      	bhi.n	1aea <uarte_nrfx_configure+0x56>
    1ade:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1ae2:	d074      	beq.n	1bce <uarte_nrfx_configure+0x13a>
		return -ENOTSUP;
    1ae4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1ae8:	e052      	b.n	1b90 <uarte_nrfx_configure+0xfc>
	switch (baudrate) {
    1aea:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1aee:	d050      	beq.n	1b92 <uarte_nrfx_configure+0xfe>
    1af0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1af4:	d1f6      	bne.n	1ae4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    1af6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1afa:	e03f      	b.n	1b7c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1afc:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1b00:	d04c      	beq.n	1b9c <uarte_nrfx_configure+0x108>
    1b02:	d804      	bhi.n	1b0e <uarte_nrfx_configure+0x7a>
    1b04:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1b08:	d1ec      	bne.n	1ae4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    1b0a:	4b32      	ldr	r3, [pc, #200]	; (1bd4 <uarte_nrfx_configure+0x140>)
    1b0c:	e036      	b.n	1b7c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1b0e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    1b12:	d045      	beq.n	1ba0 <uarte_nrfx_configure+0x10c>
    1b14:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    1b18:	d1e4      	bne.n	1ae4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    1b1a:	4b2f      	ldr	r3, [pc, #188]	; (1bd8 <uarte_nrfx_configure+0x144>)
    1b1c:	e02e      	b.n	1b7c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1b1e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    1b22:	d048      	beq.n	1bb6 <uarte_nrfx_configure+0x122>
    1b24:	d812      	bhi.n	1b4c <uarte_nrfx_configure+0xb8>
    1b26:	f64d 26c0 	movw	r6, #56000	; 0xdac0
    1b2a:	42b3      	cmp	r3, r6
    1b2c:	d03d      	beq.n	1baa <uarte_nrfx_configure+0x116>
    1b2e:	d805      	bhi.n	1b3c <uarte_nrfx_configure+0xa8>
    1b30:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    1b34:	d1d6      	bne.n	1ae4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    1b36:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    1b3a:	e01f      	b.n	1b7c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1b3c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    1b40:	d036      	beq.n	1bb0 <uarte_nrfx_configure+0x11c>
    1b42:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    1b46:	d1cd      	bne.n	1ae4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    1b48:	4b24      	ldr	r3, [pc, #144]	; (1bdc <uarte_nrfx_configure+0x148>)
    1b4a:	e017      	b.n	1b7c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1b4c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    1b50:	d037      	beq.n	1bc2 <uarte_nrfx_configure+0x12e>
    1b52:	d808      	bhi.n	1b66 <uarte_nrfx_configure+0xd2>
    1b54:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1b58:	d030      	beq.n	1bbc <uarte_nrfx_configure+0x128>
    1b5a:	4e21      	ldr	r6, [pc, #132]	; (1be0 <uarte_nrfx_configure+0x14c>)
    1b5c:	42b3      	cmp	r3, r6
    1b5e:	d1c1      	bne.n	1ae4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    1b60:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1b64:	e00a      	b.n	1b7c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1b66:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    1b6a:	d02d      	beq.n	1bc8 <uarte_nrfx_configure+0x134>
    1b6c:	4e1d      	ldr	r6, [pc, #116]	; (1be4 <uarte_nrfx_configure+0x150>)
    1b6e:	42b3      	cmp	r3, r6
    1b70:	d1b8      	bne.n	1ae4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    1b72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1b76:	e001      	b.n	1b7c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00027000;
    1b78:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type   * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1b7c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), parity, hwfc);

	get_dev_data(dev)->uart_config = *cfg;
    1b80:	6883      	ldr	r3, [r0, #8]
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    1b82:	4322      	orrs	r2, r4
    1b84:	c903      	ldmia	r1, {r0, r1}
    1b86:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    1b8a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    1b8e:	2000      	movs	r0, #0
}
    1b90:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    1b92:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1b96:	e7f1      	b.n	1b7c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1b98:	4b13      	ldr	r3, [pc, #76]	; (1be8 <uarte_nrfx_configure+0x154>)
    1b9a:	e7ef      	b.n	1b7c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    1b9c:	4b13      	ldr	r3, [pc, #76]	; (1bec <uarte_nrfx_configure+0x158>)
    1b9e:	e7ed      	b.n	1b7c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1ba0:	4b13      	ldr	r3, [pc, #76]	; (1bf0 <uarte_nrfx_configure+0x15c>)
    1ba2:	e7eb      	b.n	1b7c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1ba4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1ba8:	e7e8      	b.n	1b7c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    1baa:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    1bae:	e7e5      	b.n	1b7c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    1bb0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    1bb4:	e7e2      	b.n	1b7c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    1bb6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1bba:	e7df      	b.n	1b7c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    1bbc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1bc0:	e7dc      	b.n	1b7c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    1bc2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    1bc6:	e7d9      	b.n	1b7c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    1bc8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    1bcc:	e7d6      	b.n	1b7c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00014000;
    1bce:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1bd2:	e7d3      	b.n	1b7c <uarte_nrfx_configure+0xe8>
    1bd4:	00275000 	.word	0x00275000
    1bd8:	0075c000 	.word	0x0075c000
    1bdc:	013a9000 	.word	0x013a9000
    1be0:	0003d090 	.word	0x0003d090
    1be4:	000f4240 	.word	0x000f4240
    1be8:	0013b000 	.word	0x0013b000
    1bec:	003af000 	.word	0x003af000
    1bf0:	004ea000 	.word	0x004ea000

00001bf4 <uarte_0_init>:
	return dev->config->config_info;
    1bf4:	6802      	ldr	r2, [r0, #0]
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
    1bf6:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
    1bf8:	6892      	ldr	r2, [r2, #8]
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    1bfa:	4b18      	ldr	r3, [pc, #96]	; (1c5c <uarte_0_init+0x68>)
    1bfc:	6814      	ldr	r4, [r2, #0]
    1bfe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	struct uarte_nrfx_data *data = get_dev_data(dev);
    1c02:	6885      	ldr	r5, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1c04:	2103      	movs	r1, #3
    p_reg->OUTSET = set_mask;
    1c06:	609a      	str	r2, [r3, #8]
    p_reg->PSEL.TXD = pseltxd;
    1c08:	261d      	movs	r6, #29
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1c0a:	2200      	movs	r2, #0
    1c0c:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
    1c10:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    1c14:	f8c4 650c 	str.w	r6, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    1c18:	261c      	movs	r6, #28
    1c1a:	f8c4 6514 	str.w	r6, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
    1c1e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
    1c22:	609e      	str	r6, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1c24:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
    1c28:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
    1c2c:	231b      	movs	r3, #27
    1c2e:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    1c32:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    1c34:	4629      	mov	r1, r5
    1c36:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    1c3a:	f7ff ff2b 	bl	1a94 <uarte_nrfx_configure>
	if (err) {
    1c3e:	b958      	cbnz	r0, 1c58 <uarte_0_init+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    1c40:	2308      	movs	r3, #8
    1c42:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    1c46:	441d      	add	r5, r3
__STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t *        p_buffer,
                                             size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    1c48:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1c4a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    1c4e:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    1c52:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1c56:	6023      	str	r3, [r4, #0]
	UART_NRF_UARTE_DEVICE(0);
    1c58:	bd70      	pop	{r4, r5, r6, pc}
    1c5a:	bf00      	nop
    1c5c:	50842500 	.word	0x50842500

00001c60 <mbedtls_calloc>:
    1c60:	4b01      	ldr	r3, [pc, #4]	; (1c68 <mbedtls_calloc+0x8>)
    1c62:	681b      	ldr	r3, [r3, #0]
    1c64:	4718      	bx	r3
    1c66:	bf00      	nop
    1c68:	20002688 	.word	0x20002688

00001c6c <mbedtls_free>:
    1c6c:	4b01      	ldr	r3, [pc, #4]	; (1c74 <mbedtls_free+0x8>)
    1c6e:	681b      	ldr	r3, [r3, #0]
    1c70:	4718      	bx	r3
    1c72:	bf00      	nop
    1c74:	2000268c 	.word	0x2000268c

00001c78 <mbedtls_platform_zeroize>:
    1c78:	4b02      	ldr	r3, [pc, #8]	; (1c84 <mbedtls_platform_zeroize+0xc>)
    1c7a:	460a      	mov	r2, r1
    1c7c:	681b      	ldr	r3, [r3, #0]
    1c7e:	2100      	movs	r1, #0
    1c80:	4718      	bx	r3
    1c82:	bf00      	nop
    1c84:	20002690 	.word	0x20002690

00001c88 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
    1c88:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    1c8a:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    1c8c:	4b08      	ldr	r3, [pc, #32]	; (1cb0 <z_sys_device_do_config_level+0x28>)
    1c8e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    1c92:	3001      	adds	r0, #1
    1c94:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    1c98:	42a5      	cmp	r5, r4
    1c9a:	d800      	bhi.n	1c9e <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    1c9c:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    1c9e:	6823      	ldr	r3, [r4, #0]
    1ca0:	4620      	mov	r0, r4
    1ca2:	685b      	ldr	r3, [r3, #4]
    1ca4:	4798      	blx	r3
		if (retval != 0) {
    1ca6:	b100      	cbz	r0, 1caa <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    1ca8:	6066      	str	r6, [r4, #4]
								info++) {
    1caa:	340c      	adds	r4, #12
    1cac:	e7f4      	b.n	1c98 <z_sys_device_do_config_level+0x10>
    1cae:	bf00      	nop
    1cb0:	00003cf0 	.word	0x00003cf0

00001cb4 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    1cb4:	4b10      	ldr	r3, [pc, #64]	; (1cf8 <z_impl_device_get_binding+0x44>)
{
    1cb6:	b570      	push	{r4, r5, r6, lr}
    1cb8:	4605      	mov	r5, r0
    1cba:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    1cbc:	4c0f      	ldr	r4, [pc, #60]	; (1cfc <z_impl_device_get_binding+0x48>)
    1cbe:	429c      	cmp	r4, r3
    1cc0:	d104      	bne.n	1ccc <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    1cc2:	4c0e      	ldr	r4, [pc, #56]	; (1cfc <z_impl_device_get_binding+0x48>)
    1cc4:	42b4      	cmp	r4, r6
    1cc6:	d109      	bne.n	1cdc <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    1cc8:	2400      	movs	r4, #0
    1cca:	e012      	b.n	1cf2 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    1ccc:	6862      	ldr	r2, [r4, #4]
    1cce:	b11a      	cbz	r2, 1cd8 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    1cd0:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    1cd2:	6812      	ldr	r2, [r2, #0]
    1cd4:	42aa      	cmp	r2, r5
    1cd6:	d00c      	beq.n	1cf2 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    1cd8:	340c      	adds	r4, #12
    1cda:	e7f0      	b.n	1cbe <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    1cdc:	6863      	ldr	r3, [r4, #4]
    1cde:	b90b      	cbnz	r3, 1ce4 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    1ce0:	340c      	adds	r4, #12
    1ce2:	e7ef      	b.n	1cc4 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    1ce4:	6823      	ldr	r3, [r4, #0]
    1ce6:	4628      	mov	r0, r5
    1ce8:	6819      	ldr	r1, [r3, #0]
    1cea:	f001 fc1b 	bl	3524 <strcmp>
    1cee:	2800      	cmp	r0, #0
    1cf0:	d1f6      	bne.n	1ce0 <z_impl_device_get_binding+0x2c>
}
    1cf2:	4620      	mov	r0, r4
    1cf4:	bd70      	pop	{r4, r5, r6, pc}
    1cf6:	bf00      	nop
    1cf8:	200026fc 	.word	0x200026fc
    1cfc:	2000269c 	.word	0x2000269c

00001d00 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    1d00:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    1d02:	4d0b      	ldr	r5, [pc, #44]	; (1d30 <idle+0x30>)
    1d04:	f04f 0220 	mov.w	r2, #32
    1d08:	f3ef 8311 	mrs	r3, BASEPRI
    1d0c:	f382 8811 	msr	BASEPRI, r2
    1d10:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    1d14:	f001 fd82 	bl	381c <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1d18:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    1d1a:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1d1c:	2802      	cmp	r0, #2
    1d1e:	bfd8      	it	le
    1d20:	4608      	movle	r0, r1
    1d22:	f001 fd8b 	bl	383c <z_set_timeout_expiry>
	_kernel.idle = ticks;
    1d26:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
    1d28:	f7ff f9ae 	bl	1088 <k_cpu_idle>
    1d2c:	e7ea      	b.n	1d04 <idle+0x4>
    1d2e:	bf00      	nop
    1d30:	200018dc 	.word	0x200018dc

00001d34 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    1d34:	4802      	ldr	r0, [pc, #8]	; (1d40 <z_bss_zero+0xc>)
    1d36:	4a03      	ldr	r2, [pc, #12]	; (1d44 <z_bss_zero+0x10>)
    1d38:	2100      	movs	r1, #0
    1d3a:	1a12      	subs	r2, r2, r0
    1d3c:	f001 bc43 	b.w	35c6 <memset>
    1d40:	20000000 	.word	0x20000000
    1d44:	2000192c 	.word	0x2000192c

00001d48 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    1d48:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    1d4a:	4806      	ldr	r0, [pc, #24]	; (1d64 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    1d4c:	4a06      	ldr	r2, [pc, #24]	; (1d68 <z_data_copy+0x20>)
    1d4e:	4907      	ldr	r1, [pc, #28]	; (1d6c <z_data_copy+0x24>)
    1d50:	1a12      	subs	r2, r2, r0
    1d52:	f001 fc0b 	bl	356c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    1d56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    1d5a:	4a05      	ldr	r2, [pc, #20]	; (1d70 <z_data_copy+0x28>)
    1d5c:	4905      	ldr	r1, [pc, #20]	; (1d74 <z_data_copy+0x2c>)
    1d5e:	4806      	ldr	r0, [pc, #24]	; (1d78 <z_data_copy+0x30>)
    1d60:	f001 bc04 	b.w	356c <memcpy>
    1d64:	20002670 	.word	0x20002670
    1d68:	20002710 	.word	0x20002710
    1d6c:	00004604 	.word	0x00004604
    1d70:	00000000 	.word	0x00000000
    1d74:	00004604 	.word	0x00004604
    1d78:	20000000 	.word	0x20000000

00001d7c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    1d7c:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    1d7e:	2002      	movs	r0, #2
    1d80:	f7ff ff82 	bl	1c88 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    1d84:	4807      	ldr	r0, [pc, #28]	; (1da4 <bg_thread_main+0x28>)
    1d86:	f001 fade 	bl	3346 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    1d8a:	2003      	movs	r0, #3
    1d8c:	f7ff ff7c 	bl	1c88 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    1d90:	f000 faa0 	bl	22d4 <z_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    1d94:	f001 f8e2 	bl	2f5c <main>

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    1d98:	4a03      	ldr	r2, [pc, #12]	; (1da8 <bg_thread_main+0x2c>)
    1d9a:	7b13      	ldrb	r3, [r2, #12]
    1d9c:	f023 0301 	bic.w	r3, r3, #1
    1da0:	7313      	strb	r3, [r2, #12]
}
    1da2:	bd08      	pop	{r3, pc}
    1da4:	000045cb 	.word	0x000045cb
    1da8:	20001870 	.word	0x20001870

00001dac <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    1dac:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    1dae:	4b44      	ldr	r3, [pc, #272]	; (1ec0 <z_cstart+0x114>)
    1db0:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    1db2:	f383 8808 	msr	MSP, r3
    1db6:	2500      	movs	r5, #0
    1db8:	23e0      	movs	r3, #224	; 0xe0
    1dba:	4c42      	ldr	r4, [pc, #264]	; (1ec4 <z_cstart+0x118>)

	/* perform any architecture-specific initialization */
	kernel_arch_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    1dbc:	2701      	movs	r7, #1
    1dbe:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    1dc2:	77e5      	strb	r5, [r4, #31]
    1dc4:	7625      	strb	r5, [r4, #24]
    1dc6:	7665      	strb	r5, [r4, #25]
    1dc8:	76a5      	strb	r5, [r4, #26]
    1dca:	76e5      	strb	r5, [r4, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    1dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    1dce:	4e3e      	ldr	r6, [pc, #248]	; (1ec8 <z_cstart+0x11c>)
    1dd0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    1dd4:	6263      	str	r3, [r4, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    1dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1dd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1ddc:	6263      	str	r3, [r4, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    1dde:	63a5      	str	r5, [r4, #56]	; 0x38
	/* Set NMI, Hard, and Bus Faults as Non-Secure.
	 * NMI and Bus Faults targeting the Secure state will
	 * escalate to a SecureFault or SecureHardFault.
	 */
	SCB->AIRCR =
		(SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk)))
    1de0:	68e3      	ldr	r3, [r4, #12]
    1de2:	b29b      	uxth	r3, r3
		| SCB_AIRCR_BFHFNMINS_Msk
		| ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos) &
    1de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1de8:	f443 3308 	orr.w	r3, r3, #139264	; 0x22000
	SCB->AIRCR =
    1dec:	60e3      	str	r3, [r4, #12]

static ALWAYS_INLINE void kernel_arch_init(void)
{
	z_InterruptStackSetup();
	z_ExcSetup();
	z_FaultInit();
    1dee:	f7ff fb71 	bl	14d4 <z_FaultInit>
	z_CpuIdleInit();
    1df2:	f7ff f943 	bl	107c <z_CpuIdleInit>
static ALWAYS_INLINE void z_clearfaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    1df6:	f04f 33ff 	mov.w	r3, #4294967295
    1dfa:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    1dfc:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread = {
    1dfe:	ab07      	add	r3, sp, #28
    1e00:	4629      	mov	r1, r5
    1e02:	226c      	movs	r2, #108	; 0x6c
    1e04:	4618      	mov	r0, r3
    1e06:	f001 fbde 	bl	35c6 <memset>
	_current = &dummy_thread;
    1e0a:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    1e0c:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
    1e0e:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    1e12:	f7ff ff39 	bl	1c88 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    1e16:	4638      	mov	r0, r7
    1e18:	f7ff ff36 	bl	1c88 <z_sys_device_do_config_level>
	_kernel.ready_q.cache = _main_thread;
    1e1c:	4c2b      	ldr	r4, [pc, #172]	; (1ecc <z_cstart+0x120>)
	z_sched_init();
    1e1e:	f000 f9f1 	bl	2204 <z_sched_init>
	z_setup_new_thread(_main_thread, _main_stack,
    1e22:	4b2b      	ldr	r3, [pc, #172]	; (1ed0 <z_cstart+0x124>)
	_kernel.ready_q.cache = _main_thread;
    1e24:	6274      	str	r4, [r6, #36]	; 0x24
	z_setup_new_thread(_main_thread, _main_stack,
    1e26:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1e2a:	e9cd 7304 	strd	r7, r3, [sp, #16]
    1e2e:	e9cd 5502 	strd	r5, r5, [sp, #8]
    1e32:	e9cd 5500 	strd	r5, r5, [sp]
    1e36:	4b27      	ldr	r3, [pc, #156]	; (1ed4 <z_cstart+0x128>)
    1e38:	4927      	ldr	r1, [pc, #156]	; (1ed8 <z_cstart+0x12c>)
    1e3a:	4620      	mov	r0, r4
    1e3c:	f000 fa30 	bl	22a0 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1e40:	7b63      	ldrb	r3, [r4, #13]
    1e42:	4635      	mov	r5, r6
    1e44:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1e48:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1e4c:	7362      	strb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1e4e:	d104      	bne.n	1e5a <z_cstart+0xae>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    1e50:	69a3      	ldr	r3, [r4, #24]
    1e52:	b913      	cbnz	r3, 1e5a <z_cstart+0xae>
		z_add_thread_to_ready_q(thread);
    1e54:	4620      	mov	r0, r4
    1e56:	f000 f903 	bl	2060 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
    1e5a:	4b20      	ldr	r3, [pc, #128]	; (1edc <z_cstart+0x130>)
    1e5c:	2600      	movs	r6, #0
    1e5e:	9305      	str	r3, [sp, #20]
    1e60:	2201      	movs	r2, #1
    1e62:	230f      	movs	r3, #15
    1e64:	4f1e      	ldr	r7, [pc, #120]	; (1ee0 <z_cstart+0x134>)
    1e66:	e9cd 3203 	strd	r3, r2, [sp, #12]
    1e6a:	e9cd 6601 	strd	r6, r6, [sp, #4]
    1e6e:	9600      	str	r6, [sp, #0]
    1e70:	4b1c      	ldr	r3, [pc, #112]	; (1ee4 <z_cstart+0x138>)
    1e72:	f44f 72a0 	mov.w	r2, #320	; 0x140
    1e76:	491c      	ldr	r1, [pc, #112]	; (1ee8 <z_cstart+0x13c>)
    1e78:	4638      	mov	r0, r7
    1e7a:	f000 fa11 	bl	22a0 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1e7e:	7b7b      	ldrb	r3, [r7, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
    1e80:	60ef      	str	r7, [r5, #12]
    1e82:	f023 0304 	bic.w	r3, r3, #4
    1e86:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    1e88:	4b18      	ldr	r3, [pc, #96]	; (1eec <z_cstart+0x140>)
	list->tail = (sys_dnode_t *)list;
    1e8a:	e9c5 3306 	strd	r3, r3, [r5, #24]
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    1e8e:	eee1 6a10 	vmsr	fpscr, r6
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arch_configure_static_mpu_regions();
    1e92:	f7ff fc69 	bl	1768 <z_arch_configure_static_mpu_regions>
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arch_configure_dynamic_mpu_regions(main_thread);
    1e96:	480d      	ldr	r0, [pc, #52]	; (1ecc <z_cstart+0x120>)
	_current = main_thread;
    1e98:	60ac      	str	r4, [r5, #8]
	z_arch_configure_dynamic_mpu_regions(main_thread);
    1e9a:	f001 fb19 	bl	34d0 <z_arch_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1e9e:	4b0d      	ldr	r3, [pc, #52]	; (1ed4 <z_cstart+0x128>)
    1ea0:	4a13      	ldr	r2, [pc, #76]	; (1ef0 <z_cstart+0x144>)
    1ea2:	4618      	mov	r0, r3
    1ea4:	f382 8809 	msr	PSP, r2
    1ea8:	b663      	cpsie	if
    1eaa:	f04f 0100 	mov.w	r1, #0
    1eae:	f381 8811 	msr	BASEPRI, r1
    1eb2:	f3bf 8f6f 	isb	sy
    1eb6:	2100      	movs	r1, #0
    1eb8:	2200      	movs	r2, #0
    1eba:	2300      	movs	r3, #0
    1ebc:	f001 f8cd 	bl	305a <z_thread_entry>
    1ec0:	20002670 	.word	0x20002670
    1ec4:	e000ed00 	.word	0xe000ed00
    1ec8:	200018dc 	.word	0x200018dc
    1ecc:	20001870 	.word	0x20001870
    1ed0:	000045f8 	.word	0x000045f8
    1ed4:	00001d7d 	.word	0x00001d7d
    1ed8:	20001930 	.word	0x20001930
    1edc:	000045fd 	.word	0x000045fd
    1ee0:	20001804 	.word	0x20001804
    1ee4:	00001d01 	.word	0x00001d01
    1ee8:	20001d30 	.word	0x20001d30
    1eec:	200018f4 	.word	0x200018f4
    1ef0:	20001d30 	.word	0x20001d30

00001ef4 <resched>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1ef4:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    1ef8:	280d      	cmp	r0, #13
    1efa:	d809      	bhi.n	1f10 <resched+0x1c>
    1efc:	b128      	cbz	r0, 1f0a <resched+0x16>
    1efe:	4b05      	ldr	r3, [pc, #20]	; (1f14 <resched+0x20>)
    1f00:	6858      	ldr	r0, [r3, #4]
    1f02:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    1f06:	f3c0 20c0 	ubfx	r0, r0, #11, #1
	}
	_current_cpu->swap_ok = 0;
#endif

	return !z_is_in_isr();
}
    1f0a:	f080 0001 	eor.w	r0, r0, #1
    1f0e:	4770      	bx	lr
    1f10:	2001      	movs	r0, #1
    1f12:	e7fa      	b.n	1f0a <resched+0x16>
    1f14:	e000ed00 	.word	0xe000ed00

00001f18 <reset_time_slice>:
{
    1f18:	b508      	push	{r3, lr}
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    1f1a:	f7fe fe69 	bl	bf0 <z_clock_elapsed>
    1f1e:	4b05      	ldr	r3, [pc, #20]	; (1f34 <reset_time_slice+0x1c>)
    1f20:	4a05      	ldr	r2, [pc, #20]	; (1f38 <reset_time_slice+0x20>)
    1f22:	681b      	ldr	r3, [r3, #0]
	z_set_timeout_expiry(slice_time, false);
    1f24:	2100      	movs	r1, #0
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    1f26:	4418      	add	r0, r3
    1f28:	6110      	str	r0, [r2, #16]
	z_set_timeout_expiry(slice_time, false);
    1f2a:	4618      	mov	r0, r3
}
    1f2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_set_timeout_expiry(slice_time, false);
    1f30:	f001 bc84 	b.w	383c <z_set_timeout_expiry>
    1f34:	20001914 	.word	0x20001914
    1f38:	200018dc 	.word	0x200018dc

00001f3c <k_sched_time_slice_set>:
{
    1f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f3e:	460d      	mov	r5, r1
    1f40:	f04f 0320 	mov.w	r3, #32
    1f44:	f3ef 8411 	mrs	r4, BASEPRI
    1f48:	f383 8811 	msr	BASEPRI, r3
    1f4c:	f3bf 8f6f 	isb	sy

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
    1f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1f54:	2700      	movs	r7, #0
		_current_cpu->slice_ticks = 0;
    1f56:	2200      	movs	r2, #0
    1f58:	4e0b      	ldr	r6, [pc, #44]	; (1f88 <k_sched_time_slice_set+0x4c>)
    1f5a:	4b0c      	ldr	r3, [pc, #48]	; (1f8c <k_sched_time_slice_set+0x50>)
    1f5c:	fbc1 6700 	smlal	r6, r7, r1, r0
    1f60:	611a      	str	r2, [r3, #16]
    1f62:	4630      	mov	r0, r6
    1f64:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
    1f68:	2300      	movs	r3, #0
    1f6a:	4639      	mov	r1, r7
    1f6c:	f7fe f8ea 	bl	144 <__aeabi_ldivmod>
    1f70:	4b07      	ldr	r3, [pc, #28]	; (1f90 <k_sched_time_slice_set+0x54>)
    1f72:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    1f74:	4b07      	ldr	r3, [pc, #28]	; (1f94 <k_sched_time_slice_set+0x58>)
    1f76:	601d      	str	r5, [r3, #0]
		reset_time_slice();
    1f78:	f7ff ffce 	bl	1f18 <reset_time_slice>
	__asm__ volatile(
    1f7c:	f384 8811 	msr	BASEPRI, r4
    1f80:	f3bf 8f6f 	isb	sy
}
    1f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f86:	bf00      	nop
    1f88:	0003e7ff 	.word	0x0003e7ff
    1f8c:	200018dc 	.word	0x200018dc
    1f90:	20001914 	.word	0x20001914
    1f94:	20001910 	.word	0x20001910

00001f98 <k_sched_lock>:
	__asm__ volatile(
    1f98:	f04f 0320 	mov.w	r3, #32
    1f9c:	f3ef 8111 	mrs	r1, BASEPRI
    1fa0:	f383 8811 	msr	BASEPRI, r3
    1fa4:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    1fa8:	4b04      	ldr	r3, [pc, #16]	; (1fbc <k_sched_lock+0x24>)
    1faa:	689a      	ldr	r2, [r3, #8]
    1fac:	7bd3      	ldrb	r3, [r2, #15]
    1fae:	3b01      	subs	r3, #1
    1fb0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    1fb2:	f381 8811 	msr	BASEPRI, r1
    1fb6:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    1fba:	4770      	bx	lr
    1fbc:	200018dc 	.word	0x200018dc

00001fc0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    1fc0:	4b09      	ldr	r3, [pc, #36]	; (1fe8 <z_priq_dumb_remove+0x28>)
    1fc2:	f103 0228 	add.w	r2, r3, #40	; 0x28
    1fc6:	4282      	cmp	r2, r0
    1fc8:	d105      	bne.n	1fd6 <z_priq_dumb_remove+0x16>
    1fca:	689b      	ldr	r3, [r3, #8]
    1fcc:	428b      	cmp	r3, r1
    1fce:	d102      	bne.n	1fd6 <z_priq_dumb_remove+0x16>
    1fd0:	7b4b      	ldrb	r3, [r1, #13]
    1fd2:	06db      	lsls	r3, r3, #27
    1fd4:	d107      	bne.n	1fe6 <z_priq_dumb_remove+0x26>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    1fd6:	e9d1 2300 	ldrd	r2, r3, [r1]
    1fda:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    1fdc:	680a      	ldr	r2, [r1, #0]
    1fde:	6053      	str	r3, [r2, #4]
	node->next = NULL;
    1fe0:	2300      	movs	r3, #0
	node->prev = NULL;
    1fe2:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    1fe6:	4770      	bx	lr
    1fe8:	200018dc 	.word	0x200018dc

00001fec <update_cache>:
{
    1fec:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    1fee:	4c0d      	ldr	r4, [pc, #52]	; (2024 <update_cache+0x38>)
{
    1ff0:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    1ff2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    1ff6:	f001 fb94 	bl	3722 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    1ffa:	4605      	mov	r5, r0
    1ffc:	b900      	cbnz	r0, 2000 <update_cache+0x14>
    1ffe:	68e5      	ldr	r5, [r4, #12]
    2000:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok != 0) {
    2002:	b94a      	cbnz	r2, 2018 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    2004:	7b5a      	ldrb	r2, [r3, #13]
    2006:	06d2      	lsls	r2, r2, #27
    2008:	d106      	bne.n	2018 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    200a:	69aa      	ldr	r2, [r5, #24]
    200c:	b922      	cbnz	r2, 2018 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
    200e:	89da      	ldrh	r2, [r3, #14]
    2010:	2a7f      	cmp	r2, #127	; 0x7f
    2012:	d901      	bls.n	2018 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    2014:	6263      	str	r3, [r4, #36]	; 0x24
}
    2016:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    2018:	429d      	cmp	r5, r3
    201a:	d001      	beq.n	2020 <update_cache+0x34>
			reset_time_slice();
    201c:	f7ff ff7c 	bl	1f18 <reset_time_slice>
		_kernel.ready_q.cache = th;
    2020:	6265      	str	r5, [r4, #36]	; 0x24
}
    2022:	e7f8      	b.n	2016 <update_cache+0x2a>
    2024:	200018dc 	.word	0x200018dc

00002028 <k_sched_unlock>:
{
    2028:	b510      	push	{r4, lr}
	__asm__ volatile(
    202a:	f04f 0320 	mov.w	r3, #32
    202e:	f3ef 8411 	mrs	r4, BASEPRI
    2032:	f383 8811 	msr	BASEPRI, r3
    2036:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    203a:	4b08      	ldr	r3, [pc, #32]	; (205c <k_sched_unlock+0x34>)
		update_cache(1);
    203c:	2001      	movs	r0, #1
		++_current->base.sched_locked;
    203e:	689a      	ldr	r2, [r3, #8]
    2040:	7bd3      	ldrb	r3, [r2, #15]
    2042:	3301      	adds	r3, #1
    2044:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
    2046:	f7ff ffd1 	bl	1fec <update_cache>
	__asm__ volatile(
    204a:	f384 8811 	msr	BASEPRI, r4
    204e:	f3bf 8f6f 	isb	sy
}
    2052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    2056:	f001 bb5a 	b.w	370e <z_reschedule_unlocked>
    205a:	bf00      	nop
    205c:	200018dc 	.word	0x200018dc

00002060 <z_add_thread_to_ready_q>:
{
    2060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    2062:	f04f 0320 	mov.w	r3, #32
    2066:	f3ef 8411 	mrs	r4, BASEPRI
    206a:	f383 8811 	msr	BASEPRI, r3
    206e:	f3bf 8f6f 	isb	sy
	return list->head == list;
    2072:	4a16      	ldr	r2, [pc, #88]	; (20cc <z_add_thread_to_ready_q+0x6c>)
    2074:	4611      	mov	r1, r2
    2076:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    207a:	428b      	cmp	r3, r1
    207c:	d00c      	beq.n	2098 <z_add_thread_to_ready_q+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    207e:	b15b      	cbz	r3, 2098 <z_add_thread_to_ready_q+0x38>
    2080:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    2082:	f990 500e 	ldrsb.w	r5, [r0, #14]
    2086:	f993 700e 	ldrsb.w	r7, [r3, #14]
    208a:	42af      	cmp	r7, r5
    208c:	dc0b      	bgt.n	20a6 <z_add_thread_to_ready_q+0x46>
	return (node == list->tail) ? NULL : node->next;
    208e:	42b3      	cmp	r3, r6
    2090:	d002      	beq.n	2098 <z_add_thread_to_ready_q+0x38>
    2092:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2094:	2b00      	cmp	r3, #0
    2096:	d1f6      	bne.n	2086 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    2098:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    209a:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    209c:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    209e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    20a0:	6018      	str	r0, [r3, #0]
	list->tail = node;
    20a2:	62d0      	str	r0, [r2, #44]	; 0x2c
    20a4:	e005      	b.n	20b2 <z_add_thread_to_ready_q+0x52>
	node->prev = successor->prev;
    20a6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    20a8:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    20ac:	685a      	ldr	r2, [r3, #4]
    20ae:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    20b0:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    20b2:	7b43      	ldrb	r3, [r0, #13]
    20b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    20b8:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    20ba:	2000      	movs	r0, #0
    20bc:	f7ff ff96 	bl	1fec <update_cache>
	__asm__ volatile(
    20c0:	f384 8811 	msr	BASEPRI, r4
    20c4:	f3bf 8f6f 	isb	sy
}
    20c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20ca:	bf00      	nop
    20cc:	200018dc 	.word	0x200018dc

000020d0 <z_move_thread_to_end_of_prio_q>:
{
    20d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20d2:	4604      	mov	r4, r0
	__asm__ volatile(
    20d4:	f04f 0320 	mov.w	r3, #32
    20d8:	f3ef 8611 	mrs	r6, BASEPRI
    20dc:	f383 8811 	msr	BASEPRI, r3
    20e0:	f3bf 8f6f 	isb	sy
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    20e4:	4f19      	ldr	r7, [pc, #100]	; (214c <z_move_thread_to_end_of_prio_q+0x7c>)
    20e6:	4601      	mov	r1, r0
    20e8:	f107 0528 	add.w	r5, r7, #40	; 0x28
    20ec:	4628      	mov	r0, r5
    20ee:	f7ff ff67 	bl	1fc0 <z_priq_dumb_remove>
	return list->head == list;
    20f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    20f4:	463a      	mov	r2, r7
	return sys_dlist_is_empty(list) ? NULL : list->head;
    20f6:	42ab      	cmp	r3, r5
    20f8:	d00c      	beq.n	2114 <z_move_thread_to_end_of_prio_q+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    20fa:	b15b      	cbz	r3, 2114 <z_move_thread_to_end_of_prio_q+0x44>
    20fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    20fe:	f994 100e 	ldrsb.w	r1, [r4, #14]
    2102:	f993 700e 	ldrsb.w	r7, [r3, #14]
    2106:	428f      	cmp	r7, r1
    2108:	dc0b      	bgt.n	2122 <z_move_thread_to_end_of_prio_q+0x52>
	return (node == list->tail) ? NULL : node->next;
    210a:	4283      	cmp	r3, r0
    210c:	d002      	beq.n	2114 <z_move_thread_to_end_of_prio_q+0x44>
    210e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2110:	2b00      	cmp	r3, #0
    2112:	d1f6      	bne.n	2102 <z_move_thread_to_end_of_prio_q+0x32>
	node->prev = list->tail;
    2114:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    2116:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    2118:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    211a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    211c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    211e:	62d4      	str	r4, [r2, #44]	; 0x2c
    2120:	e005      	b.n	212e <z_move_thread_to_end_of_prio_q+0x5e>
	node->prev = successor->prev;
    2122:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    2124:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    2128:	6859      	ldr	r1, [r3, #4]
    212a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    212c:	605c      	str	r4, [r3, #4]
    212e:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    2130:	6890      	ldr	r0, [r2, #8]
    2132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2136:	7363      	strb	r3, [r4, #13]
    2138:	1b03      	subs	r3, r0, r4
    213a:	4258      	negs	r0, r3
    213c:	4158      	adcs	r0, r3
    213e:	f7ff ff55 	bl	1fec <update_cache>
	__asm__ volatile(
    2142:	f386 8811 	msr	BASEPRI, r6
    2146:	f3bf 8f6f 	isb	sy
}
    214a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    214c:	200018dc 	.word	0x200018dc

00002150 <z_time_slice>:
	if (pending_current == _current) {
    2150:	4914      	ldr	r1, [pc, #80]	; (21a4 <z_time_slice+0x54>)
    2152:	4a15      	ldr	r2, [pc, #84]	; (21a8 <z_time_slice+0x58>)
{
    2154:	b510      	push	{r4, lr}
	if (pending_current == _current) {
    2156:	688b      	ldr	r3, [r1, #8]
    2158:	6814      	ldr	r4, [r2, #0]
    215a:	42a3      	cmp	r3, r4
    215c:	d103      	bne.n	2166 <z_time_slice+0x16>
}
    215e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
    2162:	f7ff bed9 	b.w	1f18 <reset_time_slice>
	pending_current = NULL;
    2166:	2400      	movs	r4, #0
    2168:	6014      	str	r4, [r2, #0]
	if (slice_time && sliceable(_current)) {
    216a:	4a10      	ldr	r2, [pc, #64]	; (21ac <z_time_slice+0x5c>)
    216c:	6812      	ldr	r2, [r2, #0]
    216e:	b1ba      	cbz	r2, 21a0 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
    2170:	89da      	ldrh	r2, [r3, #14]
    2172:	2a7f      	cmp	r2, #127	; 0x7f
    2174:	d814      	bhi.n	21a0 <z_time_slice+0x50>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    2176:	4a0e      	ldr	r2, [pc, #56]	; (21b0 <z_time_slice+0x60>)
    2178:	f993 400e 	ldrsb.w	r4, [r3, #14]
    217c:	6812      	ldr	r2, [r2, #0]
    217e:	4294      	cmp	r4, r2
    2180:	db0e      	blt.n	21a0 <z_time_slice+0x50>
	return thread == _idle_thread;
    2182:	4a0c      	ldr	r2, [pc, #48]	; (21b4 <z_time_slice+0x64>)
		&& !is_idle(t)
    2184:	6812      	ldr	r2, [r2, #0]
    2186:	4293      	cmp	r3, r2
    2188:	d00a      	beq.n	21a0 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
    218a:	699a      	ldr	r2, [r3, #24]
    218c:	b942      	cbnz	r2, 21a0 <z_time_slice+0x50>
		if (ticks >= _current_cpu->slice_ticks) {
    218e:	690a      	ldr	r2, [r1, #16]
    2190:	4282      	cmp	r2, r0
    2192:	dc03      	bgt.n	219c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    2194:	4618      	mov	r0, r3
    2196:	f7ff ff9b 	bl	20d0 <z_move_thread_to_end_of_prio_q>
    219a:	e7e0      	b.n	215e <z_time_slice+0xe>
			_current_cpu->slice_ticks -= ticks;
    219c:	1a12      	subs	r2, r2, r0
    219e:	610a      	str	r2, [r1, #16]
}
    21a0:	bd10      	pop	{r4, pc}
    21a2:	bf00      	nop
    21a4:	200018dc 	.word	0x200018dc
    21a8:	2000190c 	.word	0x2000190c
    21ac:	20001914 	.word	0x20001914
    21b0:	20001910 	.word	0x20001910
    21b4:	00003d08 	.word	0x00003d08

000021b8 <z_remove_thread_from_ready_q>:
{
    21b8:	b538      	push	{r3, r4, r5, lr}
    21ba:	4604      	mov	r4, r0
	__asm__ volatile(
    21bc:	f04f 0320 	mov.w	r3, #32
    21c0:	f3ef 8511 	mrs	r5, BASEPRI
    21c4:	f383 8811 	msr	BASEPRI, r3
    21c8:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    21cc:	7b43      	ldrb	r3, [r0, #13]
    21ce:	065a      	lsls	r2, r3, #25
    21d0:	d507      	bpl.n	21e2 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    21d2:	4601      	mov	r1, r0
    21d4:	4809      	ldr	r0, [pc, #36]	; (21fc <z_remove_thread_from_ready_q+0x44>)
    21d6:	f7ff fef3 	bl	1fc0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    21da:	7b63      	ldrb	r3, [r4, #13]
    21dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    21e0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    21e2:	4b07      	ldr	r3, [pc, #28]	; (2200 <z_remove_thread_from_ready_q+0x48>)
    21e4:	6898      	ldr	r0, [r3, #8]
    21e6:	1b03      	subs	r3, r0, r4
    21e8:	4258      	negs	r0, r3
    21ea:	4158      	adcs	r0, r3
    21ec:	f7ff fefe 	bl	1fec <update_cache>
	__asm__ volatile(
    21f0:	f385 8811 	msr	BASEPRI, r5
    21f4:	f3bf 8f6f 	isb	sy
}
    21f8:	bd38      	pop	{r3, r4, r5, pc}
    21fa:	bf00      	nop
    21fc:	20001904 	.word	0x20001904
    2200:	200018dc 	.word	0x200018dc

00002204 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    2204:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    2206:	4b04      	ldr	r3, [pc, #16]	; (2218 <z_sched_init+0x14>)
    2208:	4608      	mov	r0, r1
    220a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    220e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    2212:	f7ff be93 	b.w	1f3c <k_sched_time_slice_set>
    2216:	bf00      	nop
    2218:	200018dc 	.word	0x200018dc

0000221c <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    221c:	4b01      	ldr	r3, [pc, #4]	; (2224 <z_impl_k_current_get+0x8>)
    221e:	6898      	ldr	r0, [r3, #8]
    2220:	4770      	bx	lr
    2222:	bf00      	nop
    2224:	200018dc 	.word	0x200018dc

00002228 <k_is_in_isr>:
    2228:	f3ef 8005 	mrs	r0, IPSR
    222c:	280d      	cmp	r0, #13
    222e:	d807      	bhi.n	2240 <k_is_in_isr+0x18>
    2230:	b138      	cbz	r0, 2242 <k_is_in_isr+0x1a>
    2232:	4b04      	ldr	r3, [pc, #16]	; (2244 <k_is_in_isr+0x1c>)
    2234:	6858      	ldr	r0, [r3, #4]
    2236:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    223a:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    223e:	4770      	bx	lr
    2240:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_is_in_isr();
}
    2242:	4770      	bx	lr
    2244:	e000ed00 	.word	0xe000ed00

00002248 <z_is_thread_essential>:
 *
 * Returns true if current thread is essential, false if it is not.
 */
bool z_is_thread_essential(void)
{
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
    2248:	4b02      	ldr	r3, [pc, #8]	; (2254 <z_is_thread_essential+0xc>)
    224a:	689b      	ldr	r3, [r3, #8]
    224c:	7b18      	ldrb	r0, [r3, #12]
}
    224e:	f000 0001 	and.w	r0, r0, #1
    2252:	4770      	bx	lr
    2254:	200018dc 	.word	0x200018dc

00002258 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    2258:	b510      	push	{r4, lr}
    225a:	4602      	mov	r2, r0
	__asm__ volatile(
    225c:	f04f 0320 	mov.w	r3, #32
    2260:	f3ef 8411 	mrs	r4, BASEPRI
    2264:	f383 8811 	msr	BASEPRI, r3
    2268:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    226c:	7b43      	ldrb	r3, [r0, #13]
    226e:	0759      	lsls	r1, r3, #29
    2270:	d404      	bmi.n	227c <z_impl_k_thread_start+0x24>
	__asm__ volatile(
    2272:	f384 8811 	msr	BASEPRI, r4
    2276:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    227a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    227c:	f023 0304 	bic.w	r3, r3, #4
    2280:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
    2282:	f001 fa85 	bl	3790 <z_is_thread_ready>
    2286:	b110      	cbz	r0, 228e <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    2288:	4610      	mov	r0, r2
    228a:	f7ff fee9 	bl	2060 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    228e:	4621      	mov	r1, r4
}
    2290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    2294:	4801      	ldr	r0, [pc, #4]	; (229c <z_impl_k_thread_start+0x44>)
    2296:	f001 ba1d 	b.w	36d4 <z_reschedule>
    229a:	bf00      	nop
    229c:	20001920 	.word	0x20001920

000022a0 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    22a0:	b530      	push	{r4, r5, lr}
    22a2:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    22a4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
    22a6:	4604      	mov	r4, r0
	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    22a8:	9504      	str	r5, [sp, #16]
    22aa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    22ac:	9503      	str	r5, [sp, #12]
    22ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    22b0:	9502      	str	r5, [sp, #8]
    22b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    22b4:	9501      	str	r5, [sp, #4]
    22b6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    22b8:	9500      	str	r5, [sp, #0]
    22ba:	f7ff f94f 	bl	155c <z_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    22be:	4b04      	ldr	r3, [pc, #16]	; (22d0 <CONFIG_NRF_CLOUD_PORT+0x1d>)
    22c0:	689b      	ldr	r3, [r3, #8]
    22c2:	b913      	cbnz	r3, 22ca <CONFIG_NRF_CLOUD_PORT+0x17>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    22c4:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    22c6:	b007      	add	sp, #28
    22c8:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
    22ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    22cc:	e7fa      	b.n	22c4 <CONFIG_NRF_CLOUD_PORT+0x11>
    22ce:	bf00      	nop
    22d0:	200018dc 	.word	0x200018dc

000022d4 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    22d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    22d8:	4e28      	ldr	r6, [pc, #160]	; (237c <z_init_static_threads+0xa8>)
    22da:	4d29      	ldr	r5, [pc, #164]	; (2380 <z_init_static_threads+0xac>)
    22dc:	46b0      	mov	r8, r6
{
    22de:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    22e0:	42b5      	cmp	r5, r6
    22e2:	f105 0430 	add.w	r4, r5, #48	; 0x30
    22e6:	d30f      	bcc.n	2308 <z_init_static_threads+0x34>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    22e8:	f7ff fe56 	bl	1f98 <k_sched_lock>
    22ec:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    22f0:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    22f2:	4c23      	ldr	r4, [pc, #140]	; (2380 <z_init_static_threads+0xac>)
    22f4:	4e23      	ldr	r6, [pc, #140]	; (2384 <z_init_static_threads+0xb0>)

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    22f6:	f8df a090 	ldr.w	sl, [pc, #144]	; 2388 <z_init_static_threads+0xb4>
    22fa:	4544      	cmp	r4, r8
    22fc:	d321      	bcc.n	2342 <z_init_static_threads+0x6e>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    22fe:	b007      	add	sp, #28
    2300:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    2304:	f7ff be90 	b.w	2028 <k_sched_unlock>
		z_setup_new_thread(
    2308:	f854 3c04 	ldr.w	r3, [r4, #-4]
    230c:	9305      	str	r3, [sp, #20]
    230e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    2312:	9304      	str	r3, [sp, #16]
    2314:	f854 3c14 	ldr.w	r3, [r4, #-20]
    2318:	9303      	str	r3, [sp, #12]
    231a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    231e:	9302      	str	r3, [sp, #8]
    2320:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2324:	9301      	str	r3, [sp, #4]
    2326:	f854 3c20 	ldr.w	r3, [r4, #-32]
    232a:	9300      	str	r3, [sp, #0]
    232c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    2330:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    2334:	f7ff ffb4 	bl	22a0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    2338:	f854 3c30 	ldr.w	r3, [r4, #-48]
    233c:	64dd      	str	r5, [r3, #76]	; 0x4c
    233e:	4625      	mov	r5, r4
    2340:	e7ce      	b.n	22e0 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    2342:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2344:	1c4b      	adds	r3, r1, #1
    2346:	d004      	beq.n	2352 <z_init_static_threads+0x7e>
			schedule_new_thread(thread_data->init_thread,
    2348:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    234a:	b921      	cbnz	r1, 2356 <z_init_static_threads+0x82>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
    234c:	4628      	mov	r0, r5
    234e:	f7ff ff83 	bl	2258 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2352:	3430      	adds	r4, #48	; 0x30
    2354:	e7d1      	b.n	22fa <z_init_static_threads+0x26>
    2356:	46b3      	mov	fp, r6
    2358:	46bc      	mov	ip, r7
    235a:	fbc9 bc01 	smlal	fp, ip, r9, r1
    235e:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
    2362:	2300      	movs	r3, #0
    2364:	4658      	mov	r0, fp
    2366:	4661      	mov	r1, ip
    2368:	f7fd feec 	bl	144 <__aeabi_ldivmod>
    236c:	4651      	mov	r1, sl
    236e:	1c42      	adds	r2, r0, #1
    2370:	f105 0018 	add.w	r0, r5, #24
    2374:	f000 f852 	bl	241c <z_add_timeout>
    2378:	e7eb      	b.n	2352 <z_init_static_threads+0x7e>
    237a:	bf00      	nop
    237c:	200026fc 	.word	0x200026fc
    2380:	200026fc 	.word	0x200026fc
    2384:	0003e7ff 	.word	0x0003e7ff
    2388:	0000372f 	.word	0x0000372f

0000238c <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    238c:	4b03      	ldr	r3, [pc, #12]	; (239c <elapsed+0x10>)
    238e:	681b      	ldr	r3, [r3, #0]
    2390:	b90b      	cbnz	r3, 2396 <elapsed+0xa>
    2392:	f7fe bc2d 	b.w	bf0 <z_clock_elapsed>
}
    2396:	2000      	movs	r0, #0
    2398:	4770      	bx	lr
    239a:	bf00      	nop
    239c:	20001918 	.word	0x20001918

000023a0 <remove_timeout>:
{
    23a0:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    23a2:	b140      	cbz	r0, 23b6 <remove_timeout+0x16>
    23a4:	4a08      	ldr	r2, [pc, #32]	; (23c8 <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
    23a6:	6852      	ldr	r2, [r2, #4]
    23a8:	4290      	cmp	r0, r2
    23aa:	d004      	beq.n	23b6 <remove_timeout+0x16>
	if (next(t) != NULL) {
    23ac:	b11b      	cbz	r3, 23b6 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    23ae:	689a      	ldr	r2, [r3, #8]
    23b0:	6881      	ldr	r1, [r0, #8]
    23b2:	440a      	add	r2, r1
    23b4:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    23b6:	6842      	ldr	r2, [r0, #4]
    23b8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    23ba:	6803      	ldr	r3, [r0, #0]
    23bc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    23be:	2300      	movs	r3, #0
	node->prev = NULL;
    23c0:	e9c0 3300 	strd	r3, r3, [r0]
}
    23c4:	4770      	bx	lr
    23c6:	bf00      	nop
    23c8:	20002694 	.word	0x20002694

000023cc <next_timeout>:

static s32_t next_timeout(void)
{
    23cc:	b538      	push	{r3, r4, r5, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
    23ce:	4b10      	ldr	r3, [pc, #64]	; (2410 <next_timeout+0x44>)
    23d0:	781b      	ldrb	r3, [r3, #0]
    23d2:	2b00      	cmp	r3, #0
	return list->head == list;
    23d4:	4b0f      	ldr	r3, [pc, #60]	; (2414 <next_timeout+0x48>)
    23d6:	bf18      	it	ne
    23d8:	f04f 30ff 	movne.w	r0, #4294967295
    23dc:	681c      	ldr	r4, [r3, #0]
    23de:	bf08      	it	eq
    23e0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
	return sys_dlist_is_empty(list) ? NULL : list->head;
    23e4:	429c      	cmp	r4, r3
    23e6:	d00a      	beq.n	23fe <next_timeout+0x32>
	struct _timeout *to = first();
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
    23e8:	b14c      	cbz	r4, 23fe <next_timeout+0x32>
    23ea:	68a5      	ldr	r5, [r4, #8]
    23ec:	f7ff ffce 	bl	238c <elapsed>
    23f0:	1a28      	subs	r0, r5, r0
    23f2:	2800      	cmp	r0, #0
    23f4:	db0a      	blt.n	240c <next_timeout+0x40>
    23f6:	68a4      	ldr	r4, [r4, #8]
    23f8:	f7ff ffc8 	bl	238c <elapsed>
    23fc:	1a20      	subs	r0, r4, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    23fe:	4b06      	ldr	r3, [pc, #24]	; (2418 <next_timeout+0x4c>)
    2400:	691b      	ldr	r3, [r3, #16]
    2402:	b113      	cbz	r3, 240a <next_timeout+0x3e>
    2404:	4298      	cmp	r0, r3
    2406:	bfa8      	it	ge
    2408:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    240a:	bd38      	pop	{r3, r4, r5, pc}
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
    240c:	2000      	movs	r0, #0
    240e:	e7f6      	b.n	23fe <next_timeout+0x32>
    2410:	20001920 	.word	0x20001920
    2414:	20002694 	.word	0x20002694
    2418:	200018dc 	.word	0x200018dc

0000241c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    241c:	b570      	push	{r4, r5, r6, lr}
    241e:	4604      	mov	r4, r0
    2420:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    2422:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    2424:	f04f 0320 	mov.w	r3, #32
    2428:	f3ef 8511 	mrs	r5, BASEPRI
    242c:	f383 8811 	msr	BASEPRI, r3
    2430:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    2434:	f7ff ffaa 	bl	238c <elapsed>
    2438:	2e01      	cmp	r6, #1
    243a:	bfac      	ite	ge
    243c:	1980      	addge	r0, r0, r6
    243e:	3001      	addlt	r0, #1
	return list->head == list;
    2440:	4b17      	ldr	r3, [pc, #92]	; (24a0 <z_add_timeout+0x84>)
    2442:	60a0      	str	r0, [r4, #8]
    2444:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2446:	429a      	cmp	r2, r3
    2448:	d001      	beq.n	244e <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    244a:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    244c:	b932      	cbnz	r2, 245c <z_add_timeout+0x40>
	node->prev = list->tail;
    244e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    2450:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
    2452:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    2454:	685a      	ldr	r2, [r3, #4]
    2456:	6014      	str	r4, [r2, #0]
	list->tail = node;
    2458:	605c      	str	r4, [r3, #4]
    245a:	e00b      	b.n	2474 <z_add_timeout+0x58>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    245c:	6890      	ldr	r0, [r2, #8]
    245e:	68a1      	ldr	r1, [r4, #8]
    2460:	4288      	cmp	r0, r1
    2462:	dd16      	ble.n	2492 <z_add_timeout+0x76>
				t->dticks -= to->dticks;
    2464:	1a41      	subs	r1, r0, r1
    2466:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    2468:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    246a:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    246e:	6851      	ldr	r1, [r2, #4]
    2470:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    2472:	6054      	str	r4, [r2, #4]
	return list->head == list;
    2474:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2476:	429a      	cmp	r2, r3
    2478:	d006      	beq.n	2488 <z_add_timeout+0x6c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    247a:	4294      	cmp	r4, r2
    247c:	d104      	bne.n	2488 <z_add_timeout+0x6c>
			z_clock_set_timeout(next_timeout(), false);
    247e:	f7ff ffa5 	bl	23cc <next_timeout>
    2482:	2100      	movs	r1, #0
    2484:	f7fe fb7c 	bl	b80 <z_clock_set_timeout>
	__asm__ volatile(
    2488:	f385 8811 	msr	BASEPRI, r5
    248c:	f3bf 8f6f 	isb	sy
		}
	}
}
    2490:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    2492:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    2494:	4296      	cmp	r6, r2
    2496:	60a1      	str	r1, [r4, #8]
    2498:	d0d9      	beq.n	244e <z_add_timeout+0x32>
    249a:	6812      	ldr	r2, [r2, #0]
    249c:	e7d6      	b.n	244c <z_add_timeout+0x30>
    249e:	bf00      	nop
    24a0:	20002694 	.word	0x20002694

000024a4 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    24a4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    24a8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    24aa:	f7ff fe51 	bl	2150 <z_time_slice>
	__asm__ volatile(
    24ae:	f04f 0320 	mov.w	r3, #32
    24b2:	f3ef 8511 	mrs	r5, BASEPRI
    24b6:	f383 8811 	msr	BASEPRI, r3
    24ba:	f3bf 8f6f 	isb	sy
    24be:	4f21      	ldr	r7, [pc, #132]	; (2544 <z_clock_announce+0xa0>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    24c0:	4e21      	ldr	r6, [pc, #132]	; (2548 <z_clock_announce+0xa4>)
    24c2:	46b8      	mov	r8, r7
	return list->head == list;
    24c4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 254c <z_clock_announce+0xa8>
    24c8:	6034      	str	r4, [r6, #0]
    24ca:	f8d9 4000 	ldr.w	r4, [r9]
    24ce:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    24d0:	454c      	cmp	r4, r9
    24d2:	e9d7 bc00 	ldrd	fp, ip, [r7]
    24d6:	d005      	beq.n	24e4 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    24d8:	b124      	cbz	r4, 24e4 <z_clock_announce+0x40>
    24da:	68a3      	ldr	r3, [r4, #8]
    24dc:	4293      	cmp	r3, r2
    24de:	dd14      	ble.n	250a <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    24e0:	1a9b      	subs	r3, r3, r2
    24e2:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    24e4:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    24e6:	eb1b 0002 	adds.w	r0, fp, r2
    24ea:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
    24ee:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    24f2:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    24f4:	f7ff ff6a 	bl	23cc <next_timeout>
    24f8:	4621      	mov	r1, r4
    24fa:	f7fe fb41 	bl	b80 <z_clock_set_timeout>
	__asm__ volatile(
    24fe:	f385 8811 	msr	BASEPRI, r5
    2502:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    2506:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    250a:	eb1b 0003 	adds.w	r0, fp, r3
    250e:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    2512:	1ad3      	subs	r3, r2, r3
    2514:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    2516:	2300      	movs	r3, #0
		curr_tick += dt;
    2518:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    251c:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    251e:	4620      	mov	r0, r4
    2520:	f7ff ff3e 	bl	23a0 <remove_timeout>
    2524:	f385 8811 	msr	BASEPRI, r5
    2528:	f3bf 8f6f 	isb	sy
		t->fn(t);
    252c:	68e3      	ldr	r3, [r4, #12]
    252e:	4798      	blx	r3
	__asm__ volatile(
    2530:	f04f 0320 	mov.w	r3, #32
    2534:	f3ef 8511 	mrs	r5, BASEPRI
    2538:	f383 8811 	msr	BASEPRI, r3
    253c:	f3bf 8f6f 	isb	sy
    2540:	e7c3      	b.n	24ca <z_clock_announce+0x26>
    2542:	bf00      	nop
    2544:	20000000 	.word	0x20000000
    2548:	20001918 	.word	0x20001918
    254c:	20002694 	.word	0x20002694

00002550 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    2550:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    2552:	4c07      	ldr	r4, [pc, #28]	; (2570 <init_static_pools+0x20>)
    2554:	4d07      	ldr	r5, [pc, #28]	; (2574 <init_static_pools+0x24>)
    2556:	42ac      	cmp	r4, r5
    2558:	d301      	bcc.n	255e <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    255a:	2000      	movs	r0, #0
    255c:	bd38      	pop	{r3, r4, r5, pc}
    255e:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    2562:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    2564:	e9c4 3305 	strd	r3, r3, [r4, #20]
    2568:	f000 fd2c 	bl	2fc4 <z_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    256c:	341c      	adds	r4, #28
    256e:	e7f2      	b.n	2556 <init_static_pools+0x6>
    2570:	200026fc 	.word	0x200026fc
    2574:	200026fc 	.word	0x200026fc

00002578 <mbedtls_hardware_poll>:
    2578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    257c:	b092      	sub	sp, #72	; 0x48
    257e:	9205      	str	r2, [sp, #20]
    2580:	2900      	cmp	r1, #0
    2582:	d066      	beq.n	2652 <mbedtls_hardware_poll+0xda>
    2584:	2b00      	cmp	r3, #0
    2586:	d064      	beq.n	2652 <mbedtls_hardware_poll+0xda>
    2588:	2a00      	cmp	r2, #0
    258a:	d062      	beq.n	2652 <mbedtls_hardware_poll+0xda>
    258c:	460f      	mov	r7, r1
    258e:	461d      	mov	r5, r3
    2590:	4604      	mov	r4, r0
    2592:	b1e0      	cbz	r0, 25ce <mbedtls_hardware_poll+0x56>
    2594:	ae06      	add	r6, sp, #24
    2596:	4630      	mov	r0, r6
    2598:	2104      	movs	r1, #4
    259a:	f000 f8bf 	bl	271c <CC_PalMemSetZeroPlat>
    259e:	a808      	add	r0, sp, #32
    25a0:	2128      	movs	r1, #40	; 0x28
    25a2:	f000 f8bb 	bl	271c <CC_PalMemSetZeroPlat>
    25a6:	a808      	add	r0, sp, #32
    25a8:	f000 f866 	bl	2678 <RNG_PLAT_SetUserRngParameters>
    25ac:	2800      	cmp	r0, #0
    25ae:	d041      	beq.n	2634 <mbedtls_hardware_poll+0xbc>
    25b0:	4620      	mov	r0, r4
    25b2:	f44f 51bf 	mov.w	r1, #6112	; 0x17e0
    25b6:	f7ff fb5f 	bl	1c78 <mbedtls_platform_zeroize>
    25ba:	f04f 35ff 	mov.w	r5, #4294967295
    25be:	4630      	mov	r0, r6
    25c0:	2104      	movs	r1, #4
    25c2:	f7ff fb59 	bl	1c78 <mbedtls_platform_zeroize>
    25c6:	4628      	mov	r0, r5
    25c8:	b012      	add	sp, #72	; 0x48
    25ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    25ce:	f44f 51bf 	mov.w	r1, #6112	; 0x17e0
    25d2:	2001      	movs	r0, #1
    25d4:	f7ff fb44 	bl	1c60 <mbedtls_calloc>
    25d8:	4680      	mov	r8, r0
    25da:	2800      	cmp	r0, #0
    25dc:	d039      	beq.n	2652 <mbedtls_hardware_poll+0xda>
    25de:	ae06      	add	r6, sp, #24
    25e0:	4630      	mov	r0, r6
    25e2:	2104      	movs	r1, #4
    25e4:	f000 f89a 	bl	271c <CC_PalMemSetZeroPlat>
    25e8:	a808      	add	r0, sp, #32
    25ea:	2128      	movs	r1, #40	; 0x28
    25ec:	f000 f896 	bl	271c <CC_PalMemSetZeroPlat>
    25f0:	a808      	add	r0, sp, #32
    25f2:	f000 f841 	bl	2678 <RNG_PLAT_SetUserRngParameters>
    25f6:	4602      	mov	r2, r0
    25f8:	2800      	cmp	r0, #0
    25fa:	d134      	bne.n	2666 <mbedtls_hardware_poll+0xee>
    25fc:	ab07      	add	r3, sp, #28
    25fe:	e9cd 8002 	strd	r8, r0, [sp, #8]
    2602:	9300      	str	r3, [sp, #0]
    2604:	9501      	str	r5, [sp, #4]
    2606:	a908      	add	r1, sp, #32
    2608:	ab05      	add	r3, sp, #20
    260a:	4630      	mov	r0, r6
    260c:	f000 fba8 	bl	2d60 <LLF_RND_GetTrngSource>
    2610:	bb48      	cbnz	r0, 2666 <mbedtls_hardware_poll+0xee>
    2612:	682a      	ldr	r2, [r5, #0]
    2614:	9b05      	ldr	r3, [sp, #20]
    2616:	429a      	cmp	r2, r3
    2618:	d91e      	bls.n	2658 <mbedtls_hardware_poll+0xe0>
    261a:	f04f 35ff 	mov.w	r5, #4294967295
    261e:	f44f 51bf 	mov.w	r1, #6112	; 0x17e0
    2622:	4640      	mov	r0, r8
    2624:	f7ff fb28 	bl	1c78 <mbedtls_platform_zeroize>
    2628:	2c00      	cmp	r4, #0
    262a:	d1c8      	bne.n	25be <mbedtls_hardware_poll+0x46>
    262c:	4640      	mov	r0, r8
    262e:	f7ff fb1d 	bl	1c6c <mbedtls_free>
    2632:	e7c4      	b.n	25be <mbedtls_hardware_poll+0x46>
    2634:	ab07      	add	r3, sp, #28
    2636:	e9cd 4002 	strd	r4, r0, [sp, #8]
    263a:	4602      	mov	r2, r0
    263c:	9300      	str	r3, [sp, #0]
    263e:	9501      	str	r5, [sp, #4]
    2640:	a908      	add	r1, sp, #32
    2642:	ab05      	add	r3, sp, #20
    2644:	4630      	mov	r0, r6
    2646:	f000 fb8b 	bl	2d60 <LLF_RND_GetTrngSource>
    264a:	46a0      	mov	r8, r4
    264c:	2800      	cmp	r0, #0
    264e:	d1af      	bne.n	25b0 <mbedtls_hardware_poll+0x38>
    2650:	e7df      	b.n	2612 <mbedtls_hardware_poll+0x9a>
    2652:	f04f 35ff 	mov.w	r5, #4294967295
    2656:	e7b6      	b.n	25c6 <mbedtls_hardware_poll+0x4e>
    2658:	9907      	ldr	r1, [sp, #28]
    265a:	4638      	mov	r0, r7
    265c:	3108      	adds	r1, #8
    265e:	f000 f85b 	bl	2718 <CC_PalMemCopyPlat>
    2662:	2500      	movs	r5, #0
    2664:	e7db      	b.n	261e <mbedtls_hardware_poll+0xa6>
    2666:	f44f 51bf 	mov.w	r1, #6112	; 0x17e0
    266a:	4640      	mov	r0, r8
    266c:	f7ff fb04 	bl	1c78 <mbedtls_platform_zeroize>
    2670:	f04f 35ff 	mov.w	r5, #4294967295
    2674:	e7da      	b.n	262c <mbedtls_hardware_poll+0xb4>
    2676:	bf00      	nop

00002678 <RNG_PLAT_SetUserRngParameters>:
    2678:	231c      	movs	r3, #28
    267a:	b530      	push	{r4, r5, lr}
    267c:	b083      	sub	sp, #12
    267e:	a902      	add	r1, sp, #8
    2680:	f841 3d04 	str.w	r3, [r1, #-4]!
    2684:	4604      	mov	r4, r0
    2686:	f000 f84d 	bl	2724 <CC_PalTrngParamGet>
    268a:	4605      	mov	r5, r0
    268c:	b9d8      	cbnz	r0, 26c6 <RNG_PLAT_SetUserRngParameters+0x4e>
    268e:	9b01      	ldr	r3, [sp, #4]
    2690:	2b1c      	cmp	r3, #28
    2692:	d11b      	bne.n	26cc <RNG_PLAT_SetUserRngParameters+0x54>
    2694:	e9d4 3200 	ldrd	r3, r2, [r4]
    2698:	2101      	movs	r1, #1
    269a:	3300      	adds	r3, #0
    269c:	61e1      	str	r1, [r4, #28]
    269e:	bf18      	it	ne
    26a0:	2301      	movne	r3, #1
    26a2:	b10a      	cbz	r2, 26a8 <RNG_PLAT_SetUserRngParameters+0x30>
    26a4:	f043 0302 	orr.w	r3, r3, #2
    26a8:	68a2      	ldr	r2, [r4, #8]
    26aa:	b932      	cbnz	r2, 26ba <RNG_PLAT_SetUserRngParameters+0x42>
    26ac:	68e2      	ldr	r2, [r4, #12]
    26ae:	b9aa      	cbnz	r2, 26dc <RNG_PLAT_SetUserRngParameters+0x64>
    26b0:	e9c4 3208 	strd	r3, r2, [r4, #32]
    26b4:	b93b      	cbnz	r3, 26c6 <RNG_PLAT_SetUserRngParameters+0x4e>
    26b6:	4d0d      	ldr	r5, [pc, #52]	; (26ec <RNG_PLAT_SetUserRngParameters+0x74>)
    26b8:	e009      	b.n	26ce <RNG_PLAT_SetUserRngParameters+0x56>
    26ba:	68e2      	ldr	r2, [r4, #12]
    26bc:	f043 0304 	orr.w	r3, r3, #4
    26c0:	b962      	cbnz	r2, 26dc <RNG_PLAT_SetUserRngParameters+0x64>
    26c2:	e9c4 3208 	strd	r3, r2, [r4, #32]
    26c6:	4628      	mov	r0, r5
    26c8:	b003      	add	sp, #12
    26ca:	bd30      	pop	{r4, r5, pc}
    26cc:	4d08      	ldr	r5, [pc, #32]	; (26f0 <RNG_PLAT_SetUserRngParameters+0x78>)
    26ce:	4620      	mov	r0, r4
    26d0:	211c      	movs	r1, #28
    26d2:	f000 f823 	bl	271c <CC_PalMemSetZeroPlat>
    26d6:	4628      	mov	r0, r5
    26d8:	b003      	add	sp, #12
    26da:	bd30      	pop	{r4, r5, pc}
    26dc:	2200      	movs	r2, #0
    26de:	4628      	mov	r0, r5
    26e0:	f043 0308 	orr.w	r3, r3, #8
    26e4:	e9c4 3208 	strd	r3, r2, [r4, #32]
    26e8:	b003      	add	sp, #12
    26ea:	bd30      	pop	{r4, r5, pc}
    26ec:	00f00c0e 	.word	0x00f00c0e
    26f0:	00f00c37 	.word	0x00f00c37

000026f4 <CC_PalAbort>:
    26f4:	f3bf 8f4f 	dsb	sy
    26f8:	4905      	ldr	r1, [pc, #20]	; (2710 <CC_PalAbort+0x1c>)
    26fa:	4b06      	ldr	r3, [pc, #24]	; (2714 <CC_PalAbort+0x20>)
    26fc:	68ca      	ldr	r2, [r1, #12]
    26fe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2702:	4313      	orrs	r3, r2
    2704:	60cb      	str	r3, [r1, #12]
    2706:	f3bf 8f4f 	dsb	sy
    270a:	bf00      	nop
    270c:	e7fd      	b.n	270a <CC_PalAbort+0x16>
    270e:	bf00      	nop
    2710:	e000ed00 	.word	0xe000ed00
    2714:	05fa0004 	.word	0x05fa0004

00002718 <CC_PalMemCopyPlat>:
    2718:	f000 bf11 	b.w	353e <memmove>

0000271c <CC_PalMemSetZeroPlat>:
    271c:	460a      	mov	r2, r1
    271e:	2100      	movs	r1, #0
    2720:	f000 bf51 	b.w	35c6 <memset>

00002724 <CC_PalTrngParamGet>:
    2724:	b118      	cbz	r0, 272e <CC_PalTrngParamGet+0xa>
    2726:	b111      	cbz	r1, 272e <CC_PalTrngParamGet+0xa>
    2728:	680b      	ldr	r3, [r1, #0]
    272a:	2b1c      	cmp	r3, #28
    272c:	d001      	beq.n	2732 <CC_PalTrngParamGet+0xe>
    272e:	2001      	movs	r0, #1
    2730:	4770      	bx	lr
    2732:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2736:	4a3a      	ldr	r2, [pc, #232]	; (2820 <CC_PalTrngParamGet+0xfc>)
    2738:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    273c:	4291      	cmp	r1, r2
    273e:	d05a      	beq.n	27f6 <CC_PalTrngParamGet+0xd2>
    2740:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    2744:	3201      	adds	r2, #1
    2746:	d056      	beq.n	27f6 <CC_PalTrngParamGet+0xd2>
    2748:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    274c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2750:	6002      	str	r2, [r0, #0]
    2752:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    2756:	4a33      	ldr	r2, [pc, #204]	; (2824 <CC_PalTrngParamGet+0x100>)
    2758:	4291      	cmp	r1, r2
    275a:	d05e      	beq.n	281a <CC_PalTrngParamGet+0xf6>
    275c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    2760:	3201      	adds	r2, #1
    2762:	d05a      	beq.n	281a <CC_PalTrngParamGet+0xf6>
    2764:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    2768:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    276c:	6042      	str	r2, [r0, #4]
    276e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    2772:	f512 7f94 	cmn.w	r2, #296	; 0x128
    2776:	d04d      	beq.n	2814 <CC_PalTrngParamGet+0xf0>
    2778:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    277c:	3201      	adds	r2, #1
    277e:	d049      	beq.n	2814 <CC_PalTrngParamGet+0xf0>
    2780:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    2784:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2788:	6082      	str	r2, [r0, #8]
    278a:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    278e:	4a26      	ldr	r2, [pc, #152]	; (2828 <CC_PalTrngParamGet+0x104>)
    2790:	4291      	cmp	r1, r2
    2792:	d03c      	beq.n	280e <CC_PalTrngParamGet+0xea>
    2794:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    2798:	3201      	adds	r2, #1
    279a:	d038      	beq.n	280e <CC_PalTrngParamGet+0xea>
    279c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    27a0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    27a4:	60c2      	str	r2, [r0, #12]
    27a6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    27aa:	3270      	adds	r2, #112	; 0x70
    27ac:	d02d      	beq.n	280a <CC_PalTrngParamGet+0xe6>
    27ae:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    27b2:	3201      	adds	r2, #1
    27b4:	d029      	beq.n	280a <CC_PalTrngParamGet+0xe6>
    27b6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    27ba:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    27be:	6102      	str	r2, [r0, #16]
    27c0:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    27c4:	32af      	adds	r2, #175	; 0xaf
    27c6:	d01e      	beq.n	2806 <CC_PalTrngParamGet+0xe2>
    27c8:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    27cc:	3201      	adds	r2, #1
    27ce:	d01a      	beq.n	2806 <CC_PalTrngParamGet+0xe2>
    27d0:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    27d4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    27d8:	6142      	str	r2, [r0, #20]
    27da:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    27de:	4a13      	ldr	r2, [pc, #76]	; (282c <CC_PalTrngParamGet+0x108>)
    27e0:	4291      	cmp	r1, r2
    27e2:	d00b      	beq.n	27fc <CC_PalTrngParamGet+0xd8>
    27e4:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    27e8:	3201      	adds	r2, #1
    27ea:	d007      	beq.n	27fc <CC_PalTrngParamGet+0xd8>
    27ec:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    27f0:	6183      	str	r3, [r0, #24]
    27f2:	2000      	movs	r0, #0
    27f4:	4770      	bx	lr
    27f6:	f640 02fc 	movw	r2, #2300	; 0x8fc
    27fa:	e7a7      	b.n	274c <CC_PalTrngParamGet+0x28>
    27fc:	f240 3337 	movw	r3, #823	; 0x337
    2800:	6183      	str	r3, [r0, #24]
    2802:	2000      	movs	r0, #0
    2804:	4770      	bx	lr
    2806:	2251      	movs	r2, #81	; 0x51
    2808:	e7e4      	b.n	27d4 <CC_PalTrngParamGet+0xb0>
    280a:	2290      	movs	r2, #144	; 0x90
    280c:	e7d5      	b.n	27ba <CC_PalTrngParamGet+0x96>
    280e:	f642 1204 	movw	r2, #10500	; 0x2904
    2812:	e7c5      	b.n	27a0 <CC_PalTrngParamGet+0x7c>
    2814:	f640 62d8 	movw	r2, #3800	; 0xed8
    2818:	e7b4      	b.n	2784 <CC_PalTrngParamGet+0x60>
    281a:	f242 02d0 	movw	r2, #8400	; 0x20d0
    281e:	e7a3      	b.n	2768 <CC_PalTrngParamGet+0x44>
    2820:	fffff8fc 	.word	0xfffff8fc
    2824:	ffff20d0 	.word	0xffff20d0
    2828:	ffff2904 	.word	0xffff2904
    282c:	fffff337 	.word	0xfffff337

00002830 <LLF_RND_AdaptiveProportionTest>:
    2830:	b3a8      	cbz	r0, 289e <LLF_RND_AdaptiveProportionTest+0x6e>
    2832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2836:	1e4c      	subs	r4, r1, #1
    2838:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    283c:	d22c      	bcs.n	2898 <LLF_RND_AdaptiveProportionTest+0x68>
    283e:	b35b      	cbz	r3, 2898 <LLF_RND_AdaptiveProportionTest+0x68>
    2840:	b352      	cbz	r2, 2898 <LLF_RND_AdaptiveProportionTest+0x68>
    2842:	f04f 0c00 	mov.w	ip, #0
    2846:	00c9      	lsls	r1, r1, #3
    2848:	46e6      	mov	lr, ip
    284a:	4665      	mov	r5, ip
    284c:	4664      	mov	r4, ip
    284e:	1e4f      	subs	r7, r1, #1
    2850:	f103 38ff 	add.w	r8, r3, #4294967295
    2854:	e00c      	b.n	2870 <LLF_RND_AdaptiveProportionTest+0x40>
    2856:	42ab      	cmp	r3, r5
    2858:	d016      	beq.n	2888 <LLF_RND_AdaptiveProportionTest+0x58>
    285a:	458e      	cmp	lr, r1
    285c:	d101      	bne.n	2862 <LLF_RND_AdaptiveProportionTest+0x32>
    285e:	f10c 0c01 	add.w	ip, ip, #1
    2862:	45a8      	cmp	r8, r5
    2864:	d016      	beq.n	2894 <LLF_RND_AdaptiveProportionTest+0x64>
    2866:	3401      	adds	r4, #1
    2868:	42bc      	cmp	r4, r7
    286a:	f105 0501 	add.w	r5, r5, #1
    286e:	d818      	bhi.n	28a2 <LLF_RND_AdaptiveProportionTest+0x72>
    2870:	0961      	lsrs	r1, r4, #5
    2872:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    2876:	f004 061f 	and.w	r6, r4, #31
    287a:	40f1      	lsrs	r1, r6
    287c:	2e1f      	cmp	r6, #31
    287e:	bf18      	it	ne
    2880:	f001 0101 	andne.w	r1, r1, #1
    2884:	2c00      	cmp	r4, #0
    2886:	d1e6      	bne.n	2856 <LLF_RND_AdaptiveProportionTest+0x26>
    2888:	2500      	movs	r5, #0
    288a:	45a8      	cmp	r8, r5
    288c:	468e      	mov	lr, r1
    288e:	f04f 0c01 	mov.w	ip, #1
    2892:	d1e8      	bne.n	2866 <LLF_RND_AdaptiveProportionTest+0x36>
    2894:	4562      	cmp	r2, ip
    2896:	d2e6      	bcs.n	2866 <LLF_RND_AdaptiveProportionTest+0x36>
    2898:	4803      	ldr	r0, [pc, #12]	; (28a8 <LLF_RND_AdaptiveProportionTest+0x78>)
    289a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    289e:	4802      	ldr	r0, [pc, #8]	; (28a8 <LLF_RND_AdaptiveProportionTest+0x78>)
    28a0:	4770      	bx	lr
    28a2:	2000      	movs	r0, #0
    28a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28a8:	00f10c37 	.word	0x00f10c37

000028ac <getTrngSource>:
    28ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28b0:	b08f      	sub	sp, #60	; 0x3c
    28b2:	460d      	mov	r5, r1
    28b4:	e9dd 4119 	ldrd	r4, r1, [sp, #100]	; 0x64
    28b8:	4683      	mov	fp, r0
    28ba:	2900      	cmp	r1, #0
    28bc:	d159      	bne.n	2972 <getTrngSource+0xc6>
    28be:	6929      	ldr	r1, [r5, #16]
    28c0:	9103      	str	r1, [sp, #12]
    28c2:	2100      	movs	r1, #0
    28c4:	f504 60c1 	add.w	r0, r4, #1544	; 0x608
    28c8:	6018      	str	r0, [r3, #0]
    28ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
    28cc:	6019      	str	r1, [r3, #0]
    28ce:	2a00      	cmp	r2, #0
    28d0:	f000 8122 	beq.w	2b18 <getTrngSource+0x26c>
    28d4:	4a81      	ldr	r2, [pc, #516]	; (2adc <getTrngSource+0x230>)
    28d6:	4b82      	ldr	r3, [pc, #520]	; (2ae0 <getTrngSource+0x234>)
    28d8:	6811      	ldr	r1, [r2, #0]
    28da:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    28dc:	681b      	ldr	r3, [r3, #0]
    28de:	429a      	cmp	r2, r3
    28e0:	d157      	bne.n	2992 <getTrngSource+0xe6>
    28e2:	290a      	cmp	r1, #10
    28e4:	d155      	bne.n	2992 <getTrngSource+0xe6>
    28e6:	f89b 3003 	ldrb.w	r3, [fp, #3]
    28ea:	9306      	str	r3, [sp, #24]
    28ec:	9903      	ldr	r1, [sp, #12]
    28ee:	2304      	movs	r3, #4
    28f0:	4608      	mov	r0, r1
    28f2:	4a7c      	ldr	r2, [pc, #496]	; (2ae4 <getTrngSource+0x238>)
    28f4:	9302      	str	r3, [sp, #8]
    28f6:	fba2 0200 	umull	r0, r2, r2, r0
    28fa:	0892      	lsrs	r2, r2, #2
    28fc:	00cb      	lsls	r3, r1, #3
    28fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2902:	f504 60c2 	add.w	r0, r4, #1552	; 0x610
    2906:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
    290a:	3b01      	subs	r3, #1
    290c:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 2ae0 <getTrngSource+0x234>
    2910:	f8df a200 	ldr.w	sl, [pc, #512]	; 2b14 <getTrngSource+0x268>
    2914:	9004      	str	r0, [sp, #16]
    2916:	9200      	str	r2, [sp, #0]
    2918:	9305      	str	r3, [sp, #20]
    291a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    291c:	9c03      	ldr	r4, [sp, #12]
    291e:	601c      	str	r4, [r3, #0]
    2920:	2c00      	cmp	r4, #0
    2922:	f000 80cc 	beq.w	2abe <getTrngSource+0x212>
    2926:	2600      	movs	r6, #0
    2928:	9f04      	ldr	r7, [sp, #16]
    292a:	f000 faf1 	bl	2f10 <LLF_RND_TurnOffTrng>
    292e:	2300      	movs	r3, #0
    2930:	9307      	str	r3, [sp, #28]
    2932:	9b06      	ldr	r3, [sp, #24]
    2934:	f1bb 0f00 	cmp.w	fp, #0
    2938:	d03a      	beq.n	29b0 <getTrngSource+0x104>
    293a:	2d00      	cmp	r5, #0
    293c:	d034      	beq.n	29a8 <getTrngSource+0xfc>
    293e:	bb53      	cbnz	r3, 2996 <getTrngSource+0xea>
    2940:	005b      	lsls	r3, r3, #1
    2942:	9306      	str	r3, [sp, #24]
    2944:	f1bb 0f00 	cmp.w	fp, #0
    2948:	d036      	beq.n	29b8 <getTrngSource+0x10c>
    294a:	2d00      	cmp	r5, #0
    294c:	d034      	beq.n	29b8 <getTrngSource+0x10c>
    294e:	b1e3      	cbz	r3, 298a <getTrngSource+0xde>
    2950:	a906      	add	r1, sp, #24
    2952:	4628      	mov	r0, r5
    2954:	f000 facc 	bl	2ef0 <LLF_RND_GetFastestRosc>
    2958:	2800      	cmp	r0, #0
    295a:	f000 817d 	beq.w	2c58 <getTrngSource+0x3ac>
    295e:	4b62      	ldr	r3, [pc, #392]	; (2ae8 <getTrngSource+0x23c>)
    2960:	4298      	cmp	r0, r3
    2962:	d012      	beq.n	298a <getTrngSource+0xde>
    2964:	9000      	str	r0, [sp, #0]
    2966:	f000 fad3 	bl	2f10 <LLF_RND_TurnOffTrng>
    296a:	9800      	ldr	r0, [sp, #0]
    296c:	b00f      	add	sp, #60	; 0x3c
    296e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2972:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2976:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    297a:	3001      	adds	r0, #1
    297c:	bf0c      	ite	eq
    297e:	f44f 7104 	moveq.w	r1, #528	; 0x210
    2982:	f8d1 1c0c 	ldrne.w	r1, [r1, #3084]	; 0xc0c
    2986:	9103      	str	r1, [sp, #12]
    2988:	e79b      	b.n	28c2 <getTrngSource+0x16>
    298a:	6a2b      	ldr	r3, [r5, #32]
    298c:	b973      	cbnz	r3, 29ac <getTrngSource+0x100>
    298e:	4856      	ldr	r0, [pc, #344]	; (2ae8 <getTrngSource+0x23c>)
    2990:	e7e8      	b.n	2964 <getTrngSource+0xb8>
    2992:	4856      	ldr	r0, [pc, #344]	; (2aec <getTrngSource+0x240>)
    2994:	e7e6      	b.n	2964 <getTrngSource+0xb8>
    2996:	a906      	add	r1, sp, #24
    2998:	4628      	mov	r0, r5
    299a:	f000 faa9 	bl	2ef0 <LLF_RND_GetFastestRosc>
    299e:	b168      	cbz	r0, 29bc <getTrngSource+0x110>
    29a0:	4b53      	ldr	r3, [pc, #332]	; (2af0 <getTrngSource+0x244>)
    29a2:	4298      	cmp	r0, r3
    29a4:	d0de      	beq.n	2964 <getTrngSource+0xb8>
    29a6:	9b06      	ldr	r3, [sp, #24]
    29a8:	2b08      	cmp	r3, #8
    29aa:	d1c9      	bne.n	2940 <getTrngSource+0x94>
    29ac:	4851      	ldr	r0, [pc, #324]	; (2af4 <getTrngSource+0x248>)
    29ae:	e7d9      	b.n	2964 <getTrngSource+0xb8>
    29b0:	2b08      	cmp	r3, #8
    29b2:	d0fb      	beq.n	29ac <getTrngSource+0x100>
    29b4:	005b      	lsls	r3, r3, #1
    29b6:	9306      	str	r3, [sp, #24]
    29b8:	484f      	ldr	r0, [pc, #316]	; (2af8 <getTrngSource+0x24c>)
    29ba:	e7d3      	b.n	2964 <getTrngSource+0xb8>
    29bc:	4629      	mov	r1, r5
    29be:	9806      	ldr	r0, [sp, #24]
    29c0:	f000 fa78 	bl	2eb4 <LLF_RND_GetRoscSampleCnt>
    29c4:	2800      	cmp	r0, #0
    29c6:	d1eb      	bne.n	29a0 <getTrngSource+0xf4>
    29c8:	9b06      	ldr	r3, [sp, #24]
    29ca:	2b08      	cmp	r3, #8
    29cc:	f000 810e 	beq.w	2bec <getTrngSource+0x340>
    29d0:	2b04      	cmp	r3, #4
    29d2:	f000 8131 	beq.w	2c38 <getTrngSource+0x38c>
    29d6:	f1a3 0302 	sub.w	r3, r3, #2
    29da:	fab3 f383 	clz	r3, r3
    29de:	095b      	lsrs	r3, r3, #5
    29e0:	9301      	str	r3, [sp, #4]
    29e2:	2301      	movs	r3, #1
    29e4:	4619      	mov	r1, r3
    29e6:	4a45      	ldr	r2, [pc, #276]	; (2afc <getTrngSource+0x250>)
    29e8:	6013      	str	r3, [r2, #0]
    29ea:	f842 3c84 	str.w	r3, [r2, #-132]
    29ee:	4b43      	ldr	r3, [pc, #268]	; (2afc <getTrngSource+0x250>)
    29f0:	6019      	str	r1, [r3, #0]
    29f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    29f4:	f8c9 3000 	str.w	r3, [r9]
    29f8:	f8d9 2000 	ldr.w	r2, [r9]
    29fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    29fe:	429a      	cmp	r2, r3
    2a00:	d1f5      	bne.n	29ee <getTrngSource+0x142>
    2a02:	f04f 0800 	mov.w	r8, #0
    2a06:	f04f 30ff 	mov.w	r0, #4294967295
    2a0a:	f8ca 8000 	str.w	r8, [sl]
    2a0e:	f000 fa27 	bl	2e60 <CC_HalClearInterruptBit>
    2a12:	4a3b      	ldr	r2, [pc, #236]	; (2b00 <getTrngSource+0x254>)
    2a14:	4b3b      	ldr	r3, [pc, #236]	; (2b04 <getTrngSource+0x258>)
    2a16:	4640      	mov	r0, r8
    2a18:	601a      	str	r2, [r3, #0]
    2a1a:	f000 fa2f 	bl	2e7c <CC_HalMaskInterrupt>
    2a1e:	220a      	movs	r2, #10
    2a20:	9801      	ldr	r0, [sp, #4]
    2a22:	4939      	ldr	r1, [pc, #228]	; (2b08 <getTrngSource+0x25c>)
    2a24:	4b2d      	ldr	r3, [pc, #180]	; (2adc <getTrngSource+0x230>)
    2a26:	6008      	str	r0, [r1, #0]
    2a28:	601a      	str	r2, [r3, #0]
    2a2a:	692a      	ldr	r2, [r5, #16]
    2a2c:	f1a8 3855 	sub.w	r8, r8, #1431655765	; 0x55555555
    2a30:	fba8 1202 	umull	r1, r2, r8, r2
    2a34:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2a36:	0912      	lsrs	r2, r2, #4
    2a38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2a3c:	03db      	lsls	r3, r3, #15
    2a3e:	fb03 f302 	mul.w	r3, r3, r2
    2a42:	4a32      	ldr	r2, [pc, #200]	; (2b0c <getTrngSource+0x260>)
    2a44:	099b      	lsrs	r3, r3, #6
    2a46:	6013      	str	r3, [r2, #0]
    2a48:	2301      	movs	r3, #1
    2a4a:	f8ca 3000 	str.w	r3, [sl]
    2a4e:	9906      	ldr	r1, [sp, #24]
    2a50:	f8db 2000 	ldr.w	r2, [fp]
    2a54:	020b      	lsls	r3, r1, #8
    2a56:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    2a5a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2a5e:	4313      	orrs	r3, r2
    2a60:	f8cb 3000 	str.w	r3, [fp]
    2a64:	a807      	add	r0, sp, #28
    2a66:	f000 fa15 	bl	2e94 <LLF_RND_WaitRngInterrupt>
    2a6a:	2800      	cmp	r0, #0
    2a6c:	d198      	bne.n	29a0 <getTrngSource+0xf4>
    2a6e:	4b28      	ldr	r3, [pc, #160]	; (2b10 <getTrngSource+0x264>)
    2a70:	fba8 2804 	umull	r2, r8, r8, r4
    2a74:	681a      	ldr	r2, [r3, #0]
    2a76:	3314      	adds	r3, #20
    2a78:	9208      	str	r2, [sp, #32]
    2a7a:	f853 2c10 	ldr.w	r2, [r3, #-16]
    2a7e:	ebb6 0f98 	cmp.w	r6, r8, lsr #2
    2a82:	9209      	str	r2, [sp, #36]	; 0x24
    2a84:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    2a88:	920a      	str	r2, [sp, #40]	; 0x28
    2a8a:	f853 2c08 	ldr.w	r2, [r3, #-8]
    2a8e:	920b      	str	r2, [sp, #44]	; 0x2c
    2a90:	f853 2c04 	ldr.w	r2, [r3, #-4]
    2a94:	920c      	str	r2, [sp, #48]	; 0x30
    2a96:	681b      	ldr	r3, [r3, #0]
    2a98:	930d      	str	r3, [sp, #52]	; 0x34
    2a9a:	d101      	bne.n	2aa0 <getTrngSource+0x1f4>
    2a9c:	9b00      	ldr	r3, [sp, #0]
    2a9e:	b99b      	cbnz	r3, 2ac8 <getTrngSource+0x21c>
    2aa0:	4638      	mov	r0, r7
    2aa2:	2218      	movs	r2, #24
    2aa4:	a908      	add	r1, sp, #32
    2aa6:	f7ff fe37 	bl	2718 <CC_PalMemCopyPlat>
    2aaa:	3c18      	subs	r4, #24
    2aac:	3718      	adds	r7, #24
    2aae:	3601      	adds	r6, #1
    2ab0:	2c00      	cmp	r4, #0
    2ab2:	f47f af3a 	bne.w	292a <getTrngSource+0x7e>
    2ab6:	9b04      	ldr	r3, [sp, #16]
    2ab8:	2b00      	cmp	r3, #0
    2aba:	f040 809a 	bne.w	2bf2 <getTrngSource+0x346>
    2abe:	2300      	movs	r3, #0
    2ac0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2ac2:	6013      	str	r3, [r2, #0]
    2ac4:	9b06      	ldr	r3, [sp, #24]
    2ac6:	e76f      	b.n	29a8 <getTrngSource+0xfc>
    2ac8:	461a      	mov	r2, r3
    2aca:	4638      	mov	r0, r7
    2acc:	a908      	add	r1, sp, #32
    2ace:	1ae4      	subs	r4, r4, r3
    2ad0:	f7ff fe22 	bl	2718 <CC_PalMemCopyPlat>
    2ad4:	9b00      	ldr	r3, [sp, #0]
    2ad6:	441f      	add	r7, r3
    2ad8:	e7e9      	b.n	2aae <getTrngSource+0x202>
    2ada:	bf00      	nop
    2adc:	50841138 	.word	0x50841138
    2ae0:	50841130 	.word	0x50841130
    2ae4:	aaaaaaab 	.word	0xaaaaaaab
    2ae8:	00f10c31 	.word	0x00f10c31
    2aec:	00f10c30 	.word	0x00f10c30
    2af0:	00f10c02 	.word	0x00f10c02
    2af4:	00f10c32 	.word	0x00f10c32
    2af8:	00f10c35 	.word	0x00f10c35
    2afc:	508411c4 	.word	0x508411c4
    2b00:	0ffffffe 	.word	0x0ffffffe
    2b04:	50841100 	.word	0x50841100
    2b08:	5084110c 	.word	0x5084110c
    2b0c:	508411d8 	.word	0x508411d8
    2b10:	50841114 	.word	0x50841114
    2b14:	5084112c 	.word	0x5084112c
    2b18:	f1bb 0f00 	cmp.w	fp, #0
    2b1c:	f43f af4c 	beq.w	29b8 <getTrngSource+0x10c>
    2b20:	2d00      	cmp	r5, #0
    2b22:	f43f af49 	beq.w	29b8 <getTrngSource+0x10c>
    2b26:	2301      	movs	r3, #1
    2b28:	a90e      	add	r1, sp, #56	; 0x38
    2b2a:	f841 3d20 	str.w	r3, [r1, #-32]!
    2b2e:	f8cb 2000 	str.w	r2, [fp]
    2b32:	4628      	mov	r0, r5
    2b34:	f000 f9dc 	bl	2ef0 <LLF_RND_GetFastestRosc>
    2b38:	2800      	cmp	r0, #0
    2b3a:	f47f af13 	bne.w	2964 <getTrngSource+0xb8>
    2b3e:	4629      	mov	r1, r5
    2b40:	9806      	ldr	r0, [sp, #24]
    2b42:	f000 f9b7 	bl	2eb4 <LLF_RND_GetRoscSampleCnt>
    2b46:	2800      	cmp	r0, #0
    2b48:	f47f af0c 	bne.w	2964 <getTrngSource+0xb8>
    2b4c:	9f06      	ldr	r7, [sp, #24]
    2b4e:	2f08      	cmp	r7, #8
    2b50:	f000 80eb 	beq.w	2d2a <getTrngSource+0x47e>
    2b54:	2f04      	cmp	r7, #4
    2b56:	f000 80ea 	beq.w	2d2e <getTrngSource+0x482>
    2b5a:	f1a7 0702 	sub.w	r7, r7, #2
    2b5e:	fab7 f787 	clz	r7, r7
    2b62:	097f      	lsrs	r7, r7, #5
    2b64:	2201      	movs	r2, #1
    2b66:	4616      	mov	r6, r2
    2b68:	4b73      	ldr	r3, [pc, #460]	; (2d38 <getTrngSource+0x48c>)
    2b6a:	4974      	ldr	r1, [pc, #464]	; (2d3c <getTrngSource+0x490>)
    2b6c:	601a      	str	r2, [r3, #0]
    2b6e:	4618      	mov	r0, r3
    2b70:	600a      	str	r2, [r1, #0]
    2b72:	3b94      	subs	r3, #148	; 0x94
    2b74:	6006      	str	r6, [r0, #0]
    2b76:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2b78:	601a      	str	r2, [r3, #0]
    2b7a:	6819      	ldr	r1, [r3, #0]
    2b7c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2b7e:	4291      	cmp	r1, r2
    2b80:	d1f8      	bne.n	2b74 <getTrngSource+0x2c8>
    2b82:	f04f 0800 	mov.w	r8, #0
    2b86:	4b6e      	ldr	r3, [pc, #440]	; (2d40 <getTrngSource+0x494>)
    2b88:	f04f 30ff 	mov.w	r0, #4294967295
    2b8c:	f8c3 8000 	str.w	r8, [r3]
    2b90:	f000 f966 	bl	2e60 <CC_HalClearInterruptBit>
    2b94:	4b6b      	ldr	r3, [pc, #428]	; (2d44 <getTrngSource+0x498>)
    2b96:	4a6c      	ldr	r2, [pc, #432]	; (2d48 <getTrngSource+0x49c>)
    2b98:	4640      	mov	r0, r8
    2b9a:	601a      	str	r2, [r3, #0]
    2b9c:	f000 f96e 	bl	2e7c <CC_HalMaskInterrupt>
    2ba0:	220a      	movs	r2, #10
    2ba2:	496a      	ldr	r1, [pc, #424]	; (2d4c <getTrngSource+0x4a0>)
    2ba4:	4b6a      	ldr	r3, [pc, #424]	; (2d50 <getTrngSource+0x4a4>)
    2ba6:	600f      	str	r7, [r1, #0]
    2ba8:	601a      	str	r2, [r3, #0]
    2baa:	991a      	ldr	r1, [sp, #104]	; 0x68
    2bac:	692b      	ldr	r3, [r5, #16]
    2bae:	2901      	cmp	r1, #1
    2bb0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2bb2:	f000 80b1 	beq.w	2d18 <getTrngSource+0x46c>
    2bb6:	4967      	ldr	r1, [pc, #412]	; (2d54 <getTrngSource+0x4a8>)
    2bb8:	fba1 1303 	umull	r1, r3, r1, r3
    2bbc:	091b      	lsrs	r3, r3, #4
    2bbe:	2101      	movs	r1, #1
    2bc0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2bc4:	03d2      	lsls	r2, r2, #15
    2bc6:	fb03 f302 	mul.w	r3, r3, r2
    2bca:	4a63      	ldr	r2, [pc, #396]	; (2d58 <getTrngSource+0x4ac>)
    2bcc:	099b      	lsrs	r3, r3, #6
    2bce:	6013      	str	r3, [r2, #0]
    2bd0:	4b5b      	ldr	r3, [pc, #364]	; (2d40 <getTrngSource+0x494>)
    2bd2:	6019      	str	r1, [r3, #0]
    2bd4:	9906      	ldr	r1, [sp, #24]
    2bd6:	f8db 2000 	ldr.w	r2, [fp]
    2bda:	020b      	lsls	r3, r1, #8
    2bdc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    2be0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2be4:	4313      	orrs	r3, r2
    2be6:	f8cb 3000 	str.w	r3, [fp]
    2bea:	e67f      	b.n	28ec <getTrngSource+0x40>
    2bec:	2303      	movs	r3, #3
    2bee:	9301      	str	r3, [sp, #4]
    2bf0:	e6f7      	b.n	29e2 <getTrngSource+0x136>
    2bf2:	9b03      	ldr	r3, [sp, #12]
    2bf4:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
    2bf8:	f63f af61 	bhi.w	2abe <getTrngSource+0x212>
    2bfc:	e9dd 7c04 	ldrd	r7, ip, [sp, #16]
    2c00:	4620      	mov	r0, r4
    2c02:	4623      	mov	r3, r4
    2c04:	696e      	ldr	r6, [r5, #20]
    2c06:	e004      	b.n	2c12 <getTrngSource+0x366>
    2c08:	2001      	movs	r0, #1
    2c0a:	3301      	adds	r3, #1
    2c0c:	4563      	cmp	r3, ip
    2c0e:	4614      	mov	r4, r2
    2c10:	d815      	bhi.n	2c3e <getTrngSource+0x392>
    2c12:	095a      	lsrs	r2, r3, #5
    2c14:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    2c18:	f003 011f 	and.w	r1, r3, #31
    2c1c:	40ca      	lsrs	r2, r1
    2c1e:	291f      	cmp	r1, #31
    2c20:	bf18      	it	ne
    2c22:	f002 0201 	andne.w	r2, r2, #1
    2c26:	2b00      	cmp	r3, #0
    2c28:	d0ee      	beq.n	2c08 <getTrngSource+0x35c>
    2c2a:	42a2      	cmp	r2, r4
    2c2c:	d1ec      	bne.n	2c08 <getTrngSource+0x35c>
    2c2e:	3001      	adds	r0, #1
    2c30:	4286      	cmp	r6, r0
    2c32:	d1ea      	bne.n	2c0a <getTrngSource+0x35e>
    2c34:	4849      	ldr	r0, [pc, #292]	; (2d5c <getTrngSource+0x4b0>)
    2c36:	e00b      	b.n	2c50 <getTrngSource+0x3a4>
    2c38:	2302      	movs	r3, #2
    2c3a:	9301      	str	r3, [sp, #4]
    2c3c:	e6d1      	b.n	29e2 <getTrngSource+0x136>
    2c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2c42:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
    2c46:	69aa      	ldr	r2, [r5, #24]
    2c48:	f7ff fdf2 	bl	2830 <LLF_RND_AdaptiveProportionTest>
    2c4c:	2800      	cmp	r0, #0
    2c4e:	d05d      	beq.n	2d0c <getTrngSource+0x460>
    2c50:	2300      	movs	r3, #0
    2c52:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2c54:	6013      	str	r3, [r2, #0]
    2c56:	e6a3      	b.n	29a0 <getTrngSource+0xf4>
    2c58:	4629      	mov	r1, r5
    2c5a:	9806      	ldr	r0, [sp, #24]
    2c5c:	f000 f92a 	bl	2eb4 <LLF_RND_GetRoscSampleCnt>
    2c60:	2800      	cmp	r0, #0
    2c62:	f47f ae7c 	bne.w	295e <getTrngSource+0xb2>
    2c66:	9c06      	ldr	r4, [sp, #24]
    2c68:	2c08      	cmp	r4, #8
    2c6a:	d051      	beq.n	2d10 <getTrngSource+0x464>
    2c6c:	2c04      	cmp	r4, #4
    2c6e:	d051      	beq.n	2d14 <getTrngSource+0x468>
    2c70:	f1a4 0402 	sub.w	r4, r4, #2
    2c74:	fab4 f484 	clz	r4, r4
    2c78:	0964      	lsrs	r4, r4, #5
    2c7a:	2301      	movs	r3, #1
    2c7c:	461e      	mov	r6, r3
    2c7e:	4619      	mov	r1, r3
    2c80:	4a2d      	ldr	r2, [pc, #180]	; (2d38 <getTrngSource+0x48c>)
    2c82:	6013      	str	r3, [r2, #0]
    2c84:	f842 3c84 	str.w	r3, [r2, #-132]
    2c88:	4b2b      	ldr	r3, [pc, #172]	; (2d38 <getTrngSource+0x48c>)
    2c8a:	6019      	str	r1, [r3, #0]
    2c8c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2c8e:	f8c9 3000 	str.w	r3, [r9]
    2c92:	f8d9 2000 	ldr.w	r2, [r9]
    2c96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2c98:	429a      	cmp	r2, r3
    2c9a:	d1f5      	bne.n	2c88 <getTrngSource+0x3dc>
    2c9c:	2700      	movs	r7, #0
    2c9e:	f04f 30ff 	mov.w	r0, #4294967295
    2ca2:	f8ca 7000 	str.w	r7, [sl]
    2ca6:	f000 f8db 	bl	2e60 <CC_HalClearInterruptBit>
    2caa:	4b26      	ldr	r3, [pc, #152]	; (2d44 <getTrngSource+0x498>)
    2cac:	4a26      	ldr	r2, [pc, #152]	; (2d48 <getTrngSource+0x49c>)
    2cae:	4638      	mov	r0, r7
    2cb0:	601a      	str	r2, [r3, #0]
    2cb2:	f000 f8e3 	bl	2e7c <CC_HalMaskInterrupt>
    2cb6:	220a      	movs	r2, #10
    2cb8:	4924      	ldr	r1, [pc, #144]	; (2d4c <getTrngSource+0x4a0>)
    2cba:	4b25      	ldr	r3, [pc, #148]	; (2d50 <getTrngSource+0x4a4>)
    2cbc:	600c      	str	r4, [r1, #0]
    2cbe:	601a      	str	r2, [r3, #0]
    2cc0:	692a      	ldr	r2, [r5, #16]
    2cc2:	4924      	ldr	r1, [pc, #144]	; (2d54 <getTrngSource+0x4a8>)
    2cc4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2cc6:	fba1 1202 	umull	r1, r2, r1, r2
    2cca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2cce:	0912      	lsrs	r2, r2, #4
    2cd0:	03db      	lsls	r3, r3, #15
    2cd2:	fb03 f302 	mul.w	r3, r3, r2
    2cd6:	4a20      	ldr	r2, [pc, #128]	; (2d58 <getTrngSource+0x4ac>)
    2cd8:	099b      	lsrs	r3, r3, #6
    2cda:	6013      	str	r3, [r2, #0]
    2cdc:	f8ca 6000 	str.w	r6, [sl]
    2ce0:	9b06      	ldr	r3, [sp, #24]
    2ce2:	f8db 1000 	ldr.w	r1, [fp]
    2ce6:	021a      	lsls	r2, r3, #8
    2ce8:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
    2cec:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
    2cf0:	431a      	orrs	r2, r3
    2cf2:	0a13      	lsrs	r3, r2, #8
    2cf4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    2cf8:	4313      	orrs	r3, r2
    2cfa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2cfe:	f8cb 3000 	str.w	r3, [fp]
    2d02:	9b02      	ldr	r3, [sp, #8]
    2d04:	3b01      	subs	r3, #1
    2d06:	9302      	str	r3, [sp, #8]
    2d08:	f47f ae07 	bne.w	291a <getTrngSource+0x6e>
    2d0c:	2000      	movs	r0, #0
    2d0e:	e629      	b.n	2964 <getTrngSource+0xb8>
    2d10:	2403      	movs	r4, #3
    2d12:	e7b2      	b.n	2c7a <getTrngSource+0x3ce>
    2d14:	2402      	movs	r4, #2
    2d16:	e7b0      	b.n	2c7a <getTrngSource+0x3ce>
    2d18:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2d1c:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
    2d20:	3101      	adds	r1, #1
    2d22:	d006      	beq.n	2d32 <getTrngSource+0x486>
    2d24:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    2d28:	e745      	b.n	2bb6 <getTrngSource+0x30a>
    2d2a:	2703      	movs	r7, #3
    2d2c:	e71a      	b.n	2b64 <getTrngSource+0x2b8>
    2d2e:	2702      	movs	r7, #2
    2d30:	e718      	b.n	2b64 <getTrngSource+0x2b8>
    2d32:	2316      	movs	r3, #22
    2d34:	e743      	b.n	2bbe <getTrngSource+0x312>
    2d36:	bf00      	nop
    2d38:	508411c4 	.word	0x508411c4
    2d3c:	50841140 	.word	0x50841140
    2d40:	5084112c 	.word	0x5084112c
    2d44:	50841100 	.word	0x50841100
    2d48:	0ffffffe 	.word	0x0ffffffe
    2d4c:	5084110c 	.word	0x5084110c
    2d50:	50841138 	.word	0x50841138
    2d54:	aaaaaaab 	.word	0xaaaaaaab
    2d58:	508411d8 	.word	0x508411d8
    2d5c:	00f10c36 	.word	0x00f10c36

00002d60 <LLF_RND_GetTrngSource>:
    2d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2d64:	4c1b      	ldr	r4, [pc, #108]	; (2dd4 <LLF_RND_GetTrngSource+0x74>)
    2d66:	b085      	sub	sp, #20
    2d68:	4607      	mov	r7, r0
    2d6a:	e9dd 560d 	ldrd	r5, r6, [sp, #52]	; 0x34
    2d6e:	4688      	mov	r8, r1
    2d70:	6820      	ldr	r0, [r4, #0]
    2d72:	f04f 31ff 	mov.w	r1, #4294967295
    2d76:	4691      	mov	r9, r2
    2d78:	f000 f836 	bl	2de8 <CC_PalMutexLock>
    2d7c:	bb28      	cbnz	r0, 2dca <LLF_RND_GetTrngSource+0x6a>
    2d7e:	2000      	movs	r0, #0
    2d80:	f000 f836 	bl	2df0 <CC_PalPowerSaveModeSelect>
    2d84:	b9e8      	cbnz	r0, 2dc2 <LLF_RND_GetTrngSource+0x62>
    2d86:	2300      	movs	r3, #0
    2d88:	e9cd 5600 	strd	r5, r6, [sp]
    2d8c:	9302      	str	r3, [sp, #8]
    2d8e:	464a      	mov	r2, r9
    2d90:	4641      	mov	r1, r8
    2d92:	4638      	mov	r0, r7
    2d94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2d96:	f7ff fd89 	bl	28ac <getTrngSource>
    2d9a:	4605      	mov	r5, r0
    2d9c:	2001      	movs	r0, #1
    2d9e:	f000 f827 	bl	2df0 <CC_PalPowerSaveModeSelect>
    2da2:	b950      	cbnz	r0, 2dba <LLF_RND_GetTrngSource+0x5a>
    2da4:	6820      	ldr	r0, [r4, #0]
    2da6:	f000 f821 	bl	2dec <CC_PalMutexUnlock>
    2daa:	b110      	cbz	r0, 2db2 <LLF_RND_GetTrngSource+0x52>
    2dac:	480a      	ldr	r0, [pc, #40]	; (2dd8 <LLF_RND_GetTrngSource+0x78>)
    2dae:	f7ff fca1 	bl	26f4 <CC_PalAbort>
    2db2:	4628      	mov	r0, r5
    2db4:	b005      	add	sp, #20
    2db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2dba:	4808      	ldr	r0, [pc, #32]	; (2ddc <LLF_RND_GetTrngSource+0x7c>)
    2dbc:	f7ff fc9a 	bl	26f4 <CC_PalAbort>
    2dc0:	e7f0      	b.n	2da4 <LLF_RND_GetTrngSource+0x44>
    2dc2:	4807      	ldr	r0, [pc, #28]	; (2de0 <LLF_RND_GetTrngSource+0x80>)
    2dc4:	f7ff fc96 	bl	26f4 <CC_PalAbort>
    2dc8:	e7dd      	b.n	2d86 <LLF_RND_GetTrngSource+0x26>
    2dca:	4806      	ldr	r0, [pc, #24]	; (2de4 <LLF_RND_GetTrngSource+0x84>)
    2dcc:	f7ff fc92 	bl	26f4 <CC_PalAbort>
    2dd0:	e7d5      	b.n	2d7e <LLF_RND_GetTrngSource+0x1e>
    2dd2:	bf00      	nop
    2dd4:	20001924 	.word	0x20001924
    2dd8:	00003d64 	.word	0x00003d64
    2ddc:	00003d44 	.word	0x00003d44
    2de0:	00003d24 	.word	0x00003d24
    2de4:	00003d0c 	.word	0x00003d0c

00002de8 <CC_PalMutexLock>:
    2de8:	2000      	movs	r0, #0
    2dea:	4770      	bx	lr

00002dec <CC_PalMutexUnlock>:
    2dec:	2000      	movs	r0, #0
    2dee:	4770      	bx	lr

00002df0 <CC_PalPowerSaveModeSelect>:
    2df0:	4b19      	ldr	r3, [pc, #100]	; (2e58 <CC_PalPowerSaveModeSelect+0x68>)
    2df2:	b082      	sub	sp, #8
    2df4:	e8d3 2faf 	lda	r2, [r3]
    2df8:	9201      	str	r2, [sp, #4]
    2dfa:	9a01      	ldr	r2, [sp, #4]
    2dfc:	b998      	cbnz	r0, 2e26 <CC_PalPowerSaveModeSelect+0x36>
    2dfe:	3201      	adds	r2, #1
    2e00:	e8d3 1fef 	ldaex	r1, [r3]
    2e04:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2e08:	2800      	cmp	r0, #0
    2e0a:	d1f9      	bne.n	2e00 <CC_PalPowerSaveModeSelect+0x10>
    2e0c:	428a      	cmp	r2, r1
    2e0e:	d1f7      	bne.n	2e00 <CC_PalPowerSaveModeSelect+0x10>
    2e10:	f3bf 8f5f 	dmb	sy
    2e14:	9b01      	ldr	r3, [sp, #4]
    2e16:	b91b      	cbnz	r3, 2e20 <CC_PalPowerSaveModeSelect+0x30>
    2e18:	2201      	movs	r2, #1
    2e1a:	4b10      	ldr	r3, [pc, #64]	; (2e5c <CC_PalPowerSaveModeSelect+0x6c>)
    2e1c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    2e20:	2000      	movs	r0, #0
    2e22:	b002      	add	sp, #8
    2e24:	4770      	bx	lr
    2e26:	2a00      	cmp	r2, #0
    2e28:	d0fa      	beq.n	2e20 <CC_PalPowerSaveModeSelect+0x30>
    2e2a:	9a01      	ldr	r2, [sp, #4]
    2e2c:	2a01      	cmp	r2, #1
    2e2e:	d00e      	beq.n	2e4e <CC_PalPowerSaveModeSelect+0x5e>
    2e30:	9a01      	ldr	r2, [sp, #4]
    2e32:	3a01      	subs	r2, #1
    2e34:	e8d3 1fef 	ldaex	r1, [r3]
    2e38:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2e3c:	2800      	cmp	r0, #0
    2e3e:	d1f9      	bne.n	2e34 <CC_PalPowerSaveModeSelect+0x44>
    2e40:	428a      	cmp	r2, r1
    2e42:	d1f7      	bne.n	2e34 <CC_PalPowerSaveModeSelect+0x44>
    2e44:	f3bf 8f5f 	dmb	sy
    2e48:	2000      	movs	r0, #0
    2e4a:	b002      	add	sp, #8
    2e4c:	4770      	bx	lr
    2e4e:	2100      	movs	r1, #0
    2e50:	4a02      	ldr	r2, [pc, #8]	; (2e5c <CC_PalPowerSaveModeSelect+0x6c>)
    2e52:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    2e56:	e7eb      	b.n	2e30 <CC_PalPowerSaveModeSelect+0x40>
    2e58:	20001928 	.word	0x20001928
    2e5c:	50840000 	.word	0x50840000

00002e60 <CC_HalClearInterruptBit>:
    2e60:	0543      	lsls	r3, r0, #21
    2e62:	d503      	bpl.n	2e6c <CC_HalClearInterruptBit+0xc>
    2e64:	f04f 32ff 	mov.w	r2, #4294967295
    2e68:	4b02      	ldr	r3, [pc, #8]	; (2e74 <CC_HalClearInterruptBit+0x14>)
    2e6a:	601a      	str	r2, [r3, #0]
    2e6c:	4b02      	ldr	r3, [pc, #8]	; (2e78 <CC_HalClearInterruptBit+0x18>)
    2e6e:	6018      	str	r0, [r3, #0]
    2e70:	4770      	bx	lr
    2e72:	bf00      	nop
    2e74:	50841108 	.word	0x50841108
    2e78:	50841a08 	.word	0x50841a08

00002e7c <CC_HalMaskInterrupt>:
    2e7c:	4b01      	ldr	r3, [pc, #4]	; (2e84 <CC_HalMaskInterrupt+0x8>)
    2e7e:	6018      	str	r0, [r3, #0]
    2e80:	4770      	bx	lr
    2e82:	bf00      	nop
    2e84:	50841a04 	.word	0x50841a04

00002e88 <CC_HalWaitInterruptRND>:
    2e88:	b108      	cbz	r0, 2e8e <CC_HalWaitInterruptRND+0x6>
    2e8a:	f000 b84f 	b.w	2f2c <CC_PalWaitInterruptRND>
    2e8e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    2e92:	4770      	bx	lr

00002e94 <LLF_RND_WaitRngInterrupt>:
    2e94:	b508      	push	{r3, lr}
    2e96:	4601      	mov	r1, r0
    2e98:	f44f 6080 	mov.w	r0, #1024	; 0x400
    2e9c:	f7ff fff4 	bl	2e88 <CC_HalWaitInterruptRND>
    2ea0:	2300      	movs	r3, #0
    2ea2:	4902      	ldr	r1, [pc, #8]	; (2eac <LLF_RND_WaitRngInterrupt+0x18>)
    2ea4:	4a02      	ldr	r2, [pc, #8]	; (2eb0 <LLF_RND_WaitRngInterrupt+0x1c>)
    2ea6:	600b      	str	r3, [r1, #0]
    2ea8:	6013      	str	r3, [r2, #0]
    2eaa:	bd08      	pop	{r3, pc}
    2eac:	508411c8 	.word	0x508411c8
    2eb0:	5084112c 	.word	0x5084112c

00002eb4 <LLF_RND_GetRoscSampleCnt>:
    2eb4:	3801      	subs	r0, #1
    2eb6:	2807      	cmp	r0, #7
    2eb8:	d815      	bhi.n	2ee6 <LLF_RND_GetRoscSampleCnt+0x32>
    2eba:	e8df f000 	tbb	[pc, r0]
    2ebe:	0c10      	.short	0x0c10
    2ec0:	14140814 	.word	0x14140814
    2ec4:	0414      	.short	0x0414
    2ec6:	68cb      	ldr	r3, [r1, #12]
    2ec8:	2000      	movs	r0, #0
    2eca:	624b      	str	r3, [r1, #36]	; 0x24
    2ecc:	4770      	bx	lr
    2ece:	688b      	ldr	r3, [r1, #8]
    2ed0:	2000      	movs	r0, #0
    2ed2:	624b      	str	r3, [r1, #36]	; 0x24
    2ed4:	4770      	bx	lr
    2ed6:	684b      	ldr	r3, [r1, #4]
    2ed8:	2000      	movs	r0, #0
    2eda:	624b      	str	r3, [r1, #36]	; 0x24
    2edc:	4770      	bx	lr
    2ede:	680b      	ldr	r3, [r1, #0]
    2ee0:	2000      	movs	r0, #0
    2ee2:	624b      	str	r3, [r1, #36]	; 0x24
    2ee4:	4770      	bx	lr
    2ee6:	4801      	ldr	r0, [pc, #4]	; (2eec <LLF_RND_GetRoscSampleCnt+0x38>)
    2ee8:	4770      	bx	lr
    2eea:	bf00      	nop
    2eec:	00f10c31 	.word	0x00f10c31

00002ef0 <LLF_RND_GetFastestRosc>:
    2ef0:	680b      	ldr	r3, [r1, #0]
    2ef2:	e002      	b.n	2efa <LLF_RND_GetFastestRosc+0xa>
    2ef4:	2b08      	cmp	r3, #8
    2ef6:	600b      	str	r3, [r1, #0]
    2ef8:	d806      	bhi.n	2f08 <LLF_RND_GetFastestRosc+0x18>
    2efa:	6a02      	ldr	r2, [r0, #32]
    2efc:	4213      	tst	r3, r2
    2efe:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2f02:	d0f7      	beq.n	2ef4 <LLF_RND_GetFastestRosc+0x4>
    2f04:	2000      	movs	r0, #0
    2f06:	4770      	bx	lr
    2f08:	4800      	ldr	r0, [pc, #0]	; (2f0c <LLF_RND_GetFastestRosc+0x1c>)
    2f0a:	4770      	bx	lr
    2f0c:	00f10c31 	.word	0x00f10c31

00002f10 <LLF_RND_TurnOffTrng>:
    2f10:	2300      	movs	r3, #0
    2f12:	4904      	ldr	r1, [pc, #16]	; (2f24 <LLF_RND_TurnOffTrng+0x14>)
    2f14:	4a04      	ldr	r2, [pc, #16]	; (2f28 <LLF_RND_TurnOffTrng+0x18>)
    2f16:	600b      	str	r3, [r1, #0]
    2f18:	f44f 6080 	mov.w	r0, #1024	; 0x400
    2f1c:	6013      	str	r3, [r2, #0]
    2f1e:	f7ff bf9f 	b.w	2e60 <CC_HalClearInterruptBit>
    2f22:	bf00      	nop
    2f24:	5084112c 	.word	0x5084112c
    2f28:	508411c4 	.word	0x508411c4

00002f2c <CC_PalWaitInterruptRND>:
    2f2c:	4602      	mov	r2, r0
    2f2e:	4807      	ldr	r0, [pc, #28]	; (2f4c <CC_PalWaitInterruptRND+0x20>)
    2f30:	6803      	ldr	r3, [r0, #0]
    2f32:	4213      	tst	r3, r2
    2f34:	d0fc      	beq.n	2f30 <CC_PalWaitInterruptRND+0x4>
    2f36:	b121      	cbz	r1, 2f42 <CC_PalWaitInterruptRND+0x16>
    2f38:	4b05      	ldr	r3, [pc, #20]	; (2f50 <CC_PalWaitInterruptRND+0x24>)
    2f3a:	4806      	ldr	r0, [pc, #24]	; (2f54 <CC_PalWaitInterruptRND+0x28>)
    2f3c:	681b      	ldr	r3, [r3, #0]
    2f3e:	600b      	str	r3, [r1, #0]
    2f40:	6003      	str	r3, [r0, #0]
    2f42:	4b05      	ldr	r3, [pc, #20]	; (2f58 <CC_PalWaitInterruptRND+0x2c>)
    2f44:	2000      	movs	r0, #0
    2f46:	601a      	str	r2, [r3, #0]
    2f48:	4770      	bx	lr
    2f4a:	bf00      	nop
    2f4c:	50841a00 	.word	0x50841a00
    2f50:	50841104 	.word	0x50841104
    2f54:	50841108 	.word	0x50841108
    2f58:	50841a08 	.word	0x50841a08

00002f5c <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    2f5c:	b508      	push	{r3, lr}
	spm_config();
    2f5e:	f7fd fefb 	bl	d58 <spm_config>
	spm_jump();
}
    2f62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    2f66:	f7fd be8b 	b.w	c80 <spm_jump>

00002f6a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    2f6a:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    2f6e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2f72:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    2f74:	bf08      	it	eq
    2f76:	f06f 0015 	mvneq.w	r0, #21
    2f7a:	4770      	bx	lr

00002f7c <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
    2f7c:	b570      	push	{r4, r5, r6, lr}
    2f7e:	250c      	movs	r5, #12
    2f80:	434d      	muls	r5, r1
    2f82:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
    2f84:	f990 000b 	ldrsb.w	r0, [r0, #11]
    2f88:	1974      	adds	r4, r6, r5
		&p->levels[level].bits : p->levels[level].bits_p;
    2f8a:	4288      	cmp	r0, r1
    2f8c:	bfa8      	it	ge
    2f8e:	4621      	movge	r1, r4

	*word = &bitarray[bn / 32];
    2f90:	f04f 0420 	mov.w	r4, #32
    2f94:	fb92 f4f4 	sdiv	r4, r2, r4
		&p->levels[level].bits : p->levels[level].bits_p;
    2f98:	bfb8      	it	lt
    2f9a:	5971      	ldrlt	r1, [r6, r5]

	return bn & 0x1f;
}
    2f9c:	f002 001f 	and.w	r0, r2, #31
	*word = &bitarray[bn / 32];
    2fa0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    2fa4:	6019      	str	r1, [r3, #0]
}
    2fa6:	bd70      	pop	{r4, r5, r6, pc}

00002fa8 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
    2fa8:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    2faa:	ab01      	add	r3, sp, #4
    2fac:	f7ff ffe6 	bl	2f7c <get_bit_ptr>

	*word |= (1<<bit);
    2fb0:	2301      	movs	r3, #1
    2fb2:	9a01      	ldr	r2, [sp, #4]
    2fb4:	fa03 f000 	lsl.w	r0, r3, r0
    2fb8:	6813      	ldr	r3, [r2, #0]
    2fba:	4303      	orrs	r3, r0
    2fbc:	6013      	str	r3, [r2, #0]
}
    2fbe:	b003      	add	sp, #12
    2fc0:	f85d fb04 	ldr.w	pc, [sp], #4

00002fc4 <z_sys_mem_pool_base_init>:
{
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
    2fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2fc8:	4604      	mov	r4, r0
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);

	p->max_inline_level = -1;
    2fca:	22ff      	movs	r2, #255	; 0xff

	for (i = 0; i < p->n_levels; i++) {
    2fcc:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    2fce:	f04f 0e0c 	mov.w	lr, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    2fd2:	6843      	ldr	r3, [r0, #4]
    2fd4:	8905      	ldrh	r5, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    2fd6:	6800      	ldr	r0, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    2fd8:	435d      	muls	r5, r3
	for (i = 0; i < p->n_levels; i++) {
    2fda:	f894 c00a 	ldrb.w	ip, [r4, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    2fde:	4428      	add	r0, r5
	p->max_inline_level = -1;
    2fe0:	72e2      	strb	r2, [r4, #11]
	for (i = 0; i < p->n_levels; i++) {
    2fe2:	458c      	cmp	ip, r1
    2fe4:	dc05      	bgt.n	2ff2 <z_sys_mem_pool_base_init+0x2e>
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    2fe6:	2500      	movs	r5, #0
    2fe8:	8923      	ldrh	r3, [r4, #8]
    2fea:	42ab      	cmp	r3, r5
    2fec:	dc22      	bgt.n	3034 <z_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
    2fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		int nblocks = buflen / sz;
    2ff2:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
    2ff6:	fb0e f701 	mul.w	r7, lr, r1
    2ffa:	f8d4 800c 	ldr.w	r8, [r4, #12]
		if (nblocks < 32) {
    2ffe:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
    3000:	eb08 0607 	add.w	r6, r8, r7
			bits += (nblocks + 31)/32;
    3004:	bfc8      	it	gt
    3006:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
    3008:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
    300c:	f106 0904 	add.w	r9, r6, #4
			bits += (nblocks + 31)/32;
    3010:	bfc8      	it	gt
    3012:	0952      	lsrgt	r2, r2, #5
		sz = _ALIGN4(sz / 4);
    3014:	f103 0303 	add.w	r3, r3, #3
    3018:	e9c6 9901 	strd	r9, r9, [r6, #4]
    301c:	f023 0303 	bic.w	r3, r3, #3
			p->max_inline_level = i;
    3020:	bfd4      	ite	le
    3022:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
    3024:	f848 0007 	strgt.w	r0, [r8, r7]
	for (i = 0; i < p->n_levels; i++) {
    3028:	f101 0101 	add.w	r1, r1, #1
			bits += (nblocks + 31)/32;
    302c:	bfc8      	it	gt
    302e:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
    3032:	e7d6      	b.n	2fe2 <z_sys_mem_pool_base_init+0x1e>
	return (u8_t *)p->buf + lsz * block;
    3034:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
    3036:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
    3038:	436a      	muls	r2, r5
    303a:	6820      	ldr	r0, [r4, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
    303c:	1d1e      	adds	r6, r3, #4
	return (u8_t *)p->buf + lsz * block;
    303e:	1881      	adds	r1, r0, r2
	node->next = list;
    3040:	5086      	str	r6, [r0, r2]
	node->prev = list->tail;
    3042:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
    3044:	4620      	mov	r0, r4
    3046:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
    3048:	689a      	ldr	r2, [r3, #8]
    304a:	6011      	str	r1, [r2, #0]
	list->tail = node;
    304c:	6099      	str	r1, [r3, #8]
    304e:	462a      	mov	r2, r5
    3050:	2100      	movs	r1, #0
    3052:	f7ff ffa9 	bl	2fa8 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    3056:	3501      	adds	r5, #1
    3058:	e7c6      	b.n	2fe8 <z_sys_mem_pool_base_init+0x24>

0000305a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    305a:	b508      	push	{r3, lr}
    305c:	4604      	mov	r4, r0
    305e:	4608      	mov	r0, r1
    3060:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    3062:	461a      	mov	r2, r3
    3064:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    3066:	f7ff f8d9 	bl	221c <z_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    306a:	f7fe faff 	bl	166c <z_impl_k_thread_abort>

0000306e <z_arch_printk_char_out>:
}
    306e:	2000      	movs	r0, #0
    3070:	4770      	bx	lr

00003072 <print_err>:
{
    3072:	b570      	push	{r4, r5, r6, lr}
    3074:	460d      	mov	r5, r1
    3076:	4604      	mov	r4, r0
	out('E', ctx);
    3078:	2045      	movs	r0, #69	; 0x45
    307a:	47a0      	blx	r4
	out('R', ctx);
    307c:	4629      	mov	r1, r5
    307e:	2052      	movs	r0, #82	; 0x52
    3080:	47a0      	blx	r4
	out('R', ctx);
    3082:	4629      	mov	r1, r5
    3084:	4623      	mov	r3, r4
}
    3086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    308a:	2052      	movs	r0, #82	; 0x52
    308c:	4718      	bx	r3

0000308e <z_vprintk>:
{
    308e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int long_ctr = 0;
    3092:	f04f 0a00 	mov.w	sl, #0
{
    3096:	4606      	mov	r6, r0
    3098:	460f      	mov	r7, r1
	int min_width = -1;
    309a:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
    309e:	46d0      	mov	r8, sl
{
    30a0:	b089      	sub	sp, #36	; 0x24
    30a2:	461c      	mov	r4, r3
    30a4:	1e53      	subs	r3, r2, #1
    30a6:	9303      	str	r3, [sp, #12]
			might_format = 0;
    30a8:	2500      	movs	r5, #0
						break;
    30aa:	e005      	b.n	30b8 <z_vprintk+0x2a>
		if (!might_format) {
    30ac:	b96d      	cbnz	r5, 30ca <z_vprintk+0x3c>
			if (*fmt != '%') {
    30ae:	2825      	cmp	r0, #37	; 0x25
    30b0:	f000 813d 	beq.w	332e <z_vprintk+0x2a0>
				out((int)*fmt, ctx);
    30b4:	4639      	mov	r1, r7
    30b6:	47b0      	blx	r6
	while (*fmt) {
    30b8:	9b03      	ldr	r3, [sp, #12]
    30ba:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    30be:	9303      	str	r3, [sp, #12]
    30c0:	2800      	cmp	r0, #0
    30c2:	d1f3      	bne.n	30ac <z_vprintk+0x1e>
}
    30c4:	b009      	add	sp, #36	; 0x24
    30c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    30ca:	2864      	cmp	r0, #100	; 0x64
    30cc:	d062      	beq.n	3194 <z_vprintk+0x106>
    30ce:	d819      	bhi.n	3104 <z_vprintk+0x76>
    30d0:	2839      	cmp	r0, #57	; 0x39
    30d2:	d80a      	bhi.n	30ea <z_vprintk+0x5c>
    30d4:	2831      	cmp	r0, #49	; 0x31
    30d6:	d251      	bcs.n	317c <z_vprintk+0xee>
    30d8:	282d      	cmp	r0, #45	; 0x2d
    30da:	d03d      	beq.n	3158 <z_vprintk+0xca>
    30dc:	2830      	cmp	r0, #48	; 0x30
    30de:	d03e      	beq.n	315e <z_vprintk+0xd0>
    30e0:	2825      	cmp	r0, #37	; 0x25
    30e2:	d108      	bne.n	30f6 <z_vprintk+0x68>
				out((int)'%', ctx);
    30e4:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
    30e6:	47b0      	blx	r6
    30e8:	e7de      	b.n	30a8 <z_vprintk+0x1a>
			switch (*fmt) {
    30ea:	2858      	cmp	r0, #88	; 0x58
    30ec:	f000 80a8 	beq.w	3240 <z_vprintk+0x1b2>
    30f0:	2863      	cmp	r0, #99	; 0x63
    30f2:	f000 8116 	beq.w	3322 <z_vprintk+0x294>
				out((int)'%', ctx);
    30f6:	4639      	mov	r1, r7
    30f8:	2025      	movs	r0, #37	; 0x25
    30fa:	47b0      	blx	r6
				out((int)*fmt, ctx);
    30fc:	9b03      	ldr	r3, [sp, #12]
    30fe:	4639      	mov	r1, r7
    3100:	7818      	ldrb	r0, [r3, #0]
    3102:	e7f0      	b.n	30e6 <z_vprintk+0x58>
			switch (*fmt) {
    3104:	2870      	cmp	r0, #112	; 0x70
    3106:	f000 8091 	beq.w	322c <z_vprintk+0x19e>
    310a:	d806      	bhi.n	311a <z_vprintk+0x8c>
    310c:	2869      	cmp	r0, #105	; 0x69
    310e:	d041      	beq.n	3194 <z_vprintk+0x106>
    3110:	286c      	cmp	r0, #108	; 0x6c
    3112:	d03c      	beq.n	318e <z_vprintk+0x100>
    3114:	2868      	cmp	r0, #104	; 0x68
    3116:	d0cf      	beq.n	30b8 <z_vprintk+0x2a>
    3118:	e7ed      	b.n	30f6 <z_vprintk+0x68>
    311a:	2875      	cmp	r0, #117	; 0x75
    311c:	d06d      	beq.n	31fa <z_vprintk+0x16c>
    311e:	d817      	bhi.n	3150 <z_vprintk+0xc2>
    3120:	2873      	cmp	r0, #115	; 0x73
    3122:	d1e8      	bne.n	30f6 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
    3124:	6825      	ldr	r5, [r4, #0]
    3126:	f104 0b04 	add.w	fp, r4, #4
    312a:	462b      	mov	r3, r5
				while (*s)
    312c:	461c      	mov	r4, r3
    312e:	f814 0b01 	ldrb.w	r0, [r4], #1
    3132:	2800      	cmp	r0, #0
    3134:	f040 80ec 	bne.w	3310 <z_vprintk+0x282>
				if (padding == PAD_SPACE_AFTER) {
    3138:	f1b8 0f03 	cmp.w	r8, #3
    313c:	f040 8100 	bne.w	3340 <z_vprintk+0x2b2>
					int remaining = min_width - (s - start);
    3140:	1b5c      	subs	r4, r3, r5
    3142:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    3146:	2c00      	cmp	r4, #0
    3148:	f300 80e6 	bgt.w	3318 <z_vprintk+0x28a>
				char *s = va_arg(ap, char *);
    314c:	465c      	mov	r4, fp
    314e:	e7ab      	b.n	30a8 <z_vprintk+0x1a>
			switch (*fmt) {
    3150:	2878      	cmp	r0, #120	; 0x78
    3152:	d075      	beq.n	3240 <z_vprintk+0x1b2>
    3154:	287a      	cmp	r0, #122	; 0x7a
    3156:	e7de      	b.n	3116 <z_vprintk+0x88>
				padding = PAD_SPACE_AFTER;
    3158:	f04f 0803 	mov.w	r8, #3
    315c:	e7ac      	b.n	30b8 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
    315e:	f1b9 0f00 	cmp.w	r9, #0
    3162:	da0e      	bge.n	3182 <z_vprintk+0xf4>
    3164:	f1b8 0f00 	cmp.w	r8, #0
    3168:	f000 80e7 	beq.w	333a <z_vprintk+0x2ac>
					min_width = *fmt - '0';
    316c:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    3170:	f1b8 0f00 	cmp.w	r8, #0
    3174:	bf08      	it	eq
    3176:	f04f 0802 	moveq.w	r8, #2
    317a:	e79d      	b.n	30b8 <z_vprintk+0x2a>
				if (min_width < 0) {
    317c:	f1b9 0f00 	cmp.w	r9, #0
    3180:	dbf4      	blt.n	316c <z_vprintk+0xde>
					min_width = 10 * min_width + *fmt - '0';
    3182:	230a      	movs	r3, #10
    3184:	fb03 0909 	mla	r9, r3, r9, r0
    3188:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    318c:	e7f0      	b.n	3170 <z_vprintk+0xe2>
				long_ctr++;
    318e:	f10a 0a01 	add.w	sl, sl, #1
    3192:	e791      	b.n	30b8 <z_vprintk+0x2a>
				if (long_ctr == 0) {
    3194:	f1ba 0f00 	cmp.w	sl, #0
    3198:	d112      	bne.n	31c0 <z_vprintk+0x132>
					long ld = va_arg(ap, long);
    319a:	6825      	ldr	r5, [r4, #0]
    319c:	3404      	adds	r4, #4
				if (d < 0) {
    319e:	2d00      	cmp	r5, #0
    31a0:	da05      	bge.n	31ae <z_vprintk+0x120>
					out((int)'-', ctx);
    31a2:	4639      	mov	r1, r7
    31a4:	202d      	movs	r0, #45	; 0x2d
    31a6:	47b0      	blx	r6
					d = -d;
    31a8:	426d      	negs	r5, r5
					min_width--;
    31aa:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
    31ae:	4643      	mov	r3, r8
    31b0:	462a      	mov	r2, r5
    31b2:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
    31b6:	4639      	mov	r1, r7
    31b8:	4630      	mov	r0, r6
    31ba:	f7fd fa31 	bl	620 <_printk_dec_ulong>
    31be:	e773      	b.n	30a8 <z_vprintk+0x1a>
				} else if (long_ctr == 1) {
    31c0:	f1ba 0f01 	cmp.w	sl, #1
    31c4:	d0e9      	beq.n	319a <z_vprintk+0x10c>
					if (lld > INT32_MAX ||
    31c6:	f04f 0c00 	mov.w	ip, #0
    31ca:	f04f 3bff 	mov.w	fp, #4294967295
					long long lld = va_arg(ap, long long);
    31ce:	3407      	adds	r4, #7
    31d0:	f024 0307 	bic.w	r3, r4, #7
    31d4:	f103 0408 	add.w	r4, r3, #8
    31d8:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > INT32_MAX ||
    31dc:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
    31e0:	f143 0100 	adc.w	r1, r3, #0
    31e4:	458c      	cmp	ip, r1
    31e6:	bf08      	it	eq
    31e8:	4583      	cmpeq	fp, r0
    31ea:	d204      	bcs.n	31f6 <z_vprintk+0x168>
						print_err(out, ctx);
    31ec:	4639      	mov	r1, r7
    31ee:	4630      	mov	r0, r6
    31f0:	f7ff ff3f 	bl	3072 <print_err>
    31f4:	e758      	b.n	30a8 <z_vprintk+0x1a>
					d = (s32_t)lld;
    31f6:	4615      	mov	r5, r2
    31f8:	e7d1      	b.n	319e <z_vprintk+0x110>
				if (long_ctr == 0) {
    31fa:	f1ba 0f00 	cmp.w	sl, #0
    31fe:	d105      	bne.n	320c <z_vprintk+0x17e>
					long lu = va_arg(ap, unsigned long);
    3200:	6822      	ldr	r2, [r4, #0]
    3202:	3404      	adds	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    3204:	f8cd 9000 	str.w	r9, [sp]
    3208:	4643      	mov	r3, r8
    320a:	e7d4      	b.n	31b6 <z_vprintk+0x128>
				} else if (long_ctr == 1) {
    320c:	f1ba 0f01 	cmp.w	sl, #1
    3210:	d0f6      	beq.n	3200 <z_vprintk+0x172>
					unsigned long long llu =
    3212:	3407      	adds	r4, #7
    3214:	f024 0307 	bic.w	r3, r4, #7
    3218:	f103 0408 	add.w	r4, r3, #8
    321c:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > INT32_MAX) {
    3220:	2b00      	cmp	r3, #0
    3222:	bf08      	it	eq
    3224:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
    3228:	d3ec      	bcc.n	3204 <z_vprintk+0x176>
    322a:	e7df      	b.n	31ec <z_vprintk+0x15e>
				  out('0', ctx);
    322c:	4639      	mov	r1, r7
    322e:	2030      	movs	r0, #48	; 0x30
    3230:	47b0      	blx	r6
				  out('x', ctx);
    3232:	4639      	mov	r1, r7
    3234:	2078      	movs	r0, #120	; 0x78
    3236:	47b0      	blx	r6
				  min_width = 8;
    3238:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    323c:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
    3240:	f1ba 0f01 	cmp.w	sl, #1
    3244:	dc27      	bgt.n	3296 <z_vprintk+0x208>
					x = va_arg(ap, unsigned long);
    3246:	6823      	ldr	r3, [r4, #0]
    3248:	3404      	adds	r4, #4
    324a:	9307      	str	r3, [sp, #28]
    324c:	2300      	movs	r3, #0
    324e:	9304      	str	r3, [sp, #16]
	int remaining = 16; /* 16 digits max */
    3250:	2210      	movs	r2, #16
	int digits = 0;
    3252:	2300      	movs	r3, #0
	int size = sizeof(num) * 2;
    3254:	4693      	mov	fp, r2
	int digits = 0;
    3256:	9302      	str	r3, [sp, #8]
	int found_largest_digit = 0;
    3258:	9306      	str	r3, [sp, #24]
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    325a:	9b07      	ldr	r3, [sp, #28]
    325c:	f10b 3bff 	add.w	fp, fp, #4294967295
    3260:	ea4f 008b 	mov.w	r0, fp, lsl #2
    3264:	f1c0 0c20 	rsb	ip, r0, #32
    3268:	f1a0 0120 	sub.w	r1, r0, #32
    326c:	fa23 f000 	lsr.w	r0, r3, r0
    3270:	9b04      	ldr	r3, [sp, #16]
    3272:	fa03 fc0c 	lsl.w	ip, r3, ip
    3276:	ea40 000c 	orr.w	r0, r0, ip
    327a:	fa23 f101 	lsr.w	r1, r3, r1
    327e:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || size == 1) {
    3280:	f010 000f 	ands.w	r0, r0, #15
    3284:	d113      	bne.n	32ae <z_vprintk+0x220>
    3286:	9b06      	ldr	r3, [sp, #24]
    3288:	b913      	cbnz	r3, 3290 <z_vprintk+0x202>
    328a:	f1bb 0f00 	cmp.w	fp, #0
    328e:	d12e      	bne.n	32ee <z_vprintk+0x260>
			nibble += nibble > 9 ? 87 : 48;
    3290:	f04f 0c30 	mov.w	ip, #48	; 0x30
    3294:	e011      	b.n	32ba <z_vprintk+0x22c>
					x = va_arg(ap, unsigned long long);
    3296:	3407      	adds	r4, #7
    3298:	f024 0307 	bic.w	r3, r4, #7
    329c:	681a      	ldr	r2, [r3, #0]
    329e:	f103 0408 	add.w	r4, r3, #8
    32a2:	685b      	ldr	r3, [r3, #4]
    32a4:	9207      	str	r2, [sp, #28]
    32a6:	9304      	str	r3, [sp, #16]
    32a8:	e7d2      	b.n	3250 <z_vprintk+0x1c2>
	for (; size != 0; size--) {
    32aa:	9a05      	ldr	r2, [sp, #20]
    32ac:	e7d5      	b.n	325a <z_vprintk+0x1cc>
			nibble += nibble > 9 ? 87 : 48;
    32ae:	2809      	cmp	r0, #9
    32b0:	bf8c      	ite	hi
    32b2:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    32b6:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
    32ba:	4639      	mov	r1, r7
    32bc:	4460      	add	r0, ip
    32be:	9205      	str	r2, [sp, #20]
    32c0:	47b0      	blx	r6
			digits++;
    32c2:	9b02      	ldr	r3, [sp, #8]
			found_largest_digit = 1;
    32c4:	9506      	str	r5, [sp, #24]
			digits++;
    32c6:	3301      	adds	r3, #1
    32c8:	9302      	str	r3, [sp, #8]
	for (; size != 0; size--) {
    32ca:	f1bb 0f00 	cmp.w	fp, #0
    32ce:	d1ec      	bne.n	32aa <z_vprintk+0x21c>
	if (padding == PAD_SPACE_AFTER) {
    32d0:	f1b8 0f03 	cmp.w	r8, #3
    32d4:	f47f aee8 	bne.w	30a8 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
    32d8:	9b02      	ldr	r3, [sp, #8]
    32da:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    32de:	2d00      	cmp	r5, #0
    32e0:	f77f aee2 	ble.w	30a8 <z_vprintk+0x1a>
			out(' ', ctx);
    32e4:	4639      	mov	r1, r7
    32e6:	2020      	movs	r0, #32
    32e8:	47b0      	blx	r6
    32ea:	3d01      	subs	r5, #1
    32ec:	e7f7      	b.n	32de <z_vprintk+0x250>
		if (remaining-- <= min_width) {
    32ee:	1e53      	subs	r3, r2, #1
    32f0:	4591      	cmp	r9, r2
    32f2:	9305      	str	r3, [sp, #20]
    32f4:	dbe9      	blt.n	32ca <z_vprintk+0x23c>
			if (padding == PAD_ZERO_BEFORE) {
    32f6:	f1b8 0f01 	cmp.w	r8, #1
    32fa:	d103      	bne.n	3304 <z_vprintk+0x276>
				out('0', ctx);
    32fc:	4639      	mov	r1, r7
    32fe:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    3300:	47b0      	blx	r6
    3302:	e7e2      	b.n	32ca <z_vprintk+0x23c>
			} else if (padding == PAD_SPACE_BEFORE) {
    3304:	f1b8 0f02 	cmp.w	r8, #2
    3308:	d1df      	bne.n	32ca <z_vprintk+0x23c>
				out(' ', ctx);
    330a:	4639      	mov	r1, r7
    330c:	2020      	movs	r0, #32
    330e:	e7f7      	b.n	3300 <z_vprintk+0x272>
					out((int)(*s++), ctx);
    3310:	4639      	mov	r1, r7
    3312:	47b0      	blx	r6
    3314:	4623      	mov	r3, r4
    3316:	e709      	b.n	312c <z_vprintk+0x9e>
						out(' ', ctx);
    3318:	4639      	mov	r1, r7
    331a:	2020      	movs	r0, #32
    331c:	47b0      	blx	r6
    331e:	3c01      	subs	r4, #1
    3320:	e711      	b.n	3146 <z_vprintk+0xb8>
				out(c, ctx);
    3322:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    3324:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    3326:	4639      	mov	r1, r7
    3328:	47b0      	blx	r6
				int c = va_arg(ap, int);
    332a:	462c      	mov	r4, r5
    332c:	e6bc      	b.n	30a8 <z_vprintk+0x1a>
				long_ctr = 0;
    332e:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    3330:	46a8      	mov	r8, r5
				min_width = -1;
    3332:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
    3336:	2501      	movs	r5, #1
    3338:	e6be      	b.n	30b8 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
    333a:	f04f 0801 	mov.w	r8, #1
    333e:	e6bb      	b.n	30b8 <z_vprintk+0x2a>
				char *s = va_arg(ap, char *);
    3340:	465c      	mov	r4, fp
			might_format = 0;
    3342:	4605      	mov	r5, r0
    3344:	e6b8      	b.n	30b8 <z_vprintk+0x2a>

00003346 <printk>:
{
    3346:	b40f      	push	{r0, r1, r2, r3}
    3348:	b507      	push	{r0, r1, r2, lr}
    334a:	a904      	add	r1, sp, #16
    334c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    3350:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    3352:	f7fd f9b9 	bl	6c8 <vprintk>
}
    3356:	b003      	add	sp, #12
    3358:	f85d eb04 	ldr.w	lr, [sp], #4
    335c:	b004      	add	sp, #16
    335e:	4770      	bx	lr

00003360 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);

GEN_ABS_SYM_END
    3360:	4770      	bx	lr

00003362 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
    3362:	f7fd b9d5 	b.w	710 <SystemInit>

00003366 <nrf_power_clock_isr>:
#endif
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
	bool usb_detected, usb_pwr_rdy, usb_removed;
#endif

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    3366:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
{
    336a:	b530      	push	{r4, r5, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    336c:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108

	hf_intenset = ((NRF_CLOCK->INTENSET &
    3370:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		       CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    3374:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
	hf_intenset = ((NRF_CLOCK->INTENSET &
    3378:	f002 0201 	and.w	r2, r2, #1

	lf_intenset = ((NRF_CLOCK->INTENSET &
    337c:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
		       CLOCK_INTENSET_LFCLKSTARTED_Msk) != 0);
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    3380:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
			|| usb_detected || usb_pwr_rdy || usb_removed
#endif
	);

	if (pof) {
    3384:	b115      	cbz	r5, 338c <nrf_power_clock_isr+0x26>
		NRF_POWER->EVENTS_POFWARN = 0;
    3386:	2500      	movs	r5, #0
    3388:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
	}

	if (hf) {
    338c:	b1b4      	cbz	r4, 33bc <nrf_power_clock_isr+0x56>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    338e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3392:	2400      	movs	r4, #0
    3394:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	}

	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    3398:	b122      	cbz	r2, 33a4 <nrf_power_clock_isr+0x3e>
				   (CLOCK_HFCLKSTAT_STATE_Msk |
				    CLOCK_HFCLKSTAT_SRC_Msk)))){
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    339a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    339e:	2201      	movs	r2, #1
    33a0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
#endif
	}

	if (lf) {
    33a4:	b148      	cbz	r0, 33ba <nrf_power_clock_isr+0x54>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    33a6:	2200      	movs	r2, #0
    33a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    33ac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

		if (lf_intenset) {
    33b0:	078a      	lsls	r2, r1, #30
    33b2:	d502      	bpl.n	33ba <nrf_power_clock_isr+0x54>
			/* INTENSET is used as state flag to start calibration,
			 * hence clear it here.
			 */
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    33b4:	2202      	movs	r2, #2
    33b6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	if (usb_removed) {
		nrf_power_event_clear(NRF_POWER_EVENT_USBREMOVED);
		power_event_cb(NRF_POWER_EVENT_USBREMOVED);
	}
#endif
}
    33ba:	bd30      	pop	{r4, r5, pc}
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    33bc:	2a00      	cmp	r2, #0
    33be:	d0f1      	beq.n	33a4 <nrf_power_clock_isr+0x3e>
    33c0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    33c4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    33c8:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    33cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    33d0:	d1e8      	bne.n	33a4 <nrf_power_clock_isr+0x3e>
    33d2:	e7e2      	b.n	339a <nrf_power_clock_isr+0x34>

000033d4 <clock_control_init>:

static int clock_control_init(struct device *dev)
{
    33d4:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(DT_NORDIC_NRF_CLOCK_0_IRQ_0,
    33d6:	2200      	movs	r2, #0
    33d8:	2101      	movs	r1, #1
    33da:	2005      	movs	r0, #5
    33dc:	f7fe f8a6 	bl	152c <z_irq_priority_set>
		    DT_NORDIC_NRF_CLOCK_0_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    33e0:	2005      	movs	r0, #5
    33e2:	f7fe f87f 	bl	14e4 <z_arch_irq_enable>

	return 0;
}
    33e6:	2000      	movs	r0, #0
    33e8:	bd08      	pop	{r3, pc}

000033ea <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    33ea:	4770      	bx	lr

000033ec <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    33ec:	4770      	bx	lr

000033ee <sys_clock_disable>:
    33ee:	4770      	bx	lr

000033f0 <__acle_se_spm_request_system_reboot>:
    33f0:	b508      	push	{r3, lr}
    33f2:	2001      	movs	r0, #1
    33f4:	f7fd fa48 	bl	888 <sys_reboot>
    33f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    33fc:	4670      	mov	r0, lr
    33fe:	4671      	mov	r1, lr
    3400:	4672      	mov	r2, lr
    3402:	4673      	mov	r3, lr
    3404:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    3408:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    340c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    3410:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    3414:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    3418:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    341c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    3420:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    3424:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    3428:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    342c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    3430:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    3434:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    3438:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    343c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3440:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    3444:	f38e 8c00 	msr	CPSR_fs, lr
    3448:	b410      	push	{r4}
    344a:	eef1 ca10 	vmrs	ip, fpscr
    344e:	f64f 7460 	movw	r4, #65376	; 0xff60
    3452:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    3456:	ea0c 0c04 	and.w	ip, ip, r4
    345a:	eee1 ca10 	vmsr	fpscr, ip
    345e:	bc10      	pop	{r4}
    3460:	46f4      	mov	ip, lr
    3462:	4774      	bxns	lr

00003464 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    3464:	f7fd be16 	b.w	1094 <__bus_fault>

00003468 <irq_target_state_set>:
 * @param secure_state 1 if target state is Secure, 0 otherwise.
 *
 * @return N/A
 */
void irq_target_state_set(unsigned int irq, int secure_state)
{
    3468:	b243      	sxtb	r3, r0
	if (secure_state) {
    346a:	b1a9      	cbz	r1, 3498 <irq_target_state_set+0x30>
  if ((int32_t)(IRQn) >= 0)
    346c:	2b00      	cmp	r3, #0
    346e:	db12      	blt.n	3496 <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    3470:	2101      	movs	r1, #1
    3472:	095b      	lsrs	r3, r3, #5
    3474:	009b      	lsls	r3, r3, #2
    3476:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    347a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    347e:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
    3482:	f000 001f 	and.w	r0, r0, #31
    3486:	fa01 f000 	lsl.w	r0, r1, r0
    348a:	ea22 0000 	bic.w	r0, r2, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    348e:	f8c3 0280 	str.w	r0, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    3492:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
		/* Set target state to Non-Secure */
		if (NVIC_SetTargetState(irq) != 1) {
			__ASSERT(0, "NVIC SetTargetState error");
		}
	}
}
    3496:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    3498:	2b00      	cmp	r3, #0
    349a:	dbfc      	blt.n	3496 <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    349c:	2201      	movs	r2, #1
    349e:	095b      	lsrs	r3, r3, #5
    34a0:	009b      	lsls	r3, r3, #2
    34a2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    34a6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    34aa:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    34ae:	f000 001f 	and.w	r0, r0, #31
    34b2:	fa02 f000 	lsl.w	r0, r2, r0
    34b6:	4308      	orrs	r0, r1
    34b8:	e7e9      	b.n	348e <irq_target_state_set+0x26>

000034ba <z_do_kernel_oops>:

void z_do_kernel_oops(const NANO_ESF *esf)
{
    34ba:	4601      	mov	r1, r0
	z_NanoFatalErrorHandler(esf->basic.r0, esf);
    34bc:	6800      	ldr	r0, [r0, #0]
    34be:	f7fe b877 	b.w	15b0 <z_NanoFatalErrorHandler>

000034c2 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    34c2:	b508      	push	{r3, lr}
	handler();
    34c4:	f7fe f910 	bl	16e8 <z_SysNmiOnReset>
	z_ExcExit();
}
    34c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_ExcExit();
    34cc:	f7fd bd8a 	b.w	fe4 <_IntExit>

000034d0 <z_arch_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    34d0:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    34d2:	2100      	movs	r1, #0
    34d4:	a801      	add	r0, sp, #4
    34d6:	f7fe fab7 	bl	1a48 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    34da:	b003      	add	sp, #12
    34dc:	f85d fb04 	ldr.w	pc, [sp], #4

000034e0 <mpu_configure_region>:
{
    34e0:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    34e2:	684b      	ldr	r3, [r1, #4]
{
    34e4:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    34e6:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
    34e8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    34ec:	890d      	ldrh	r5, [r1, #8]
    34ee:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
    34f0:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    34f2:	f024 041f 	bic.w	r4, r4, #31
    34f6:	3b01      	subs	r3, #1
    34f8:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    34fa:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    34fe:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3502:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    3506:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
    3508:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    350c:	9303      	str	r3, [sp, #12]
    350e:	4604      	mov	r4, r0
    3510:	d805      	bhi.n	351e <mpu_configure_region+0x3e>
	region_init(index, region_conf);
    3512:	4669      	mov	r1, sp
    3514:	f7fe f952 	bl	17bc <region_init>
}
    3518:	4620      	mov	r0, r4
    351a:	b005      	add	sp, #20
    351c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    351e:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
    3522:	e7f9      	b.n	3518 <mpu_configure_region+0x38>

00003524 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    3524:	3801      	subs	r0, #1
    3526:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    3528:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    352c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    3530:	4293      	cmp	r3, r2
    3532:	d102      	bne.n	353a <strcmp+0x16>
    3534:	2b00      	cmp	r3, #0
    3536:	d1f7      	bne.n	3528 <strcmp+0x4>
    3538:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    353a:	1a98      	subs	r0, r3, r2
    353c:	4770      	bx	lr

0000353e <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    353e:	1a43      	subs	r3, r0, r1
    3540:	4293      	cmp	r3, r2
{
    3542:	b510      	push	{r4, lr}
    3544:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    3548:	d308      	bcc.n	355c <memmove+0x1e>
	char *dest = d;
    354a:	4602      	mov	r2, r0
    354c:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    354e:	429a      	cmp	r2, r3
    3550:	d00b      	beq.n	356a <memmove+0x2c>
			*dest = *src;
    3552:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    3556:	f802 4b01 	strb.w	r4, [r2], #1
    355a:	e7f8      	b.n	354e <memmove+0x10>
    355c:	440a      	add	r2, r1
			dest[n] = src[n];
    355e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    3562:	428a      	cmp	r2, r1
			dest[n] = src[n];
    3564:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    3568:	d1f9      	bne.n	355e <memmove+0x20>
			n--;
		}
	}

	return d;
}
    356a:	bd10      	pop	{r4, pc}

0000356c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    356c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0U) {
    356e:	ea81 0400 	eor.w	r4, r1, r0
    3572:	07a5      	lsls	r5, r4, #30
    3574:	4603      	mov	r3, r0
    3576:	d00b      	beq.n	3590 <memcpy+0x24>
    3578:	3b01      	subs	r3, #1
    357a:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    357c:	4291      	cmp	r1, r2
    357e:	d11d      	bne.n	35bc <memcpy+0x50>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    3580:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    3582:	2a00      	cmp	r2, #0
    3584:	d0fc      	beq.n	3580 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    3586:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    358a:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    358c:	f803 4b01 	strb.w	r4, [r3], #1
		while (((unsigned int)d_byte) & 0x3) {
    3590:	079c      	lsls	r4, r3, #30
    3592:	d1f6      	bne.n	3582 <memcpy+0x16>
    3594:	460c      	mov	r4, r1
    3596:	1f1d      	subs	r5, r3, #4
    3598:	188f      	adds	r7, r1, r2
		while (n >= sizeof(unsigned int)) {
    359a:	1b3e      	subs	r6, r7, r4
    359c:	2e03      	cmp	r6, #3
    359e:	d808      	bhi.n	35b2 <memcpy+0x46>
    35a0:	f06f 0503 	mvn.w	r5, #3
    35a4:	0894      	lsrs	r4, r2, #2
    35a6:	fb05 2204 	mla	r2, r5, r4, r2
    35aa:	00a4      	lsls	r4, r4, #2
    35ac:	4423      	add	r3, r4
    35ae:	4421      	add	r1, r4
    35b0:	e7e2      	b.n	3578 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    35b2:	f854 6b04 	ldr.w	r6, [r4], #4
    35b6:	f845 6f04 	str.w	r6, [r5, #4]!
    35ba:	e7ee      	b.n	359a <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    35bc:	f811 4b01 	ldrb.w	r4, [r1], #1
    35c0:	f803 4f01 	strb.w	r4, [r3, #1]!
    35c4:	e7da      	b.n	357c <memcpy+0x10>

000035c6 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    35c6:	4603      	mov	r3, r0
{
    35c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned char c_byte = (unsigned char)c;
    35ca:	b2c9      	uxtb	r1, r1

	while (((unsigned int)d_byte) & 0x3) {
    35cc:	079c      	lsls	r4, r3, #30
    35ce:	d10f      	bne.n	35f0 <memset+0x2a>
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
	c_word |= c_word << 16;

	while (n >= sizeof(unsigned int)) {
    35d0:	461d      	mov	r5, r3
	c_word |= c_word << 8;
    35d2:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    35d6:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
    35da:	189f      	adds	r7, r3, r2
	while (n >= sizeof(unsigned int)) {
    35dc:	1b7e      	subs	r6, r7, r5
    35de:	2e03      	cmp	r6, #3
    35e0:	d80c      	bhi.n	35fc <memset+0x36>
    35e2:	0894      	lsrs	r4, r2, #2
    35e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    35e8:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    35ea:	429c      	cmp	r4, r3
    35ec:	d109      	bne.n	3602 <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    35ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
    35f0:	2a00      	cmp	r2, #0
    35f2:	d0fc      	beq.n	35ee <memset+0x28>
		*(d_byte++) = c_byte;
    35f4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    35f8:	3a01      	subs	r2, #1
    35fa:	e7e7      	b.n	35cc <memset+0x6>
		*(d_word++) = c_word;
    35fc:	f845 4b04 	str.w	r4, [r5], #4
    3600:	e7ec      	b.n	35dc <memset+0x16>
		*(d_byte++) = c_byte;
    3602:	f804 1b01 	strb.w	r1, [r4], #1
    3606:	e7f0      	b.n	35ea <memset+0x24>

00003608 <_stdout_hook_default>:
}
    3608:	f04f 30ff 	mov.w	r0, #4294967295
    360c:	4770      	bx	lr

0000360e <uarte_nrfx_config_get>:
{
    360e:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    3610:	6882      	ldr	r2, [r0, #8]
    3612:	e892 0003 	ldmia.w	r2, {r0, r1}
    3616:	e883 0003 	stmia.w	r3, {r0, r1}
}
    361a:	2000      	movs	r0, #0
    361c:	4770      	bx	lr

0000361e <uarte_nrfx_err_check>:
	return dev->config->config_info;
    361e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
    3620:	689b      	ldr	r3, [r3, #8]
    3622:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3624:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    3628:	b118      	cbz	r0, 3632 <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    362a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    362e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    3632:	4770      	bx	lr

00003634 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
    3634:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    3636:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
    3638:	689b      	ldr	r3, [r3, #8]
    363a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    363c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    3640:	b138      	cbz	r0, 3652 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
    3642:	7a12      	ldrb	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3644:	2000      	movs	r0, #0
    3646:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3648:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    364a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    364e:	601a      	str	r2, [r3, #0]
	return 0;
    3650:	4770      	bx	lr
		return -1;
    3652:	f04f 30ff 	mov.w	r0, #4294967295
}
    3656:	4770      	bx	lr

00003658 <uarte_nrfx_poll_out>:
{
    3658:	b082      	sub	sp, #8
    365a:	aa02      	add	r2, sp, #8
    365c:	f802 1d01 	strb.w	r1, [r2, #-1]!
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3660:	2100      	movs	r1, #0
	return dev->config->config_info;
    3662:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
    3664:	689b      	ldr	r3, [r3, #8]
    3666:	681b      	ldr	r3, [r3, #0]
    3668:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    366c:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3670:	2201      	movs	r2, #1
    3672:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3676:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3678:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    367c:	2900      	cmp	r1, #0
    367e:	d0fb      	beq.n	3678 <uarte_nrfx_poll_out+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3680:	60da      	str	r2, [r3, #12]
}
    3682:	b002      	add	sp, #8
    3684:	4770      	bx	lr

00003686 <platform_calloc_uninit>:
    3686:	2000      	movs	r0, #0
    3688:	4770      	bx	lr

0000368a <platform_free_uninit>:
    368a:	4770      	bx	lr

0000368c <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    368c:	f7ff beae 	b.w	33ec <z_clock_idle_exit>

00003690 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3690:	7b43      	ldrb	r3, [r0, #13]
    3692:	06db      	lsls	r3, r3, #27
    3694:	bf03      	ittte	eq
    3696:	6980      	ldreq	r0, [r0, #24]
    3698:	fab0 f080 	clzeq	r0, r0
    369c:	0940      	lsreq	r0, r0, #5
    369e:	2000      	movne	r0, #0
}
    36a0:	4770      	bx	lr

000036a2 <z_unpend_thread_no_timeout>:
{
    36a2:	b538      	push	{r3, r4, r5, lr}
    36a4:	4604      	mov	r4, r0
    36a6:	f04f 0320 	mov.w	r3, #32
    36aa:	f3ef 8511 	mrs	r5, BASEPRI
    36ae:	f383 8811 	msr	BASEPRI, r3
    36b2:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    36b6:	4601      	mov	r1, r0
    36b8:	6880      	ldr	r0, [r0, #8]
    36ba:	f7fe fc81 	bl	1fc0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    36be:	7b63      	ldrb	r3, [r4, #13]
    36c0:	f023 0302 	bic.w	r3, r3, #2
    36c4:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    36c6:	f385 8811 	msr	BASEPRI, r5
    36ca:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    36ce:	2300      	movs	r3, #0
    36d0:	60a3      	str	r3, [r4, #8]
}
    36d2:	bd38      	pop	{r3, r4, r5, pc}

000036d4 <z_reschedule>:
{
    36d4:	b508      	push	{r3, lr}
	if (resched()) {
    36d6:	f7fe fc0d 	bl	1ef4 <resched>
    36da:	b120      	cbz	r0, 36e6 <z_reschedule+0x12>
}
    36dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    36e0:	4608      	mov	r0, r1
    36e2:	f7fd bd15 	b.w	1110 <__swap>
    36e6:	f381 8811 	msr	BASEPRI, r1
    36ea:	f3bf 8f6f 	isb	sy
    36ee:	bd08      	pop	{r3, pc}

000036f0 <z_reschedule_irqlock>:
{
    36f0:	b508      	push	{r3, lr}
    36f2:	4602      	mov	r2, r0
	if (resched()) {
    36f4:	f7fe fbfe 	bl	1ef4 <resched>
    36f8:	b120      	cbz	r0, 3704 <z_reschedule_irqlock+0x14>
}
    36fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    36fe:	4610      	mov	r0, r2
    3700:	f7fd bd06 	b.w	1110 <__swap>
    3704:	f382 8811 	msr	BASEPRI, r2
    3708:	f3bf 8f6f 	isb	sy
    370c:	bd08      	pop	{r3, pc}

0000370e <z_reschedule_unlocked>:
	__asm__ volatile(
    370e:	f04f 0320 	mov.w	r3, #32
    3712:	f3ef 8011 	mrs	r0, BASEPRI
    3716:	f383 8811 	msr	BASEPRI, r3
    371a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
    371e:	f7ff bfe7 	b.w	36f0 <z_reschedule_irqlock>

00003722 <z_priq_dumb_best>:
	return list->head == list;
    3722:	6803      	ldr	r3, [r0, #0]
}
    3724:	4298      	cmp	r0, r3
    3726:	bf14      	ite	ne
    3728:	4618      	movne	r0, r3
    372a:	2000      	moveq	r0, #0
    372c:	4770      	bx	lr

0000372e <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
    372e:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    3732:	b570      	push	{r4, r5, r6, lr}
    3734:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    3736:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    373a:	b1cb      	cbz	r3, 3770 <z_thread_timeout+0x42>
    373c:	f04f 0320 	mov.w	r3, #32
    3740:	f3ef 8611 	mrs	r6, BASEPRI
    3744:	f383 8811 	msr	BASEPRI, r3
    3748:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    374c:	4629      	mov	r1, r5
    374e:	f850 0c10 	ldr.w	r0, [r0, #-16]
    3752:	f7fe fc35 	bl	1fc0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3756:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    375a:	f023 0302 	bic.w	r3, r3, #2
    375e:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    3762:	f386 8811 	msr	BASEPRI, r6
    3766:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    376a:	2300      	movs	r3, #0
    376c:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    3770:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    3774:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    3776:	f023 0314 	bic.w	r3, r3, #20
    377a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    377e:	f7ff ff87 	bl	3690 <z_is_thread_ready>
    3782:	b120      	cbz	r0, 378e <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    3784:	4628      	mov	r0, r5
}
    3786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    378a:	f7fe bc69 	b.w	2060 <z_add_thread_to_ready_q>
    378e:	bd70      	pop	{r4, r5, r6, pc}

00003790 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3790:	7b43      	ldrb	r3, [r0, #13]
    3792:	06db      	lsls	r3, r3, #27
    3794:	bf03      	ittte	eq
    3796:	6980      	ldreq	r0, [r0, #24]
    3798:	fab0 f080 	clzeq	r0, r0
    379c:	0940      	lsreq	r0, r0, #5
    379e:	2000      	movne	r0, #0
}
    37a0:	4770      	bx	lr

000037a2 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    37a2:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    37a4:	b510      	push	{r4, lr}
    37a6:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    37a8:	b103      	cbz	r3, 37ac <z_thread_single_abort+0xa>
		thread->fn_abort();
    37aa:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
    37ac:	4620      	mov	r0, r4
    37ae:	f7ff ffef 	bl	3790 <z_is_thread_ready>
    37b2:	b138      	cbz	r0, 37c4 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
    37b4:	4620      	mov	r0, r4
    37b6:	f7fe fcff 	bl	21b8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
    37ba:	7b63      	ldrb	r3, [r4, #13]
    37bc:	f043 0308 	orr.w	r3, r3, #8
    37c0:	7363      	strb	r3, [r4, #13]
}
    37c2:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
    37c4:	7b63      	ldrb	r3, [r4, #13]
    37c6:	079b      	lsls	r3, r3, #30
    37c8:	d502      	bpl.n	37d0 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
    37ca:	4620      	mov	r0, r4
    37cc:	f7ff ff69 	bl	36a2 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
    37d0:	69a3      	ldr	r3, [r4, #24]
    37d2:	2b00      	cmp	r3, #0
    37d4:	d0f1      	beq.n	37ba <z_thread_single_abort+0x18>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    37d6:	f104 0018 	add.w	r0, r4, #24
    37da:	f000 f809 	bl	37f0 <z_abort_timeout>
    37de:	e7ec      	b.n	37ba <z_thread_single_abort+0x18>

000037e0 <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    37e0:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
    37e2:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    37e4:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    37e6:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    37e8:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
    37ea:	e9c0 3306 	strd	r3, r3, [r0, #24]

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    37ee:	4770      	bx	lr

000037f0 <z_abort_timeout>:
{
    37f0:	b510      	push	{r4, lr}
	__asm__ volatile(
    37f2:	f04f 0220 	mov.w	r2, #32
    37f6:	f3ef 8411 	mrs	r4, BASEPRI
    37fa:	f382 8811 	msr	BASEPRI, r2
    37fe:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    3802:	6803      	ldr	r3, [r0, #0]
    3804:	b13b      	cbz	r3, 3816 <z_abort_timeout+0x26>
			remove_timeout(to);
    3806:	f7fe fdcb 	bl	23a0 <remove_timeout>
			ret = 0;
    380a:	2000      	movs	r0, #0
	__asm__ volatile(
    380c:	f384 8811 	msr	BASEPRI, r4
    3810:	f3bf 8f6f 	isb	sy
}
    3814:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    3816:	f06f 0015 	mvn.w	r0, #21
    381a:	e7f7      	b.n	380c <z_abort_timeout+0x1c>

0000381c <z_get_next_timeout_expiry>:
{
    381c:	b510      	push	{r4, lr}
	__asm__ volatile(
    381e:	f04f 0320 	mov.w	r3, #32
    3822:	f3ef 8411 	mrs	r4, BASEPRI
    3826:	f383 8811 	msr	BASEPRI, r3
    382a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    382e:	f7fe fdcd 	bl	23cc <next_timeout>
	__asm__ volatile(
    3832:	f384 8811 	msr	BASEPRI, r4
    3836:	f3bf 8f6f 	isb	sy
}
    383a:	bd10      	pop	{r4, pc}

0000383c <z_set_timeout_expiry>:
{
    383c:	b570      	push	{r4, r5, r6, lr}
    383e:	4604      	mov	r4, r0
    3840:	460e      	mov	r6, r1
	__asm__ volatile(
    3842:	f04f 0320 	mov.w	r3, #32
    3846:	f3ef 8511 	mrs	r5, BASEPRI
    384a:	f383 8811 	msr	BASEPRI, r3
    384e:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    3852:	f7fe fdbb 	bl	23cc <next_timeout>
		if (sooner && !imminent) {
    3856:	42a0      	cmp	r0, r4
    3858:	dd05      	ble.n	3866 <z_set_timeout_expiry+0x2a>
    385a:	2801      	cmp	r0, #1
    385c:	dd03      	ble.n	3866 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    385e:	4631      	mov	r1, r6
    3860:	4620      	mov	r0, r4
    3862:	f7fd f98d 	bl	b80 <z_clock_set_timeout>
	__asm__ volatile(
    3866:	f385 8811 	msr	BASEPRI, r5
    386a:	f3bf 8f6f 	isb	sy
}
    386e:	bd70      	pop	{r4, r5, r6, pc}

00003870 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    3870:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

000046c0 <spm_request_random_number-0x3920>:
	...

00007fe0 <spm_request_random_number>:
    7fe0:	e97f e97f 	sg
    7fe4:	f7f8 bfba 	b.w	f5c <__acle_se_spm_request_random_number>

00007fe8 <spm_request_system_reboot>:
    7fe8:	e97f e97f 	sg
    7fec:	f7fb ba00 	b.w	33f0 <__acle_se_spm_request_system_reboot>
	...
