
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

0000c000 <_vector_table>:
    c000:	2002ad80 	.word	0x2002ad80
    c004:	00013f5d 	.word	0x00013f5d
    c008:	0002e6af 	.word	0x0002e6af
    c00c:	00013901 	.word	0x00013901
    c010:	00013901 	.word	0x00013901
    c014:	00013901 	.word	0x00013901
    c018:	00013901 	.word	0x00013901
    c01c:	00013901 	.word	0x00013901
    c020:	00013901 	.word	0x00013901
    c024:	00013901 	.word	0x00013901
    c028:	00013901 	.word	0x00013901
    c02c:	000138c5 	.word	0x000138c5
    c030:	00013901 	.word	0x00013901
    c034:	00013901 	.word	0x00013901
    c038:	000137fd 	.word	0x000137fd
    c03c:	00013471 	.word	0x00013471

0000c040 <_irq_vector_table>:
    c040:	00013925 00013925 00013925 00013925     %9..%9..%9..%9..
    c050:	00013925 00013925 00013925 00013925     %9..%9..%9..%9..
    c060:	00013925 00013925 00013925 00013925     %9..%9..%9..%9..
    c070:	00013925 00013925 00013925 00013925     %9..%9..%9..%9..
    c080:	00013925 00013925 00013925 00013925     %9..%9..%9..%9..
    c090:	00013925 00013925 00013925 00013925     %9..%9..%9..%9..
    c0a0:	00013925 00013925 00013925 00013925     %9..%9..%9..%9..
    c0b0:	00015d05 0002ecf5 00013925 00013925     .]......%9..%9..
    c0c0:	00013925 00013925 00013925 00013925     %9..%9..%9..%9..
    c0d0:	00013925 00013925 00013925 00013925     %9..%9..%9..%9..
    c0e0:	00013925 00013925 0002ee63 00013925     %9..%9..c...%9..
    c0f0:	00013925 00013925 00013925 00013925     %9..%9..%9..%9..
    c100:	00013925 00013925 00013925 00013925     %9..%9..%9..%9..
    c110:	00013925 00013925 00013925 00013925     %9..%9..%9..%9..
    c120:	00013925 00013925 00013925 00013925     %9..%9..%9..%9..
    c130:	00013925 00013925 00013925 00013925     %9..%9..%9..%9..
    c140:	00013925                                %9..

Disassembly of section _TEXT_SECTION_NAME_2:

0000c148 <__aeabi_drsub>:
    c148:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c14c:	e002      	b.n	c154 <__adddf3>
    c14e:	bf00      	nop

0000c150 <__aeabi_dsub>:
    c150:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c154 <__adddf3>:
    c154:	b530      	push	{r4, r5, lr}
    c156:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c15a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c15e:	ea94 0f05 	teq	r4, r5
    c162:	bf08      	it	eq
    c164:	ea90 0f02 	teqeq	r0, r2
    c168:	bf1f      	itttt	ne
    c16a:	ea54 0c00 	orrsne.w	ip, r4, r0
    c16e:	ea55 0c02 	orrsne.w	ip, r5, r2
    c172:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c176:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c17a:	f000 80e2 	beq.w	c342 <__adddf3+0x1ee>
    c17e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c182:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c186:	bfb8      	it	lt
    c188:	426d      	neglt	r5, r5
    c18a:	dd0c      	ble.n	c1a6 <__adddf3+0x52>
    c18c:	442c      	add	r4, r5
    c18e:	ea80 0202 	eor.w	r2, r0, r2
    c192:	ea81 0303 	eor.w	r3, r1, r3
    c196:	ea82 0000 	eor.w	r0, r2, r0
    c19a:	ea83 0101 	eor.w	r1, r3, r1
    c19e:	ea80 0202 	eor.w	r2, r0, r2
    c1a2:	ea81 0303 	eor.w	r3, r1, r3
    c1a6:	2d36      	cmp	r5, #54	; 0x36
    c1a8:	bf88      	it	hi
    c1aa:	bd30      	pophi	{r4, r5, pc}
    c1ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c1b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c1b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c1b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c1bc:	d002      	beq.n	c1c4 <__adddf3+0x70>
    c1be:	4240      	negs	r0, r0
    c1c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c1c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c1c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c1cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c1d0:	d002      	beq.n	c1d8 <__adddf3+0x84>
    c1d2:	4252      	negs	r2, r2
    c1d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c1d8:	ea94 0f05 	teq	r4, r5
    c1dc:	f000 80a7 	beq.w	c32e <__adddf3+0x1da>
    c1e0:	f1a4 0401 	sub.w	r4, r4, #1
    c1e4:	f1d5 0e20 	rsbs	lr, r5, #32
    c1e8:	db0d      	blt.n	c206 <__adddf3+0xb2>
    c1ea:	fa02 fc0e 	lsl.w	ip, r2, lr
    c1ee:	fa22 f205 	lsr.w	r2, r2, r5
    c1f2:	1880      	adds	r0, r0, r2
    c1f4:	f141 0100 	adc.w	r1, r1, #0
    c1f8:	fa03 f20e 	lsl.w	r2, r3, lr
    c1fc:	1880      	adds	r0, r0, r2
    c1fe:	fa43 f305 	asr.w	r3, r3, r5
    c202:	4159      	adcs	r1, r3
    c204:	e00e      	b.n	c224 <__adddf3+0xd0>
    c206:	f1a5 0520 	sub.w	r5, r5, #32
    c20a:	f10e 0e20 	add.w	lr, lr, #32
    c20e:	2a01      	cmp	r2, #1
    c210:	fa03 fc0e 	lsl.w	ip, r3, lr
    c214:	bf28      	it	cs
    c216:	f04c 0c02 	orrcs.w	ip, ip, #2
    c21a:	fa43 f305 	asr.w	r3, r3, r5
    c21e:	18c0      	adds	r0, r0, r3
    c220:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c224:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c228:	d507      	bpl.n	c23a <__adddf3+0xe6>
    c22a:	f04f 0e00 	mov.w	lr, #0
    c22e:	f1dc 0c00 	rsbs	ip, ip, #0
    c232:	eb7e 0000 	sbcs.w	r0, lr, r0
    c236:	eb6e 0101 	sbc.w	r1, lr, r1
    c23a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c23e:	d31b      	bcc.n	c278 <__adddf3+0x124>
    c240:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c244:	d30c      	bcc.n	c260 <__adddf3+0x10c>
    c246:	0849      	lsrs	r1, r1, #1
    c248:	ea5f 0030 	movs.w	r0, r0, rrx
    c24c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c250:	f104 0401 	add.w	r4, r4, #1
    c254:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c258:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c25c:	f080 809a 	bcs.w	c394 <__adddf3+0x240>
    c260:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c264:	bf08      	it	eq
    c266:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c26a:	f150 0000 	adcs.w	r0, r0, #0
    c26e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c272:	ea41 0105 	orr.w	r1, r1, r5
    c276:	bd30      	pop	{r4, r5, pc}
    c278:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c27c:	4140      	adcs	r0, r0
    c27e:	eb41 0101 	adc.w	r1, r1, r1
    c282:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c286:	f1a4 0401 	sub.w	r4, r4, #1
    c28a:	d1e9      	bne.n	c260 <__adddf3+0x10c>
    c28c:	f091 0f00 	teq	r1, #0
    c290:	bf04      	itt	eq
    c292:	4601      	moveq	r1, r0
    c294:	2000      	moveq	r0, #0
    c296:	fab1 f381 	clz	r3, r1
    c29a:	bf08      	it	eq
    c29c:	3320      	addeq	r3, #32
    c29e:	f1a3 030b 	sub.w	r3, r3, #11
    c2a2:	f1b3 0220 	subs.w	r2, r3, #32
    c2a6:	da0c      	bge.n	c2c2 <__adddf3+0x16e>
    c2a8:	320c      	adds	r2, #12
    c2aa:	dd08      	ble.n	c2be <__adddf3+0x16a>
    c2ac:	f102 0c14 	add.w	ip, r2, #20
    c2b0:	f1c2 020c 	rsb	r2, r2, #12
    c2b4:	fa01 f00c 	lsl.w	r0, r1, ip
    c2b8:	fa21 f102 	lsr.w	r1, r1, r2
    c2bc:	e00c      	b.n	c2d8 <__adddf3+0x184>
    c2be:	f102 0214 	add.w	r2, r2, #20
    c2c2:	bfd8      	it	le
    c2c4:	f1c2 0c20 	rsble	ip, r2, #32
    c2c8:	fa01 f102 	lsl.w	r1, r1, r2
    c2cc:	fa20 fc0c 	lsr.w	ip, r0, ip
    c2d0:	bfdc      	itt	le
    c2d2:	ea41 010c 	orrle.w	r1, r1, ip
    c2d6:	4090      	lslle	r0, r2
    c2d8:	1ae4      	subs	r4, r4, r3
    c2da:	bfa2      	ittt	ge
    c2dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c2e0:	4329      	orrge	r1, r5
    c2e2:	bd30      	popge	{r4, r5, pc}
    c2e4:	ea6f 0404 	mvn.w	r4, r4
    c2e8:	3c1f      	subs	r4, #31
    c2ea:	da1c      	bge.n	c326 <__adddf3+0x1d2>
    c2ec:	340c      	adds	r4, #12
    c2ee:	dc0e      	bgt.n	c30e <__adddf3+0x1ba>
    c2f0:	f104 0414 	add.w	r4, r4, #20
    c2f4:	f1c4 0220 	rsb	r2, r4, #32
    c2f8:	fa20 f004 	lsr.w	r0, r0, r4
    c2fc:	fa01 f302 	lsl.w	r3, r1, r2
    c300:	ea40 0003 	orr.w	r0, r0, r3
    c304:	fa21 f304 	lsr.w	r3, r1, r4
    c308:	ea45 0103 	orr.w	r1, r5, r3
    c30c:	bd30      	pop	{r4, r5, pc}
    c30e:	f1c4 040c 	rsb	r4, r4, #12
    c312:	f1c4 0220 	rsb	r2, r4, #32
    c316:	fa20 f002 	lsr.w	r0, r0, r2
    c31a:	fa01 f304 	lsl.w	r3, r1, r4
    c31e:	ea40 0003 	orr.w	r0, r0, r3
    c322:	4629      	mov	r1, r5
    c324:	bd30      	pop	{r4, r5, pc}
    c326:	fa21 f004 	lsr.w	r0, r1, r4
    c32a:	4629      	mov	r1, r5
    c32c:	bd30      	pop	{r4, r5, pc}
    c32e:	f094 0f00 	teq	r4, #0
    c332:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c336:	bf06      	itte	eq
    c338:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c33c:	3401      	addeq	r4, #1
    c33e:	3d01      	subne	r5, #1
    c340:	e74e      	b.n	c1e0 <__adddf3+0x8c>
    c342:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c346:	bf18      	it	ne
    c348:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c34c:	d029      	beq.n	c3a2 <__adddf3+0x24e>
    c34e:	ea94 0f05 	teq	r4, r5
    c352:	bf08      	it	eq
    c354:	ea90 0f02 	teqeq	r0, r2
    c358:	d005      	beq.n	c366 <__adddf3+0x212>
    c35a:	ea54 0c00 	orrs.w	ip, r4, r0
    c35e:	bf04      	itt	eq
    c360:	4619      	moveq	r1, r3
    c362:	4610      	moveq	r0, r2
    c364:	bd30      	pop	{r4, r5, pc}
    c366:	ea91 0f03 	teq	r1, r3
    c36a:	bf1e      	ittt	ne
    c36c:	2100      	movne	r1, #0
    c36e:	2000      	movne	r0, #0
    c370:	bd30      	popne	{r4, r5, pc}
    c372:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c376:	d105      	bne.n	c384 <__adddf3+0x230>
    c378:	0040      	lsls	r0, r0, #1
    c37a:	4149      	adcs	r1, r1
    c37c:	bf28      	it	cs
    c37e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c382:	bd30      	pop	{r4, r5, pc}
    c384:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c388:	bf3c      	itt	cc
    c38a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c38e:	bd30      	popcc	{r4, r5, pc}
    c390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c394:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c398:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c39c:	f04f 0000 	mov.w	r0, #0
    c3a0:	bd30      	pop	{r4, r5, pc}
    c3a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c3a6:	bf1a      	itte	ne
    c3a8:	4619      	movne	r1, r3
    c3aa:	4610      	movne	r0, r2
    c3ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c3b0:	bf1c      	itt	ne
    c3b2:	460b      	movne	r3, r1
    c3b4:	4602      	movne	r2, r0
    c3b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c3ba:	bf06      	itte	eq
    c3bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c3c0:	ea91 0f03 	teqeq	r1, r3
    c3c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c3c8:	bd30      	pop	{r4, r5, pc}
    c3ca:	bf00      	nop

0000c3cc <__aeabi_ui2d>:
    c3cc:	f090 0f00 	teq	r0, #0
    c3d0:	bf04      	itt	eq
    c3d2:	2100      	moveq	r1, #0
    c3d4:	4770      	bxeq	lr
    c3d6:	b530      	push	{r4, r5, lr}
    c3d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c3dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c3e0:	f04f 0500 	mov.w	r5, #0
    c3e4:	f04f 0100 	mov.w	r1, #0
    c3e8:	e750      	b.n	c28c <__adddf3+0x138>
    c3ea:	bf00      	nop

0000c3ec <__aeabi_i2d>:
    c3ec:	f090 0f00 	teq	r0, #0
    c3f0:	bf04      	itt	eq
    c3f2:	2100      	moveq	r1, #0
    c3f4:	4770      	bxeq	lr
    c3f6:	b530      	push	{r4, r5, lr}
    c3f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c3fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c400:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c404:	bf48      	it	mi
    c406:	4240      	negmi	r0, r0
    c408:	f04f 0100 	mov.w	r1, #0
    c40c:	e73e      	b.n	c28c <__adddf3+0x138>
    c40e:	bf00      	nop

0000c410 <__aeabi_f2d>:
    c410:	0042      	lsls	r2, r0, #1
    c412:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c416:	ea4f 0131 	mov.w	r1, r1, rrx
    c41a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c41e:	bf1f      	itttt	ne
    c420:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c424:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c428:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c42c:	4770      	bxne	lr
    c42e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c432:	bf08      	it	eq
    c434:	4770      	bxeq	lr
    c436:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c43a:	bf04      	itt	eq
    c43c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c440:	4770      	bxeq	lr
    c442:	b530      	push	{r4, r5, lr}
    c444:	f44f 7460 	mov.w	r4, #896	; 0x380
    c448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c44c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c450:	e71c      	b.n	c28c <__adddf3+0x138>
    c452:	bf00      	nop

0000c454 <__aeabi_ul2d>:
    c454:	ea50 0201 	orrs.w	r2, r0, r1
    c458:	bf08      	it	eq
    c45a:	4770      	bxeq	lr
    c45c:	b530      	push	{r4, r5, lr}
    c45e:	f04f 0500 	mov.w	r5, #0
    c462:	e00a      	b.n	c47a <__aeabi_l2d+0x16>

0000c464 <__aeabi_l2d>:
    c464:	ea50 0201 	orrs.w	r2, r0, r1
    c468:	bf08      	it	eq
    c46a:	4770      	bxeq	lr
    c46c:	b530      	push	{r4, r5, lr}
    c46e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c472:	d502      	bpl.n	c47a <__aeabi_l2d+0x16>
    c474:	4240      	negs	r0, r0
    c476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c47a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c47e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c486:	f43f aed8 	beq.w	c23a <__adddf3+0xe6>
    c48a:	f04f 0203 	mov.w	r2, #3
    c48e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c492:	bf18      	it	ne
    c494:	3203      	addne	r2, #3
    c496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c49a:	bf18      	it	ne
    c49c:	3203      	addne	r2, #3
    c49e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c4a2:	f1c2 0320 	rsb	r3, r2, #32
    c4a6:	fa00 fc03 	lsl.w	ip, r0, r3
    c4aa:	fa20 f002 	lsr.w	r0, r0, r2
    c4ae:	fa01 fe03 	lsl.w	lr, r1, r3
    c4b2:	ea40 000e 	orr.w	r0, r0, lr
    c4b6:	fa21 f102 	lsr.w	r1, r1, r2
    c4ba:	4414      	add	r4, r2
    c4bc:	e6bd      	b.n	c23a <__adddf3+0xe6>
    c4be:	bf00      	nop

0000c4c0 <__aeabi_dmul>:
    c4c0:	b570      	push	{r4, r5, r6, lr}
    c4c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c4c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c4ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c4ce:	bf1d      	ittte	ne
    c4d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c4d4:	ea94 0f0c 	teqne	r4, ip
    c4d8:	ea95 0f0c 	teqne	r5, ip
    c4dc:	f000 f8de 	bleq	c69c <__aeabi_dmul+0x1dc>
    c4e0:	442c      	add	r4, r5
    c4e2:	ea81 0603 	eor.w	r6, r1, r3
    c4e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c4ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c4ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c4f2:	bf18      	it	ne
    c4f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c4f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c4fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c500:	d038      	beq.n	c574 <__aeabi_dmul+0xb4>
    c502:	fba0 ce02 	umull	ip, lr, r0, r2
    c506:	f04f 0500 	mov.w	r5, #0
    c50a:	fbe1 e502 	umlal	lr, r5, r1, r2
    c50e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c512:	fbe0 e503 	umlal	lr, r5, r0, r3
    c516:	f04f 0600 	mov.w	r6, #0
    c51a:	fbe1 5603 	umlal	r5, r6, r1, r3
    c51e:	f09c 0f00 	teq	ip, #0
    c522:	bf18      	it	ne
    c524:	f04e 0e01 	orrne.w	lr, lr, #1
    c528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c52c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c534:	d204      	bcs.n	c540 <__aeabi_dmul+0x80>
    c536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c53a:	416d      	adcs	r5, r5
    c53c:	eb46 0606 	adc.w	r6, r6, r6
    c540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c54c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c558:	bf88      	it	hi
    c55a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c55e:	d81e      	bhi.n	c59e <__aeabi_dmul+0xde>
    c560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c564:	bf08      	it	eq
    c566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c56a:	f150 0000 	adcs.w	r0, r0, #0
    c56e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c572:	bd70      	pop	{r4, r5, r6, pc}
    c574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c578:	ea46 0101 	orr.w	r1, r6, r1
    c57c:	ea40 0002 	orr.w	r0, r0, r2
    c580:	ea81 0103 	eor.w	r1, r1, r3
    c584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c588:	bfc2      	ittt	gt
    c58a:	ebd4 050c 	rsbsgt	r5, r4, ip
    c58e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c592:	bd70      	popgt	{r4, r5, r6, pc}
    c594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c598:	f04f 0e00 	mov.w	lr, #0
    c59c:	3c01      	subs	r4, #1
    c59e:	f300 80ab 	bgt.w	c6f8 <__aeabi_dmul+0x238>
    c5a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c5a6:	bfde      	ittt	le
    c5a8:	2000      	movle	r0, #0
    c5aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c5ae:	bd70      	pople	{r4, r5, r6, pc}
    c5b0:	f1c4 0400 	rsb	r4, r4, #0
    c5b4:	3c20      	subs	r4, #32
    c5b6:	da35      	bge.n	c624 <__aeabi_dmul+0x164>
    c5b8:	340c      	adds	r4, #12
    c5ba:	dc1b      	bgt.n	c5f4 <__aeabi_dmul+0x134>
    c5bc:	f104 0414 	add.w	r4, r4, #20
    c5c0:	f1c4 0520 	rsb	r5, r4, #32
    c5c4:	fa00 f305 	lsl.w	r3, r0, r5
    c5c8:	fa20 f004 	lsr.w	r0, r0, r4
    c5cc:	fa01 f205 	lsl.w	r2, r1, r5
    c5d0:	ea40 0002 	orr.w	r0, r0, r2
    c5d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c5d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c5dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c5e0:	fa21 f604 	lsr.w	r6, r1, r4
    c5e4:	eb42 0106 	adc.w	r1, r2, r6
    c5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c5ec:	bf08      	it	eq
    c5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c5f2:	bd70      	pop	{r4, r5, r6, pc}
    c5f4:	f1c4 040c 	rsb	r4, r4, #12
    c5f8:	f1c4 0520 	rsb	r5, r4, #32
    c5fc:	fa00 f304 	lsl.w	r3, r0, r4
    c600:	fa20 f005 	lsr.w	r0, r0, r5
    c604:	fa01 f204 	lsl.w	r2, r1, r4
    c608:	ea40 0002 	orr.w	r0, r0, r2
    c60c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c614:	f141 0100 	adc.w	r1, r1, #0
    c618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c61c:	bf08      	it	eq
    c61e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c622:	bd70      	pop	{r4, r5, r6, pc}
    c624:	f1c4 0520 	rsb	r5, r4, #32
    c628:	fa00 f205 	lsl.w	r2, r0, r5
    c62c:	ea4e 0e02 	orr.w	lr, lr, r2
    c630:	fa20 f304 	lsr.w	r3, r0, r4
    c634:	fa01 f205 	lsl.w	r2, r1, r5
    c638:	ea43 0302 	orr.w	r3, r3, r2
    c63c:	fa21 f004 	lsr.w	r0, r1, r4
    c640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c644:	fa21 f204 	lsr.w	r2, r1, r4
    c648:	ea20 0002 	bic.w	r0, r0, r2
    c64c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c654:	bf08      	it	eq
    c656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c65a:	bd70      	pop	{r4, r5, r6, pc}
    c65c:	f094 0f00 	teq	r4, #0
    c660:	d10f      	bne.n	c682 <__aeabi_dmul+0x1c2>
    c662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c666:	0040      	lsls	r0, r0, #1
    c668:	eb41 0101 	adc.w	r1, r1, r1
    c66c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c670:	bf08      	it	eq
    c672:	3c01      	subeq	r4, #1
    c674:	d0f7      	beq.n	c666 <__aeabi_dmul+0x1a6>
    c676:	ea41 0106 	orr.w	r1, r1, r6
    c67a:	f095 0f00 	teq	r5, #0
    c67e:	bf18      	it	ne
    c680:	4770      	bxne	lr
    c682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c686:	0052      	lsls	r2, r2, #1
    c688:	eb43 0303 	adc.w	r3, r3, r3
    c68c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c690:	bf08      	it	eq
    c692:	3d01      	subeq	r5, #1
    c694:	d0f7      	beq.n	c686 <__aeabi_dmul+0x1c6>
    c696:	ea43 0306 	orr.w	r3, r3, r6
    c69a:	4770      	bx	lr
    c69c:	ea94 0f0c 	teq	r4, ip
    c6a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c6a4:	bf18      	it	ne
    c6a6:	ea95 0f0c 	teqne	r5, ip
    c6aa:	d00c      	beq.n	c6c6 <__aeabi_dmul+0x206>
    c6ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c6b0:	bf18      	it	ne
    c6b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c6b6:	d1d1      	bne.n	c65c <__aeabi_dmul+0x19c>
    c6b8:	ea81 0103 	eor.w	r1, r1, r3
    c6bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c6c0:	f04f 0000 	mov.w	r0, #0
    c6c4:	bd70      	pop	{r4, r5, r6, pc}
    c6c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c6ca:	bf06      	itte	eq
    c6cc:	4610      	moveq	r0, r2
    c6ce:	4619      	moveq	r1, r3
    c6d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c6d4:	d019      	beq.n	c70a <__aeabi_dmul+0x24a>
    c6d6:	ea94 0f0c 	teq	r4, ip
    c6da:	d102      	bne.n	c6e2 <__aeabi_dmul+0x222>
    c6dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c6e0:	d113      	bne.n	c70a <__aeabi_dmul+0x24a>
    c6e2:	ea95 0f0c 	teq	r5, ip
    c6e6:	d105      	bne.n	c6f4 <__aeabi_dmul+0x234>
    c6e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c6ec:	bf1c      	itt	ne
    c6ee:	4610      	movne	r0, r2
    c6f0:	4619      	movne	r1, r3
    c6f2:	d10a      	bne.n	c70a <__aeabi_dmul+0x24a>
    c6f4:	ea81 0103 	eor.w	r1, r1, r3
    c6f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c6fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c704:	f04f 0000 	mov.w	r0, #0
    c708:	bd70      	pop	{r4, r5, r6, pc}
    c70a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c70e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c712:	bd70      	pop	{r4, r5, r6, pc}

0000c714 <__aeabi_ddiv>:
    c714:	b570      	push	{r4, r5, r6, lr}
    c716:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c71a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c71e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c722:	bf1d      	ittte	ne
    c724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c728:	ea94 0f0c 	teqne	r4, ip
    c72c:	ea95 0f0c 	teqne	r5, ip
    c730:	f000 f8a7 	bleq	c882 <__aeabi_ddiv+0x16e>
    c734:	eba4 0405 	sub.w	r4, r4, r5
    c738:	ea81 0e03 	eor.w	lr, r1, r3
    c73c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c740:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c744:	f000 8088 	beq.w	c858 <__aeabi_ddiv+0x144>
    c748:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c74c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c758:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c75c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c764:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c76c:	429d      	cmp	r5, r3
    c76e:	bf08      	it	eq
    c770:	4296      	cmpeq	r6, r2
    c772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c776:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c77a:	d202      	bcs.n	c782 <__aeabi_ddiv+0x6e>
    c77c:	085b      	lsrs	r3, r3, #1
    c77e:	ea4f 0232 	mov.w	r2, r2, rrx
    c782:	1ab6      	subs	r6, r6, r2
    c784:	eb65 0503 	sbc.w	r5, r5, r3
    c788:	085b      	lsrs	r3, r3, #1
    c78a:	ea4f 0232 	mov.w	r2, r2, rrx
    c78e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c796:	ebb6 0e02 	subs.w	lr, r6, r2
    c79a:	eb75 0e03 	sbcs.w	lr, r5, r3
    c79e:	bf22      	ittt	cs
    c7a0:	1ab6      	subcs	r6, r6, r2
    c7a2:	4675      	movcs	r5, lr
    c7a4:	ea40 000c 	orrcs.w	r0, r0, ip
    c7a8:	085b      	lsrs	r3, r3, #1
    c7aa:	ea4f 0232 	mov.w	r2, r2, rrx
    c7ae:	ebb6 0e02 	subs.w	lr, r6, r2
    c7b2:	eb75 0e03 	sbcs.w	lr, r5, r3
    c7b6:	bf22      	ittt	cs
    c7b8:	1ab6      	subcs	r6, r6, r2
    c7ba:	4675      	movcs	r5, lr
    c7bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c7c0:	085b      	lsrs	r3, r3, #1
    c7c2:	ea4f 0232 	mov.w	r2, r2, rrx
    c7c6:	ebb6 0e02 	subs.w	lr, r6, r2
    c7ca:	eb75 0e03 	sbcs.w	lr, r5, r3
    c7ce:	bf22      	ittt	cs
    c7d0:	1ab6      	subcs	r6, r6, r2
    c7d2:	4675      	movcs	r5, lr
    c7d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c7d8:	085b      	lsrs	r3, r3, #1
    c7da:	ea4f 0232 	mov.w	r2, r2, rrx
    c7de:	ebb6 0e02 	subs.w	lr, r6, r2
    c7e2:	eb75 0e03 	sbcs.w	lr, r5, r3
    c7e6:	bf22      	ittt	cs
    c7e8:	1ab6      	subcs	r6, r6, r2
    c7ea:	4675      	movcs	r5, lr
    c7ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c7f0:	ea55 0e06 	orrs.w	lr, r5, r6
    c7f4:	d018      	beq.n	c828 <__aeabi_ddiv+0x114>
    c7f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c7fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c7fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c80a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c80e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c812:	d1c0      	bne.n	c796 <__aeabi_ddiv+0x82>
    c814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c818:	d10b      	bne.n	c832 <__aeabi_ddiv+0x11e>
    c81a:	ea41 0100 	orr.w	r1, r1, r0
    c81e:	f04f 0000 	mov.w	r0, #0
    c822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c826:	e7b6      	b.n	c796 <__aeabi_ddiv+0x82>
    c828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c82c:	bf04      	itt	eq
    c82e:	4301      	orreq	r1, r0
    c830:	2000      	moveq	r0, #0
    c832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c836:	bf88      	it	hi
    c838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c83c:	f63f aeaf 	bhi.w	c59e <__aeabi_dmul+0xde>
    c840:	ebb5 0c03 	subs.w	ip, r5, r3
    c844:	bf04      	itt	eq
    c846:	ebb6 0c02 	subseq.w	ip, r6, r2
    c84a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c84e:	f150 0000 	adcs.w	r0, r0, #0
    c852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c856:	bd70      	pop	{r4, r5, r6, pc}
    c858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    c85c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    c860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    c864:	bfc2      	ittt	gt
    c866:	ebd4 050c 	rsbsgt	r5, r4, ip
    c86a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c86e:	bd70      	popgt	{r4, r5, r6, pc}
    c870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c874:	f04f 0e00 	mov.w	lr, #0
    c878:	3c01      	subs	r4, #1
    c87a:	e690      	b.n	c59e <__aeabi_dmul+0xde>
    c87c:	ea45 0e06 	orr.w	lr, r5, r6
    c880:	e68d      	b.n	c59e <__aeabi_dmul+0xde>
    c882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c886:	ea94 0f0c 	teq	r4, ip
    c88a:	bf08      	it	eq
    c88c:	ea95 0f0c 	teqeq	r5, ip
    c890:	f43f af3b 	beq.w	c70a <__aeabi_dmul+0x24a>
    c894:	ea94 0f0c 	teq	r4, ip
    c898:	d10a      	bne.n	c8b0 <__aeabi_ddiv+0x19c>
    c89a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c89e:	f47f af34 	bne.w	c70a <__aeabi_dmul+0x24a>
    c8a2:	ea95 0f0c 	teq	r5, ip
    c8a6:	f47f af25 	bne.w	c6f4 <__aeabi_dmul+0x234>
    c8aa:	4610      	mov	r0, r2
    c8ac:	4619      	mov	r1, r3
    c8ae:	e72c      	b.n	c70a <__aeabi_dmul+0x24a>
    c8b0:	ea95 0f0c 	teq	r5, ip
    c8b4:	d106      	bne.n	c8c4 <__aeabi_ddiv+0x1b0>
    c8b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c8ba:	f43f aefd 	beq.w	c6b8 <__aeabi_dmul+0x1f8>
    c8be:	4610      	mov	r0, r2
    c8c0:	4619      	mov	r1, r3
    c8c2:	e722      	b.n	c70a <__aeabi_dmul+0x24a>
    c8c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c8c8:	bf18      	it	ne
    c8ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c8ce:	f47f aec5 	bne.w	c65c <__aeabi_dmul+0x19c>
    c8d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    c8d6:	f47f af0d 	bne.w	c6f4 <__aeabi_dmul+0x234>
    c8da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    c8de:	f47f aeeb 	bne.w	c6b8 <__aeabi_dmul+0x1f8>
    c8e2:	e712      	b.n	c70a <__aeabi_dmul+0x24a>

0000c8e4 <__gedf2>:
    c8e4:	f04f 3cff 	mov.w	ip, #4294967295
    c8e8:	e006      	b.n	c8f8 <__cmpdf2+0x4>
    c8ea:	bf00      	nop

0000c8ec <__ledf2>:
    c8ec:	f04f 0c01 	mov.w	ip, #1
    c8f0:	e002      	b.n	c8f8 <__cmpdf2+0x4>
    c8f2:	bf00      	nop

0000c8f4 <__cmpdf2>:
    c8f4:	f04f 0c01 	mov.w	ip, #1
    c8f8:	f84d cd04 	str.w	ip, [sp, #-4]!
    c8fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c908:	bf18      	it	ne
    c90a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    c90e:	d01b      	beq.n	c948 <__cmpdf2+0x54>
    c910:	b001      	add	sp, #4
    c912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    c916:	bf0c      	ite	eq
    c918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    c91c:	ea91 0f03 	teqne	r1, r3
    c920:	bf02      	ittt	eq
    c922:	ea90 0f02 	teqeq	r0, r2
    c926:	2000      	moveq	r0, #0
    c928:	4770      	bxeq	lr
    c92a:	f110 0f00 	cmn.w	r0, #0
    c92e:	ea91 0f03 	teq	r1, r3
    c932:	bf58      	it	pl
    c934:	4299      	cmppl	r1, r3
    c936:	bf08      	it	eq
    c938:	4290      	cmpeq	r0, r2
    c93a:	bf2c      	ite	cs
    c93c:	17d8      	asrcs	r0, r3, #31
    c93e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    c942:	f040 0001 	orr.w	r0, r0, #1
    c946:	4770      	bx	lr
    c948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c94c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c950:	d102      	bne.n	c958 <__cmpdf2+0x64>
    c952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    c956:	d107      	bne.n	c968 <__cmpdf2+0x74>
    c958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c95c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c960:	d1d6      	bne.n	c910 <__cmpdf2+0x1c>
    c962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    c966:	d0d3      	beq.n	c910 <__cmpdf2+0x1c>
    c968:	f85d 0b04 	ldr.w	r0, [sp], #4
    c96c:	4770      	bx	lr
    c96e:	bf00      	nop

0000c970 <__aeabi_cdrcmple>:
    c970:	4684      	mov	ip, r0
    c972:	4610      	mov	r0, r2
    c974:	4662      	mov	r2, ip
    c976:	468c      	mov	ip, r1
    c978:	4619      	mov	r1, r3
    c97a:	4663      	mov	r3, ip
    c97c:	e000      	b.n	c980 <__aeabi_cdcmpeq>
    c97e:	bf00      	nop

0000c980 <__aeabi_cdcmpeq>:
    c980:	b501      	push	{r0, lr}
    c982:	f7ff ffb7 	bl	c8f4 <__cmpdf2>
    c986:	2800      	cmp	r0, #0
    c988:	bf48      	it	mi
    c98a:	f110 0f00 	cmnmi.w	r0, #0
    c98e:	bd01      	pop	{r0, pc}

0000c990 <__aeabi_dcmpeq>:
    c990:	f84d ed08 	str.w	lr, [sp, #-8]!
    c994:	f7ff fff4 	bl	c980 <__aeabi_cdcmpeq>
    c998:	bf0c      	ite	eq
    c99a:	2001      	moveq	r0, #1
    c99c:	2000      	movne	r0, #0
    c99e:	f85d fb08 	ldr.w	pc, [sp], #8
    c9a2:	bf00      	nop

0000c9a4 <__aeabi_dcmplt>:
    c9a4:	f84d ed08 	str.w	lr, [sp, #-8]!
    c9a8:	f7ff ffea 	bl	c980 <__aeabi_cdcmpeq>
    c9ac:	bf34      	ite	cc
    c9ae:	2001      	movcc	r0, #1
    c9b0:	2000      	movcs	r0, #0
    c9b2:	f85d fb08 	ldr.w	pc, [sp], #8
    c9b6:	bf00      	nop

0000c9b8 <__aeabi_dcmple>:
    c9b8:	f84d ed08 	str.w	lr, [sp, #-8]!
    c9bc:	f7ff ffe0 	bl	c980 <__aeabi_cdcmpeq>
    c9c0:	bf94      	ite	ls
    c9c2:	2001      	movls	r0, #1
    c9c4:	2000      	movhi	r0, #0
    c9c6:	f85d fb08 	ldr.w	pc, [sp], #8
    c9ca:	bf00      	nop

0000c9cc <__aeabi_dcmpge>:
    c9cc:	f84d ed08 	str.w	lr, [sp, #-8]!
    c9d0:	f7ff ffce 	bl	c970 <__aeabi_cdrcmple>
    c9d4:	bf94      	ite	ls
    c9d6:	2001      	movls	r0, #1
    c9d8:	2000      	movhi	r0, #0
    c9da:	f85d fb08 	ldr.w	pc, [sp], #8
    c9de:	bf00      	nop

0000c9e0 <__aeabi_dcmpgt>:
    c9e0:	f84d ed08 	str.w	lr, [sp, #-8]!
    c9e4:	f7ff ffc4 	bl	c970 <__aeabi_cdrcmple>
    c9e8:	bf34      	ite	cc
    c9ea:	2001      	movcc	r0, #1
    c9ec:	2000      	movcs	r0, #0
    c9ee:	f85d fb08 	ldr.w	pc, [sp], #8
    c9f2:	bf00      	nop

0000c9f4 <__aeabi_d2iz>:
    c9f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c9f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c9fc:	d215      	bcs.n	ca2a <__aeabi_d2iz+0x36>
    c9fe:	d511      	bpl.n	ca24 <__aeabi_d2iz+0x30>
    ca00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    ca04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    ca08:	d912      	bls.n	ca30 <__aeabi_d2iz+0x3c>
    ca0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    ca0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ca12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    ca16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    ca1a:	fa23 f002 	lsr.w	r0, r3, r2
    ca1e:	bf18      	it	ne
    ca20:	4240      	negne	r0, r0
    ca22:	4770      	bx	lr
    ca24:	f04f 0000 	mov.w	r0, #0
    ca28:	4770      	bx	lr
    ca2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    ca2e:	d105      	bne.n	ca3c <__aeabi_d2iz+0x48>
    ca30:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    ca34:	bf08      	it	eq
    ca36:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    ca3a:	4770      	bx	lr
    ca3c:	f04f 0000 	mov.w	r0, #0
    ca40:	4770      	bx	lr
    ca42:	bf00      	nop

0000ca44 <__aeabi_ldivmod>:
    ca44:	b97b      	cbnz	r3, ca66 <__aeabi_ldivmod+0x22>
    ca46:	b972      	cbnz	r2, ca66 <__aeabi_ldivmod+0x22>
    ca48:	2900      	cmp	r1, #0
    ca4a:	bfbe      	ittt	lt
    ca4c:	2000      	movlt	r0, #0
    ca4e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    ca52:	e006      	blt.n	ca62 <__aeabi_ldivmod+0x1e>
    ca54:	bf08      	it	eq
    ca56:	2800      	cmpeq	r0, #0
    ca58:	bf1c      	itt	ne
    ca5a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    ca5e:	f04f 30ff 	movne.w	r0, #4294967295
    ca62:	f000 b9c7 	b.w	cdf4 <__aeabi_idiv0>
    ca66:	f1ad 0c08 	sub.w	ip, sp, #8
    ca6a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    ca6e:	2900      	cmp	r1, #0
    ca70:	db09      	blt.n	ca86 <__aeabi_ldivmod+0x42>
    ca72:	2b00      	cmp	r3, #0
    ca74:	db1a      	blt.n	caac <__aeabi_ldivmod+0x68>
    ca76:	f000 f84d 	bl	cb14 <__udivmoddi4>
    ca7a:	f8dd e004 	ldr.w	lr, [sp, #4]
    ca7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ca82:	b004      	add	sp, #16
    ca84:	4770      	bx	lr
    ca86:	4240      	negs	r0, r0
    ca88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ca8c:	2b00      	cmp	r3, #0
    ca8e:	db1b      	blt.n	cac8 <__aeabi_ldivmod+0x84>
    ca90:	f000 f840 	bl	cb14 <__udivmoddi4>
    ca94:	f8dd e004 	ldr.w	lr, [sp, #4]
    ca98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ca9c:	b004      	add	sp, #16
    ca9e:	4240      	negs	r0, r0
    caa0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    caa4:	4252      	negs	r2, r2
    caa6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    caaa:	4770      	bx	lr
    caac:	4252      	negs	r2, r2
    caae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cab2:	f000 f82f 	bl	cb14 <__udivmoddi4>
    cab6:	f8dd e004 	ldr.w	lr, [sp, #4]
    caba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cabe:	b004      	add	sp, #16
    cac0:	4240      	negs	r0, r0
    cac2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cac6:	4770      	bx	lr
    cac8:	4252      	negs	r2, r2
    caca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cace:	f000 f821 	bl	cb14 <__udivmoddi4>
    cad2:	f8dd e004 	ldr.w	lr, [sp, #4]
    cad6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cada:	b004      	add	sp, #16
    cadc:	4252      	negs	r2, r2
    cade:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cae2:	4770      	bx	lr

0000cae4 <__aeabi_uldivmod>:
    cae4:	b953      	cbnz	r3, cafc <__aeabi_uldivmod+0x18>
    cae6:	b94a      	cbnz	r2, cafc <__aeabi_uldivmod+0x18>
    cae8:	2900      	cmp	r1, #0
    caea:	bf08      	it	eq
    caec:	2800      	cmpeq	r0, #0
    caee:	bf1c      	itt	ne
    caf0:	f04f 31ff 	movne.w	r1, #4294967295
    caf4:	f04f 30ff 	movne.w	r0, #4294967295
    caf8:	f000 b97c 	b.w	cdf4 <__aeabi_idiv0>
    cafc:	f1ad 0c08 	sub.w	ip, sp, #8
    cb00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    cb04:	f000 f806 	bl	cb14 <__udivmoddi4>
    cb08:	f8dd e004 	ldr.w	lr, [sp, #4]
    cb0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cb10:	b004      	add	sp, #16
    cb12:	4770      	bx	lr

0000cb14 <__udivmoddi4>:
    cb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb18:	468c      	mov	ip, r1
    cb1a:	9d08      	ldr	r5, [sp, #32]
    cb1c:	4604      	mov	r4, r0
    cb1e:	468a      	mov	sl, r1
    cb20:	2b00      	cmp	r3, #0
    cb22:	d14a      	bne.n	cbba <__udivmoddi4+0xa6>
    cb24:	428a      	cmp	r2, r1
    cb26:	4617      	mov	r7, r2
    cb28:	d962      	bls.n	cbf0 <__udivmoddi4+0xdc>
    cb2a:	fab2 f682 	clz	r6, r2
    cb2e:	b14e      	cbz	r6, cb44 <__udivmoddi4+0x30>
    cb30:	f1c6 0e20 	rsb	lr, r6, #32
    cb34:	fa01 f306 	lsl.w	r3, r1, r6
    cb38:	40b7      	lsls	r7, r6
    cb3a:	40b4      	lsls	r4, r6
    cb3c:	fa20 fe0e 	lsr.w	lr, r0, lr
    cb40:	ea4e 0a03 	orr.w	sl, lr, r3
    cb44:	ea4f 4817 	mov.w	r8, r7, lsr #16
    cb48:	0c23      	lsrs	r3, r4, #16
    cb4a:	fa1f f987 	uxth.w	r9, r7
    cb4e:	fbba fef8 	udiv	lr, sl, r8
    cb52:	fb08 aa1e 	mls	sl, r8, lr, sl
    cb56:	fb0e f209 	mul.w	r2, lr, r9
    cb5a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
    cb5e:	429a      	cmp	r2, r3
    cb60:	d90b      	bls.n	cb7a <__udivmoddi4+0x66>
    cb62:	18fb      	adds	r3, r7, r3
    cb64:	f10e 31ff 	add.w	r1, lr, #4294967295
    cb68:	bf2c      	ite	cs
    cb6a:	2001      	movcs	r0, #1
    cb6c:	2000      	movcc	r0, #0
    cb6e:	429a      	cmp	r2, r3
    cb70:	d902      	bls.n	cb78 <__udivmoddi4+0x64>
    cb72:	2800      	cmp	r0, #0
    cb74:	f000 812a 	beq.w	cdcc <__udivmoddi4+0x2b8>
    cb78:	468e      	mov	lr, r1
    cb7a:	1a9a      	subs	r2, r3, r2
    cb7c:	b2a3      	uxth	r3, r4
    cb7e:	fbb2 f0f8 	udiv	r0, r2, r8
    cb82:	fb08 2210 	mls	r2, r8, r0, r2
    cb86:	fb00 f909 	mul.w	r9, r0, r9
    cb8a:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
    cb8e:	45a1      	cmp	r9, r4
    cb90:	d907      	bls.n	cba2 <__udivmoddi4+0x8e>
    cb92:	193c      	adds	r4, r7, r4
    cb94:	f100 33ff 	add.w	r3, r0, #4294967295
    cb98:	d202      	bcs.n	cba0 <__udivmoddi4+0x8c>
    cb9a:	45a1      	cmp	r9, r4
    cb9c:	f200 8110 	bhi.w	cdc0 <__udivmoddi4+0x2ac>
    cba0:	4618      	mov	r0, r3
    cba2:	eba4 0409 	sub.w	r4, r4, r9
    cba6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    cbaa:	2100      	movs	r1, #0
    cbac:	b11d      	cbz	r5, cbb6 <__udivmoddi4+0xa2>
    cbae:	40f4      	lsrs	r4, r6
    cbb0:	2300      	movs	r3, #0
    cbb2:	e9c5 4300 	strd	r4, r3, [r5]
    cbb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cbba:	428b      	cmp	r3, r1
    cbbc:	d908      	bls.n	cbd0 <__udivmoddi4+0xbc>
    cbbe:	2d00      	cmp	r5, #0
    cbc0:	f000 80f2 	beq.w	cda8 <__udivmoddi4+0x294>
    cbc4:	2100      	movs	r1, #0
    cbc6:	e9c5 0c00 	strd	r0, ip, [r5]
    cbca:	4608      	mov	r0, r1
    cbcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cbd0:	fab3 f183 	clz	r1, r3
    cbd4:	2900      	cmp	r1, #0
    cbd6:	d14e      	bne.n	cc76 <__udivmoddi4+0x162>
    cbd8:	4563      	cmp	r3, ip
    cbda:	f0c0 80e8 	bcc.w	cdae <__udivmoddi4+0x29a>
    cbde:	4282      	cmp	r2, r0
    cbe0:	f240 80e5 	bls.w	cdae <__udivmoddi4+0x29a>
    cbe4:	4608      	mov	r0, r1
    cbe6:	2d00      	cmp	r5, #0
    cbe8:	d0e5      	beq.n	cbb6 <__udivmoddi4+0xa2>
    cbea:	e9c5 4a00 	strd	r4, sl, [r5]
    cbee:	e7e2      	b.n	cbb6 <__udivmoddi4+0xa2>
    cbf0:	b902      	cbnz	r2, cbf4 <__udivmoddi4+0xe0>
    cbf2:	deff      	udf	#255	; 0xff
    cbf4:	fab2 f682 	clz	r6, r2
    cbf8:	2e00      	cmp	r6, #0
    cbfa:	f040 8099 	bne.w	cd30 <__udivmoddi4+0x21c>
    cbfe:	1a8b      	subs	r3, r1, r2
    cc00:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    cc04:	fa1f f882 	uxth.w	r8, r2
    cc08:	2101      	movs	r1, #1
    cc0a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    cc0e:	fbb3 f2fe 	udiv	r2, r3, lr
    cc12:	fb0e 3012 	mls	r0, lr, r2, r3
    cc16:	fb08 f902 	mul.w	r9, r8, r2
    cc1a:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
    cc1e:	45e1      	cmp	r9, ip
    cc20:	d908      	bls.n	cc34 <__udivmoddi4+0x120>
    cc22:	eb17 0c0c 	adds.w	ip, r7, ip
    cc26:	f102 33ff 	add.w	r3, r2, #4294967295
    cc2a:	d202      	bcs.n	cc32 <__udivmoddi4+0x11e>
    cc2c:	45e1      	cmp	r9, ip
    cc2e:	f200 80ca 	bhi.w	cdc6 <__udivmoddi4+0x2b2>
    cc32:	461a      	mov	r2, r3
    cc34:	ebac 0c09 	sub.w	ip, ip, r9
    cc38:	b2a3      	uxth	r3, r4
    cc3a:	fbbc f0fe 	udiv	r0, ip, lr
    cc3e:	fb0e cc10 	mls	ip, lr, r0, ip
    cc42:	fb08 f800 	mul.w	r8, r8, r0
    cc46:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
    cc4a:	45a0      	cmp	r8, r4
    cc4c:	d90e      	bls.n	cc6c <__udivmoddi4+0x158>
    cc4e:	193c      	adds	r4, r7, r4
    cc50:	f100 33ff 	add.w	r3, r0, #4294967295
    cc54:	bf2c      	ite	cs
    cc56:	f04f 0c01 	movcs.w	ip, #1
    cc5a:	f04f 0c00 	movcc.w	ip, #0
    cc5e:	45a0      	cmp	r8, r4
    cc60:	d903      	bls.n	cc6a <__udivmoddi4+0x156>
    cc62:	f1bc 0f00 	cmp.w	ip, #0
    cc66:	f000 80a8 	beq.w	cdba <__udivmoddi4+0x2a6>
    cc6a:	4618      	mov	r0, r3
    cc6c:	eba4 0408 	sub.w	r4, r4, r8
    cc70:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    cc74:	e79a      	b.n	cbac <__udivmoddi4+0x98>
    cc76:	f1c1 0420 	rsb	r4, r1, #32
    cc7a:	408b      	lsls	r3, r1
    cc7c:	fa02 fe01 	lsl.w	lr, r2, r1
    cc80:	fa0c f601 	lsl.w	r6, ip, r1
    cc84:	40e2      	lsrs	r2, r4
    cc86:	fa20 f704 	lsr.w	r7, r0, r4
    cc8a:	fa2c fc04 	lsr.w	ip, ip, r4
    cc8e:	fa00 f801 	lsl.w	r8, r0, r1
    cc92:	4313      	orrs	r3, r2
    cc94:	433e      	orrs	r6, r7
    cc96:	0c1f      	lsrs	r7, r3, #16
    cc98:	0c32      	lsrs	r2, r6, #16
    cc9a:	fa1f f983 	uxth.w	r9, r3
    cc9e:	fbbc f0f7 	udiv	r0, ip, r7
    cca2:	fb07 cc10 	mls	ip, r7, r0, ip
    cca6:	fb00 fa09 	mul.w	sl, r0, r9
    ccaa:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    ccae:	45e2      	cmp	sl, ip
    ccb0:	d908      	bls.n	ccc4 <__udivmoddi4+0x1b0>
    ccb2:	eb13 0c0c 	adds.w	ip, r3, ip
    ccb6:	f100 32ff 	add.w	r2, r0, #4294967295
    ccba:	d202      	bcs.n	ccc2 <__udivmoddi4+0x1ae>
    ccbc:	45e2      	cmp	sl, ip
    ccbe:	f200 8089 	bhi.w	cdd4 <__udivmoddi4+0x2c0>
    ccc2:	4610      	mov	r0, r2
    ccc4:	ebac 0c0a 	sub.w	ip, ip, sl
    ccc8:	b2b6      	uxth	r6, r6
    ccca:	fbbc faf7 	udiv	sl, ip, r7
    ccce:	fb07 cc1a 	mls	ip, r7, sl, ip
    ccd2:	fb0a f909 	mul.w	r9, sl, r9
    ccd6:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
    ccda:	4591      	cmp	r9, r2
    ccdc:	d906      	bls.n	ccec <__udivmoddi4+0x1d8>
    ccde:	189a      	adds	r2, r3, r2
    cce0:	f10a 36ff 	add.w	r6, sl, #4294967295
    cce4:	d201      	bcs.n	ccea <__udivmoddi4+0x1d6>
    cce6:	4591      	cmp	r9, r2
    cce8:	d87a      	bhi.n	cde0 <__udivmoddi4+0x2cc>
    ccea:	46b2      	mov	sl, r6
    ccec:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
    ccf0:	eba2 0209 	sub.w	r2, r2, r9
    ccf4:	fba0 670e 	umull	r6, r7, r0, lr
    ccf8:	42ba      	cmp	r2, r7
    ccfa:	46b4      	mov	ip, r6
    ccfc:	46b9      	mov	r9, r7
    ccfe:	d302      	bcc.n	cd06 <__udivmoddi4+0x1f2>
    cd00:	d107      	bne.n	cd12 <__udivmoddi4+0x1fe>
    cd02:	45b0      	cmp	r8, r6
    cd04:	d205      	bcs.n	cd12 <__udivmoddi4+0x1fe>
    cd06:	ebb6 0c0e 	subs.w	ip, r6, lr
    cd0a:	eb67 0303 	sbc.w	r3, r7, r3
    cd0e:	3801      	subs	r0, #1
    cd10:	4699      	mov	r9, r3
    cd12:	2d00      	cmp	r5, #0
    cd14:	d06b      	beq.n	cdee <__udivmoddi4+0x2da>
    cd16:	ebb8 030c 	subs.w	r3, r8, ip
    cd1a:	eb62 0209 	sbc.w	r2, r2, r9
    cd1e:	fa02 f404 	lsl.w	r4, r2, r4
    cd22:	40cb      	lsrs	r3, r1
    cd24:	40ca      	lsrs	r2, r1
    cd26:	2100      	movs	r1, #0
    cd28:	431c      	orrs	r4, r3
    cd2a:	e9c5 4200 	strd	r4, r2, [r5]
    cd2e:	e742      	b.n	cbb6 <__udivmoddi4+0xa2>
    cd30:	40b7      	lsls	r7, r6
    cd32:	f1c6 0220 	rsb	r2, r6, #32
    cd36:	fa01 f306 	lsl.w	r3, r1, r6
    cd3a:	40b4      	lsls	r4, r6
    cd3c:	fa21 fc02 	lsr.w	ip, r1, r2
    cd40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    cd44:	fa20 f202 	lsr.w	r2, r0, r2
    cd48:	fa1f f887 	uxth.w	r8, r7
    cd4c:	fbbc f1fe 	udiv	r1, ip, lr
    cd50:	431a      	orrs	r2, r3
    cd52:	fb0e cc11 	mls	ip, lr, r1, ip
    cd56:	fb01 f008 	mul.w	r0, r1, r8
    cd5a:	0c13      	lsrs	r3, r2, #16
    cd5c:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
    cd60:	4560      	cmp	r0, ip
    cd62:	d907      	bls.n	cd74 <__udivmoddi4+0x260>
    cd64:	eb17 0c0c 	adds.w	ip, r7, ip
    cd68:	f101 33ff 	add.w	r3, r1, #4294967295
    cd6c:	d201      	bcs.n	cd72 <__udivmoddi4+0x25e>
    cd6e:	4560      	cmp	r0, ip
    cd70:	d833      	bhi.n	cdda <__udivmoddi4+0x2c6>
    cd72:	4619      	mov	r1, r3
    cd74:	ebac 0c00 	sub.w	ip, ip, r0
    cd78:	b292      	uxth	r2, r2
    cd7a:	fbbc f0fe 	udiv	r0, ip, lr
    cd7e:	fb0e cc10 	mls	ip, lr, r0, ip
    cd82:	fb00 f308 	mul.w	r3, r0, r8
    cd86:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    cd8a:	4563      	cmp	r3, ip
    cd8c:	d907      	bls.n	cd9e <__udivmoddi4+0x28a>
    cd8e:	eb17 0c0c 	adds.w	ip, r7, ip
    cd92:	f100 32ff 	add.w	r2, r0, #4294967295
    cd96:	d201      	bcs.n	cd9c <__udivmoddi4+0x288>
    cd98:	4563      	cmp	r3, ip
    cd9a:	d825      	bhi.n	cde8 <__udivmoddi4+0x2d4>
    cd9c:	4610      	mov	r0, r2
    cd9e:	ebac 0303 	sub.w	r3, ip, r3
    cda2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    cda6:	e730      	b.n	cc0a <__udivmoddi4+0xf6>
    cda8:	4629      	mov	r1, r5
    cdaa:	4628      	mov	r0, r5
    cdac:	e703      	b.n	cbb6 <__udivmoddi4+0xa2>
    cdae:	1a84      	subs	r4, r0, r2
    cdb0:	eb6c 0303 	sbc.w	r3, ip, r3
    cdb4:	2001      	movs	r0, #1
    cdb6:	469a      	mov	sl, r3
    cdb8:	e715      	b.n	cbe6 <__udivmoddi4+0xd2>
    cdba:	3802      	subs	r0, #2
    cdbc:	443c      	add	r4, r7
    cdbe:	e755      	b.n	cc6c <__udivmoddi4+0x158>
    cdc0:	3802      	subs	r0, #2
    cdc2:	443c      	add	r4, r7
    cdc4:	e6ed      	b.n	cba2 <__udivmoddi4+0x8e>
    cdc6:	3a02      	subs	r2, #2
    cdc8:	44bc      	add	ip, r7
    cdca:	e733      	b.n	cc34 <__udivmoddi4+0x120>
    cdcc:	f1ae 0e02 	sub.w	lr, lr, #2
    cdd0:	443b      	add	r3, r7
    cdd2:	e6d2      	b.n	cb7a <__udivmoddi4+0x66>
    cdd4:	3802      	subs	r0, #2
    cdd6:	449c      	add	ip, r3
    cdd8:	e774      	b.n	ccc4 <__udivmoddi4+0x1b0>
    cdda:	3902      	subs	r1, #2
    cddc:	44bc      	add	ip, r7
    cdde:	e7c9      	b.n	cd74 <__udivmoddi4+0x260>
    cde0:	f1aa 0a02 	sub.w	sl, sl, #2
    cde4:	441a      	add	r2, r3
    cde6:	e781      	b.n	ccec <__udivmoddi4+0x1d8>
    cde8:	3802      	subs	r0, #2
    cdea:	44bc      	add	ip, r7
    cdec:	e7d7      	b.n	cd9e <__udivmoddi4+0x28a>
    cdee:	4629      	mov	r1, r5
    cdf0:	e6e1      	b.n	cbb6 <__udivmoddi4+0xa2>
    cdf2:	bf00      	nop

0000cdf4 <__aeabi_idiv0>:
    cdf4:	4770      	bx	lr
    cdf6:	bf00      	nop

0000cdf8 <ocrypto_bigint_add128>:
    cdf8:	b470      	push	{r4, r5, r6}
    cdfa:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
    cdfe:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ce02:	185b      	adds	r3, r3, r1
    ce04:	eb54 040c 	adcs.w	r4, r4, ip
    ce08:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ce0c:	414d      	adcs	r5, r1
    ce0e:	eb56 060c 	adcs.w	r6, r6, ip
    ce12:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
    ce16:	4180      	sbcs	r0, r0
    ce18:	3001      	adds	r0, #1
    ce1a:	bc70      	pop	{r4, r5, r6}
    ce1c:	4770      	bx	lr

0000ce1e <ocrypto_bigint_sub128>:
    ce1e:	b470      	push	{r4, r5, r6}
    ce20:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
    ce24:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ce28:	1a5b      	subs	r3, r3, r1
    ce2a:	eb74 040c 	sbcs.w	r4, r4, ip
    ce2e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ce32:	418d      	sbcs	r5, r1
    ce34:	eb76 060c 	sbcs.w	r6, r6, ip
    ce38:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
    ce3c:	4180      	sbcs	r0, r0
    ce3e:	4240      	negs	r0, r0
    ce40:	bc70      	pop	{r4, r5, r6}
    ce42:	4770      	bx	lr

0000ce44 <ocrypto_bigint_add256>:
    ce44:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    ce48:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    ce4c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ce50:	185b      	adds	r3, r3, r1
    ce52:	eb54 040c 	adcs.w	r4, r4, ip
    ce56:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ce5a:	414d      	adcs	r5, r1
    ce5c:	eb56 060c 	adcs.w	r6, r6, ip
    ce60:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ce64:	414f      	adcs	r7, r1
    ce66:	eb58 080c 	adcs.w	r8, r8, ip
    ce6a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ce6e:	eb59 0901 	adcs.w	r9, r9, r1
    ce72:	eb5a 0a0c 	adcs.w	sl, sl, ip
    ce76:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    ce7a:	4180      	sbcs	r0, r0
    ce7c:	3001      	adds	r0, #1
    ce7e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    ce82:	4770      	bx	lr

0000ce84 <ocrypto_bigint_sub256>:
    ce84:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    ce88:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    ce8c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ce90:	1a5b      	subs	r3, r3, r1
    ce92:	eb74 040c 	sbcs.w	r4, r4, ip
    ce96:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ce9a:	418d      	sbcs	r5, r1
    ce9c:	eb76 060c 	sbcs.w	r6, r6, ip
    cea0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cea4:	418f      	sbcs	r7, r1
    cea6:	eb78 080c 	sbcs.w	r8, r8, ip
    ceaa:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    ceae:	eb79 0901 	sbcs.w	r9, r9, r1
    ceb2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    ceb6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    ceba:	4180      	sbcs	r0, r0
    cebc:	4240      	negs	r0, r0
    cebe:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cec2:	4770      	bx	lr

0000cec4 <ocrypto_bigint_cadd256>:
    cec4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cec8:	4252      	negs	r2, r2
    ceca:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    cece:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    ced2:	4017      	ands	r7, r2
    ced4:	19db      	adds	r3, r3, r7
    ced6:	ea18 0802 	ands.w	r8, r8, r2
    ceda:	eb54 0408 	adcs.w	r4, r4, r8
    cede:	ea19 0902 	ands.w	r9, r9, r2
    cee2:	eb55 0509 	adcs.w	r5, r5, r9
    cee6:	ea1a 0a02 	ands.w	sl, sl, r2
    ceea:	eb56 060a 	adcs.w	r6, r6, sl
    ceee:	c078      	stmia	r0!, {r3, r4, r5, r6}
    cef0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    cef4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    cef8:	4017      	ands	r7, r2
    cefa:	417b      	adcs	r3, r7
    cefc:	ea18 0802 	ands.w	r8, r8, r2
    cf00:	eb54 0408 	adcs.w	r4, r4, r8
    cf04:	ea19 0902 	ands.w	r9, r9, r2
    cf08:	eb55 0509 	adcs.w	r5, r5, r9
    cf0c:	ea1a 0a02 	ands.w	sl, sl, r2
    cf10:	eb56 060a 	adcs.w	r6, r6, sl
    cf14:	c078      	stmia	r0!, {r3, r4, r5, r6}
    cf16:	4180      	sbcs	r0, r0
    cf18:	3001      	adds	r0, #1
    cf1a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cf1e:	4770      	bx	lr

0000cf20 <ocrypto_bigint_csub256>:
    cf20:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cf24:	4252      	negs	r2, r2
    cf26:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    cf2a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    cf2e:	4017      	ands	r7, r2
    cf30:	1bdb      	subs	r3, r3, r7
    cf32:	ea18 0802 	ands.w	r8, r8, r2
    cf36:	eb74 0408 	sbcs.w	r4, r4, r8
    cf3a:	ea19 0902 	ands.w	r9, r9, r2
    cf3e:	eb75 0509 	sbcs.w	r5, r5, r9
    cf42:	ea1a 0a02 	ands.w	sl, sl, r2
    cf46:	eb76 060a 	sbcs.w	r6, r6, sl
    cf4a:	c078      	stmia	r0!, {r3, r4, r5, r6}
    cf4c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    cf50:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    cf54:	4017      	ands	r7, r2
    cf56:	41bb      	sbcs	r3, r7
    cf58:	ea18 0802 	ands.w	r8, r8, r2
    cf5c:	eb74 0408 	sbcs.w	r4, r4, r8
    cf60:	ea19 0902 	ands.w	r9, r9, r2
    cf64:	eb75 0509 	sbcs.w	r5, r5, r9
    cf68:	ea1a 0a02 	ands.w	sl, sl, r2
    cf6c:	eb76 060a 	sbcs.w	r6, r6, sl
    cf70:	c078      	stmia	r0!, {r3, r4, r5, r6}
    cf72:	4180      	sbcs	r0, r0
    cf74:	4240      	negs	r0, r0
    cf76:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cf7a:	4770      	bx	lr

0000cf7c <cswap64>:
    cf7c:	e890 0030 	ldmia.w	r0, {r4, r5}
    cf80:	e891 00c0 	ldmia.w	r1, {r6, r7}
    cf84:	1ba3      	subs	r3, r4, r6
    cf86:	4013      	ands	r3, r2
    cf88:	1ae4      	subs	r4, r4, r3
    cf8a:	18f6      	adds	r6, r6, r3
    cf8c:	1beb      	subs	r3, r5, r7
    cf8e:	4013      	ands	r3, r2
    cf90:	1aed      	subs	r5, r5, r3
    cf92:	18ff      	adds	r7, r7, r3
    cf94:	c030      	stmia	r0!, {r4, r5}
    cf96:	c1c0      	stmia	r1!, {r6, r7}
    cf98:	4770      	bx	lr

0000cf9a <ocrypto_bigint_cswap256>:
    cf9a:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf9c:	4252      	negs	r2, r2
    cf9e:	f7ff ffed 	bl	cf7c <cswap64>
    cfa2:	f7ff ffeb 	bl	cf7c <cswap64>
    cfa6:	f7ff ffe9 	bl	cf7c <cswap64>
    cfaa:	f7ff ffe7 	bl	cf7c <cswap64>
    cfae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cfb0 <ocrypto_bigint_mul128>:
    cfb0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cfb4:	c93a      	ldmia	r1, {r1, r3, r4, r5}
    cfb6:	6816      	ldr	r6, [r2, #0]
    cfb8:	fba1 9a06 	umull	r9, sl, r1, r6
    cfbc:	f04f 0c00 	mov.w	ip, #0
    cfc0:	fbe3 ac06 	umlal	sl, ip, r3, r6
    cfc4:	f04f 0700 	mov.w	r7, #0
    cfc8:	fbe4 c706 	umlal	ip, r7, r4, r6
    cfcc:	f04f 0800 	mov.w	r8, #0
    cfd0:	fbe5 7806 	umlal	r7, r8, r5, r6
    cfd4:	f840 9b04 	str.w	r9, [r0], #4
    cfd8:	6856      	ldr	r6, [r2, #4]
    cfda:	f04f 0900 	mov.w	r9, #0
    cfde:	fbe1 a906 	umlal	sl, r9, r1, r6
    cfe2:	eb1c 0c09 	adds.w	ip, ip, r9
    cfe6:	f04f 0900 	mov.w	r9, #0
    cfea:	eb49 0909 	adc.w	r9, r9, r9
    cfee:	fbe3 c906 	umlal	ip, r9, r3, r6
    cff2:	eb17 0709 	adds.w	r7, r7, r9
    cff6:	f04f 0900 	mov.w	r9, #0
    cffa:	eb49 0909 	adc.w	r9, r9, r9
    cffe:	fbe4 7906 	umlal	r7, r9, r4, r6
    d002:	eb18 0809 	adds.w	r8, r8, r9
    d006:	f04f 0900 	mov.w	r9, #0
    d00a:	eb49 0909 	adc.w	r9, r9, r9
    d00e:	fbe5 8906 	umlal	r8, r9, r5, r6
    d012:	f840 ab04 	str.w	sl, [r0], #4
    d016:	6896      	ldr	r6, [r2, #8]
    d018:	f04f 0a00 	mov.w	sl, #0
    d01c:	fbe1 ca06 	umlal	ip, sl, r1, r6
    d020:	eb17 070a 	adds.w	r7, r7, sl
    d024:	f04f 0a00 	mov.w	sl, #0
    d028:	eb4a 0a0a 	adc.w	sl, sl, sl
    d02c:	fbe3 7a06 	umlal	r7, sl, r3, r6
    d030:	eb18 080a 	adds.w	r8, r8, sl
    d034:	f04f 0a00 	mov.w	sl, #0
    d038:	eb4a 0a0a 	adc.w	sl, sl, sl
    d03c:	fbe4 8a06 	umlal	r8, sl, r4, r6
    d040:	eb19 090a 	adds.w	r9, r9, sl
    d044:	f04f 0a00 	mov.w	sl, #0
    d048:	eb4a 0a0a 	adc.w	sl, sl, sl
    d04c:	fbe5 9a06 	umlal	r9, sl, r5, r6
    d050:	f840 cb04 	str.w	ip, [r0], #4
    d054:	68d6      	ldr	r6, [r2, #12]
    d056:	f04f 0c00 	mov.w	ip, #0
    d05a:	fbe1 7c06 	umlal	r7, ip, r1, r6
    d05e:	eb18 080c 	adds.w	r8, r8, ip
    d062:	f04f 0c00 	mov.w	ip, #0
    d066:	eb4c 0c0c 	adc.w	ip, ip, ip
    d06a:	fbe3 8c06 	umlal	r8, ip, r3, r6
    d06e:	eb19 090c 	adds.w	r9, r9, ip
    d072:	f04f 0c00 	mov.w	ip, #0
    d076:	eb4c 0c0c 	adc.w	ip, ip, ip
    d07a:	fbe4 9c06 	umlal	r9, ip, r4, r6
    d07e:	eb1a 0a0c 	adds.w	sl, sl, ip
    d082:	f04f 0c00 	mov.w	ip, #0
    d086:	eb4c 0c0c 	adc.w	ip, ip, ip
    d08a:	fbe5 ac06 	umlal	sl, ip, r5, r6
    d08e:	e880 1780 	stmia.w	r0, {r7, r8, r9, sl, ip}
    d092:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d096:	4770      	bx	lr

0000d098 <ocrypto_bigint_sqr256>:
    d098:	460a      	mov	r2, r1

0000d09a <ocrypto_bigint_mul256>:
    d09a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d09e:	ec41 0a14 	vmov	s8, s9, r0, r1
    d0a2:	ec92 0a08 	vldmia	r2, {s0-s7}
    d0a6:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    d0a8:	ee10 0a10 	vmov	r0, s0
    d0ac:	fba1 7800 	umull	r7, r8, r1, r0
    d0b0:	f04f 0900 	mov.w	r9, #0
    d0b4:	fbe2 8900 	umlal	r8, r9, r2, r0
    d0b8:	f04f 0a00 	mov.w	sl, #0
    d0bc:	fbe3 9a00 	umlal	r9, sl, r3, r0
    d0c0:	f04f 0b00 	mov.w	fp, #0
    d0c4:	fbe4 ab00 	umlal	sl, fp, r4, r0
    d0c8:	ee12 0a10 	vmov	r0, s4
    d0cc:	f04f 0c00 	mov.w	ip, #0
    d0d0:	fbe1 bc00 	umlal	fp, ip, r1, r0
    d0d4:	f04f 0e00 	mov.w	lr, #0
    d0d8:	fbe2 ce00 	umlal	ip, lr, r2, r0
    d0dc:	f04f 0500 	mov.w	r5, #0
    d0e0:	fbe3 e500 	umlal	lr, r5, r3, r0
    d0e4:	f04f 0600 	mov.w	r6, #0
    d0e8:	fbe4 5600 	umlal	r5, r6, r4, r0
    d0ec:	ee05 7a10 	vmov	s10, r7
    d0f0:	ee10 0a90 	vmov	r0, s1
    d0f4:	f04f 0700 	mov.w	r7, #0
    d0f8:	fbe1 8700 	umlal	r8, r7, r1, r0
    d0fc:	eb19 0907 	adds.w	r9, r9, r7
    d100:	f04f 0700 	mov.w	r7, #0
    d104:	eb47 0707 	adc.w	r7, r7, r7
    d108:	fbe2 9700 	umlal	r9, r7, r2, r0
    d10c:	eb1a 0a07 	adds.w	sl, sl, r7
    d110:	f04f 0700 	mov.w	r7, #0
    d114:	eb47 0707 	adc.w	r7, r7, r7
    d118:	fbe3 a700 	umlal	sl, r7, r3, r0
    d11c:	eb1b 0b07 	adds.w	fp, fp, r7
    d120:	f04f 0700 	mov.w	r7, #0
    d124:	eb47 0707 	adc.w	r7, r7, r7
    d128:	fbe4 b700 	umlal	fp, r7, r4, r0
    d12c:	ee12 0a90 	vmov	r0, s5
    d130:	eb1c 0c07 	adds.w	ip, ip, r7
    d134:	f04f 0700 	mov.w	r7, #0
    d138:	eb47 0707 	adc.w	r7, r7, r7
    d13c:	fbe1 c700 	umlal	ip, r7, r1, r0
    d140:	eb1e 0e07 	adds.w	lr, lr, r7
    d144:	f04f 0700 	mov.w	r7, #0
    d148:	eb47 0707 	adc.w	r7, r7, r7
    d14c:	fbe2 e700 	umlal	lr, r7, r2, r0
    d150:	19ed      	adds	r5, r5, r7
    d152:	f04f 0700 	mov.w	r7, #0
    d156:	eb47 0707 	adc.w	r7, r7, r7
    d15a:	fbe3 5700 	umlal	r5, r7, r3, r0
    d15e:	19f6      	adds	r6, r6, r7
    d160:	f04f 0700 	mov.w	r7, #0
    d164:	eb47 0707 	adc.w	r7, r7, r7
    d168:	fbe4 6700 	umlal	r6, r7, r4, r0
    d16c:	ee05 8a90 	vmov	s11, r8
    d170:	ee11 0a10 	vmov	r0, s2
    d174:	f04f 0800 	mov.w	r8, #0
    d178:	fbe1 9800 	umlal	r9, r8, r1, r0
    d17c:	eb1a 0a08 	adds.w	sl, sl, r8
    d180:	f04f 0800 	mov.w	r8, #0
    d184:	eb48 0808 	adc.w	r8, r8, r8
    d188:	fbe2 a800 	umlal	sl, r8, r2, r0
    d18c:	eb1b 0b08 	adds.w	fp, fp, r8
    d190:	f04f 0800 	mov.w	r8, #0
    d194:	eb48 0808 	adc.w	r8, r8, r8
    d198:	fbe3 b800 	umlal	fp, r8, r3, r0
    d19c:	eb1c 0c08 	adds.w	ip, ip, r8
    d1a0:	f04f 0800 	mov.w	r8, #0
    d1a4:	eb48 0808 	adc.w	r8, r8, r8
    d1a8:	fbe4 c800 	umlal	ip, r8, r4, r0
    d1ac:	ee13 0a10 	vmov	r0, s6
    d1b0:	eb1e 0e08 	adds.w	lr, lr, r8
    d1b4:	f04f 0800 	mov.w	r8, #0
    d1b8:	eb48 0808 	adc.w	r8, r8, r8
    d1bc:	fbe1 e800 	umlal	lr, r8, r1, r0
    d1c0:	eb15 0508 	adds.w	r5, r5, r8
    d1c4:	f04f 0800 	mov.w	r8, #0
    d1c8:	eb48 0808 	adc.w	r8, r8, r8
    d1cc:	fbe2 5800 	umlal	r5, r8, r2, r0
    d1d0:	eb16 0608 	adds.w	r6, r6, r8
    d1d4:	f04f 0800 	mov.w	r8, #0
    d1d8:	eb48 0808 	adc.w	r8, r8, r8
    d1dc:	fbe3 6800 	umlal	r6, r8, r3, r0
    d1e0:	eb17 0708 	adds.w	r7, r7, r8
    d1e4:	f04f 0800 	mov.w	r8, #0
    d1e8:	eb48 0808 	adc.w	r8, r8, r8
    d1ec:	fbe4 7800 	umlal	r7, r8, r4, r0
    d1f0:	ee06 9a10 	vmov	s12, r9
    d1f4:	ee11 0a90 	vmov	r0, s3
    d1f8:	f04f 0900 	mov.w	r9, #0
    d1fc:	fbe1 a900 	umlal	sl, r9, r1, r0
    d200:	eb1b 0b09 	adds.w	fp, fp, r9
    d204:	f04f 0900 	mov.w	r9, #0
    d208:	eb49 0909 	adc.w	r9, r9, r9
    d20c:	fbe2 b900 	umlal	fp, r9, r2, r0
    d210:	eb1c 0c09 	adds.w	ip, ip, r9
    d214:	f04f 0900 	mov.w	r9, #0
    d218:	eb49 0909 	adc.w	r9, r9, r9
    d21c:	fbe3 c900 	umlal	ip, r9, r3, r0
    d220:	eb1e 0e09 	adds.w	lr, lr, r9
    d224:	f04f 0900 	mov.w	r9, #0
    d228:	eb49 0909 	adc.w	r9, r9, r9
    d22c:	fbe4 e900 	umlal	lr, r9, r4, r0
    d230:	ee13 0a90 	vmov	r0, s7
    d234:	eb15 0509 	adds.w	r5, r5, r9
    d238:	f04f 0900 	mov.w	r9, #0
    d23c:	eb49 0909 	adc.w	r9, r9, r9
    d240:	fbe1 5900 	umlal	r5, r9, r1, r0
    d244:	eb16 0609 	adds.w	r6, r6, r9
    d248:	f04f 0900 	mov.w	r9, #0
    d24c:	eb49 0909 	adc.w	r9, r9, r9
    d250:	fbe2 6900 	umlal	r6, r9, r2, r0
    d254:	eb17 0709 	adds.w	r7, r7, r9
    d258:	f04f 0900 	mov.w	r9, #0
    d25c:	eb49 0909 	adc.w	r9, r9, r9
    d260:	fbe3 7900 	umlal	r7, r9, r3, r0
    d264:	eb18 0809 	adds.w	r8, r8, r9
    d268:	f04f 0900 	mov.w	r9, #0
    d26c:	eb49 0909 	adc.w	r9, r9, r9
    d270:	fbe4 8900 	umlal	r8, r9, r4, r0
    d274:	ee06 aa90 	vmov	s13, sl
    d278:	ee14 1a90 	vmov	r1, s9
    d27c:	f101 0110 	add.w	r1, r1, #16
    d280:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    d282:	ee10 0a10 	vmov	r0, s0
    d286:	f04f 0a00 	mov.w	sl, #0
    d28a:	fbe1 ba00 	umlal	fp, sl, r1, r0
    d28e:	eb1c 0c0a 	adds.w	ip, ip, sl
    d292:	f04f 0a00 	mov.w	sl, #0
    d296:	eb4a 0a0a 	adc.w	sl, sl, sl
    d29a:	fbe2 ca00 	umlal	ip, sl, r2, r0
    d29e:	eb1e 0e0a 	adds.w	lr, lr, sl
    d2a2:	f04f 0a00 	mov.w	sl, #0
    d2a6:	eb4a 0a0a 	adc.w	sl, sl, sl
    d2aa:	fbe3 ea00 	umlal	lr, sl, r3, r0
    d2ae:	eb15 050a 	adds.w	r5, r5, sl
    d2b2:	f04f 0a00 	mov.w	sl, #0
    d2b6:	eb4a 0a0a 	adc.w	sl, sl, sl
    d2ba:	fbe4 5a00 	umlal	r5, sl, r4, r0
    d2be:	ee12 0a10 	vmov	r0, s4
    d2c2:	eb16 060a 	adds.w	r6, r6, sl
    d2c6:	f04f 0a00 	mov.w	sl, #0
    d2ca:	eb4a 0a0a 	adc.w	sl, sl, sl
    d2ce:	fbe1 6a00 	umlal	r6, sl, r1, r0
    d2d2:	eb17 070a 	adds.w	r7, r7, sl
    d2d6:	f04f 0a00 	mov.w	sl, #0
    d2da:	eb4a 0a0a 	adc.w	sl, sl, sl
    d2de:	fbe2 7a00 	umlal	r7, sl, r2, r0
    d2e2:	eb18 080a 	adds.w	r8, r8, sl
    d2e6:	f04f 0a00 	mov.w	sl, #0
    d2ea:	eb4a 0a0a 	adc.w	sl, sl, sl
    d2ee:	fbe3 8a00 	umlal	r8, sl, r3, r0
    d2f2:	eb19 090a 	adds.w	r9, r9, sl
    d2f6:	f04f 0a00 	mov.w	sl, #0
    d2fa:	eb4a 0a0a 	adc.w	sl, sl, sl
    d2fe:	fbe4 9a00 	umlal	r9, sl, r4, r0
    d302:	ee07 ba10 	vmov	s14, fp
    d306:	ee10 0a90 	vmov	r0, s1
    d30a:	f04f 0b00 	mov.w	fp, #0
    d30e:	fbe1 cb00 	umlal	ip, fp, r1, r0
    d312:	eb1e 0e0b 	adds.w	lr, lr, fp
    d316:	f04f 0b00 	mov.w	fp, #0
    d31a:	eb4b 0b0b 	adc.w	fp, fp, fp
    d31e:	fbe2 eb00 	umlal	lr, fp, r2, r0
    d322:	eb15 050b 	adds.w	r5, r5, fp
    d326:	f04f 0b00 	mov.w	fp, #0
    d32a:	eb4b 0b0b 	adc.w	fp, fp, fp
    d32e:	fbe3 5b00 	umlal	r5, fp, r3, r0
    d332:	eb16 060b 	adds.w	r6, r6, fp
    d336:	f04f 0b00 	mov.w	fp, #0
    d33a:	eb4b 0b0b 	adc.w	fp, fp, fp
    d33e:	fbe4 6b00 	umlal	r6, fp, r4, r0
    d342:	ee12 0a90 	vmov	r0, s5
    d346:	eb17 070b 	adds.w	r7, r7, fp
    d34a:	f04f 0b00 	mov.w	fp, #0
    d34e:	eb4b 0b0b 	adc.w	fp, fp, fp
    d352:	fbe1 7b00 	umlal	r7, fp, r1, r0
    d356:	eb18 080b 	adds.w	r8, r8, fp
    d35a:	f04f 0b00 	mov.w	fp, #0
    d35e:	eb4b 0b0b 	adc.w	fp, fp, fp
    d362:	fbe2 8b00 	umlal	r8, fp, r2, r0
    d366:	eb19 090b 	adds.w	r9, r9, fp
    d36a:	f04f 0b00 	mov.w	fp, #0
    d36e:	eb4b 0b0b 	adc.w	fp, fp, fp
    d372:	fbe3 9b00 	umlal	r9, fp, r3, r0
    d376:	eb1a 0a0b 	adds.w	sl, sl, fp
    d37a:	f04f 0b00 	mov.w	fp, #0
    d37e:	eb4b 0b0b 	adc.w	fp, fp, fp
    d382:	fbe4 ab00 	umlal	sl, fp, r4, r0
    d386:	ee07 ca90 	vmov	s15, ip
    d38a:	ee11 0a10 	vmov	r0, s2
    d38e:	f04f 0c00 	mov.w	ip, #0
    d392:	fbe1 ec00 	umlal	lr, ip, r1, r0
    d396:	eb15 050c 	adds.w	r5, r5, ip
    d39a:	f04f 0c00 	mov.w	ip, #0
    d39e:	eb4c 0c0c 	adc.w	ip, ip, ip
    d3a2:	fbe2 5c00 	umlal	r5, ip, r2, r0
    d3a6:	eb16 060c 	adds.w	r6, r6, ip
    d3aa:	f04f 0c00 	mov.w	ip, #0
    d3ae:	eb4c 0c0c 	adc.w	ip, ip, ip
    d3b2:	fbe3 6c00 	umlal	r6, ip, r3, r0
    d3b6:	eb17 070c 	adds.w	r7, r7, ip
    d3ba:	f04f 0c00 	mov.w	ip, #0
    d3be:	eb4c 0c0c 	adc.w	ip, ip, ip
    d3c2:	fbe4 7c00 	umlal	r7, ip, r4, r0
    d3c6:	ee13 0a10 	vmov	r0, s6
    d3ca:	eb18 080c 	adds.w	r8, r8, ip
    d3ce:	f04f 0c00 	mov.w	ip, #0
    d3d2:	eb4c 0c0c 	adc.w	ip, ip, ip
    d3d6:	fbe1 8c00 	umlal	r8, ip, r1, r0
    d3da:	eb19 090c 	adds.w	r9, r9, ip
    d3de:	f04f 0c00 	mov.w	ip, #0
    d3e2:	eb4c 0c0c 	adc.w	ip, ip, ip
    d3e6:	fbe2 9c00 	umlal	r9, ip, r2, r0
    d3ea:	eb1a 0a0c 	adds.w	sl, sl, ip
    d3ee:	f04f 0c00 	mov.w	ip, #0
    d3f2:	eb4c 0c0c 	adc.w	ip, ip, ip
    d3f6:	fbe3 ac00 	umlal	sl, ip, r3, r0
    d3fa:	eb1b 0b0c 	adds.w	fp, fp, ip
    d3fe:	f04f 0c00 	mov.w	ip, #0
    d402:	eb4c 0c0c 	adc.w	ip, ip, ip
    d406:	fbe4 bc00 	umlal	fp, ip, r4, r0
    d40a:	ee08 ea10 	vmov	s16, lr
    d40e:	ee11 0a90 	vmov	r0, s3
    d412:	f04f 0e00 	mov.w	lr, #0
    d416:	fbe1 5e00 	umlal	r5, lr, r1, r0
    d41a:	eb16 060e 	adds.w	r6, r6, lr
    d41e:	f04f 0e00 	mov.w	lr, #0
    d422:	eb4e 0e0e 	adc.w	lr, lr, lr
    d426:	fbe2 6e00 	umlal	r6, lr, r2, r0
    d42a:	eb17 070e 	adds.w	r7, r7, lr
    d42e:	f04f 0e00 	mov.w	lr, #0
    d432:	eb4e 0e0e 	adc.w	lr, lr, lr
    d436:	fbe3 7e00 	umlal	r7, lr, r3, r0
    d43a:	eb18 080e 	adds.w	r8, r8, lr
    d43e:	f04f 0e00 	mov.w	lr, #0
    d442:	eb4e 0e0e 	adc.w	lr, lr, lr
    d446:	fbe4 8e00 	umlal	r8, lr, r4, r0
    d44a:	ee13 0a90 	vmov	r0, s7
    d44e:	eb19 090e 	adds.w	r9, r9, lr
    d452:	f04f 0e00 	mov.w	lr, #0
    d456:	eb4e 0e0e 	adc.w	lr, lr, lr
    d45a:	fbe1 9e00 	umlal	r9, lr, r1, r0
    d45e:	eb1a 0a0e 	adds.w	sl, sl, lr
    d462:	f04f 0e00 	mov.w	lr, #0
    d466:	eb4e 0e0e 	adc.w	lr, lr, lr
    d46a:	fbe2 ae00 	umlal	sl, lr, r2, r0
    d46e:	eb1b 0b0e 	adds.w	fp, fp, lr
    d472:	f04f 0e00 	mov.w	lr, #0
    d476:	eb4e 0e0e 	adc.w	lr, lr, lr
    d47a:	fbe3 be00 	umlal	fp, lr, r3, r0
    d47e:	eb1c 0c0e 	adds.w	ip, ip, lr
    d482:	f04f 0e00 	mov.w	lr, #0
    d486:	eb4e 0e0e 	adc.w	lr, lr, lr
    d48a:	fbe4 ce00 	umlal	ip, lr, r4, r0
    d48e:	ee14 0a10 	vmov	r0, s8
    d492:	eca0 5a07 	vstmia	r0!, {s10-s16}
    d496:	e880 5fe0 	stmia.w	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d49e:	bf00      	nop

0000d4a0 <ocrypto_constant_time_equal>:
    d4a0:	b430      	push	{r4, r5}
    d4a2:	f04f 0300 	mov.w	r3, #0

0000d4a6 <constant_time_equal_loop>:
    d4a6:	f810 4b01 	ldrb.w	r4, [r0], #1
    d4aa:	f811 5b01 	ldrb.w	r5, [r1], #1
    d4ae:	3a01      	subs	r2, #1
    d4b0:	ea84 0405 	eor.w	r4, r4, r5
    d4b4:	ea43 0304 	orr.w	r3, r3, r4
    d4b8:	d1f5      	bne.n	d4a6 <constant_time_equal_loop>
    d4ba:	f1a3 0301 	sub.w	r3, r3, #1
    d4be:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    d4c2:	bc30      	pop	{r4, r5}
    d4c4:	4770      	bx	lr

0000d4c6 <ocrypto_constant_time_is_zero>:
    d4c6:	f04f 0300 	mov.w	r3, #0

0000d4ca <constant_time_is_zero_loop>:
    d4ca:	f810 2b01 	ldrb.w	r2, [r0], #1
    d4ce:	3901      	subs	r1, #1
    d4d0:	ea43 0302 	orr.w	r3, r3, r2
    d4d4:	d1f9      	bne.n	d4ca <constant_time_is_zero_loop>
    d4d6:	f1a3 0301 	sub.w	r3, r3, #1
    d4da:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    d4de:	4770      	bx	lr

0000d4e0 <ocrypto_constant_time_copy>:
    d4e0:	f811 3b01 	ldrb.w	r3, [r1], #1
    d4e4:	f800 3b01 	strb.w	r3, [r0], #1
    d4e8:	3a01      	subs	r2, #1
    d4ea:	d1f9      	bne.n	d4e0 <ocrypto_constant_time_copy>
    d4ec:	4770      	bx	lr

0000d4ee <ocrypto_constant_time_fill_zero>:
    d4ee:	2200      	movs	r2, #0

0000d4f0 <constant_time_fill_zero_loop>:
    d4f0:	f800 2b01 	strb.w	r2, [r0], #1
    d4f4:	3901      	subs	r1, #1
    d4f6:	d1fb      	bne.n	d4f0 <constant_time_fill_zero_loop>
    d4f8:	4770      	bx	lr
    d4fa:	bf00      	nop

0000d4fc <ocrypto_mod_p256_add>:
    d4fc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d500:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    d504:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d508:	185b      	adds	r3, r3, r1
    d50a:	eb54 040c 	adcs.w	r4, r4, ip
    d50e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d512:	414d      	adcs	r5, r1
    d514:	eb56 060c 	adcs.w	r6, r6, ip
    d518:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d51c:	414f      	adcs	r7, r1
    d51e:	eb58 080c 	adcs.w	r8, r8, ip
    d522:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d526:	eb59 0901 	adcs.w	r9, r9, r1
    d52a:	eb5a 0a0c 	adcs.w	sl, sl, ip
    d52e:	4189      	sbcs	r1, r1
    d530:	f1b3 33ff 	subs.w	r3, r3, #4294967295
    d534:	f174 34ff 	sbcs.w	r4, r4, #4294967295
    d538:	f175 35ff 	sbcs.w	r5, r5, #4294967295
    d53c:	f176 0600 	sbcs.w	r6, r6, #0
    d540:	f177 0700 	sbcs.w	r7, r7, #0
    d544:	f178 0800 	sbcs.w	r8, r8, #0
    d548:	f179 0901 	sbcs.w	r9, r9, #1
    d54c:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
    d550:	f151 0100 	adcs.w	r1, r1, #0
    d554:	424a      	negs	r2, r1
    d556:	185b      	adds	r3, r3, r1
    d558:	414c      	adcs	r4, r1
    d55a:	414d      	adcs	r5, r1
    d55c:	f156 0600 	adcs.w	r6, r6, #0
    d560:	f157 0700 	adcs.w	r7, r7, #0
    d564:	f158 0800 	adcs.w	r8, r8, #0
    d568:	eb59 0902 	adcs.w	r9, r9, r2
    d56c:	eb5a 0a01 	adcs.w	sl, sl, r1
    d570:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    d574:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d578:	4770      	bx	lr

0000d57a <ocrypto_mod_p256_sub>:
    d57a:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d57e:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    d582:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d586:	1a5b      	subs	r3, r3, r1
    d588:	eb74 040c 	sbcs.w	r4, r4, ip
    d58c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d590:	418d      	sbcs	r5, r1
    d592:	eb76 060c 	sbcs.w	r6, r6, ip
    d596:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d59a:	418f      	sbcs	r7, r1
    d59c:	eb78 080c 	sbcs.w	r8, r8, ip
    d5a0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d5a4:	eb79 0901 	sbcs.w	r9, r9, r1
    d5a8:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    d5ac:	4189      	sbcs	r1, r1
    d5ae:	424a      	negs	r2, r1
    d5b0:	185b      	adds	r3, r3, r1
    d5b2:	414c      	adcs	r4, r1
    d5b4:	414d      	adcs	r5, r1
    d5b6:	f156 0600 	adcs.w	r6, r6, #0
    d5ba:	f157 0700 	adcs.w	r7, r7, #0
    d5be:	f158 0800 	adcs.w	r8, r8, #0
    d5c2:	eb59 0902 	adcs.w	r9, r9, r2
    d5c6:	eb5a 0a01 	adcs.w	sl, sl, r1
    d5ca:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    d5ce:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d5d2:	4770      	bx	lr

0000d5d4 <ocrypto_mod_p256_square>:
    d5d4:	460a      	mov	r2, r1

0000d5d6 <ocrypto_mod_p256_mul>:
    d5d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d5da:	ec41 0a14 	vmov	s8, s9, r0, r1
    d5de:	ec92 0a08 	vldmia	r2, {s0-s7}
    d5e2:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    d5e4:	ee10 0a10 	vmov	r0, s0
    d5e8:	fba1 7800 	umull	r7, r8, r1, r0
    d5ec:	f04f 0900 	mov.w	r9, #0
    d5f0:	fbe2 8900 	umlal	r8, r9, r2, r0
    d5f4:	f04f 0a00 	mov.w	sl, #0
    d5f8:	fbe3 9a00 	umlal	r9, sl, r3, r0
    d5fc:	f04f 0b00 	mov.w	fp, #0
    d600:	fbe4 ab00 	umlal	sl, fp, r4, r0
    d604:	ee12 0a10 	vmov	r0, s4
    d608:	f04f 0c00 	mov.w	ip, #0
    d60c:	fbe1 bc00 	umlal	fp, ip, r1, r0
    d610:	f04f 0e00 	mov.w	lr, #0
    d614:	fbe2 ce00 	umlal	ip, lr, r2, r0
    d618:	f04f 0500 	mov.w	r5, #0
    d61c:	fbe3 e500 	umlal	lr, r5, r3, r0
    d620:	f04f 0600 	mov.w	r6, #0
    d624:	fbe4 5600 	umlal	r5, r6, r4, r0
    d628:	ee05 7a10 	vmov	s10, r7
    d62c:	ee10 0a90 	vmov	r0, s1
    d630:	f04f 0700 	mov.w	r7, #0
    d634:	fbe1 8700 	umlal	r8, r7, r1, r0
    d638:	eb19 0907 	adds.w	r9, r9, r7
    d63c:	f04f 0700 	mov.w	r7, #0
    d640:	eb47 0707 	adc.w	r7, r7, r7
    d644:	fbe2 9700 	umlal	r9, r7, r2, r0
    d648:	eb1a 0a07 	adds.w	sl, sl, r7
    d64c:	f04f 0700 	mov.w	r7, #0
    d650:	eb47 0707 	adc.w	r7, r7, r7
    d654:	fbe3 a700 	umlal	sl, r7, r3, r0
    d658:	eb1b 0b07 	adds.w	fp, fp, r7
    d65c:	f04f 0700 	mov.w	r7, #0
    d660:	eb47 0707 	adc.w	r7, r7, r7
    d664:	fbe4 b700 	umlal	fp, r7, r4, r0
    d668:	ee12 0a90 	vmov	r0, s5
    d66c:	eb1c 0c07 	adds.w	ip, ip, r7
    d670:	f04f 0700 	mov.w	r7, #0
    d674:	eb47 0707 	adc.w	r7, r7, r7
    d678:	fbe1 c700 	umlal	ip, r7, r1, r0
    d67c:	eb1e 0e07 	adds.w	lr, lr, r7
    d680:	f04f 0700 	mov.w	r7, #0
    d684:	eb47 0707 	adc.w	r7, r7, r7
    d688:	fbe2 e700 	umlal	lr, r7, r2, r0
    d68c:	19ed      	adds	r5, r5, r7
    d68e:	f04f 0700 	mov.w	r7, #0
    d692:	eb47 0707 	adc.w	r7, r7, r7
    d696:	fbe3 5700 	umlal	r5, r7, r3, r0
    d69a:	19f6      	adds	r6, r6, r7
    d69c:	f04f 0700 	mov.w	r7, #0
    d6a0:	eb47 0707 	adc.w	r7, r7, r7
    d6a4:	fbe4 6700 	umlal	r6, r7, r4, r0
    d6a8:	ee05 8a90 	vmov	s11, r8
    d6ac:	ee11 0a10 	vmov	r0, s2
    d6b0:	f04f 0800 	mov.w	r8, #0
    d6b4:	fbe1 9800 	umlal	r9, r8, r1, r0
    d6b8:	eb1a 0a08 	adds.w	sl, sl, r8
    d6bc:	f04f 0800 	mov.w	r8, #0
    d6c0:	eb48 0808 	adc.w	r8, r8, r8
    d6c4:	fbe2 a800 	umlal	sl, r8, r2, r0
    d6c8:	eb1b 0b08 	adds.w	fp, fp, r8
    d6cc:	f04f 0800 	mov.w	r8, #0
    d6d0:	eb48 0808 	adc.w	r8, r8, r8
    d6d4:	fbe3 b800 	umlal	fp, r8, r3, r0
    d6d8:	eb1c 0c08 	adds.w	ip, ip, r8
    d6dc:	f04f 0800 	mov.w	r8, #0
    d6e0:	eb48 0808 	adc.w	r8, r8, r8
    d6e4:	fbe4 c800 	umlal	ip, r8, r4, r0
    d6e8:	ee13 0a10 	vmov	r0, s6
    d6ec:	eb1e 0e08 	adds.w	lr, lr, r8
    d6f0:	f04f 0800 	mov.w	r8, #0
    d6f4:	eb48 0808 	adc.w	r8, r8, r8
    d6f8:	fbe1 e800 	umlal	lr, r8, r1, r0
    d6fc:	eb15 0508 	adds.w	r5, r5, r8
    d700:	f04f 0800 	mov.w	r8, #0
    d704:	eb48 0808 	adc.w	r8, r8, r8
    d708:	fbe2 5800 	umlal	r5, r8, r2, r0
    d70c:	eb16 0608 	adds.w	r6, r6, r8
    d710:	f04f 0800 	mov.w	r8, #0
    d714:	eb48 0808 	adc.w	r8, r8, r8
    d718:	fbe3 6800 	umlal	r6, r8, r3, r0
    d71c:	eb17 0708 	adds.w	r7, r7, r8
    d720:	f04f 0800 	mov.w	r8, #0
    d724:	eb48 0808 	adc.w	r8, r8, r8
    d728:	fbe4 7800 	umlal	r7, r8, r4, r0
    d72c:	ee06 9a10 	vmov	s12, r9
    d730:	ee11 0a90 	vmov	r0, s3
    d734:	f04f 0900 	mov.w	r9, #0
    d738:	fbe1 a900 	umlal	sl, r9, r1, r0
    d73c:	eb1b 0b09 	adds.w	fp, fp, r9
    d740:	f04f 0900 	mov.w	r9, #0
    d744:	eb49 0909 	adc.w	r9, r9, r9
    d748:	fbe2 b900 	umlal	fp, r9, r2, r0
    d74c:	eb1c 0c09 	adds.w	ip, ip, r9
    d750:	f04f 0900 	mov.w	r9, #0
    d754:	eb49 0909 	adc.w	r9, r9, r9
    d758:	fbe3 c900 	umlal	ip, r9, r3, r0
    d75c:	eb1e 0e09 	adds.w	lr, lr, r9
    d760:	f04f 0900 	mov.w	r9, #0
    d764:	eb49 0909 	adc.w	r9, r9, r9
    d768:	fbe4 e900 	umlal	lr, r9, r4, r0
    d76c:	ee13 0a90 	vmov	r0, s7
    d770:	eb15 0509 	adds.w	r5, r5, r9
    d774:	f04f 0900 	mov.w	r9, #0
    d778:	eb49 0909 	adc.w	r9, r9, r9
    d77c:	fbe1 5900 	umlal	r5, r9, r1, r0
    d780:	eb16 0609 	adds.w	r6, r6, r9
    d784:	f04f 0900 	mov.w	r9, #0
    d788:	eb49 0909 	adc.w	r9, r9, r9
    d78c:	fbe2 6900 	umlal	r6, r9, r2, r0
    d790:	eb17 0709 	adds.w	r7, r7, r9
    d794:	f04f 0900 	mov.w	r9, #0
    d798:	eb49 0909 	adc.w	r9, r9, r9
    d79c:	fbe3 7900 	umlal	r7, r9, r3, r0
    d7a0:	eb18 0809 	adds.w	r8, r8, r9
    d7a4:	f04f 0900 	mov.w	r9, #0
    d7a8:	eb49 0909 	adc.w	r9, r9, r9
    d7ac:	fbe4 8900 	umlal	r8, r9, r4, r0
    d7b0:	ee06 aa90 	vmov	s13, sl
    d7b4:	ee14 1a90 	vmov	r1, s9
    d7b8:	f101 0110 	add.w	r1, r1, #16
    d7bc:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    d7be:	ee10 0a10 	vmov	r0, s0
    d7c2:	f04f 0a00 	mov.w	sl, #0
    d7c6:	fbe1 ba00 	umlal	fp, sl, r1, r0
    d7ca:	eb1c 0c0a 	adds.w	ip, ip, sl
    d7ce:	f04f 0a00 	mov.w	sl, #0
    d7d2:	eb4a 0a0a 	adc.w	sl, sl, sl
    d7d6:	fbe2 ca00 	umlal	ip, sl, r2, r0
    d7da:	eb1e 0e0a 	adds.w	lr, lr, sl
    d7de:	f04f 0a00 	mov.w	sl, #0
    d7e2:	eb4a 0a0a 	adc.w	sl, sl, sl
    d7e6:	fbe3 ea00 	umlal	lr, sl, r3, r0
    d7ea:	eb15 050a 	adds.w	r5, r5, sl
    d7ee:	f04f 0a00 	mov.w	sl, #0
    d7f2:	eb4a 0a0a 	adc.w	sl, sl, sl
    d7f6:	fbe4 5a00 	umlal	r5, sl, r4, r0
    d7fa:	ee12 0a10 	vmov	r0, s4
    d7fe:	eb16 060a 	adds.w	r6, r6, sl
    d802:	f04f 0a00 	mov.w	sl, #0
    d806:	eb4a 0a0a 	adc.w	sl, sl, sl
    d80a:	fbe1 6a00 	umlal	r6, sl, r1, r0
    d80e:	eb17 070a 	adds.w	r7, r7, sl
    d812:	f04f 0a00 	mov.w	sl, #0
    d816:	eb4a 0a0a 	adc.w	sl, sl, sl
    d81a:	fbe2 7a00 	umlal	r7, sl, r2, r0
    d81e:	eb18 080a 	adds.w	r8, r8, sl
    d822:	f04f 0a00 	mov.w	sl, #0
    d826:	eb4a 0a0a 	adc.w	sl, sl, sl
    d82a:	fbe3 8a00 	umlal	r8, sl, r3, r0
    d82e:	eb19 090a 	adds.w	r9, r9, sl
    d832:	f04f 0a00 	mov.w	sl, #0
    d836:	eb4a 0a0a 	adc.w	sl, sl, sl
    d83a:	fbe4 9a00 	umlal	r9, sl, r4, r0
    d83e:	ee07 ba10 	vmov	s14, fp
    d842:	ee10 0a90 	vmov	r0, s1
    d846:	f04f 0b00 	mov.w	fp, #0
    d84a:	fbe1 cb00 	umlal	ip, fp, r1, r0
    d84e:	eb1e 0e0b 	adds.w	lr, lr, fp
    d852:	f04f 0b00 	mov.w	fp, #0
    d856:	eb4b 0b0b 	adc.w	fp, fp, fp
    d85a:	fbe2 eb00 	umlal	lr, fp, r2, r0
    d85e:	eb15 050b 	adds.w	r5, r5, fp
    d862:	f04f 0b00 	mov.w	fp, #0
    d866:	eb4b 0b0b 	adc.w	fp, fp, fp
    d86a:	fbe3 5b00 	umlal	r5, fp, r3, r0
    d86e:	eb16 060b 	adds.w	r6, r6, fp
    d872:	f04f 0b00 	mov.w	fp, #0
    d876:	eb4b 0b0b 	adc.w	fp, fp, fp
    d87a:	fbe4 6b00 	umlal	r6, fp, r4, r0
    d87e:	ee12 0a90 	vmov	r0, s5
    d882:	eb17 070b 	adds.w	r7, r7, fp
    d886:	f04f 0b00 	mov.w	fp, #0
    d88a:	eb4b 0b0b 	adc.w	fp, fp, fp
    d88e:	fbe1 7b00 	umlal	r7, fp, r1, r0
    d892:	eb18 080b 	adds.w	r8, r8, fp
    d896:	f04f 0b00 	mov.w	fp, #0
    d89a:	eb4b 0b0b 	adc.w	fp, fp, fp
    d89e:	fbe2 8b00 	umlal	r8, fp, r2, r0
    d8a2:	eb19 090b 	adds.w	r9, r9, fp
    d8a6:	f04f 0b00 	mov.w	fp, #0
    d8aa:	eb4b 0b0b 	adc.w	fp, fp, fp
    d8ae:	fbe3 9b00 	umlal	r9, fp, r3, r0
    d8b2:	eb1a 0a0b 	adds.w	sl, sl, fp
    d8b6:	f04f 0b00 	mov.w	fp, #0
    d8ba:	eb4b 0b0b 	adc.w	fp, fp, fp
    d8be:	fbe4 ab00 	umlal	sl, fp, r4, r0
    d8c2:	ee07 ca90 	vmov	s15, ip
    d8c6:	ee11 0a10 	vmov	r0, s2
    d8ca:	f04f 0c00 	mov.w	ip, #0
    d8ce:	fbe1 ec00 	umlal	lr, ip, r1, r0
    d8d2:	eb15 050c 	adds.w	r5, r5, ip
    d8d6:	f04f 0c00 	mov.w	ip, #0
    d8da:	eb4c 0c0c 	adc.w	ip, ip, ip
    d8de:	fbe2 5c00 	umlal	r5, ip, r2, r0
    d8e2:	eb16 060c 	adds.w	r6, r6, ip
    d8e6:	f04f 0c00 	mov.w	ip, #0
    d8ea:	eb4c 0c0c 	adc.w	ip, ip, ip
    d8ee:	fbe3 6c00 	umlal	r6, ip, r3, r0
    d8f2:	eb17 070c 	adds.w	r7, r7, ip
    d8f6:	f04f 0c00 	mov.w	ip, #0
    d8fa:	eb4c 0c0c 	adc.w	ip, ip, ip
    d8fe:	fbe4 7c00 	umlal	r7, ip, r4, r0
    d902:	ee13 0a10 	vmov	r0, s6
    d906:	eb18 080c 	adds.w	r8, r8, ip
    d90a:	f04f 0c00 	mov.w	ip, #0
    d90e:	eb4c 0c0c 	adc.w	ip, ip, ip
    d912:	fbe1 8c00 	umlal	r8, ip, r1, r0
    d916:	eb19 090c 	adds.w	r9, r9, ip
    d91a:	f04f 0c00 	mov.w	ip, #0
    d91e:	eb4c 0c0c 	adc.w	ip, ip, ip
    d922:	fbe2 9c00 	umlal	r9, ip, r2, r0
    d926:	eb1a 0a0c 	adds.w	sl, sl, ip
    d92a:	f04f 0c00 	mov.w	ip, #0
    d92e:	eb4c 0c0c 	adc.w	ip, ip, ip
    d932:	fbe3 ac00 	umlal	sl, ip, r3, r0
    d936:	eb1b 0b0c 	adds.w	fp, fp, ip
    d93a:	f04f 0c00 	mov.w	ip, #0
    d93e:	eb4c 0c0c 	adc.w	ip, ip, ip
    d942:	fbe4 bc00 	umlal	fp, ip, r4, r0
    d946:	ee08 ea10 	vmov	s16, lr
    d94a:	ee11 0a90 	vmov	r0, s3
    d94e:	f04f 0e00 	mov.w	lr, #0
    d952:	fbe1 5e00 	umlal	r5, lr, r1, r0
    d956:	eb16 060e 	adds.w	r6, r6, lr
    d95a:	f04f 0e00 	mov.w	lr, #0
    d95e:	eb4e 0e0e 	adc.w	lr, lr, lr
    d962:	fbe2 6e00 	umlal	r6, lr, r2, r0
    d966:	eb17 070e 	adds.w	r7, r7, lr
    d96a:	f04f 0e00 	mov.w	lr, #0
    d96e:	eb4e 0e0e 	adc.w	lr, lr, lr
    d972:	fbe3 7e00 	umlal	r7, lr, r3, r0
    d976:	eb18 080e 	adds.w	r8, r8, lr
    d97a:	f04f 0e00 	mov.w	lr, #0
    d97e:	eb4e 0e0e 	adc.w	lr, lr, lr
    d982:	fbe4 8e00 	umlal	r8, lr, r4, r0
    d986:	ee13 0a90 	vmov	r0, s7
    d98a:	eb19 090e 	adds.w	r9, r9, lr
    d98e:	f04f 0e00 	mov.w	lr, #0
    d992:	eb4e 0e0e 	adc.w	lr, lr, lr
    d996:	fbe1 9e00 	umlal	r9, lr, r1, r0
    d99a:	eb1a 0a0e 	adds.w	sl, sl, lr
    d99e:	f04f 0e00 	mov.w	lr, #0
    d9a2:	eb4e 0e0e 	adc.w	lr, lr, lr
    d9a6:	fbe2 ae00 	umlal	sl, lr, r2, r0
    d9aa:	eb1b 0b0e 	adds.w	fp, fp, lr
    d9ae:	f04f 0e00 	mov.w	lr, #0
    d9b2:	eb4e 0e0e 	adc.w	lr, lr, lr
    d9b6:	fbe3 be00 	umlal	fp, lr, r3, r0
    d9ba:	eb1c 0c0e 	adds.w	ip, ip, lr
    d9be:	f04f 0e00 	mov.w	lr, #0
    d9c2:	eb4e 0e0e 	adc.w	lr, lr, lr
    d9c6:	fbe4 ce00 	umlal	ip, lr, r4, r0
    d9ca:	ec53 2a17 	vmov	r2, r3, s14, s15
    d9ce:	ee18 4a10 	vmov	r4, s16
    d9d2:	eb12 020a 	adds.w	r2, r2, sl
    d9d6:	eb53 030b 	adcs.w	r3, r3, fp
    d9da:	eb54 040c 	adcs.w	r4, r4, ip
    d9de:	eb55 050e 	adcs.w	r5, r5, lr
    d9e2:	2000      	movs	r0, #0
    d9e4:	f140 0000 	adc.w	r0, r0, #0
    d9e8:	eb12 020b 	adds.w	r2, r2, fp
    d9ec:	eb53 030c 	adcs.w	r3, r3, ip
    d9f0:	eb54 040e 	adcs.w	r4, r4, lr
    d9f4:	eb55 050e 	adcs.w	r5, r5, lr
    d9f8:	4146      	adcs	r6, r0
    d9fa:	2000      	movs	r0, #0
    d9fc:	4147      	adcs	r7, r0
    d9fe:	eb58 0800 	adcs.w	r8, r8, r0
    da02:	eb59 090a 	adcs.w	r9, r9, sl
    da06:	f140 0000 	adc.w	r0, r0, #0
    da0a:	ebb2 020e 	subs.w	r2, r2, lr
    da0e:	f173 0300 	sbcs.w	r3, r3, #0
    da12:	f174 0400 	sbcs.w	r4, r4, #0
    da16:	eb75 050a 	sbcs.w	r5, r5, sl
    da1a:	eb76 060b 	sbcs.w	r6, r6, fp
    da1e:	eb77 070c 	sbcs.w	r7, r7, ip
    da22:	eb78 080a 	sbcs.w	r8, r8, sl
    da26:	eb79 090c 	sbcs.w	r9, r9, ip
    da2a:	f160 0000 	sbc.w	r0, r0, #0
    da2e:	ebb5 050b 	subs.w	r5, r5, fp
    da32:	eb76 060c 	sbcs.w	r6, r6, ip
    da36:	eb77 070e 	sbcs.w	r7, r7, lr
    da3a:	eb78 080b 	sbcs.w	r8, r8, fp
    da3e:	eb79 090e 	sbcs.w	r9, r9, lr
    da42:	f160 0000 	sbc.w	r0, r0, #0
    da46:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    da4a:	ea7f 0c0c 	mvns.w	ip, ip
    da4e:	f1dc 0e00 	rsbs	lr, ip, #0
    da52:	ebb2 020c 	subs.w	r2, r2, ip
    da56:	eb73 030c 	sbcs.w	r3, r3, ip
    da5a:	eb74 040c 	sbcs.w	r4, r4, ip
    da5e:	f175 0500 	sbcs.w	r5, r5, #0
    da62:	f176 0600 	sbcs.w	r6, r6, #0
    da66:	f177 0700 	sbcs.w	r7, r7, #0
    da6a:	eb78 080e 	sbcs.w	r8, r8, lr
    da6e:	eb79 090c 	sbcs.w	r9, r9, ip
    da72:	f160 0000 	sbc.w	r0, r0, #0
    da76:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    da7a:	f1dc 0e00 	rsbs	lr, ip, #0
    da7e:	eb12 020c 	adds.w	r2, r2, ip
    da82:	eb53 030c 	adcs.w	r3, r3, ip
    da86:	eb54 040c 	adcs.w	r4, r4, ip
    da8a:	f155 0500 	adcs.w	r5, r5, #0
    da8e:	f156 0600 	adcs.w	r6, r6, #0
    da92:	f157 0700 	adcs.w	r7, r7, #0
    da96:	eb58 080e 	adcs.w	r8, r8, lr
    da9a:	eb59 090c 	adcs.w	r9, r9, ip
    da9e:	f140 0000 	adc.w	r0, r0, #0
    daa2:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    daa6:	f1dc 0e00 	rsbs	lr, ip, #0
    daaa:	eb12 020c 	adds.w	r2, r2, ip
    daae:	eb53 030c 	adcs.w	r3, r3, ip
    dab2:	eb54 040c 	adcs.w	r4, r4, ip
    dab6:	f155 0500 	adcs.w	r5, r5, #0
    daba:	f156 0600 	adcs.w	r6, r6, #0
    dabe:	f157 0700 	adcs.w	r7, r7, #0
    dac2:	eb58 080e 	adcs.w	r8, r8, lr
    dac6:	eb59 090c 	adcs.w	r9, r9, ip
    daca:	ec5b aa15 	vmov	sl, fp, s10, s11
    dace:	ec51 0a16 	vmov	r0, r1, s12, s13
    dad2:	eb1a 0a06 	adds.w	sl, sl, r6
    dad6:	eb5b 0b07 	adcs.w	fp, fp, r7
    dada:	eb50 0008 	adcs.w	r0, r0, r8
    dade:	eb51 0109 	adcs.w	r1, r1, r9
    dae2:	f05f 0c00 	movs.w	ip, #0
    dae6:	f14c 0c00 	adc.w	ip, ip, #0
    daea:	eb1a 0a07 	adds.w	sl, sl, r7
    daee:	eb5b 0b08 	adcs.w	fp, fp, r8
    daf2:	eb50 0009 	adcs.w	r0, r0, r9
    daf6:	eb51 0109 	adcs.w	r1, r1, r9
    dafa:	eb52 020c 	adcs.w	r2, r2, ip
    dafe:	f05f 0c00 	movs.w	ip, #0
    db02:	eb53 030c 	adcs.w	r3, r3, ip
    db06:	eb54 040c 	adcs.w	r4, r4, ip
    db0a:	4175      	adcs	r5, r6
    db0c:	f14c 0c00 	adc.w	ip, ip, #0
    db10:	ebba 0a09 	subs.w	sl, sl, r9
    db14:	f17b 0b00 	sbcs.w	fp, fp, #0
    db18:	f170 0000 	sbcs.w	r0, r0, #0
    db1c:	41b1      	sbcs	r1, r6
    db1e:	41ba      	sbcs	r2, r7
    db20:	eb73 0308 	sbcs.w	r3, r3, r8
    db24:	41b4      	sbcs	r4, r6
    db26:	eb75 0508 	sbcs.w	r5, r5, r8
    db2a:	f16c 0c00 	sbc.w	ip, ip, #0
    db2e:	1bc9      	subs	r1, r1, r7
    db30:	eb72 0208 	sbcs.w	r2, r2, r8
    db34:	eb73 0309 	sbcs.w	r3, r3, r9
    db38:	41bc      	sbcs	r4, r7
    db3a:	eb75 0509 	sbcs.w	r5, r5, r9
    db3e:	f16c 0c00 	sbc.w	ip, ip, #0
    db42:	ea5f 78ec 	movs.w	r8, ip, asr #31
    db46:	ea7f 0808 	mvns.w	r8, r8
    db4a:	f1d8 0900 	rsbs	r9, r8, #0
    db4e:	ebba 0a08 	subs.w	sl, sl, r8
    db52:	eb7b 0b08 	sbcs.w	fp, fp, r8
    db56:	eb70 0008 	sbcs.w	r0, r0, r8
    db5a:	f171 0100 	sbcs.w	r1, r1, #0
    db5e:	f172 0200 	sbcs.w	r2, r2, #0
    db62:	f173 0300 	sbcs.w	r3, r3, #0
    db66:	eb74 0409 	sbcs.w	r4, r4, r9
    db6a:	eb75 0508 	sbcs.w	r5, r5, r8
    db6e:	f16c 0c00 	sbc.w	ip, ip, #0
    db72:	ea5f 78ec 	movs.w	r8, ip, asr #31
    db76:	f1d8 0900 	rsbs	r9, r8, #0
    db7a:	eb1a 0a08 	adds.w	sl, sl, r8
    db7e:	eb5b 0b08 	adcs.w	fp, fp, r8
    db82:	eb50 0008 	adcs.w	r0, r0, r8
    db86:	f151 0100 	adcs.w	r1, r1, #0
    db8a:	f152 0200 	adcs.w	r2, r2, #0
    db8e:	f153 0300 	adcs.w	r3, r3, #0
    db92:	eb54 0409 	adcs.w	r4, r4, r9
    db96:	eb55 0508 	adcs.w	r5, r5, r8
    db9a:	f14c 0c00 	adc.w	ip, ip, #0
    db9e:	ea5f 78ec 	movs.w	r8, ip, asr #31
    dba2:	f1d8 0900 	rsbs	r9, r8, #0
    dba6:	eb1a 0a08 	adds.w	sl, sl, r8
    dbaa:	eb5b 0b08 	adcs.w	fp, fp, r8
    dbae:	eb50 0008 	adcs.w	r0, r0, r8
    dbb2:	f151 0100 	adcs.w	r1, r1, #0
    dbb6:	f152 0200 	adcs.w	r2, r2, #0
    dbba:	f153 0300 	adcs.w	r3, r3, #0
    dbbe:	eb54 0409 	adcs.w	r4, r4, r9
    dbc2:	eb55 0508 	adcs.w	r5, r5, r8
    dbc6:	ee14 7a10 	vmov	r7, s8
    dbca:	e8a7 0c00 	stmia.w	r7!, {sl, fp}
    dbce:	e887 003f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5}
    dbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbd6:	bf00      	nop

0000dbd8 <memcpy>:
    dbd8:	4684      	mov	ip, r0
    dbda:	ea41 0300 	orr.w	r3, r1, r0
    dbde:	f013 0303 	ands.w	r3, r3, #3
    dbe2:	d149      	bne.n	dc78 <memcpy+0xa0>
    dbe4:	3a40      	subs	r2, #64	; 0x40
    dbe6:	d323      	bcc.n	dc30 <memcpy+0x58>
    dbe8:	680b      	ldr	r3, [r1, #0]
    dbea:	6003      	str	r3, [r0, #0]
    dbec:	684b      	ldr	r3, [r1, #4]
    dbee:	6043      	str	r3, [r0, #4]
    dbf0:	688b      	ldr	r3, [r1, #8]
    dbf2:	6083      	str	r3, [r0, #8]
    dbf4:	68cb      	ldr	r3, [r1, #12]
    dbf6:	60c3      	str	r3, [r0, #12]
    dbf8:	690b      	ldr	r3, [r1, #16]
    dbfa:	6103      	str	r3, [r0, #16]
    dbfc:	694b      	ldr	r3, [r1, #20]
    dbfe:	6143      	str	r3, [r0, #20]
    dc00:	698b      	ldr	r3, [r1, #24]
    dc02:	6183      	str	r3, [r0, #24]
    dc04:	69cb      	ldr	r3, [r1, #28]
    dc06:	61c3      	str	r3, [r0, #28]
    dc08:	6a0b      	ldr	r3, [r1, #32]
    dc0a:	6203      	str	r3, [r0, #32]
    dc0c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    dc0e:	6243      	str	r3, [r0, #36]	; 0x24
    dc10:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    dc12:	6283      	str	r3, [r0, #40]	; 0x28
    dc14:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    dc16:	62c3      	str	r3, [r0, #44]	; 0x2c
    dc18:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    dc1a:	6303      	str	r3, [r0, #48]	; 0x30
    dc1c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    dc1e:	6343      	str	r3, [r0, #52]	; 0x34
    dc20:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    dc22:	6383      	str	r3, [r0, #56]	; 0x38
    dc24:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    dc26:	63c3      	str	r3, [r0, #60]	; 0x3c
    dc28:	3040      	adds	r0, #64	; 0x40
    dc2a:	3140      	adds	r1, #64	; 0x40
    dc2c:	3a40      	subs	r2, #64	; 0x40
    dc2e:	d2db      	bcs.n	dbe8 <memcpy+0x10>
    dc30:	3230      	adds	r2, #48	; 0x30
    dc32:	d30b      	bcc.n	dc4c <memcpy+0x74>
    dc34:	680b      	ldr	r3, [r1, #0]
    dc36:	6003      	str	r3, [r0, #0]
    dc38:	684b      	ldr	r3, [r1, #4]
    dc3a:	6043      	str	r3, [r0, #4]
    dc3c:	688b      	ldr	r3, [r1, #8]
    dc3e:	6083      	str	r3, [r0, #8]
    dc40:	68cb      	ldr	r3, [r1, #12]
    dc42:	60c3      	str	r3, [r0, #12]
    dc44:	3010      	adds	r0, #16
    dc46:	3110      	adds	r1, #16
    dc48:	3a10      	subs	r2, #16
    dc4a:	d2f3      	bcs.n	dc34 <memcpy+0x5c>
    dc4c:	320c      	adds	r2, #12
    dc4e:	d305      	bcc.n	dc5c <memcpy+0x84>
    dc50:	f851 3b04 	ldr.w	r3, [r1], #4
    dc54:	f840 3b04 	str.w	r3, [r0], #4
    dc58:	3a04      	subs	r2, #4
    dc5a:	d2f9      	bcs.n	dc50 <memcpy+0x78>
    dc5c:	3204      	adds	r2, #4
    dc5e:	d008      	beq.n	dc72 <memcpy+0x9a>
    dc60:	07d2      	lsls	r2, r2, #31
    dc62:	bf1c      	itt	ne
    dc64:	f811 3b01 	ldrbne.w	r3, [r1], #1
    dc68:	f800 3b01 	strbne.w	r3, [r0], #1
    dc6c:	d301      	bcc.n	dc72 <memcpy+0x9a>
    dc6e:	880b      	ldrh	r3, [r1, #0]
    dc70:	8003      	strh	r3, [r0, #0]
    dc72:	4660      	mov	r0, ip
    dc74:	4770      	bx	lr
    dc76:	bf00      	nop
    dc78:	2a08      	cmp	r2, #8
    dc7a:	d313      	bcc.n	dca4 <memcpy+0xcc>
    dc7c:	078b      	lsls	r3, r1, #30
    dc7e:	d0b1      	beq.n	dbe4 <memcpy+0xc>
    dc80:	f010 0303 	ands.w	r3, r0, #3
    dc84:	d0ae      	beq.n	dbe4 <memcpy+0xc>
    dc86:	f1c3 0304 	rsb	r3, r3, #4
    dc8a:	1ad2      	subs	r2, r2, r3
    dc8c:	07db      	lsls	r3, r3, #31
    dc8e:	bf1c      	itt	ne
    dc90:	f811 3b01 	ldrbne.w	r3, [r1], #1
    dc94:	f800 3b01 	strbne.w	r3, [r0], #1
    dc98:	d3a4      	bcc.n	dbe4 <memcpy+0xc>
    dc9a:	f831 3b02 	ldrh.w	r3, [r1], #2
    dc9e:	f820 3b02 	strh.w	r3, [r0], #2
    dca2:	e79f      	b.n	dbe4 <memcpy+0xc>
    dca4:	3a04      	subs	r2, #4
    dca6:	d3d9      	bcc.n	dc5c <memcpy+0x84>
    dca8:	3a01      	subs	r2, #1
    dcaa:	f811 3b01 	ldrb.w	r3, [r1], #1
    dcae:	f800 3b01 	strb.w	r3, [r0], #1
    dcb2:	d2f9      	bcs.n	dca8 <memcpy+0xd0>
    dcb4:	780b      	ldrb	r3, [r1, #0]
    dcb6:	7003      	strb	r3, [r0, #0]
    dcb8:	784b      	ldrb	r3, [r1, #1]
    dcba:	7043      	strb	r3, [r0, #1]
    dcbc:	788b      	ldrb	r3, [r1, #2]
    dcbe:	7083      	strb	r3, [r0, #2]
    dcc0:	4660      	mov	r0, ip
    dcc2:	4770      	bx	lr

0000dcc4 <strcmp>:
    dcc4:	ea80 0c01 	eor.w	ip, r0, r1
    dcc8:	f01c 0f03 	tst.w	ip, #3
    dccc:	d137      	bne.n	dd3e <strcmp+0x7a>
    dcce:	f010 0c03 	ands.w	ip, r0, #3
    dcd2:	f020 0003 	bic.w	r0, r0, #3
    dcd6:	f021 0103 	bic.w	r1, r1, #3
    dcda:	f850 2b04 	ldr.w	r2, [r0], #4
    dcde:	bf08      	it	eq
    dce0:	f851 3b04 	ldreq.w	r3, [r1], #4
    dce4:	d00e      	beq.n	dd04 <strcmp+0x40>
    dce6:	f08c 0c03 	eor.w	ip, ip, #3
    dcea:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    dcee:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    dcf2:	fa23 fc0c 	lsr.w	ip, r3, ip
    dcf6:	f851 3b04 	ldr.w	r3, [r1], #4
    dcfa:	ea42 020c 	orr.w	r2, r2, ip
    dcfe:	ea43 030c 	orr.w	r3, r3, ip
    dd02:	bf00      	nop
    dd04:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    dd08:	429a      	cmp	r2, r3
    dd0a:	bf01      	itttt	eq
    dd0c:	ea2c 0c02 	biceq.w	ip, ip, r2
    dd10:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
    dd14:	f850 2b04 	ldreq.w	r2, [r0], #4
    dd18:	f851 3b04 	ldreq.w	r3, [r1], #4
    dd1c:	d0f2      	beq.n	dd04 <strcmp+0x40>
    dd1e:	ea4f 6002 	mov.w	r0, r2, lsl #24
    dd22:	ea4f 2212 	mov.w	r2, r2, lsr #8
    dd26:	2801      	cmp	r0, #1
    dd28:	bf28      	it	cs
    dd2a:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
    dd2e:	bf08      	it	eq
    dd30:	0a1b      	lsreq	r3, r3, #8
    dd32:	d0f4      	beq.n	dd1e <strcmp+0x5a>
    dd34:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    dd38:	0e00      	lsrs	r0, r0, #24
    dd3a:	1ac0      	subs	r0, r0, r3
    dd3c:	4770      	bx	lr
    dd3e:	f010 0f03 	tst.w	r0, #3
    dd42:	d00a      	beq.n	dd5a <strcmp+0x96>
    dd44:	f810 2b01 	ldrb.w	r2, [r0], #1
    dd48:	f811 3b01 	ldrb.w	r3, [r1], #1
    dd4c:	2a01      	cmp	r2, #1
    dd4e:	bf28      	it	cs
    dd50:	429a      	cmpcs	r2, r3
    dd52:	d0f4      	beq.n	dd3e <strcmp+0x7a>
    dd54:	eba2 0003 	sub.w	r0, r2, r3
    dd58:	4770      	bx	lr
    dd5a:	f84d 5d04 	str.w	r5, [sp, #-4]!
    dd5e:	f850 2b04 	ldr.w	r2, [r0], #4
    dd62:	f001 0503 	and.w	r5, r1, #3
    dd66:	f021 0103 	bic.w	r1, r1, #3
    dd6a:	f851 3b04 	ldr.w	r3, [r1], #4
    dd6e:	2d02      	cmp	r5, #2
    dd70:	d026      	beq.n	ddc0 <strcmp+0xfc>
    dd72:	d84d      	bhi.n	de10 <strcmp+0x14c>
    dd74:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
    dd78:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
    dd7c:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    dd80:	ea2c 0c02 	bic.w	ip, ip, r2
    dd84:	d10d      	bne.n	dda2 <strcmp+0xde>
    dd86:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    dd8a:	bf08      	it	eq
    dd8c:	f851 3b04 	ldreq.w	r3, [r1], #4
    dd90:	d10a      	bne.n	dda8 <strcmp+0xe4>
    dd92:	ea85 0502 	eor.w	r5, r5, r2
    dd96:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
    dd9a:	d10c      	bne.n	ddb6 <strcmp+0xf2>
    dd9c:	f850 2b04 	ldr.w	r2, [r0], #4
    dda0:	e7e8      	b.n	dd74 <strcmp+0xb0>
    dda2:	ea4f 2313 	mov.w	r3, r3, lsr #8
    dda6:	e05b      	b.n	de60 <strcmp+0x19c>
    dda8:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
    ddac:	d154      	bne.n	de58 <strcmp+0x194>
    ddae:	780b      	ldrb	r3, [r1, #0]
    ddb0:	ea4f 6512 	mov.w	r5, r2, lsr #24
    ddb4:	e054      	b.n	de60 <strcmp+0x19c>
    ddb6:	ea4f 6512 	mov.w	r5, r2, lsr #24
    ddba:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    ddbe:	e04f      	b.n	de60 <strcmp+0x19c>
    ddc0:	ea4f 4502 	mov.w	r5, r2, lsl #16
    ddc4:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    ddc8:	ea4f 4515 	mov.w	r5, r5, lsr #16
    ddcc:	ea2c 0c02 	bic.w	ip, ip, r2
    ddd0:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
    ddd4:	d118      	bne.n	de08 <strcmp+0x144>
    ddd6:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    ddda:	bf08      	it	eq
    dddc:	f851 3b04 	ldreq.w	r3, [r1], #4
    dde0:	d107      	bne.n	ddf2 <strcmp+0x12e>
    dde2:	ea85 0502 	eor.w	r5, r5, r2
    dde6:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
    ddea:	d109      	bne.n	de00 <strcmp+0x13c>
    ddec:	f850 2b04 	ldr.w	r2, [r0], #4
    ddf0:	e7e6      	b.n	ddc0 <strcmp+0xfc>
    ddf2:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
    ddf6:	d12f      	bne.n	de58 <strcmp+0x194>
    ddf8:	880b      	ldrh	r3, [r1, #0]
    ddfa:	ea4f 4512 	mov.w	r5, r2, lsr #16
    ddfe:	e02f      	b.n	de60 <strcmp+0x19c>
    de00:	ea4f 4303 	mov.w	r3, r3, lsl #16
    de04:	ea4f 4512 	mov.w	r5, r2, lsr #16
    de08:	ea4f 4313 	mov.w	r3, r3, lsr #16
    de0c:	e028      	b.n	de60 <strcmp+0x19c>
    de0e:	bf00      	nop
    de10:	f002 05ff 	and.w	r5, r2, #255	; 0xff
    de14:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
    de18:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    de1c:	ea2c 0c02 	bic.w	ip, ip, r2
    de20:	d10d      	bne.n	de3e <strcmp+0x17a>
    de22:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    de26:	bf08      	it	eq
    de28:	f851 3b04 	ldreq.w	r3, [r1], #4
    de2c:	d10a      	bne.n	de44 <strcmp+0x180>
    de2e:	ea85 0502 	eor.w	r5, r5, r2
    de32:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
    de36:	d10a      	bne.n	de4e <strcmp+0x18a>
    de38:	f850 2b04 	ldr.w	r2, [r0], #4
    de3c:	e7e8      	b.n	de10 <strcmp+0x14c>
    de3e:	ea4f 6313 	mov.w	r3, r3, lsr #24
    de42:	e00d      	b.n	de60 <strcmp+0x19c>
    de44:	f012 0fff 	tst.w	r2, #255	; 0xff
    de48:	d006      	beq.n	de58 <strcmp+0x194>
    de4a:	f851 3b04 	ldr.w	r3, [r1], #4
    de4e:	ea4f 2512 	mov.w	r5, r2, lsr #8
    de52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    de56:	e003      	b.n	de60 <strcmp+0x19c>
    de58:	f04f 0000 	mov.w	r0, #0
    de5c:	bc20      	pop	{r5}
    de5e:	4770      	bx	lr
    de60:	f005 02ff 	and.w	r2, r5, #255	; 0xff
    de64:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    de68:	2801      	cmp	r0, #1
    de6a:	bf28      	it	cs
    de6c:	4290      	cmpcs	r0, r2
    de6e:	bf04      	itt	eq
    de70:	0a2d      	lsreq	r5, r5, #8
    de72:	0a1b      	lsreq	r3, r3, #8
    de74:	d0f4      	beq.n	de60 <strcmp+0x19c>
    de76:	eba2 0000 	sub.w	r0, r2, r0
    de7a:	bc20      	pop	{r5}
    de7c:	4770      	bx	lr
    de7e:	bf00      	nop

0000de80 <__aeabi_dcmpun>:
    de80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    de84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    de88:	d102      	bne.n	de90 <__aeabi_dcmpun+0x10>
    de8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    de8e:	d10a      	bne.n	dea6 <__aeabi_dcmpun+0x26>
    de90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    de94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    de98:	d102      	bne.n	dea0 <__aeabi_dcmpun+0x20>
    de9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    de9e:	d102      	bne.n	dea6 <__aeabi_dcmpun+0x26>
    dea0:	f04f 0000 	mov.w	r0, #0
    dea4:	4770      	bx	lr
    dea6:	f04f 0001 	mov.w	r0, #1
    deaa:	4770      	bx	lr
    deac:	0000      	movs	r0, r0
	...

0000deb0 <env_data_send>:
}
#endif /* CONFIG_MODEM_INFO */

/**@brief Get environment data from sensors and send to cloud. */
static void env_data_send(void)
{
    deb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    deb4:	b08b      	sub	sp, #44	; 0x2c
    deb6:	466e      	mov	r6, sp
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    deb8:	4b2f      	ldr	r3, [pc, #188]	; (df78 <env_data_send+0xc8>)
    deba:	af02      	add	r7, sp, #8
    debc:	e8d3 3faf 	lda	r3, [r3]
	struct sensor_value data[num_sensors];
	char buf[6];
	int err;
	u8_t len;

	if (!atomic_get(&send_data_enable)) {
    dec0:	b1a3      	cbz	r3, deec <env_data_send+0x3c>
		return;
	}

	for (int i = 0; i < num_sensors; i++) {
    dec2:	2500      	movs	r5, #0
    dec4:	4c2d      	ldr	r4, [pc, #180]	; (df7c <env_data_send+0xcc>)
			printk("Failed to fetch data from %s, error: %d\n",
				env_sensors[i]->dev_name, err);
			return;
		}

		len = snprintf(buf, sizeof(buf), "%.1f",
    dec6:	f8df b0c0 	ldr.w	fp, [pc, #192]	; df88 <env_data_send+0xd8>
		err = sensor_sample_fetch_chan(env_sensors[i]->dev,
    deca:	4b2d      	ldr	r3, [pc, #180]	; (df80 <env_data_send+0xd0>)
    decc:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    ded0:	4699      	mov	r9, r3
    ded2:	6898      	ldr	r0, [r3, #8]
static inline int z_impl_sensor_sample_fetch_chan(struct device *dev,
						 enum sensor_channel type)
{
	const struct sensor_driver_api *api = dev->driver_api;

	return api->sample_fetch(dev, type);
    ded4:	f8b9 1002 	ldrh.w	r1, [r9, #2]
    ded8:	6843      	ldr	r3, [r0, #4]
    deda:	689b      	ldr	r3, [r3, #8]
    dedc:	4798      	blx	r3
			printk("Failed to fetch data from %s, error: %d\n",
    dede:	464b      	mov	r3, r9
		if (err) {
    dee0:	4602      	mov	r2, r0
    dee2:	b140      	cbz	r0, def6 <env_data_send+0x46>
			printk("Failed to fetch data from %s, error: %d\n",
    dee4:	6859      	ldr	r1, [r3, #4]
    dee6:	4827      	ldr	r0, [pc, #156]	; (df84 <env_data_send+0xd4>)
    dee8:	f020 fba3 	bl	2e632 <printk>
    deec:	46b5      	mov	sp, r6
			env_cloud_data[i].tag = 0x1;
		}

		sensor_data_send(&env_cloud_data[i]);
	}
}
    deee:	3724      	adds	r7, #36	; 0x24
    def0:	46bd      	mov	sp, r7
    def2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = sensor_channel_get(env_sensors[i]->dev,
    def6:	f8d9 0008 	ldr.w	r0, [r9, #8]
					   enum sensor_channel chan,
					   struct sensor_value *val)
{
	const struct sensor_driver_api *api = dev->driver_api;

	return api->channel_get(dev, chan, val);
    defa:	f107 0a08 	add.w	sl, r7, #8
    defe:	6843      	ldr	r3, [r0, #4]
    df00:	eb0a 08c5 	add.w	r8, sl, r5, lsl #3
    df04:	4642      	mov	r2, r8
    df06:	68db      	ldr	r3, [r3, #12]
    df08:	f8b9 1002 	ldrh.w	r1, [r9, #2]
    df0c:	4798      	blx	r3
		if (err) {
    df0e:	4602      	mov	r2, r0
    df10:	b108      	cbz	r0, df16 <env_data_send+0x66>
			printk("Failed to fetch data from %s, error: %d\n",
    df12:	464b      	mov	r3, r9
    df14:	e7e6      	b.n	dee4 <env_data_send+0x34>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
    df16:	f8d8 0004 	ldr.w	r0, [r8, #4]
    df1a:	f7fe fa67 	bl	c3ec <__aeabi_i2d>
    df1e:	a314      	add	r3, pc, #80	; (adr r3, df70 <env_data_send+0xc0>)
    df20:	e9d3 2300 	ldrd	r2, r3, [r3]
    df24:	f7fe fbf6 	bl	c714 <__aeabi_ddiv>
    df28:	4680      	mov	r8, r0
    df2a:	f85a 0035 	ldr.w	r0, [sl, r5, lsl #3]
    df2e:	4689      	mov	r9, r1
    df30:	f7fe fa5c 	bl	c3ec <__aeabi_i2d>
    df34:	460b      	mov	r3, r1
    df36:	4602      	mov	r2, r0
    df38:	4649      	mov	r1, r9
    df3a:	4640      	mov	r0, r8
    df3c:	f7fe f90a 	bl	c154 <__adddf3>
		len = snprintf(buf, sizeof(buf), "%.1f",
    df40:	465a      	mov	r2, fp
    df42:	e9cd 0100 	strd	r0, r1, [sp]
    df46:	2106      	movs	r1, #6
    df48:	4638      	mov	r0, r7
    df4a:	f01c fd59 	bl	2aa00 <snprintf>
		env_cloud_data[i].tag += 1;
    df4e:	68e3      	ldr	r3, [r4, #12]
		env_cloud_data[i].data.len = len;
    df50:	b2c0      	uxtb	r0, r0
		if (env_cloud_data[i].tag == 0) {
    df52:	3301      	adds	r3, #1
			env_cloud_data[i].tag = 0x1;
    df54:	bf08      	it	eq
    df56:	2301      	moveq	r3, #1
		env_cloud_data[i].data.len = len;
    df58:	6060      	str	r0, [r4, #4]
	for (int i = 0; i < num_sensors; i++) {
    df5a:	3501      	adds	r5, #1
		sensor_data_send(&env_cloud_data[i]);
    df5c:	4620      	mov	r0, r4
		env_cloud_data[i].data.ptr = buf;
    df5e:	60a7      	str	r7, [r4, #8]
			env_cloud_data[i].tag = 0x1;
    df60:	60e3      	str	r3, [r4, #12]
		sensor_data_send(&env_cloud_data[i]);
    df62:	f004 fb0f 	bl	12584 <sensor_data_send>
	for (int i = 0; i < num_sensors; i++) {
    df66:	2d03      	cmp	r5, #3
    df68:	f104 0410 	add.w	r4, r4, #16
    df6c:	d1ad      	bne.n	deca <env_data_send+0x1a>
    df6e:	e7bd      	b.n	deec <env_data_send+0x3c>
    df70:	00000000 	.word	0x00000000
    df74:	412e8480 	.word	0x412e8480
    df78:	20020948 	.word	0x20020948
    df7c:	20020880 	.word	0x20020880
    df80:	00030ea8 	.word	0x00030ea8
    df84:	0003432f 	.word	0x0003432f
    df88:	00034358 	.word	0x00034358
    df8c:	00000000 	.word	0x00000000

0000df90 <orientation_detector_poll>:
static struct device *dev;
static double accel_offset[3];

int orientation_detector_poll(
	struct orientation_detector_sensor_data *sensor_data)
{
    df90:	b5f0      	push	{r4, r5, r6, r7, lr}
	double aggregated_data[3] = {0};
	struct sensor_value accel_data[3];
	enum orientation_state current_orientation;

	for (i = 0; i < MEASUREMENT_ITERATIONS; i++) {
		err = sensor_sample_fetch_chan(dev, SENSOR_CHAN_ACCEL_Z);
    df92:	4e29      	ldr	r6, [pc, #164]	; (e038 <orientation_detector_poll+0xa8>)
{
    df94:	4605      	mov	r5, r0
		err = sensor_sample_fetch_chan(dev, SENSOR_CHAN_ACCEL_Z);
    df96:	6830      	ldr	r0, [r6, #0]
{
    df98:	b087      	sub	sp, #28
	return api->sample_fetch(dev, type);
    df9a:	6843      	ldr	r3, [r0, #4]
    df9c:	2102      	movs	r1, #2
    df9e:	689b      	ldr	r3, [r3, #8]
    dfa0:	4798      	blx	r3
		if (err) {
    dfa2:	4604      	mov	r4, r0
    dfa4:	b128      	cbz	r0, dfb2 <orientation_detector_poll+0x22>
			printk("sensor_sample_fetch failed\n");
    dfa6:	4825      	ldr	r0, [pc, #148]	; (e03c <orientation_detector_poll+0xac>)

		err = sensor_channel_get(dev,
				SENSOR_CHAN_ACCEL_Z, &accel_data[2]);

		if (err) {
			printk("sensor_channel_get failed\n");
    dfa8:	f020 fb43 	bl	2e632 <printk>
	}

	sensor_data->orientation = current_orientation;

	return 0;
}
    dfac:	4620      	mov	r0, r4
    dfae:	b007      	add	sp, #28
    dfb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sensor_channel_get(dev,
    dfb2:	6830      	ldr	r0, [r6, #0]
	return api->channel_get(dev, chan, val);
    dfb4:	aa04      	add	r2, sp, #16
    dfb6:	6843      	ldr	r3, [r0, #4]
    dfb8:	2102      	movs	r1, #2
    dfba:	68db      	ldr	r3, [r3, #12]
    dfbc:	4798      	blx	r3
		if (err) {
    dfbe:	4604      	mov	r4, r0
    dfc0:	b108      	cbz	r0, dfc6 <orientation_detector_poll+0x36>
			printk("sensor_channel_get failed\n");
    dfc2:	481f      	ldr	r0, [pc, #124]	; (e040 <orientation_detector_poll+0xb0>)
    dfc4:	e7f0      	b.n	dfa8 <orientation_detector_poll+0x18>
	return (double)val->val1 + (double)val->val2 / 1000000;
    dfc6:	9805      	ldr	r0, [sp, #20]
    dfc8:	f7fe fa10 	bl	c3ec <__aeabi_i2d>
    dfcc:	a318      	add	r3, pc, #96	; (adr r3, e030 <orientation_detector_poll+0xa0>)
    dfce:	e9d3 2300 	ldrd	r2, r3, [r3]
    dfd2:	f7fe fb9f 	bl	c714 <__aeabi_ddiv>
    dfd6:	4606      	mov	r6, r0
    dfd8:	9804      	ldr	r0, [sp, #16]
    dfda:	460f      	mov	r7, r1
    dfdc:	f7fe fa06 	bl	c3ec <__aeabi_i2d>
    dfe0:	4602      	mov	r2, r0
    dfe2:	460b      	mov	r3, r1
    dfe4:	4630      	mov	r0, r6
    dfe6:	4639      	mov	r1, r7
    dfe8:	f7fe f8b4 	bl	c154 <__adddf3>
		aggregated_data[2] += sensor_value_to_double(&accel_data[2]);
    dfec:	2200      	movs	r2, #0
    dfee:	2300      	movs	r3, #0
    dff0:	f7fe f8b0 	bl	c154 <__adddf3>
				accel_offset[2];
    dff4:	4b13      	ldr	r3, [pc, #76]	; (e044 <orientation_detector_poll+0xb4>)
	sensor_data->z = (aggregated_data[2] / (double)MEASUREMENT_ITERATIONS) -
    dff6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    dffa:	f7fe f8a9 	bl	c150 <__aeabi_dsub>
    dffe:	4606      	mov	r6, r0
    e000:	460f      	mov	r7, r1
	if (sensor_data->z >= FLIP_ACCELERATION_THRESHOLD) {
    e002:	2200      	movs	r2, #0
	sensor_data->z = (aggregated_data[2] / (double)MEASUREMENT_ITERATIONS) -
    e004:	e9c5 6704 	strd	r6, r7, [r5, #16]
	if (sensor_data->z >= FLIP_ACCELERATION_THRESHOLD) {
    e008:	4b0f      	ldr	r3, [pc, #60]	; (e048 <orientation_detector_poll+0xb8>)
    e00a:	f7fe fcdf 	bl	c9cc <__aeabi_dcmpge>
    e00e:	b958      	cbnz	r0, e028 <orientation_detector_poll+0x98>
	} else if (sensor_data->z <= -FLIP_ACCELERATION_THRESHOLD) {
    e010:	4b0e      	ldr	r3, [pc, #56]	; (e04c <orientation_detector_poll+0xbc>)
    e012:	2200      	movs	r2, #0
    e014:	4630      	mov	r0, r6
    e016:	4639      	mov	r1, r7
    e018:	f7fe fcce 	bl	c9b8 <__aeabi_dcmple>
    e01c:	2800      	cmp	r0, #0
		current_orientation = ORIENTATION_ON_SIDE;
    e01e:	bf14      	ite	ne
    e020:	2302      	movne	r3, #2
    e022:	2303      	moveq	r3, #3
	sensor_data->orientation = current_orientation;
    e024:	762b      	strb	r3, [r5, #24]
	return 0;
    e026:	e7c1      	b.n	dfac <orientation_detector_poll+0x1c>
			current_orientation = ORIENTATION_NORMAL;
    e028:	2301      	movs	r3, #1
    e02a:	e7fb      	b.n	e024 <orientation_detector_poll+0x94>
    e02c:	f3af 8000 	nop.w
    e030:	00000000 	.word	0x00000000
    e034:	412e8480 	.word	0x412e8480
    e038:	20020990 	.word	0x20020990
    e03c:	00034635 	.word	0x00034635
    e040:	00034651 	.word	0x00034651
    e044:	20020020 	.word	0x20020020
    e048:	40140000 	.word	0x40140000
    e04c:	c0140000 	.word	0xc0140000

0000e050 <print_number>:
	return p->offset + strlen(str);
}

/* Render the number nicely from the given item into a string. */
static char *print_number(cJSON *item, printbuffer *p)
{
    e050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = 0;
	double d = item->valuedouble;
    e052:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
{
    e056:	4605      	mov	r5, r0
    e058:	460c      	mov	r4, r1
	if (d == 0) {
    e05a:	2200      	movs	r2, #0
    e05c:	2300      	movs	r3, #0
    e05e:	4630      	mov	r0, r6
    e060:	4639      	mov	r1, r7
    e062:	f7fe fc95 	bl	c990 <__aeabi_dcmpeq>
    e066:	b180      	cbz	r0, e08a <print_number+0x3a>
		if (p)
    e068:	b154      	cbz	r4, e080 <print_number+0x30>
			str = ensure(p, 2);
    e06a:	2102      	movs	r1, #2
    e06c:	4620      	mov	r0, r4
    e06e:	f007 f931 	bl	152d4 <ensure>
		else
			str = (char *)cJSON_malloc(2); /* special case for 0. */
    e072:	4604      	mov	r4, r0
		if (str)
    e074:	b110      	cbz	r0, e07c <print_number+0x2c>
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    e076:	4952      	ldr	r1, [pc, #328]	; (e1c0 <print_number+0x170>)
    e078:	f01c fdc2 	bl	2ac00 <strcpy>
			else
				sprintf(str, "%f", d);
		}
	}
	return str;
}
    e07c:	4620      	mov	r0, r4
    e07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			str = (char *)cJSON_malloc(2); /* special case for 0. */
    e080:	4b50      	ldr	r3, [pc, #320]	; (e1c4 <print_number+0x174>)
    e082:	2002      	movs	r0, #2
    e084:	681b      	ldr	r3, [r3, #0]
    e086:	4798      	blx	r3
    e088:	e7f3      	b.n	e072 <print_number+0x22>
	} else if (fabs(((double)item->valueint) - d) <= DBL_EPSILON &&
    e08a:	6968      	ldr	r0, [r5, #20]
    e08c:	f7fe f9ae 	bl	c3ec <__aeabi_i2d>
    e090:	4632      	mov	r2, r6
    e092:	463b      	mov	r3, r7
    e094:	f7fe f85c 	bl	c150 <__aeabi_dsub>
    e098:	ec41 0b10 	vmov	d0, r0, r1
    e09c:	f01f ffb8 	bl	2e010 <fabs>
    e0a0:	2200      	movs	r2, #0
    e0a2:	4b49      	ldr	r3, [pc, #292]	; (e1c8 <print_number+0x178>)
    e0a4:	ec51 0b10 	vmov	r0, r1, d0
    e0a8:	f7fe fc86 	bl	c9b8 <__aeabi_dcmple>
    e0ac:	b300      	cbz	r0, e0f0 <print_number+0xa0>
    e0ae:	a33c      	add	r3, pc, #240	; (adr r3, e1a0 <print_number+0x150>)
    e0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    e0b4:	4630      	mov	r0, r6
    e0b6:	4639      	mov	r1, r7
    e0b8:	f7fe fc7e 	bl	c9b8 <__aeabi_dcmple>
    e0bc:	b1c0      	cbz	r0, e0f0 <print_number+0xa0>
		   d <= INT_MAX && d >= INT_MIN) {
    e0be:	2200      	movs	r2, #0
    e0c0:	4b42      	ldr	r3, [pc, #264]	; (e1cc <print_number+0x17c>)
    e0c2:	4630      	mov	r0, r6
    e0c4:	4639      	mov	r1, r7
    e0c6:	f7fe fc81 	bl	c9cc <__aeabi_dcmpge>
    e0ca:	b188      	cbz	r0, e0f0 <print_number+0xa0>
		if (p)
    e0cc:	b15c      	cbz	r4, e0e6 <print_number+0x96>
			str = ensure(p, 21);
    e0ce:	2115      	movs	r1, #21
    e0d0:	4620      	mov	r0, r4
    e0d2:	f007 f8ff 	bl	152d4 <ensure>
			str = (char *)cJSON_malloc(
    e0d6:	4604      	mov	r4, r0
		if (str)
    e0d8:	2800      	cmp	r0, #0
    e0da:	d0cf      	beq.n	e07c <print_number+0x2c>
			sprintf(str, "%d", item->valueint);
    e0dc:	696a      	ldr	r2, [r5, #20]
    e0de:	493c      	ldr	r1, [pc, #240]	; (e1d0 <print_number+0x180>)
    e0e0:	f01c fcd6 	bl	2aa90 <sprintf>
    e0e4:	e7ca      	b.n	e07c <print_number+0x2c>
			str = (char *)cJSON_malloc(
    e0e6:	4b37      	ldr	r3, [pc, #220]	; (e1c4 <print_number+0x174>)
    e0e8:	2015      	movs	r0, #21
    e0ea:	681b      	ldr	r3, [r3, #0]
    e0ec:	4798      	blx	r3
    e0ee:	e7f2      	b.n	e0d6 <print_number+0x86>
		if (p)
    e0f0:	b374      	cbz	r4, e150 <print_number+0x100>
			str = ensure(p, 64);
    e0f2:	2140      	movs	r1, #64	; 0x40
    e0f4:	4620      	mov	r0, r4
    e0f6:	f007 f8ed 	bl	152d4 <ensure>
			str = (char *)cJSON_malloc(
    e0fa:	4604      	mov	r4, r0
		if (str) {
    e0fc:	2800      	cmp	r0, #0
    e0fe:	d0bd      	beq.n	e07c <print_number+0x2c>
			if (fabs(floor(d) - d) <= DBL_EPSILON &&
    e100:	ec47 6b10 	vmov	d0, r6, r7
    e104:	f002 fefc 	bl	10f00 <floor>
    e108:	4632      	mov	r2, r6
    e10a:	463b      	mov	r3, r7
    e10c:	ec51 0b10 	vmov	r0, r1, d0
    e110:	f7fe f81e 	bl	c150 <__aeabi_dsub>
    e114:	ec41 0b10 	vmov	d0, r0, r1
    e118:	f01f ff7a 	bl	2e010 <fabs>
    e11c:	2200      	movs	r2, #0
    e11e:	4b2a      	ldr	r3, [pc, #168]	; (e1c8 <print_number+0x178>)
    e120:	ec51 0b10 	vmov	r0, r1, d0
    e124:	f7fe fc48 	bl	c9b8 <__aeabi_dcmple>
    e128:	b1b8      	cbz	r0, e15a <print_number+0x10a>
			    fabs(d) < 1.0e60)
    e12a:	ec47 6b10 	vmov	d0, r6, r7
    e12e:	f01f ff6f 	bl	2e010 <fabs>
			if (fabs(floor(d) - d) <= DBL_EPSILON &&
    e132:	a31d      	add	r3, pc, #116	; (adr r3, e1a8 <print_number+0x158>)
    e134:	e9d3 2300 	ldrd	r2, r3, [r3]
    e138:	ec51 0b10 	vmov	r0, r1, d0
    e13c:	f7fe fc32 	bl	c9a4 <__aeabi_dcmplt>
    e140:	b158      	cbz	r0, e15a <print_number+0x10a>
				sprintf(str, "%.0f", d);
    e142:	4632      	mov	r2, r6
    e144:	463b      	mov	r3, r7
    e146:	4923      	ldr	r1, [pc, #140]	; (e1d4 <print_number+0x184>)
				sprintf(str, "%f", d);
    e148:	4620      	mov	r0, r4
    e14a:	f01c fca1 	bl	2aa90 <sprintf>
	return str;
    e14e:	e795      	b.n	e07c <print_number+0x2c>
			str = (char *)cJSON_malloc(
    e150:	4b1c      	ldr	r3, [pc, #112]	; (e1c4 <print_number+0x174>)
    e152:	2040      	movs	r0, #64	; 0x40
    e154:	681b      	ldr	r3, [r3, #0]
    e156:	4798      	blx	r3
    e158:	e7cf      	b.n	e0fa <print_number+0xaa>
			else if (fabs(d) < 1.0e-6 || fabs(d) > 1.0e9)
    e15a:	ec47 6b10 	vmov	d0, r6, r7
    e15e:	f01f ff57 	bl	2e010 <fabs>
    e162:	a313      	add	r3, pc, #76	; (adr r3, e1b0 <print_number+0x160>)
    e164:	e9d3 2300 	ldrd	r2, r3, [r3]
    e168:	ec51 0b10 	vmov	r0, r1, d0
    e16c:	f7fe fc1a 	bl	c9a4 <__aeabi_dcmplt>
    e170:	b118      	cbz	r0, e17a <print_number+0x12a>
				sprintf(str, "%e", d);
    e172:	4632      	mov	r2, r6
    e174:	463b      	mov	r3, r7
    e176:	4918      	ldr	r1, [pc, #96]	; (e1d8 <print_number+0x188>)
    e178:	e7e6      	b.n	e148 <print_number+0xf8>
			else if (fabs(d) < 1.0e-6 || fabs(d) > 1.0e9)
    e17a:	ec47 6b10 	vmov	d0, r6, r7
    e17e:	f01f ff47 	bl	2e010 <fabs>
    e182:	a30d      	add	r3, pc, #52	; (adr r3, e1b8 <print_number+0x168>)
    e184:	e9d3 2300 	ldrd	r2, r3, [r3]
    e188:	ec51 0b10 	vmov	r0, r1, d0
    e18c:	f7fe fc28 	bl	c9e0 <__aeabi_dcmpgt>
    e190:	2800      	cmp	r0, #0
    e192:	d1ee      	bne.n	e172 <print_number+0x122>
				sprintf(str, "%f", d);
    e194:	4632      	mov	r2, r6
    e196:	463b      	mov	r3, r7
    e198:	4910      	ldr	r1, [pc, #64]	; (e1dc <print_number+0x18c>)
    e19a:	e7d5      	b.n	e148 <print_number+0xf8>
    e19c:	f3af 8000 	nop.w
    e1a0:	ffc00000 	.word	0xffc00000
    e1a4:	41dfffff 	.word	0x41dfffff
    e1a8:	e4c2f344 	.word	0xe4c2f344
    e1ac:	4c63e9e4 	.word	0x4c63e9e4
    e1b0:	a0b5ed8d 	.word	0xa0b5ed8d
    e1b4:	3eb0c6f7 	.word	0x3eb0c6f7
    e1b8:	00000000 	.word	0x00000000
    e1bc:	41cdcd65 	.word	0x41cdcd65
    e1c0:	00035e56 	.word	0x00035e56
    e1c4:	2002d84c 	.word	0x2002d84c
    e1c8:	3cb00000 	.word	0x3cb00000
    e1cc:	c1e00000 	.word	0xc1e00000
    e1d0:	000344b8 	.word	0x000344b8
    e1d4:	000353d8 	.word	0x000353d8
    e1d8:	000353dd 	.word	0x000353dd
    e1dc:	000353e0 	.word	0x000353e0

0000e1e0 <gps_sim_sample_fetch>:

	return 0;
}

static int gps_sim_sample_fetch(struct device *dev)
{
    e1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1e4:	b08d      	sub	sp, #52	; 0x34

K_SYSCALL_DECLARE1(K_SYSCALL_K_TIMER_USER_DATA_GET, k_timer_user_data_get, void *, struct k_timer *, timer)

K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)

K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
    e1e6:	f022 fbe7 	bl	309b8 <z_impl_k_uptime_get_32>
	u32_t time = k_uptime_get_32() / K_MSEC(CONFIG_GPS_SIM_FIX_TIME);
    e1ea:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
	return offset + amplitude * sin(time % UINT16_MAX);
    e1ee:	f64f 74ff 	movw	r4, #65535	; 0xffff
	u32_t time = k_uptime_get_32() / K_MSEC(CONFIG_GPS_SIM_FIX_TIME);
    e1f2:	fbb0 f0f5 	udiv	r0, r0, r5
	return offset + amplitude * sin(time % UINT16_MAX);
    e1f6:	fbb0 f3f4 	udiv	r3, r0, r4
    e1fa:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
    e1fe:	1ac0      	subs	r0, r0, r3
    e200:	f7fe f8e4 	bl	c3cc <__aeabi_ui2d>
    e204:	ec41 0b10 	vmov	d0, r0, r1
    e208:	f002 ff02 	bl	11010 <sin>
    e20c:	a365      	add	r3, pc, #404	; (adr r3, e3a4 <gps_sim_sample_fetch+0x1c4>)
    e20e:	e9d3 2300 	ldrd	r2, r3, [r3]
    e212:	ec51 0b10 	vmov	r0, r1, d0
    e216:	f7fe f953 	bl	c4c0 <__aeabi_dmul>
    e21a:	a364      	add	r3, pc, #400	; (adr r3, e3ac <gps_sim_sample_fetch+0x1cc>)
    e21c:	e9d3 2300 	ldrd	r2, r3, [r3]
    e220:	f7fd ff98 	bl	c154 <__adddf3>
    e224:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    e228:	f022 fbc6 	bl	309b8 <z_impl_k_uptime_get_32>
	u32_t time = k_uptime_get_32() / K_MSEC(CONFIG_GPS_SIM_FIX_TIME);
    e22c:	fbb0 f0f5 	udiv	r0, r0, r5
	return offset + amplitude * cos(time % UINT16_MAX);
    e230:	fbb0 f4f4 	udiv	r4, r0, r4
    e234:	ebc4 4404 	rsb	r4, r4, r4, lsl #16
    e238:	1b00      	subs	r0, r0, r4
    e23a:	f7fe f8c7 	bl	c3cc <__aeabi_ui2d>
    e23e:	ec41 0b10 	vmov	d0, r0, r1
    e242:	f002 fdfd 	bl	10e40 <cos>
    e246:	a35b      	add	r3, pc, #364	; (adr r3, e3b4 <gps_sim_sample_fetch+0x1d4>)
    e248:	e9d3 2300 	ldrd	r2, r3, [r3]
    e24c:	ec51 0b10 	vmov	r0, r1, d0
    e250:	f7fe f936 	bl	c4c0 <__aeabi_dmul>
    e254:	a359      	add	r3, pc, #356	; (adr r3, e3bc <gps_sim_sample_fetch+0x1dc>)
    e256:	e9d3 2300 	ldrd	r2, r3, [r3]
    e25a:	f7fd ff7b 	bl	c154 <__adddf3>
    e25e:	460f      	mov	r7, r1
    e260:	4606      	mov	r6, r0
    e262:	f022 fba9 	bl	309b8 <z_impl_k_uptime_get_32>
	u32_t uptime = k_uptime_get_32() / MSEC_PER_SEC;
    e266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    e26a:	fbb0 f0f3 	udiv	r0, r0, r3
	second += (uptime - last_uptime);
    e26e:	4c48      	ldr	r4, [pc, #288]	; (e390 <gps_sim_sample_fetch+0x1b0>)
    e270:	4948      	ldr	r1, [pc, #288]	; (e394 <gps_sim_sample_fetch+0x1b4>)
    e272:	7823      	ldrb	r3, [r4, #0]
    e274:	680a      	ldr	r2, [r1, #0]
    e276:	4d48      	ldr	r5, [pc, #288]	; (e398 <gps_sim_sample_fetch+0x1b8>)
    e278:	1a9b      	subs	r3, r3, r2
    e27a:	4403      	add	r3, r0
    e27c:	b2db      	uxtb	r3, r3
	if (second > 59) {
    e27e:	2b3b      	cmp	r3, #59	; 0x3b
	second += (uptime - last_uptime);
    e280:	7023      	strb	r3, [r4, #0]
	last_uptime = uptime;
    e282:	6008      	str	r0, [r1, #0]
    e284:	f8df 813c 	ldr.w	r8, [pc, #316]	; e3c4 <gps_sim_sample_fetch+0x1e4>
	if (second > 59) {
    e288:	d91b      	bls.n	e2c2 <gps_sim_sample_fetch+0xe2>
		second = second % 60;
    e28a:	213c      	movs	r1, #60	; 0x3c
    e28c:	fbb3 f2f1 	udiv	r2, r3, r1
    e290:	fb01 3312 	mls	r3, r1, r2, r3
    e294:	7023      	strb	r3, [r4, #0]
		minute += 1;
    e296:	782b      	ldrb	r3, [r5, #0]
    e298:	3301      	adds	r3, #1
    e29a:	b2db      	uxtb	r3, r3
		if (minute > 59) {
    e29c:	2b3b      	cmp	r3, #59	; 0x3b
		minute += 1;
    e29e:	702b      	strb	r3, [r5, #0]
		if (minute > 59) {
    e2a0:	d90f      	bls.n	e2c2 <gps_sim_sample_fetch+0xe2>
			minute = minute % 60;
    e2a2:	fbb3 f0f1 	udiv	r0, r3, r1
    e2a6:	fb01 3310 	mls	r3, r1, r0, r3
			hour = hour % 24;
    e2aa:	2118      	movs	r1, #24
    e2ac:	f898 2000 	ldrb.w	r2, [r8]
			minute = minute % 60;
    e2b0:	702b      	strb	r3, [r5, #0]
			hour += 1;
    e2b2:	1c53      	adds	r3, r2, #1
			hour = hour % 24;
    e2b4:	b2db      	uxtb	r3, r3
    e2b6:	fbb3 f2f1 	udiv	r2, r3, r1
    e2ba:	fb01 3312 	mls	r3, r1, r2, r3
    e2be:	f888 3000 	strb.w	r3, [r8]
	if (lat < 0) {
    e2c2:	2200      	movs	r2, #0
    e2c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    e2c8:	2300      	movs	r3, #0
    e2ca:	f7fe fb6b 	bl	c9a4 <__aeabi_dcmplt>
    e2ce:	2800      	cmp	r0, #0
    e2d0:	d04f      	beq.n	e372 <gps_sim_sample_fetch+0x192>
		lat *= -1.0;
    e2d2:	e9dd 210a 	ldrd	r2, r1, [sp, #40]	; 0x28
		lat_heading = 'S';
    e2d6:	f04f 0953 	mov.w	r9, #83	; 0x53
		lat *= -1.0;
    e2da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    e2de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (lng < 0) {
    e2e2:	2200      	movs	r2, #0
    e2e4:	2300      	movs	r3, #0
    e2e6:	4630      	mov	r0, r6
    e2e8:	4639      	mov	r1, r7
    e2ea:	f7fe fb5b 	bl	c9a4 <__aeabi_dcmplt>
    e2ee:	2800      	cmp	r0, #0
    e2f0:	d042      	beq.n	e378 <gps_sim_sample_fetch+0x198>
		lng *= -1.0;
    e2f2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
    e2f6:	461f      	mov	r7, r3
		lng_heading = 'W';
    e2f8:	f04f 0a57 	mov.w	sl, #87	; 0x57
	snprintf(nmea_sentence->str,
    e2fc:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
    e300:	f04f 0b00 	mov.w	fp, #0
    e304:	ed8d 7b02 	vstr	d7, [sp, #8]
    e308:	e9cd ab08 	strd	sl, fp, [sp, #32]
    e30c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    e310:	f8cd 9010 	str.w	r9, [sp, #16]
    e314:	7822      	ldrb	r2, [r4, #0]
    e316:	f898 3000 	ldrb.w	r3, [r8]
    e31a:	9201      	str	r2, [sp, #4]
    e31c:	782a      	ldrb	r2, [r5, #0]
    e31e:	2151      	movs	r1, #81	; 0x51
    e320:	9200      	str	r2, [sp, #0]
    e322:	481e      	ldr	r0, [pc, #120]	; (e39c <gps_sim_sample_fetch+0x1bc>)
    e324:	4a1e      	ldr	r2, [pc, #120]	; (e3a0 <gps_sim_sample_fetch+0x1c0>)
    e326:	f01c fb6b 	bl	2aa00 <snprintf>
    e32a:	4b1c      	ldr	r3, [pc, #112]	; (e39c <gps_sim_sample_fetch+0x1bc>)
	u8_t checksum = 0;
    e32c:	465a      	mov	r2, fp
    e32e:	469b      	mov	fp, r3
		if ((i - nmea_sentence) > GPS_NMEA_SENTENCE_MAX_LENGTH) {
    e330:	f103 0052 	add.w	r0, r3, #82	; 0x52
	while (*i != '*') {
    e334:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    e338:	292a      	cmp	r1, #42	; 0x2a
    e33a:	d120      	bne.n	e37e <gps_sim_sample_fetch+0x19e>
		snprintf(nmea_sentence->str, GPS_NMEA_SENTENCE_MAX_LENGTH,
    e33c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
    e340:	ed8d 7b02 	vstr	d7, [sp, #8]
    e344:	e9cd a208 	strd	sl, r2, [sp, #32]
    e348:	e9cd 6706 	strd	r6, r7, [sp, #24]
    e34c:	f8cd 9010 	str.w	r9, [sp, #16]
    e350:	7822      	ldrb	r2, [r4, #0]
    e352:	f898 3000 	ldrb.w	r3, [r8]
    e356:	9201      	str	r2, [sp, #4]
    e358:	782a      	ldrb	r2, [r5, #0]
    e35a:	2151      	movs	r1, #81	; 0x51
    e35c:	9200      	str	r2, [sp, #0]
    e35e:	480f      	ldr	r0, [pc, #60]	; (e39c <gps_sim_sample_fetch+0x1bc>)
    e360:	4a0f      	ldr	r2, [pc, #60]	; (e3a0 <gps_sim_sample_fetch+0x1c0>)
    e362:	f01c fb4d 	bl	2aa00 <snprintf>
	nmea_sentence->len =
    e366:	f88b 0051 	strb.w	r0, [fp, #81]	; 0x51
	return gps_sim_generate_data(GPS_CHAN_NMEA);
}
    e36a:	2000      	movs	r0, #0
    e36c:	b00d      	add	sp, #52	; 0x34
    e36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char lat_heading = 'N';
    e372:	f04f 094e 	mov.w	r9, #78	; 0x4e
    e376:	e7b4      	b.n	e2e2 <gps_sim_sample_fetch+0x102>
	char lng_heading = 'E';
    e378:	f04f 0a45 	mov.w	sl, #69	; 0x45
    e37c:	e7be      	b.n	e2fc <gps_sim_sample_fetch+0x11c>
		if ((i - nmea_sentence) > GPS_NMEA_SENTENCE_MAX_LENGTH) {
    e37e:	4283      	cmp	r3, r0
    e380:	d001      	beq.n	e386 <gps_sim_sample_fetch+0x1a6>
		checksum ^= *i;
    e382:	404a      	eors	r2, r1
    e384:	e7d6      	b.n	e334 <gps_sim_sample_fetch+0x154>
			return 0;
    e386:	2200      	movs	r2, #0
    e388:	e7d8      	b.n	e33c <gps_sim_sample_fetch+0x15c>
    e38a:	bf00      	nop
    e38c:	f3af 8000 	nop.w
    e390:	2002de11 	.word	0x2002de11
    e394:	20021e3c 	.word	0x20021e3c
    e398:	2002de10 	.word	0x2002de10
    e39c:	20027d4b 	.word	0x20027d4b
    e3a0:	00035b63 	.word	0x00035b63
    e3a4:	9999999a 	.word	0x9999999a
    e3a8:	3fa99999 	.word	0x3fa99999
    e3ac:	ae147ae1 	.word	0xae147ae1
    e3b0:	40b8b547 	.word	0x40b8b547
    e3b4:	9999999a 	.word	0x9999999a
    e3b8:	3fb99999 	.word	0x3fb99999
    e3bc:	d2f1a9fc 	.word	0xd2f1a9fc
    e3c0:	409008cd 	.word	0x409008cd
    e3c4:	2002de0f 	.word	0x2002de0f

0000e3c8 <double_to_sensor_value>:
 * @param val Sensor value to convert.
 * @param sense_val Pointer to sensor_value to store the converted data.
 */
static void double_to_sensor_value(double val,
				struct sensor_value *sense_val)
{
    e3c8:	b5d0      	push	{r4, r6, r7, lr}
    e3ca:	4614      	mov	r4, r2
    e3cc:	460f      	mov	r7, r1
    e3ce:	4606      	mov	r6, r0
	sense_val->val1 = (int)val;
    e3d0:	f7fe fb10 	bl	c9f4 <__aeabi_d2iz>
    e3d4:	6020      	str	r0, [r4, #0]
	sense_val->val2 = (val - (int)val) * 1000000;
    e3d6:	f7fe f809 	bl	c3ec <__aeabi_i2d>
    e3da:	4602      	mov	r2, r0
    e3dc:	460b      	mov	r3, r1
    e3de:	4630      	mov	r0, r6
    e3e0:	4639      	mov	r1, r7
    e3e2:	f7fd feb5 	bl	c150 <__aeabi_dsub>
    e3e6:	a304      	add	r3, pc, #16	; (adr r3, e3f8 <double_to_sensor_value+0x30>)
    e3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3ec:	f7fe f868 	bl	c4c0 <__aeabi_dmul>
    e3f0:	f7fe fb00 	bl	c9f4 <__aeabi_d2iz>
    e3f4:	6060      	str	r0, [r4, #4]
}
    e3f6:	bdd0      	pop	{r4, r6, r7, pc}
    e3f8:	00000000 	.word	0x00000000
    e3fc:	412e8480 	.word	0x412e8480

0000e400 <sensor_sim_sample_fetch>:
	return 0;
}

static int sensor_sim_sample_fetch(struct device *dev,
				enum sensor_channel chan)
{
    e400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (chan) {
    e402:	2910      	cmp	r1, #16
    e404:	f200 80a6 	bhi.w	e554 <sensor_sim_sample_fetch+0x154>
    e408:	e8df f001 	tbb	[pc, r1]
    e40c:	40302009 	.word	0x40302009
    e410:	a4a4a4a4 	.word	0xa4a4a4a4
    e414:	a4a4a4a4 	.word	0xa4a4a4a4
    e418:	a49068a4 	.word	0xa49068a4
    e41c:	7d          	.byte	0x7d
    e41d:	00          	.byte	0x00
			accel_samples[0] = static_val_coeff * max_variation;
    e41e:	4c54      	ldr	r4, [pc, #336]	; (e570 <sensor_sim_sample_fetch+0x170>)
			accel_samples[0] = generate_sine(base_accel_samples[0],
    e420:	f00a fa84 	bl	1892c <generate_sine.constprop.0>
			accel_samples[0] = static_val_coeff * max_variation;
    e424:	6820      	ldr	r0, [r4, #0]
    e426:	f7fd ffe1 	bl	c3ec <__aeabi_i2d>
    e42a:	4b52      	ldr	r3, [pc, #328]	; (e574 <sensor_sim_sample_fetch+0x174>)
    e42c:	2200      	movs	r2, #0
    e42e:	4606      	mov	r6, r0
    e430:	460f      	mov	r7, r1
    e432:	f7fe f845 	bl	c4c0 <__aeabi_dmul>
    e436:	4b50      	ldr	r3, [pc, #320]	; (e578 <sensor_sim_sample_fetch+0x178>)
    e438:	e9c3 0100 	strd	r0, r1, [r3]
		static_val_coeff *= -1.0;
    e43c:	4630      	mov	r0, r6
    e43e:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
    e442:	f7fe fad7 	bl	c9f4 <__aeabi_d2iz>
    e446:	6020      	str	r0, [r4, #0]
	return 0;
    e448:	2000      	movs	r0, #0
	return sensor_sim_generate_data(chan);
}
    e44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			accel_samples[1] = static_val_coeff * max_variation;
    e44c:	4c48      	ldr	r4, [pc, #288]	; (e570 <sensor_sim_sample_fetch+0x170>)
			accel_samples[1] = generate_sine(base_accel_samples[1],
    e44e:	f00a fa6d 	bl	1892c <generate_sine.constprop.0>
			accel_samples[1] = static_val_coeff * max_variation;
    e452:	6820      	ldr	r0, [r4, #0]
    e454:	f7fd ffca 	bl	c3ec <__aeabi_i2d>
    e458:	4b46      	ldr	r3, [pc, #280]	; (e574 <sensor_sim_sample_fetch+0x174>)
    e45a:	2200      	movs	r2, #0
    e45c:	4606      	mov	r6, r0
    e45e:	460f      	mov	r7, r1
    e460:	f7fe f82e 	bl	c4c0 <__aeabi_dmul>
    e464:	4b44      	ldr	r3, [pc, #272]	; (e578 <sensor_sim_sample_fetch+0x178>)
    e466:	e9c3 0102 	strd	r0, r1, [r3, #8]
    e46a:	e7e7      	b.n	e43c <sensor_sim_sample_fetch+0x3c>
			accel_samples[2] = static_val_coeff * max_variation;
    e46c:	4c40      	ldr	r4, [pc, #256]	; (e570 <sensor_sim_sample_fetch+0x170>)
			accel_samples[2] = generate_sine(base_accel_samples[2],
    e46e:	f00a fa5d 	bl	1892c <generate_sine.constprop.0>
			accel_samples[2] = static_val_coeff * max_variation;
    e472:	6820      	ldr	r0, [r4, #0]
    e474:	f7fd ffba 	bl	c3ec <__aeabi_i2d>
    e478:	4b3e      	ldr	r3, [pc, #248]	; (e574 <sensor_sim_sample_fetch+0x174>)
    e47a:	2200      	movs	r2, #0
    e47c:	4606      	mov	r6, r0
    e47e:	460f      	mov	r7, r1
    e480:	f7fe f81e 	bl	c4c0 <__aeabi_dmul>
    e484:	4b3c      	ldr	r3, [pc, #240]	; (e578 <sensor_sim_sample_fetch+0x178>)
    e486:	e9c3 0104 	strd	r0, r1, [r3, #16]
    e48a:	e7d7      	b.n	e43c <sensor_sim_sample_fetch+0x3c>
			accel_samples[0] = generate_sine(base_accel_samples[0],
    e48c:	f00a fa4e 	bl	1892c <generate_sine.constprop.0>
    e490:	4c39      	ldr	r4, [pc, #228]	; (e578 <sensor_sim_sample_fetch+0x178>)
			accel_samples[0] = static_val_coeff * max_variation;
    e492:	4d37      	ldr	r5, [pc, #220]	; (e570 <sensor_sim_sample_fetch+0x170>)
			accel_samples[0] = generate_sine(base_accel_samples[0],
    e494:	e9c4 0100 	strd	r0, r1, [r4]
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, ms)
    e498:	2001      	movs	r0, #1
    e49a:	f01a f9a5 	bl	287e8 <z_impl_k_sleep>
			accel_samples[1] = generate_sine(base_accel_samples[1],
    e49e:	f00a fa45 	bl	1892c <generate_sine.constprop.0>
    e4a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
    e4a6:	2001      	movs	r0, #1
    e4a8:	f01a f99e 	bl	287e8 <z_impl_k_sleep>
			accel_samples[2] = generate_sine(base_accel_samples[2],
    e4ac:	f00a fa3e 	bl	1892c <generate_sine.constprop.0>
			accel_samples[0] = static_val_coeff * max_variation;
    e4b0:	6828      	ldr	r0, [r5, #0]
    e4b2:	f7fd ff9b 	bl	c3ec <__aeabi_i2d>
    e4b6:	2200      	movs	r2, #0
    e4b8:	4b2e      	ldr	r3, [pc, #184]	; (e574 <sensor_sim_sample_fetch+0x174>)
    e4ba:	4606      	mov	r6, r0
    e4bc:	460f      	mov	r7, r1
    e4be:	f7fd ffff 	bl	c4c0 <__aeabi_dmul>
    e4c2:	e9c4 0100 	strd	r0, r1, [r4]
			accel_samples[1] = static_val_coeff * max_variation;
    e4c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
			accel_samples[2] = static_val_coeff * max_variation;
    e4ca:	e9c4 0104 	strd	r0, r1, [r4, #16]
		static_val_coeff *= -1.0;
    e4ce:	4630      	mov	r0, r6
    e4d0:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
    e4d4:	f7fe fa8e 	bl	c9f4 <__aeabi_d2iz>
    e4d8:	6028      	str	r0, [r5, #0]
    e4da:	e7b5      	b.n	e448 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
    e4dc:	f01c fa60 	bl	2a9a0 <rand>
    e4e0:	f7fd ff84 	bl	c3ec <__aeabi_i2d>
    e4e4:	a31e      	add	r3, pc, #120	; (adr r3, e560 <sensor_sim_sample_fetch+0x160>)
    e4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    e4ea:	f7fe f913 	bl	c714 <__aeabi_ddiv>
    e4ee:	2200      	movs	r2, #0
    e4f0:	4b22      	ldr	r3, [pc, #136]	; (e57c <sensor_sim_sample_fetch+0x17c>)
    e4f2:	f7fd fe2d 	bl	c150 <__aeabi_dsub>
	temp_sample = base_temp_sample + generate_pseudo_random();
    e4f6:	4b22      	ldr	r3, [pc, #136]	; (e580 <sensor_sim_sample_fetch+0x180>)
    e4f8:	2200      	movs	r2, #0
    e4fa:	f7fd fe2b 	bl	c154 <__adddf3>
    e4fe:	4b21      	ldr	r3, [pc, #132]	; (e584 <sensor_sim_sample_fetch+0x184>)
	pressure_sample = base_pressure_sample + generate_pseudo_random();
    e500:	e9c3 0100 	strd	r0, r1, [r3]
    e504:	e7a0      	b.n	e448 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
    e506:	f01c fa4b 	bl	2a9a0 <rand>
    e50a:	f7fd ff6f 	bl	c3ec <__aeabi_i2d>
    e50e:	a314      	add	r3, pc, #80	; (adr r3, e560 <sensor_sim_sample_fetch+0x160>)
    e510:	e9d3 2300 	ldrd	r2, r3, [r3]
    e514:	f7fe f8fe 	bl	c714 <__aeabi_ddiv>
    e518:	2200      	movs	r2, #0
    e51a:	4b18      	ldr	r3, [pc, #96]	; (e57c <sensor_sim_sample_fetch+0x17c>)
    e51c:	f7fd fe18 	bl	c150 <__aeabi_dsub>
	humidity_sample = base_humidity_sample + generate_pseudo_random();
    e520:	4b19      	ldr	r3, [pc, #100]	; (e588 <sensor_sim_sample_fetch+0x188>)
    e522:	2200      	movs	r2, #0
    e524:	f7fd fe16 	bl	c154 <__adddf3>
    e528:	4b18      	ldr	r3, [pc, #96]	; (e58c <sensor_sim_sample_fetch+0x18c>)
    e52a:	e7e9      	b.n	e500 <sensor_sim_sample_fetch+0x100>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
    e52c:	f01c fa38 	bl	2a9a0 <rand>
    e530:	f7fd ff5c 	bl	c3ec <__aeabi_i2d>
    e534:	a30a      	add	r3, pc, #40	; (adr r3, e560 <sensor_sim_sample_fetch+0x160>)
    e536:	e9d3 2300 	ldrd	r2, r3, [r3]
    e53a:	f7fe f8eb 	bl	c714 <__aeabi_ddiv>
    e53e:	2200      	movs	r2, #0
    e540:	4b0e      	ldr	r3, [pc, #56]	; (e57c <sensor_sim_sample_fetch+0x17c>)
    e542:	f7fd fe05 	bl	c150 <__aeabi_dsub>
	pressure_sample = base_pressure_sample + generate_pseudo_random();
    e546:	a308      	add	r3, pc, #32	; (adr r3, e568 <sensor_sim_sample_fetch+0x168>)
    e548:	e9d3 2300 	ldrd	r2, r3, [r3]
    e54c:	f7fd fe02 	bl	c154 <__adddf3>
    e550:	4b0f      	ldr	r3, [pc, #60]	; (e590 <sensor_sim_sample_fetch+0x190>)
    e552:	e7d5      	b.n	e500 <sensor_sim_sample_fetch+0x100>
		return -ENOTSUP;
    e554:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return sensor_sim_generate_data(chan);
    e558:	e777      	b.n	e44a <sensor_sim_sample_fetch+0x4a>
    e55a:	bf00      	nop
    e55c:	f3af 8000 	nop.w
    e560:	ffc00000 	.word	0xffc00000
    e564:	41cfffff 	.word	0x41cfffff
    e568:	cccccccd 	.word	0xcccccccd
    e56c:	40588ccc 	.word	0x40588ccc
    e570:	2002d858 	.word	0x2002d858
    e574:	40340000 	.word	0x40340000
    e578:	20020520 	.word	0x20020520
    e57c:	3ff00000 	.word	0x3ff00000
    e580:	40350000 	.word	0x40350000
    e584:	20020830 	.word	0x20020830
    e588:	404a0000 	.word	0x404a0000
    e58c:	20020538 	.word	0x20020538
    e590:	20020540 	.word	0x20020540
    e594:	00000000 	.word	0x00000000

0000e598 <_svfprintf_r>:
    e598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e59c:	b0d5      	sub	sp, #340	; 0x154
    e59e:	460c      	mov	r4, r1
    e5a0:	4690      	mov	r8, r2
    e5a2:	9104      	str	r1, [sp, #16]
    e5a4:	930c      	str	r3, [sp, #48]	; 0x30
    e5a6:	9003      	str	r0, [sp, #12]
    e5a8:	f01e fca8 	bl	2cefc <_localeconv_r>
    e5ac:	6803      	ldr	r3, [r0, #0]
    e5ae:	4618      	mov	r0, r3
    e5b0:	9316      	str	r3, [sp, #88]	; 0x58
    e5b2:	f01c fb83 	bl	2acbc <strlen>
    e5b6:	89a3      	ldrh	r3, [r4, #12]
    e5b8:	9014      	str	r0, [sp, #80]	; 0x50
    e5ba:	0619      	lsls	r1, r3, #24
    e5bc:	d503      	bpl.n	e5c6 <_svfprintf_r+0x2e>
    e5be:	6923      	ldr	r3, [r4, #16]
    e5c0:	2b00      	cmp	r3, #0
    e5c2:	f000 876a 	beq.w	f49a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa3a>
    e5c6:	2300      	movs	r3, #0
    e5c8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    e5cc:	4647      	mov	r7, r8
    e5ce:	930f      	str	r3, [sp, #60]	; 0x3c
    e5d0:	9315      	str	r3, [sp, #84]	; 0x54
    e5d2:	931a      	str	r3, [sp, #104]	; 0x68
    e5d4:	9319      	str	r3, [sp, #100]	; 0x64
    e5d6:	9307      	str	r3, [sp, #28]
    e5d8:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
    e5dc:	ed9f 7b90 	vldr	d7, [pc, #576]	; e820 <_svfprintf_r+0x288>
    e5e0:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
    e5e4:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    e5e8:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
    e5ec:	783b      	ldrb	r3, [r7, #0]
    e5ee:	463c      	mov	r4, r7
    e5f0:	b1db      	cbz	r3, e62a <_svfprintf_r+0x92>
    e5f2:	2b25      	cmp	r3, #37	; 0x25
    e5f4:	d102      	bne.n	e5fc <_svfprintf_r+0x64>
    e5f6:	e018      	b.n	e62a <_svfprintf_r+0x92>
    e5f8:	2b25      	cmp	r3, #37	; 0x25
    e5fa:	d003      	beq.n	e604 <_svfprintf_r+0x6c>
    e5fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    e600:	2b00      	cmp	r3, #0
    e602:	d1f9      	bne.n	e5f8 <_svfprintf_r+0x60>
    e604:	1be5      	subs	r5, r4, r7
    e606:	d010      	beq.n	e62a <_svfprintf_r+0x92>
    e608:	f8c9 7000 	str.w	r7, [r9]
    e60c:	f8c9 5004 	str.w	r5, [r9, #4]
    e610:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
    e614:	3301      	adds	r3, #1
    e616:	442a      	add	r2, r5
    e618:	2b07      	cmp	r3, #7
    e61a:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
    e61e:	dc7d      	bgt.n	e71c <_svfprintf_r+0x184>
    e620:	f109 0908 	add.w	r9, r9, #8
    e624:	9b07      	ldr	r3, [sp, #28]
    e626:	442b      	add	r3, r5
    e628:	9307      	str	r3, [sp, #28]
    e62a:	7823      	ldrb	r3, [r4, #0]
    e62c:	2b00      	cmp	r3, #0
    e62e:	f001 806c 	beq.w	f70a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xcaa>
    e632:	2300      	movs	r3, #0
    e634:	f04f 32ff 	mov.w	r2, #4294967295
    e638:	f104 0b01 	add.w	fp, r4, #1
    e63c:	7866      	ldrb	r6, [r4, #1]
    e63e:	4698      	mov	r8, r3
    e640:	252b      	movs	r5, #43	; 0x2b
    e642:	9206      	str	r2, [sp, #24]
    e644:	930a      	str	r3, [sp, #40]	; 0x28
    e646:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
    e64a:	f10b 0b01 	add.w	fp, fp, #1
    e64e:	f1a6 0320 	sub.w	r3, r6, #32
    e652:	2b5a      	cmp	r3, #90	; 0x5a
    e654:	f200 83b0 	bhi.w	edb8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x358>
    e658:	e8df f013 	tbh	[pc, r3, lsl #1]
    e65c:	03ae02c5 	.word	0x03ae02c5
    e660:	02c003ae 	.word	0x02c003ae
    e664:	03ae03ae 	.word	0x03ae03ae
    e668:	02a103ae 	.word	0x02a103ae
    e66c:	03ae03ae 	.word	0x03ae03ae
    e670:	02910296 	.word	0x02910296
    e674:	028c03ae 	.word	0x028c03ae
    e678:	03ae0272 	.word	0x03ae0272
    e67c:	0250025f 	.word	0x0250025f
    e680:	02500250 	.word	0x02500250
    e684:	02500250 	.word	0x02500250
    e688:	02500250 	.word	0x02500250
    e68c:	02500250 	.word	0x02500250
    e690:	03ae03ae 	.word	0x03ae03ae
    e694:	03ae03ae 	.word	0x03ae03ae
    e698:	03ae03ae 	.word	0x03ae03ae
    e69c:	036c03ae 	.word	0x036c03ae
    e6a0:	035803ae 	.word	0x035803ae
    e6a4:	036c033f 	.word	0x036c033f
    e6a8:	036c036c 	.word	0x036c036c
    e6ac:	03ae03ae 	.word	0x03ae03ae
    e6b0:	03ae03ae 	.word	0x03ae03ae
    e6b4:	03ae033a 	.word	0x03ae033a
    e6b8:	01de03ae 	.word	0x01de03ae
    e6bc:	03ae03ae 	.word	0x03ae03ae
    e6c0:	031603ae 	.word	0x031603ae
    e6c4:	008403ae 	.word	0x008403ae
    e6c8:	03ae03ae 	.word	0x03ae03ae
    e6cc:	03ae0300 	.word	0x03ae0300
    e6d0:	03ae03ae 	.word	0x03ae03ae
    e6d4:	03ae03ae 	.word	0x03ae03ae
    e6d8:	03ae03ae 	.word	0x03ae03ae
    e6dc:	036c03ae 	.word	0x036c03ae
    e6e0:	035803ae 	.word	0x035803ae
    e6e4:	036c020b 	.word	0x036c020b
    e6e8:	036c036c 	.word	0x036c036c
    e6ec:	020b0264 	.word	0x020b0264
    e6f0:	03ae005b 	.word	0x03ae005b
    e6f4:	03ae02e8 	.word	0x03ae02e8
    e6f8:	01e002d0 	.word	0x01e002d0
    e6fc:	005b02f0 	.word	0x005b02f0
    e700:	031603ae 	.word	0x031603ae
    e704:	0086005d 	.word	0x0086005d
    e708:	03ae03ae 	.word	0x03ae03ae
    e70c:	03ae01f1 	.word	0x03ae01f1
    e710:	005d      	.short	0x005d
    e712:	f048 0820 	orr.w	r8, r8, #32
    e716:	f89b 6000 	ldrb.w	r6, [fp]
    e71a:	e796      	b.n	e64a <_svfprintf_r+0xb2>
    e71c:	aa28      	add	r2, sp, #160	; 0xa0
    e71e:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    e722:	f01f fa55 	bl	2dbd0 <__ssprint_r>
    e726:	b980      	cbnz	r0, e74a <_svfprintf_r+0x1b2>
    e728:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    e72c:	e77a      	b.n	e624 <_svfprintf_r+0x8c>
    e72e:	aa28      	add	r2, sp, #160	; 0xa0
    e730:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    e734:	f01f fa4c 	bl	2dbd0 <__ssprint_r>
    e738:	2800      	cmp	r0, #0
    e73a:	f000 8161 	beq.w	ea00 <_svfprintf_r+0x468>
    e73e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e740:	b11b      	cbz	r3, e74a <_svfprintf_r+0x1b2>
    e742:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e744:	9803      	ldr	r0, [sp, #12]
    e746:	f01e f933 	bl	2c9b0 <_free_r>
    e74a:	9b04      	ldr	r3, [sp, #16]
    e74c:	899b      	ldrh	r3, [r3, #12]
    e74e:	f013 0f40 	tst.w	r3, #64	; 0x40
    e752:	9b07      	ldr	r3, [sp, #28]
    e754:	bf18      	it	ne
    e756:	f04f 33ff 	movne.w	r3, #4294967295
    e75a:	9307      	str	r3, [sp, #28]
    e75c:	9807      	ldr	r0, [sp, #28]
    e75e:	b055      	add	sp, #340	; 0x154
    e760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e764:	f048 0810 	orr.w	r8, r8, #16
    e768:	f018 0f20 	tst.w	r8, #32
    e76c:	f000 8500 	beq.w	f170 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x710>
    e770:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    e772:	46c2      	mov	sl, r8
    e774:	2301      	movs	r3, #1
    e776:	3407      	adds	r4, #7
    e778:	f024 0207 	bic.w	r2, r4, #7
    e77c:	f102 0108 	add.w	r1, r2, #8
    e780:	e9d2 4500 	ldrd	r4, r5, [r2]
    e784:	910c      	str	r1, [sp, #48]	; 0x30
    e786:	2200      	movs	r2, #0
    e788:	a954      	add	r1, sp, #336	; 0x150
    e78a:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
    e78e:	9a06      	ldr	r2, [sp, #24]
    e790:	9105      	str	r1, [sp, #20]
    e792:	3201      	adds	r2, #1
    e794:	f000 8197 	beq.w	eac6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x66>
    e798:	ea54 0205 	orrs.w	r2, r4, r5
    e79c:	f02a 0880 	bic.w	r8, sl, #128	; 0x80
    e7a0:	f040 8190 	bne.w	eac4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>
    e7a4:	9a06      	ldr	r2, [sp, #24]
    e7a6:	3200      	adds	r2, #0
    e7a8:	bf18      	it	ne
    e7aa:	2201      	movne	r2, #1
    e7ac:	2a00      	cmp	r2, #0
    e7ae:	f040 8189 	bne.w	eac4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>
    e7b2:	2b00      	cmp	r3, #0
    e7b4:	f040 844f 	bne.w	f056 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5f6>
    e7b8:	f01a 0201 	ands.w	r2, sl, #1
    e7bc:	9208      	str	r2, [sp, #32]
    e7be:	f000 8499 	beq.w	f0f4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x694>
    e7c2:	2230      	movs	r2, #48	; 0x30
    e7c4:	af54      	add	r7, sp, #336	; 0x150
    e7c6:	9306      	str	r3, [sp, #24]
    e7c8:	f807 2d01 	strb.w	r2, [r7, #-1]!
    e7cc:	9906      	ldr	r1, [sp, #24]
    e7ce:	2300      	movs	r3, #0
    e7d0:	9808      	ldr	r0, [sp, #32]
    e7d2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
    e7d6:	4281      	cmp	r1, r0
    e7d8:	930b      	str	r3, [sp, #44]	; 0x2c
    e7da:	930e      	str	r3, [sp, #56]	; 0x38
    e7dc:	bfb8      	it	lt
    e7de:	4601      	movlt	r1, r0
    e7e0:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
    e7e4:	9105      	str	r1, [sp, #20]
    e7e6:	b112      	cbz	r2, e7ee <_svfprintf_r+0x256>
    e7e8:	9b05      	ldr	r3, [sp, #20]
    e7ea:	3301      	adds	r3, #1
    e7ec:	9305      	str	r3, [sp, #20]
    e7ee:	f018 0302 	ands.w	r3, r8, #2
    e7f2:	d002      	beq.n	e7fa <_svfprintf_r+0x262>
    e7f4:	9905      	ldr	r1, [sp, #20]
    e7f6:	3102      	adds	r1, #2
    e7f8:	9105      	str	r1, [sp, #20]
    e7fa:	f018 0184 	ands.w	r1, r8, #132	; 0x84
    e7fe:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    e800:	910d      	str	r1, [sp, #52]	; 0x34
    e802:	d143      	bne.n	e88c <_svfprintf_r+0x2f4>
    e804:	990a      	ldr	r1, [sp, #40]	; 0x28
    e806:	9805      	ldr	r0, [sp, #20]
    e808:	1a0d      	subs	r5, r1, r0
    e80a:	2d00      	cmp	r5, #0
    e80c:	dd3e      	ble.n	e88c <_svfprintf_r+0x2f4>
    e80e:	2d10      	cmp	r5, #16
    e810:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    e812:	dd2b      	ble.n	e86c <_svfprintf_r+0x2d4>
    e814:	4621      	mov	r1, r4
    e816:	f04f 0a10 	mov.w	sl, #16
    e81a:	462c      	mov	r4, r5
    e81c:	461d      	mov	r5, r3
    e81e:	e006      	b.n	e82e <_svfprintf_r+0x296>
	...
    e828:	3c10      	subs	r4, #16
    e82a:	2c10      	cmp	r4, #16
    e82c:	dd1b      	ble.n	e866 <_svfprintf_r+0x2ce>
    e82e:	3201      	adds	r2, #1
    e830:	3110      	adds	r1, #16
    e832:	4bc0      	ldr	r3, [pc, #768]	; (eb34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd4>)
    e834:	f109 0908 	add.w	r9, r9, #8
    e838:	2a07      	cmp	r2, #7
    e83a:	f849 ac04 	str.w	sl, [r9, #-4]
    e83e:	f849 3c08 	str.w	r3, [r9, #-8]
    e842:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
    e846:	ddef      	ble.n	e828 <_svfprintf_r+0x290>
    e848:	aa28      	add	r2, sp, #160	; 0xa0
    e84a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    e84e:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    e852:	f01f f9bd 	bl	2dbd0 <__ssprint_r>
    e856:	2800      	cmp	r0, #0
    e858:	f47f af71 	bne.w	e73e <_svfprintf_r+0x1a6>
    e85c:	3c10      	subs	r4, #16
    e85e:	2c10      	cmp	r4, #16
    e860:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
    e864:	dce3      	bgt.n	e82e <_svfprintf_r+0x296>
    e866:	462b      	mov	r3, r5
    e868:	4625      	mov	r5, r4
    e86a:	460c      	mov	r4, r1
    e86c:	3201      	adds	r2, #1
    e86e:	442c      	add	r4, r5
    e870:	49b0      	ldr	r1, [pc, #704]	; (eb34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd4>)
    e872:	2a07      	cmp	r2, #7
    e874:	f8c9 5004 	str.w	r5, [r9, #4]
    e878:	f8c9 1000 	str.w	r1, [r9]
    e87c:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
    e880:	f300 865b 	bgt.w	f53a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xada>
    e884:	f109 0908 	add.w	r9, r9, #8
    e888:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
    e88c:	b182      	cbz	r2, e8b0 <_svfprintf_r+0x318>
    e88e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    e890:	2101      	movs	r1, #1
    e892:	3401      	adds	r4, #1
    e894:	f10d 0083 	add.w	r0, sp, #131	; 0x83
    e898:	440a      	add	r2, r1
    e89a:	f8c9 1004 	str.w	r1, [r9, #4]
    e89e:	942a      	str	r4, [sp, #168]	; 0xa8
    e8a0:	2a07      	cmp	r2, #7
    e8a2:	f8c9 0000 	str.w	r0, [r9]
    e8a6:	9229      	str	r2, [sp, #164]	; 0xa4
    e8a8:	f300 83da 	bgt.w	f060 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x600>
    e8ac:	f109 0908 	add.w	r9, r9, #8
    e8b0:	b17b      	cbz	r3, e8d2 <_svfprintf_r+0x33a>
    e8b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    e8b4:	3402      	adds	r4, #2
    e8b6:	a921      	add	r1, sp, #132	; 0x84
    e8b8:	2202      	movs	r2, #2
    e8ba:	3301      	adds	r3, #1
    e8bc:	942a      	str	r4, [sp, #168]	; 0xa8
    e8be:	f8c9 1000 	str.w	r1, [r9]
    e8c2:	2b07      	cmp	r3, #7
    e8c4:	9329      	str	r3, [sp, #164]	; 0xa4
    e8c6:	f8c9 2004 	str.w	r2, [r9, #4]
    e8ca:	f300 83d7 	bgt.w	f07c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x61c>
    e8ce:	f109 0908 	add.w	r9, r9, #8
    e8d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e8d4:	2b80      	cmp	r3, #128	; 0x80
    e8d6:	f000 82e3 	beq.w	eea0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x440>
    e8da:	9b06      	ldr	r3, [sp, #24]
    e8dc:	9a08      	ldr	r2, [sp, #32]
    e8de:	1a9d      	subs	r5, r3, r2
    e8e0:	2d00      	cmp	r5, #0
    e8e2:	dd35      	ble.n	e950 <_svfprintf_r+0x3b8>
    e8e4:	2d10      	cmp	r5, #16
    e8e6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    e8e8:	4b93      	ldr	r3, [pc, #588]	; (eb38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd8>)
    e8ea:	dd24      	ble.n	e936 <_svfprintf_r+0x39e>
    e8ec:	4621      	mov	r1, r4
    e8ee:	f04f 0a10 	mov.w	sl, #16
    e8f2:	461c      	mov	r4, r3
    e8f4:	e002      	b.n	e8fc <_svfprintf_r+0x364>
    e8f6:	3d10      	subs	r5, #16
    e8f8:	2d10      	cmp	r5, #16
    e8fa:	dd1a      	ble.n	e932 <_svfprintf_r+0x39a>
    e8fc:	3201      	adds	r2, #1
    e8fe:	3110      	adds	r1, #16
    e900:	f8c9 4000 	str.w	r4, [r9]
    e904:	f109 0908 	add.w	r9, r9, #8
    e908:	2a07      	cmp	r2, #7
    e90a:	f849 ac04 	str.w	sl, [r9, #-4]
    e90e:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
    e912:	ddf0      	ble.n	e8f6 <_svfprintf_r+0x35e>
    e914:	aa28      	add	r2, sp, #160	; 0xa0
    e916:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    e91a:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    e91e:	f01f f957 	bl	2dbd0 <__ssprint_r>
    e922:	2800      	cmp	r0, #0
    e924:	f47f af0b 	bne.w	e73e <_svfprintf_r+0x1a6>
    e928:	3d10      	subs	r5, #16
    e92a:	2d10      	cmp	r5, #16
    e92c:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
    e930:	dce4      	bgt.n	e8fc <_svfprintf_r+0x364>
    e932:	4623      	mov	r3, r4
    e934:	460c      	mov	r4, r1
    e936:	3201      	adds	r2, #1
    e938:	442c      	add	r4, r5
    e93a:	f8c9 3000 	str.w	r3, [r9]
    e93e:	2a07      	cmp	r2, #7
    e940:	f8c9 5004 	str.w	r5, [r9, #4]
    e944:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
    e948:	f300 83c8 	bgt.w	f0dc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x67c>
    e94c:	f109 0908 	add.w	r9, r9, #8
    e950:	f418 7f80 	tst.w	r8, #256	; 0x100
    e954:	f040 8244 	bne.w	ede0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x380>
    e958:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    e95a:	9a08      	ldr	r2, [sp, #32]
    e95c:	3301      	adds	r3, #1
    e95e:	f8c9 7000 	str.w	r7, [r9]
    e962:	4414      	add	r4, r2
    e964:	f8c9 2004 	str.w	r2, [r9, #4]
    e968:	2b07      	cmp	r3, #7
    e96a:	9329      	str	r3, [sp, #164]	; 0xa4
    e96c:	942a      	str	r4, [sp, #168]	; 0xa8
    e96e:	f300 831a 	bgt.w	efa6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x546>
    e972:	f109 0908 	add.w	r9, r9, #8
    e976:	f018 0f04 	tst.w	r8, #4
    e97a:	d036      	beq.n	e9ea <_svfprintf_r+0x452>
    e97c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e97e:	9a05      	ldr	r2, [sp, #20]
    e980:	1a9d      	subs	r5, r3, r2
    e982:	2d00      	cmp	r5, #0
    e984:	dd31      	ble.n	e9ea <_svfprintf_r+0x452>
    e986:	2d10      	cmp	r5, #16
    e988:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    e98a:	dd22      	ble.n	e9d2 <_svfprintf_r+0x43a>
    e98c:	2610      	movs	r6, #16
    e98e:	e9dd 7803 	ldrd	r7, r8, [sp, #12]
    e992:	e002      	b.n	e99a <_svfprintf_r+0x402>
    e994:	3d10      	subs	r5, #16
    e996:	2d10      	cmp	r5, #16
    e998:	dd1b      	ble.n	e9d2 <_svfprintf_r+0x43a>
    e99a:	3301      	adds	r3, #1
    e99c:	3410      	adds	r4, #16
    e99e:	4a65      	ldr	r2, [pc, #404]	; (eb34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd4>)
    e9a0:	f109 0908 	add.w	r9, r9, #8
    e9a4:	2b07      	cmp	r3, #7
    e9a6:	f849 6c04 	str.w	r6, [r9, #-4]
    e9aa:	f849 2c08 	str.w	r2, [r9, #-8]
    e9ae:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
    e9b2:	ddef      	ble.n	e994 <_svfprintf_r+0x3fc>
    e9b4:	aa28      	add	r2, sp, #160	; 0xa0
    e9b6:	4641      	mov	r1, r8
    e9b8:	4638      	mov	r0, r7
    e9ba:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    e9be:	f01f f907 	bl	2dbd0 <__ssprint_r>
    e9c2:	2800      	cmp	r0, #0
    e9c4:	f47f aebb 	bne.w	e73e <_svfprintf_r+0x1a6>
    e9c8:	3d10      	subs	r5, #16
    e9ca:	2d10      	cmp	r5, #16
    e9cc:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
    e9d0:	dce3      	bgt.n	e99a <_svfprintf_r+0x402>
    e9d2:	3301      	adds	r3, #1
    e9d4:	442c      	add	r4, r5
    e9d6:	4a57      	ldr	r2, [pc, #348]	; (eb34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd4>)
    e9d8:	2b07      	cmp	r3, #7
    e9da:	f8c9 5004 	str.w	r5, [r9, #4]
    e9de:	f8c9 2000 	str.w	r2, [r9]
    e9e2:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
    e9e6:	f300 8449 	bgt.w	f27c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x81c>
    e9ea:	9b07      	ldr	r3, [sp, #28]
    e9ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e9ee:	9905      	ldr	r1, [sp, #20]
    e9f0:	428a      	cmp	r2, r1
    e9f2:	bfac      	ite	ge
    e9f4:	189b      	addge	r3, r3, r2
    e9f6:	185b      	addlt	r3, r3, r1
    e9f8:	9307      	str	r3, [sp, #28]
    e9fa:	2c00      	cmp	r4, #0
    e9fc:	f47f ae97 	bne.w	e72e <_svfprintf_r+0x196>
    ea00:	2300      	movs	r3, #0
    ea02:	9329      	str	r3, [sp, #164]	; 0xa4
    ea04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ea06:	b11b      	cbz	r3, ea10 <_svfprintf_r+0x478>
    ea08:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ea0a:	9803      	ldr	r0, [sp, #12]
    ea0c:	f01d ffd0 	bl	2c9b0 <_free_r>
    ea10:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    ea14:	465f      	mov	r7, fp
    ea16:	e5e9      	b.n	e5ec <_svfprintf_r+0x54>
    ea18:	f048 0810 	orr.w	r8, r8, #16
    ea1c:	f018 0f20 	tst.w	r8, #32
    ea20:	f000 83b9 	beq.w	f196 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x736>
    ea24:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    ea26:	3407      	adds	r4, #7
    ea28:	f024 0307 	bic.w	r3, r4, #7
    ea2c:	f103 0208 	add.w	r2, r3, #8
    ea30:	e9d3 4500 	ldrd	r4, r5, [r3]
    ea34:	920c      	str	r2, [sp, #48]	; 0x30
    ea36:	f428 6a80 	bic.w	sl, r8, #1024	; 0x400
    ea3a:	2300      	movs	r3, #0
    ea3c:	e6a3      	b.n	e786 <_svfprintf_r+0x1ee>
    ea3e:	4b3f      	ldr	r3, [pc, #252]	; (eb3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdc>)
    ea40:	f018 0f20 	tst.w	r8, #32
    ea44:	9315      	str	r3, [sp, #84]	; 0x54
    ea46:	f000 810f 	beq.w	ec68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x208>
    ea4a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    ea4c:	3407      	adds	r4, #7
    ea4e:	f024 0307 	bic.w	r3, r4, #7
    ea52:	f103 0208 	add.w	r2, r3, #8
    ea56:	e9d3 4500 	ldrd	r4, r5, [r3]
    ea5a:	920c      	str	r2, [sp, #48]	; 0x30
    ea5c:	ea54 0305 	orrs.w	r3, r4, r5
    ea60:	d003      	beq.n	ea6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa>
    ea62:	f018 0f01 	tst.w	r8, #1
    ea66:	f040 8445 	bne.w	f2f4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x894>
    ea6a:	f428 6a80 	bic.w	sl, r8, #1024	; 0x400
    ea6e:	2302      	movs	r3, #2
    ea70:	e689      	b.n	e786 <_svfprintf_r+0x1ee>
    ea72:	46c2      	mov	sl, r8
    ea74:	f01a 0f20 	tst.w	sl, #32
    ea78:	f000 8135 	beq.w	ece6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x286>
    ea7c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    ea7e:	3407      	adds	r4, #7
    ea80:	f024 0407 	bic.w	r4, r4, #7
    ea84:	e9d4 2300 	ldrd	r2, r3, [r4]
    ea88:	f104 0108 	add.w	r1, r4, #8
    ea8c:	461d      	mov	r5, r3
    ea8e:	4614      	mov	r4, r2
    ea90:	910c      	str	r1, [sp, #48]	; 0x30
    ea92:	2a00      	cmp	r2, #0
    ea94:	f173 0300 	sbcs.w	r3, r3, #0
    ea98:	da06      	bge.n	eaa8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x48>
    ea9a:	4264      	negs	r4, r4
    ea9c:	f04f 032d 	mov.w	r3, #45	; 0x2d
    eaa0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    eaa4:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
    eaa8:	ab54      	add	r3, sp, #336	; 0x150
    eaaa:	9305      	str	r3, [sp, #20]
    eaac:	9b06      	ldr	r3, [sp, #24]
    eaae:	3301      	adds	r3, #1
    eab0:	f000 8324 	beq.w	f0fc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x69c>
    eab4:	ea54 0205 	orrs.w	r2, r4, r5
    eab8:	f04f 0301 	mov.w	r3, #1
    eabc:	f02a 0880 	bic.w	r8, sl, #128	; 0x80
    eac0:	f43f ae70 	beq.w	e7a4 <_svfprintf_r+0x20c>
    eac4:	46c2      	mov	sl, r8
    eac6:	2b01      	cmp	r3, #1
    eac8:	f000 8318 	beq.w	f0fc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x69c>
    eacc:	2b02      	cmp	r3, #2
    eace:	f040 82e1 	bne.w	f094 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x634>
    ead2:	af54      	add	r7, sp, #336	; 0x150
    ead4:	9815      	ldr	r0, [sp, #84]	; 0x54
    ead6:	0923      	lsrs	r3, r4, #4
    ead8:	f004 010f 	and.w	r1, r4, #15
    eadc:	092a      	lsrs	r2, r5, #4
    eade:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    eae2:	4615      	mov	r5, r2
    eae4:	461c      	mov	r4, r3
    eae6:	5c43      	ldrb	r3, [r0, r1]
    eae8:	f807 3d01 	strb.w	r3, [r7, #-1]!
    eaec:	ea54 0305 	orrs.w	r3, r4, r5
    eaf0:	d1f1      	bne.n	ead6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x76>
    eaf2:	9b05      	ldr	r3, [sp, #20]
    eaf4:	46d0      	mov	r8, sl
    eaf6:	1bdb      	subs	r3, r3, r7
    eaf8:	9308      	str	r3, [sp, #32]
    eafa:	e667      	b.n	e7cc <_svfprintf_r+0x234>
    eafc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    eb00:	2200      	movs	r2, #0
    eb02:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    eb06:	f81b 6b01 	ldrb.w	r6, [fp], #1
    eb0a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    eb0e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    eb12:	2b09      	cmp	r3, #9
    eb14:	d9f5      	bls.n	eb02 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa2>
    eb16:	920a      	str	r2, [sp, #40]	; 0x28
    eb18:	e599      	b.n	e64e <_svfprintf_r+0xb6>
    eb1a:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    eb1e:	f89b 6000 	ldrb.w	r6, [fp]
    eb22:	e592      	b.n	e64a <_svfprintf_r+0xb2>
    eb24:	f89b 6000 	ldrb.w	r6, [fp]
    eb28:	2e68      	cmp	r6, #104	; 0x68
    eb2a:	f000 84e2 	beq.w	f4f2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa92>
    eb2e:	f048 0840 	orr.w	r8, r8, #64	; 0x40
    eb32:	e58a      	b.n	e64a <_svfprintf_r+0xb2>
    eb34:	00033da0 	.word	0x00033da0
    eb38:	00033db0 	.word	0x00033db0
    eb3c:	00033d6c 	.word	0x00033d6c
    eb40:	f89b 6000 	ldrb.w	r6, [fp]
    eb44:	f10b 0201 	add.w	r2, fp, #1
    eb48:	2e2a      	cmp	r6, #42	; 0x2a
    eb4a:	f001 81e9 	beq.w	ff20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14c0>
    eb4e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    eb52:	2b09      	cmp	r3, #9
    eb54:	f200 86bc 	bhi.w	f8d0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe70>
    eb58:	2100      	movs	r1, #0
    eb5a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    eb5e:	f812 6b01 	ldrb.w	r6, [r2], #1
    eb62:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    eb66:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    eb6a:	2b09      	cmp	r3, #9
    eb6c:	d9f5      	bls.n	eb5a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfa>
    eb6e:	9106      	str	r1, [sp, #24]
    eb70:	4693      	mov	fp, r2
    eb72:	e56c      	b.n	e64e <_svfprintf_r+0xb6>
    eb74:	f89b 6000 	ldrb.w	r6, [fp]
    eb78:	f048 0804 	orr.w	r8, r8, #4
    eb7c:	e565      	b.n	e64a <_svfprintf_r+0xb2>
    eb7e:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
    eb82:	f89b 6000 	ldrb.w	r6, [fp]
    eb86:	e560      	b.n	e64a <_svfprintf_r+0xb2>
    eb88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eb8a:	f89b 6000 	ldrb.w	r6, [fp]
    eb8e:	681a      	ldr	r2, [r3, #0]
    eb90:	3304      	adds	r3, #4
    eb92:	2a00      	cmp	r2, #0
    eb94:	920a      	str	r2, [sp, #40]	; 0x28
    eb96:	f2c0 848f 	blt.w	f4b8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa58>
    eb9a:	930c      	str	r3, [sp, #48]	; 0x30
    eb9c:	e555      	b.n	e64a <_svfprintf_r+0xb2>
    eb9e:	9e03      	ldr	r6, [sp, #12]
    eba0:	4630      	mov	r0, r6
    eba2:	f01e f9ab 	bl	2cefc <_localeconv_r>
    eba6:	6843      	ldr	r3, [r0, #4]
    eba8:	4618      	mov	r0, r3
    ebaa:	9319      	str	r3, [sp, #100]	; 0x64
    ebac:	f01c f886 	bl	2acbc <strlen>
    ebb0:	9018      	str	r0, [sp, #96]	; 0x60
    ebb2:	4604      	mov	r4, r0
    ebb4:	4630      	mov	r0, r6
    ebb6:	f01e f9a1 	bl	2cefc <_localeconv_r>
    ebba:	6883      	ldr	r3, [r0, #8]
    ebbc:	9317      	str	r3, [sp, #92]	; 0x5c
    ebbe:	2c00      	cmp	r4, #0
    ebc0:	f43f ada9 	beq.w	e716 <_svfprintf_r+0x17e>
    ebc4:	2b00      	cmp	r3, #0
    ebc6:	f43f ada6 	beq.w	e716 <_svfprintf_r+0x17e>
    ebca:	781b      	ldrb	r3, [r3, #0]
    ebcc:	f89b 6000 	ldrb.w	r6, [fp]
    ebd0:	2b00      	cmp	r3, #0
    ebd2:	f43f ad3a 	beq.w	e64a <_svfprintf_r+0xb2>
    ebd6:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    ebda:	e536      	b.n	e64a <_svfprintf_r+0xb2>
    ebdc:	f048 0801 	orr.w	r8, r8, #1
    ebe0:	f89b 6000 	ldrb.w	r6, [fp]
    ebe4:	e531      	b.n	e64a <_svfprintf_r+0xb2>
    ebe6:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
    ebea:	f89b 6000 	ldrb.w	r6, [fp]
    ebee:	2b00      	cmp	r3, #0
    ebf0:	f47f ad2b 	bne.w	e64a <_svfprintf_r+0xb2>
    ebf4:	2320      	movs	r3, #32
    ebf6:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
    ebfa:	e526      	b.n	e64a <_svfprintf_r+0xb2>
    ebfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ebfe:	f018 0f20 	tst.w	r8, #32
    ec02:	f852 3b04 	ldr.w	r3, [r2], #4
    ec06:	920c      	str	r2, [sp, #48]	; 0x30
    ec08:	f040 836c 	bne.w	f2e4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x884>
    ec0c:	f018 0f10 	tst.w	r8, #16
    ec10:	f040 8576 	bne.w	f700 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xca0>
    ec14:	f018 0f40 	tst.w	r8, #64	; 0x40
    ec18:	f040 8679 	bne.w	f90e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xeae>
    ec1c:	f418 7f00 	tst.w	r8, #512	; 0x200
    ec20:	f000 856e 	beq.w	f700 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xca0>
    ec24:	9a07      	ldr	r2, [sp, #28]
    ec26:	465f      	mov	r7, fp
    ec28:	701a      	strb	r2, [r3, #0]
    ec2a:	e4df      	b.n	e5ec <_svfprintf_r+0x54>
    ec2c:	f89b 6000 	ldrb.w	r6, [fp]
    ec30:	2e6c      	cmp	r6, #108	; 0x6c
    ec32:	f000 8456 	beq.w	f4e2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa82>
    ec36:	f048 0810 	orr.w	r8, r8, #16
    ec3a:	e506      	b.n	e64a <_svfprintf_r+0xb2>
    ec3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ec3e:	f647 0330 	movw	r3, #30768	; 0x7830
    ec42:	f048 0a02 	orr.w	sl, r8, #2
    ec46:	2500      	movs	r5, #0
    ec48:	6814      	ldr	r4, [r2, #0]
    ec4a:	3204      	adds	r2, #4
    ec4c:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    ec50:	2678      	movs	r6, #120	; 0x78
    ec52:	4bb2      	ldr	r3, [pc, #712]	; (ef1c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4bc>)
    ec54:	920c      	str	r2, [sp, #48]	; 0x30
    ec56:	9315      	str	r3, [sp, #84]	; 0x54
    ec58:	2302      	movs	r3, #2
    ec5a:	e594      	b.n	e786 <_svfprintf_r+0x1ee>
    ec5c:	4bb0      	ldr	r3, [pc, #704]	; (ef20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4c0>)
    ec5e:	f018 0f20 	tst.w	r8, #32
    ec62:	9315      	str	r3, [sp, #84]	; 0x54
    ec64:	f47f aef1 	bne.w	ea4a <_svfprintf_r+0x4b2>
    ec68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ec6a:	f018 0f10 	tst.w	r8, #16
    ec6e:	f102 0304 	add.w	r3, r2, #4
    ec72:	f040 8332 	bne.w	f2da <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x87a>
    ec76:	f018 0f40 	tst.w	r8, #64	; 0x40
    ec7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ec7c:	f000 8329 	beq.w	f2d2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x872>
    ec80:	8814      	ldrh	r4, [r2, #0]
    ec82:	2500      	movs	r5, #0
    ec84:	930c      	str	r3, [sp, #48]	; 0x30
    ec86:	e6e9      	b.n	ea5c <_svfprintf_r+0x4c4>
    ec88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ec8a:	2500      	movs	r5, #0
    ec8c:	681f      	ldr	r7, [r3, #0]
    ec8e:	1d1c      	adds	r4, r3, #4
    ec90:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
    ec94:	2f00      	cmp	r7, #0
    ec96:	f000 8440 	beq.w	f51a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xaba>
    ec9a:	9a06      	ldr	r2, [sp, #24]
    ec9c:	1c53      	adds	r3, r2, #1
    ec9e:	f000 85f1 	beq.w	f884 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe24>
    eca2:	4629      	mov	r1, r5
    eca4:	4638      	mov	r0, r7
    eca6:	f01e f9b7 	bl	2d018 <memchr>
    ecaa:	900b      	str	r0, [sp, #44]	; 0x2c
    ecac:	2800      	cmp	r0, #0
    ecae:	f000 878e 	beq.w	fbce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x116e>
    ecb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ecb4:	9506      	str	r5, [sp, #24]
    ecb6:	1bd9      	subs	r1, r3, r7
    ecb8:	940c      	str	r4, [sp, #48]	; 0x30
    ecba:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
    ecbe:	9108      	str	r1, [sp, #32]
    ecc0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    ecc4:	950b      	str	r5, [sp, #44]	; 0x2c
    ecc6:	9105      	str	r1, [sp, #20]
    ecc8:	950e      	str	r5, [sp, #56]	; 0x38
    ecca:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
    ecce:	e58a      	b.n	e7e6 <_svfprintf_r+0x24e>
    ecd0:	f048 0808 	orr.w	r8, r8, #8
    ecd4:	f89b 6000 	ldrb.w	r6, [fp]
    ecd8:	e4b7      	b.n	e64a <_svfprintf_r+0xb2>
    ecda:	f048 0a10 	orr.w	sl, r8, #16
    ecde:	f01a 0f20 	tst.w	sl, #32
    ece2:	f47f aecb 	bne.w	ea7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c>
    ece6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ece8:	f01a 0f10 	tst.w	sl, #16
    ecec:	f102 0304 	add.w	r3, r2, #4
    ecf0:	f040 82e8 	bne.w	f2c4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x864>
    ecf4:	f01a 0f40 	tst.w	sl, #64	; 0x40
    ecf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ecfa:	f000 82df 	beq.w	f2bc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x85c>
    ecfe:	f9b2 4000 	ldrsh.w	r4, [r2]
    ed02:	930c      	str	r3, [sp, #48]	; 0x30
    ed04:	17e5      	asrs	r5, r4, #31
    ed06:	4622      	mov	r2, r4
    ed08:	462b      	mov	r3, r5
    ed0a:	e6c2      	b.n	ea92 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x32>
    ed0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ed0e:	2300      	movs	r3, #0
    ed10:	2001      	movs	r0, #1
    ed12:	af3b      	add	r7, sp, #236	; 0xec
    ed14:	6811      	ldr	r1, [r2, #0]
    ed16:	3204      	adds	r2, #4
    ed18:	9005      	str	r0, [sp, #20]
    ed1a:	920c      	str	r2, [sp, #48]	; 0x30
    ed1c:	461a      	mov	r2, r3
    ed1e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
    ed22:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
    ed26:	9008      	str	r0, [sp, #32]
    ed28:	930b      	str	r3, [sp, #44]	; 0x2c
    ed2a:	9306      	str	r3, [sp, #24]
    ed2c:	930e      	str	r3, [sp, #56]	; 0x38
    ed2e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
    ed32:	e55c      	b.n	e7ee <_svfprintf_r+0x256>
    ed34:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    ed36:	f04f 32ff 	mov.w	r2, #4294967295
    ed3a:	4b7a      	ldr	r3, [pc, #488]	; (ef24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4c4>)
    ed3c:	3407      	adds	r4, #7
    ed3e:	f024 0407 	bic.w	r4, r4, #7
    ed42:	ed94 7b00 	vldr	d7, [r4]
    ed46:	f104 0108 	add.w	r1, r4, #8
    ed4a:	ec55 4b17 	vmov	r4, r5, d7
    ed4e:	910c      	str	r1, [sp, #48]	; 0x30
    ed50:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
    ed54:	ed8d 7a1c 	vstr	s14, [sp, #112]	; 0x70
    ed58:	911d      	str	r1, [sp, #116]	; 0x74
    ed5a:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    ed5e:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
    ed62:	f7ff f88d 	bl	de80 <__aeabi_dcmpun>
    ed66:	2800      	cmp	r0, #0
    ed68:	f040 82d0 	bne.w	f30c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8ac>
    ed6c:	f04f 32ff 	mov.w	r2, #4294967295
    ed70:	4b6c      	ldr	r3, [pc, #432]	; (ef24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4c4>)
    ed72:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    ed76:	f7fd fe1f 	bl	c9b8 <__aeabi_dcmple>
    ed7a:	2800      	cmp	r0, #0
    ed7c:	f040 82c6 	bne.w	f30c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8ac>
    ed80:	2200      	movs	r2, #0
    ed82:	2300      	movs	r3, #0
    ed84:	4620      	mov	r0, r4
    ed86:	4629      	mov	r1, r5
    ed88:	f7fd fe0c 	bl	c9a4 <__aeabi_dcmplt>
    ed8c:	2800      	cmp	r0, #0
    ed8e:	f040 863d 	bne.w	fa0c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfac>
    ed92:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
    ed96:	2003      	movs	r0, #3
    ed98:	4f63      	ldr	r7, [pc, #396]	; (ef28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4c8>)
    ed9a:	4b64      	ldr	r3, [pc, #400]	; (ef2c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4cc>)
    ed9c:	9005      	str	r0, [sp, #20]
    ed9e:	2100      	movs	r1, #0
    eda0:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    eda4:	9008      	str	r0, [sp, #32]
    eda6:	2e47      	cmp	r6, #71	; 0x47
    eda8:	bfd8      	it	le
    edaa:	461f      	movle	r7, r3
    edac:	910b      	str	r1, [sp, #44]	; 0x2c
    edae:	9106      	str	r1, [sp, #24]
    edb0:	910e      	str	r1, [sp, #56]	; 0x38
    edb2:	e9cd 1110 	strd	r1, r1, [sp, #64]	; 0x40
    edb6:	e516      	b.n	e7e6 <_svfprintf_r+0x24e>
    edb8:	2e00      	cmp	r6, #0
    edba:	f000 84a6 	beq.w	f70a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xcaa>
    edbe:	2201      	movs	r2, #1
    edc0:	2300      	movs	r3, #0
    edc2:	f88d 60ec 	strb.w	r6, [sp, #236]	; 0xec
    edc6:	af3b      	add	r7, sp, #236	; 0xec
    edc8:	4611      	mov	r1, r2
    edca:	9205      	str	r2, [sp, #20]
    edcc:	461a      	mov	r2, r3
    edce:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
    edd2:	9108      	str	r1, [sp, #32]
    edd4:	920b      	str	r2, [sp, #44]	; 0x2c
    edd6:	9206      	str	r2, [sp, #24]
    edd8:	920e      	str	r2, [sp, #56]	; 0x38
    edda:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
    edde:	e506      	b.n	e7ee <_svfprintf_r+0x256>
    ede0:	2e65      	cmp	r6, #101	; 0x65
    ede2:	f340 80ec 	ble.w	efbe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x55e>
    ede6:	2200      	movs	r2, #0
    ede8:	2300      	movs	r3, #0
    edea:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    edee:	f7fd fdcf 	bl	c990 <__aeabi_dcmpeq>
    edf2:	2800      	cmp	r0, #0
    edf4:	f000 80a0 	beq.w	ef38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4d8>
    edf8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    edfa:	2201      	movs	r2, #1
    edfc:	3401      	adds	r4, #1
    edfe:	494c      	ldr	r1, [pc, #304]	; (ef30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4d0>)
    ee00:	4413      	add	r3, r2
    ee02:	f8c9 2004 	str.w	r2, [r9, #4]
    ee06:	942a      	str	r4, [sp, #168]	; 0xa8
    ee08:	2b07      	cmp	r3, #7
    ee0a:	f8c9 1000 	str.w	r1, [r9]
    ee0e:	9329      	str	r3, [sp, #164]	; 0xa4
    ee10:	f300 8456 	bgt.w	f6c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc60>
    ee14:	f109 0908 	add.w	r9, r9, #8
    ee18:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ee1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ee1c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    ee1e:	4293      	cmp	r3, r2
    ee20:	f280 8226 	bge.w	f270 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x810>
    ee24:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    ee26:	9a14      	ldr	r2, [sp, #80]	; 0x50
    ee28:	3301      	adds	r3, #1
    ee2a:	9916      	ldr	r1, [sp, #88]	; 0x58
    ee2c:	4414      	add	r4, r2
    ee2e:	f8c9 2004 	str.w	r2, [r9, #4]
    ee32:	2b07      	cmp	r3, #7
    ee34:	f8c9 1000 	str.w	r1, [r9]
    ee38:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
    ee3c:	f300 8361 	bgt.w	f502 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xaa2>
    ee40:	f109 0908 	add.w	r9, r9, #8
    ee44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ee46:	1e5d      	subs	r5, r3, #1
    ee48:	2d00      	cmp	r5, #0
    ee4a:	f77f ad94 	ble.w	e976 <_svfprintf_r+0x3de>
    ee4e:	2d10      	cmp	r5, #16
    ee50:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    ee52:	4b38      	ldr	r3, [pc, #224]	; (ef34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4d4>)
    ee54:	f340 841b 	ble.w	f68e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc2e>
    ee58:	4619      	mov	r1, r3
    ee5a:	2610      	movs	r6, #16
    ee5c:	4623      	mov	r3, r4
    ee5e:	460c      	mov	r4, r1
    ee60:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
    ee64:	e003      	b.n	ee6e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x40e>
    ee66:	3d10      	subs	r5, #16
    ee68:	2d10      	cmp	r5, #16
    ee6a:	f340 840d 	ble.w	f688 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc28>
    ee6e:	3201      	adds	r2, #1
    ee70:	3310      	adds	r3, #16
    ee72:	f8c9 4000 	str.w	r4, [r9]
    ee76:	f109 0908 	add.w	r9, r9, #8
    ee7a:	2a07      	cmp	r2, #7
    ee7c:	f849 6c04 	str.w	r6, [r9, #-4]
    ee80:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
    ee84:	ddef      	ble.n	ee66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x406>
    ee86:	aa28      	add	r2, sp, #160	; 0xa0
    ee88:	4651      	mov	r1, sl
    ee8a:	4638      	mov	r0, r7
    ee8c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    ee90:	f01e fe9e 	bl	2dbd0 <__ssprint_r>
    ee94:	2800      	cmp	r0, #0
    ee96:	f47f ac52 	bne.w	e73e <_svfprintf_r+0x1a6>
    ee9a:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
    ee9e:	e7e2      	b.n	ee66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x406>
    eea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    eea2:	9a05      	ldr	r2, [sp, #20]
    eea4:	1a9d      	subs	r5, r3, r2
    eea6:	2d00      	cmp	r5, #0
    eea8:	f77f ad17 	ble.w	e8da <_svfprintf_r+0x342>
    eeac:	2d10      	cmp	r5, #16
    eeae:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    eeb0:	4b20      	ldr	r3, [pc, #128]	; (ef34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4d4>)
    eeb2:	dd24      	ble.n	eefe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x49e>
    eeb4:	4621      	mov	r1, r4
    eeb6:	f04f 0a10 	mov.w	sl, #16
    eeba:	461c      	mov	r4, r3
    eebc:	e002      	b.n	eec4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x464>
    eebe:	3d10      	subs	r5, #16
    eec0:	2d10      	cmp	r5, #16
    eec2:	dd1a      	ble.n	eefa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x49a>
    eec4:	3201      	adds	r2, #1
    eec6:	3110      	adds	r1, #16
    eec8:	f8c9 4000 	str.w	r4, [r9]
    eecc:	f109 0908 	add.w	r9, r9, #8
    eed0:	2a07      	cmp	r2, #7
    eed2:	f849 ac04 	str.w	sl, [r9, #-4]
    eed6:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
    eeda:	ddf0      	ble.n	eebe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x45e>
    eedc:	aa28      	add	r2, sp, #160	; 0xa0
    eede:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    eee2:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    eee6:	f01e fe73 	bl	2dbd0 <__ssprint_r>
    eeea:	2800      	cmp	r0, #0
    eeec:	f47f ac27 	bne.w	e73e <_svfprintf_r+0x1a6>
    eef0:	3d10      	subs	r5, #16
    eef2:	2d10      	cmp	r5, #16
    eef4:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
    eef8:	dce4      	bgt.n	eec4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x464>
    eefa:	4623      	mov	r3, r4
    eefc:	460c      	mov	r4, r1
    eefe:	3201      	adds	r2, #1
    ef00:	442c      	add	r4, r5
    ef02:	f8c9 3000 	str.w	r3, [r9]
    ef06:	2a07      	cmp	r2, #7
    ef08:	f8c9 5004 	str.w	r5, [r9, #4]
    ef0c:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
    ef10:	f300 83c9 	bgt.w	f6a6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc46>
    ef14:	f109 0908 	add.w	r9, r9, #8
    ef18:	e4df      	b.n	e8da <_svfprintf_r+0x342>
    ef1a:	bf00      	nop
    ef1c:	00033d6c 	.word	0x00033d6c
    ef20:	00033d80 	.word	0x00033d80
    ef24:	7fefffff 	.word	0x7fefffff
    ef28:	00033d60 	.word	0x00033d60
    ef2c:	00033d5c 	.word	0x00033d5c
    ef30:	00033d9c 	.word	0x00033d9c
    ef34:	00033db0 	.word	0x00033db0
    ef38:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ef3a:	2b00      	cmp	r3, #0
    ef3c:	f300 814c 	bgt.w	f1d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x778>
    ef40:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    ef42:	2101      	movs	r1, #1
    ef44:	3401      	adds	r4, #1
    ef46:	48c8      	ldr	r0, [pc, #800]	; (f268 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x808>)
    ef48:	440a      	add	r2, r1
    ef4a:	f8c9 1004 	str.w	r1, [r9, #4]
    ef4e:	942a      	str	r4, [sp, #168]	; 0xa8
    ef50:	2a07      	cmp	r2, #7
    ef52:	f8c9 0000 	str.w	r0, [r9]
    ef56:	9229      	str	r2, [sp, #164]	; 0xa4
    ef58:	f300 862b 	bgt.w	fbb2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1152>
    ef5c:	f109 0908 	add.w	r9, r9, #8
    ef60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ef62:	431a      	orrs	r2, r3
    ef64:	f000 866a 	beq.w	fc3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11dc>
    ef68:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    ef6a:	9914      	ldr	r1, [sp, #80]	; 0x50
    ef6c:	3201      	adds	r2, #1
    ef6e:	9816      	ldr	r0, [sp, #88]	; 0x58
    ef70:	440c      	add	r4, r1
    ef72:	f8c9 1004 	str.w	r1, [r9, #4]
    ef76:	2a07      	cmp	r2, #7
    ef78:	f8c9 0000 	str.w	r0, [r9]
    ef7c:	942a      	str	r4, [sp, #168]	; 0xa8
    ef7e:	9229      	str	r2, [sp, #164]	; 0xa4
    ef80:	f300 8631 	bgt.w	fbe6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1186>
    ef84:	f109 0908 	add.w	r9, r9, #8
    ef88:	2b00      	cmp	r3, #0
    ef8a:	f2c0 86ca 	blt.w	fd22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12c2>
    ef8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ef90:	3201      	adds	r2, #1
    ef92:	f8c9 7000 	str.w	r7, [r9]
    ef96:	441c      	add	r4, r3
    ef98:	2a07      	cmp	r2, #7
    ef9a:	f8c9 3004 	str.w	r3, [r9, #4]
    ef9e:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
    efa2:	f77f ace6 	ble.w	e972 <_svfprintf_r+0x3da>
    efa6:	aa28      	add	r2, sp, #160	; 0xa0
    efa8:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    efac:	f01e fe10 	bl	2dbd0 <__ssprint_r>
    efb0:	2800      	cmp	r0, #0
    efb2:	f47f abc4 	bne.w	e73e <_svfprintf_r+0x1a6>
    efb6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    efb8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    efbc:	e4db      	b.n	e976 <_svfprintf_r+0x3de>
    efbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    efc0:	3401      	adds	r4, #1
    efc2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    efc4:	f109 0508 	add.w	r5, r9, #8
    efc8:	2a01      	cmp	r2, #1
    efca:	f103 0601 	add.w	r6, r3, #1
    efce:	f340 80f0 	ble.w	f1b2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x752>
    efd2:	2301      	movs	r3, #1
    efd4:	2e07      	cmp	r6, #7
    efd6:	f8c9 7000 	str.w	r7, [r9]
    efda:	f8c9 3004 	str.w	r3, [r9, #4]
    efde:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
    efe2:	f300 8345 	bgt.w	f670 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc10>
    efe6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    efe8:	3601      	adds	r6, #1
    efea:	9a16      	ldr	r2, [sp, #88]	; 0x58
    efec:	441c      	add	r4, r3
    efee:	2e07      	cmp	r6, #7
    eff0:	602a      	str	r2, [r5, #0]
    eff2:	606b      	str	r3, [r5, #4]
    eff4:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
    eff8:	f300 832e 	bgt.w	f658 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbf8>
    effc:	3508      	adds	r5, #8
    effe:	1c73      	adds	r3, r6, #1
    f000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f002:	f105 0908 	add.w	r9, r5, #8
    f006:	9308      	str	r3, [sp, #32]
    f008:	f102 3aff 	add.w	sl, r2, #4294967295
    f00c:	9306      	str	r3, [sp, #24]
    f00e:	2200      	movs	r2, #0
    f010:	2300      	movs	r3, #0
    f012:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    f016:	f7fd fcbb 	bl	c990 <__aeabi_dcmpeq>
    f01a:	2800      	cmp	r0, #0
    f01c:	d17c      	bne.n	f118 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6b8>
    f01e:	9b06      	ldr	r3, [sp, #24]
    f020:	3701      	adds	r7, #1
    f022:	4454      	add	r4, sl
    f024:	2b07      	cmp	r3, #7
    f026:	9329      	str	r3, [sp, #164]	; 0xa4
    f028:	942a      	str	r4, [sp, #168]	; 0xa8
    f02a:	e9c5 7a00 	strd	r7, sl, [r5]
    f02e:	f300 8248 	bgt.w	f4c2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa62>
    f032:	f105 0310 	add.w	r3, r5, #16
    f036:	1cb2      	adds	r2, r6, #2
    f038:	464d      	mov	r5, r9
    f03a:	4699      	mov	r9, r3
    f03c:	9206      	str	r2, [sp, #24]
    f03e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    f040:	ab24      	add	r3, sp, #144	; 0x90
    f042:	4414      	add	r4, r2
    f044:	606a      	str	r2, [r5, #4]
    f046:	9a06      	ldr	r2, [sp, #24]
    f048:	942a      	str	r4, [sp, #168]	; 0xa8
    f04a:	2a07      	cmp	r2, #7
    f04c:	9229      	str	r2, [sp, #164]	; 0xa4
    f04e:	602b      	str	r3, [r5, #0]
    f050:	f77f ac91 	ble.w	e976 <_svfprintf_r+0x3de>
    f054:	e7a7      	b.n	efa6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x546>
    f056:	9206      	str	r2, [sp, #24]
    f058:	af54      	add	r7, sp, #336	; 0x150
    f05a:	9208      	str	r2, [sp, #32]
    f05c:	f7ff bbb6 	b.w	e7cc <_svfprintf_r+0x234>
    f060:	aa28      	add	r2, sp, #160	; 0xa0
    f062:	931b      	str	r3, [sp, #108]	; 0x6c
    f064:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    f068:	f01e fdb2 	bl	2dbd0 <__ssprint_r>
    f06c:	2800      	cmp	r0, #0
    f06e:	f47f ab66 	bne.w	e73e <_svfprintf_r+0x1a6>
    f072:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    f074:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    f078:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f07a:	e419      	b.n	e8b0 <_svfprintf_r+0x318>
    f07c:	aa28      	add	r2, sp, #160	; 0xa0
    f07e:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    f082:	f01e fda5 	bl	2dbd0 <__ssprint_r>
    f086:	2800      	cmp	r0, #0
    f088:	f47f ab59 	bne.w	e73e <_svfprintf_r+0x1a6>
    f08c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    f08e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    f092:	e41e      	b.n	e8d2 <_svfprintf_r+0x33a>
    f094:	a954      	add	r1, sp, #336	; 0x150
    f096:	e000      	b.n	f09a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x63a>
    f098:	4639      	mov	r1, r7
    f09a:	08e2      	lsrs	r2, r4, #3
    f09c:	f004 0307 	and.w	r3, r4, #7
    f0a0:	08e8      	lsrs	r0, r5, #3
    f0a2:	1e4f      	subs	r7, r1, #1
    f0a4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    f0a8:	3330      	adds	r3, #48	; 0x30
    f0aa:	4605      	mov	r5, r0
    f0ac:	4614      	mov	r4, r2
    f0ae:	f801 3c01 	strb.w	r3, [r1, #-1]
    f0b2:	ea54 0205 	orrs.w	r2, r4, r5
    f0b6:	d1ef      	bne.n	f098 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x638>
    f0b8:	2b30      	cmp	r3, #48	; 0x30
    f0ba:	f43f ad1a 	beq.w	eaf2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x92>
    f0be:	f01a 0f01 	tst.w	sl, #1
    f0c2:	f43f ad16 	beq.w	eaf2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x92>
    f0c6:	3902      	subs	r1, #2
    f0c8:	9a05      	ldr	r2, [sp, #20]
    f0ca:	2330      	movs	r3, #48	; 0x30
    f0cc:	46d0      	mov	r8, sl
    f0ce:	1a52      	subs	r2, r2, r1
    f0d0:	f807 3c01 	strb.w	r3, [r7, #-1]
    f0d4:	460f      	mov	r7, r1
    f0d6:	9208      	str	r2, [sp, #32]
    f0d8:	f7ff bb78 	b.w	e7cc <_svfprintf_r+0x234>
    f0dc:	aa28      	add	r2, sp, #160	; 0xa0
    f0de:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    f0e2:	f01e fd75 	bl	2dbd0 <__ssprint_r>
    f0e6:	2800      	cmp	r0, #0
    f0e8:	f47f ab29 	bne.w	e73e <_svfprintf_r+0x1a6>
    f0ec:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    f0ee:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    f0f2:	e42d      	b.n	e950 <_svfprintf_r+0x3b8>
    f0f4:	9306      	str	r3, [sp, #24]
    f0f6:	af54      	add	r7, sp, #336	; 0x150
    f0f8:	f7ff bb68 	b.w	e7cc <_svfprintf_r+0x234>
    f0fc:	2d00      	cmp	r5, #0
    f0fe:	bf08      	it	eq
    f100:	2c0a      	cmpeq	r4, #10
    f102:	f080 8186 	bcs.w	f412 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9b2>
    f106:	3430      	adds	r4, #48	; 0x30
    f108:	af54      	add	r7, sp, #336	; 0x150
    f10a:	2301      	movs	r3, #1
    f10c:	46d0      	mov	r8, sl
    f10e:	f807 4d01 	strb.w	r4, [r7, #-1]!
    f112:	9308      	str	r3, [sp, #32]
    f114:	f7ff bb5a 	b.w	e7cc <_svfprintf_r+0x234>
    f118:	f1ba 0f00 	cmp.w	sl, #0
    f11c:	dd8f      	ble.n	f03e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5de>
    f11e:	f1ba 0f10 	cmp.w	sl, #16
    f122:	f340 86a9 	ble.w	fe78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1418>
    f126:	4b51      	ldr	r3, [pc, #324]	; (f26c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x80c>)
    f128:	4622      	mov	r2, r4
    f12a:	2710      	movs	r7, #16
    f12c:	f8dd 900c 	ldr.w	r9, [sp, #12]
    f130:	9908      	ldr	r1, [sp, #32]
    f132:	461c      	mov	r4, r3
    f134:	e006      	b.n	f144 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6e4>
    f136:	f1aa 0a10 	sub.w	sl, sl, #16
    f13a:	1c71      	adds	r1, r6, #1
    f13c:	f1ba 0f10 	cmp.w	sl, #16
    f140:	f340 82ca 	ble.w	f6d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc78>
    f144:	3210      	adds	r2, #16
    f146:	2907      	cmp	r1, #7
    f148:	602c      	str	r4, [r5, #0]
    f14a:	460e      	mov	r6, r1
    f14c:	606f      	str	r7, [r5, #4]
    f14e:	f105 0508 	add.w	r5, r5, #8
    f152:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
    f156:	ddee      	ble.n	f136 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6d6>
    f158:	aa28      	add	r2, sp, #160	; 0xa0
    f15a:	9904      	ldr	r1, [sp, #16]
    f15c:	4648      	mov	r0, r9
    f15e:	ad2b      	add	r5, sp, #172	; 0xac
    f160:	f01e fd36 	bl	2dbd0 <__ssprint_r>
    f164:	2800      	cmp	r0, #0
    f166:	f47f aaea 	bne.w	e73e <_svfprintf_r+0x1a6>
    f16a:	e9dd 6229 	ldrd	r6, r2, [sp, #164]	; 0xa4
    f16e:	e7e2      	b.n	f136 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6d6>
    f170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f172:	f018 0f10 	tst.w	r8, #16
    f176:	f103 0204 	add.w	r2, r3, #4
    f17a:	f040 8098 	bne.w	f2ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84e>
    f17e:	f018 0f40 	tst.w	r8, #64	; 0x40
    f182:	f000 808f 	beq.w	f2a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x844>
    f186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f188:	46c2      	mov	sl, r8
    f18a:	2500      	movs	r5, #0
    f18c:	920c      	str	r2, [sp, #48]	; 0x30
    f18e:	881c      	ldrh	r4, [r3, #0]
    f190:	2301      	movs	r3, #1
    f192:	f7ff baf8 	b.w	e786 <_svfprintf_r+0x1ee>
    f196:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f198:	f018 0f10 	tst.w	r8, #16
    f19c:	f102 0304 	add.w	r3, r2, #4
    f1a0:	d17b      	bne.n	f29a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x83a>
    f1a2:	f018 0f40 	tst.w	r8, #64	; 0x40
    f1a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f1a8:	d073      	beq.n	f292 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x832>
    f1aa:	8814      	ldrh	r4, [r2, #0]
    f1ac:	2500      	movs	r5, #0
    f1ae:	930c      	str	r3, [sp, #48]	; 0x30
    f1b0:	e441      	b.n	ea36 <_svfprintf_r+0x49e>
    f1b2:	f018 0f01 	tst.w	r8, #1
    f1b6:	f47f af0c 	bne.w	efd2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x572>
    f1ba:	2201      	movs	r2, #1
    f1bc:	2e07      	cmp	r6, #7
    f1be:	f8c9 7000 	str.w	r7, [r9]
    f1c2:	f8c9 2004 	str.w	r2, [r9, #4]
    f1c6:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
    f1ca:	f300 817a 	bgt.w	f4c2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa62>
    f1ce:	3302      	adds	r3, #2
    f1d0:	f109 0910 	add.w	r9, r9, #16
    f1d4:	9306      	str	r3, [sp, #24]
    f1d6:	e732      	b.n	f03e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5de>
    f1d8:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
    f1dc:	4293      	cmp	r3, r2
    f1de:	bfa8      	it	ge
    f1e0:	4613      	movge	r3, r2
    f1e2:	2b00      	cmp	r3, #0
    f1e4:	461d      	mov	r5, r3
    f1e6:	dd0d      	ble.n	f204 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7a4>
    f1e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    f1ea:	442c      	add	r4, r5
    f1ec:	f8c9 7000 	str.w	r7, [r9]
    f1f0:	3301      	adds	r3, #1
    f1f2:	942a      	str	r4, [sp, #168]	; 0xa8
    f1f4:	f8c9 5004 	str.w	r5, [r9, #4]
    f1f8:	2b07      	cmp	r3, #7
    f1fa:	9329      	str	r3, [sp, #164]	; 0xa4
    f1fc:	f300 841a 	bgt.w	fa34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfd4>
    f200:	f109 0908 	add.w	r9, r9, #8
    f204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f206:	2d00      	cmp	r5, #0
    f208:	bfa8      	it	ge
    f20a:	1b5b      	subge	r3, r3, r5
    f20c:	2b00      	cmp	r3, #0
    f20e:	461d      	mov	r5, r3
    f210:	f340 81bd 	ble.w	f58e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb2e>
    f214:	2d10      	cmp	r5, #16
    f216:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    f218:	4b14      	ldr	r3, [pc, #80]	; (f26c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x80c>)
    f21a:	f340 81a2 	ble.w	f562 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb02>
    f21e:	4621      	mov	r1, r4
    f220:	9706      	str	r7, [sp, #24]
    f222:	2610      	movs	r6, #16
    f224:	461f      	mov	r7, r3
    f226:	e9dd a403 	ldrd	sl, r4, [sp, #12]
    f22a:	e003      	b.n	f234 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7d4>
    f22c:	3d10      	subs	r5, #16
    f22e:	2d10      	cmp	r5, #16
    f230:	f340 8194 	ble.w	f55c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xafc>
    f234:	3201      	adds	r2, #1
    f236:	3110      	adds	r1, #16
    f238:	f8c9 7000 	str.w	r7, [r9]
    f23c:	f109 0908 	add.w	r9, r9, #8
    f240:	2a07      	cmp	r2, #7
    f242:	f849 6c04 	str.w	r6, [r9, #-4]
    f246:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
    f24a:	ddef      	ble.n	f22c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7cc>
    f24c:	aa28      	add	r2, sp, #160	; 0xa0
    f24e:	4621      	mov	r1, r4
    f250:	4650      	mov	r0, sl
    f252:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    f256:	f01e fcbb 	bl	2dbd0 <__ssprint_r>
    f25a:	2800      	cmp	r0, #0
    f25c:	f47f aa6f 	bne.w	e73e <_svfprintf_r+0x1a6>
    f260:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
    f264:	e7e2      	b.n	f22c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7cc>
    f266:	bf00      	nop
    f268:	00033d9c 	.word	0x00033d9c
    f26c:	00033db0 	.word	0x00033db0
    f270:	f018 0f01 	tst.w	r8, #1
    f274:	f47f add6 	bne.w	ee24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c4>
    f278:	f7ff bb7d 	b.w	e976 <_svfprintf_r+0x3de>
    f27c:	aa28      	add	r2, sp, #160	; 0xa0
    f27e:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    f282:	f01e fca5 	bl	2dbd0 <__ssprint_r>
    f286:	2800      	cmp	r0, #0
    f288:	f47f aa59 	bne.w	e73e <_svfprintf_r+0x1a6>
    f28c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    f28e:	f7ff bbac 	b.w	e9ea <_svfprintf_r+0x452>
    f292:	f418 7f00 	tst.w	r8, #512	; 0x200
    f296:	f040 8320 	bne.w	f8da <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe7a>
    f29a:	6814      	ldr	r4, [r2, #0]
    f29c:	2500      	movs	r5, #0
    f29e:	930c      	str	r3, [sp, #48]	; 0x30
    f2a0:	f7ff bbc9 	b.w	ea36 <_svfprintf_r+0x49e>
    f2a4:	f418 7f00 	tst.w	r8, #512	; 0x200
    f2a8:	f040 831c 	bne.w	f8e4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe84>
    f2ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f2ae:	681c      	ldr	r4, [r3, #0]
    f2b0:	46c2      	mov	sl, r8
    f2b2:	920c      	str	r2, [sp, #48]	; 0x30
    f2b4:	2301      	movs	r3, #1
    f2b6:	2500      	movs	r5, #0
    f2b8:	f7ff ba65 	b.w	e786 <_svfprintf_r+0x1ee>
    f2bc:	f41a 7f00 	tst.w	sl, #512	; 0x200
    f2c0:	f040 831d 	bne.w	f8fe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe9e>
    f2c4:	6814      	ldr	r4, [r2, #0]
    f2c6:	930c      	str	r3, [sp, #48]	; 0x30
    f2c8:	17e5      	asrs	r5, r4, #31
    f2ca:	4622      	mov	r2, r4
    f2cc:	462b      	mov	r3, r5
    f2ce:	f7ff bbe0 	b.w	ea92 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x32>
    f2d2:	f418 7f00 	tst.w	r8, #512	; 0x200
    f2d6:	f040 830d 	bne.w	f8f4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe94>
    f2da:	6814      	ldr	r4, [r2, #0]
    f2dc:	2500      	movs	r5, #0
    f2de:	930c      	str	r3, [sp, #48]	; 0x30
    f2e0:	f7ff bbbc 	b.w	ea5c <_svfprintf_r+0x4c4>
    f2e4:	9a07      	ldr	r2, [sp, #28]
    f2e6:	465f      	mov	r7, fp
    f2e8:	4610      	mov	r0, r2
    f2ea:	17d1      	asrs	r1, r2, #31
    f2ec:	e9c3 0100 	strd	r0, r1, [r3]
    f2f0:	f7ff b97c 	b.w	e5ec <_svfprintf_r+0x54>
    f2f4:	2330      	movs	r3, #48	; 0x30
    f2f6:	f048 0802 	orr.w	r8, r8, #2
    f2fa:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
    f2fe:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
    f302:	f428 6a80 	bic.w	sl, r8, #1024	; 0x400
    f306:	2302      	movs	r3, #2
    f308:	f7ff ba3d 	b.w	e786 <_svfprintf_r+0x1ee>
    f30c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    f310:	4602      	mov	r2, r0
    f312:	460b      	mov	r3, r1
    f314:	f7fe fdb4 	bl	de80 <__aeabi_dcmpun>
    f318:	2800      	cmp	r0, #0
    f31a:	f040 85a2 	bne.w	fe62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1402>
    f31e:	f026 0a20 	bic.w	sl, r6, #32
    f322:	f1ba 0f41 	cmp.w	sl, #65	; 0x41
    f326:	f040 82be 	bne.w	f8a6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe46>
    f32a:	2e61      	cmp	r6, #97	; 0x61
    f32c:	f04f 0230 	mov.w	r2, #48	; 0x30
    f330:	bf14      	ite	ne
    f332:	2358      	movne	r3, #88	; 0x58
    f334:	2378      	moveq	r3, #120	; 0x78
    f336:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
    f33a:	f048 0202 	orr.w	r2, r8, #2
    f33e:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
    f342:	9b06      	ldr	r3, [sp, #24]
    f344:	9205      	str	r2, [sp, #20]
    f346:	2b63      	cmp	r3, #99	; 0x63
    f348:	f300 82ed 	bgt.w	f926 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xec6>
    f34c:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    f350:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f352:	af3b      	add	r7, sp, #236	; 0xec
    f354:	900b      	str	r0, [sp, #44]	; 0x2c
    f356:	2b00      	cmp	r3, #0
    f358:	f2c0 837d 	blt.w	fa56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff6>
    f35c:	2300      	movs	r3, #0
    f35e:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
    f362:	930d      	str	r3, [sp, #52]	; 0x34
    f364:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
    f368:	f1ba 0f41 	cmp.w	sl, #65	; 0x41
    f36c:	f000 837c 	beq.w	fa68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1008>
    f370:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
    f374:	f000 83f8 	beq.w	fb68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1108>
    f378:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
    f37c:	f040 8502 	bne.w	fd84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1324>
    f380:	9b06      	ldr	r3, [sp, #24]
    f382:	a826      	add	r0, sp, #152	; 0x98
    f384:	a923      	add	r1, sp, #140	; 0x8c
    f386:	1c5c      	adds	r4, r3, #1
    f388:	ab22      	add	r3, sp, #136	; 0x88
    f38a:	e9cd 1000 	strd	r1, r0, [sp]
    f38e:	4622      	mov	r2, r4
    f390:	2102      	movs	r1, #2
    f392:	9803      	ldr	r0, [sp, #12]
    f394:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
    f398:	f000 fdee 	bl	ff78 <_dtoa_r>
    f39c:	4607      	mov	r7, r0
    f39e:	443c      	add	r4, r7
    f3a0:	2200      	movs	r2, #0
    f3a2:	2300      	movs	r3, #0
    f3a4:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
    f3a8:	f7fd faf2 	bl	c990 <__aeabi_dcmpeq>
    f3ac:	2800      	cmp	r0, #0
    f3ae:	f000 8456 	beq.w	fc5e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11fe>
    f3b2:	4623      	mov	r3, r4
    f3b4:	1bdb      	subs	r3, r3, r7
    f3b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
    f3ba:	930f      	str	r3, [sp, #60]	; 0x3c
    f3bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f3be:	930e      	str	r3, [sp, #56]	; 0x38
    f3c0:	f000 82c6 	beq.w	f950 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xef0>
    f3c4:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
    f3c8:	f040 82ca 	bne.w	f960 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf00>
    f3cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f3ce:	2b00      	cmp	r3, #0
    f3d0:	9b06      	ldr	r3, [sp, #24]
    f3d2:	f340 8560 	ble.w	fe96 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1436>
    f3d6:	2b00      	cmp	r3, #0
    f3d8:	f040 8537 	bne.w	fe4a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13ea>
    f3dc:	9b05      	ldr	r3, [sp, #20]
    f3de:	07dd      	lsls	r5, r3, #31
    f3e0:	f100 8533 	bmi.w	fe4a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13ea>
    f3e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f3e6:	2666      	movs	r6, #102	; 0x66
    f3e8:	9308      	str	r3, [sp, #32]
    f3ea:	9b05      	ldr	r3, [sp, #20]
    f3ec:	055a      	lsls	r2, r3, #21
    f3ee:	f100 8471 	bmi.w	fcd4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1274>
    f3f2:	9b08      	ldr	r3, [sp, #32]
    f3f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f3f8:	9305      	str	r3, [sp, #20]
    f3fa:	2300      	movs	r3, #0
    f3fc:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
    f400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f402:	2b00      	cmp	r3, #0
    f404:	f040 829d 	bne.w	f942 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xee2>
    f408:	9306      	str	r3, [sp, #24]
    f40a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
    f40e:	f7ff b9ea 	b.w	e7e6 <_svfprintf_r+0x24e>
    f412:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
    f416:	2200      	movs	r2, #0
    f418:	f8cd b020 	str.w	fp, [sp, #32]
    f41c:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
    f420:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    f424:	4693      	mov	fp, r2
    f426:	46b1      	mov	r9, r6
    f428:	461e      	mov	r6, r3
    f42a:	220a      	movs	r2, #10
    f42c:	2300      	movs	r3, #0
    f42e:	4620      	mov	r0, r4
    f430:	4629      	mov	r1, r5
    f432:	f7fd fb57 	bl	cae4 <__aeabi_uldivmod>
    f436:	3230      	adds	r2, #48	; 0x30
    f438:	f10b 0b01 	add.w	fp, fp, #1
    f43c:	f108 37ff 	add.w	r7, r8, #4294967295
    f440:	f808 2c01 	strb.w	r2, [r8, #-1]
    f444:	b186      	cbz	r6, f468 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa08>
    f446:	2d00      	cmp	r5, #0
    f448:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f44a:	bf08      	it	eq
    f44c:	2c0a      	cmpeq	r4, #10
    f44e:	781a      	ldrb	r2, [r3, #0]
    f450:	bf2c      	ite	cs
    f452:	2301      	movcs	r3, #1
    f454:	2300      	movcc	r3, #0
    f456:	2aff      	cmp	r2, #255	; 0xff
    f458:	bf0c      	ite	eq
    f45a:	2300      	moveq	r3, #0
    f45c:	f003 0301 	andne.w	r3, r3, #1
    f460:	b113      	cbz	r3, f468 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa08>
    f462:	455a      	cmp	r2, fp
    f464:	f000 8423 	beq.w	fcae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x124e>
    f468:	4620      	mov	r0, r4
    f46a:	4629      	mov	r1, r5
    f46c:	2300      	movs	r3, #0
    f46e:	220a      	movs	r2, #10
    f470:	f7fd fb38 	bl	cae4 <__aeabi_uldivmod>
    f474:	4604      	mov	r4, r0
    f476:	460d      	mov	r5, r1
    f478:	46b8      	mov	r8, r7
    f47a:	ea54 0305 	orrs.w	r3, r4, r5
    f47e:	d1d4      	bne.n	f42a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9ca>
    f480:	9b05      	ldr	r3, [sp, #20]
    f482:	464e      	mov	r6, r9
    f484:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
    f488:	46d0      	mov	r8, sl
    f48a:	1bdb      	subs	r3, r3, r7
    f48c:	f8dd b020 	ldr.w	fp, [sp, #32]
    f490:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    f494:	9308      	str	r3, [sp, #32]
    f496:	f7ff b999 	b.w	e7cc <_svfprintf_r+0x234>
    f49a:	2140      	movs	r1, #64	; 0x40
    f49c:	9803      	ldr	r0, [sp, #12]
    f49e:	f01a fecd 	bl	2a23c <_malloc_r>
    f4a2:	9b04      	ldr	r3, [sp, #16]
    f4a4:	6018      	str	r0, [r3, #0]
    f4a6:	6118      	str	r0, [r3, #16]
    f4a8:	2800      	cmp	r0, #0
    f4aa:	f000 854c 	beq.w	ff46 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14e6>
    f4ae:	2340      	movs	r3, #64	; 0x40
    f4b0:	9a04      	ldr	r2, [sp, #16]
    f4b2:	6153      	str	r3, [r2, #20]
    f4b4:	f7ff b887 	b.w	e5c6 <_svfprintf_r+0x2e>
    f4b8:	4252      	negs	r2, r2
    f4ba:	930c      	str	r3, [sp, #48]	; 0x30
    f4bc:	920a      	str	r2, [sp, #40]	; 0x28
    f4be:	f7ff bb5b 	b.w	eb78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x118>
    f4c2:	aa28      	add	r2, sp, #160	; 0xa0
    f4c4:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    f4c8:	f01e fb82 	bl	2dbd0 <__ssprint_r>
    f4cc:	2800      	cmp	r0, #0
    f4ce:	f47f a936 	bne.w	e73e <_svfprintf_r+0x1a6>
    f4d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    f4d4:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
    f4d8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    f4da:	ad2b      	add	r5, sp, #172	; 0xac
    f4dc:	3301      	adds	r3, #1
    f4de:	9306      	str	r3, [sp, #24]
    f4e0:	e5ad      	b.n	f03e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5de>
    f4e2:	f89b 6001 	ldrb.w	r6, [fp, #1]
    f4e6:	f048 0820 	orr.w	r8, r8, #32
    f4ea:	f10b 0b01 	add.w	fp, fp, #1
    f4ee:	f7ff b8ac 	b.w	e64a <_svfprintf_r+0xb2>
    f4f2:	f89b 6001 	ldrb.w	r6, [fp, #1]
    f4f6:	f448 7800 	orr.w	r8, r8, #512	; 0x200
    f4fa:	f10b 0b01 	add.w	fp, fp, #1
    f4fe:	f7ff b8a4 	b.w	e64a <_svfprintf_r+0xb2>
    f502:	aa28      	add	r2, sp, #160	; 0xa0
    f504:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    f508:	f01e fb62 	bl	2dbd0 <__ssprint_r>
    f50c:	2800      	cmp	r0, #0
    f50e:	f47f a916 	bne.w	e73e <_svfprintf_r+0x1a6>
    f512:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    f514:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    f518:	e494      	b.n	ee44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e4>
    f51a:	9b06      	ldr	r3, [sp, #24]
    f51c:	463a      	mov	r2, r7
    f51e:	9706      	str	r7, [sp, #24]
    f520:	2b06      	cmp	r3, #6
    f522:	970e      	str	r7, [sp, #56]	; 0x38
    f524:	bf28      	it	cs
    f526:	2306      	movcs	r3, #6
    f528:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
    f52c:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
    f530:	9305      	str	r3, [sp, #20]
    f532:	9308      	str	r3, [sp, #32]
    f534:	4fc1      	ldr	r7, [pc, #772]	; (f83c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xddc>)
    f536:	f7ff b956 	b.w	e7e6 <_svfprintf_r+0x24e>
    f53a:	aa28      	add	r2, sp, #160	; 0xa0
    f53c:	931b      	str	r3, [sp, #108]	; 0x6c
    f53e:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    f542:	f01e fb45 	bl	2dbd0 <__ssprint_r>
    f546:	2800      	cmp	r0, #0
    f548:	f47f a8f9 	bne.w	e73e <_svfprintf_r+0x1a6>
    f54c:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
    f550:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    f554:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    f556:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f558:	f7ff b998 	b.w	e88c <_svfprintf_r+0x2f4>
    f55c:	463b      	mov	r3, r7
    f55e:	460c      	mov	r4, r1
    f560:	9f06      	ldr	r7, [sp, #24]
    f562:	3201      	adds	r2, #1
    f564:	442c      	add	r4, r5
    f566:	f8c9 3000 	str.w	r3, [r9]
    f56a:	2a07      	cmp	r2, #7
    f56c:	f8c9 5004 	str.w	r5, [r9, #4]
    f570:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
    f574:	f340 81a9 	ble.w	f8ca <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe6a>
    f578:	aa28      	add	r2, sp, #160	; 0xa0
    f57a:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    f57e:	f01e fb27 	bl	2dbd0 <__ssprint_r>
    f582:	2800      	cmp	r0, #0
    f584:	f47f a8db 	bne.w	e73e <_svfprintf_r+0x1a6>
    f588:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    f58a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    f58e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f590:	f418 6f80 	tst.w	r8, #1024	; 0x400
    f594:	443b      	add	r3, r7
    f596:	469a      	mov	sl, r3
    f598:	f040 80c4 	bne.w	f724 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xcc4>
    f59c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f59e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f5a0:	4293      	cmp	r3, r2
    f5a2:	db48      	blt.n	f636 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbd6>
    f5a4:	f018 0f01 	tst.w	r8, #1
    f5a8:	d145      	bne.n	f636 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbd6>
    f5aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f5ac:	18bd      	adds	r5, r7, r2
    f5ae:	1ad3      	subs	r3, r2, r3
    f5b0:	eba5 050a 	sub.w	r5, r5, sl
    f5b4:	429d      	cmp	r5, r3
    f5b6:	bfa8      	it	ge
    f5b8:	461d      	movge	r5, r3
    f5ba:	2d00      	cmp	r5, #0
    f5bc:	dd0d      	ble.n	f5da <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb7a>
    f5be:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    f5c0:	442c      	add	r4, r5
    f5c2:	f8c9 a000 	str.w	sl, [r9]
    f5c6:	3201      	adds	r2, #1
    f5c8:	942a      	str	r4, [sp, #168]	; 0xa8
    f5ca:	f8c9 5004 	str.w	r5, [r9, #4]
    f5ce:	2a07      	cmp	r2, #7
    f5d0:	9229      	str	r2, [sp, #164]	; 0xa4
    f5d2:	f300 8324 	bgt.w	fc1e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11be>
    f5d6:	f109 0908 	add.w	r9, r9, #8
    f5da:	2d00      	cmp	r5, #0
    f5dc:	bfac      	ite	ge
    f5de:	1b5d      	subge	r5, r3, r5
    f5e0:	461d      	movlt	r5, r3
    f5e2:	2d00      	cmp	r5, #0
    f5e4:	f77f a9c7 	ble.w	e976 <_svfprintf_r+0x3de>
    f5e8:	2d10      	cmp	r5, #16
    f5ea:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    f5ec:	4b94      	ldr	r3, [pc, #592]	; (f840 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xde0>)
    f5ee:	dd4e      	ble.n	f68e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc2e>
    f5f0:	4619      	mov	r1, r3
    f5f2:	2610      	movs	r6, #16
    f5f4:	4623      	mov	r3, r4
    f5f6:	460c      	mov	r4, r1
    f5f8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
    f5fc:	e002      	b.n	f604 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xba4>
    f5fe:	3d10      	subs	r5, #16
    f600:	2d10      	cmp	r5, #16
    f602:	dd41      	ble.n	f688 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc28>
    f604:	3201      	adds	r2, #1
    f606:	3310      	adds	r3, #16
    f608:	f8c9 4000 	str.w	r4, [r9]
    f60c:	f109 0908 	add.w	r9, r9, #8
    f610:	2a07      	cmp	r2, #7
    f612:	f849 6c04 	str.w	r6, [r9, #-4]
    f616:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
    f61a:	ddf0      	ble.n	f5fe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb9e>
    f61c:	aa28      	add	r2, sp, #160	; 0xa0
    f61e:	4651      	mov	r1, sl
    f620:	4638      	mov	r0, r7
    f622:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    f626:	f01e fad3 	bl	2dbd0 <__ssprint_r>
    f62a:	2800      	cmp	r0, #0
    f62c:	f47f a887 	bne.w	e73e <_svfprintf_r+0x1a6>
    f630:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
    f634:	e7e3      	b.n	f5fe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb9e>
    f636:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    f638:	9914      	ldr	r1, [sp, #80]	; 0x50
    f63a:	3201      	adds	r2, #1
    f63c:	9816      	ldr	r0, [sp, #88]	; 0x58
    f63e:	440c      	add	r4, r1
    f640:	f8c9 1004 	str.w	r1, [r9, #4]
    f644:	2a07      	cmp	r2, #7
    f646:	f8c9 0000 	str.w	r0, [r9]
    f64a:	942a      	str	r4, [sp, #168]	; 0xa8
    f64c:	9229      	str	r2, [sp, #164]	; 0xa4
    f64e:	f300 82d9 	bgt.w	fc04 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11a4>
    f652:	f109 0908 	add.w	r9, r9, #8
    f656:	e7a8      	b.n	f5aa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4a>
    f658:	aa28      	add	r2, sp, #160	; 0xa0
    f65a:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    f65e:	f01e fab7 	bl	2dbd0 <__ssprint_r>
    f662:	2800      	cmp	r0, #0
    f664:	f47f a86b 	bne.w	e73e <_svfprintf_r+0x1a6>
    f668:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    f66a:	ad2b      	add	r5, sp, #172	; 0xac
    f66c:	9e29      	ldr	r6, [sp, #164]	; 0xa4
    f66e:	e4c6      	b.n	effe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x59e>
    f670:	aa28      	add	r2, sp, #160	; 0xa0
    f672:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    f676:	f01e faab 	bl	2dbd0 <__ssprint_r>
    f67a:	2800      	cmp	r0, #0
    f67c:	f47f a85f 	bne.w	e73e <_svfprintf_r+0x1a6>
    f680:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    f682:	ad2b      	add	r5, sp, #172	; 0xac
    f684:	9e29      	ldr	r6, [sp, #164]	; 0xa4
    f686:	e4ae      	b.n	efe6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x586>
    f688:	4621      	mov	r1, r4
    f68a:	461c      	mov	r4, r3
    f68c:	460b      	mov	r3, r1
    f68e:	3201      	adds	r2, #1
    f690:	442c      	add	r4, r5
    f692:	f8c9 3000 	str.w	r3, [r9]
    f696:	2a07      	cmp	r2, #7
    f698:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
    f69c:	f8c9 5004 	str.w	r5, [r9, #4]
    f6a0:	f77f a967 	ble.w	e972 <_svfprintf_r+0x3da>
    f6a4:	e47f      	b.n	efa6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x546>
    f6a6:	aa28      	add	r2, sp, #160	; 0xa0
    f6a8:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    f6ac:	f01e fa90 	bl	2dbd0 <__ssprint_r>
    f6b0:	2800      	cmp	r0, #0
    f6b2:	f47f a844 	bne.w	e73e <_svfprintf_r+0x1a6>
    f6b6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    f6b8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    f6bc:	f7ff b90d 	b.w	e8da <_svfprintf_r+0x342>
    f6c0:	aa28      	add	r2, sp, #160	; 0xa0
    f6c2:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    f6c6:	f01e fa83 	bl	2dbd0 <__ssprint_r>
    f6ca:	2800      	cmp	r0, #0
    f6cc:	f47f a837 	bne.w	e73e <_svfprintf_r+0x1a6>
    f6d0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    f6d4:	f7ff bba0 	b.w	ee18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3b8>
    f6d8:	4623      	mov	r3, r4
    f6da:	4614      	mov	r4, r2
    f6dc:	f105 0208 	add.w	r2, r5, #8
    f6e0:	9106      	str	r1, [sp, #24]
    f6e2:	4454      	add	r4, sl
    f6e4:	e9c5 3a00 	strd	r3, sl, [r5]
    f6e8:	9b06      	ldr	r3, [sp, #24]
    f6ea:	942a      	str	r4, [sp, #168]	; 0xa8
    f6ec:	2b07      	cmp	r3, #7
    f6ee:	9329      	str	r3, [sp, #164]	; 0xa4
    f6f0:	f73f aee7 	bgt.w	f4c2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa62>
    f6f4:	3301      	adds	r3, #1
    f6f6:	f102 0908 	add.w	r9, r2, #8
    f6fa:	4615      	mov	r5, r2
    f6fc:	9306      	str	r3, [sp, #24]
    f6fe:	e49e      	b.n	f03e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5de>
    f700:	9a07      	ldr	r2, [sp, #28]
    f702:	465f      	mov	r7, fp
    f704:	601a      	str	r2, [r3, #0]
    f706:	f7fe bf71 	b.w	e5ec <_svfprintf_r+0x54>
    f70a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    f70c:	2b00      	cmp	r3, #0
    f70e:	f43f a81c 	beq.w	e74a <_svfprintf_r+0x1b2>
    f712:	9c04      	ldr	r4, [sp, #16]
    f714:	aa28      	add	r2, sp, #160	; 0xa0
    f716:	9803      	ldr	r0, [sp, #12]
    f718:	4621      	mov	r1, r4
    f71a:	f01e fa59 	bl	2dbd0 <__ssprint_r>
    f71e:	89a3      	ldrh	r3, [r4, #12]
    f720:	f7ff b815 	b.w	e74e <_svfprintf_r+0x1b6>
    f724:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f726:	2b00      	cmp	r3, #0
    f728:	dc0a      	bgt.n	f740 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xce0>
    f72a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f72c:	2b00      	cmp	r3, #0
    f72e:	dc07      	bgt.n	f740 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xce0>
    f730:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f732:	18fb      	adds	r3, r7, r3
    f734:	9306      	str	r3, [sp, #24]
    f736:	9b06      	ldr	r3, [sp, #24]
    f738:	459a      	cmp	sl, r3
    f73a:	bf28      	it	cs
    f73c:	469a      	movcs	sl, r3
    f73e:	e72d      	b.n	f59c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb3c>
    f740:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f742:	4622      	mov	r2, r4
    f744:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    f748:	46d0      	mov	r8, sl
    f74a:	18fb      	adds	r3, r7, r3
    f74c:	970e      	str	r7, [sp, #56]	; 0x38
    f74e:	4e3c      	ldr	r6, [pc, #240]	; (f840 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xde0>)
    f750:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
    f754:	9f11      	ldr	r7, [sp, #68]	; 0x44
    f756:	9308      	str	r3, [sp, #32]
    f758:	2f00      	cmp	r7, #0
    f75a:	d073      	beq.n	f844 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xde4>
    f75c:	3f01      	subs	r7, #1
    f75e:	9929      	ldr	r1, [sp, #164]	; 0xa4
    f760:	9b18      	ldr	r3, [sp, #96]	; 0x60
    f762:	3101      	adds	r1, #1
    f764:	9819      	ldr	r0, [sp, #100]	; 0x64
    f766:	441a      	add	r2, r3
    f768:	f8c9 3004 	str.w	r3, [r9, #4]
    f76c:	2907      	cmp	r1, #7
    f76e:	f8c9 0000 	str.w	r0, [r9]
    f772:	922a      	str	r2, [sp, #168]	; 0xa8
    f774:	9129      	str	r1, [sp, #164]	; 0xa4
    f776:	dc6b      	bgt.n	f850 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdf0>
    f778:	f109 0908 	add.w	r9, r9, #8
    f77c:	9b08      	ldr	r3, [sp, #32]
    f77e:	f89a 1000 	ldrb.w	r1, [sl]
    f782:	eba3 0508 	sub.w	r5, r3, r8
    f786:	9306      	str	r3, [sp, #24]
    f788:	428d      	cmp	r5, r1
    f78a:	bfa8      	it	ge
    f78c:	460d      	movge	r5, r1
    f78e:	2d00      	cmp	r5, #0
    f790:	dd0e      	ble.n	f7b0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd50>
    f792:	9929      	ldr	r1, [sp, #164]	; 0xa4
    f794:	442a      	add	r2, r5
    f796:	f8c9 8000 	str.w	r8, [r9]
    f79a:	3101      	adds	r1, #1
    f79c:	922a      	str	r2, [sp, #168]	; 0xa8
    f79e:	f8c9 5004 	str.w	r5, [r9, #4]
    f7a2:	2907      	cmp	r1, #7
    f7a4:	9129      	str	r1, [sp, #164]	; 0xa4
    f7a6:	dc5f      	bgt.n	f868 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe08>
    f7a8:	f109 0908 	add.w	r9, r9, #8
    f7ac:	f89a 1000 	ldrb.w	r1, [sl]
    f7b0:	2d00      	cmp	r5, #0
    f7b2:	bfac      	ite	ge
    f7b4:	1b4d      	subge	r5, r1, r5
    f7b6:	460d      	movlt	r5, r1
    f7b8:	2d00      	cmp	r5, #0
    f7ba:	dd31      	ble.n	f820 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdc0>
    f7bc:	2d10      	cmp	r5, #16
    f7be:	9929      	ldr	r1, [sp, #164]	; 0xa4
    f7c0:	dd1f      	ble.n	f802 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xda2>
    f7c2:	2410      	movs	r4, #16
    f7c4:	e002      	b.n	f7cc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd6c>
    f7c6:	3d10      	subs	r5, #16
    f7c8:	2d10      	cmp	r5, #16
    f7ca:	dd1a      	ble.n	f802 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xda2>
    f7cc:	3101      	adds	r1, #1
    f7ce:	3210      	adds	r2, #16
    f7d0:	f8c9 6000 	str.w	r6, [r9]
    f7d4:	f109 0908 	add.w	r9, r9, #8
    f7d8:	2907      	cmp	r1, #7
    f7da:	f849 4c04 	str.w	r4, [r9, #-4]
    f7de:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
    f7e2:	ddf0      	ble.n	f7c6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd66>
    f7e4:	aa28      	add	r2, sp, #160	; 0xa0
    f7e6:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    f7ea:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    f7ee:	f01e f9ef 	bl	2dbd0 <__ssprint_r>
    f7f2:	2800      	cmp	r0, #0
    f7f4:	f47e afa3 	bne.w	e73e <_svfprintf_r+0x1a6>
    f7f8:	3d10      	subs	r5, #16
    f7fa:	2d10      	cmp	r5, #16
    f7fc:	e9dd 1229 	ldrd	r1, r2, [sp, #164]	; 0xa4
    f800:	dce4      	bgt.n	f7cc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd6c>
    f802:	3101      	adds	r1, #1
    f804:	442a      	add	r2, r5
    f806:	f8c9 6000 	str.w	r6, [r9]
    f80a:	2907      	cmp	r1, #7
    f80c:	f8c9 5004 	str.w	r5, [r9, #4]
    f810:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
    f814:	f300 8100 	bgt.w	fa18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfb8>
    f818:	f109 0908 	add.w	r9, r9, #8
    f81c:	f89a 1000 	ldrb.w	r1, [sl]
    f820:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f822:	4488      	add	r8, r1
    f824:	2b00      	cmp	r3, #0
    f826:	dc97      	bgt.n	f758 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xcf8>
    f828:	2f00      	cmp	r7, #0
    f82a:	dc95      	bgt.n	f758 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xcf8>
    f82c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
    f830:	4614      	mov	r4, r2
    f832:	46c2      	mov	sl, r8
    f834:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    f836:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    f83a:	e77c      	b.n	f736 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xcd6>
    f83c:	00033d94 	.word	0x00033d94
    f840:	00033db0 	.word	0x00033db0
    f844:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f846:	f10a 3aff 	add.w	sl, sl, #4294967295
    f84a:	3b01      	subs	r3, #1
    f84c:	9310      	str	r3, [sp, #64]	; 0x40
    f84e:	e786      	b.n	f75e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xcfe>
    f850:	aa28      	add	r2, sp, #160	; 0xa0
    f852:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    f856:	f01e f9bb 	bl	2dbd0 <__ssprint_r>
    f85a:	2800      	cmp	r0, #0
    f85c:	f47e af6f 	bne.w	e73e <_svfprintf_r+0x1a6>
    f860:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    f862:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    f866:	e789      	b.n	f77c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd1c>
    f868:	aa28      	add	r2, sp, #160	; 0xa0
    f86a:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    f86e:	f01e f9af 	bl	2dbd0 <__ssprint_r>
    f872:	2800      	cmp	r0, #0
    f874:	f47e af63 	bne.w	e73e <_svfprintf_r+0x1a6>
    f878:	f89a 1000 	ldrb.w	r1, [sl]
    f87c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    f880:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    f882:	e795      	b.n	f7b0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd50>
    f884:	4638      	mov	r0, r7
    f886:	9506      	str	r5, [sp, #24]
    f888:	f01b fa18 	bl	2acbc <strlen>
    f88c:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
    f890:	9008      	str	r0, [sp, #32]
    f892:	9205      	str	r2, [sp, #20]
    f894:	940c      	str	r4, [sp, #48]	; 0x30
    f896:	950b      	str	r5, [sp, #44]	; 0x2c
    f898:	950e      	str	r5, [sp, #56]	; 0x38
    f89a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
    f89e:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
    f8a2:	f7fe bfa0 	b.w	e7e6 <_svfprintf_r+0x24e>
    f8a6:	9906      	ldr	r1, [sp, #24]
    f8a8:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    f8ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f8ae:	1c4c      	adds	r4, r1, #1
    f8b0:	d032      	beq.n	f918 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xeb8>
    f8b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
    f8b6:	f040 8279 	bne.w	fdac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x134c>
    f8ba:	f8cd 8014 	str.w	r8, [sp, #20]
    f8be:	2900      	cmp	r1, #0
    f8c0:	f000 82fe 	beq.w	fec0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1460>
    f8c4:	900b      	str	r0, [sp, #44]	; 0x2c
    f8c6:	4690      	mov	r8, r2
    f8c8:	e545      	b.n	f356 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8f6>
    f8ca:	f109 0908 	add.w	r9, r9, #8
    f8ce:	e65e      	b.n	f58e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb2e>
    f8d0:	2300      	movs	r3, #0
    f8d2:	4693      	mov	fp, r2
    f8d4:	9306      	str	r3, [sp, #24]
    f8d6:	f7fe beba 	b.w	e64e <_svfprintf_r+0xb6>
    f8da:	7814      	ldrb	r4, [r2, #0]
    f8dc:	2500      	movs	r5, #0
    f8de:	930c      	str	r3, [sp, #48]	; 0x30
    f8e0:	f7ff b8a9 	b.w	ea36 <_svfprintf_r+0x49e>
    f8e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f8e6:	46c2      	mov	sl, r8
    f8e8:	2500      	movs	r5, #0
    f8ea:	920c      	str	r2, [sp, #48]	; 0x30
    f8ec:	781c      	ldrb	r4, [r3, #0]
    f8ee:	2301      	movs	r3, #1
    f8f0:	f7fe bf49 	b.w	e786 <_svfprintf_r+0x1ee>
    f8f4:	7814      	ldrb	r4, [r2, #0]
    f8f6:	2500      	movs	r5, #0
    f8f8:	930c      	str	r3, [sp, #48]	; 0x30
    f8fa:	f7ff b8af 	b.w	ea5c <_svfprintf_r+0x4c4>
    f8fe:	f992 4000 	ldrsb.w	r4, [r2]
    f902:	930c      	str	r3, [sp, #48]	; 0x30
    f904:	17e5      	asrs	r5, r4, #31
    f906:	4622      	mov	r2, r4
    f908:	462b      	mov	r3, r5
    f90a:	f7ff b8c2 	b.w	ea92 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x32>
    f90e:	9a07      	ldr	r2, [sp, #28]
    f910:	465f      	mov	r7, fp
    f912:	801a      	strh	r2, [r3, #0]
    f914:	f7fe be6a 	b.w	e5ec <_svfprintf_r+0x54>
    f918:	f8cd 8014 	str.w	r8, [sp, #20]
    f91c:	4690      	mov	r8, r2
    f91e:	2206      	movs	r2, #6
    f920:	900b      	str	r0, [sp, #44]	; 0x2c
    f922:	9206      	str	r2, [sp, #24]
    f924:	e517      	b.n	f356 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8f6>
    f926:	9b06      	ldr	r3, [sp, #24]
    f928:	9803      	ldr	r0, [sp, #12]
    f92a:	1c59      	adds	r1, r3, #1
    f92c:	f01a fc86 	bl	2a23c <_malloc_r>
    f930:	4607      	mov	r7, r0
    f932:	2800      	cmp	r0, #0
    f934:	f000 830f 	beq.w	ff56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14f6>
    f938:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    f93c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f93e:	900b      	str	r0, [sp, #44]	; 0x2c
    f940:	e509      	b.n	f356 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8f6>
    f942:	222d      	movs	r2, #45	; 0x2d
    f944:	2300      	movs	r3, #0
    f946:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
    f94a:	9306      	str	r3, [sp, #24]
    f94c:	f7fe bf4c 	b.w	e7e8 <_svfprintf_r+0x250>
    f950:	9a06      	ldr	r2, [sp, #24]
    f952:	429a      	cmp	r2, r3
    f954:	db01      	blt.n	f95a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xefa>
    f956:	3303      	adds	r3, #3
    f958:	da3e      	bge.n	f9d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf78>
    f95a:	3e02      	subs	r6, #2
    f95c:	f026 0a20 	bic.w	sl, r6, #32
    f960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f962:	f1ba 0f41 	cmp.w	sl, #65	; 0x41
    f966:	b2f2      	uxtb	r2, r6
    f968:	f103 33ff 	add.w	r3, r3, #4294967295
    f96c:	9322      	str	r3, [sp, #136]	; 0x88
    f96e:	d101      	bne.n	f974 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf14>
    f970:	320f      	adds	r2, #15
    f972:	b2d2      	uxtb	r2, r2
    f974:	2b00      	cmp	r3, #0
    f976:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
    f97a:	f2c0 8280 	blt.w	fe7e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x141e>
    f97e:	222b      	movs	r2, #43	; 0x2b
    f980:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
    f984:	2b09      	cmp	r3, #9
    f986:	f300 8230 	bgt.w	fdea <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x138a>
    f98a:	f1ba 0f41 	cmp.w	sl, #65	; 0x41
    f98e:	f000 82a4 	beq.w	feda <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x147a>
    f992:	2230      	movs	r2, #48	; 0x30
    f994:	f10d 0193 	add.w	r1, sp, #147	; 0x93
    f998:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
    f99c:	3330      	adds	r3, #48	; 0x30
    f99e:	1c4a      	adds	r2, r1, #1
    f9a0:	700b      	strb	r3, [r1, #0]
    f9a2:	ab24      	add	r3, sp, #144	; 0x90
    f9a4:	1ad3      	subs	r3, r2, r3
    f9a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f9a8:	931a      	str	r3, [sp, #104]	; 0x68
    f9aa:	2a01      	cmp	r2, #1
    f9ac:	4413      	add	r3, r2
    f9ae:	9308      	str	r3, [sp, #32]
    f9b0:	f340 826c 	ble.w	fe8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x142c>
    f9b4:	9b08      	ldr	r3, [sp, #32]
    f9b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    f9b8:	4413      	add	r3, r2
    f9ba:	9308      	str	r3, [sp, #32]
    f9bc:	9b05      	ldr	r3, [sp, #20]
    f9be:	2200      	movs	r2, #0
    f9c0:	9908      	ldr	r1, [sp, #32]
    f9c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    f9c6:	9211      	str	r2, [sp, #68]	; 0x44
    f9c8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    f9cc:	9210      	str	r2, [sp, #64]	; 0x40
    f9ce:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    f9d2:	920e      	str	r2, [sp, #56]	; 0x38
    f9d4:	9105      	str	r1, [sp, #20]
    f9d6:	e513      	b.n	f400 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9a0>
    f9d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f9da:	4619      	mov	r1, r3
    f9dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f9de:	4299      	cmp	r1, r3
    f9e0:	f300 8132 	bgt.w	fc48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11e8>
    f9e4:	9a05      	ldr	r2, [sp, #20]
    f9e6:	07d0      	lsls	r0, r2, #31
    f9e8:	f140 822c 	bpl.w	fe44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13e4>
    f9ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
    f9ee:	4413      	add	r3, r2
    f9f0:	9308      	str	r3, [sp, #32]
    f9f2:	9b05      	ldr	r3, [sp, #20]
    f9f4:	0559      	lsls	r1, r3, #21
    f9f6:	d503      	bpl.n	fa00 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfa0>
    f9f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f9fa:	2b00      	cmp	r3, #0
    f9fc:	f300 8169 	bgt.w	fcd2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1272>
    fa00:	9b08      	ldr	r3, [sp, #32]
    fa02:	2667      	movs	r6, #103	; 0x67
    fa04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fa08:	9305      	str	r3, [sp, #20]
    fa0a:	e4f6      	b.n	f3fa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x99a>
    fa0c:	232d      	movs	r3, #45	; 0x2d
    fa0e:	461a      	mov	r2, r3
    fa10:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
    fa14:	f7ff b9bf 	b.w	ed96 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x336>
    fa18:	aa28      	add	r2, sp, #160	; 0xa0
    fa1a:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    fa1e:	f01e f8d7 	bl	2dbd0 <__ssprint_r>
    fa22:	2800      	cmp	r0, #0
    fa24:	f47e ae8b 	bne.w	e73e <_svfprintf_r+0x1a6>
    fa28:	f89a 1000 	ldrb.w	r1, [sl]
    fa2c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    fa30:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    fa32:	e6f5      	b.n	f820 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdc0>
    fa34:	aa28      	add	r2, sp, #160	; 0xa0
    fa36:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    fa3a:	f01e f8c9 	bl	2dbd0 <__ssprint_r>
    fa3e:	2800      	cmp	r0, #0
    fa40:	f47e ae7d 	bne.w	e73e <_svfprintf_r+0x1a6>
    fa44:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    fa46:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    fa4a:	f7ff bbdb 	b.w	f204 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7a4>
    fa4e:	f8cd 8014 	str.w	r8, [sp, #20]
    fa52:	4690      	mov	r8, r2
    fa54:	900b      	str	r0, [sp, #44]	; 0x2c
    fa56:	232d      	movs	r3, #45	; 0x2d
    fa58:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
    fa5c:	930d      	str	r3, [sp, #52]	; 0x34
    fa5e:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
    fa62:	911e      	str	r1, [sp, #120]	; 0x78
    fa64:	931f      	str	r3, [sp, #124]	; 0x7c
    fa66:	e47f      	b.n	f368 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x908>
    fa68:	a822      	add	r0, sp, #136	; 0x88
    fa6a:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
    fa6e:	f01d ffeb 	bl	2da48 <frexp>
    fa72:	2200      	movs	r2, #0
    fa74:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    fa78:	ec51 0b10 	vmov	r0, r1, d0
    fa7c:	f7fc fd20 	bl	c4c0 <__aeabi_dmul>
    fa80:	2200      	movs	r2, #0
    fa82:	2300      	movs	r3, #0
    fa84:	e9cd 0108 	strd	r0, r1, [sp, #32]
    fa88:	f7fc ff82 	bl	c990 <__aeabi_dcmpeq>
    fa8c:	b108      	cbz	r0, fa92 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1032>
    fa8e:	2301      	movs	r3, #1
    fa90:	9322      	str	r3, [sp, #136]	; 0x88
    fa92:	9b06      	ldr	r3, [sp, #24]
    fa94:	4639      	mov	r1, r7
    fa96:	4ab6      	ldr	r2, [pc, #728]	; (fd70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1310>)
    fa98:	f103 38ff 	add.w	r8, r3, #4294967295
    fa9c:	4bb5      	ldr	r3, [pc, #724]	; (fd74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1314>)
    fa9e:	9711      	str	r7, [sp, #68]	; 0x44
    faa0:	2e61      	cmp	r6, #97	; 0x61
    faa2:	bf08      	it	eq
    faa4:	461a      	moveq	r2, r3
    faa6:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    faaa:	e9cd b60e 	strd	fp, r6, [sp, #56]	; 0x38
    faae:	9206      	str	r2, [sp, #24]
    fab0:	4693      	mov	fp, r2
    fab2:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    fab6:	f8cd a020 	str.w	sl, [sp, #32]
    faba:	468a      	mov	sl, r1
    fabc:	e005      	b.n	faca <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x106a>
    fabe:	2200      	movs	r2, #0
    fac0:	2300      	movs	r3, #0
    fac2:	f7fc ff65 	bl	c990 <__aeabi_dcmpeq>
    fac6:	bb00      	cbnz	r0, fb0a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10aa>
    fac8:	46a2      	mov	sl, r4
    faca:	2200      	movs	r2, #0
    facc:	4baa      	ldr	r3, [pc, #680]	; (fd78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1318>)
    face:	4630      	mov	r0, r6
    fad0:	4639      	mov	r1, r7
    fad2:	f7fc fcf5 	bl	c4c0 <__aeabi_dmul>
    fad6:	460d      	mov	r5, r1
    fad8:	4604      	mov	r4, r0
    fada:	f7fc ff8b 	bl	c9f4 <__aeabi_d2iz>
    fade:	4681      	mov	r9, r0
    fae0:	f7fc fc84 	bl	c3ec <__aeabi_i2d>
    fae4:	460b      	mov	r3, r1
    fae6:	4602      	mov	r2, r0
    fae8:	4629      	mov	r1, r5
    faea:	4620      	mov	r0, r4
    faec:	f7fc fb30 	bl	c150 <__aeabi_dsub>
    faf0:	4654      	mov	r4, sl
    faf2:	f81b 3009 	ldrb.w	r3, [fp, r9]
    faf6:	f1b8 3fff 	cmp.w	r8, #4294967295
    fafa:	4645      	mov	r5, r8
    fafc:	4606      	mov	r6, r0
    fafe:	460f      	mov	r7, r1
    fb00:	f804 3b01 	strb.w	r3, [r4], #1
    fb04:	f108 38ff 	add.w	r8, r8, #4294967295
    fb08:	d1d9      	bne.n	fabe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x105e>
    fb0a:	4630      	mov	r0, r6
    fb0c:	4639      	mov	r1, r7
    fb0e:	2200      	movs	r2, #0
    fb10:	4b9a      	ldr	r3, [pc, #616]	; (fd7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x131c>)
    fb12:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    fb16:	46c8      	mov	r8, r9
    fb18:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    fb1c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    fb1e:	f8dd a020 	ldr.w	sl, [sp, #32]
    fb22:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    fb26:	9f11      	ldr	r7, [sp, #68]	; 0x44
    fb28:	e9cd 0108 	strd	r0, r1, [sp, #32]
    fb2c:	f7fc ff58 	bl	c9e0 <__aeabi_dcmpgt>
    fb30:	2800      	cmp	r0, #0
    fb32:	f040 80a1 	bne.w	fc78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1218>
    fb36:	2200      	movs	r2, #0
    fb38:	4b90      	ldr	r3, [pc, #576]	; (fd7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x131c>)
    fb3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    fb3e:	f7fc ff27 	bl	c990 <__aeabi_dcmpeq>
    fb42:	b118      	cbz	r0, fb4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10ec>
    fb44:	ea5f 72c8 	movs.w	r2, r8, lsl #31
    fb48:	f100 8096 	bmi.w	fc78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1218>
    fb4c:	2d00      	cmp	r5, #0
    fb4e:	db06      	blt.n	fb5e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10fe>
    fb50:	1c6b      	adds	r3, r5, #1
    fb52:	2230      	movs	r2, #48	; 0x30
    fb54:	4423      	add	r3, r4
    fb56:	f804 2b01 	strb.w	r2, [r4], #1
    fb5a:	42a3      	cmp	r3, r4
    fb5c:	d1fb      	bne.n	fb56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10f6>
    fb5e:	1be3      	subs	r3, r4, r7
    fb60:	930f      	str	r3, [sp, #60]	; 0x3c
    fb62:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fb64:	930e      	str	r3, [sp, #56]	; 0x38
    fb66:	e6fb      	b.n	f960 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf00>
    fb68:	a926      	add	r1, sp, #152	; 0x98
    fb6a:	a823      	add	r0, sp, #140	; 0x8c
    fb6c:	ab22      	add	r3, sp, #136	; 0x88
    fb6e:	9a06      	ldr	r2, [sp, #24]
    fb70:	9101      	str	r1, [sp, #4]
    fb72:	2103      	movs	r1, #3
    fb74:	9000      	str	r0, [sp, #0]
    fb76:	9803      	ldr	r0, [sp, #12]
    fb78:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
    fb7c:	f000 f9fc 	bl	ff78 <_dtoa_r>
    fb80:	7803      	ldrb	r3, [r0, #0]
    fb82:	4607      	mov	r7, r0
    fb84:	2b30      	cmp	r3, #48	; 0x30
    fb86:	d10e      	bne.n	fba6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1146>
    fb88:	2200      	movs	r2, #0
    fb8a:	2300      	movs	r3, #0
    fb8c:	f04f 0401 	mov.w	r4, #1
    fb90:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
    fb94:	f7fc fefc 	bl	c990 <__aeabi_dcmpeq>
    fb98:	b108      	cbz	r0, fb9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x113e>
    fb9a:	f04f 0400 	mov.w	r4, #0
    fb9e:	f014 0fff 	tst.w	r4, #255	; 0xff
    fba2:	f040 81b8 	bne.w	ff16 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14b6>
    fba6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fba8:	9a06      	ldr	r2, [sp, #24]
    fbaa:	4413      	add	r3, r2
    fbac:	18fc      	adds	r4, r7, r3
    fbae:	f7ff bbf7 	b.w	f3a0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x940>
    fbb2:	aa28      	add	r2, sp, #160	; 0xa0
    fbb4:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    fbb8:	f01e f80a 	bl	2dbd0 <__ssprint_r>
    fbbc:	2800      	cmp	r0, #0
    fbbe:	f47e adbe 	bne.w	e73e <_svfprintf_r+0x1a6>
    fbc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fbc4:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    fbc8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    fbca:	f7ff b9c9 	b.w	ef60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x500>
    fbce:	9b06      	ldr	r3, [sp, #24]
    fbd0:	940c      	str	r4, [sp, #48]	; 0x30
    fbd2:	9305      	str	r3, [sp, #20]
    fbd4:	9308      	str	r3, [sp, #32]
    fbd6:	9006      	str	r0, [sp, #24]
    fbd8:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
    fbdc:	900e      	str	r0, [sp, #56]	; 0x38
    fbde:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    fbe2:	f7fe be00 	b.w	e7e6 <_svfprintf_r+0x24e>
    fbe6:	aa28      	add	r2, sp, #160	; 0xa0
    fbe8:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    fbec:	f01d fff0 	bl	2dbd0 <__ssprint_r>
    fbf0:	2800      	cmp	r0, #0
    fbf2:	f47e ada4 	bne.w	e73e <_svfprintf_r+0x1a6>
    fbf6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fbf8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    fbfc:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
    fc00:	f7ff b9c2 	b.w	ef88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x528>
    fc04:	aa28      	add	r2, sp, #160	; 0xa0
    fc06:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    fc0a:	f01d ffe1 	bl	2dbd0 <__ssprint_r>
    fc0e:	2800      	cmp	r0, #0
    fc10:	f47e ad95 	bne.w	e73e <_svfprintf_r+0x1a6>
    fc14:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fc16:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    fc1a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    fc1c:	e4c5      	b.n	f5aa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4a>
    fc1e:	aa28      	add	r2, sp, #160	; 0xa0
    fc20:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    fc24:	f01d ffd4 	bl	2dbd0 <__ssprint_r>
    fc28:	2800      	cmp	r0, #0
    fc2a:	f47e ad88 	bne.w	e73e <_svfprintf_r+0x1a6>
    fc2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fc30:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    fc34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    fc36:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    fc38:	1ad3      	subs	r3, r2, r3
    fc3a:	e4ce      	b.n	f5da <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb7a>
    fc3c:	f018 0f01 	tst.w	r8, #1
    fc40:	f43e ae99 	beq.w	e976 <_svfprintf_r+0x3de>
    fc44:	f7ff b990 	b.w	ef68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x508>
    fc48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fc4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    fc4c:	4413      	add	r3, r2
    fc4e:	9308      	str	r3, [sp, #32]
    fc50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fc52:	2b00      	cmp	r3, #0
    fc54:	f340 8129 	ble.w	feaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x144a>
    fc58:	2667      	movs	r6, #103	; 0x67
    fc5a:	f7ff bbc6 	b.w	f3ea <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98a>
    fc5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    fc60:	42a3      	cmp	r3, r4
    fc62:	f4bf aba7 	bcs.w	f3b4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x954>
    fc66:	2130      	movs	r1, #48	; 0x30
    fc68:	1c5a      	adds	r2, r3, #1
    fc6a:	9226      	str	r2, [sp, #152]	; 0x98
    fc6c:	7019      	strb	r1, [r3, #0]
    fc6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    fc70:	429c      	cmp	r4, r3
    fc72:	d8f9      	bhi.n	fc68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1208>
    fc74:	f7ff bb9e 	b.w	f3b4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x954>
    fc78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fc7a:	9326      	str	r3, [sp, #152]	; 0x98
    fc7c:	9b06      	ldr	r3, [sp, #24]
    fc7e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    fc82:	7bd9      	ldrb	r1, [r3, #15]
    fc84:	4623      	mov	r3, r4
    fc86:	4291      	cmp	r1, r2
    fc88:	d109      	bne.n	fc9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x123e>
    fc8a:	2030      	movs	r0, #48	; 0x30
    fc8c:	f803 0c01 	strb.w	r0, [r3, #-1]
    fc90:	9b26      	ldr	r3, [sp, #152]	; 0x98
    fc92:	1e5a      	subs	r2, r3, #1
    fc94:	9226      	str	r2, [sp, #152]	; 0x98
    fc96:	f813 2c01 	ldrb.w	r2, [r3, #-1]
    fc9a:	4291      	cmp	r1, r2
    fc9c:	d0f6      	beq.n	fc8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x122c>
    fc9e:	2a39      	cmp	r2, #57	; 0x39
    fca0:	f000 8123 	beq.w	feea <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x148a>
    fca4:	3201      	adds	r2, #1
    fca6:	b2d2      	uxtb	r2, r2
    fca8:	f803 2c01 	strb.w	r2, [r3, #-1]
    fcac:	e757      	b.n	fb5e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10fe>
    fcae:	9b18      	ldr	r3, [sp, #96]	; 0x60
    fcb0:	f04f 0b00 	mov.w	fp, #0
    fcb4:	9919      	ldr	r1, [sp, #100]	; 0x64
    fcb6:	1aff      	subs	r7, r7, r3
    fcb8:	461a      	mov	r2, r3
    fcba:	4638      	mov	r0, r7
    fcbc:	f01b f872 	bl	2ada4 <strncpy>
    fcc0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    fcc2:	7853      	ldrb	r3, [r2, #1]
    fcc4:	2b00      	cmp	r3, #0
    fcc6:	f000 80c9 	beq.w	fe5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13fc>
    fcca:	3201      	adds	r2, #1
    fccc:	9217      	str	r2, [sp, #92]	; 0x5c
    fcce:	f7ff bbcb 	b.w	f468 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa08>
    fcd2:	2667      	movs	r6, #103	; 0x67
    fcd4:	2200      	movs	r2, #0
    fcd6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    fcd8:	9211      	str	r2, [sp, #68]	; 0x44
    fcda:	9210      	str	r2, [sp, #64]	; 0x40
    fcdc:	7803      	ldrb	r3, [r0, #0]
    fcde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    fce0:	2bff      	cmp	r3, #255	; 0xff
    fce2:	d00b      	beq.n	fcfc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x129c>
    fce4:	4293      	cmp	r3, r2
    fce6:	da09      	bge.n	fcfc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x129c>
    fce8:	7841      	ldrb	r1, [r0, #1]
    fcea:	1ad2      	subs	r2, r2, r3
    fcec:	b1a9      	cbz	r1, fd1a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12ba>
    fcee:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fcf0:	3001      	adds	r0, #1
    fcf2:	3301      	adds	r3, #1
    fcf4:	9310      	str	r3, [sp, #64]	; 0x40
    fcf6:	460b      	mov	r3, r1
    fcf8:	2bff      	cmp	r3, #255	; 0xff
    fcfa:	d1f3      	bne.n	fce4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1284>
    fcfc:	920e      	str	r2, [sp, #56]	; 0x38
    fcfe:	9908      	ldr	r1, [sp, #32]
    fd00:	9017      	str	r0, [sp, #92]	; 0x5c
    fd02:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
    fd06:	4413      	add	r3, r2
    fd08:	9a18      	ldr	r2, [sp, #96]	; 0x60
    fd0a:	fb02 1303 	mla	r3, r2, r3, r1
    fd0e:	9308      	str	r3, [sp, #32]
    fd10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fd14:	9305      	str	r3, [sp, #20]
    fd16:	f7ff bb73 	b.w	f400 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9a0>
    fd1a:	9911      	ldr	r1, [sp, #68]	; 0x44
    fd1c:	3101      	adds	r1, #1
    fd1e:	9111      	str	r1, [sp, #68]	; 0x44
    fd20:	e7de      	b.n	fce0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1280>
    fd22:	425d      	negs	r5, r3
    fd24:	3310      	adds	r3, #16
    fd26:	4b16      	ldr	r3, [pc, #88]	; (fd80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1320>)
    fd28:	da50      	bge.n	fdcc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x136c>
    fd2a:	4621      	mov	r1, r4
    fd2c:	2610      	movs	r6, #16
    fd2e:	f8dd a00c 	ldr.w	sl, [sp, #12]
    fd32:	461c      	mov	r4, r3
    fd34:	e002      	b.n	fd3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12dc>
    fd36:	3d10      	subs	r5, #16
    fd38:	2d10      	cmp	r5, #16
    fd3a:	dd45      	ble.n	fdc8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1368>
    fd3c:	3201      	adds	r2, #1
    fd3e:	3110      	adds	r1, #16
    fd40:	f8c9 4000 	str.w	r4, [r9]
    fd44:	f109 0908 	add.w	r9, r9, #8
    fd48:	2a07      	cmp	r2, #7
    fd4a:	f849 6c04 	str.w	r6, [r9, #-4]
    fd4e:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
    fd52:	ddf0      	ble.n	fd36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12d6>
    fd54:	aa28      	add	r2, sp, #160	; 0xa0
    fd56:	9904      	ldr	r1, [sp, #16]
    fd58:	4650      	mov	r0, sl
    fd5a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    fd5e:	f01d ff37 	bl	2dbd0 <__ssprint_r>
    fd62:	2800      	cmp	r0, #0
    fd64:	f47e aceb 	bne.w	e73e <_svfprintf_r+0x1a6>
    fd68:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
    fd6c:	e7e3      	b.n	fd36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12d6>
    fd6e:	bf00      	nop
    fd70:	00033d80 	.word	0x00033d80
    fd74:	00033d6c 	.word	0x00033d6c
    fd78:	40300000 	.word	0x40300000
    fd7c:	3fe00000 	.word	0x3fe00000
    fd80:	00033db0 	.word	0x00033db0
    fd84:	a926      	add	r1, sp, #152	; 0x98
    fd86:	a823      	add	r0, sp, #140	; 0x8c
    fd88:	ab22      	add	r3, sp, #136	; 0x88
    fd8a:	9a06      	ldr	r2, [sp, #24]
    fd8c:	9101      	str	r1, [sp, #4]
    fd8e:	2102      	movs	r1, #2
    fd90:	9000      	str	r0, [sp, #0]
    fd92:	9803      	ldr	r0, [sp, #12]
    fd94:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
    fd98:	f000 f8ee 	bl	ff78 <_dtoa_r>
    fd9c:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
    fda0:	4607      	mov	r7, r0
    fda2:	f000 8094 	beq.w	fece <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x146e>
    fda6:	9c06      	ldr	r4, [sp, #24]
    fda8:	f7ff baf9 	b.w	f39e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x93e>
    fdac:	2b00      	cmp	r3, #0
    fdae:	f6ff ae4e 	blt.w	fa4e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfee>
    fdb2:	f8cd 8014 	str.w	r8, [sp, #20]
    fdb6:	4690      	mov	r8, r2
    fdb8:	900d      	str	r0, [sp, #52]	; 0x34
    fdba:	900b      	str	r0, [sp, #44]	; 0x2c
    fdbc:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
    fdc0:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
    fdc4:	f7ff bad4 	b.w	f370 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x910>
    fdc8:	4623      	mov	r3, r4
    fdca:	460c      	mov	r4, r1
    fdcc:	3201      	adds	r2, #1
    fdce:	442c      	add	r4, r5
    fdd0:	f8c9 3000 	str.w	r3, [r9]
    fdd4:	2a07      	cmp	r2, #7
    fdd6:	f8c9 5004 	str.w	r5, [r9, #4]
    fdda:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
    fdde:	f300 808c 	bgt.w	fefa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x149a>
    fde2:	f109 0908 	add.w	r9, r9, #8
    fde6:	f7ff b8d2 	b.w	ef8e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52e>
    fdea:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
    fdee:	4d5d      	ldr	r5, [pc, #372]	; (ff64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1504>)
    fdf0:	4660      	mov	r0, ip
    fdf2:	e000      	b.n	fdf6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1396>
    fdf4:	4620      	mov	r0, r4
    fdf6:	fba5 2103 	umull	r2, r1, r5, r3
    fdfa:	1e44      	subs	r4, r0, #1
    fdfc:	08c9      	lsrs	r1, r1, #3
    fdfe:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    fe02:	2909      	cmp	r1, #9
    fe04:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
    fe08:	460b      	mov	r3, r1
    fe0a:	f102 0230 	add.w	r2, r2, #48	; 0x30
    fe0e:	f800 2c01 	strb.w	r2, [r0, #-1]
    fe12:	dcef      	bgt.n	fdf4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1394>
    fe14:	3330      	adds	r3, #48	; 0x30
    fe16:	3802      	subs	r0, #2
    fe18:	b2db      	uxtb	r3, r3
    fe1a:	4584      	cmp	ip, r0
    fe1c:	f804 3c01 	strb.w	r3, [r4, #-1]
    fe20:	f240 808a 	bls.w	ff38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14d8>
    fe24:	4622      	mov	r2, r4
    fe26:	f10d 0192 	add.w	r1, sp, #146	; 0x92
    fe2a:	e001      	b.n	fe30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13d0>
    fe2c:	f812 3b01 	ldrb.w	r3, [r2], #1
    fe30:	4594      	cmp	ip, r2
    fe32:	f801 3b01 	strb.w	r3, [r1], #1
    fe36:	d1f9      	bne.n	fe2c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13cc>
    fe38:	aa28      	add	r2, sp, #160	; 0xa0
    fe3a:	f10d 0392 	add.w	r3, sp, #146	; 0x92
    fe3e:	1b12      	subs	r2, r2, r4
    fe40:	441a      	add	r2, r3
    fe42:	e5ae      	b.n	f9a2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf42>
    fe44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fe46:	9308      	str	r3, [sp, #32]
    fe48:	e5d3      	b.n	f9f2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf92>
    fe4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    fe4c:	2666      	movs	r6, #102	; 0x66
    fe4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fe50:	4413      	add	r3, r2
    fe52:	9a06      	ldr	r2, [sp, #24]
    fe54:	441a      	add	r2, r3
    fe56:	9208      	str	r2, [sp, #32]
    fe58:	f7ff bac7 	b.w	f3ea <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98a>
    fe5c:	469b      	mov	fp, r3
    fe5e:	f7ff bb03 	b.w	f468 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa08>
    fe62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fe64:	2b00      	cmp	r3, #0
    fe66:	db43      	blt.n	fef0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1490>
    fe68:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
    fe6c:	2003      	movs	r0, #3
    fe6e:	4f3e      	ldr	r7, [pc, #248]	; (ff68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1508>)
    fe70:	4b3e      	ldr	r3, [pc, #248]	; (ff6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x150c>)
    fe72:	9005      	str	r0, [sp, #20]
    fe74:	f7fe bf93 	b.w	ed9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x33e>
    fe78:	464a      	mov	r2, r9
    fe7a:	4b3d      	ldr	r3, [pc, #244]	; (ff70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1510>)
    fe7c:	e431      	b.n	f6e2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc82>
    fe7e:	222d      	movs	r2, #45	; 0x2d
    fe80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fe82:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
    fe86:	f1c3 0301 	rsb	r3, r3, #1
    fe8a:	e57b      	b.n	f984 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf24>
    fe8c:	9b05      	ldr	r3, [sp, #20]
    fe8e:	07db      	lsls	r3, r3, #31
    fe90:	f57f ad94 	bpl.w	f9bc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf5c>
    fe94:	e58e      	b.n	f9b4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf54>
    fe96:	bb1b      	cbnz	r3, fee0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1480>
    fe98:	9b05      	ldr	r3, [sp, #20]
    fe9a:	07dc      	lsls	r4, r3, #31
    fe9c:	d420      	bmi.n	fee0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1480>
    fe9e:	2301      	movs	r3, #1
    fea0:	2666      	movs	r6, #102	; 0x66
    fea2:	9305      	str	r3, [sp, #20]
    fea4:	9308      	str	r3, [sp, #32]
    fea6:	f7ff baa8 	b.w	f3fa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x99a>
    feaa:	f1c3 0301 	rsb	r3, r3, #1
    feae:	2667      	movs	r6, #103	; 0x67
    feb0:	9a08      	ldr	r2, [sp, #32]
    feb2:	441a      	add	r2, r3
    feb4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    feb8:	9208      	str	r2, [sp, #32]
    feba:	9305      	str	r3, [sp, #20]
    febc:	f7ff ba9d 	b.w	f3fa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x99a>
    fec0:	9906      	ldr	r1, [sp, #24]
    fec2:	4690      	mov	r8, r2
    fec4:	2201      	movs	r2, #1
    fec6:	910b      	str	r1, [sp, #44]	; 0x2c
    fec8:	9206      	str	r2, [sp, #24]
    feca:	f7ff ba44 	b.w	f356 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8f6>
    fece:	9b05      	ldr	r3, [sp, #20]
    fed0:	07db      	lsls	r3, r3, #31
    fed2:	d434      	bmi.n	ff3e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14de>
    fed4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    fed6:	f7ff ba6d 	b.w	f3b4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x954>
    feda:	f10d 0192 	add.w	r1, sp, #146	; 0x92
    fede:	e55d      	b.n	f99c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf3c>
    fee0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    fee2:	2666      	movs	r6, #102	; 0x66
    fee4:	9a06      	ldr	r2, [sp, #24]
    fee6:	3301      	adds	r3, #1
    fee8:	e7e3      	b.n	feb2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1452>
    feea:	9a06      	ldr	r2, [sp, #24]
    feec:	7a92      	ldrb	r2, [r2, #10]
    feee:	e6db      	b.n	fca8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1248>
    fef0:	232d      	movs	r3, #45	; 0x2d
    fef2:	461a      	mov	r2, r3
    fef4:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
    fef8:	e7b8      	b.n	fe6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x140c>
    fefa:	aa28      	add	r2, sp, #160	; 0xa0
    fefc:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
    ff00:	f01d fe66 	bl	2dbd0 <__ssprint_r>
    ff04:	2800      	cmp	r0, #0
    ff06:	f47e ac1a 	bne.w	e73e <_svfprintf_r+0x1a6>
    ff0a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    ff0c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    ff10:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    ff12:	f7ff b83c 	b.w	ef8e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52e>
    ff16:	9b06      	ldr	r3, [sp, #24]
    ff18:	f1c3 0301 	rsb	r3, r3, #1
    ff1c:	9322      	str	r3, [sp, #136]	; 0x88
    ff1e:	e643      	b.n	fba8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1148>
    ff20:	990c      	ldr	r1, [sp, #48]	; 0x30
    ff22:	f89b 6001 	ldrb.w	r6, [fp, #1]
    ff26:	4693      	mov	fp, r2
    ff28:	680b      	ldr	r3, [r1, #0]
    ff2a:	3104      	adds	r1, #4
    ff2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
    ff30:	910c      	str	r1, [sp, #48]	; 0x30
    ff32:	9306      	str	r3, [sp, #24]
    ff34:	f7fe bb89 	b.w	e64a <_svfprintf_r+0xb2>
    ff38:	f10d 0292 	add.w	r2, sp, #146	; 0x92
    ff3c:	e531      	b.n	f9a2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf42>
    ff3e:	9b06      	ldr	r3, [sp, #24]
    ff40:	18fc      	adds	r4, r7, r3
    ff42:	f7ff ba2d 	b.w	f3a0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x940>
    ff46:	f04f 32ff 	mov.w	r2, #4294967295
    ff4a:	230c      	movs	r3, #12
    ff4c:	9207      	str	r2, [sp, #28]
    ff4e:	9a03      	ldr	r2, [sp, #12]
    ff50:	6013      	str	r3, [r2, #0]
    ff52:	f7fe bc03 	b.w	e75c <_svfprintf_r+0x1c4>
    ff56:	9a04      	ldr	r2, [sp, #16]
    ff58:	8993      	ldrh	r3, [r2, #12]
    ff5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ff5e:	8193      	strh	r3, [r2, #12]
    ff60:	f7fe bbf5 	b.w	e74e <_svfprintf_r+0x1b6>
    ff64:	cccccccd 	.word	0xcccccccd
    ff68:	00033d68 	.word	0x00033d68
    ff6c:	00033d64 	.word	0x00033d64
    ff70:	00033db0 	.word	0x00033db0
    ff74:	00000000 	.word	0x00000000

0000ff78 <_dtoa_r>:
    ff78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff7c:	b099      	sub	sp, #100	; 0x64
    ff7e:	4604      	mov	r4, r0
    ff80:	ee10 aa10 	vmov	sl, s0
    ff84:	9100      	str	r1, [sp, #0]
    ff86:	e9cd 3203 	strd	r3, r2, [sp, #12]
    ff8a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    ff8c:	ec57 6b10 	vmov	r6, r7, d0
    ff90:	46bb      	mov	fp, r7
    ff92:	b14b      	cbz	r3, ffa8 <_dtoa_r+0x30>
    ff94:	6c45      	ldr	r5, [r0, #68]	; 0x44
    ff96:	2201      	movs	r2, #1
    ff98:	4619      	mov	r1, r3
    ff9a:	40aa      	lsls	r2, r5
    ff9c:	e9c3 5201 	strd	r5, r2, [r3, #4]
    ffa0:	f01d f8a4 	bl	2d0ec <_Bfree>
    ffa4:	2300      	movs	r3, #0
    ffa6:	6423      	str	r3, [r4, #64]	; 0x40
    ffa8:	f1b7 0900 	subs.w	r9, r7, #0
    ffac:	f2c0 80af 	blt.w	1010e <_dtoa_r+0x196>
    ffb0:	2300      	movs	r3, #0
    ffb2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    ffb4:	6013      	str	r3, [r2, #0]
    ffb6:	4b7a      	ldr	r3, [pc, #488]	; (101a0 <_dtoa_r+0x228>)
    ffb8:	ea33 0309 	bics.w	r3, r3, r9
    ffbc:	f000 80b2 	beq.w	10124 <_dtoa_r+0x1ac>
    ffc0:	4650      	mov	r0, sl
    ffc2:	4659      	mov	r1, fp
    ffc4:	2200      	movs	r2, #0
    ffc6:	2300      	movs	r3, #0
    ffc8:	f7fc fce2 	bl	c990 <__aeabi_dcmpeq>
    ffcc:	4656      	mov	r6, sl
    ffce:	465f      	mov	r7, fp
    ffd0:	4680      	mov	r8, r0
    ffd2:	b168      	cbz	r0, fff0 <_dtoa_r+0x78>
    ffd4:	2301      	movs	r3, #1
    ffd6:	9a03      	ldr	r2, [sp, #12]
    ffd8:	6013      	str	r3, [r2, #0]
    ffda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    ffdc:	2b00      	cmp	r3, #0
    ffde:	f000 80cc 	beq.w	1017a <_dtoa_r+0x202>
    ffe2:	4f70      	ldr	r7, [pc, #448]	; (101a4 <_dtoa_r+0x22c>)
    ffe4:	601f      	str	r7, [r3, #0]
    ffe6:	3f01      	subs	r7, #1
    ffe8:	4638      	mov	r0, r7
    ffea:	b019      	add	sp, #100	; 0x64
    ffec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fff0:	aa16      	add	r2, sp, #88	; 0x58
    fff2:	a917      	add	r1, sp, #92	; 0x5c
    fff4:	4620      	mov	r0, r4
    fff6:	ec47 6b10 	vmov	d0, r6, r7
    fffa:	f01d fb0f 	bl	2d61c <__d2b>
    fffe:	9009      	str	r0, [sp, #36]	; 0x24
   10000:	ea5f 5519 	movs.w	r5, r9, lsr #20
   10004:	f040 80ac 	bne.w	10160 <_dtoa_r+0x1e8>
   10008:	e9dd 8516 	ldrd	r8, r5, [sp, #88]	; 0x58
   1000c:	4445      	add	r5, r8
   1000e:	f205 4332 	addw	r3, r5, #1074	; 0x432
   10012:	2b20      	cmp	r3, #32
   10014:	f340 8292 	ble.w	1053c <_dtoa_r+0x5c4>
   10018:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   1001c:	f205 4012 	addw	r0, r5, #1042	; 0x412
   10020:	fa09 f903 	lsl.w	r9, r9, r3
   10024:	fa2a f000 	lsr.w	r0, sl, r0
   10028:	ea49 0000 	orr.w	r0, r9, r0
   1002c:	f7fc f9ce 	bl	c3cc <__aeabi_ui2d>
   10030:	3d01      	subs	r5, #1
   10032:	2201      	movs	r2, #1
   10034:	4606      	mov	r6, r0
   10036:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
   1003a:	9214      	str	r2, [sp, #80]	; 0x50
   1003c:	4630      	mov	r0, r6
   1003e:	4639      	mov	r1, r7
   10040:	2200      	movs	r2, #0
   10042:	4b59      	ldr	r3, [pc, #356]	; (101a8 <_dtoa_r+0x230>)
   10044:	f7fc f884 	bl	c150 <__aeabi_dsub>
   10048:	a34f      	add	r3, pc, #316	; (adr r3, 10188 <_dtoa_r+0x210>)
   1004a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1004e:	f7fc fa37 	bl	c4c0 <__aeabi_dmul>
   10052:	a34f      	add	r3, pc, #316	; (adr r3, 10190 <_dtoa_r+0x218>)
   10054:	e9d3 2300 	ldrd	r2, r3, [r3]
   10058:	f7fc f87c 	bl	c154 <__adddf3>
   1005c:	4606      	mov	r6, r0
   1005e:	460f      	mov	r7, r1
   10060:	4628      	mov	r0, r5
   10062:	f7fc f9c3 	bl	c3ec <__aeabi_i2d>
   10066:	a34c      	add	r3, pc, #304	; (adr r3, 10198 <_dtoa_r+0x220>)
   10068:	e9d3 2300 	ldrd	r2, r3, [r3]
   1006c:	f7fc fa28 	bl	c4c0 <__aeabi_dmul>
   10070:	4602      	mov	r2, r0
   10072:	460b      	mov	r3, r1
   10074:	4630      	mov	r0, r6
   10076:	4639      	mov	r1, r7
   10078:	f7fc f86c 	bl	c154 <__adddf3>
   1007c:	4606      	mov	r6, r0
   1007e:	460f      	mov	r7, r1
   10080:	f7fc fcb8 	bl	c9f4 <__aeabi_d2iz>
   10084:	2200      	movs	r2, #0
   10086:	4681      	mov	r9, r0
   10088:	2300      	movs	r3, #0
   1008a:	4630      	mov	r0, r6
   1008c:	4639      	mov	r1, r7
   1008e:	f7fc fc89 	bl	c9a4 <__aeabi_dcmplt>
   10092:	2800      	cmp	r0, #0
   10094:	f040 8245 	bne.w	10522 <_dtoa_r+0x5aa>
   10098:	f1b9 0f16 	cmp.w	r9, #22
   1009c:	f200 822e 	bhi.w	104fc <_dtoa_r+0x584>
   100a0:	4942      	ldr	r1, [pc, #264]	; (101ac <_dtoa_r+0x234>)
   100a2:	4652      	mov	r2, sl
   100a4:	465b      	mov	r3, fp
   100a6:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
   100aa:	e9d1 0100 	ldrd	r0, r1, [r1]
   100ae:	f7fc fc97 	bl	c9e0 <__aeabi_dcmpgt>
   100b2:	2800      	cmp	r0, #0
   100b4:	f000 8249 	beq.w	1054a <_dtoa_r+0x5d2>
   100b8:	2300      	movs	r3, #0
   100ba:	f109 39ff 	add.w	r9, r9, #4294967295
   100be:	9310      	str	r3, [sp, #64]	; 0x40
   100c0:	eba8 0505 	sub.w	r5, r8, r5
   100c4:	1e6b      	subs	r3, r5, #1
   100c6:	9306      	str	r3, [sp, #24]
   100c8:	f100 8225 	bmi.w	10516 <_dtoa_r+0x59e>
   100cc:	2300      	movs	r3, #0
   100ce:	9308      	str	r3, [sp, #32]
   100d0:	f1b9 0f00 	cmp.w	r9, #0
   100d4:	f2c0 8215 	blt.w	10502 <_dtoa_r+0x58a>
   100d8:	9b06      	ldr	r3, [sp, #24]
   100da:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   100de:	444b      	add	r3, r9
   100e0:	9306      	str	r3, [sp, #24]
   100e2:	2300      	movs	r3, #0
   100e4:	930e      	str	r3, [sp, #56]	; 0x38
   100e6:	9b00      	ldr	r3, [sp, #0]
   100e8:	2b09      	cmp	r3, #9
   100ea:	d867      	bhi.n	101bc <_dtoa_r+0x244>
   100ec:	2b05      	cmp	r3, #5
   100ee:	f340 822a 	ble.w	10546 <_dtoa_r+0x5ce>
   100f2:	3b04      	subs	r3, #4
   100f4:	2500      	movs	r5, #0
   100f6:	9300      	str	r3, [sp, #0]
   100f8:	9b00      	ldr	r3, [sp, #0]
   100fa:	3b02      	subs	r3, #2
   100fc:	2b03      	cmp	r3, #3
   100fe:	f200 824b 	bhi.w	10598 <_dtoa_r+0x620>
   10102:	e8df f013 	tbh	[pc, r3, lsl #1]
   10106:	0283      	.short	0x0283
   10108:	02ad02a1 	.word	0x02ad02a1
   1010c:	04a8      	.short	0x04a8
   1010e:	2301      	movs	r3, #1
   10110:	9a22      	ldr	r2, [sp, #136]	; 0x88
   10112:	f029 4900 	bic.w	r9, r9, #2147483648	; 0x80000000
   10116:	6013      	str	r3, [r2, #0]
   10118:	4b21      	ldr	r3, [pc, #132]	; (101a0 <_dtoa_r+0x228>)
   1011a:	46cb      	mov	fp, r9
   1011c:	ea33 0309 	bics.w	r3, r3, r9
   10120:	f47f af4e 	bne.w	ffc0 <_dtoa_r+0x48>
   10124:	f242 730f 	movw	r3, #9999	; 0x270f
   10128:	9a03      	ldr	r2, [sp, #12]
   1012a:	6013      	str	r3, [r2, #0]
   1012c:	f1ba 0f00 	cmp.w	sl, #0
   10130:	d10f      	bne.n	10152 <_dtoa_r+0x1da>
   10132:	f3c9 0313 	ubfx	r3, r9, #0, #20
   10136:	b963      	cbnz	r3, 10152 <_dtoa_r+0x1da>
   10138:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1013a:	4f1d      	ldr	r7, [pc, #116]	; (101b0 <_dtoa_r+0x238>)
   1013c:	2b00      	cmp	r3, #0
   1013e:	f43f af53 	beq.w	ffe8 <_dtoa_r+0x70>
   10142:	f107 0308 	add.w	r3, r7, #8
   10146:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   10148:	4638      	mov	r0, r7
   1014a:	6013      	str	r3, [r2, #0]
   1014c:	b019      	add	sp, #100	; 0x64
   1014e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10152:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10154:	4f17      	ldr	r7, [pc, #92]	; (101b4 <_dtoa_r+0x23c>)
   10156:	2b00      	cmp	r3, #0
   10158:	f43f af46 	beq.w	ffe8 <_dtoa_r+0x70>
   1015c:	1cfb      	adds	r3, r7, #3
   1015e:	e7f2      	b.n	10146 <_dtoa_r+0x1ce>
   10160:	f3cb 0313 	ubfx	r3, fp, #0, #20
   10164:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   10168:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   1016c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   10170:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
   10174:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
   10178:	e760      	b.n	1003c <_dtoa_r+0xc4>
   1017a:	4f0f      	ldr	r7, [pc, #60]	; (101b8 <_dtoa_r+0x240>)
   1017c:	4638      	mov	r0, r7
   1017e:	b019      	add	sp, #100	; 0x64
   10180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10184:	f3af 8000 	nop.w
   10188:	636f4361 	.word	0x636f4361
   1018c:	3fd287a7 	.word	0x3fd287a7
   10190:	8b60c8b3 	.word	0x8b60c8b3
   10194:	3fc68a28 	.word	0x3fc68a28
   10198:	509f79fb 	.word	0x509f79fb
   1019c:	3fd34413 	.word	0x3fd34413
   101a0:	7ff00000 	.word	0x7ff00000
   101a4:	00033d9d 	.word	0x00033d9d
   101a8:	3ff80000 	.word	0x3ff80000
   101ac:	00030da0 	.word	0x00030da0
   101b0:	00033f14 	.word	0x00033f14
   101b4:	00033f20 	.word	0x00033f20
   101b8:	00033d9c 	.word	0x00033d9c
   101bc:	2300      	movs	r3, #0
   101be:	2201      	movs	r2, #1
   101c0:	461d      	mov	r5, r3
   101c2:	920c      	str	r2, [sp, #48]	; 0x30
   101c4:	f04f 32ff 	mov.w	r2, #4294967295
   101c8:	9300      	str	r3, [sp, #0]
   101ca:	9304      	str	r3, [sp, #16]
   101cc:	9207      	str	r2, [sp, #28]
   101ce:	2100      	movs	r1, #0
   101d0:	9b07      	ldr	r3, [sp, #28]
   101d2:	6461      	str	r1, [r4, #68]	; 0x44
   101d4:	9311      	str	r3, [sp, #68]	; 0x44
   101d6:	4620      	mov	r0, r4
   101d8:	f01c ff62 	bl	2d0a0 <_Balloc>
   101dc:	9005      	str	r0, [sp, #20]
   101de:	6420      	str	r0, [r4, #64]	; 0x40
   101e0:	2d00      	cmp	r5, #0
   101e2:	f000 80e5 	beq.w	103b0 <_dtoa_r+0x438>
   101e6:	4650      	mov	r0, sl
   101e8:	4659      	mov	r1, fp
   101ea:	f1b9 0f00 	cmp.w	r9, #0
   101ee:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   101f2:	f340 831a 	ble.w	1082a <_dtoa_r+0x8b2>
   101f6:	4abb      	ldr	r2, [pc, #748]	; (104e4 <_dtoa_r+0x56c>)
   101f8:	f009 030f 	and.w	r3, r9, #15
   101fc:	ea4f 1529 	mov.w	r5, r9, asr #4
   10200:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   10204:	e9d3 6700 	ldrd	r6, r7, [r3]
   10208:	06eb      	lsls	r3, r5, #27
   1020a:	f140 81f8 	bpl.w	105fe <_dtoa_r+0x686>
   1020e:	4bb6      	ldr	r3, [pc, #728]	; (104e8 <_dtoa_r+0x570>)
   10210:	f005 050f 	and.w	r5, r5, #15
   10214:	f04f 0a03 	mov.w	sl, #3
   10218:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1021c:	f7fc fa7a 	bl	c714 <__aeabi_ddiv>
   10220:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   10224:	b195      	cbz	r5, 1024c <_dtoa_r+0x2d4>
   10226:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 104e8 <_dtoa_r+0x570>
   1022a:	f015 0f01 	tst.w	r5, #1
   1022e:	4630      	mov	r0, r6
   10230:	4639      	mov	r1, r7
   10232:	d007      	beq.n	10244 <_dtoa_r+0x2cc>
   10234:	f10a 0a01 	add.w	sl, sl, #1
   10238:	e9d8 2300 	ldrd	r2, r3, [r8]
   1023c:	f7fc f940 	bl	c4c0 <__aeabi_dmul>
   10240:	4606      	mov	r6, r0
   10242:	460f      	mov	r7, r1
   10244:	106d      	asrs	r5, r5, #1
   10246:	f108 0808 	add.w	r8, r8, #8
   1024a:	d1ee      	bne.n	1022a <_dtoa_r+0x2b2>
   1024c:	4632      	mov	r2, r6
   1024e:	463b      	mov	r3, r7
   10250:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   10254:	f7fc fa5e 	bl	c714 <__aeabi_ddiv>
   10258:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1025c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1025e:	b143      	cbz	r3, 10272 <_dtoa_r+0x2fa>
   10260:	2200      	movs	r2, #0
   10262:	4ba2      	ldr	r3, [pc, #648]	; (104ec <_dtoa_r+0x574>)
   10264:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   10268:	f7fc fb9c 	bl	c9a4 <__aeabi_dcmplt>
   1026c:	2800      	cmp	r0, #0
   1026e:	f040 84ad 	bne.w	10bcc <_dtoa_r+0xc54>
   10272:	4650      	mov	r0, sl
   10274:	f7fc f8ba 	bl	c3ec <__aeabi_i2d>
   10278:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1027c:	f7fc f920 	bl	c4c0 <__aeabi_dmul>
   10280:	4b9b      	ldr	r3, [pc, #620]	; (104f0 <_dtoa_r+0x578>)
   10282:	2200      	movs	r2, #0
   10284:	f7fb ff66 	bl	c154 <__adddf3>
   10288:	9b07      	ldr	r3, [sp, #28]
   1028a:	4682      	mov	sl, r0
   1028c:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
   10290:	2b00      	cmp	r3, #0
   10292:	f000 81f6 	beq.w	10682 <_dtoa_r+0x70a>
   10296:	9b07      	ldr	r3, [sp, #28]
   10298:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1029c:	9315      	str	r3, [sp, #84]	; 0x54
   1029e:	9b05      	ldr	r3, [sp, #20]
   102a0:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   102a4:	1c5d      	adds	r5, r3, #1
   102a6:	4639      	mov	r1, r7
   102a8:	4630      	mov	r0, r6
   102aa:	f7fc fba3 	bl	c9f4 <__aeabi_d2iz>
   102ae:	4680      	mov	r8, r0
   102b0:	f7fc f89c 	bl	c3ec <__aeabi_i2d>
   102b4:	4602      	mov	r2, r0
   102b6:	460b      	mov	r3, r1
   102b8:	4630      	mov	r0, r6
   102ba:	4639      	mov	r1, r7
   102bc:	f108 0830 	add.w	r8, r8, #48	; 0x30
   102c0:	f7fb ff46 	bl	c150 <__aeabi_dsub>
   102c4:	4b87      	ldr	r3, [pc, #540]	; (104e4 <_dtoa_r+0x56c>)
   102c6:	460f      	mov	r7, r1
   102c8:	9915      	ldr	r1, [sp, #84]	; 0x54
   102ca:	4606      	mov	r6, r0
   102cc:	980c      	ldr	r0, [sp, #48]	; 0x30
   102ce:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   102d2:	fa5f f888 	uxtb.w	r8, r8
   102d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   102da:	2800      	cmp	r0, #0
   102dc:	f000 8363 	beq.w	109a6 <_dtoa_r+0xa2e>
   102e0:	2000      	movs	r0, #0
   102e2:	4984      	ldr	r1, [pc, #528]	; (104f4 <_dtoa_r+0x57c>)
   102e4:	f7fc fa16 	bl	c714 <__aeabi_ddiv>
   102e8:	4652      	mov	r2, sl
   102ea:	465b      	mov	r3, fp
   102ec:	f7fb ff30 	bl	c150 <__aeabi_dsub>
   102f0:	9a05      	ldr	r2, [sp, #20]
   102f2:	463b      	mov	r3, r7
   102f4:	4682      	mov	sl, r0
   102f6:	f882 8000 	strb.w	r8, [r2]
   102fa:	4632      	mov	r2, r6
   102fc:	468b      	mov	fp, r1
   102fe:	f7fc fb6f 	bl	c9e0 <__aeabi_dcmpgt>
   10302:	2800      	cmp	r0, #0
   10304:	d14d      	bne.n	103a2 <_dtoa_r+0x42a>
   10306:	4632      	mov	r2, r6
   10308:	463b      	mov	r3, r7
   1030a:	2000      	movs	r0, #0
   1030c:	4977      	ldr	r1, [pc, #476]	; (104ec <_dtoa_r+0x574>)
   1030e:	f7fb ff1f 	bl	c150 <__aeabi_dsub>
   10312:	4652      	mov	r2, sl
   10314:	465b      	mov	r3, fp
   10316:	f7fc fb45 	bl	c9a4 <__aeabi_dcmplt>
   1031a:	2800      	cmp	r0, #0
   1031c:	f040 84f9 	bne.w	10d12 <_dtoa_r+0xd9a>
   10320:	9915      	ldr	r1, [sp, #84]	; 0x54
   10322:	2901      	cmp	r1, #1
   10324:	d042      	beq.n	103ac <_dtoa_r+0x434>
   10326:	9a05      	ldr	r2, [sp, #20]
   10328:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   1032c:	4411      	add	r1, r2
   1032e:	4689      	mov	r9, r1
   10330:	e00e      	b.n	10350 <_dtoa_r+0x3d8>
   10332:	4632      	mov	r2, r6
   10334:	463b      	mov	r3, r7
   10336:	2000      	movs	r0, #0
   10338:	496c      	ldr	r1, [pc, #432]	; (104ec <_dtoa_r+0x574>)
   1033a:	f7fb ff09 	bl	c150 <__aeabi_dsub>
   1033e:	4652      	mov	r2, sl
   10340:	465b      	mov	r3, fp
   10342:	f7fc fb2f 	bl	c9a4 <__aeabi_dcmplt>
   10346:	2800      	cmp	r0, #0
   10348:	f040 84e3 	bne.w	10d12 <_dtoa_r+0xd9a>
   1034c:	454d      	cmp	r5, r9
   1034e:	d02b      	beq.n	103a8 <_dtoa_r+0x430>
   10350:	4650      	mov	r0, sl
   10352:	4659      	mov	r1, fp
   10354:	2200      	movs	r2, #0
   10356:	4b68      	ldr	r3, [pc, #416]	; (104f8 <_dtoa_r+0x580>)
   10358:	f7fc f8b2 	bl	c4c0 <__aeabi_dmul>
   1035c:	2200      	movs	r2, #0
   1035e:	4b66      	ldr	r3, [pc, #408]	; (104f8 <_dtoa_r+0x580>)
   10360:	4682      	mov	sl, r0
   10362:	468b      	mov	fp, r1
   10364:	4630      	mov	r0, r6
   10366:	4639      	mov	r1, r7
   10368:	f7fc f8aa 	bl	c4c0 <__aeabi_dmul>
   1036c:	460f      	mov	r7, r1
   1036e:	4606      	mov	r6, r0
   10370:	f7fc fb40 	bl	c9f4 <__aeabi_d2iz>
   10374:	4680      	mov	r8, r0
   10376:	f7fc f839 	bl	c3ec <__aeabi_i2d>
   1037a:	4602      	mov	r2, r0
   1037c:	460b      	mov	r3, r1
   1037e:	f108 0830 	add.w	r8, r8, #48	; 0x30
   10382:	4630      	mov	r0, r6
   10384:	4639      	mov	r1, r7
   10386:	fa5f f888 	uxtb.w	r8, r8
   1038a:	f7fb fee1 	bl	c150 <__aeabi_dsub>
   1038e:	4652      	mov	r2, sl
   10390:	465b      	mov	r3, fp
   10392:	f805 8b01 	strb.w	r8, [r5], #1
   10396:	4606      	mov	r6, r0
   10398:	460f      	mov	r7, r1
   1039a:	f7fc fb03 	bl	c9a4 <__aeabi_dcmplt>
   1039e:	2800      	cmp	r0, #0
   103a0:	d0c7      	beq.n	10332 <_dtoa_r+0x3ba>
   103a2:	9f05      	ldr	r7, [sp, #20]
   103a4:	9505      	str	r5, [sp, #20]
   103a6:	e089      	b.n	104bc <_dtoa_r+0x544>
   103a8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   103ac:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   103b0:	f1b9 0f0e 	cmp.w	r9, #14
   103b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   103b6:	dc02      	bgt.n	103be <_dtoa_r+0x446>
   103b8:	2b00      	cmp	r3, #0
   103ba:	f280 80ff 	bge.w	105bc <_dtoa_r+0x644>
   103be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   103c0:	2a00      	cmp	r2, #0
   103c2:	f040 80cc 	bne.w	1055e <_dtoa_r+0x5e6>
   103c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   103c8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   103ca:	9f08      	ldr	r7, [sp, #32]
   103cc:	930a      	str	r3, [sp, #40]	; 0x28
   103ce:	2f00      	cmp	r7, #0
   103d0:	dd0c      	ble.n	103ec <_dtoa_r+0x474>
   103d2:	9a06      	ldr	r2, [sp, #24]
   103d4:	2a00      	cmp	r2, #0
   103d6:	dd09      	ble.n	103ec <_dtoa_r+0x474>
   103d8:	42ba      	cmp	r2, r7
   103da:	4613      	mov	r3, r2
   103dc:	9908      	ldr	r1, [sp, #32]
   103de:	bfa8      	it	ge
   103e0:	463b      	movge	r3, r7
   103e2:	1ac9      	subs	r1, r1, r3
   103e4:	1aff      	subs	r7, r7, r3
   103e6:	1ad3      	subs	r3, r2, r3
   103e8:	9108      	str	r1, [sp, #32]
   103ea:	9306      	str	r3, [sp, #24]
   103ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   103ee:	b16b      	cbz	r3, 1040c <_dtoa_r+0x494>
   103f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   103f2:	2a00      	cmp	r2, #0
   103f4:	f000 83db 	beq.w	10bae <_dtoa_r+0xc36>
   103f8:	1b9d      	subs	r5, r3, r6
   103fa:	2e00      	cmp	r6, #0
   103fc:	f040 840d 	bne.w	10c1a <_dtoa_r+0xca2>
   10400:	462a      	mov	r2, r5
   10402:	9909      	ldr	r1, [sp, #36]	; 0x24
   10404:	4620      	mov	r0, r4
   10406:	f01c ffc1 	bl	2d38c <__pow5mult>
   1040a:	9009      	str	r0, [sp, #36]	; 0x24
   1040c:	2101      	movs	r1, #1
   1040e:	4620      	mov	r0, r4
   10410:	f01c ff0a 	bl	2d228 <__i2b>
   10414:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10416:	4606      	mov	r6, r0
   10418:	2a00      	cmp	r2, #0
   1041a:	f040 8157 	bne.w	106cc <_dtoa_r+0x754>
   1041e:	9b00      	ldr	r3, [sp, #0]
   10420:	2b01      	cmp	r3, #1
   10422:	f340 8501 	ble.w	10e28 <_dtoa_r+0xeb0>
   10426:	2001      	movs	r0, #1
   10428:	9a06      	ldr	r2, [sp, #24]
   1042a:	4410      	add	r0, r2
   1042c:	f010 001f 	ands.w	r0, r0, #31
   10430:	f000 8143 	beq.w	106ba <_dtoa_r+0x742>
   10434:	f1c0 0320 	rsb	r3, r0, #32
   10438:	2b04      	cmp	r3, #4
   1043a:	f340 84fb 	ble.w	10e34 <_dtoa_r+0xebc>
   1043e:	f1c0 001c 	rsb	r0, r0, #28
   10442:	9b08      	ldr	r3, [sp, #32]
   10444:	4402      	add	r2, r0
   10446:	4403      	add	r3, r0
   10448:	4407      	add	r7, r0
   1044a:	9308      	str	r3, [sp, #32]
   1044c:	9206      	str	r2, [sp, #24]
   1044e:	9b08      	ldr	r3, [sp, #32]
   10450:	2b00      	cmp	r3, #0
   10452:	dd05      	ble.n	10460 <_dtoa_r+0x4e8>
   10454:	461a      	mov	r2, r3
   10456:	9909      	ldr	r1, [sp, #36]	; 0x24
   10458:	4620      	mov	r0, r4
   1045a:	f01c ffe7 	bl	2d42c <__lshift>
   1045e:	9009      	str	r0, [sp, #36]	; 0x24
   10460:	9b06      	ldr	r3, [sp, #24]
   10462:	2b00      	cmp	r3, #0
   10464:	dd05      	ble.n	10472 <_dtoa_r+0x4fa>
   10466:	4631      	mov	r1, r6
   10468:	461a      	mov	r2, r3
   1046a:	4620      	mov	r0, r4
   1046c:	f01c ffde 	bl	2d42c <__lshift>
   10470:	4606      	mov	r6, r0
   10472:	9b00      	ldr	r3, [sp, #0]
   10474:	2b02      	cmp	r3, #2
   10476:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10478:	bfd4      	ite	le
   1047a:	f04f 0800 	movle.w	r8, #0
   1047e:	f04f 0801 	movgt.w	r8, #1
   10482:	2b00      	cmp	r3, #0
   10484:	f040 821c 	bne.w	108c0 <_dtoa_r+0x948>
   10488:	9b07      	ldr	r3, [sp, #28]
   1048a:	2b00      	cmp	r3, #0
   1048c:	f300 814a 	bgt.w	10724 <_dtoa_r+0x7ac>
   10490:	f1b8 0f00 	cmp.w	r8, #0
   10494:	f000 8146 	beq.w	10724 <_dtoa_r+0x7ac>
   10498:	9b07      	ldr	r3, [sp, #28]
   1049a:	2b00      	cmp	r3, #0
   1049c:	f000 8379 	beq.w	10b92 <_dtoa_r+0xc1a>
   104a0:	9b04      	ldr	r3, [sp, #16]
   104a2:	9f05      	ldr	r7, [sp, #20]
   104a4:	43db      	mvns	r3, r3
   104a6:	930d      	str	r3, [sp, #52]	; 0x34
   104a8:	4631      	mov	r1, r6
   104aa:	4620      	mov	r0, r4
   104ac:	f01c fe1e 	bl	2d0ec <_Bfree>
   104b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   104b2:	b11b      	cbz	r3, 104bc <_dtoa_r+0x544>
   104b4:	990a      	ldr	r1, [sp, #40]	; 0x28
   104b6:	4620      	mov	r0, r4
   104b8:	f01c fe18 	bl	2d0ec <_Bfree>
   104bc:	9909      	ldr	r1, [sp, #36]	; 0x24
   104be:	4620      	mov	r0, r4
   104c0:	f01c fe14 	bl	2d0ec <_Bfree>
   104c4:	2200      	movs	r2, #0
   104c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   104c8:	9905      	ldr	r1, [sp, #20]
   104ca:	3301      	adds	r3, #1
   104cc:	700a      	strb	r2, [r1, #0]
   104ce:	9a03      	ldr	r2, [sp, #12]
   104d0:	6013      	str	r3, [r2, #0]
   104d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   104d4:	2b00      	cmp	r3, #0
   104d6:	f43f ad87 	beq.w	ffe8 <_dtoa_r+0x70>
   104da:	4638      	mov	r0, r7
   104dc:	6019      	str	r1, [r3, #0]
   104de:	b019      	add	sp, #100	; 0x64
   104e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   104e4:	00030da0 	.word	0x00030da0
   104e8:	00030d78 	.word	0x00030d78
   104ec:	3ff00000 	.word	0x3ff00000
   104f0:	401c0000 	.word	0x401c0000
   104f4:	3fe00000 	.word	0x3fe00000
   104f8:	40240000 	.word	0x40240000
   104fc:	2301      	movs	r3, #1
   104fe:	9310      	str	r3, [sp, #64]	; 0x40
   10500:	e5de      	b.n	100c0 <_dtoa_r+0x148>
   10502:	9b08      	ldr	r3, [sp, #32]
   10504:	eba3 0309 	sub.w	r3, r3, r9
   10508:	9308      	str	r3, [sp, #32]
   1050a:	f1c9 0300 	rsb	r3, r9, #0
   1050e:	930e      	str	r3, [sp, #56]	; 0x38
   10510:	2300      	movs	r3, #0
   10512:	930f      	str	r3, [sp, #60]	; 0x3c
   10514:	e5e7      	b.n	100e6 <_dtoa_r+0x16e>
   10516:	f1c5 0301 	rsb	r3, r5, #1
   1051a:	9308      	str	r3, [sp, #32]
   1051c:	2300      	movs	r3, #0
   1051e:	9306      	str	r3, [sp, #24]
   10520:	e5d6      	b.n	100d0 <_dtoa_r+0x158>
   10522:	4648      	mov	r0, r9
   10524:	f7fb ff62 	bl	c3ec <__aeabi_i2d>
   10528:	4632      	mov	r2, r6
   1052a:	463b      	mov	r3, r7
   1052c:	f7fc fa30 	bl	c990 <__aeabi_dcmpeq>
   10530:	2800      	cmp	r0, #0
   10532:	f47f adb1 	bne.w	10098 <_dtoa_r+0x120>
   10536:	f109 39ff 	add.w	r9, r9, #4294967295
   1053a:	e5ad      	b.n	10098 <_dtoa_r+0x120>
   1053c:	f1c3 0920 	rsb	r9, r3, #32
   10540:	fa0a f009 	lsl.w	r0, sl, r9
   10544:	e572      	b.n	1002c <_dtoa_r+0xb4>
   10546:	2501      	movs	r5, #1
   10548:	e5d6      	b.n	100f8 <_dtoa_r+0x180>
   1054a:	9010      	str	r0, [sp, #64]	; 0x40
   1054c:	e5b8      	b.n	100c0 <_dtoa_r+0x148>
   1054e:	2101      	movs	r1, #1
   10550:	f04f 32ff 	mov.w	r2, #4294967295
   10554:	910c      	str	r1, [sp, #48]	; 0x30
   10556:	2100      	movs	r1, #0
   10558:	9211      	str	r2, [sp, #68]	; 0x44
   1055a:	9104      	str	r1, [sp, #16]
   1055c:	9207      	str	r2, [sp, #28]
   1055e:	9a00      	ldr	r2, [sp, #0]
   10560:	2a01      	cmp	r2, #1
   10562:	f340 8372 	ble.w	10c4a <_dtoa_r+0xcd2>
   10566:	9b07      	ldr	r3, [sp, #28]
   10568:	1e5e      	subs	r6, r3, #1
   1056a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1056c:	42b3      	cmp	r3, r6
   1056e:	f2c0 837b 	blt.w	10c68 <_dtoa_r+0xcf0>
   10572:	1b9e      	subs	r6, r3, r6
   10574:	9b07      	ldr	r3, [sp, #28]
   10576:	2b00      	cmp	r3, #0
   10578:	f2c0 8398 	blt.w	10cac <_dtoa_r+0xd34>
   1057c:	9a06      	ldr	r2, [sp, #24]
   1057e:	4611      	mov	r1, r2
   10580:	9a08      	ldr	r2, [sp, #32]
   10582:	4419      	add	r1, r3
   10584:	4617      	mov	r7, r2
   10586:	441a      	add	r2, r3
   10588:	9106      	str	r1, [sp, #24]
   1058a:	9208      	str	r2, [sp, #32]
   1058c:	2101      	movs	r1, #1
   1058e:	4620      	mov	r0, r4
   10590:	f01c fe4a 	bl	2d228 <__i2b>
   10594:	900a      	str	r0, [sp, #40]	; 0x28
   10596:	e71a      	b.n	103ce <_dtoa_r+0x456>
   10598:	2500      	movs	r5, #0
   1059a:	4620      	mov	r0, r4
   1059c:	6465      	str	r5, [r4, #68]	; 0x44
   1059e:	4629      	mov	r1, r5
   105a0:	f01c fd7e 	bl	2d0a0 <_Balloc>
   105a4:	f1b9 0f0e 	cmp.w	r9, #14
   105a8:	9005      	str	r0, [sp, #20]
   105aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   105ac:	6420      	str	r0, [r4, #64]	; 0x40
   105ae:	dcce      	bgt.n	1054e <_dtoa_r+0x5d6>
   105b0:	42ab      	cmp	r3, r5
   105b2:	dbcc      	blt.n	1054e <_dtoa_r+0x5d6>
   105b4:	f04f 33ff 	mov.w	r3, #4294967295
   105b8:	9504      	str	r5, [sp, #16]
   105ba:	9307      	str	r3, [sp, #28]
   105bc:	4bbc      	ldr	r3, [pc, #752]	; (108b0 <_dtoa_r+0x938>)
   105be:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   105c2:	ed93 7b00 	vldr	d7, [r3]
   105c6:	9b04      	ldr	r3, [sp, #16]
   105c8:	2b00      	cmp	r3, #0
   105ca:	ed8d 7b00 	vstr	d7, [sp]
   105ce:	f280 8245 	bge.w	10a5c <_dtoa_r+0xae4>
   105d2:	9e07      	ldr	r6, [sp, #28]
   105d4:	2e00      	cmp	r6, #0
   105d6:	f300 8241 	bgt.w	10a5c <_dtoa_r+0xae4>
   105da:	2e00      	cmp	r6, #0
   105dc:	d16a      	bne.n	106b4 <_dtoa_r+0x73c>
   105de:	2200      	movs	r2, #0
   105e0:	4bb4      	ldr	r3, [pc, #720]	; (108b4 <_dtoa_r+0x93c>)
   105e2:	ec51 0b17 	vmov	r0, r1, d7
   105e6:	f7fb ff6b 	bl	c4c0 <__aeabi_dmul>
   105ea:	4652      	mov	r2, sl
   105ec:	465b      	mov	r3, fp
   105ee:	f7fc f9ed 	bl	c9cc <__aeabi_dcmpge>
   105f2:	2800      	cmp	r0, #0
   105f4:	f000 8150 	beq.w	10898 <_dtoa_r+0x920>
   105f8:	9e07      	ldr	r6, [sp, #28]
   105fa:	960a      	str	r6, [sp, #40]	; 0x28
   105fc:	e750      	b.n	104a0 <_dtoa_r+0x528>
   105fe:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
   10602:	f04f 0a02 	mov.w	sl, #2
   10606:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1060a:	e60b      	b.n	10224 <_dtoa_r+0x2ac>
   1060c:	2300      	movs	r3, #0
   1060e:	930c      	str	r3, [sp, #48]	; 0x30
   10610:	9e04      	ldr	r6, [sp, #16]
   10612:	2e00      	cmp	r6, #0
   10614:	f340 821a 	ble.w	10a4c <_dtoa_r+0xad4>
   10618:	9611      	str	r6, [sp, #68]	; 0x44
   1061a:	9607      	str	r6, [sp, #28]
   1061c:	9b07      	ldr	r3, [sp, #28]
   1061e:	2100      	movs	r1, #0
   10620:	2b0e      	cmp	r3, #14
   10622:	bf8c      	ite	hi
   10624:	2500      	movhi	r5, #0
   10626:	f005 0501 	andls.w	r5, r5, #1
   1062a:	2e17      	cmp	r6, #23
   1062c:	6461      	str	r1, [r4, #68]	; 0x44
   1062e:	f77f add2 	ble.w	101d6 <_dtoa_r+0x25e>
   10632:	2201      	movs	r2, #1
   10634:	2304      	movs	r3, #4
   10636:	005b      	lsls	r3, r3, #1
   10638:	4611      	mov	r1, r2
   1063a:	3201      	adds	r2, #1
   1063c:	f103 0014 	add.w	r0, r3, #20
   10640:	42b0      	cmp	r0, r6
   10642:	d9f8      	bls.n	10636 <_dtoa_r+0x6be>
   10644:	6461      	str	r1, [r4, #68]	; 0x44
   10646:	e5c6      	b.n	101d6 <_dtoa_r+0x25e>
   10648:	2300      	movs	r3, #0
   1064a:	930c      	str	r3, [sp, #48]	; 0x30
   1064c:	9b04      	ldr	r3, [sp, #16]
   1064e:	444b      	add	r3, r9
   10650:	9311      	str	r3, [sp, #68]	; 0x44
   10652:	3301      	adds	r3, #1
   10654:	2b01      	cmp	r3, #1
   10656:	461e      	mov	r6, r3
   10658:	9307      	str	r3, [sp, #28]
   1065a:	bfb8      	it	lt
   1065c:	2601      	movlt	r6, #1
   1065e:	e7dd      	b.n	1061c <_dtoa_r+0x6a4>
   10660:	2301      	movs	r3, #1
   10662:	930c      	str	r3, [sp, #48]	; 0x30
   10664:	e7d4      	b.n	10610 <_dtoa_r+0x698>
   10666:	4650      	mov	r0, sl
   10668:	f7fb fec0 	bl	c3ec <__aeabi_i2d>
   1066c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   10670:	f7fb ff26 	bl	c4c0 <__aeabi_dmul>
   10674:	2200      	movs	r2, #0
   10676:	4b90      	ldr	r3, [pc, #576]	; (108b8 <_dtoa_r+0x940>)
   10678:	f7fb fd6c 	bl	c154 <__adddf3>
   1067c:	4682      	mov	sl, r0
   1067e:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
   10682:	2200      	movs	r2, #0
   10684:	4b8b      	ldr	r3, [pc, #556]	; (108b4 <_dtoa_r+0x93c>)
   10686:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1068a:	f7fb fd61 	bl	c150 <__aeabi_dsub>
   1068e:	4652      	mov	r2, sl
   10690:	465b      	mov	r3, fp
   10692:	4606      	mov	r6, r0
   10694:	460f      	mov	r7, r1
   10696:	f7fc f9a3 	bl	c9e0 <__aeabi_dcmpgt>
   1069a:	2800      	cmp	r0, #0
   1069c:	f040 80fb 	bne.w	10896 <_dtoa_r+0x91e>
   106a0:	4630      	mov	r0, r6
   106a2:	4639      	mov	r1, r7
   106a4:	4652      	mov	r2, sl
   106a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   106aa:	f7fc f97b 	bl	c9a4 <__aeabi_dcmplt>
   106ae:	2800      	cmp	r0, #0
   106b0:	f43f ae7c 	beq.w	103ac <_dtoa_r+0x434>
   106b4:	2600      	movs	r6, #0
   106b6:	960a      	str	r6, [sp, #40]	; 0x28
   106b8:	e6f2      	b.n	104a0 <_dtoa_r+0x528>
   106ba:	201c      	movs	r0, #28
   106bc:	9b08      	ldr	r3, [sp, #32]
   106be:	4407      	add	r7, r0
   106c0:	4403      	add	r3, r0
   106c2:	9308      	str	r3, [sp, #32]
   106c4:	9b06      	ldr	r3, [sp, #24]
   106c6:	4403      	add	r3, r0
   106c8:	9306      	str	r3, [sp, #24]
   106ca:	e6c0      	b.n	1044e <_dtoa_r+0x4d6>
   106cc:	4601      	mov	r1, r0
   106ce:	4620      	mov	r0, r4
   106d0:	f01c fe5c 	bl	2d38c <__pow5mult>
   106d4:	9b00      	ldr	r3, [sp, #0]
   106d6:	4606      	mov	r6, r0
   106d8:	2b01      	cmp	r3, #1
   106da:	f300 8161 	bgt.w	109a0 <_dtoa_r+0xa28>
   106de:	f1ba 0f00 	cmp.w	sl, #0
   106e2:	f040 815d 	bne.w	109a0 <_dtoa_r+0xa28>
   106e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   106ea:	2b00      	cmp	r3, #0
   106ec:	f040 8313 	bne.w	10d16 <_dtoa_r+0xd9e>
   106f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   106f4:	0d1b      	lsrs	r3, r3, #20
   106f6:	051b      	lsls	r3, r3, #20
   106f8:	b133      	cbz	r3, 10708 <_dtoa_r+0x790>
   106fa:	9b08      	ldr	r3, [sp, #32]
   106fc:	3301      	adds	r3, #1
   106fe:	9308      	str	r3, [sp, #32]
   10700:	9b06      	ldr	r3, [sp, #24]
   10702:	3301      	adds	r3, #1
   10704:	9306      	str	r3, [sp, #24]
   10706:	2301      	movs	r3, #1
   10708:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1070a:	930f      	str	r3, [sp, #60]	; 0x3c
   1070c:	2a00      	cmp	r2, #0
   1070e:	f43f ae8a 	beq.w	10426 <_dtoa_r+0x4ae>
   10712:	6933      	ldr	r3, [r6, #16]
   10714:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   10718:	6918      	ldr	r0, [r3, #16]
   1071a:	f01c fd33 	bl	2d184 <__hi0bits>
   1071e:	f1c0 0020 	rsb	r0, r0, #32
   10722:	e681      	b.n	10428 <_dtoa_r+0x4b0>
   10724:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10726:	2b00      	cmp	r3, #0
   10728:	f000 80e9 	beq.w	108fe <_dtoa_r+0x986>
   1072c:	2f00      	cmp	r7, #0
   1072e:	dd05      	ble.n	1073c <_dtoa_r+0x7c4>
   10730:	463a      	mov	r2, r7
   10732:	990a      	ldr	r1, [sp, #40]	; 0x28
   10734:	4620      	mov	r0, r4
   10736:	f01c fe79 	bl	2d42c <__lshift>
   1073a:	900a      	str	r0, [sp, #40]	; 0x28
   1073c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1073e:	2b00      	cmp	r3, #0
   10740:	f040 82f2 	bne.w	10d28 <_dtoa_r+0xdb0>
   10744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10746:	9306      	str	r3, [sp, #24]
   10748:	f00a 0201 	and.w	r2, sl, #1
   1074c:	9f05      	ldr	r7, [sp, #20]
   1074e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   10752:	46b0      	mov	r8, r6
   10754:	1e7b      	subs	r3, r7, #1
   10756:	9208      	str	r2, [sp, #32]
   10758:	9a07      	ldr	r2, [sp, #28]
   1075a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1075e:	441a      	add	r2, r3
   10760:	f8dd a018 	ldr.w	sl, [sp, #24]
   10764:	9e09      	ldr	r6, [sp, #36]	; 0x24
   10766:	9207      	str	r2, [sp, #28]
   10768:	4641      	mov	r1, r8
   1076a:	4630      	mov	r0, r6
   1076c:	f01b fe70 	bl	2c450 <quorem>
   10770:	4649      	mov	r1, r9
   10772:	4683      	mov	fp, r0
   10774:	4630      	mov	r0, r6
   10776:	f01c feb5 	bl	2d4e4 <__mcmp>
   1077a:	4652      	mov	r2, sl
   1077c:	4605      	mov	r5, r0
   1077e:	4641      	mov	r1, r8
   10780:	4620      	mov	r0, r4
   10782:	f01c fecb 	bl	2d51c <__mdiff>
   10786:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   1078a:	4602      	mov	r2, r0
   1078c:	9304      	str	r3, [sp, #16]
   1078e:	68c3      	ldr	r3, [r0, #12]
   10790:	2b00      	cmp	r3, #0
   10792:	d17e      	bne.n	10892 <_dtoa_r+0x91a>
   10794:	4601      	mov	r1, r0
   10796:	9006      	str	r0, [sp, #24]
   10798:	4630      	mov	r0, r6
   1079a:	f01c fea3 	bl	2d4e4 <__mcmp>
   1079e:	9a06      	ldr	r2, [sp, #24]
   107a0:	4603      	mov	r3, r0
   107a2:	4611      	mov	r1, r2
   107a4:	4620      	mov	r0, r4
   107a6:	9306      	str	r3, [sp, #24]
   107a8:	f01c fca0 	bl	2d0ec <_Bfree>
   107ac:	9b00      	ldr	r3, [sp, #0]
   107ae:	461a      	mov	r2, r3
   107b0:	9b06      	ldr	r3, [sp, #24]
   107b2:	431a      	orrs	r2, r3
   107b4:	d103      	bne.n	107be <_dtoa_r+0x846>
   107b6:	9a08      	ldr	r2, [sp, #32]
   107b8:	2a00      	cmp	r2, #0
   107ba:	f000 8305 	beq.w	10dc8 <_dtoa_r+0xe50>
   107be:	2d00      	cmp	r5, #0
   107c0:	f2c0 8288 	blt.w	10cd4 <_dtoa_r+0xd5c>
   107c4:	9a00      	ldr	r2, [sp, #0]
   107c6:	432a      	orrs	r2, r5
   107c8:	d103      	bne.n	107d2 <_dtoa_r+0x85a>
   107ca:	9a08      	ldr	r2, [sp, #32]
   107cc:	2a00      	cmp	r2, #0
   107ce:	f000 8281 	beq.w	10cd4 <_dtoa_r+0xd5c>
   107d2:	2b00      	cmp	r3, #0
   107d4:	f107 0501 	add.w	r5, r7, #1
   107d8:	f300 82bb 	bgt.w	10d52 <_dtoa_r+0xdda>
   107dc:	9b04      	ldr	r3, [sp, #16]
   107de:	703b      	strb	r3, [r7, #0]
   107e0:	9b07      	ldr	r3, [sp, #28]
   107e2:	42bb      	cmp	r3, r7
   107e4:	f000 82cd 	beq.w	10d82 <_dtoa_r+0xe0a>
   107e8:	4631      	mov	r1, r6
   107ea:	2300      	movs	r3, #0
   107ec:	220a      	movs	r2, #10
   107ee:	4620      	mov	r0, r4
   107f0:	f01c fc86 	bl	2d100 <__multadd>
   107f4:	45d1      	cmp	r9, sl
   107f6:	4606      	mov	r6, r0
   107f8:	4649      	mov	r1, r9
   107fa:	f04f 0300 	mov.w	r3, #0
   107fe:	f04f 020a 	mov.w	r2, #10
   10802:	4620      	mov	r0, r4
   10804:	d00b      	beq.n	1081e <_dtoa_r+0x8a6>
   10806:	f01c fc7b 	bl	2d100 <__multadd>
   1080a:	4651      	mov	r1, sl
   1080c:	4681      	mov	r9, r0
   1080e:	2300      	movs	r3, #0
   10810:	220a      	movs	r2, #10
   10812:	4620      	mov	r0, r4
   10814:	f01c fc74 	bl	2d100 <__multadd>
   10818:	462f      	mov	r7, r5
   1081a:	4682      	mov	sl, r0
   1081c:	e7a4      	b.n	10768 <_dtoa_r+0x7f0>
   1081e:	f01c fc6f 	bl	2d100 <__multadd>
   10822:	462f      	mov	r7, r5
   10824:	4681      	mov	r9, r0
   10826:	4682      	mov	sl, r0
   10828:	e79e      	b.n	10768 <_dtoa_r+0x7f0>
   1082a:	f000 81c7 	beq.w	10bbc <_dtoa_r+0xc44>
   1082e:	f1c9 0600 	rsb	r6, r9, #0
   10832:	4b1f      	ldr	r3, [pc, #124]	; (108b0 <_dtoa_r+0x938>)
   10834:	f006 020f 	and.w	r2, r6, #15
   10838:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1083c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   10840:	e9d3 2300 	ldrd	r2, r3, [r3]
   10844:	f7fb fe3c 	bl	c4c0 <__aeabi_dmul>
   10848:	1136      	asrs	r6, r6, #4
   1084a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1084e:	f000 82cf 	beq.w	10df0 <_dtoa_r+0xe78>
   10852:	4f1a      	ldr	r7, [pc, #104]	; (108bc <_dtoa_r+0x944>)
   10854:	f04f 0c00 	mov.w	ip, #0
   10858:	f04f 0a02 	mov.w	sl, #2
   1085c:	4602      	mov	r2, r0
   1085e:	460b      	mov	r3, r1
   10860:	f016 0f01 	tst.w	r6, #1
   10864:	4610      	mov	r0, r2
   10866:	4619      	mov	r1, r3
   10868:	d008      	beq.n	1087c <_dtoa_r+0x904>
   1086a:	f10a 0a01 	add.w	sl, sl, #1
   1086e:	e9d7 2300 	ldrd	r2, r3, [r7]
   10872:	f7fb fe25 	bl	c4c0 <__aeabi_dmul>
   10876:	46ac      	mov	ip, r5
   10878:	4602      	mov	r2, r0
   1087a:	460b      	mov	r3, r1
   1087c:	1076      	asrs	r6, r6, #1
   1087e:	f107 0708 	add.w	r7, r7, #8
   10882:	d1ed      	bne.n	10860 <_dtoa_r+0x8e8>
   10884:	f1bc 0f00 	cmp.w	ip, #0
   10888:	f43f ace8 	beq.w	1025c <_dtoa_r+0x2e4>
   1088c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   10890:	e4e4      	b.n	1025c <_dtoa_r+0x2e4>
   10892:	2301      	movs	r3, #1
   10894:	e785      	b.n	107a2 <_dtoa_r+0x82a>
   10896:	2600      	movs	r6, #0
   10898:	960a      	str	r6, [sp, #40]	; 0x28
   1089a:	f109 0201 	add.w	r2, r9, #1
   1089e:	2331      	movs	r3, #49	; 0x31
   108a0:	920d      	str	r2, [sp, #52]	; 0x34
   108a2:	9a05      	ldr	r2, [sp, #20]
   108a4:	7013      	strb	r3, [r2, #0]
   108a6:	1c53      	adds	r3, r2, #1
   108a8:	4617      	mov	r7, r2
   108aa:	9305      	str	r3, [sp, #20]
   108ac:	e5fc      	b.n	104a8 <_dtoa_r+0x530>
   108ae:	bf00      	nop
   108b0:	00030da0 	.word	0x00030da0
   108b4:	40140000 	.word	0x40140000
   108b8:	401c0000 	.word	0x401c0000
   108bc:	00030d78 	.word	0x00030d78
   108c0:	4631      	mov	r1, r6
   108c2:	9809      	ldr	r0, [sp, #36]	; 0x24
   108c4:	f01c fe0e 	bl	2d4e4 <__mcmp>
   108c8:	2800      	cmp	r0, #0
   108ca:	f6bf addd 	bge.w	10488 <_dtoa_r+0x510>
   108ce:	2300      	movs	r3, #0
   108d0:	9d11      	ldr	r5, [sp, #68]	; 0x44
   108d2:	9909      	ldr	r1, [sp, #36]	; 0x24
   108d4:	220a      	movs	r2, #10
   108d6:	4620      	mov	r0, r4
   108d8:	429d      	cmp	r5, r3
   108da:	bfcc      	ite	gt
   108dc:	2500      	movgt	r5, #0
   108de:	f008 0501 	andle.w	r5, r8, #1
   108e2:	f01c fc0d 	bl	2d100 <__multadd>
   108e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   108e8:	f109 39ff 	add.w	r9, r9, #4294967295
   108ec:	9009      	str	r0, [sp, #36]	; 0x24
   108ee:	2b00      	cmp	r3, #0
   108f0:	f040 8282 	bne.w	10df8 <_dtoa_r+0xe80>
   108f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   108f6:	9307      	str	r3, [sp, #28]
   108f8:	2d00      	cmp	r5, #0
   108fa:	f47f adcd 	bne.w	10498 <_dtoa_r+0x520>
   108fe:	f8dd a014 	ldr.w	sl, [sp, #20]
   10902:	f8dd b01c 	ldr.w	fp, [sp, #28]
   10906:	4655      	mov	r5, sl
   10908:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1090a:	e002      	b.n	10912 <_dtoa_r+0x99a>
   1090c:	f01c fbf8 	bl	2d100 <__multadd>
   10910:	4607      	mov	r7, r0
   10912:	4631      	mov	r1, r6
   10914:	4638      	mov	r0, r7
   10916:	f01b fd9b 	bl	2c450 <quorem>
   1091a:	f100 0830 	add.w	r8, r0, #48	; 0x30
   1091e:	2300      	movs	r3, #0
   10920:	220a      	movs	r2, #10
   10922:	f805 8b01 	strb.w	r8, [r5], #1
   10926:	eba5 0c0a 	sub.w	ip, r5, sl
   1092a:	4639      	mov	r1, r7
   1092c:	4620      	mov	r0, r4
   1092e:	45dc      	cmp	ip, fp
   10930:	dbec      	blt.n	1090c <_dtoa_r+0x994>
   10932:	f04f 0a00 	mov.w	sl, #0
   10936:	9709      	str	r7, [sp, #36]	; 0x24
   10938:	2201      	movs	r2, #1
   1093a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1093c:	4620      	mov	r0, r4
   1093e:	f01c fd75 	bl	2d42c <__lshift>
   10942:	4631      	mov	r1, r6
   10944:	9009      	str	r0, [sp, #36]	; 0x24
   10946:	f01c fdcd 	bl	2d4e4 <__mcmp>
   1094a:	2800      	cmp	r0, #0
   1094c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   10950:	f340 81b0 	ble.w	10cb4 <_dtoa_r+0xd3c>
   10954:	9905      	ldr	r1, [sp, #20]
   10956:	e005      	b.n	10964 <_dtoa_r+0x9ec>
   10958:	428b      	cmp	r3, r1
   1095a:	f000 81a0 	beq.w	10c9e <_dtoa_r+0xd26>
   1095e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   10962:	461d      	mov	r5, r3
   10964:	2a39      	cmp	r2, #57	; 0x39
   10966:	f105 33ff 	add.w	r3, r5, #4294967295
   1096a:	d0f5      	beq.n	10958 <_dtoa_r+0x9e0>
   1096c:	3201      	adds	r2, #1
   1096e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   10972:	701a      	strb	r2, [r3, #0]
   10974:	4631      	mov	r1, r6
   10976:	4620      	mov	r0, r4
   10978:	f01c fbb8 	bl	2d0ec <_Bfree>
   1097c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1097e:	2b00      	cmp	r3, #0
   10980:	f43f ad0f 	beq.w	103a2 <_dtoa_r+0x42a>
   10984:	f1ba 0f00 	cmp.w	sl, #0
   10988:	f000 824a 	beq.w	10e20 <_dtoa_r+0xea8>
   1098c:	459a      	cmp	sl, r3
   1098e:	f000 8247 	beq.w	10e20 <_dtoa_r+0xea8>
   10992:	4651      	mov	r1, sl
   10994:	4620      	mov	r0, r4
   10996:	9f05      	ldr	r7, [sp, #20]
   10998:	f01c fba8 	bl	2d0ec <_Bfree>
   1099c:	9505      	str	r5, [sp, #20]
   1099e:	e589      	b.n	104b4 <_dtoa_r+0x53c>
   109a0:	2300      	movs	r3, #0
   109a2:	930f      	str	r3, [sp, #60]	; 0x3c
   109a4:	e6b5      	b.n	10712 <_dtoa_r+0x79a>
   109a6:	4650      	mov	r0, sl
   109a8:	4659      	mov	r1, fp
   109aa:	f7fb fd89 	bl	c4c0 <__aeabi_dmul>
   109ae:	9b05      	ldr	r3, [sp, #20]
   109b0:	f883 8000 	strb.w	r8, [r3]
   109b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   109b6:	2b01      	cmp	r3, #1
   109b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   109bc:	d026      	beq.n	10a0c <_dtoa_r+0xa94>
   109be:	9b15      	ldr	r3, [sp, #84]	; 0x54
   109c0:	f04f 0a00 	mov.w	sl, #0
   109c4:	9a05      	ldr	r2, [sp, #20]
   109c6:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
   109ca:	4413      	add	r3, r2
   109cc:	f8df b350 	ldr.w	fp, [pc, #848]	; 10d20 <_dtoa_r+0xda8>
   109d0:	4699      	mov	r9, r3
   109d2:	4652      	mov	r2, sl
   109d4:	465b      	mov	r3, fp
   109d6:	4630      	mov	r0, r6
   109d8:	4639      	mov	r1, r7
   109da:	f7fb fd71 	bl	c4c0 <__aeabi_dmul>
   109de:	460f      	mov	r7, r1
   109e0:	4606      	mov	r6, r0
   109e2:	f7fc f807 	bl	c9f4 <__aeabi_d2iz>
   109e6:	4680      	mov	r8, r0
   109e8:	f7fb fd00 	bl	c3ec <__aeabi_i2d>
   109ec:	4602      	mov	r2, r0
   109ee:	460b      	mov	r3, r1
   109f0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   109f4:	4630      	mov	r0, r6
   109f6:	4639      	mov	r1, r7
   109f8:	f7fb fbaa 	bl	c150 <__aeabi_dsub>
   109fc:	f805 8b01 	strb.w	r8, [r5], #1
   10a00:	454d      	cmp	r5, r9
   10a02:	4606      	mov	r6, r0
   10a04:	460f      	mov	r7, r1
   10a06:	d1e4      	bne.n	109d2 <_dtoa_r+0xa5a>
   10a08:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   10a0c:	2200      	movs	r2, #0
   10a0e:	4bc3      	ldr	r3, [pc, #780]	; (10d1c <_dtoa_r+0xda4>)
   10a10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   10a14:	f7fb fb9e 	bl	c154 <__adddf3>
   10a18:	4632      	mov	r2, r6
   10a1a:	463b      	mov	r3, r7
   10a1c:	f7fb ffc2 	bl	c9a4 <__aeabi_dcmplt>
   10a20:	2800      	cmp	r0, #0
   10a22:	f040 809f 	bne.w	10b64 <_dtoa_r+0xbec>
   10a26:	2000      	movs	r0, #0
   10a28:	49bc      	ldr	r1, [pc, #752]	; (10d1c <_dtoa_r+0xda4>)
   10a2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   10a2e:	f7fb fb8f 	bl	c150 <__aeabi_dsub>
   10a32:	4632      	mov	r2, r6
   10a34:	463b      	mov	r3, r7
   10a36:	f7fb ffd3 	bl	c9e0 <__aeabi_dcmpgt>
   10a3a:	b908      	cbnz	r0, 10a40 <_dtoa_r+0xac8>
   10a3c:	e4b6      	b.n	103ac <_dtoa_r+0x434>
   10a3e:	4615      	mov	r5, r2
   10a40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   10a44:	1e6a      	subs	r2, r5, #1
   10a46:	2b30      	cmp	r3, #48	; 0x30
   10a48:	d0f9      	beq.n	10a3e <_dtoa_r+0xac6>
   10a4a:	e4aa      	b.n	103a2 <_dtoa_r+0x42a>
   10a4c:	2301      	movs	r3, #1
   10a4e:	9304      	str	r3, [sp, #16]
   10a50:	9307      	str	r3, [sp, #28]
   10a52:	f7ff bbbc 	b.w	101ce <_dtoa_r+0x256>
   10a56:	2301      	movs	r3, #1
   10a58:	930c      	str	r3, [sp, #48]	; 0x30
   10a5a:	e5f7      	b.n	1064c <_dtoa_r+0x6d4>
   10a5c:	e9dd 6700 	ldrd	r6, r7, [sp]
   10a60:	4650      	mov	r0, sl
   10a62:	4659      	mov	r1, fp
   10a64:	4632      	mov	r2, r6
   10a66:	463b      	mov	r3, r7
   10a68:	f7fb fe54 	bl	c714 <__aeabi_ddiv>
   10a6c:	9b05      	ldr	r3, [sp, #20]
   10a6e:	1c5d      	adds	r5, r3, #1
   10a70:	f7fb ffc0 	bl	c9f4 <__aeabi_d2iz>
   10a74:	4680      	mov	r8, r0
   10a76:	f7fb fcb9 	bl	c3ec <__aeabi_i2d>
   10a7a:	4632      	mov	r2, r6
   10a7c:	463b      	mov	r3, r7
   10a7e:	f7fb fd1f 	bl	c4c0 <__aeabi_dmul>
   10a82:	4602      	mov	r2, r0
   10a84:	460b      	mov	r3, r1
   10a86:	4650      	mov	r0, sl
   10a88:	4659      	mov	r1, fp
   10a8a:	f7fb fb61 	bl	c150 <__aeabi_dsub>
   10a8e:	f108 0330 	add.w	r3, r8, #48	; 0x30
   10a92:	9a05      	ldr	r2, [sp, #20]
   10a94:	4606      	mov	r6, r0
   10a96:	460f      	mov	r7, r1
   10a98:	7013      	strb	r3, [r2, #0]
   10a9a:	9b07      	ldr	r3, [sp, #28]
   10a9c:	2b01      	cmp	r3, #1
   10a9e:	d045      	beq.n	10b2c <_dtoa_r+0xbb4>
   10aa0:	2200      	movs	r2, #0
   10aa2:	4b9f      	ldr	r3, [pc, #636]	; (10d20 <_dtoa_r+0xda8>)
   10aa4:	f7fb fd0c 	bl	c4c0 <__aeabi_dmul>
   10aa8:	2200      	movs	r2, #0
   10aaa:	2300      	movs	r3, #0
   10aac:	4606      	mov	r6, r0
   10aae:	460f      	mov	r7, r1
   10ab0:	f7fb ff6e 	bl	c990 <__aeabi_dcmpeq>
   10ab4:	2800      	cmp	r0, #0
   10ab6:	f040 80e2 	bne.w	10c7e <_dtoa_r+0xd06>
   10aba:	f8cd 9010 	str.w	r9, [sp, #16]
   10abe:	f04f 0a00 	mov.w	sl, #0
   10ac2:	9406      	str	r4, [sp, #24]
   10ac4:	f8df b258 	ldr.w	fp, [pc, #600]	; 10d20 <_dtoa_r+0xda8>
   10ac8:	f8dd 901c 	ldr.w	r9, [sp, #28]
   10acc:	9c05      	ldr	r4, [sp, #20]
   10ace:	e00a      	b.n	10ae6 <_dtoa_r+0xb6e>
   10ad0:	f7fb fcf6 	bl	c4c0 <__aeabi_dmul>
   10ad4:	2200      	movs	r2, #0
   10ad6:	2300      	movs	r3, #0
   10ad8:	4606      	mov	r6, r0
   10ada:	460f      	mov	r7, r1
   10adc:	f7fb ff58 	bl	c990 <__aeabi_dcmpeq>
   10ae0:	2800      	cmp	r0, #0
   10ae2:	f040 80c9 	bne.w	10c78 <_dtoa_r+0xd00>
   10ae6:	4630      	mov	r0, r6
   10ae8:	4639      	mov	r1, r7
   10aea:	e9dd 2300 	ldrd	r2, r3, [sp]
   10aee:	f7fb fe11 	bl	c714 <__aeabi_ddiv>
   10af2:	f7fb ff7f 	bl	c9f4 <__aeabi_d2iz>
   10af6:	4680      	mov	r8, r0
   10af8:	f7fb fc78 	bl	c3ec <__aeabi_i2d>
   10afc:	e9dd 2300 	ldrd	r2, r3, [sp]
   10b00:	f7fb fcde 	bl	c4c0 <__aeabi_dmul>
   10b04:	4602      	mov	r2, r0
   10b06:	460b      	mov	r3, r1
   10b08:	4630      	mov	r0, r6
   10b0a:	4639      	mov	r1, r7
   10b0c:	f7fb fb20 	bl	c150 <__aeabi_dsub>
   10b10:	f108 0330 	add.w	r3, r8, #48	; 0x30
   10b14:	4606      	mov	r6, r0
   10b16:	460f      	mov	r7, r1
   10b18:	f805 3b01 	strb.w	r3, [r5], #1
   10b1c:	1b2b      	subs	r3, r5, r4
   10b1e:	4652      	mov	r2, sl
   10b20:	454b      	cmp	r3, r9
   10b22:	465b      	mov	r3, fp
   10b24:	d1d4      	bne.n	10ad0 <_dtoa_r+0xb58>
   10b26:	f8dd 9010 	ldr.w	r9, [sp, #16]
   10b2a:	9c06      	ldr	r4, [sp, #24]
   10b2c:	4632      	mov	r2, r6
   10b2e:	463b      	mov	r3, r7
   10b30:	4630      	mov	r0, r6
   10b32:	4639      	mov	r1, r7
   10b34:	f7fb fb0e 	bl	c154 <__adddf3>
   10b38:	4606      	mov	r6, r0
   10b3a:	460f      	mov	r7, r1
   10b3c:	e9dd 2300 	ldrd	r2, r3, [sp]
   10b40:	f7fb ff4e 	bl	c9e0 <__aeabi_dcmpgt>
   10b44:	b960      	cbnz	r0, 10b60 <_dtoa_r+0xbe8>
   10b46:	4630      	mov	r0, r6
   10b48:	4639      	mov	r1, r7
   10b4a:	e9dd 2300 	ldrd	r2, r3, [sp]
   10b4e:	f7fb ff1f 	bl	c990 <__aeabi_dcmpeq>
   10b52:	2800      	cmp	r0, #0
   10b54:	f000 8093 	beq.w	10c7e <_dtoa_r+0xd06>
   10b58:	f018 0f01 	tst.w	r8, #1
   10b5c:	f000 808f 	beq.w	10c7e <_dtoa_r+0xd06>
   10b60:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   10b64:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   10b68:	9a05      	ldr	r2, [sp, #20]
   10b6a:	e005      	b.n	10b78 <_dtoa_r+0xc00>
   10b6c:	4293      	cmp	r3, r2
   10b6e:	f000 808b 	beq.w	10c88 <_dtoa_r+0xd10>
   10b72:	f813 8c01 	ldrb.w	r8, [r3, #-1]
   10b76:	461d      	mov	r5, r3
   10b78:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   10b7c:	f105 33ff 	add.w	r3, r5, #4294967295
   10b80:	d0f4      	beq.n	10b6c <_dtoa_r+0xbf4>
   10b82:	9205      	str	r2, [sp, #20]
   10b84:	f108 0801 	add.w	r8, r8, #1
   10b88:	9f05      	ldr	r7, [sp, #20]
   10b8a:	9505      	str	r5, [sp, #20]
   10b8c:	f883 8000 	strb.w	r8, [r3]
   10b90:	e494      	b.n	104bc <_dtoa_r+0x544>
   10b92:	4631      	mov	r1, r6
   10b94:	2205      	movs	r2, #5
   10b96:	4620      	mov	r0, r4
   10b98:	f01c fab2 	bl	2d100 <__multadd>
   10b9c:	4601      	mov	r1, r0
   10b9e:	4606      	mov	r6, r0
   10ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
   10ba2:	f01c fc9f 	bl	2d4e4 <__mcmp>
   10ba6:	2800      	cmp	r0, #0
   10ba8:	f73f ae77 	bgt.w	1089a <_dtoa_r+0x922>
   10bac:	e478      	b.n	104a0 <_dtoa_r+0x528>
   10bae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10bb0:	4620      	mov	r0, r4
   10bb2:	9909      	ldr	r1, [sp, #36]	; 0x24
   10bb4:	f01c fbea 	bl	2d38c <__pow5mult>
   10bb8:	9009      	str	r0, [sp, #36]	; 0x24
   10bba:	e427      	b.n	1040c <_dtoa_r+0x494>
   10bbc:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
   10bc0:	f04f 0a02 	mov.w	sl, #2
   10bc4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   10bc8:	f7ff bb48 	b.w	1025c <_dtoa_r+0x2e4>
   10bcc:	9b07      	ldr	r3, [sp, #28]
   10bce:	2b00      	cmp	r3, #0
   10bd0:	f43f ad49 	beq.w	10666 <_dtoa_r+0x6ee>
   10bd4:	9d11      	ldr	r5, [sp, #68]	; 0x44
   10bd6:	2d00      	cmp	r5, #0
   10bd8:	f77f abe8 	ble.w	103ac <_dtoa_r+0x434>
   10bdc:	f109 33ff 	add.w	r3, r9, #4294967295
   10be0:	2200      	movs	r2, #0
   10be2:	930d      	str	r3, [sp, #52]	; 0x34
   10be4:	4b4e      	ldr	r3, [pc, #312]	; (10d20 <_dtoa_r+0xda8>)
   10be6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   10bea:	f7fb fc69 	bl	c4c0 <__aeabi_dmul>
   10bee:	4606      	mov	r6, r0
   10bf0:	460f      	mov	r7, r1
   10bf2:	f10a 0001 	add.w	r0, sl, #1
   10bf6:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
   10bfa:	f7fb fbf7 	bl	c3ec <__aeabi_i2d>
   10bfe:	4632      	mov	r2, r6
   10c00:	463b      	mov	r3, r7
   10c02:	f7fb fc5d 	bl	c4c0 <__aeabi_dmul>
   10c06:	2200      	movs	r2, #0
   10c08:	4b46      	ldr	r3, [pc, #280]	; (10d24 <_dtoa_r+0xdac>)
   10c0a:	f7fb faa3 	bl	c154 <__adddf3>
   10c0e:	9515      	str	r5, [sp, #84]	; 0x54
   10c10:	4682      	mov	sl, r0
   10c12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
   10c16:	f7ff bb42 	b.w	1029e <_dtoa_r+0x326>
   10c1a:	4632      	mov	r2, r6
   10c1c:	990a      	ldr	r1, [sp, #40]	; 0x28
   10c1e:	4620      	mov	r0, r4
   10c20:	f01c fbb4 	bl	2d38c <__pow5mult>
   10c24:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   10c28:	4601      	mov	r1, r0
   10c2a:	900a      	str	r0, [sp, #40]	; 0x28
   10c2c:	4642      	mov	r2, r8
   10c2e:	4620      	mov	r0, r4
   10c30:	f01c fb04 	bl	2d23c <__multiply>
   10c34:	4606      	mov	r6, r0
   10c36:	4641      	mov	r1, r8
   10c38:	4620      	mov	r0, r4
   10c3a:	f01c fa57 	bl	2d0ec <_Bfree>
   10c3e:	9609      	str	r6, [sp, #36]	; 0x24
   10c40:	2d00      	cmp	r5, #0
   10c42:	f43f abe3 	beq.w	1040c <_dtoa_r+0x494>
   10c46:	f7ff bbdb 	b.w	10400 <_dtoa_r+0x488>
   10c4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   10c4c:	2a00      	cmp	r2, #0
   10c4e:	d059      	beq.n	10d04 <_dtoa_r+0xd8c>
   10c50:	9908      	ldr	r1, [sp, #32]
   10c52:	f203 4333 	addw	r3, r3, #1075	; 0x433
   10c56:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   10c58:	460f      	mov	r7, r1
   10c5a:	9a06      	ldr	r2, [sp, #24]
   10c5c:	441a      	add	r2, r3
   10c5e:	9206      	str	r2, [sp, #24]
   10c60:	460a      	mov	r2, r1
   10c62:	441a      	add	r2, r3
   10c64:	9208      	str	r2, [sp, #32]
   10c66:	e491      	b.n	1058c <_dtoa_r+0x614>
   10c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10c6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10c6c:	1af3      	subs	r3, r6, r3
   10c6e:	960e      	str	r6, [sp, #56]	; 0x38
   10c70:	2600      	movs	r6, #0
   10c72:	441a      	add	r2, r3
   10c74:	920f      	str	r2, [sp, #60]	; 0x3c
   10c76:	e47d      	b.n	10574 <_dtoa_r+0x5fc>
   10c78:	f8dd 9010 	ldr.w	r9, [sp, #16]
   10c7c:	9c06      	ldr	r4, [sp, #24]
   10c7e:	9f05      	ldr	r7, [sp, #20]
   10c80:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   10c84:	9505      	str	r5, [sp, #20]
   10c86:	e419      	b.n	104bc <_dtoa_r+0x544>
   10c88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10c8a:	4611      	mov	r1, r2
   10c8c:	9205      	str	r2, [sp, #20]
   10c8e:	2230      	movs	r2, #48	; 0x30
   10c90:	3301      	adds	r3, #1
   10c92:	700a      	strb	r2, [r1, #0]
   10c94:	930d      	str	r3, [sp, #52]	; 0x34
   10c96:	460b      	mov	r3, r1
   10c98:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   10c9c:	e772      	b.n	10b84 <_dtoa_r+0xc0c>
   10c9e:	f109 0201 	add.w	r2, r9, #1
   10ca2:	2331      	movs	r3, #49	; 0x31
   10ca4:	920d      	str	r2, [sp, #52]	; 0x34
   10ca6:	9a05      	ldr	r2, [sp, #20]
   10ca8:	7013      	strb	r3, [r2, #0]
   10caa:	e663      	b.n	10974 <_dtoa_r+0x9fc>
   10cac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   10cb0:	1a9f      	subs	r7, r3, r2
   10cb2:	e46b      	b.n	1058c <_dtoa_r+0x614>
   10cb4:	d107      	bne.n	10cc6 <_dtoa_r+0xd4e>
   10cb6:	f018 0f01 	tst.w	r8, #1
   10cba:	f47f ae4b 	bne.w	10954 <_dtoa_r+0x9dc>
   10cbe:	e002      	b.n	10cc6 <_dtoa_r+0xd4e>
   10cc0:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   10cc4:	461d      	mov	r5, r3
   10cc6:	2a30      	cmp	r2, #48	; 0x30
   10cc8:	f105 33ff 	add.w	r3, r5, #4294967295
   10ccc:	d0f8      	beq.n	10cc0 <_dtoa_r+0xd48>
   10cce:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   10cd2:	e64f      	b.n	10974 <_dtoa_r+0x9fc>
   10cd4:	2b00      	cmp	r3, #0
   10cd6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   10cda:	4631      	mov	r1, r6
   10cdc:	9609      	str	r6, [sp, #36]	; 0x24
   10cde:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   10ce2:	4646      	mov	r6, r8
   10ce4:	f8cd a018 	str.w	sl, [sp, #24]
   10ce8:	f107 0501 	add.w	r5, r7, #1
   10cec:	f8dd 8010 	ldr.w	r8, [sp, #16]
   10cf0:	dc52      	bgt.n	10d98 <_dtoa_r+0xe20>
   10cf2:	9b06      	ldr	r3, [sp, #24]
   10cf4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   10cf8:	f887 8000 	strb.w	r8, [r7]
   10cfc:	930a      	str	r3, [sp, #40]	; 0x28
   10cfe:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   10d02:	e637      	b.n	10974 <_dtoa_r+0x9fc>
   10d04:	9b16      	ldr	r3, [sp, #88]	; 0x58
   10d06:	9908      	ldr	r1, [sp, #32]
   10d08:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   10d0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   10d0e:	460f      	mov	r7, r1
   10d10:	e7a3      	b.n	10c5a <_dtoa_r+0xce2>
   10d12:	9a05      	ldr	r2, [sp, #20]
   10d14:	e730      	b.n	10b78 <_dtoa_r+0xc00>
   10d16:	2300      	movs	r3, #0
   10d18:	e4f6      	b.n	10708 <_dtoa_r+0x790>
   10d1a:	bf00      	nop
   10d1c:	3fe00000 	.word	0x3fe00000
   10d20:	40240000 	.word	0x40240000
   10d24:	401c0000 	.word	0x401c0000
   10d28:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   10d2a:	4620      	mov	r0, r4
   10d2c:	6879      	ldr	r1, [r7, #4]
   10d2e:	f01c f9b7 	bl	2d0a0 <_Balloc>
   10d32:	693b      	ldr	r3, [r7, #16]
   10d34:	4605      	mov	r5, r0
   10d36:	f107 010c 	add.w	r1, r7, #12
   10d3a:	3302      	adds	r3, #2
   10d3c:	300c      	adds	r0, #12
   10d3e:	009a      	lsls	r2, r3, #2
   10d40:	f7fc ff4a 	bl	dbd8 <memcpy>
   10d44:	4629      	mov	r1, r5
   10d46:	2201      	movs	r2, #1
   10d48:	4620      	mov	r0, r4
   10d4a:	f01c fb6f 	bl	2d42c <__lshift>
   10d4e:	9006      	str	r0, [sp, #24]
   10d50:	e4fa      	b.n	10748 <_dtoa_r+0x7d0>
   10d52:	9609      	str	r6, [sp, #36]	; 0x24
   10d54:	4646      	mov	r6, r8
   10d56:	f8dd 8010 	ldr.w	r8, [sp, #16]
   10d5a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   10d5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   10d62:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   10d66:	f8cd a018 	str.w	sl, [sp, #24]
   10d6a:	d025      	beq.n	10db8 <_dtoa_r+0xe40>
   10d6c:	f108 0801 	add.w	r8, r8, #1
   10d70:	9b06      	ldr	r3, [sp, #24]
   10d72:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   10d76:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   10d7a:	930a      	str	r3, [sp, #40]	; 0x28
   10d7c:	f887 8000 	strb.w	r8, [r7]
   10d80:	e5f8      	b.n	10974 <_dtoa_r+0x9fc>
   10d82:	464a      	mov	r2, r9
   10d84:	4653      	mov	r3, sl
   10d86:	9609      	str	r6, [sp, #36]	; 0x24
   10d88:	4646      	mov	r6, r8
   10d8a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   10d8e:	4692      	mov	sl, r2
   10d90:	f8dd 8010 	ldr.w	r8, [sp, #16]
   10d94:	930a      	str	r3, [sp, #40]	; 0x28
   10d96:	e5cf      	b.n	10938 <_dtoa_r+0x9c0>
   10d98:	2201      	movs	r2, #1
   10d9a:	4620      	mov	r0, r4
   10d9c:	f01c fb46 	bl	2d42c <__lshift>
   10da0:	4631      	mov	r1, r6
   10da2:	9009      	str	r0, [sp, #36]	; 0x24
   10da4:	f01c fb9e 	bl	2d4e4 <__mcmp>
   10da8:	2800      	cmp	r0, #0
   10daa:	dd32      	ble.n	10e12 <_dtoa_r+0xe9a>
   10dac:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   10db0:	d002      	beq.n	10db8 <_dtoa_r+0xe40>
   10db2:	f10b 0831 	add.w	r8, fp, #49	; 0x31
   10db6:	e79c      	b.n	10cf2 <_dtoa_r+0xd7a>
   10db8:	2239      	movs	r2, #57	; 0x39
   10dba:	9b06      	ldr	r3, [sp, #24]
   10dbc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   10dc0:	703a      	strb	r2, [r7, #0]
   10dc2:	930a      	str	r3, [sp, #40]	; 0x28
   10dc4:	9905      	ldr	r1, [sp, #20]
   10dc6:	e5cd      	b.n	10964 <_dtoa_r+0x9ec>
   10dc8:	9609      	str	r6, [sp, #36]	; 0x24
   10dca:	4646      	mov	r6, r8
   10dcc:	f8dd 8010 	ldr.w	r8, [sp, #16]
   10dd0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   10dd4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   10dd8:	f8cd a018 	str.w	sl, [sp, #24]
   10ddc:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   10de0:	46aa      	mov	sl, r5
   10de2:	f107 0501 	add.w	r5, r7, #1
   10de6:	d0e7      	beq.n	10db8 <_dtoa_r+0xe40>
   10de8:	f1ba 0f00 	cmp.w	sl, #0
   10dec:	dce1      	bgt.n	10db2 <_dtoa_r+0xe3a>
   10dee:	e780      	b.n	10cf2 <_dtoa_r+0xd7a>
   10df0:	f04f 0a02 	mov.w	sl, #2
   10df4:	f7ff ba32 	b.w	1025c <_dtoa_r+0x2e4>
   10df8:	2300      	movs	r3, #0
   10dfa:	990a      	ldr	r1, [sp, #40]	; 0x28
   10dfc:	220a      	movs	r2, #10
   10dfe:	4620      	mov	r0, r4
   10e00:	f01c f97e 	bl	2d100 <__multadd>
   10e04:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10e06:	900a      	str	r0, [sp, #40]	; 0x28
   10e08:	9307      	str	r3, [sp, #28]
   10e0a:	2d00      	cmp	r5, #0
   10e0c:	f47f ab44 	bne.w	10498 <_dtoa_r+0x520>
   10e10:	e48c      	b.n	1072c <_dtoa_r+0x7b4>
   10e12:	f47f af6e 	bne.w	10cf2 <_dtoa_r+0xd7a>
   10e16:	f018 0f01 	tst.w	r8, #1
   10e1a:	f43f af6a 	beq.w	10cf2 <_dtoa_r+0xd7a>
   10e1e:	e7c5      	b.n	10dac <_dtoa_r+0xe34>
   10e20:	9f05      	ldr	r7, [sp, #20]
   10e22:	9505      	str	r5, [sp, #20]
   10e24:	f7ff bb46 	b.w	104b4 <_dtoa_r+0x53c>
   10e28:	f1ba 0f00 	cmp.w	sl, #0
   10e2c:	f43f ac5b 	beq.w	106e6 <_dtoa_r+0x76e>
   10e30:	f7ff baf9 	b.w	10426 <_dtoa_r+0x4ae>
   10e34:	f43f ab0b 	beq.w	1044e <_dtoa_r+0x4d6>
   10e38:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   10e3c:	e43e      	b.n	106bc <_dtoa_r+0x744>
   10e3e:	bf00      	nop

00010e40 <cos>:
   10e40:	ec51 0b10 	vmov	r0, r1, d0
   10e44:	4a2c      	ldr	r2, [pc, #176]	; (10ef8 <cos+0xb8>)
   10e46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   10e4a:	4293      	cmp	r3, r2
   10e4c:	b500      	push	{lr}
   10e4e:	b085      	sub	sp, #20
   10e50:	dd20      	ble.n	10e94 <cos+0x54>
   10e52:	4a2a      	ldr	r2, [pc, #168]	; (10efc <cos+0xbc>)
   10e54:	4293      	cmp	r3, r2
   10e56:	dd09      	ble.n	10e6c <cos+0x2c>
   10e58:	ee10 2a10 	vmov	r2, s0
   10e5c:	460b      	mov	r3, r1
   10e5e:	f7fb f977 	bl	c150 <__aeabi_dsub>
   10e62:	ec41 0b10 	vmov	d0, r0, r1
   10e66:	b005      	add	sp, #20
   10e68:	f85d fb04 	ldr.w	pc, [sp], #4
   10e6c:	4668      	mov	r0, sp
   10e6e:	f000 f92f 	bl	110d0 <__ieee754_rem_pio2>
   10e72:	f000 0003 	and.w	r0, r0, #3
   10e76:	2801      	cmp	r0, #1
   10e78:	d017      	beq.n	10eaa <cos+0x6a>
   10e7a:	2802      	cmp	r0, #2
   10e7c:	d02f      	beq.n	10ede <cos+0x9e>
   10e7e:	b328      	cbz	r0, 10ecc <cos+0x8c>
   10e80:	2001      	movs	r0, #1
   10e82:	ed9d 1b02 	vldr	d1, [sp, #8]
   10e86:	ed9d 0b00 	vldr	d0, [sp]
   10e8a:	f001 f8b1 	bl	11ff0 <__kernel_sin>
   10e8e:	ec51 0b10 	vmov	r0, r1, d0
   10e92:	e7e6      	b.n	10e62 <cos+0x22>
   10e94:	ed9f 1b16 	vldr	d1, [pc, #88]	; 10ef0 <cos+0xb0>
   10e98:	f000 fb46 	bl	11528 <__kernel_cos>
   10e9c:	ec51 0b10 	vmov	r0, r1, d0
   10ea0:	ec41 0b10 	vmov	d0, r0, r1
   10ea4:	b005      	add	sp, #20
   10ea6:	f85d fb04 	ldr.w	pc, [sp], #4
   10eaa:	ed9d 1b02 	vldr	d1, [sp, #8]
   10eae:	ed9d 0b00 	vldr	d0, [sp]
   10eb2:	f001 f89d 	bl	11ff0 <__kernel_sin>
   10eb6:	ee10 0a10 	vmov	r0, s0
   10eba:	ec53 2b10 	vmov	r2, r3, d0
   10ebe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   10ec2:	ec41 0b10 	vmov	d0, r0, r1
   10ec6:	b005      	add	sp, #20
   10ec8:	f85d fb04 	ldr.w	pc, [sp], #4
   10ecc:	ed9d 1b02 	vldr	d1, [sp, #8]
   10ed0:	ed9d 0b00 	vldr	d0, [sp]
   10ed4:	f000 fb28 	bl	11528 <__kernel_cos>
   10ed8:	ec51 0b10 	vmov	r0, r1, d0
   10edc:	e7c1      	b.n	10e62 <cos+0x22>
   10ede:	ed9d 1b02 	vldr	d1, [sp, #8]
   10ee2:	ed9d 0b00 	vldr	d0, [sp]
   10ee6:	f000 fb1f 	bl	11528 <__kernel_cos>
   10eea:	e7e4      	b.n	10eb6 <cos+0x76>
   10eec:	f3af 8000 	nop.w
	...
   10ef8:	3fe921fb 	.word	0x3fe921fb
   10efc:	7fefffff 	.word	0x7fefffff

00010f00 <floor>:
   10f00:	ec51 0b10 	vmov	r0, r1, d0
   10f04:	f3c1 530a 	ubfx	r3, r1, #20, #11
   10f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f0c:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   10f10:	460c      	mov	r4, r1
   10f12:	ee10 6a10 	vmov	r6, s0
   10f16:	460f      	mov	r7, r1
   10f18:	2d13      	cmp	r5, #19
   10f1a:	dc1d      	bgt.n	10f58 <floor+0x58>
   10f1c:	2d00      	cmp	r5, #0
   10f1e:	db3d      	blt.n	10f9c <floor+0x9c>
   10f20:	4b39      	ldr	r3, [pc, #228]	; (11008 <floor+0x108>)
   10f22:	fa43 f805 	asr.w	r8, r3, r5
   10f26:	ea01 0308 	and.w	r3, r1, r8
   10f2a:	4303      	orrs	r3, r0
   10f2c:	d019      	beq.n	10f62 <floor+0x62>
   10f2e:	a334      	add	r3, pc, #208	; (adr r3, 11000 <floor+0x100>)
   10f30:	e9d3 2300 	ldrd	r2, r3, [r3]
   10f34:	f7fb f90e 	bl	c154 <__adddf3>
   10f38:	2200      	movs	r2, #0
   10f3a:	2300      	movs	r3, #0
   10f3c:	f7fb fd50 	bl	c9e0 <__aeabi_dcmpgt>
   10f40:	b3d0      	cbz	r0, 10fb8 <floor+0xb8>
   10f42:	2c00      	cmp	r4, #0
   10f44:	da04      	bge.n	10f50 <floor+0x50>
   10f46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   10f4a:	fa43 f505 	asr.w	r5, r3, r5
   10f4e:	442f      	add	r7, r5
   10f50:	ea27 0408 	bic.w	r4, r7, r8
   10f54:	2600      	movs	r6, #0
   10f56:	e02f      	b.n	10fb8 <floor+0xb8>
   10f58:	2d33      	cmp	r5, #51	; 0x33
   10f5a:	dd06      	ble.n	10f6a <floor+0x6a>
   10f5c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   10f60:	d030      	beq.n	10fc4 <floor+0xc4>
   10f62:	ec41 0b10 	vmov	d0, r0, r1
   10f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10f6a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   10f6e:	f04f 38ff 	mov.w	r8, #4294967295
   10f72:	fa28 f803 	lsr.w	r8, r8, r3
   10f76:	ea18 0f00 	tst.w	r8, r0
   10f7a:	d0f2      	beq.n	10f62 <floor+0x62>
   10f7c:	a320      	add	r3, pc, #128	; (adr r3, 11000 <floor+0x100>)
   10f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10f82:	f7fb f8e7 	bl	c154 <__adddf3>
   10f86:	2200      	movs	r2, #0
   10f88:	2300      	movs	r3, #0
   10f8a:	f7fb fd29 	bl	c9e0 <__aeabi_dcmpgt>
   10f8e:	b198      	cbz	r0, 10fb8 <floor+0xb8>
   10f90:	2c00      	cmp	r4, #0
   10f92:	db28      	blt.n	10fe6 <floor+0xe6>
   10f94:	ea26 0608 	bic.w	r6, r6, r8
   10f98:	463c      	mov	r4, r7
   10f9a:	e00d      	b.n	10fb8 <floor+0xb8>
   10f9c:	a318      	add	r3, pc, #96	; (adr r3, 11000 <floor+0x100>)
   10f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10fa2:	f7fb f8d7 	bl	c154 <__adddf3>
   10fa6:	2200      	movs	r2, #0
   10fa8:	2300      	movs	r3, #0
   10faa:	f7fb fd19 	bl	c9e0 <__aeabi_dcmpgt>
   10fae:	b118      	cbz	r0, 10fb8 <floor+0xb8>
   10fb0:	2c00      	cmp	r4, #0
   10fb2:	db0f      	blt.n	10fd4 <floor+0xd4>
   10fb4:	2600      	movs	r6, #0
   10fb6:	4634      	mov	r4, r6
   10fb8:	4623      	mov	r3, r4
   10fba:	4632      	mov	r2, r6
   10fbc:	ec43 2b10 	vmov	d0, r2, r3
   10fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10fc4:	ee10 2a10 	vmov	r2, s0
   10fc8:	460b      	mov	r3, r1
   10fca:	f7fb f8c3 	bl	c154 <__adddf3>
   10fce:	ec41 0b10 	vmov	d0, r0, r1
   10fd2:	e7c8      	b.n	10f66 <floor+0x66>
   10fd4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   10fd8:	4a0c      	ldr	r2, [pc, #48]	; (1100c <floor+0x10c>)
   10fda:	4333      	orrs	r3, r6
   10fdc:	2600      	movs	r6, #0
   10fde:	42b3      	cmp	r3, r6
   10fe0:	bf18      	it	ne
   10fe2:	4614      	movne	r4, r2
   10fe4:	e7e8      	b.n	10fb8 <floor+0xb8>
   10fe6:	2d14      	cmp	r5, #20
   10fe8:	d008      	beq.n	10ffc <floor+0xfc>
   10fea:	2301      	movs	r3, #1
   10fec:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   10ff0:	fa03 f505 	lsl.w	r5, r3, r5
   10ff4:	19ae      	adds	r6, r5, r6
   10ff6:	bf28      	it	cs
   10ff8:	18ff      	addcs	r7, r7, r3
   10ffa:	e7cb      	b.n	10f94 <floor+0x94>
   10ffc:	3701      	adds	r7, #1
   10ffe:	e7c9      	b.n	10f94 <floor+0x94>
   11000:	8800759c 	.word	0x8800759c
   11004:	7e37e43c 	.word	0x7e37e43c
   11008:	000fffff 	.word	0x000fffff
   1100c:	bff00000 	.word	0xbff00000

00011010 <sin>:
   11010:	ec51 0b10 	vmov	r0, r1, d0
   11014:	4a2c      	ldr	r2, [pc, #176]	; (110c8 <sin+0xb8>)
   11016:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1101a:	4293      	cmp	r3, r2
   1101c:	b500      	push	{lr}
   1101e:	b085      	sub	sp, #20
   11020:	dd27      	ble.n	11072 <sin+0x62>
   11022:	4a2a      	ldr	r2, [pc, #168]	; (110cc <sin+0xbc>)
   11024:	4293      	cmp	r3, r2
   11026:	dd09      	ble.n	1103c <sin+0x2c>
   11028:	ee10 2a10 	vmov	r2, s0
   1102c:	460b      	mov	r3, r1
   1102e:	f7fb f88f 	bl	c150 <__aeabi_dsub>
   11032:	ec41 0b10 	vmov	d0, r0, r1
   11036:	b005      	add	sp, #20
   11038:	f85d fb04 	ldr.w	pc, [sp], #4
   1103c:	4668      	mov	r0, sp
   1103e:	f000 f847 	bl	110d0 <__ieee754_rem_pio2>
   11042:	f000 0003 	and.w	r0, r0, #3
   11046:	2801      	cmp	r0, #1
   11048:	d01f      	beq.n	1108a <sin+0x7a>
   1104a:	2802      	cmp	r0, #2
   1104c:	d030      	beq.n	110b0 <sin+0xa0>
   1104e:	b328      	cbz	r0, 1109c <sin+0x8c>
   11050:	ed9d 1b02 	vldr	d1, [sp, #8]
   11054:	ed9d 0b00 	vldr	d0, [sp]
   11058:	f000 fa66 	bl	11528 <__kernel_cos>
   1105c:	ee10 0a10 	vmov	r0, s0
   11060:	ec53 2b10 	vmov	r2, r3, d0
   11064:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   11068:	ec41 0b10 	vmov	d0, r0, r1
   1106c:	b005      	add	sp, #20
   1106e:	f85d fb04 	ldr.w	pc, [sp], #4
   11072:	2000      	movs	r0, #0
   11074:	ed9f 1b12 	vldr	d1, [pc, #72]	; 110c0 <sin+0xb0>
   11078:	f000 ffba 	bl	11ff0 <__kernel_sin>
   1107c:	ec51 0b10 	vmov	r0, r1, d0
   11080:	ec41 0b10 	vmov	d0, r0, r1
   11084:	b005      	add	sp, #20
   11086:	f85d fb04 	ldr.w	pc, [sp], #4
   1108a:	ed9d 1b02 	vldr	d1, [sp, #8]
   1108e:	ed9d 0b00 	vldr	d0, [sp]
   11092:	f000 fa49 	bl	11528 <__kernel_cos>
   11096:	ec51 0b10 	vmov	r0, r1, d0
   1109a:	e7ca      	b.n	11032 <sin+0x22>
   1109c:	2001      	movs	r0, #1
   1109e:	ed9d 1b02 	vldr	d1, [sp, #8]
   110a2:	ed9d 0b00 	vldr	d0, [sp]
   110a6:	f000 ffa3 	bl	11ff0 <__kernel_sin>
   110aa:	ec51 0b10 	vmov	r0, r1, d0
   110ae:	e7c0      	b.n	11032 <sin+0x22>
   110b0:	2001      	movs	r0, #1
   110b2:	ed9d 1b02 	vldr	d1, [sp, #8]
   110b6:	ed9d 0b00 	vldr	d0, [sp]
   110ba:	f000 ff99 	bl	11ff0 <__kernel_sin>
   110be:	e7cd      	b.n	1105c <sin+0x4c>
	...
   110c8:	3fe921fb 	.word	0x3fe921fb
   110cc:	7fefffff 	.word	0x7fefffff

000110d0 <__ieee754_rem_pio2>:
   110d0:	ec53 2b10 	vmov	r2, r3, d0
   110d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   110d8:	49bf      	ldr	r1, [pc, #764]	; (113d8 <__ieee754_rem_pio2+0x308>)
   110da:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   110de:	b090      	sub	sp, #64	; 0x40
   110e0:	428f      	cmp	r7, r1
   110e2:	f340 8093 	ble.w	1120c <__ieee754_rem_pio2+0x13c>
   110e6:	49bd      	ldr	r1, [pc, #756]	; (113dc <__ieee754_rem_pio2+0x30c>)
   110e8:	461c      	mov	r4, r3
   110ea:	4682      	mov	sl, r0
   110ec:	428f      	cmp	r7, r1
   110ee:	dc29      	bgt.n	11144 <__ieee754_rem_pio2+0x74>
   110f0:	2c00      	cmp	r4, #0
   110f2:	4619      	mov	r1, r3
   110f4:	ee10 0a10 	vmov	r0, s0
   110f8:	a3ad      	add	r3, pc, #692	; (adr r3, 113b0 <__ieee754_rem_pio2+0x2e0>)
   110fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   110fe:	f340 8090 	ble.w	11222 <__ieee754_rem_pio2+0x152>
   11102:	f7fb f825 	bl	c150 <__aeabi_dsub>
   11106:	4bb6      	ldr	r3, [pc, #728]	; (113e0 <__ieee754_rem_pio2+0x310>)
   11108:	4680      	mov	r8, r0
   1110a:	4689      	mov	r9, r1
   1110c:	429f      	cmp	r7, r3
   1110e:	f000 8173 	beq.w	113f8 <__ieee754_rem_pio2+0x328>
   11112:	2501      	movs	r5, #1
   11114:	a3a8      	add	r3, pc, #672	; (adr r3, 113b8 <__ieee754_rem_pio2+0x2e8>)
   11116:	e9d3 2300 	ldrd	r2, r3, [r3]
   1111a:	f7fb f819 	bl	c150 <__aeabi_dsub>
   1111e:	4602      	mov	r2, r0
   11120:	460b      	mov	r3, r1
   11122:	4640      	mov	r0, r8
   11124:	4649      	mov	r1, r9
   11126:	e9ca 2300 	strd	r2, r3, [sl]
   1112a:	f7fb f811 	bl	c150 <__aeabi_dsub>
   1112e:	a3a2      	add	r3, pc, #648	; (adr r3, 113b8 <__ieee754_rem_pio2+0x2e8>)
   11130:	e9d3 2300 	ldrd	r2, r3, [r3]
   11134:	f7fb f80c 	bl	c150 <__aeabi_dsub>
   11138:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1113c:	4628      	mov	r0, r5
   1113e:	b010      	add	sp, #64	; 0x40
   11140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11144:	49a7      	ldr	r1, [pc, #668]	; (113e4 <__ieee754_rem_pio2+0x314>)
   11146:	428f      	cmp	r7, r1
   11148:	f340 808a 	ble.w	11260 <__ieee754_rem_pio2+0x190>
   1114c:	49a6      	ldr	r1, [pc, #664]	; (113e8 <__ieee754_rem_pio2+0x318>)
   1114e:	428f      	cmp	r7, r1
   11150:	f300 8120 	bgt.w	11394 <__ieee754_rem_pio2+0x2c4>
   11154:	153d      	asrs	r5, r7, #20
   11156:	ee10 0a10 	vmov	r0, s0
   1115a:	4616      	mov	r6, r2
   1115c:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
   11160:	eba7 5105 	sub.w	r1, r7, r5, lsl #20
   11164:	460f      	mov	r7, r1
   11166:	f7fb fc45 	bl	c9f4 <__aeabi_d2iz>
   1116a:	f7fb f93f 	bl	c3ec <__aeabi_i2d>
   1116e:	4680      	mov	r8, r0
   11170:	4689      	mov	r9, r1
   11172:	4602      	mov	r2, r0
   11174:	460b      	mov	r3, r1
   11176:	4630      	mov	r0, r6
   11178:	4639      	mov	r1, r7
   1117a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   1117e:	f7fa ffe7 	bl	c150 <__aeabi_dsub>
   11182:	2200      	movs	r2, #0
   11184:	4b99      	ldr	r3, [pc, #612]	; (113ec <__ieee754_rem_pio2+0x31c>)
   11186:	f7fb f99b 	bl	c4c0 <__aeabi_dmul>
   1118a:	4689      	mov	r9, r1
   1118c:	4680      	mov	r8, r0
   1118e:	f7fb fc31 	bl	c9f4 <__aeabi_d2iz>
   11192:	f7fb f92b 	bl	c3ec <__aeabi_i2d>
   11196:	4606      	mov	r6, r0
   11198:	460f      	mov	r7, r1
   1119a:	4602      	mov	r2, r0
   1119c:	460b      	mov	r3, r1
   1119e:	4640      	mov	r0, r8
   111a0:	4649      	mov	r1, r9
   111a2:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
   111a6:	f7fa ffd3 	bl	c150 <__aeabi_dsub>
   111aa:	2200      	movs	r2, #0
   111ac:	4b8f      	ldr	r3, [pc, #572]	; (113ec <__ieee754_rem_pio2+0x31c>)
   111ae:	f7fb f987 	bl	c4c0 <__aeabi_dmul>
   111b2:	2200      	movs	r2, #0
   111b4:	2300      	movs	r3, #0
   111b6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   111ba:	f7fb fbe9 	bl	c990 <__aeabi_dcmpeq>
   111be:	2800      	cmp	r0, #0
   111c0:	f000 8165 	beq.w	1148e <__ieee754_rem_pio2+0x3be>
   111c4:	2300      	movs	r3, #0
   111c6:	4630      	mov	r0, r6
   111c8:	4639      	mov	r1, r7
   111ca:	2200      	movs	r2, #0
   111cc:	f7fb fbe0 	bl	c990 <__aeabi_dcmpeq>
   111d0:	2800      	cmp	r0, #0
   111d2:	bf14      	ite	ne
   111d4:	2301      	movne	r3, #1
   111d6:	2302      	moveq	r3, #2
   111d8:	4985      	ldr	r1, [pc, #532]	; (113f0 <__ieee754_rem_pio2+0x320>)
   111da:	2002      	movs	r0, #2
   111dc:	462a      	mov	r2, r5
   111de:	9101      	str	r1, [sp, #4]
   111e0:	4651      	mov	r1, sl
   111e2:	9000      	str	r0, [sp, #0]
   111e4:	a80a      	add	r0, sp, #40	; 0x28
   111e6:	f000 fae3 	bl	117b0 <__kernel_rem_pio2>
   111ea:	2c00      	cmp	r4, #0
   111ec:	4605      	mov	r5, r0
   111ee:	da14      	bge.n	1121a <__ieee754_rem_pio2+0x14a>
   111f0:	f8da 2004 	ldr.w	r2, [sl, #4]
   111f4:	4245      	negs	r5, r0
   111f6:	f8da 300c 	ldr.w	r3, [sl, #12]
   111fa:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   111fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   11202:	f8ca 2004 	str.w	r2, [sl, #4]
   11206:	f8ca 300c 	str.w	r3, [sl, #12]
   1120a:	e006      	b.n	1121a <__ieee754_rem_pio2+0x14a>
   1120c:	2600      	movs	r6, #0
   1120e:	2700      	movs	r7, #0
   11210:	2500      	movs	r5, #0
   11212:	ed80 0b00 	vstr	d0, [r0]
   11216:	e9c0 6702 	strd	r6, r7, [r0, #8]
   1121a:	4628      	mov	r0, r5
   1121c:	b010      	add	sp, #64	; 0x40
   1121e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11222:	f7fa ff97 	bl	c154 <__adddf3>
   11226:	4b6e      	ldr	r3, [pc, #440]	; (113e0 <__ieee754_rem_pio2+0x310>)
   11228:	4680      	mov	r8, r0
   1122a:	4689      	mov	r9, r1
   1122c:	429f      	cmp	r7, r3
   1122e:	f000 8110 	beq.w	11452 <__ieee754_rem_pio2+0x382>
   11232:	f04f 35ff 	mov.w	r5, #4294967295
   11236:	a360      	add	r3, pc, #384	; (adr r3, 113b8 <__ieee754_rem_pio2+0x2e8>)
   11238:	e9d3 2300 	ldrd	r2, r3, [r3]
   1123c:	f7fa ff8a 	bl	c154 <__adddf3>
   11240:	4602      	mov	r2, r0
   11242:	460b      	mov	r3, r1
   11244:	4640      	mov	r0, r8
   11246:	4649      	mov	r1, r9
   11248:	e9ca 2300 	strd	r2, r3, [sl]
   1124c:	f7fa ff80 	bl	c150 <__aeabi_dsub>
   11250:	a359      	add	r3, pc, #356	; (adr r3, 113b8 <__ieee754_rem_pio2+0x2e8>)
   11252:	e9d3 2300 	ldrd	r2, r3, [r3]
   11256:	f7fa ff7d 	bl	c154 <__adddf3>
   1125a:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1125e:	e7dc      	b.n	1121a <__ieee754_rem_pio2+0x14a>
   11260:	f01c fed6 	bl	2e010 <fabs>
   11264:	ee10 0a10 	vmov	r0, s0
   11268:	ec59 8b10 	vmov	r8, r9, d0
   1126c:	a354      	add	r3, pc, #336	; (adr r3, 113c0 <__ieee754_rem_pio2+0x2f0>)
   1126e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11272:	4649      	mov	r1, r9
   11274:	f7fb f924 	bl	c4c0 <__aeabi_dmul>
   11278:	2200      	movs	r2, #0
   1127a:	4b5e      	ldr	r3, [pc, #376]	; (113f4 <__ieee754_rem_pio2+0x324>)
   1127c:	f7fa ff6a 	bl	c154 <__adddf3>
   11280:	f7fb fbb8 	bl	c9f4 <__aeabi_d2iz>
   11284:	4605      	mov	r5, r0
   11286:	f7fb f8b1 	bl	c3ec <__aeabi_i2d>
   1128a:	a349      	add	r3, pc, #292	; (adr r3, 113b0 <__ieee754_rem_pio2+0x2e0>)
   1128c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11290:	e9cd 0106 	strd	r0, r1, [sp, #24]
   11294:	f7fb f914 	bl	c4c0 <__aeabi_dmul>
   11298:	4602      	mov	r2, r0
   1129a:	460b      	mov	r3, r1
   1129c:	4640      	mov	r0, r8
   1129e:	4649      	mov	r1, r9
   112a0:	f7fa ff56 	bl	c150 <__aeabi_dsub>
   112a4:	4680      	mov	r8, r0
   112a6:	4689      	mov	r9, r1
   112a8:	a343      	add	r3, pc, #268	; (adr r3, 113b8 <__ieee754_rem_pio2+0x2e8>)
   112aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   112ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   112b2:	e9cd 8902 	strd	r8, r9, [sp, #8]
   112b6:	f7fb f903 	bl	c4c0 <__aeabi_dmul>
   112ba:	2d1f      	cmp	r5, #31
   112bc:	4602      	mov	r2, r0
   112be:	460b      	mov	r3, r1
   112c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   112c4:	f340 80b5 	ble.w	11432 <__ieee754_rem_pio2+0x362>
   112c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   112cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   112d0:	f7fa ff3e 	bl	c150 <__aeabi_dsub>
   112d4:	4680      	mov	r8, r0
   112d6:	4689      	mov	r9, r1
   112d8:	153f      	asrs	r7, r7, #20
   112da:	f3c9 530a 	ubfx	r3, r9, #20, #11
   112de:	1afb      	subs	r3, r7, r3
   112e0:	2b10      	cmp	r3, #16
   112e2:	f340 80b3 	ble.w	1144c <__ieee754_rem_pio2+0x37c>
   112e6:	a338      	add	r3, pc, #224	; (adr r3, 113c8 <__ieee754_rem_pio2+0x2f8>)
   112e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   112ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   112f0:	f7fb f8e6 	bl	c4c0 <__aeabi_dmul>
   112f4:	4680      	mov	r8, r0
   112f6:	4689      	mov	r9, r1
   112f8:	4602      	mov	r2, r0
   112fa:	460b      	mov	r3, r1
   112fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   11300:	f7fa ff26 	bl	c150 <__aeabi_dsub>
   11304:	4602      	mov	r2, r0
   11306:	460b      	mov	r3, r1
   11308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1130c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   11310:	f7fa ff1e 	bl	c150 <__aeabi_dsub>
   11314:	4642      	mov	r2, r8
   11316:	464b      	mov	r3, r9
   11318:	f7fa ff1a 	bl	c150 <__aeabi_dsub>
   1131c:	4680      	mov	r8, r0
   1131e:	4689      	mov	r9, r1
   11320:	a32b      	add	r3, pc, #172	; (adr r3, 113d0 <__ieee754_rem_pio2+0x300>)
   11322:	e9d3 2300 	ldrd	r2, r3, [r3]
   11326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1132a:	f7fb f8c9 	bl	c4c0 <__aeabi_dmul>
   1132e:	4642      	mov	r2, r8
   11330:	464b      	mov	r3, r9
   11332:	f7fa ff0d 	bl	c150 <__aeabi_dsub>
   11336:	460b      	mov	r3, r1
   11338:	4602      	mov	r2, r0
   1133a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1133e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   11342:	f7fa ff05 	bl	c150 <__aeabi_dsub>
   11346:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1134a:	4680      	mov	r8, r0
   1134c:	4689      	mov	r9, r1
   1134e:	1aff      	subs	r7, r7, r3
   11350:	2f31      	cmp	r7, #49	; 0x31
   11352:	f300 809e 	bgt.w	11492 <__ieee754_rem_pio2+0x3c2>
   11356:	ed9d 7b08 	vldr	d7, [sp, #32]
   1135a:	e9ca 8900 	strd	r8, r9, [sl]
   1135e:	ed8d 7b02 	vstr	d7, [sp, #8]
   11362:	4642      	mov	r2, r8
   11364:	464b      	mov	r3, r9
   11366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1136a:	f7fa fef1 	bl	c150 <__aeabi_dsub>
   1136e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11372:	f7fa feed 	bl	c150 <__aeabi_dsub>
   11376:	2c00      	cmp	r4, #0
   11378:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1137c:	f6bf af4d 	bge.w	1121a <__ieee754_rem_pio2+0x14a>
   11380:	f109 4400 	add.w	r4, r9, #2147483648	; 0x80000000
   11384:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   11388:	426d      	negs	r5, r5
   1138a:	e9ca 8400 	strd	r8, r4, [sl]
   1138e:	e9ca 0302 	strd	r0, r3, [sl, #8]
   11392:	e742      	b.n	1121a <__ieee754_rem_pio2+0x14a>
   11394:	ee10 0a10 	vmov	r0, s0
   11398:	4619      	mov	r1, r3
   1139a:	f7fa fed9 	bl	c150 <__aeabi_dsub>
   1139e:	2500      	movs	r5, #0
   113a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
   113a4:	e9ca 0100 	strd	r0, r1, [sl]
   113a8:	e737      	b.n	1121a <__ieee754_rem_pio2+0x14a>
   113aa:	bf00      	nop
   113ac:	f3af 8000 	nop.w
   113b0:	54400000 	.word	0x54400000
   113b4:	3ff921fb 	.word	0x3ff921fb
   113b8:	1a626331 	.word	0x1a626331
   113bc:	3dd0b461 	.word	0x3dd0b461
   113c0:	6dc9c883 	.word	0x6dc9c883
   113c4:	3fe45f30 	.word	0x3fe45f30
   113c8:	1a600000 	.word	0x1a600000
   113cc:	3dd0b461 	.word	0x3dd0b461
   113d0:	2e037073 	.word	0x2e037073
   113d4:	3ba3198a 	.word	0x3ba3198a
   113d8:	3fe921fb 	.word	0x3fe921fb
   113dc:	4002d97b 	.word	0x4002d97b
   113e0:	3ff921fb 	.word	0x3ff921fb
   113e4:	413921fb 	.word	0x413921fb
   113e8:	7fefffff 	.word	0x7fefffff
   113ec:	41700000 	.word	0x41700000
   113f0:	00033fb0 	.word	0x00033fb0
   113f4:	3fe00000 	.word	0x3fe00000
   113f8:	a341      	add	r3, pc, #260	; (adr r3, 11500 <__ieee754_rem_pio2+0x430>)
   113fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   113fe:	f7fa fea7 	bl	c150 <__aeabi_dsub>
   11402:	460d      	mov	r5, r1
   11404:	4604      	mov	r4, r0
   11406:	a340      	add	r3, pc, #256	; (adr r3, 11508 <__ieee754_rem_pio2+0x438>)
   11408:	e9d3 2300 	ldrd	r2, r3, [r3]
   1140c:	f7fa fea0 	bl	c150 <__aeabi_dsub>
   11410:	4602      	mov	r2, r0
   11412:	460b      	mov	r3, r1
   11414:	4620      	mov	r0, r4
   11416:	4629      	mov	r1, r5
   11418:	2501      	movs	r5, #1
   1141a:	e9ca 2300 	strd	r2, r3, [sl]
   1141e:	f7fa fe97 	bl	c150 <__aeabi_dsub>
   11422:	a339      	add	r3, pc, #228	; (adr r3, 11508 <__ieee754_rem_pio2+0x438>)
   11424:	e9d3 2300 	ldrd	r2, r3, [r3]
   11428:	f7fa fe92 	bl	c150 <__aeabi_dsub>
   1142c:	e9ca 0102 	strd	r0, r1, [sl, #8]
   11430:	e6f3      	b.n	1121a <__ieee754_rem_pio2+0x14a>
   11432:	4640      	mov	r0, r8
   11434:	4649      	mov	r1, r9
   11436:	f7fa fe8b 	bl	c150 <__aeabi_dsub>
   1143a:	4b39      	ldr	r3, [pc, #228]	; (11520 <__ieee754_rem_pio2+0x450>)
   1143c:	1e6a      	subs	r2, r5, #1
   1143e:	4680      	mov	r8, r0
   11440:	4689      	mov	r9, r1
   11442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11446:	42bb      	cmp	r3, r7
   11448:	f43f af46 	beq.w	112d8 <__ieee754_rem_pio2+0x208>
   1144c:	e9ca 8900 	strd	r8, r9, [sl]
   11450:	e787      	b.n	11362 <__ieee754_rem_pio2+0x292>
   11452:	a32b      	add	r3, pc, #172	; (adr r3, 11500 <__ieee754_rem_pio2+0x430>)
   11454:	e9d3 2300 	ldrd	r2, r3, [r3]
   11458:	f7fa fe7c 	bl	c154 <__adddf3>
   1145c:	460d      	mov	r5, r1
   1145e:	4604      	mov	r4, r0
   11460:	a329      	add	r3, pc, #164	; (adr r3, 11508 <__ieee754_rem_pio2+0x438>)
   11462:	e9d3 2300 	ldrd	r2, r3, [r3]
   11466:	f7fa fe75 	bl	c154 <__adddf3>
   1146a:	4602      	mov	r2, r0
   1146c:	460b      	mov	r3, r1
   1146e:	4620      	mov	r0, r4
   11470:	4629      	mov	r1, r5
   11472:	f04f 35ff 	mov.w	r5, #4294967295
   11476:	e9ca 2300 	strd	r2, r3, [sl]
   1147a:	f7fa fe69 	bl	c150 <__aeabi_dsub>
   1147e:	a322      	add	r3, pc, #136	; (adr r3, 11508 <__ieee754_rem_pio2+0x438>)
   11480:	e9d3 2300 	ldrd	r2, r3, [r3]
   11484:	f7fa fe66 	bl	c154 <__adddf3>
   11488:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1148c:	e6c5      	b.n	1121a <__ieee754_rem_pio2+0x14a>
   1148e:	2303      	movs	r3, #3
   11490:	e6a2      	b.n	111d8 <__ieee754_rem_pio2+0x108>
   11492:	a31f      	add	r3, pc, #124	; (adr r3, 11510 <__ieee754_rem_pio2+0x440>)
   11494:	e9d3 2300 	ldrd	r2, r3, [r3]
   11498:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1149c:	f7fb f810 	bl	c4c0 <__aeabi_dmul>
   114a0:	4606      	mov	r6, r0
   114a2:	460f      	mov	r7, r1
   114a4:	4602      	mov	r2, r0
   114a6:	460b      	mov	r3, r1
   114a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   114ac:	f7fa fe50 	bl	c150 <__aeabi_dsub>
   114b0:	4680      	mov	r8, r0
   114b2:	4689      	mov	r9, r1
   114b4:	4602      	mov	r2, r0
   114b6:	460b      	mov	r3, r1
   114b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   114bc:	e9cd 8902 	strd	r8, r9, [sp, #8]
   114c0:	f7fa fe46 	bl	c150 <__aeabi_dsub>
   114c4:	4632      	mov	r2, r6
   114c6:	463b      	mov	r3, r7
   114c8:	f7fa fe42 	bl	c150 <__aeabi_dsub>
   114cc:	4606      	mov	r6, r0
   114ce:	460f      	mov	r7, r1
   114d0:	a311      	add	r3, pc, #68	; (adr r3, 11518 <__ieee754_rem_pio2+0x448>)
   114d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   114d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   114da:	f7fa fff1 	bl	c4c0 <__aeabi_dmul>
   114de:	4632      	mov	r2, r6
   114e0:	463b      	mov	r3, r7
   114e2:	f7fa fe35 	bl	c150 <__aeabi_dsub>
   114e6:	4602      	mov	r2, r0
   114e8:	460b      	mov	r3, r1
   114ea:	4640      	mov	r0, r8
   114ec:	4649      	mov	r1, r9
   114ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
   114f2:	f7fa fe2d 	bl	c150 <__aeabi_dsub>
   114f6:	4680      	mov	r8, r0
   114f8:	4689      	mov	r9, r1
   114fa:	e7a7      	b.n	1144c <__ieee754_rem_pio2+0x37c>
   114fc:	f3af 8000 	nop.w
   11500:	1a600000 	.word	0x1a600000
   11504:	3dd0b461 	.word	0x3dd0b461
   11508:	2e037073 	.word	0x2e037073
   1150c:	3ba3198a 	.word	0x3ba3198a
   11510:	2e000000 	.word	0x2e000000
   11514:	3ba3198a 	.word	0x3ba3198a
   11518:	252049c1 	.word	0x252049c1
   1151c:	397b839a 	.word	0x397b839a
   11520:	00033f30 	.word	0x00033f30
   11524:	00000000 	.word	0x00000000

00011528 <__kernel_cos>:
   11528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1152c:	ec57 6b10 	vmov	r6, r7, d0
   11530:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   11534:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   11538:	ed2d 8b02 	vpush	{d8}
   1153c:	eeb0 8a41 	vmov.f32	s16, s2
   11540:	eef0 8a61 	vmov.f32	s17, s3
   11544:	b083      	sub	sp, #12
   11546:	da72      	bge.n	1162e <__kernel_cos+0x106>
   11548:	ee10 0a10 	vmov	r0, s0
   1154c:	4639      	mov	r1, r7
   1154e:	f7fb fa51 	bl	c9f4 <__aeabi_d2iz>
   11552:	2800      	cmp	r0, #0
   11554:	f000 80ed 	beq.w	11732 <__kernel_cos+0x20a>
   11558:	4632      	mov	r2, r6
   1155a:	463b      	mov	r3, r7
   1155c:	4630      	mov	r0, r6
   1155e:	4639      	mov	r1, r7
   11560:	f7fa ffae 	bl	c4c0 <__aeabi_dmul>
   11564:	4604      	mov	r4, r0
   11566:	460d      	mov	r5, r1
   11568:	a37b      	add	r3, pc, #492	; (adr r3, 11758 <__kernel_cos+0x230>)
   1156a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1156e:	f7fa ffa7 	bl	c4c0 <__aeabi_dmul>
   11572:	a37b      	add	r3, pc, #492	; (adr r3, 11760 <__kernel_cos+0x238>)
   11574:	e9d3 2300 	ldrd	r2, r3, [r3]
   11578:	f7fa fdec 	bl	c154 <__adddf3>
   1157c:	4622      	mov	r2, r4
   1157e:	462b      	mov	r3, r5
   11580:	f7fa ff9e 	bl	c4c0 <__aeabi_dmul>
   11584:	a378      	add	r3, pc, #480	; (adr r3, 11768 <__kernel_cos+0x240>)
   11586:	e9d3 2300 	ldrd	r2, r3, [r3]
   1158a:	f7fa fde1 	bl	c150 <__aeabi_dsub>
   1158e:	4622      	mov	r2, r4
   11590:	462b      	mov	r3, r5
   11592:	f7fa ff95 	bl	c4c0 <__aeabi_dmul>
   11596:	a376      	add	r3, pc, #472	; (adr r3, 11770 <__kernel_cos+0x248>)
   11598:	e9d3 2300 	ldrd	r2, r3, [r3]
   1159c:	f7fa fdda 	bl	c154 <__adddf3>
   115a0:	4622      	mov	r2, r4
   115a2:	462b      	mov	r3, r5
   115a4:	f7fa ff8c 	bl	c4c0 <__aeabi_dmul>
   115a8:	a373      	add	r3, pc, #460	; (adr r3, 11778 <__kernel_cos+0x250>)
   115aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   115ae:	f7fa fdcf 	bl	c150 <__aeabi_dsub>
   115b2:	4622      	mov	r2, r4
   115b4:	462b      	mov	r3, r5
   115b6:	f7fa ff83 	bl	c4c0 <__aeabi_dmul>
   115ba:	a371      	add	r3, pc, #452	; (adr r3, 11780 <__kernel_cos+0x258>)
   115bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   115c0:	f7fa fdc8 	bl	c154 <__adddf3>
   115c4:	4622      	mov	r2, r4
   115c6:	462b      	mov	r3, r5
   115c8:	f7fa ff7a 	bl	c4c0 <__aeabi_dmul>
   115cc:	4682      	mov	sl, r0
   115ce:	468b      	mov	fp, r1
   115d0:	2200      	movs	r2, #0
   115d2:	4b71      	ldr	r3, [pc, #452]	; (11798 <__kernel_cos+0x270>)
   115d4:	4620      	mov	r0, r4
   115d6:	4629      	mov	r1, r5
   115d8:	f7fa ff72 	bl	c4c0 <__aeabi_dmul>
   115dc:	4652      	mov	r2, sl
   115de:	4680      	mov	r8, r0
   115e0:	4689      	mov	r9, r1
   115e2:	465b      	mov	r3, fp
   115e4:	4620      	mov	r0, r4
   115e6:	4629      	mov	r1, r5
   115e8:	f7fa ff6a 	bl	c4c0 <__aeabi_dmul>
   115ec:	4604      	mov	r4, r0
   115ee:	460d      	mov	r5, r1
   115f0:	4630      	mov	r0, r6
   115f2:	4639      	mov	r1, r7
   115f4:	ec53 2b18 	vmov	r2, r3, d8
   115f8:	f7fa ff62 	bl	c4c0 <__aeabi_dmul>
   115fc:	4602      	mov	r2, r0
   115fe:	460b      	mov	r3, r1
   11600:	4620      	mov	r0, r4
   11602:	4629      	mov	r1, r5
   11604:	f7fa fda4 	bl	c150 <__aeabi_dsub>
   11608:	4602      	mov	r2, r0
   1160a:	460b      	mov	r3, r1
   1160c:	4640      	mov	r0, r8
   1160e:	4649      	mov	r1, r9
   11610:	f7fa fd9e 	bl	c150 <__aeabi_dsub>
   11614:	4602      	mov	r2, r0
   11616:	460b      	mov	r3, r1
   11618:	2000      	movs	r0, #0
   1161a:	4960      	ldr	r1, [pc, #384]	; (1179c <__kernel_cos+0x274>)
   1161c:	f7fa fd98 	bl	c150 <__aeabi_dsub>
   11620:	ec41 0b10 	vmov	d0, r0, r1
   11624:	b003      	add	sp, #12
   11626:	ecbd 8b02 	vpop	{d8}
   1162a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1162e:	ee10 2a10 	vmov	r2, s0
   11632:	ee10 0a10 	vmov	r0, s0
   11636:	463b      	mov	r3, r7
   11638:	4639      	mov	r1, r7
   1163a:	f7fa ff41 	bl	c4c0 <__aeabi_dmul>
   1163e:	4604      	mov	r4, r0
   11640:	460d      	mov	r5, r1
   11642:	a345      	add	r3, pc, #276	; (adr r3, 11758 <__kernel_cos+0x230>)
   11644:	e9d3 2300 	ldrd	r2, r3, [r3]
   11648:	f7fa ff3a 	bl	c4c0 <__aeabi_dmul>
   1164c:	a344      	add	r3, pc, #272	; (adr r3, 11760 <__kernel_cos+0x238>)
   1164e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11652:	f7fa fd7f 	bl	c154 <__adddf3>
   11656:	4622      	mov	r2, r4
   11658:	462b      	mov	r3, r5
   1165a:	f7fa ff31 	bl	c4c0 <__aeabi_dmul>
   1165e:	a342      	add	r3, pc, #264	; (adr r3, 11768 <__kernel_cos+0x240>)
   11660:	e9d3 2300 	ldrd	r2, r3, [r3]
   11664:	f7fa fd74 	bl	c150 <__aeabi_dsub>
   11668:	4622      	mov	r2, r4
   1166a:	462b      	mov	r3, r5
   1166c:	f7fa ff28 	bl	c4c0 <__aeabi_dmul>
   11670:	a33f      	add	r3, pc, #252	; (adr r3, 11770 <__kernel_cos+0x248>)
   11672:	e9d3 2300 	ldrd	r2, r3, [r3]
   11676:	f7fa fd6d 	bl	c154 <__adddf3>
   1167a:	4622      	mov	r2, r4
   1167c:	462b      	mov	r3, r5
   1167e:	f7fa ff1f 	bl	c4c0 <__aeabi_dmul>
   11682:	a33d      	add	r3, pc, #244	; (adr r3, 11778 <__kernel_cos+0x250>)
   11684:	e9d3 2300 	ldrd	r2, r3, [r3]
   11688:	f7fa fd62 	bl	c150 <__aeabi_dsub>
   1168c:	4622      	mov	r2, r4
   1168e:	462b      	mov	r3, r5
   11690:	f7fa ff16 	bl	c4c0 <__aeabi_dmul>
   11694:	a33a      	add	r3, pc, #232	; (adr r3, 11780 <__kernel_cos+0x258>)
   11696:	e9d3 2300 	ldrd	r2, r3, [r3]
   1169a:	f7fa fd5b 	bl	c154 <__adddf3>
   1169e:	462b      	mov	r3, r5
   116a0:	4622      	mov	r2, r4
   116a2:	f7fa ff0d 	bl	c4c0 <__aeabi_dmul>
   116a6:	4b3e      	ldr	r3, [pc, #248]	; (117a0 <__kernel_cos+0x278>)
   116a8:	4682      	mov	sl, r0
   116aa:	468b      	mov	fp, r1
   116ac:	4599      	cmp	r9, r3
   116ae:	dd8f      	ble.n	115d0 <__kernel_cos+0xa8>
   116b0:	4b3c      	ldr	r3, [pc, #240]	; (117a4 <__kernel_cos+0x27c>)
   116b2:	4599      	cmp	r9, r3
   116b4:	dc44      	bgt.n	11740 <__kernel_cos+0x218>
   116b6:	2200      	movs	r2, #0
   116b8:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   116bc:	2000      	movs	r0, #0
   116be:	4937      	ldr	r1, [pc, #220]	; (1179c <__kernel_cos+0x274>)
   116c0:	4690      	mov	r8, r2
   116c2:	4699      	mov	r9, r3
   116c4:	f7fa fd44 	bl	c150 <__aeabi_dsub>
   116c8:	e9cd 0100 	strd	r0, r1, [sp]
   116cc:	2200      	movs	r2, #0
   116ce:	4b32      	ldr	r3, [pc, #200]	; (11798 <__kernel_cos+0x270>)
   116d0:	4620      	mov	r0, r4
   116d2:	4629      	mov	r1, r5
   116d4:	f7fa fef4 	bl	c4c0 <__aeabi_dmul>
   116d8:	4642      	mov	r2, r8
   116da:	464b      	mov	r3, r9
   116dc:	f7fa fd38 	bl	c150 <__aeabi_dsub>
   116e0:	4652      	mov	r2, sl
   116e2:	4680      	mov	r8, r0
   116e4:	4689      	mov	r9, r1
   116e6:	465b      	mov	r3, fp
   116e8:	4620      	mov	r0, r4
   116ea:	4629      	mov	r1, r5
   116ec:	f7fa fee8 	bl	c4c0 <__aeabi_dmul>
   116f0:	4604      	mov	r4, r0
   116f2:	460d      	mov	r5, r1
   116f4:	4630      	mov	r0, r6
   116f6:	4639      	mov	r1, r7
   116f8:	ec53 2b18 	vmov	r2, r3, d8
   116fc:	f7fa fee0 	bl	c4c0 <__aeabi_dmul>
   11700:	4602      	mov	r2, r0
   11702:	460b      	mov	r3, r1
   11704:	4620      	mov	r0, r4
   11706:	4629      	mov	r1, r5
   11708:	f7fa fd22 	bl	c150 <__aeabi_dsub>
   1170c:	4602      	mov	r2, r0
   1170e:	460b      	mov	r3, r1
   11710:	4640      	mov	r0, r8
   11712:	4649      	mov	r1, r9
   11714:	f7fa fd1c 	bl	c150 <__aeabi_dsub>
   11718:	4602      	mov	r2, r0
   1171a:	460b      	mov	r3, r1
   1171c:	e9dd 0100 	ldrd	r0, r1, [sp]
   11720:	f7fa fd16 	bl	c150 <__aeabi_dsub>
   11724:	ec41 0b10 	vmov	d0, r0, r1
   11728:	b003      	add	sp, #12
   1172a:	ecbd 8b02 	vpop	{d8}
   1172e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11732:	ed9f 0b15 	vldr	d0, [pc, #84]	; 11788 <__kernel_cos+0x260>
   11736:	b003      	add	sp, #12
   11738:	ecbd 8b02 	vpop	{d8}
   1173c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11740:	ed9f 7b13 	vldr	d7, [pc, #76]	; 11790 <__kernel_cos+0x268>
   11744:	f04f 0800 	mov.w	r8, #0
   11748:	f8df 905c 	ldr.w	r9, [pc, #92]	; 117a8 <__kernel_cos+0x280>
   1174c:	ed8d 7b00 	vstr	d7, [sp]
   11750:	e7bc      	b.n	116cc <__kernel_cos+0x1a4>
   11752:	bf00      	nop
   11754:	f3af 8000 	nop.w
   11758:	be8838d4 	.word	0xbe8838d4
   1175c:	bda8fae9 	.word	0xbda8fae9
   11760:	bdb4b1c4 	.word	0xbdb4b1c4
   11764:	3e21ee9e 	.word	0x3e21ee9e
   11768:	809c52ad 	.word	0x809c52ad
   1176c:	3e927e4f 	.word	0x3e927e4f
   11770:	19cb1590 	.word	0x19cb1590
   11774:	3efa01a0 	.word	0x3efa01a0
   11778:	16c15177 	.word	0x16c15177
   1177c:	3f56c16c 	.word	0x3f56c16c
   11780:	5555554c 	.word	0x5555554c
   11784:	3fa55555 	.word	0x3fa55555
   11788:	00000000 	.word	0x00000000
   1178c:	3ff00000 	.word	0x3ff00000
   11790:	00000000 	.word	0x00000000
   11794:	3fe70000 	.word	0x3fe70000
   11798:	3fe00000 	.word	0x3fe00000
   1179c:	3ff00000 	.word	0x3ff00000
   117a0:	3fd33332 	.word	0x3fd33332
   117a4:	3fe90000 	.word	0x3fe90000
   117a8:	3fd20000 	.word	0x3fd20000
   117ac:	00000000 	.word	0x00000000

000117b0 <__kernel_rem_pio2>:
   117b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117b4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   117b8:	461e      	mov	r6, r3
   117ba:	4cbf      	ldr	r4, [pc, #764]	; (11ab8 <__kernel_rem_pio2+0x308>)
   117bc:	9307      	str	r3, [sp, #28]
   117be:	1ed3      	subs	r3, r2, #3
   117c0:	9003      	str	r0, [sp, #12]
   117c2:	3e01      	subs	r6, #1
   117c4:	fb84 0403 	smull	r0, r4, r4, r3
   117c8:	17db      	asrs	r3, r3, #31
   117ca:	910b      	str	r1, [sp, #44]	; 0x2c
   117cc:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
   117d0:	4dba      	ldr	r5, [pc, #744]	; (11abc <__kernel_rem_pio2+0x30c>)
   117d2:	98a2      	ldr	r0, [sp, #648]	; 0x288
   117d4:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   117d8:	9601      	str	r6, [sp, #4]
   117da:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   117de:	1c4b      	adds	r3, r1, #1
   117e0:	9109      	str	r1, [sp, #36]	; 0x24
   117e2:	9004      	str	r0, [sp, #16]
   117e4:	1b8f      	subs	r7, r1, r6
   117e6:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   117ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   117ee:	9305      	str	r3, [sp, #20]
   117f0:	1983      	adds	r3, r0, r6
   117f2:	d41a      	bmi.n	1182a <__kernel_rem_pio2+0x7a>
   117f4:	443b      	add	r3, r7
   117f6:	f10d 0880 	add.w	r8, sp, #128	; 0x80
   117fa:	2400      	movs	r4, #0
   117fc:	2500      	movs	r5, #0
   117fe:	1c5e      	adds	r6, r3, #1
   11800:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
   11804:	e008      	b.n	11818 <__kernel_rem_pio2+0x68>
   11806:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   1180a:	3701      	adds	r7, #1
   1180c:	f7fa fdee 	bl	c3ec <__aeabi_i2d>
   11810:	42b7      	cmp	r7, r6
   11812:	e8e8 0102 	strd	r0, r1, [r8], #8
   11816:	d008      	beq.n	1182a <__kernel_rem_pio2+0x7a>
   11818:	2f00      	cmp	r7, #0
   1181a:	daf4      	bge.n	11806 <__kernel_rem_pio2+0x56>
   1181c:	3701      	adds	r7, #1
   1181e:	4620      	mov	r0, r4
   11820:	4629      	mov	r1, r5
   11822:	42b7      	cmp	r7, r6
   11824:	e8e8 0102 	strd	r0, r1, [r8], #8
   11828:	d1f6      	bne.n	11818 <__kernel_rem_pio2+0x68>
   1182a:	9b04      	ldr	r3, [sp, #16]
   1182c:	2b00      	cmp	r3, #0
   1182e:	9b07      	ldr	r3, [sp, #28]
   11830:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   11834:	9302      	str	r3, [sp, #8]
   11836:	db29      	blt.n	1188c <__kernel_rem_pio2+0xdc>
   11838:	9a03      	ldr	r2, [sp, #12]
   1183a:	a920      	add	r1, sp, #128	; 0x80
   1183c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   11840:	eb02 0803 	add.w	r8, r2, r3
   11844:	eb01 0903 	add.w	r9, r1, r3
   11848:	aa72      	add	r2, sp, #456	; 0x1c8
   1184a:	9b04      	ldr	r3, [sp, #16]
   1184c:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
   11850:	9b01      	ldr	r3, [sp, #4]
   11852:	2b00      	cmp	r3, #0
   11854:	f2c0 819c 	blt.w	11b90 <__kernel_rem_pio2+0x3e0>
   11858:	464d      	mov	r5, r9
   1185a:	9c03      	ldr	r4, [sp, #12]
   1185c:	2600      	movs	r6, #0
   1185e:	2700      	movs	r7, #0
   11860:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   11864:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   11868:	f7fa fe2a 	bl	c4c0 <__aeabi_dmul>
   1186c:	4602      	mov	r2, r0
   1186e:	460b      	mov	r3, r1
   11870:	4630      	mov	r0, r6
   11872:	4639      	mov	r1, r7
   11874:	f7fa fc6e 	bl	c154 <__adddf3>
   11878:	4544      	cmp	r4, r8
   1187a:	4606      	mov	r6, r0
   1187c:	460f      	mov	r7, r1
   1187e:	d1ef      	bne.n	11860 <__kernel_rem_pio2+0xb0>
   11880:	f109 0908 	add.w	r9, r9, #8
   11884:	e8ea 6702 	strd	r6, r7, [sl], #8
   11888:	45da      	cmp	sl, fp
   1188a:	d1e1      	bne.n	11850 <__kernel_rem_pio2+0xa0>
   1188c:	9904      	ldr	r1, [sp, #16]
   1188e:	e9dd 2002 	ldrd	r2, r0, [sp, #8]
   11892:	008b      	lsls	r3, r1, #2
   11894:	468b      	mov	fp, r1
   11896:	4402      	add	r2, r0
   11898:	a80b      	add	r0, sp, #44	; 0x2c
   1189a:	4692      	mov	sl, r2
   1189c:	f1a3 0208 	sub.w	r2, r3, #8
   118a0:	18c3      	adds	r3, r0, r3
   118a2:	9308      	str	r3, [sp, #32]
   118a4:	ab0c      	add	r3, sp, #48	; 0x30
   118a6:	4413      	add	r3, r2
   118a8:	930a      	str	r3, [sp, #40]	; 0x28
   118aa:	ab98      	add	r3, sp, #608	; 0x260
   118ac:	f1bb 0f00 	cmp.w	fp, #0
   118b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   118b4:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   118b8:	dd29      	ble.n	1190e <__kernel_rem_pio2+0x15e>
   118ba:	ab70      	add	r3, sp, #448	; 0x1c0
   118bc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   118c0:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
   118c4:	2200      	movs	r2, #0
   118c6:	4b7e      	ldr	r3, [pc, #504]	; (11ac0 <__kernel_rem_pio2+0x310>)
   118c8:	4620      	mov	r0, r4
   118ca:	4629      	mov	r1, r5
   118cc:	f7fa fdf8 	bl	c4c0 <__aeabi_dmul>
   118d0:	f7fb f890 	bl	c9f4 <__aeabi_d2iz>
   118d4:	f7fa fd8a 	bl	c3ec <__aeabi_i2d>
   118d8:	2200      	movs	r2, #0
   118da:	4b7a      	ldr	r3, [pc, #488]	; (11ac4 <__kernel_rem_pio2+0x314>)
   118dc:	4606      	mov	r6, r0
   118de:	460f      	mov	r7, r1
   118e0:	f7fa fdee 	bl	c4c0 <__aeabi_dmul>
   118e4:	4602      	mov	r2, r0
   118e6:	460b      	mov	r3, r1
   118e8:	4620      	mov	r0, r4
   118ea:	4629      	mov	r1, r5
   118ec:	f7fa fc30 	bl	c150 <__aeabi_dsub>
   118f0:	f7fb f880 	bl	c9f4 <__aeabi_d2iz>
   118f4:	4639      	mov	r1, r7
   118f6:	f849 0b04 	str.w	r0, [r9], #4
   118fa:	4630      	mov	r0, r6
   118fc:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   11900:	f7fa fc28 	bl	c154 <__adddf3>
   11904:	ab70      	add	r3, sp, #448	; 0x1c0
   11906:	4604      	mov	r4, r0
   11908:	460d      	mov	r5, r1
   1190a:	4598      	cmp	r8, r3
   1190c:	d1da      	bne.n	118c4 <__kernel_rem_pio2+0x114>
   1190e:	f8dd 9014 	ldr.w	r9, [sp, #20]
   11912:	ec45 4b10 	vmov	d0, r4, r5
   11916:	4648      	mov	r0, r9
   11918:	f000 fc36 	bl	12188 <scalbn>
   1191c:	2200      	movs	r2, #0
   1191e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   11922:	ee10 0a10 	vmov	r0, s0
   11926:	ec55 4b10 	vmov	r4, r5, d0
   1192a:	4629      	mov	r1, r5
   1192c:	f7fa fdc8 	bl	c4c0 <__aeabi_dmul>
   11930:	ec41 0b10 	vmov	d0, r0, r1
   11934:	f7ff fae4 	bl	10f00 <floor>
   11938:	2200      	movs	r2, #0
   1193a:	4b63      	ldr	r3, [pc, #396]	; (11ac8 <__kernel_rem_pio2+0x318>)
   1193c:	ec51 0b10 	vmov	r0, r1, d0
   11940:	f7fa fdbe 	bl	c4c0 <__aeabi_dmul>
   11944:	4602      	mov	r2, r0
   11946:	460b      	mov	r3, r1
   11948:	4620      	mov	r0, r4
   1194a:	4629      	mov	r1, r5
   1194c:	f7fa fc00 	bl	c150 <__aeabi_dsub>
   11950:	460d      	mov	r5, r1
   11952:	4604      	mov	r4, r0
   11954:	f7fb f84e 	bl	c9f4 <__aeabi_d2iz>
   11958:	4680      	mov	r8, r0
   1195a:	f7fa fd47 	bl	c3ec <__aeabi_i2d>
   1195e:	460b      	mov	r3, r1
   11960:	4602      	mov	r2, r0
   11962:	4629      	mov	r1, r5
   11964:	4620      	mov	r0, r4
   11966:	f7fa fbf3 	bl	c150 <__aeabi_dsub>
   1196a:	464b      	mov	r3, r9
   1196c:	4606      	mov	r6, r0
   1196e:	460f      	mov	r7, r1
   11970:	2b00      	cmp	r3, #0
   11972:	f340 80e1 	ble.w	11b38 <__kernel_rem_pio2+0x388>
   11976:	f10b 32ff 	add.w	r2, fp, #4294967295
   1197a:	a90c      	add	r1, sp, #48	; 0x30
   1197c:	f1c9 0318 	rsb	r3, r9, #24
   11980:	f1c9 0517 	rsb	r5, r9, #23
   11984:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   11988:	fa41 f003 	asr.w	r0, r1, r3
   1198c:	fa00 f303 	lsl.w	r3, r0, r3
   11990:	4480      	add	r8, r0
   11992:	1acb      	subs	r3, r1, r3
   11994:	a90c      	add	r1, sp, #48	; 0x30
   11996:	fa43 f505 	asr.w	r5, r3, r5
   1199a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1199e:	2d00      	cmp	r5, #0
   119a0:	dd2c      	ble.n	119fc <__kernel_rem_pio2+0x24c>
   119a2:	f1bb 0f00 	cmp.w	fp, #0
   119a6:	f108 0801 	add.w	r8, r8, #1
   119aa:	f340 82a3 	ble.w	11ef4 <__kernel_rem_pio2+0x744>
   119ae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   119b0:	2c00      	cmp	r4, #0
   119b2:	f040 80a7 	bne.w	11b04 <__kernel_rem_pio2+0x354>
   119b6:	f1bb 0f01 	cmp.w	fp, #1
   119ba:	d00a      	beq.n	119d2 <__kernel_rem_pio2+0x222>
   119bc:	a90c      	add	r1, sp, #48	; 0x30
   119be:	2201      	movs	r2, #1
   119c0:	f851 4f04 	ldr.w	r4, [r1, #4]!
   119c4:	1c53      	adds	r3, r2, #1
   119c6:	2c00      	cmp	r4, #0
   119c8:	f040 809e 	bne.w	11b08 <__kernel_rem_pio2+0x358>
   119cc:	459b      	cmp	fp, r3
   119ce:	461a      	mov	r2, r3
   119d0:	d1f6      	bne.n	119c0 <__kernel_rem_pio2+0x210>
   119d2:	9b05      	ldr	r3, [sp, #20]
   119d4:	2b00      	cmp	r3, #0
   119d6:	dd0e      	ble.n	119f6 <__kernel_rem_pio2+0x246>
   119d8:	2b01      	cmp	r3, #1
   119da:	f000 8198 	beq.w	11d0e <__kernel_rem_pio2+0x55e>
   119de:	2b02      	cmp	r3, #2
   119e0:	d109      	bne.n	119f6 <__kernel_rem_pio2+0x246>
   119e2:	f10b 32ff 	add.w	r2, fp, #4294967295
   119e6:	ab0c      	add	r3, sp, #48	; 0x30
   119e8:	a90c      	add	r1, sp, #48	; 0x30
   119ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   119ee:	f3c3 0315 	ubfx	r3, r3, #0, #22
   119f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   119f6:	2d02      	cmp	r5, #2
   119f8:	f000 80af 	beq.w	11b5a <__kernel_rem_pio2+0x3aa>
   119fc:	2200      	movs	r2, #0
   119fe:	2300      	movs	r3, #0
   11a00:	4630      	mov	r0, r6
   11a02:	4639      	mov	r1, r7
   11a04:	f7fa ffc4 	bl	c990 <__aeabi_dcmpeq>
   11a08:	2800      	cmp	r0, #0
   11a0a:	f000 8275 	beq.w	11ef8 <__kernel_rem_pio2+0x748>
   11a0e:	f10b 39ff 	add.w	r9, fp, #4294967295
   11a12:	9b04      	ldr	r3, [sp, #16]
   11a14:	454b      	cmp	r3, r9
   11a16:	dc10      	bgt.n	11a3a <__kernel_rem_pio2+0x28a>
   11a18:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   11a1c:	a90c      	add	r1, sp, #48	; 0x30
   11a1e:	2200      	movs	r2, #0
   11a20:	9808      	ldr	r0, [sp, #32]
   11a22:	445b      	add	r3, fp
   11a24:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   11a28:	f853 1904 	ldr.w	r1, [r3], #-4
   11a2c:	4283      	cmp	r3, r0
   11a2e:	ea42 0201 	orr.w	r2, r2, r1
   11a32:	d1f9      	bne.n	11a28 <__kernel_rem_pio2+0x278>
   11a34:	2a00      	cmp	r2, #0
   11a36:	f040 80b5 	bne.w	11ba4 <__kernel_rem_pio2+0x3f4>
   11a3a:	9b04      	ldr	r3, [sp, #16]
   11a3c:	aa0c      	add	r2, sp, #48	; 0x30
   11a3e:	3b01      	subs	r3, #1
   11a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a44:	2b00      	cmp	r3, #0
   11a46:	f040 80a1 	bne.w	11b8c <__kernel_rem_pio2+0x3dc>
   11a4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11a4c:	2301      	movs	r3, #1
   11a4e:	f852 1904 	ldr.w	r1, [r2], #-4
   11a52:	3301      	adds	r3, #1
   11a54:	2900      	cmp	r1, #0
   11a56:	d0fa      	beq.n	11a4e <__kernel_rem_pio2+0x29e>
   11a58:	eb03 020b 	add.w	r2, r3, fp
   11a5c:	f10b 0901 	add.w	r9, fp, #1
   11a60:	4591      	cmp	r9, r2
   11a62:	9206      	str	r2, [sp, #24]
   11a64:	dc48      	bgt.n	11af8 <__kernel_rem_pio2+0x348>
   11a66:	9909      	ldr	r1, [sp, #36]	; 0x24
   11a68:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
   11a6c:	9807      	ldr	r0, [sp, #28]
   11a6e:	eb09 0301 	add.w	r3, r9, r1
   11a72:	eb00 050b 	add.w	r5, r0, fp
   11a76:	eb01 0b02 	add.w	fp, r1, r2
   11a7a:	4498      	add	r8, r3
   11a7c:	ab20      	add	r3, sp, #128	; 0x80
   11a7e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   11a82:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
   11a84:	eb03 0888 	add.w	r8, r3, r8, lsl #2
   11a88:	ab70      	add	r3, sp, #448	; 0x1c0
   11a8a:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   11a8e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
   11a90:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   11a94:	9302      	str	r3, [sp, #8]
   11a96:	f858 0f04 	ldr.w	r0, [r8, #4]!
   11a9a:	f105 0b08 	add.w	fp, r5, #8
   11a9e:	f7fa fca5 	bl	c3ec <__aeabi_i2d>
   11aa2:	460b      	mov	r3, r1
   11aa4:	9901      	ldr	r1, [sp, #4]
   11aa6:	4602      	mov	r2, r0
   11aa8:	2900      	cmp	r1, #0
   11aaa:	e9c5 2300 	strd	r2, r3, [r5]
   11aae:	db26      	blt.n	11afe <__kernel_rem_pio2+0x34e>
   11ab0:	9c03      	ldr	r4, [sp, #12]
   11ab2:	2600      	movs	r6, #0
   11ab4:	2700      	movs	r7, #0
   11ab6:	e00b      	b.n	11ad0 <__kernel_rem_pio2+0x320>
   11ab8:	2aaaaaab 	.word	0x2aaaaaab
   11abc:	000340b8 	.word	0x000340b8
   11ac0:	3e700000 	.word	0x3e700000
   11ac4:	41700000 	.word	0x41700000
   11ac8:	40200000 	.word	0x40200000
   11acc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   11ad0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   11ad4:	f7fa fcf4 	bl	c4c0 <__aeabi_dmul>
   11ad8:	4602      	mov	r2, r0
   11ada:	460b      	mov	r3, r1
   11adc:	4630      	mov	r0, r6
   11ade:	4639      	mov	r1, r7
   11ae0:	f7fa fb38 	bl	c154 <__adddf3>
   11ae4:	4554      	cmp	r4, sl
   11ae6:	4606      	mov	r6, r0
   11ae8:	460f      	mov	r7, r1
   11aea:	d1ef      	bne.n	11acc <__kernel_rem_pio2+0x31c>
   11aec:	9b02      	ldr	r3, [sp, #8]
   11aee:	465d      	mov	r5, fp
   11af0:	4598      	cmp	r8, r3
   11af2:	e8e9 6702 	strd	r6, r7, [r9], #8
   11af6:	d1ce      	bne.n	11a96 <__kernel_rem_pio2+0x2e6>
   11af8:	f8dd b018 	ldr.w	fp, [sp, #24]
   11afc:	e6d5      	b.n	118aa <__kernel_rem_pio2+0xfa>
   11afe:	2600      	movs	r6, #0
   11b00:	2700      	movs	r7, #0
   11b02:	e7f3      	b.n	11aec <__kernel_rem_pio2+0x33c>
   11b04:	2301      	movs	r3, #1
   11b06:	2200      	movs	r2, #0
   11b08:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   11b0c:	a90c      	add	r1, sp, #48	; 0x30
   11b0e:	459b      	cmp	fp, r3
   11b10:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
   11b14:	dd0e      	ble.n	11b34 <__kernel_rem_pio2+0x384>
   11b16:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   11b1a:	eb01 008b 	add.w	r0, r1, fp, lsl #2
   11b1e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   11b22:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   11b26:	e000      	b.n	11b2a <__kernel_rem_pio2+0x37a>
   11b28:	681a      	ldr	r2, [r3, #0]
   11b2a:	1a8a      	subs	r2, r1, r2
   11b2c:	f843 2b04 	str.w	r2, [r3], #4
   11b30:	4283      	cmp	r3, r0
   11b32:	d1f9      	bne.n	11b28 <__kernel_rem_pio2+0x378>
   11b34:	2401      	movs	r4, #1
   11b36:	e74c      	b.n	119d2 <__kernel_rem_pio2+0x222>
   11b38:	d106      	bne.n	11b48 <__kernel_rem_pio2+0x398>
   11b3a:	f10b 33ff 	add.w	r3, fp, #4294967295
   11b3e:	aa0c      	add	r2, sp, #48	; 0x30
   11b40:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   11b44:	15ed      	asrs	r5, r5, #23
   11b46:	e72a      	b.n	1199e <__kernel_rem_pio2+0x1ee>
   11b48:	2200      	movs	r2, #0
   11b4a:	4bc3      	ldr	r3, [pc, #780]	; (11e58 <__kernel_rem_pio2+0x6a8>)
   11b4c:	f7fa ff3e 	bl	c9cc <__aeabi_dcmpge>
   11b50:	2800      	cmp	r0, #0
   11b52:	f040 81bb 	bne.w	11ecc <__kernel_rem_pio2+0x71c>
   11b56:	4605      	mov	r5, r0
   11b58:	e750      	b.n	119fc <__kernel_rem_pio2+0x24c>
   11b5a:	4632      	mov	r2, r6
   11b5c:	463b      	mov	r3, r7
   11b5e:	2000      	movs	r0, #0
   11b60:	49be      	ldr	r1, [pc, #760]	; (11e5c <__kernel_rem_pio2+0x6ac>)
   11b62:	f7fa faf5 	bl	c150 <__aeabi_dsub>
   11b66:	4606      	mov	r6, r0
   11b68:	460f      	mov	r7, r1
   11b6a:	2c00      	cmp	r4, #0
   11b6c:	f43f af46 	beq.w	119fc <__kernel_rem_pio2+0x24c>
   11b70:	9805      	ldr	r0, [sp, #20]
   11b72:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 11e48 <__kernel_rem_pio2+0x698>
   11b76:	f000 fb07 	bl	12188 <scalbn>
   11b7a:	4630      	mov	r0, r6
   11b7c:	4639      	mov	r1, r7
   11b7e:	ec53 2b10 	vmov	r2, r3, d0
   11b82:	f7fa fae5 	bl	c150 <__aeabi_dsub>
   11b86:	4606      	mov	r6, r0
   11b88:	460f      	mov	r7, r1
   11b8a:	e737      	b.n	119fc <__kernel_rem_pio2+0x24c>
   11b8c:	2301      	movs	r3, #1
   11b8e:	e763      	b.n	11a58 <__kernel_rem_pio2+0x2a8>
   11b90:	2600      	movs	r6, #0
   11b92:	2700      	movs	r7, #0
   11b94:	f109 0908 	add.w	r9, r9, #8
   11b98:	e8ea 6702 	strd	r6, r7, [sl], #8
   11b9c:	45da      	cmp	sl, fp
   11b9e:	f47f ae57 	bne.w	11850 <__kernel_rem_pio2+0xa0>
   11ba2:	e673      	b.n	1188c <__kernel_rem_pio2+0xdc>
   11ba4:	9a05      	ldr	r2, [sp, #20]
   11ba6:	ab0c      	add	r3, sp, #48	; 0x30
   11ba8:	3a18      	subs	r2, #24
   11baa:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
   11bae:	e9cd 8506 	strd	r8, r5, [sp, #24]
   11bb2:	9205      	str	r2, [sp, #20]
   11bb4:	b96b      	cbnz	r3, 11bd2 <__kernel_rem_pio2+0x422>
   11bb6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   11bba:	a90c      	add	r1, sp, #48	; 0x30
   11bbc:	444b      	add	r3, r9
   11bbe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   11bc2:	f853 1904 	ldr.w	r1, [r3], #-4
   11bc6:	f109 39ff 	add.w	r9, r9, #4294967295
   11bca:	3a18      	subs	r2, #24
   11bcc:	2900      	cmp	r1, #0
   11bce:	d0f8      	beq.n	11bc2 <__kernel_rem_pio2+0x412>
   11bd0:	9205      	str	r2, [sp, #20]
   11bd2:	9805      	ldr	r0, [sp, #20]
   11bd4:	ed9f 0b9c 	vldr	d0, [pc, #624]	; 11e48 <__kernel_rem_pio2+0x698>
   11bd8:	f000 fad6 	bl	12188 <scalbn>
   11bdc:	f1b9 0f00 	cmp.w	r9, #0
   11be0:	ec55 4b10 	vmov	r4, r5, d0
   11be4:	f2c0 81e6 	blt.w	11fb4 <__kernel_rem_pio2+0x804>
   11be8:	aa0c      	add	r2, sp, #48	; 0x30
   11bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
   11bee:	f04f 0a00 	mov.w	sl, #0
   11bf2:	f8df b26c 	ldr.w	fp, [pc, #620]	; 11e60 <__kernel_rem_pio2+0x6b0>
   11bf6:	eb02 0689 	add.w	r6, r2, r9, lsl #2
   11bfa:	aa70      	add	r2, sp, #448	; 0x1c0
   11bfc:	9308      	str	r3, [sp, #32]
   11bfe:	eb02 0803 	add.w	r8, r2, r3
   11c02:	3604      	adds	r6, #4
   11c04:	f108 0708 	add.w	r7, r8, #8
   11c08:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   11c0c:	f7fa fbee 	bl	c3ec <__aeabi_i2d>
   11c10:	4622      	mov	r2, r4
   11c12:	462b      	mov	r3, r5
   11c14:	f7fa fc54 	bl	c4c0 <__aeabi_dmul>
   11c18:	465b      	mov	r3, fp
   11c1a:	4652      	mov	r2, sl
   11c1c:	e967 0102 	strd	r0, r1, [r7, #-8]!
   11c20:	4620      	mov	r0, r4
   11c22:	4629      	mov	r1, r5
   11c24:	f7fa fc4c 	bl	c4c0 <__aeabi_dmul>
   11c28:	ab0c      	add	r3, sp, #48	; 0x30
   11c2a:	4604      	mov	r4, r0
   11c2c:	460d      	mov	r5, r1
   11c2e:	429e      	cmp	r6, r3
   11c30:	d1ea      	bne.n	11c08 <__kernel_rem_pio2+0x458>
   11c32:	ab48      	add	r3, sp, #288	; 0x120
   11c34:	f109 0201 	add.w	r2, r9, #1
   11c38:	f8cd 9014 	str.w	r9, [sp, #20]
   11c3c:	46c3      	mov	fp, r8
   11c3e:	f04f 0a00 	mov.w	sl, #0
   11c42:	f8dd 9010 	ldr.w	r9, [sp, #16]
   11c46:	9303      	str	r3, [sp, #12]
   11c48:	9202      	str	r2, [sp, #8]
   11c4a:	9301      	str	r3, [sp, #4]
   11c4c:	f1b9 0f00 	cmp.w	r9, #0
   11c50:	f2c0 814d 	blt.w	11eee <__kernel_rem_pio2+0x73e>
   11c54:	f8df 820c 	ldr.w	r8, [pc, #524]	; 11e64 <__kernel_rem_pio2+0x6b4>
   11c58:	465d      	mov	r5, fp
   11c5a:	2400      	movs	r4, #0
   11c5c:	2600      	movs	r6, #0
   11c5e:	2700      	movs	r7, #0
   11c60:	a37b      	add	r3, pc, #492	; (adr r3, 11e50 <__kernel_rem_pio2+0x6a0>)
   11c62:	e9d3 2300 	ldrd	r2, r3, [r3]
   11c66:	e003      	b.n	11c70 <__kernel_rem_pio2+0x4c0>
   11c68:	4554      	cmp	r4, sl
   11c6a:	dc10      	bgt.n	11c8e <__kernel_rem_pio2+0x4de>
   11c6c:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   11c70:	3401      	adds	r4, #1
   11c72:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   11c76:	f7fa fc23 	bl	c4c0 <__aeabi_dmul>
   11c7a:	4602      	mov	r2, r0
   11c7c:	460b      	mov	r3, r1
   11c7e:	4630      	mov	r0, r6
   11c80:	4639      	mov	r1, r7
   11c82:	f7fa fa67 	bl	c154 <__adddf3>
   11c86:	45a1      	cmp	r9, r4
   11c88:	4606      	mov	r6, r0
   11c8a:	460f      	mov	r7, r1
   11c8c:	daec      	bge.n	11c68 <__kernel_rem_pio2+0x4b8>
   11c8e:	9b01      	ldr	r3, [sp, #4]
   11c90:	f10a 0a01 	add.w	sl, sl, #1
   11c94:	f1ab 0b08 	sub.w	fp, fp, #8
   11c98:	e8e3 6702 	strd	r6, r7, [r3], #8
   11c9c:	9301      	str	r3, [sp, #4]
   11c9e:	9b02      	ldr	r3, [sp, #8]
   11ca0:	459a      	cmp	sl, r3
   11ca2:	d1d3      	bne.n	11c4c <__kernel_rem_pio2+0x49c>
   11ca4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   11ca6:	f8dd 9014 	ldr.w	r9, [sp, #20]
   11caa:	2b03      	cmp	r3, #3
   11cac:	d828      	bhi.n	11d00 <__kernel_rem_pio2+0x550>
   11cae:	e8df f013 	tbh	[pc, r3, lsl #1]
   11cb2:	00f2      	.short	0x00f2
   11cb4:	00dd00dd 	.word	0x00dd00dd
   11cb8:	003b      	.short	0x003b
   11cba:	9b07      	ldr	r3, [sp, #28]
   11cbc:	2000      	movs	r0, #0
   11cbe:	2100      	movs	r1, #0
   11cc0:	2b00      	cmp	r3, #0
   11cc2:	f040 8155 	bne.w	11f70 <__kernel_rem_pio2+0x7c0>
   11cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11cc8:	4602      	mov	r2, r0
   11cca:	e9c3 0100 	strd	r0, r1, [r3]
   11cce:	460b      	mov	r3, r1
   11cd0:	9903      	ldr	r1, [sp, #12]
   11cd2:	e9d1 0100 	ldrd	r0, r1, [r1]
   11cd6:	f7fa fa3b 	bl	c150 <__aeabi_dsub>
   11cda:	f1b9 0f00 	cmp.w	r9, #0
   11cde:	dd0c      	ble.n	11cfa <__kernel_rem_pio2+0x54a>
   11ce0:	ad4a      	add	r5, sp, #296	; 0x128
   11ce2:	2401      	movs	r4, #1
   11ce4:	3401      	adds	r4, #1
   11ce6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   11cea:	f7fa fa33 	bl	c154 <__adddf3>
   11cee:	45a1      	cmp	r9, r4
   11cf0:	daf8      	bge.n	11ce4 <__kernel_rem_pio2+0x534>
   11cf2:	9b07      	ldr	r3, [sp, #28]
   11cf4:	2b00      	cmp	r3, #0
   11cf6:	f040 814b 	bne.w	11f90 <__kernel_rem_pio2+0x7e0>
   11cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11cfc:	e9c3 0102 	strd	r0, r1, [r3, #8]
   11d00:	9b06      	ldr	r3, [sp, #24]
   11d02:	f003 0007 	and.w	r0, r3, #7
   11d06:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   11d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d0e:	f10b 32ff 	add.w	r2, fp, #4294967295
   11d12:	ab0c      	add	r3, sp, #48	; 0x30
   11d14:	a90c      	add	r1, sp, #48	; 0x30
   11d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11d1a:	f3c3 0316 	ubfx	r3, r3, #0, #23
   11d1e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   11d22:	e668      	b.n	119f6 <__kernel_rem_pio2+0x246>
   11d24:	ab48      	add	r3, sp, #288	; 0x120
   11d26:	9303      	str	r3, [sp, #12]
   11d28:	f1b9 0f00 	cmp.w	r9, #0
   11d2c:	f340 8155 	ble.w	11fda <__kernel_rem_pio2+0x82a>
   11d30:	9b03      	ldr	r3, [sp, #12]
   11d32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
   11d36:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
   11d3a:	f8cd 9010 	str.w	r9, [sp, #16]
   11d3e:	eb03 08c9 	add.w	r8, r3, r9, lsl #3
   11d42:	461a      	mov	r2, r3
   11d44:	9102      	str	r1, [sp, #8]
   11d46:	eb09 0100 	add.w	r1, r9, r0
   11d4a:	4691      	mov	r9, r2
   11d4c:	9101      	str	r1, [sp, #4]
   11d4e:	e9d8 ab00 	ldrd	sl, fp, [r8]
   11d52:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
   11d56:	4652      	mov	r2, sl
   11d58:	465b      	mov	r3, fp
   11d5a:	4630      	mov	r0, r6
   11d5c:	4639      	mov	r1, r7
   11d5e:	f7fa f9f9 	bl	c154 <__adddf3>
   11d62:	4604      	mov	r4, r0
   11d64:	460d      	mov	r5, r1
   11d66:	4602      	mov	r2, r0
   11d68:	460b      	mov	r3, r1
   11d6a:	4630      	mov	r0, r6
   11d6c:	4639      	mov	r1, r7
   11d6e:	f7fa f9ef 	bl	c150 <__aeabi_dsub>
   11d72:	4652      	mov	r2, sl
   11d74:	465b      	mov	r3, fp
   11d76:	46a2      	mov	sl, r4
   11d78:	f7fa f9ec 	bl	c154 <__adddf3>
   11d7c:	45c1      	cmp	r9, r8
   11d7e:	46ab      	mov	fp, r5
   11d80:	e9c8 0102 	strd	r0, r1, [r8, #8]
   11d84:	e9c8 4500 	strd	r4, r5, [r8]
   11d88:	d1e3      	bne.n	11d52 <__kernel_rem_pio2+0x5a2>
   11d8a:	f8dd 9010 	ldr.w	r9, [sp, #16]
   11d8e:	f1b9 0f01 	cmp.w	r9, #1
   11d92:	f340 8122 	ble.w	11fda <__kernel_rem_pio2+0x82a>
   11d96:	9b01      	ldr	r3, [sp, #4]
   11d98:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
   11d9c:	00da      	lsls	r2, r3, #3
   11d9e:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   11da2:	f102 0a08 	add.w	sl, r2, #8
   11da6:	9201      	str	r2, [sp, #4]
   11da8:	440b      	add	r3, r1
   11daa:	448a      	add	sl, r1
   11dac:	e9d3 6700 	ldrd	r6, r7, [r3]
   11db0:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
   11db4:	4632      	mov	r2, r6
   11db6:	463b      	mov	r3, r7
   11db8:	4640      	mov	r0, r8
   11dba:	4649      	mov	r1, r9
   11dbc:	f7fa f9ca 	bl	c154 <__adddf3>
   11dc0:	4604      	mov	r4, r0
   11dc2:	460d      	mov	r5, r1
   11dc4:	4602      	mov	r2, r0
   11dc6:	460b      	mov	r3, r1
   11dc8:	4640      	mov	r0, r8
   11dca:	4649      	mov	r1, r9
   11dcc:	f7fa f9c0 	bl	c150 <__aeabi_dsub>
   11dd0:	4632      	mov	r2, r6
   11dd2:	463b      	mov	r3, r7
   11dd4:	4626      	mov	r6, r4
   11dd6:	f7fa f9bd 	bl	c154 <__adddf3>
   11dda:	45d3      	cmp	fp, sl
   11ddc:	462f      	mov	r7, r5
   11dde:	e9ca 0102 	strd	r0, r1, [sl, #8]
   11de2:	e9ca 4500 	strd	r4, r5, [sl]
   11de6:	d1e3      	bne.n	11db0 <__kernel_rem_pio2+0x600>
   11de8:	9c01      	ldr	r4, [sp, #4]
   11dea:	2000      	movs	r0, #0
   11dec:	9b03      	ldr	r3, [sp, #12]
   11dee:	2100      	movs	r1, #0
   11df0:	3410      	adds	r4, #16
   11df2:	f103 0510 	add.w	r5, r3, #16
   11df6:	441c      	add	r4, r3
   11df8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   11dfc:	f7fa f9aa 	bl	c154 <__adddf3>
   11e00:	42a5      	cmp	r5, r4
   11e02:	d1f9      	bne.n	11df8 <__kernel_rem_pio2+0x648>
   11e04:	9c03      	ldr	r4, [sp, #12]
   11e06:	9e07      	ldr	r6, [sp, #28]
   11e08:	e9d4 2300 	ldrd	r2, r3, [r4]
   11e0c:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
   11e10:	2e00      	cmp	r6, #0
   11e12:	f000 80c1 	beq.w	11f98 <__kernel_rem_pio2+0x7e8>
   11e16:	f103 4700 	add.w	r7, r3, #2147483648	; 0x80000000
   11e1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   11e1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11e20:	4626      	mov	r6, r4
   11e22:	4694      	mov	ip, r2
   11e24:	f105 4400 	add.w	r4, r5, #2147483648	; 0x80000000
   11e28:	e9c1 0304 	strd	r0, r3, [r1, #16]
   11e2c:	9b06      	ldr	r3, [sp, #24]
   11e2e:	f003 0007 	and.w	r0, r3, #7
   11e32:	e9c1 c700 	strd	ip, r7, [r1]
   11e36:	e9c1 6402 	strd	r6, r4, [r1, #8]
   11e3a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   11e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e42:	bf00      	nop
   11e44:	f3af 8000 	nop.w
   11e48:	00000000 	.word	0x00000000
   11e4c:	3ff00000 	.word	0x3ff00000
   11e50:	40000000 	.word	0x40000000
   11e54:	3ff921fb 	.word	0x3ff921fb
   11e58:	3fe00000 	.word	0x3fe00000
   11e5c:	3ff00000 	.word	0x3ff00000
   11e60:	3e700000 	.word	0x3e700000
   11e64:	00030e70 	.word	0x00030e70
   11e68:	ab48      	add	r3, sp, #288	; 0x120
   11e6a:	9303      	str	r3, [sp, #12]
   11e6c:	f1b9 0f00 	cmp.w	r9, #0
   11e70:	f6ff af23 	blt.w	11cba <__kernel_rem_pio2+0x50a>
   11e74:	9d03      	ldr	r5, [sp, #12]
   11e76:	2000      	movs	r0, #0
   11e78:	2100      	movs	r1, #0
   11e7a:	eb05 04c9 	add.w	r4, r5, r9, lsl #3
   11e7e:	3408      	adds	r4, #8
   11e80:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   11e84:	f7fa f966 	bl	c154 <__adddf3>
   11e88:	42a5      	cmp	r5, r4
   11e8a:	d1f9      	bne.n	11e80 <__kernel_rem_pio2+0x6d0>
   11e8c:	9b07      	ldr	r3, [sp, #28]
   11e8e:	2b00      	cmp	r3, #0
   11e90:	f43f af19 	beq.w	11cc6 <__kernel_rem_pio2+0x516>
   11e94:	e06c      	b.n	11f70 <__kernel_rem_pio2+0x7c0>
   11e96:	9c08      	ldr	r4, [sp, #32]
   11e98:	2000      	movs	r0, #0
   11e9a:	9d03      	ldr	r5, [sp, #12]
   11e9c:	2100      	movs	r1, #0
   11e9e:	3408      	adds	r4, #8
   11ea0:	442c      	add	r4, r5
   11ea2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   11ea6:	f7fa f955 	bl	c154 <__adddf3>
   11eaa:	42a5      	cmp	r5, r4
   11eac:	d1f9      	bne.n	11ea2 <__kernel_rem_pio2+0x6f2>
   11eae:	9b07      	ldr	r3, [sp, #28]
   11eb0:	b113      	cbz	r3, 11eb8 <__kernel_rem_pio2+0x708>
   11eb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   11eb6:	4619      	mov	r1, r3
   11eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11eba:	e9c3 0100 	strd	r0, r1, [r3]
   11ebe:	9b06      	ldr	r3, [sp, #24]
   11ec0:	f003 0007 	and.w	r0, r3, #7
   11ec4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   11ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ecc:	f1bb 0f00 	cmp.w	fp, #0
   11ed0:	f108 0801 	add.w	r8, r8, #1
   11ed4:	f04f 0502 	mov.w	r5, #2
   11ed8:	f73f ad69 	bgt.w	119ae <__kernel_rem_pio2+0x1fe>
   11edc:	4632      	mov	r2, r6
   11ede:	463b      	mov	r3, r7
   11ee0:	2000      	movs	r0, #0
   11ee2:	493f      	ldr	r1, [pc, #252]	; (11fe0 <__kernel_rem_pio2+0x830>)
   11ee4:	f7fa f934 	bl	c150 <__aeabi_dsub>
   11ee8:	4606      	mov	r6, r0
   11eea:	460f      	mov	r7, r1
   11eec:	e586      	b.n	119fc <__kernel_rem_pio2+0x24c>
   11eee:	2600      	movs	r6, #0
   11ef0:	2700      	movs	r7, #0
   11ef2:	e6cc      	b.n	11c8e <__kernel_rem_pio2+0x4de>
   11ef4:	2400      	movs	r4, #0
   11ef6:	e56c      	b.n	119d2 <__kernel_rem_pio2+0x222>
   11ef8:	9c05      	ldr	r4, [sp, #20]
   11efa:	ec47 6b10 	vmov	d0, r6, r7
   11efe:	4260      	negs	r0, r4
   11f00:	e9cd 8506 	strd	r8, r5, [sp, #24]
   11f04:	f000 f940 	bl	12188 <scalbn>
   11f08:	2200      	movs	r2, #0
   11f0a:	ee10 0a10 	vmov	r0, s0
   11f0e:	4b35      	ldr	r3, [pc, #212]	; (11fe4 <__kernel_rem_pio2+0x834>)
   11f10:	ec57 6b10 	vmov	r6, r7, d0
   11f14:	4639      	mov	r1, r7
   11f16:	f7fa fd59 	bl	c9cc <__aeabi_dcmpge>
   11f1a:	b300      	cbz	r0, 11f5e <__kernel_rem_pio2+0x7ae>
   11f1c:	3418      	adds	r4, #24
   11f1e:	2200      	movs	r2, #0
   11f20:	4b31      	ldr	r3, [pc, #196]	; (11fe8 <__kernel_rem_pio2+0x838>)
   11f22:	4630      	mov	r0, r6
   11f24:	4639      	mov	r1, r7
   11f26:	9405      	str	r4, [sp, #20]
   11f28:	f7fa faca 	bl	c4c0 <__aeabi_dmul>
   11f2c:	f10b 0901 	add.w	r9, fp, #1
   11f30:	f7fa fd60 	bl	c9f4 <__aeabi_d2iz>
   11f34:	4604      	mov	r4, r0
   11f36:	f7fa fa59 	bl	c3ec <__aeabi_i2d>
   11f3a:	2200      	movs	r2, #0
   11f3c:	4b29      	ldr	r3, [pc, #164]	; (11fe4 <__kernel_rem_pio2+0x834>)
   11f3e:	f7fa fabf 	bl	c4c0 <__aeabi_dmul>
   11f42:	460b      	mov	r3, r1
   11f44:	4602      	mov	r2, r0
   11f46:	4639      	mov	r1, r7
   11f48:	4630      	mov	r0, r6
   11f4a:	f7fa f901 	bl	c150 <__aeabi_dsub>
   11f4e:	f7fa fd51 	bl	c9f4 <__aeabi_d2iz>
   11f52:	ab0c      	add	r3, sp, #48	; 0x30
   11f54:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
   11f58:	f843 4029 	str.w	r4, [r3, r9, lsl #2]
   11f5c:	e639      	b.n	11bd2 <__kernel_rem_pio2+0x422>
   11f5e:	4630      	mov	r0, r6
   11f60:	4639      	mov	r1, r7
   11f62:	f7fa fd47 	bl	c9f4 <__aeabi_d2iz>
   11f66:	ab0c      	add	r3, sp, #48	; 0x30
   11f68:	46d9      	mov	r9, fp
   11f6a:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
   11f6e:	e630      	b.n	11bd2 <__kernel_rem_pio2+0x422>
   11f70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   11f74:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   11f76:	4602      	mov	r2, r0
   11f78:	e9c4 0300 	strd	r0, r3, [r4]
   11f7c:	460b      	mov	r3, r1
   11f7e:	9903      	ldr	r1, [sp, #12]
   11f80:	e9d1 0100 	ldrd	r0, r1, [r1]
   11f84:	f7fa f8e4 	bl	c150 <__aeabi_dsub>
   11f88:	f1b9 0f00 	cmp.w	r9, #0
   11f8c:	f73f aea8 	bgt.w	11ce0 <__kernel_rem_pio2+0x530>
   11f90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   11f94:	4619      	mov	r1, r3
   11f96:	e6b0      	b.n	11cfa <__kernel_rem_pio2+0x54a>
   11f98:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   11f9a:	e9c6 2300 	strd	r2, r3, [r6]
   11f9e:	9b06      	ldr	r3, [sp, #24]
   11fa0:	e9c6 0104 	strd	r0, r1, [r6, #16]
   11fa4:	f003 0007 	and.w	r0, r3, #7
   11fa8:	e9c6 4502 	strd	r4, r5, [r6, #8]
   11fac:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   11fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fb4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   11fb6:	2b03      	cmp	r3, #3
   11fb8:	f63f aea2 	bhi.w	11d00 <__kernel_rem_pio2+0x550>
   11fbc:	a201      	add	r2, pc, #4	; (adr r2, 11fc4 <__kernel_rem_pio2+0x814>)
   11fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11fc2:	bf00      	nop
   11fc4:	00011fd5 	.word	0x00011fd5
   11fc8:	00011e69 	.word	0x00011e69
   11fcc:	00011e69 	.word	0x00011e69
   11fd0:	00011d25 	.word	0x00011d25
   11fd4:	2000      	movs	r0, #0
   11fd6:	2100      	movs	r1, #0
   11fd8:	e769      	b.n	11eae <__kernel_rem_pio2+0x6fe>
   11fda:	2000      	movs	r0, #0
   11fdc:	2100      	movs	r1, #0
   11fde:	e711      	b.n	11e04 <__kernel_rem_pio2+0x654>
   11fe0:	3ff00000 	.word	0x3ff00000
   11fe4:	41700000 	.word	0x41700000
   11fe8:	3e700000 	.word	0x3e700000
   11fec:	00000000 	.word	0x00000000

00011ff0 <__kernel_sin>:
   11ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ff4:	ec55 4b10 	vmov	r4, r5, d0
   11ff8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   11ffc:	4682      	mov	sl, r0
   11ffe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   12002:	ed2d 8b02 	vpush	{d8}
   12006:	eeb0 8a41 	vmov.f32	s16, s2
   1200a:	eef0 8a61 	vmov.f32	s17, s3
   1200e:	b083      	sub	sp, #12
   12010:	da07      	bge.n	12022 <__kernel_sin+0x32>
   12012:	ee10 0a10 	vmov	r0, s0
   12016:	4629      	mov	r1, r5
   12018:	f7fa fcec 	bl	c9f4 <__aeabi_d2iz>
   1201c:	2800      	cmp	r0, #0
   1201e:	f000 808e 	beq.w	1213e <__kernel_sin+0x14e>
   12022:	4622      	mov	r2, r4
   12024:	462b      	mov	r3, r5
   12026:	4620      	mov	r0, r4
   12028:	4629      	mov	r1, r5
   1202a:	f7fa fa49 	bl	c4c0 <__aeabi_dmul>
   1202e:	4606      	mov	r6, r0
   12030:	460f      	mov	r7, r1
   12032:	4602      	mov	r2, r0
   12034:	460b      	mov	r3, r1
   12036:	4620      	mov	r0, r4
   12038:	4629      	mov	r1, r5
   1203a:	f7fa fa41 	bl	c4c0 <__aeabi_dmul>
   1203e:	4680      	mov	r8, r0
   12040:	4689      	mov	r9, r1
   12042:	4630      	mov	r0, r6
   12044:	4639      	mov	r1, r7
   12046:	a345      	add	r3, pc, #276	; (adr r3, 1215c <__kernel_sin+0x16c>)
   12048:	e9d3 2300 	ldrd	r2, r3, [r3]
   1204c:	f7fa fa38 	bl	c4c0 <__aeabi_dmul>
   12050:	a344      	add	r3, pc, #272	; (adr r3, 12164 <__kernel_sin+0x174>)
   12052:	e9d3 2300 	ldrd	r2, r3, [r3]
   12056:	f7fa f87b 	bl	c150 <__aeabi_dsub>
   1205a:	4632      	mov	r2, r6
   1205c:	463b      	mov	r3, r7
   1205e:	f7fa fa2f 	bl	c4c0 <__aeabi_dmul>
   12062:	a342      	add	r3, pc, #264	; (adr r3, 1216c <__kernel_sin+0x17c>)
   12064:	e9d3 2300 	ldrd	r2, r3, [r3]
   12068:	f7fa f874 	bl	c154 <__adddf3>
   1206c:	4632      	mov	r2, r6
   1206e:	463b      	mov	r3, r7
   12070:	f7fa fa26 	bl	c4c0 <__aeabi_dmul>
   12074:	a33f      	add	r3, pc, #252	; (adr r3, 12174 <__kernel_sin+0x184>)
   12076:	e9d3 2300 	ldrd	r2, r3, [r3]
   1207a:	f7fa f869 	bl	c150 <__aeabi_dsub>
   1207e:	4632      	mov	r2, r6
   12080:	463b      	mov	r3, r7
   12082:	f7fa fa1d 	bl	c4c0 <__aeabi_dmul>
   12086:	a33d      	add	r3, pc, #244	; (adr r3, 1217c <__kernel_sin+0x18c>)
   12088:	e9d3 2300 	ldrd	r2, r3, [r3]
   1208c:	f7fa f862 	bl	c154 <__adddf3>
   12090:	e9cd 0100 	strd	r0, r1, [sp]
   12094:	f1ba 0f00 	cmp.w	sl, #0
   12098:	d037      	beq.n	1210a <__kernel_sin+0x11a>
   1209a:	2200      	movs	r2, #0
   1209c:	4b2e      	ldr	r3, [pc, #184]	; (12158 <__kernel_sin+0x168>)
   1209e:	ec51 0b18 	vmov	r0, r1, d8
   120a2:	f7fa fa0d 	bl	c4c0 <__aeabi_dmul>
   120a6:	4682      	mov	sl, r0
   120a8:	468b      	mov	fp, r1
   120aa:	4640      	mov	r0, r8
   120ac:	4649      	mov	r1, r9
   120ae:	e9dd 2300 	ldrd	r2, r3, [sp]
   120b2:	f7fa fa05 	bl	c4c0 <__aeabi_dmul>
   120b6:	4602      	mov	r2, r0
   120b8:	460b      	mov	r3, r1
   120ba:	4650      	mov	r0, sl
   120bc:	4659      	mov	r1, fp
   120be:	f7fa f847 	bl	c150 <__aeabi_dsub>
   120c2:	4632      	mov	r2, r6
   120c4:	463b      	mov	r3, r7
   120c6:	f7fa f9fb 	bl	c4c0 <__aeabi_dmul>
   120ca:	ec53 2b18 	vmov	r2, r3, d8
   120ce:	f7fa f83f 	bl	c150 <__aeabi_dsub>
   120d2:	4606      	mov	r6, r0
   120d4:	460f      	mov	r7, r1
   120d6:	4640      	mov	r0, r8
   120d8:	4649      	mov	r1, r9
   120da:	a31d      	add	r3, pc, #116	; (adr r3, 12150 <__kernel_sin+0x160>)
   120dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   120e0:	f7fa f9ee 	bl	c4c0 <__aeabi_dmul>
   120e4:	4602      	mov	r2, r0
   120e6:	460b      	mov	r3, r1
   120e8:	4630      	mov	r0, r6
   120ea:	4639      	mov	r1, r7
   120ec:	f7fa f832 	bl	c154 <__adddf3>
   120f0:	4602      	mov	r2, r0
   120f2:	460b      	mov	r3, r1
   120f4:	4620      	mov	r0, r4
   120f6:	4629      	mov	r1, r5
   120f8:	f7fa f82a 	bl	c150 <__aeabi_dsub>
   120fc:	ec41 0b10 	vmov	d0, r0, r1
   12100:	b003      	add	sp, #12
   12102:	ecbd 8b02 	vpop	{d8}
   12106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1210a:	4602      	mov	r2, r0
   1210c:	460b      	mov	r3, r1
   1210e:	4630      	mov	r0, r6
   12110:	4639      	mov	r1, r7
   12112:	f7fa f9d5 	bl	c4c0 <__aeabi_dmul>
   12116:	a30e      	add	r3, pc, #56	; (adr r3, 12150 <__kernel_sin+0x160>)
   12118:	e9d3 2300 	ldrd	r2, r3, [r3]
   1211c:	f7fa f818 	bl	c150 <__aeabi_dsub>
   12120:	4642      	mov	r2, r8
   12122:	464b      	mov	r3, r9
   12124:	f7fa f9cc 	bl	c4c0 <__aeabi_dmul>
   12128:	4622      	mov	r2, r4
   1212a:	462b      	mov	r3, r5
   1212c:	f7fa f812 	bl	c154 <__adddf3>
   12130:	ec41 0b10 	vmov	d0, r0, r1
   12134:	b003      	add	sp, #12
   12136:	ecbd 8b02 	vpop	{d8}
   1213a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1213e:	ec45 4b10 	vmov	d0, r4, r5
   12142:	b003      	add	sp, #12
   12144:	ecbd 8b02 	vpop	{d8}
   12148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1214c:	f3af 8000 	nop.w
   12150:	55555549 	.word	0x55555549
   12154:	3fc55555 	.word	0x3fc55555
   12158:	3fe00000 	.word	0x3fe00000
   1215c:	5acfd57c 	.word	0x5acfd57c
   12160:	3de5d93a 	.word	0x3de5d93a
   12164:	8a2b9ceb 	.word	0x8a2b9ceb
   12168:	3e5ae5e6 	.word	0x3e5ae5e6
   1216c:	57b1fe7d 	.word	0x57b1fe7d
   12170:	3ec71de3 	.word	0x3ec71de3
   12174:	19c161d5 	.word	0x19c161d5
   12178:	3f2a01a0 	.word	0x3f2a01a0
   1217c:	1110f8a6 	.word	0x1110f8a6
   12180:	3f811111 	.word	0x3f811111
   12184:	00000000 	.word	0x00000000

00012188 <scalbn>:
   12188:	b538      	push	{r3, r4, r5, lr}
   1218a:	ec53 2b10 	vmov	r2, r3, d0
   1218e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   12192:	461c      	mov	r4, r3
   12194:	4605      	mov	r5, r0
   12196:	bb19      	cbnz	r1, 121e0 <scalbn+0x58>
   12198:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   1219c:	ee10 1a10 	vmov	r1, s0
   121a0:	4321      	orrs	r1, r4
   121a2:	d01c      	beq.n	121de <scalbn+0x56>
   121a4:	4c38      	ldr	r4, [pc, #224]	; (12288 <scalbn+0x100>)
   121a6:	4619      	mov	r1, r3
   121a8:	2200      	movs	r2, #0
   121aa:	4b38      	ldr	r3, [pc, #224]	; (1228c <scalbn+0x104>)
   121ac:	ee10 0a10 	vmov	r0, s0
   121b0:	f7fa f986 	bl	c4c0 <__aeabi_dmul>
   121b4:	42a5      	cmp	r5, r4
   121b6:	4602      	mov	r2, r0
   121b8:	460b      	mov	r3, r1
   121ba:	db34      	blt.n	12226 <scalbn+0x9e>
   121bc:	460c      	mov	r4, r1
   121be:	f3c1 510a 	ubfx	r1, r1, #20, #11
   121c2:	3936      	subs	r1, #54	; 0x36
   121c4:	4429      	add	r1, r5
   121c6:	f240 70fe 	movw	r0, #2046	; 0x7fe
   121ca:	4281      	cmp	r1, r0
   121cc:	dc33      	bgt.n	12236 <scalbn+0xae>
   121ce:	2900      	cmp	r1, #0
   121d0:	dd12      	ble.n	121f8 <scalbn+0x70>
   121d2:	482f      	ldr	r0, [pc, #188]	; (12290 <scalbn+0x108>)
   121d4:	4020      	ands	r0, r4
   121d6:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   121da:	ec43 2b10 	vmov	d0, r2, r3
   121de:	bd38      	pop	{r3, r4, r5, pc}
   121e0:	f240 70ff 	movw	r0, #2047	; 0x7ff
   121e4:	4281      	cmp	r1, r0
   121e6:	d1ed      	bne.n	121c4 <scalbn+0x3c>
   121e8:	ee10 0a10 	vmov	r0, s0
   121ec:	4619      	mov	r1, r3
   121ee:	f7f9 ffb1 	bl	c154 <__adddf3>
   121f2:	ec41 0b10 	vmov	d0, r0, r1
   121f6:	bd38      	pop	{r3, r4, r5, pc}
   121f8:	f111 0f35 	cmn.w	r1, #53	; 0x35
   121fc:	da1e      	bge.n	1223c <scalbn+0xb4>
   121fe:	f24c 3150 	movw	r1, #50000	; 0xc350
   12202:	428d      	cmp	r5, r1
   12204:	ec43 2b11 	vmov	d1, r2, r3
   12208:	dd26      	ble.n	12258 <scalbn+0xd0>
   1220a:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 12278 <scalbn+0xf0>
   1220e:	f01b ff09 	bl	2e024 <copysign>
   12212:	a319      	add	r3, pc, #100	; (adr r3, 12278 <scalbn+0xf0>)
   12214:	e9d3 2300 	ldrd	r2, r3, [r3]
   12218:	ec51 0b10 	vmov	r0, r1, d0
   1221c:	f7fa f950 	bl	c4c0 <__aeabi_dmul>
   12220:	ec41 0b10 	vmov	d0, r0, r1
   12224:	bd38      	pop	{r3, r4, r5, pc}
   12226:	a316      	add	r3, pc, #88	; (adr r3, 12280 <scalbn+0xf8>)
   12228:	e9d3 2300 	ldrd	r2, r3, [r3]
   1222c:	f7fa f948 	bl	c4c0 <__aeabi_dmul>
   12230:	ec41 0b10 	vmov	d0, r0, r1
   12234:	bd38      	pop	{r3, r4, r5, pc}
   12236:	ec43 2b11 	vmov	d1, r2, r3
   1223a:	e7e6      	b.n	1220a <scalbn+0x82>
   1223c:	4814      	ldr	r0, [pc, #80]	; (12290 <scalbn+0x108>)
   1223e:	3136      	adds	r1, #54	; 0x36
   12240:	4020      	ands	r0, r4
   12242:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   12246:	4610      	mov	r0, r2
   12248:	2200      	movs	r2, #0
   1224a:	4619      	mov	r1, r3
   1224c:	4b11      	ldr	r3, [pc, #68]	; (12294 <scalbn+0x10c>)
   1224e:	f7fa f937 	bl	c4c0 <__aeabi_dmul>
   12252:	ec41 0b10 	vmov	d0, r0, r1
   12256:	bd38      	pop	{r3, r4, r5, pc}
   12258:	ed9f 0b09 	vldr	d0, [pc, #36]	; 12280 <scalbn+0xf8>
   1225c:	f01b fee2 	bl	2e024 <copysign>
   12260:	a307      	add	r3, pc, #28	; (adr r3, 12280 <scalbn+0xf8>)
   12262:	e9d3 2300 	ldrd	r2, r3, [r3]
   12266:	ec51 0b10 	vmov	r0, r1, d0
   1226a:	f7fa f929 	bl	c4c0 <__aeabi_dmul>
   1226e:	ec41 0b10 	vmov	d0, r0, r1
   12272:	bd38      	pop	{r3, r4, r5, pc}
   12274:	f3af 8000 	nop.w
   12278:	8800759c 	.word	0x8800759c
   1227c:	7e37e43c 	.word	0x7e37e43c
   12280:	c2f8f359 	.word	0xc2f8f359
   12284:	01a56e1f 	.word	0x01a56e1f
   12288:	ffff3cb0 	.word	0xffff3cb0
   1228c:	43500000 	.word	0x43500000
   12290:	800fffff 	.word	0x800fffff
   12294:	3c900000 	.word	0x3c900000

00012298 <k_work_submit>:
 *
 * @return N/A
 * @req K-WORK-001
 */
static inline void k_work_submit(struct k_work *work)
{
   12298:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1229a:	f100 0308 	add.w	r3, r0, #8
   1229e:	e8d3 2fef 	ldaex	r2, [r3]
   122a2:	f042 0001 	orr.w	r0, r2, #1
   122a6:	e8c3 0fec 	stlex	ip, r0, [r3]
   122aa:	f1bc 0f00 	cmp.w	ip, #0
   122ae:	d1f6      	bne.n	1229e <k_work_submit+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   122b0:	07d3      	lsls	r3, r2, #31
   122b2:	d402      	bmi.n	122ba <k_work_submit+0x22>
		k_queue_append(&work_q->queue, work);
   122b4:	4801      	ldr	r0, [pc, #4]	; (122bc <k_work_submit+0x24>)
   122b6:	f01e badd 	b.w	30874 <k_queue_append>
	k_work_submit_to_queue(&k_sys_work_q, work);
}
   122ba:	4770      	bx	lr
   122bc:	20027778 	.word	0x20027778

000122c0 <modem_rsrp_handler>:
	rsrp.value = rsrp_value;
   122c0:	4b02      	ldr	r3, [pc, #8]	; (122cc <modem_rsrp_handler+0xc>)
   122c2:	8018      	strh	r0, [r3, #0]
	k_work_submit(&rsrp_work);
   122c4:	4802      	ldr	r0, [pc, #8]	; (122d0 <modem_rsrp_handler+0x10>)
   122c6:	f7ff bfe7 	b.w	12298 <k_work_submit>
   122ca:	bf00      	nop
   122cc:	2002de08 	.word	0x2002de08
   122d0:	20020930 	.word	0x20020930

000122d4 <flip_send>:
{
   122d4:	b538      	push	{r3, r4, r5, lr}
   122d6:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   122d8:	4b14      	ldr	r3, [pc, #80]	; (1232c <flip_send+0x58>)
   122da:	e8d3 3faf 	lda	r3, [r3]
	if (!flip_mode_enabled || !atomic_get(&send_data_enable)) {
   122de:	b16b      	cbz	r3, 122fc <flip_send+0x28>
	if (orientation_detector_poll(&sensor_data) == 0) {
   122e0:	4c13      	ldr	r4, [pc, #76]	; (12330 <flip_send+0x5c>)
   122e2:	4620      	mov	r0, r4
   122e4:	f7fb fe54 	bl	df90 <orientation_detector_poll>
   122e8:	b940      	cbnz	r0, 122fc <flip_send+0x28>
		if (sensor_data.orientation == last_orientation_state) {
   122ea:	4b12      	ldr	r3, [pc, #72]	; (12334 <flip_send+0x60>)
   122ec:	7e22      	ldrb	r2, [r4, #24]
   122ee:	7819      	ldrb	r1, [r3, #0]
   122f0:	4291      	cmp	r1, r2
   122f2:	d003      	beq.n	122fc <flip_send+0x28>
		switch (sensor_data.orientation) {
   122f4:	2a01      	cmp	r2, #1
   122f6:	d009      	beq.n	1230c <flip_send+0x38>
   122f8:	2a02      	cmp	r2, #2
   122fa:	d011      	beq.n	12320 <flip_send+0x4c>
	if (work) {
   122fc:	b1ad      	cbz	r5, 1232a <flip_send+0x56>
}
   122fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   12302:	2200      	movs	r2, #0
   12304:	490c      	ldr	r1, [pc, #48]	; (12338 <flip_send+0x64>)
   12306:	480d      	ldr	r0, [pc, #52]	; (1233c <flip_send+0x68>)
   12308:	f016 bda2 	b.w	28e50 <k_delayed_work_submit_to_queue>
			flip_cloud_data.data.ptr = "NORMAL";
   1230c:	480c      	ldr	r0, [pc, #48]	; (12340 <flip_send+0x6c>)
   1230e:	490d      	ldr	r1, [pc, #52]	; (12344 <flip_send+0x70>)
   12310:	6088      	str	r0, [r1, #8]
			flip_cloud_data.data.len = sizeof("NORMAL") - 1;
   12312:	2006      	movs	r0, #6
			flip_cloud_data.data.len = sizeof("UPSIDE_DOWN") - 1;
   12314:	6048      	str	r0, [r1, #4]
		k_work_submit(&send_flip_data_work);
   12316:	480c      	ldr	r0, [pc, #48]	; (12348 <flip_send+0x74>)
		last_orientation_state = sensor_data.orientation;
   12318:	701a      	strb	r2, [r3, #0]
		k_work_submit(&send_flip_data_work);
   1231a:	f7ff ffbd 	bl	12298 <k_work_submit>
   1231e:	e7ed      	b.n	122fc <flip_send+0x28>
			flip_cloud_data.data.ptr = "UPSIDE_DOWN";
   12320:	480a      	ldr	r0, [pc, #40]	; (1234c <flip_send+0x78>)
   12322:	4908      	ldr	r1, [pc, #32]	; (12344 <flip_send+0x70>)
   12324:	6088      	str	r0, [r1, #8]
			flip_cloud_data.data.len = sizeof("UPSIDE_DOWN") - 1;
   12326:	200b      	movs	r0, #11
   12328:	e7f4      	b.n	12314 <flip_send+0x40>
}
   1232a:	bd38      	pop	{r3, r4, r5, pc}
   1232c:	20020948 	.word	0x20020948
   12330:	20020000 	.word	0x20020000
   12334:	20027892 	.word	0x20027892
   12338:	200208c0 	.word	0x200208c0
   1233c:	20027778 	.word	0x20027778
   12340:	0003438a 	.word	0x0003438a
   12344:	200208b0 	.word	0x200208b0
   12348:	2002094c 	.word	0x2002094c
   1234c:	00034391 	.word	0x00034391

00012350 <leds_update>:
{
	static bool led_on;
	static u8_t current_led_on_mask;
	u8_t led_on_mask;

	led_on_mask = LED_GET_ON(display_state);
   12350:	4b11      	ldr	r3, [pc, #68]	; (12398 <leds_update+0x48>)
{
   12352:	b570      	push	{r4, r5, r6, lr}
	led_on_mask = LED_GET_ON(display_state);
   12354:	881c      	ldrh	r4, [r3, #0]
	led_on = !led_on;
   12356:	4b11      	ldr	r3, [pc, #68]	; (1239c <leds_update+0x4c>)
{
   12358:	4606      	mov	r6, r0
	led_on = !led_on;
   1235a:	781a      	ldrb	r2, [r3, #0]
   1235c:	f082 0201 	eor.w	r2, r2, #1
   12360:	701a      	strb	r2, [r3, #0]
   12362:	f344 2307 	sbfx	r3, r4, #8, #8
   12366:	b264      	sxtb	r4, r4

	if (led_on) {
   12368:	b192      	cbz	r2, 12390 <leds_update+0x40>
		led_on_mask |= LED_GET_BLINK(display_state);
   1236a:	431c      	orrs	r4, r3
	} else {
		led_on_mask &= ~LED_GET_BLINK(display_state);
	}

	if (led_on_mask != current_led_on_mask) {
   1236c:	4d0c      	ldr	r5, [pc, #48]	; (123a0 <leds_update+0x50>)
		led_on_mask &= ~LED_GET_BLINK(display_state);
   1236e:	b2e4      	uxtb	r4, r4
	if (led_on_mask != current_led_on_mask) {
   12370:	782b      	ldrb	r3, [r5, #0]
   12372:	42a3      	cmp	r3, r4
   12374:	d003      	beq.n	1237e <leds_update+0x2e>
#if defined(CONFIG_DK_LIBRARY)
		dk_set_leds(led_on_mask);
   12376:	4620      	mov	r0, r4
   12378:	f01d f92d 	bl	2f5d6 <dk_set_leds>
#endif
		current_led_on_mask = led_on_mask;
   1237c:	702c      	strb	r4, [r5, #0]
	}

	if (work) {
   1237e:	b156      	cbz	r6, 12396 <leds_update+0x46>
		} else {
			k_delayed_work_submit(&leds_update_work,
						LEDS_OFF_INTERVAL);
		}
	}
}
   12380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12384:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   12388:	4906      	ldr	r1, [pc, #24]	; (123a4 <leds_update+0x54>)
   1238a:	4807      	ldr	r0, [pc, #28]	; (123a8 <leds_update+0x58>)
   1238c:	f016 bd60 	b.w	28e50 <k_delayed_work_submit_to_queue>
		led_on_mask &= ~LED_GET_BLINK(display_state);
   12390:	ea24 0403 	bic.w	r4, r4, r3
   12394:	e7ea      	b.n	1236c <leds_update+0x1c>
}
   12396:	bd70      	pop	{r4, r5, r6, pc}
   12398:	20027884 	.word	0x20027884
   1239c:	20027893 	.word	0x20027893
   123a0:	20027891 	.word	0x20027891
   123a4:	200208f0 	.word	0x200208f0
   123a8:	20027778 	.word	0x20027778

000123ac <accelerometer_calibrate>:
	}
}
#endif /* defined(CONFIG_DK_LIBRARY) */

static void accelerometer_calibrate(struct k_work *work)
{
   123ac:	b538      	push	{r3, r4, r5, lr}
	int err;
	u32_t prev_display_state = display_state;
   123ae:	4c0b      	ldr	r4, [pc, #44]	; (123dc <accelerometer_calibrate+0x30>)

	printk("Starting accelerometer calibration...\n");
   123b0:	480b      	ldr	r0, [pc, #44]	; (123e0 <accelerometer_calibrate+0x34>)
	u32_t prev_display_state = display_state;
   123b2:	8825      	ldrh	r5, [r4, #0]
	printk("Starting accelerometer calibration...\n");
   123b4:	f01c f93d 	bl	2e632 <printk>
	display_state = LEDS_CALIBRATING;
   123b8:	2305      	movs	r3, #5
	leds_update(NULL);
   123ba:	2000      	movs	r0, #0
	display_state = LEDS_CALIBRATING;
   123bc:	8023      	strh	r3, [r4, #0]
	leds_update(NULL);
   123be:	f7ff ffc7 	bl	12350 <leds_update>

	err = orientation_detector_calibrate();
   123c2:	f000 fc5b 	bl	12c7c <orientation_detector_calibrate>
	if (err) {
   123c6:	4601      	mov	r1, r0
   123c8:	b120      	cbz	r0, 123d4 <accelerometer_calibrate+0x28>
		printk("Accelerometer calibration failed: %d\n",
   123ca:	4806      	ldr	r0, [pc, #24]	; (123e4 <accelerometer_calibrate+0x38>)
   123cc:	f01c f931 	bl	2e632 <printk>
			err);
	} else {
		printk("Accelerometer calibration done.\n");
	}

	display_state = prev_display_state;
   123d0:	8025      	strh	r5, [r4, #0]
}
   123d2:	bd38      	pop	{r3, r4, r5, pc}
		printk("Accelerometer calibration done.\n");
   123d4:	4804      	ldr	r0, [pc, #16]	; (123e8 <accelerometer_calibrate+0x3c>)
   123d6:	f01c f92c 	bl	2e632 <printk>
   123da:	e7f9      	b.n	123d0 <accelerometer_calibrate+0x24>
   123dc:	20027884 	.word	0x20027884
   123e0:	000340c8 	.word	0x000340c8
   123e4:	000340ef 	.word	0x000340ef
   123e8:	00034115 	.word	0x00034115

000123ec <button_handler>:

#if defined(CONFIG_DK_LIBRARY)
/**@brief Callback for button events from the DK buttons and LEDs library. */
static void button_handler(u32_t buttons, u32_t has_changed)
{
   123ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static bool long_press_active;

	if (pattern_recording && IS_ENABLED(CONFIG_CLOUD_UA_BUTTONS)) {
   123ee:	4b35      	ldr	r3, [pc, #212]	; (124c4 <button_handler+0xd8>)
{
   123f0:	4607      	mov	r7, r0
	if (pattern_recording && IS_ENABLED(CONFIG_CLOUD_UA_BUTTONS)) {
   123f2:	7818      	ldrb	r0, [r3, #0]
{
   123f4:	460d      	mov	r5, r1
	if (pattern_recording && IS_ENABLED(CONFIG_CLOUD_UA_BUTTONS)) {
   123f6:	2800      	cmp	r0, #0
   123f8:	d041      	beq.n	1247e <button_handler+0x92>
	if (buttons_captured < buttons_to_capture) {
   123fa:	4c33      	ldr	r4, [pc, #204]	; (124c8 <button_handler+0xdc>)
   123fc:	4e33      	ldr	r6, [pc, #204]	; (124cc <button_handler+0xe0>)
   123fe:	6823      	ldr	r3, [r4, #0]
   12400:	6831      	ldr	r1, [r6, #0]
   12402:	428b      	cmp	r3, r1
   12404:	da13      	bge.n	1242e <button_handler+0x42>
		if (display_state == LEDS_PATTERN_WAIT)	{
   12406:	4a32      	ldr	r2, [pc, #200]	; (124d0 <button_handler+0xe4>)
		if (button_state & has_changed & BUTTON_1) {
   12408:	ea05 0007 	and.w	r0, r5, r7
		if (display_state == LEDS_PATTERN_WAIT)	{
   1240c:	8811      	ldrh	r1, [r2, #0]
   1240e:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
			display_state = LEDS_PATTERN_ENTRY;
   12412:	bf04      	itt	eq
   12414:	f640 0104 	movweq	r1, #2052	; 0x804
   12418:	8011      	strheq	r1, [r2, #0]
		if (button_state & has_changed & BUTTON_1) {
   1241a:	07c2      	lsls	r2, r0, #31
   1241c:	d514      	bpl.n	12448 <button_handler+0x5c>
			ua_pattern[buttons_captured++] =
   1241e:	2103      	movs	r1, #3
   12420:	1c5a      	adds	r2, r3, #1
   12422:	6022      	str	r2, [r4, #0]
   12424:	4a2b      	ldr	r2, [pc, #172]	; (124d4 <button_handler+0xe8>)
			printk("Button 1\n");
   12426:	482c      	ldr	r0, [pc, #176]	; (124d8 <button_handler+0xec>)
			ua_pattern[buttons_captured++] =
   12428:	54d1      	strb	r1, [r2, r3]
			printk("Switch 2\n");
   1242a:	f01c f902 	bl	2e632 <printk>
	if (buttons_captured == buttons_to_capture) {
   1242e:	6822      	ldr	r2, [r4, #0]
   12430:	6833      	ldr	r3, [r6, #0]
   12432:	429a      	cmp	r2, r3
   12434:	d144      	bne.n	124c0 <button_handler+0xd4>
		display_state = LEDS_PATTERN_DONE;
   12436:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1243a:	4b25      	ldr	r3, [pc, #148]	; (124d0 <button_handler+0xe4>)

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1243c:	4827      	ldr	r0, [pc, #156]	; (124dc <button_handler+0xf0>)
   1243e:	801a      	strh	r2, [r3, #0]
				error_handler(ERROR_LTE_LC, err);
			}
		}
	}
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */
}
   12440:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12444:	f016 ba3e 	b.w	288c4 <z_impl_k_sem_give>
		} else if (button_state & has_changed & BUTTON_2) {
   12448:	0787      	lsls	r7, r0, #30
   1244a:	d506      	bpl.n	1245a <button_handler+0x6e>
			ua_pattern[buttons_captured++] =
   1244c:	2104      	movs	r1, #4
   1244e:	1c5a      	adds	r2, r3, #1
   12450:	6022      	str	r2, [r4, #0]
   12452:	4a20      	ldr	r2, [pc, #128]	; (124d4 <button_handler+0xe8>)
			printk("Button 2\n");
   12454:	4822      	ldr	r0, [pc, #136]	; (124e0 <button_handler+0xf4>)
			ua_pattern[buttons_captured++] =
   12456:	54d1      	strb	r1, [r2, r3]
   12458:	e7e7      	b.n	1242a <button_handler+0x3e>
		} else if (has_changed & SWITCH_1) {
   1245a:	0768      	lsls	r0, r5, #29
   1245c:	d506      	bpl.n	1246c <button_handler+0x80>
			ua_pattern[buttons_captured++] =
   1245e:	2101      	movs	r1, #1
   12460:	1c5a      	adds	r2, r3, #1
   12462:	6022      	str	r2, [r4, #0]
   12464:	4a1b      	ldr	r2, [pc, #108]	; (124d4 <button_handler+0xe8>)
			printk("Switch 1\n");
   12466:	481f      	ldr	r0, [pc, #124]	; (124e4 <button_handler+0xf8>)
			ua_pattern[buttons_captured++] =
   12468:	54d1      	strb	r1, [r2, r3]
   1246a:	e7de      	b.n	1242a <button_handler+0x3e>
		} else if (has_changed & SWITCH_2) {
   1246c:	0729      	lsls	r1, r5, #28
   1246e:	d527      	bpl.n	124c0 <button_handler+0xd4>
			ua_pattern[buttons_captured++] =
   12470:	2102      	movs	r1, #2
   12472:	1c5a      	adds	r2, r3, #1
   12474:	6022      	str	r2, [r4, #0]
   12476:	4a17      	ldr	r2, [pc, #92]	; (124d4 <button_handler+0xe8>)
			printk("Switch 2\n");
   12478:	481b      	ldr	r0, [pc, #108]	; (124e8 <button_handler+0xfc>)
			ua_pattern[buttons_captured++] =
   1247a:	54d1      	strb	r1, [r2, r3]
   1247c:	e7d5      	b.n	1242a <button_handler+0x3e>
	if (IS_ENABLED(CONFIG_ACCEL_USE_SIM) && (has_changed & FLIP_INPUT)) {
   1247e:	074a      	lsls	r2, r1, #29
   12480:	d501      	bpl.n	12486 <button_handler+0x9a>
		flip_send(NULL);
   12482:	f7ff ff27 	bl	122d4 <flip_send>
	if (IS_ENABLED(CONFIG_CLOUD_BUTTON) &&
   12486:	07eb      	lsls	r3, r5, #31
   12488:	d51a      	bpl.n	124c0 <button_handler+0xd4>
   1248a:	4b18      	ldr	r3, [pc, #96]	; (124ec <button_handler+0x100>)
   1248c:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_get(&send_data_enable)) {
   12490:	b1b3      	cbz	r3, 124c0 <button_handler+0xd4>
	if (pressed) {
   12492:	f017 0f01 	tst.w	r7, #1
		data[0] = '1';
   12496:	bf14      	ite	ne
   12498:	2231      	movne	r2, #49	; 0x31
		data[0] = '0';
   1249a:	2230      	moveq	r2, #48	; 0x30
	button_cloud_data.data.ptr = &data;
   1249c:	4c14      	ldr	r4, [pc, #80]	; (124f0 <button_handler+0x104>)
   1249e:	4b15      	ldr	r3, [pc, #84]	; (124f4 <button_handler+0x108>)
	button_cloud_data.data.len = strlen(data);
   124a0:	4814      	ldr	r0, [pc, #80]	; (124f4 <button_handler+0x108>)
	button_cloud_data.data.ptr = &data;
   124a2:	60a3      	str	r3, [r4, #8]
		data[0] = '0';
   124a4:	701a      	strb	r2, [r3, #0]
	button_cloud_data.data.len = strlen(data);
   124a6:	f018 fc09 	bl	2acbc <strlen>
	button_cloud_data.tag += 1;
   124aa:	68e3      	ldr	r3, [r4, #12]
	button_cloud_data.data.len = strlen(data);
   124ac:	6060      	str	r0, [r4, #4]
	if (button_cloud_data.tag == 0) {
   124ae:	3301      	adds	r3, #1
		button_cloud_data.tag = 0x1;
   124b0:	bf08      	it	eq
   124b2:	2301      	moveq	r3, #1
	k_work_submit(&send_button_data_work);
   124b4:	4810      	ldr	r0, [pc, #64]	; (124f8 <button_handler+0x10c>)
		button_cloud_data.tag = 0x1;
   124b6:	60e3      	str	r3, [r4, #12]
}
   124b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_submit(&send_button_data_work);
   124bc:	f7ff beec 	b.w	12298 <k_work_submit>
}
   124c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   124c2:	bf00      	nop
   124c4:	200278e6 	.word	0x200278e6
   124c8:	20020850 	.word	0x20020850
   124cc:	20020854 	.word	0x20020854
   124d0:	20027884 	.word	0x20027884
   124d4:	200278e7 	.word	0x200278e7
   124d8:	0003413e 	.word	0x0003413e
   124dc:	20020978 	.word	0x20020978
   124e0:	00034148 	.word	0x00034148
   124e4:	00034152 	.word	0x00034152
   124e8:	0003415c 	.word	0x0003415c
   124ec:	20020948 	.word	0x20020948
   124f0:	20020840 	.word	0x20020840
   124f4:	2002de0c 	.word	0x2002de0c
   124f8:	2002093c 	.word	0x2002093c

000124fc <gps_trigger_handler>:
{
   124fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   124fe:	4604      	mov	r4, r0
	dk_read_buttons(&button_state, &has_changed);
   12500:	a901      	add	r1, sp, #4
   12502:	4668      	mov	r0, sp
   12504:	f003 fea4 	bl	16250 <dk_read_buttons>
	if (!(button_state & SWITCH_2) && atomic_get(&send_data_enable)) {
   12508:	9900      	ldr	r1, [sp, #0]
   1250a:	f011 0508 	ands.w	r5, r1, #8
   1250e:	d11b      	bne.n	12548 <gps_trigger_handler+0x4c>
   12510:	4b0e      	ldr	r3, [pc, #56]	; (1254c <gps_trigger_handler+0x50>)
   12512:	e8d3 3faf 	lda	r3, [r3]
   12516:	b1bb      	cbz	r3, 12548 <gps_trigger_handler+0x4c>
static inline int gps_sample_fetch(struct device *dev)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->sample_fetch(dev);
   12518:	6863      	ldr	r3, [r4, #4]
   1251a:	4620      	mov	r0, r4
   1251c:	685b      	ldr	r3, [r3, #4]
   1251e:	4798      	blx	r3
				  struct gps_data *data)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->channel_get(dev, chan, data);
   12520:	4e0b      	ldr	r6, [pc, #44]	; (12550 <gps_trigger_handler+0x54>)
   12522:	6863      	ldr	r3, [r4, #4]
   12524:	4632      	mov	r2, r6
   12526:	689b      	ldr	r3, [r3, #8]
   12528:	4629      	mov	r1, r5
   1252a:	4620      	mov	r0, r4
   1252c:	4798      	blx	r3
		gps_cloud_data.data.ptr = nmea_data.str;
   1252e:	4b09      	ldr	r3, [pc, #36]	; (12554 <gps_trigger_handler+0x58>)
		gps_cloud_data.data.len = nmea_data.len;
   12530:	f896 2051 	ldrb.w	r2, [r6, #81]	; 0x51
		k_work_submit(&send_gps_data_work);
   12534:	4808      	ldr	r0, [pc, #32]	; (12558 <gps_trigger_handler+0x5c>)
		gps_cloud_data.data.len = nmea_data.len;
   12536:	605a      	str	r2, [r3, #4]
		gps_cloud_data.tag += 1;
   12538:	68da      	ldr	r2, [r3, #12]
		gps_cloud_data.data.ptr = nmea_data.str;
   1253a:	609e      	str	r6, [r3, #8]
		if (gps_cloud_data.tag == 0) {
   1253c:	3201      	adds	r2, #1
			gps_cloud_data.tag = 0x1;
   1253e:	bf08      	it	eq
   12540:	2201      	moveq	r2, #1
   12542:	60da      	str	r2, [r3, #12]
		k_work_submit(&send_gps_data_work);
   12544:	f7ff fea8 	bl	12298 <k_work_submit>
}
   12548:	b002      	add	sp, #8
   1254a:	bd70      	pop	{r4, r5, r6, pc}
   1254c:	20020948 	.word	0x20020948
   12550:	20027894 	.word	0x20027894
   12554:	200208e0 	.word	0x200208e0
   12558:	20020958 	.word	0x20020958

0001255c <error_handler>:
{
   1255c:	b508      	push	{r3, lr}
	if (err_type == ERROR_NRF_CLOUD) {
   1255e:	b950      	cbnz	r0, 12576 <error_handler+0x1a>
		k_sched_lock();
   12560:	f015 fa2a 	bl	279b8 <k_sched_lock>
		int err = lte_lc_power_off();
   12564:	f006 f994 	bl	18890 <lte_lc_power_off>
		if (err) {
   12568:	4601      	mov	r1, r0
   1256a:	b110      	cbz	r0, 12572 <error_handler+0x16>
			printk("Could not shut down the LTE link, error: %d\n",
   1256c:	4804      	ldr	r0, [pc, #16]	; (12580 <error_handler+0x24>)
   1256e:	f01c f860 	bl	2e632 <printk>
		bsdlib_shutdown();
   12572:	f01c fbba 	bl	2ecea <bsdlib_shutdown>
}
   12576:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_reboot(SYS_REBOOT_COLD);
   1257a:	2001      	movs	r0, #1
   1257c:	f000 bdfa 	b.w	13174 <sys_reboot>
   12580:	0003435d 	.word	0x0003435d

00012584 <sensor_data_send>:
	if (pattern_recording || !atomic_get(&send_data_enable)) {
   12584:	4a0d      	ldr	r2, [pc, #52]	; (125bc <sensor_data_send+0x38>)
{
   12586:	b510      	push	{r4, lr}
	if (pattern_recording || !atomic_get(&send_data_enable)) {
   12588:	7812      	ldrb	r2, [r2, #0]
   1258a:	b9aa      	cbnz	r2, 125b8 <sensor_data_send+0x34>
   1258c:	4a0c      	ldr	r2, [pc, #48]	; (125c0 <sensor_data_send+0x3c>)
   1258e:	e8d2 2faf 	lda	r2, [r2]
   12592:	b18a      	cbz	r2, 125b8 <sensor_data_send+0x34>
	if (data->type == NRF_CLOUD_SENSOR_GPS) {
   12594:	7803      	ldrb	r3, [r0, #0]
   12596:	b963      	cbnz	r3, 125b2 <sensor_data_send+0x2e>
		err = nrf_cloud_sensor_data_send(data);
   12598:	f004 ff4c 	bl	17434 <nrf_cloud_sensor_data_send>
		err = nrf_cloud_sensor_data_stream(data);
   1259c:	4604      	mov	r4, r0
	if (err) {
   1259e:	b158      	cbz	r0, 125b8 <sensor_data_send+0x34>
		printk("sensor_data_send failed: %d\n", err);
   125a0:	4601      	mov	r1, r0
   125a2:	4808      	ldr	r0, [pc, #32]	; (125c4 <sensor_data_send+0x40>)
   125a4:	f01c f845 	bl	2e632 <printk>
		nrf_cloud_error_handler(err);
   125a8:	4620      	mov	r0, r4
}
   125aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		nrf_cloud_error_handler(err);
   125ae:	f01b bd47 	b.w	2e040 <nrf_cloud_error_handler>
		err = nrf_cloud_sensor_data_stream(data);
   125b2:	f004 ff61 	bl	17478 <nrf_cloud_sensor_data_stream>
   125b6:	e7f1      	b.n	1259c <sensor_data_send+0x18>
}
   125b8:	bd10      	pop	{r4, pc}
   125ba:	bf00      	nop
   125bc:	200278e6 	.word	0x200278e6
   125c0:	20020948 	.word	0x20020948
   125c4:	000345f4 	.word	0x000345f4

000125c8 <modem_rsrp_data_send>:
{
   125c8:	b510      	push	{r4, lr}
   125ca:	b0a0      	sub	sp, #128	; 0x80
	char buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   125cc:	2280      	movs	r2, #128	; 0x80
   125ce:	2100      	movs	r1, #0
   125d0:	4668      	mov	r0, sp
   125d2:	f018 f987 	bl	2a8e4 <memset>
   125d6:	4b13      	ldr	r3, [pc, #76]	; (12624 <modem_rsrp_data_send+0x5c>)
   125d8:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_get(&send_data_enable)) {
   125dc:	b303      	cbz	r3, 12620 <modem_rsrp_data_send+0x58>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   125de:	f01e f9eb 	bl	309b8 <z_impl_k_uptime_get_32>
	if (k_uptime_get_32() - timestamp_prev <
   125e2:	4c11      	ldr	r4, [pc, #68]	; (12628 <modem_rsrp_data_send+0x60>)
   125e4:	6822      	ldr	r2, [r4, #0]
   125e6:	1a80      	subs	r0, r0, r2
   125e8:	f64e 225f 	movw	r2, #59999	; 0xea5f
   125ec:	4290      	cmp	r0, r2
   125ee:	d917      	bls.n	12620 <modem_rsrp_data_send+0x58>
	len = snprintf(buf, CONFIG_MODEM_INFO_BUFFER_SIZE,
   125f0:	4a0e      	ldr	r2, [pc, #56]	; (1262c <modem_rsrp_data_send+0x64>)
   125f2:	4668      	mov	r0, sp
   125f4:	8811      	ldrh	r1, [r2, #0]
   125f6:	8853      	ldrh	r3, [r2, #2]
   125f8:	4a0d      	ldr	r2, [pc, #52]	; (12630 <modem_rsrp_data_send+0x68>)
   125fa:	1acb      	subs	r3, r1, r3
   125fc:	2180      	movs	r1, #128	; 0x80
   125fe:	f018 f9ff 	bl	2aa00 <snprintf>
	signal_strength_cloud_data.data.ptr = buf;
   12602:	4b0c      	ldr	r3, [pc, #48]	; (12634 <modem_rsrp_data_send+0x6c>)
	signal_strength_cloud_data.tag += 1;
   12604:	68da      	ldr	r2, [r3, #12]
	signal_strength_cloud_data.data.len = len;
   12606:	6058      	str	r0, [r3, #4]
	if (signal_strength_cloud_data.tag == 0) {
   12608:	3201      	adds	r2, #1
		signal_strength_cloud_data.tag = 0x1;
   1260a:	bf08      	it	eq
   1260c:	2201      	moveq	r2, #1
	sensor_data_send(&signal_strength_cloud_data);
   1260e:	4809      	ldr	r0, [pc, #36]	; (12634 <modem_rsrp_data_send+0x6c>)
	signal_strength_cloud_data.data.ptr = buf;
   12610:	f8c3 d008 	str.w	sp, [r3, #8]
		signal_strength_cloud_data.tag = 0x1;
   12614:	60da      	str	r2, [r3, #12]
	sensor_data_send(&signal_strength_cloud_data);
   12616:	f7ff ffb5 	bl	12584 <sensor_data_send>
   1261a:	f01e f9cd 	bl	309b8 <z_impl_k_uptime_get_32>
	timestamp_prev = k_uptime_get_32();
   1261e:	6020      	str	r0, [r4, #0]
}
   12620:	b020      	add	sp, #128	; 0x80
   12622:	bd10      	pop	{r4, pc}
   12624:	20020948 	.word	0x20020948
   12628:	20020974 	.word	0x20020974
   1262c:	2002de08 	.word	0x2002de08
   12630:	000344b8 	.word	0x000344b8
   12634:	20020964 	.word	0x20020964

00012638 <device_status_send>:
{
   12638:	b500      	push	{lr}
   1263a:	b0c1      	sub	sp, #260	; 0x104
	char data_buffer[MODEM_INFO_JSON_STRING_SIZE] = {0};
   1263c:	f44f 7280 	mov.w	r2, #256	; 0x100
   12640:	2100      	movs	r1, #0
   12642:	4668      	mov	r0, sp
   12644:	f018 f94e 	bl	2a8e4 <memset>
   12648:	4b0b      	ldr	r3, [pc, #44]	; (12678 <device_status_send+0x40>)
   1264a:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_get(&send_data_enable)) {
   1264e:	b183      	cbz	r3, 12672 <device_status_send+0x3a>
	len = modem_info_json_string_get(data_buffer);
   12650:	4668      	mov	r0, sp
   12652:	f004 f95b 	bl	1690c <modem_info_json_string_get>
	if (len < 0) {
   12656:	2800      	cmp	r0, #0
   12658:	db0b      	blt.n	12672 <device_status_send+0x3a>
	device_cloud_data.data.ptr = data_buffer;
   1265a:	4b08      	ldr	r3, [pc, #32]	; (1267c <device_status_send+0x44>)
	device_cloud_data.tag += 1;
   1265c:	68da      	ldr	r2, [r3, #12]
	device_cloud_data.data.len = len;
   1265e:	6058      	str	r0, [r3, #4]
	if (device_cloud_data.tag == 0) {
   12660:	3201      	adds	r2, #1
		device_cloud_data.tag = 0x1;
   12662:	bf08      	it	eq
   12664:	2201      	moveq	r2, #1
	sensor_data_send(&device_cloud_data);
   12666:	4805      	ldr	r0, [pc, #20]	; (1267c <device_status_send+0x44>)
	device_cloud_data.data.ptr = data_buffer;
   12668:	f8c3 d008 	str.w	sp, [r3, #8]
		device_cloud_data.tag = 0x1;
   1266c:	60da      	str	r2, [r3, #12]
	sensor_data_send(&device_cloud_data);
   1266e:	f7ff ff89 	bl	12584 <sensor_data_send>
}
   12672:	b041      	add	sp, #260	; 0x104
   12674:	f85d fb04 	ldr.w	pc, [sp], #4
   12678:	20020948 	.word	0x20020948
   1267c:	20020864 	.word	0x20020864

00012680 <send_flip_data_work_fn>:
	sensor_data_send(&flip_cloud_data);
   12680:	4801      	ldr	r0, [pc, #4]	; (12688 <send_flip_data_work_fn+0x8>)
   12682:	f7ff bf7f 	b.w	12584 <sensor_data_send>
   12686:	bf00      	nop
   12688:	200208b0 	.word	0x200208b0

0001268c <send_button_data_work_fn>:
	sensor_data_send(&button_cloud_data);
   1268c:	4801      	ldr	r0, [pc, #4]	; (12694 <send_button_data_work_fn+0x8>)
   1268e:	f7ff bf79 	b.w	12584 <sensor_data_send>
   12692:	bf00      	nop
   12694:	20020840 	.word	0x20020840

00012698 <send_gps_data_work_fn>:
{
   12698:	b508      	push	{r3, lr}
	sensor_data_send(&gps_cloud_data);
   1269a:	4803      	ldr	r0, [pc, #12]	; (126a8 <send_gps_data_work_fn+0x10>)
   1269c:	f7ff ff72 	bl	12584 <sensor_data_send>
}
   126a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	env_data_send();
   126a4:	f7fb bc04 	b.w	deb0 <env_data_send>
   126a8:	200208e0 	.word	0x200208e0

000126ac <cloud_connect>:
	const enum nrf_cloud_ua supported_uas[] = {
   126ac:	2300      	movs	r3, #0
{
   126ae:	b510      	push	{r4, lr}
   126b0:	b088      	sub	sp, #32
	const enum nrf_cloud_ua supported_uas[] = {
   126b2:	f88d 3004 	strb.w	r3, [sp, #4]
	const struct nrf_cloud_ua_list ua_list = {
   126b6:	2301      	movs	r3, #1
	const struct nrf_cloud_sensor_list sensor_list = {
   126b8:	4a0f      	ldr	r2, [pc, #60]	; (126f8 <cloud_connect+0x4c>)
	const struct nrf_cloud_ua_list ua_list = {
   126ba:	f88d 3008 	strb.w	r3, [sp, #8]
   126be:	ab01      	add	r3, sp, #4
	const struct nrf_cloud_sensor_list sensor_list = {
   126c0:	e892 0003 	ldmia.w	r2, {r0, r1}
	const struct nrf_cloud_ua_list ua_list = {
   126c4:	9303      	str	r3, [sp, #12]
	const struct nrf_cloud_connect_param param = {
   126c6:	aa02      	add	r2, sp, #8
	const struct nrf_cloud_sensor_list sensor_list = {
   126c8:	ab04      	add	r3, sp, #16
	const struct nrf_cloud_connect_param param = {
   126ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
	display_state = LEDS_CONNECTING;
   126ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
	const struct nrf_cloud_sensor_list sensor_list = {
   126d2:	e883 0003 	stmia.w	r3, {r0, r1}
	display_state = LEDS_CONNECTING;
   126d6:	4b09      	ldr	r3, [pc, #36]	; (126fc <cloud_connect+0x50>)
	err = nrf_cloud_connect(&param);
   126d8:	a806      	add	r0, sp, #24
	display_state = LEDS_CONNECTING;
   126da:	801a      	strh	r2, [r3, #0]
	err = nrf_cloud_connect(&param);
   126dc:	f004 fe5a 	bl	17394 <nrf_cloud_connect>
	if (err) {
   126e0:	4604      	mov	r4, r0
   126e2:	b130      	cbz	r0, 126f2 <cloud_connect+0x46>
		printk("nrf_cloud_connect failed: %d\n", err);
   126e4:	4601      	mov	r1, r0
   126e6:	4806      	ldr	r0, [pc, #24]	; (12700 <cloud_connect+0x54>)
   126e8:	f01b ffa3 	bl	2e632 <printk>
		nrf_cloud_error_handler(err);
   126ec:	4620      	mov	r0, r4
   126ee:	f01b fca7 	bl	2e040 <nrf_cloud_error_handler>
}
   126f2:	b008      	add	sp, #32
   126f4:	bd10      	pop	{r4, pc}
   126f6:	bf00      	nop
   126f8:	00030d60 	.word	0x00030d60
   126fc:	20027884 	.word	0x20027884
   12700:	00034166 	.word	0x00034166

00012704 <sensors_attach>:
{
   12704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12706:	2400      	movs	r4, #0
		param.sensor_type = available_sensors[i];
   12708:	4e0a      	ldr	r6, [pc, #40]	; (12734 <sensors_attach+0x30>)
			printk("nrf_cloud_sensor_attach failed: %d\n",
   1270a:	4f0b      	ldr	r7, [pc, #44]	; (12738 <sensors_attach+0x34>)
		param.sensor_type = available_sensors[i];
   1270c:	5da3      	ldrb	r3, [r4, r6]
		err = nrf_cloud_sensor_attach(&param);
   1270e:	a801      	add	r0, sp, #4
		param.sensor_type = available_sensors[i];
   12710:	f88d 3004 	strb.w	r3, [sp, #4]
		err = nrf_cloud_sensor_attach(&param);
   12714:	f004 fe74 	bl	17400 <nrf_cloud_sensor_attach>
		if (err) {
   12718:	4605      	mov	r5, r0
   1271a:	b130      	cbz	r0, 1272a <sensors_attach+0x26>
			printk("nrf_cloud_sensor_attach failed: %d\n",
   1271c:	4601      	mov	r1, r0
   1271e:	4638      	mov	r0, r7
   12720:	f01b ff87 	bl	2e632 <printk>
			nrf_cloud_error_handler(err);
   12724:	4628      	mov	r0, r5
   12726:	f01b fc8b 	bl	2e040 <nrf_cloud_error_handler>
   1272a:	3401      	adds	r4, #1
	for (u8_t i = 0; i < ARRAY_SIZE(available_sensors); i++) {
   1272c:	2c08      	cmp	r4, #8
   1272e:	d1ed      	bne.n	1270c <sensors_attach+0x8>
}
   12730:	b003      	add	sp, #12
   12732:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12734:	00034136 	.word	0x00034136
   12738:	00034611 	.word	0x00034611

0001273c <sensor_attached>:
{
   1273c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	attached_sensors++;
   12740:	4a5c      	ldr	r2, [pc, #368]	; (128b4 <sensor_attached+0x178>)
   12742:	7813      	ldrb	r3, [r2, #0]
   12744:	3301      	adds	r3, #1
   12746:	b2db      	uxtb	r3, r3
	if (attached_sensors == ARRAY_SIZE(available_sensors)) {
   12748:	2b08      	cmp	r3, #8
	attached_sensors++;
   1274a:	7013      	strb	r3, [r2, #0]
	if (attached_sensors == ARRAY_SIZE(available_sensors)) {
   1274c:	d163      	bne.n	12816 <sensor_attached+0xda>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1274e:	2401      	movs	r4, #1
   12750:	4b59      	ldr	r3, [pc, #356]	; (128b8 <sensor_attached+0x17c>)
   12752:	e8d3 2fef 	ldaex	r2, [r3]
   12756:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1275a:	2900      	cmp	r1, #0
   1275c:	d1f9      	bne.n	12752 <sensor_attached+0x16>

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
   1275e:	4857      	ldr	r0, [pc, #348]	; (128bc <sensor_attached+0x180>)
   12760:	f014 f840 	bl	267e4 <z_impl_device_get_binding>
 */
static void gps_init(void)
{
	int err;
	struct device *gps_dev = device_get_binding(CONFIG_GPS_DEV_NAME);
	struct gps_trigger gps_trig = {
   12764:	2300      	movs	r3, #0
   12766:	f8ad 3004 	strh.w	r3, [sp, #4]
   1276a:	f88d 4004 	strb.w	r4, [sp, #4]
		.type = GPS_TRIG_DATA_READY,
	};

	if (gps_dev == NULL) {
   1276e:	4604      	mov	r4, r0
   12770:	2800      	cmp	r0, #0
   12772:	d153      	bne.n	1281c <sensor_attached+0xe0>
		printk("Could not get %s device\n", CONFIG_GPS_DEV_NAME);
   12774:	4951      	ldr	r1, [pc, #324]	; (128bc <sensor_attached+0x180>)
   12776:	4852      	ldr	r0, [pc, #328]	; (128c0 <sensor_attached+0x184>)
	if (IS_ENABLED(CONFIG_GPS_TRIGGER)) {
		err = gps_trigger_set(gps_dev, &gps_trig,
				gps_trigger_handler);

		if (err) {
			printk("Could not set trigger, error code: %d\n", err);
   12778:	f01b ff5b 	bl	2e632 <printk>
   1277c:	4851      	ldr	r0, [pc, #324]	; (128c4 <sensor_attached+0x188>)
   1277e:	f014 f831 	bl	267e4 <z_impl_device_get_binding>
{
	int err;
	struct device *accel_dev =
		device_get_binding(CONFIG_ACCEL_DEV_NAME);

	if (accel_dev == NULL) {
   12782:	2800      	cmp	r0, #0
   12784:	f040 8083 	bne.w	1288e <sensor_attached+0x152>
		printk("Could not get %s device\n", CONFIG_ACCEL_DEV_NAME);
   12788:	494e      	ldr	r1, [pc, #312]	; (128c4 <sensor_attached+0x188>)
   1278a:	484d      	ldr	r0, [pc, #308]	; (128c0 <sensor_attached+0x184>)
   1278c:	f01b ff51 	bl	2e632 <printk>
{
   12790:	2400      	movs	r4, #0
/**@brief Initialize environment sensors. */
static void env_sensor_init(void)
{
	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
		env_sensors[i]->dev =
			device_get_binding(env_sensors[i]->dev_name);
   12792:	4f4d      	ldr	r7, [pc, #308]	; (128c8 <sensor_attached+0x18c>)
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   12794:	4e4d      	ldr	r6, [pc, #308]	; (128cc <sensor_attached+0x190>)
   12796:	f8df 8184 	ldr.w	r8, [pc, #388]	; 1291c <sensor_attached+0x1e0>
			device_get_binding(env_sensors[i]->dev_name);
   1279a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
   1279e:	6868      	ldr	r0, [r5, #4]
   127a0:	f014 f820 	bl	267e4 <z_impl_device_get_binding>
		env_sensors[i]->dev =
   127a4:	60a8      	str	r0, [r5, #8]
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   127a6:	b978      	cbnz	r0, 127c8 <sensor_attached+0x8c>
   127a8:	f240 433e 	movw	r3, #1086	; 0x43e
   127ac:	4632      	mov	r2, r6
   127ae:	4641      	mov	r1, r8
   127b0:	4847      	ldr	r0, [pc, #284]	; (128d0 <sensor_attached+0x194>)
   127b2:	f01b ff3e 	bl	2e632 <printk>
   127b6:	6869      	ldr	r1, [r5, #4]
   127b8:	4846      	ldr	r0, [pc, #280]	; (128d4 <sensor_attached+0x198>)
   127ba:	f01b ff3a 	bl	2e632 <printk>
   127be:	f240 413e 	movw	r1, #1086	; 0x43e
   127c2:	4630      	mov	r0, r6
   127c4:	f01b ff42 	bl	2e64c <assert_post_action>
			env_sensors[i]->dev_name);

		env_cloud_data[i].type = env_sensors[i]->type;
   127c8:	7829      	ldrb	r1, [r5, #0]
		env_cloud_data[i].tag = 0x1;
   127ca:	2501      	movs	r5, #1
		env_cloud_data[i].type = env_sensors[i]->type;
   127cc:	4b42      	ldr	r3, [pc, #264]	; (128d8 <sensor_attached+0x19c>)
   127ce:	0122      	lsls	r2, r4, #4
	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
   127d0:	442c      	add	r4, r5
		env_cloud_data[i].type = env_sensors[i]->type;
   127d2:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
   127d4:	2c03      	cmp	r4, #3
		env_cloud_data[i].tag = 0x1;
   127d6:	4413      	add	r3, r2
   127d8:	60dd      	str	r5, [r3, #12]
	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
   127da:	d1de      	bne.n	1279a <sensor_attached+0x5e>
#if CONFIG_MODEM_INFO
/**brief Initialize LTE status containers. */
static void modem_data_init(void)
{
	int err;
	err = modem_info_init();
   127dc:	f004 f890 	bl	16900 <modem_info_init>
	if (err) {
   127e0:	4601      	mov	r1, r0
   127e2:	2800      	cmp	r0, #0
   127e4:	d056      	beq.n	12894 <sensor_attached+0x158>
		printk("Modem info could not be established: %d\n", err);
   127e6:	483d      	ldr	r0, [pc, #244]	; (128dc <sensor_attached+0x1a0>)
   127e8:	f01b ff23 	bl	2e632 <printk>
	button_cloud_data.type = NRF_CLOUD_SENSOR_BUTTON;
   127ec:	2202      	movs	r2, #2
   127ee:	4b3c      	ldr	r3, [pc, #240]	; (128e0 <sensor_attached+0x1a4>)
#endif /* CONFIG_MODEM_INFO */
	if (IS_ENABLED(CONFIG_CLOUD_BUTTON)) {
		button_sensor_init();
	}

	gps_cloud_data.type = NRF_CLOUD_SENSOR_GPS;
   127f0:	2100      	movs	r1, #0
	button_cloud_data.type = NRF_CLOUD_SENSOR_BUTTON;
   127f2:	701a      	strb	r2, [r3, #0]
	button_cloud_data.tag = 0x1;
   127f4:	2201      	movs	r2, #1
   127f6:	60da      	str	r2, [r3, #12]
	gps_cloud_data.type = NRF_CLOUD_SENSOR_GPS;
   127f8:	4b3a      	ldr	r3, [pc, #232]	; (128e4 <sensor_attached+0x1a8>)
	flip_cloud_data.type = NRF_CLOUD_SENSOR_FLIP;

	/* Send sensor data after initialization, as it may be a long time until
	 * next time if the application is in power optimized mode.
	 */
	k_work_submit(&send_gps_data_work);
   127fa:	483b      	ldr	r0, [pc, #236]	; (128e8 <sensor_attached+0x1ac>)
	gps_cloud_data.type = NRF_CLOUD_SENSOR_GPS;
   127fc:	7019      	strb	r1, [r3, #0]
	gps_cloud_data.data.ptr = nmea_data.str;
   127fe:	493b      	ldr	r1, [pc, #236]	; (128ec <sensor_attached+0x1b0>)
	gps_cloud_data.tag = 0x1;
   12800:	60da      	str	r2, [r3, #12]
	gps_cloud_data.data.ptr = nmea_data.str;
   12802:	6099      	str	r1, [r3, #8]
	gps_cloud_data.data.len = nmea_data.len;
   12804:	f891 1051 	ldrb.w	r1, [r1, #81]	; 0x51
   12808:	6059      	str	r1, [r3, #4]
	flip_cloud_data.type = NRF_CLOUD_SENSOR_FLIP;
   1280a:	4b39      	ldr	r3, [pc, #228]	; (128f0 <sensor_attached+0x1b4>)
   1280c:	701a      	strb	r2, [r3, #0]
	k_work_submit(&send_gps_data_work);
   1280e:	f7ff fd43 	bl	12298 <k_work_submit>
	env_data_send();
   12812:	f7fb fb4d 	bl	deb0 <env_data_send>
}
   12816:	b002      	add	sp, #8
   12818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printk("GPS device found\n");
   1281c:	4835      	ldr	r0, [pc, #212]	; (128f4 <sensor_attached+0x1b8>)
   1281e:	f01b ff08 	bl	2e632 <printk>
				  gps_trigger_handler_t handler)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->trigger_set(dev, trigger, handler);
   12822:	6863      	ldr	r3, [r4, #4]
   12824:	a901      	add	r1, sp, #4
   12826:	681b      	ldr	r3, [r3, #0]
   12828:	4a33      	ldr	r2, [pc, #204]	; (128f8 <sensor_attached+0x1bc>)
   1282a:	4620      	mov	r0, r4
   1282c:	4798      	blx	r3
		if (err) {
   1282e:	4601      	mov	r1, r0
   12830:	b108      	cbz	r0, 12836 <sensor_attached+0xfa>
			printk("Could not set trigger, error code: %d\n", err);
   12832:	4832      	ldr	r0, [pc, #200]	; (128fc <sensor_attached+0x1c0>)
   12834:	e7a0      	b.n	12778 <sensor_attached+0x3c>
	return api->sample_fetch(dev);
   12836:	6863      	ldr	r3, [r4, #4]
   12838:	4620      	mov	r0, r4
   1283a:	685b      	ldr	r3, [r3, #4]
   1283c:	4798      	blx	r3
	__ASSERT(err == 0, "GPS sample could not be fetched.");
   1283e:	b170      	cbz	r0, 1285e <sensor_attached+0x122>
   12840:	492f      	ldr	r1, [pc, #188]	; (12900 <sensor_attached+0x1c4>)
   12842:	f240 4317 	movw	r3, #1047	; 0x417
   12846:	4a21      	ldr	r2, [pc, #132]	; (128cc <sensor_attached+0x190>)
   12848:	4821      	ldr	r0, [pc, #132]	; (128d0 <sensor_attached+0x194>)
   1284a:	f01b fef2 	bl	2e632 <printk>
   1284e:	482d      	ldr	r0, [pc, #180]	; (12904 <sensor_attached+0x1c8>)
   12850:	f01b feef 	bl	2e632 <printk>
   12854:	f240 4117 	movw	r1, #1047	; 0x417
   12858:	481c      	ldr	r0, [pc, #112]	; (128cc <sensor_attached+0x190>)
   1285a:	f01b fef7 	bl	2e64c <assert_post_action>
	return api->channel_get(dev, chan, data);
   1285e:	6863      	ldr	r3, [r4, #4]
   12860:	4a22      	ldr	r2, [pc, #136]	; (128ec <sensor_attached+0x1b0>)
   12862:	689b      	ldr	r3, [r3, #8]
   12864:	2100      	movs	r1, #0
   12866:	4620      	mov	r0, r4
   12868:	4798      	blx	r3
	__ASSERT(err == 0, "GPS sample could not be retrieved.");
   1286a:	2800      	cmp	r0, #0
   1286c:	d086      	beq.n	1277c <sensor_attached+0x40>
   1286e:	f240 431a 	movw	r3, #1050	; 0x41a
   12872:	4a16      	ldr	r2, [pc, #88]	; (128cc <sensor_attached+0x190>)
   12874:	4922      	ldr	r1, [pc, #136]	; (12900 <sensor_attached+0x1c4>)
   12876:	4816      	ldr	r0, [pc, #88]	; (128d0 <sensor_attached+0x194>)
   12878:	f01b fedb 	bl	2e632 <printk>
   1287c:	4822      	ldr	r0, [pc, #136]	; (12908 <sensor_attached+0x1cc>)
   1287e:	f01b fed8 	bl	2e632 <printk>
   12882:	f240 411a 	movw	r1, #1050	; 0x41a
   12886:	4811      	ldr	r0, [pc, #68]	; (128cc <sensor_attached+0x190>)
   12888:	f01b fee0 	bl	2e64c <assert_post_action>
   1288c:	e776      	b.n	1277c <sensor_attached+0x40>
	orientation_detector_init(accel_dev);
   1288e:	f000 fa07 	bl	12ca0 <orientation_detector_init>
   12892:	e77d      	b.n	12790 <sensor_attached+0x54>
	signal_strength_cloud_data.type = NRF_CLOUD_LTE_LINK_RSRP;
   12894:	2207      	movs	r2, #7
   12896:	4b1d      	ldr	r3, [pc, #116]	; (1290c <sensor_attached+0x1d0>)
	k_work_submit(&device_status_work);
   12898:	481d      	ldr	r0, [pc, #116]	; (12910 <sensor_attached+0x1d4>)
	signal_strength_cloud_data.type = NRF_CLOUD_LTE_LINK_RSRP;
   1289a:	701a      	strb	r2, [r3, #0]
	device_cloud_data.type = NRF_CLOUD_DEVICE_INFO;
   1289c:	2208      	movs	r2, #8
	signal_strength_cloud_data.tag = 0x1;
   1289e:	60dd      	str	r5, [r3, #12]
	device_cloud_data.type = NRF_CLOUD_DEVICE_INFO;
   128a0:	4b1c      	ldr	r3, [pc, #112]	; (12914 <sensor_attached+0x1d8>)
   128a2:	701a      	strb	r2, [r3, #0]
	device_cloud_data.tag = 0x1;
   128a4:	60dd      	str	r5, [r3, #12]
	k_work_submit(&device_status_work);
   128a6:	f7ff fcf7 	bl	12298 <k_work_submit>
	modem_info_rsrp_register(modem_rsrp_handler);
   128aa:	481b      	ldr	r0, [pc, #108]	; (12918 <sensor_attached+0x1dc>)
   128ac:	f004 f810 	bl	168d0 <modem_info_rsrp_register>
   128b0:	e79c      	b.n	127ec <sensor_attached+0xb0>
   128b2:	bf00      	nop
   128b4:	20027890 	.word	0x20027890
   128b8:	20020948 	.word	0x20020948
   128bc:	000344bb 	.word	0x000344bb
   128c0:	000344c3 	.word	0x000344c3
   128c4:	00034591 	.word	0x00034591
   128c8:	00030ea8 	.word	0x00030ea8
   128cc:	00034515 	.word	0x00034515
   128d0:	0003452c 	.word	0x0003452c
   128d4:	000345b0 	.word	0x000345b0
   128d8:	20020880 	.word	0x20020880
   128dc:	000345cb 	.word	0x000345cb
   128e0:	20020840 	.word	0x20020840
   128e4:	200208e0 	.word	0x200208e0
   128e8:	20020958 	.word	0x20020958
   128ec:	20027894 	.word	0x20027894
   128f0:	200208b0 	.word	0x200208b0
   128f4:	000344dc 	.word	0x000344dc
   128f8:	000124fd 	.word	0x000124fd
   128fc:	000344ee 	.word	0x000344ee
   12900:	00034523 	.word	0x00034523
   12904:	00034549 	.word	0x00034549
   12908:	0003456c 	.word	0x0003456c
   1290c:	20020964 	.word	0x20020964
   12910:	20020874 	.word	0x20020874
   12914:	20020864 	.word	0x20020864
   12918:	000122c1 	.word	0x000122c1
   1291c:	0003459c 	.word	0x0003459c

00012920 <cloud_event_handler>:
	switch (p_evt->type) {
   12920:	7801      	ldrb	r1, [r0, #0]
{
   12922:	b570      	push	{r4, r5, r6, lr}
	switch (p_evt->type) {
   12924:	2905      	cmp	r1, #5
{
   12926:	4604      	mov	r4, r0
	switch (p_evt->type) {
   12928:	d053      	beq.n	129d2 <cloud_event_handler+0xb2>
   1292a:	d817      	bhi.n	1295c <cloud_event_handler+0x3c>
   1292c:	2902      	cmp	r1, #2
   1292e:	d032      	beq.n	12996 <cloud_event_handler+0x76>
   12930:	d806      	bhi.n	12940 <cloud_event_handler+0x20>
   12932:	2901      	cmp	r1, #1
   12934:	d02a      	beq.n	1298c <cloud_event_handler+0x6c>
}
   12936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Received unknown %d\n", p_evt->type);
   1293a:	4845      	ldr	r0, [pc, #276]	; (12a50 <cloud_event_handler+0x130>)
   1293c:	f01b be79 	b.w	2e632 <printk>
	switch (p_evt->type) {
   12940:	2903      	cmp	r1, #3
   12942:	d044      	beq.n	129ce <cloud_event_handler+0xae>
   12944:	2904      	cmp	r1, #4
   12946:	d1f6      	bne.n	12936 <cloud_event_handler+0x16>
		printk("NRF_CLOUD_EVT_READY\n");
   12948:	4842      	ldr	r0, [pc, #264]	; (12a54 <cloud_event_handler+0x134>)
   1294a:	f01b fe72 	bl	2e632 <printk>
}
   1294e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		display_state = LEDS_PAIRED;
   12952:	2208      	movs	r2, #8
   12954:	4b40      	ldr	r3, [pc, #256]	; (12a58 <cloud_event_handler+0x138>)
   12956:	801a      	strh	r2, [r3, #0]
		sensors_attach();
   12958:	f7ff bed4 	b.w	12704 <sensors_attach>
	switch (p_evt->type) {
   1295c:	2907      	cmp	r1, #7
   1295e:	d03f      	beq.n	129e0 <cloud_event_handler+0xc0>
   12960:	d352      	bcc.n	12a08 <cloud_event_handler+0xe8>
   12962:	2908      	cmp	r1, #8
   12964:	d03e      	beq.n	129e4 <cloud_event_handler+0xc4>
   12966:	29ff      	cmp	r1, #255	; 0xff
   12968:	d1e5      	bne.n	12936 <cloud_event_handler+0x16>
		printk("NRF_CLOUD_EVT_ERROR, status: %d\n", p_evt->status);
   1296a:	6841      	ldr	r1, [r0, #4]
   1296c:	483b      	ldr	r0, [pc, #236]	; (12a5c <cloud_event_handler+0x13c>)
   1296e:	f01b fe60 	bl	2e632 <printk>
   12972:	2200      	movs	r2, #0
   12974:	4b3a      	ldr	r3, [pc, #232]	; (12a60 <cloud_event_handler+0x140>)
   12976:	e8d3 1fef 	ldaex	r1, [r3]
   1297a:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1297e:	2800      	cmp	r0, #0
   12980:	d1f9      	bne.n	12976 <cloud_event_handler+0x56>
		nrf_cloud_error_handler(p_evt->status);
   12982:	6860      	ldr	r0, [r4, #4]
}
   12984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		nrf_cloud_error_handler(p_evt->status);
   12988:	f01b bb5a 	b.w	2e040 <nrf_cloud_error_handler>
		printk("NRF_CLOUD_EVT_TRANSPORT_CONNECTED\n");
   1298c:	4835      	ldr	r0, [pc, #212]	; (12a64 <cloud_event_handler+0x144>)
}
   1298e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printk("using the buttons and switches\n");
   12992:	f01b be4e 	b.w	2e632 <printk>
	if (!pattern_recording) {
   12996:	4e34      	ldr	r6, [pc, #208]	; (12a68 <cloud_event_handler+0x148>)
		printk("NRF_CLOUD_EVT_USER_ASSOCIATION_REQUEST\n");
   12998:	4834      	ldr	r0, [pc, #208]	; (12a6c <cloud_event_handler+0x14c>)
   1299a:	f01b fe4a 	bl	2e632 <printk>
	if (!pattern_recording) {
   1299e:	7835      	ldrb	r5, [r6, #0]
   129a0:	2d00      	cmp	r5, #0
   129a2:	d143      	bne.n	12a2c <cloud_event_handler+0x10c>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   129a4:	2201      	movs	r2, #1
   129a6:	4629      	mov	r1, r5
   129a8:	4831      	ldr	r0, [pc, #196]	; (12a70 <cloud_event_handler+0x150>)
   129aa:	f015 ff55 	bl	28858 <z_impl_k_sem_init>
		display_state = LEDS_PATTERN_WAIT;
   129ae:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   129b2:	4b29      	ldr	r3, [pc, #164]	; (12a58 <cloud_event_handler+0x138>)
		printk("Please enter the user association pattern ");
   129b4:	482f      	ldr	r0, [pc, #188]	; (12a74 <cloud_event_handler+0x154>)
		display_state = LEDS_PATTERN_WAIT;
   129b6:	801a      	strh	r2, [r3, #0]
		pattern_recording = true;
   129b8:	2301      	movs	r3, #1
   129ba:	7033      	strb	r3, [r6, #0]
		buttons_captured = 0;
   129bc:	4b2e      	ldr	r3, [pc, #184]	; (12a78 <cloud_event_handler+0x158>)
		buttons_to_capture = p_evt->param.ua_req.sequence.len;
   129be:	68e2      	ldr	r2, [r4, #12]
		buttons_captured = 0;
   129c0:	601d      	str	r5, [r3, #0]
		buttons_to_capture = p_evt->param.ua_req.sequence.len;
   129c2:	4b2e      	ldr	r3, [pc, #184]	; (12a7c <cloud_event_handler+0x15c>)
   129c4:	601a      	str	r2, [r3, #0]
		printk("Please enter the user association pattern ");
   129c6:	f01b fe34 	bl	2e632 <printk>
			printk("using the buttons and switches\n");
   129ca:	482d      	ldr	r0, [pc, #180]	; (12a80 <cloud_event_handler+0x160>)
   129cc:	e7df      	b.n	1298e <cloud_event_handler+0x6e>
		printk("NRF_CLOUD_EVT_USER_ASSOCIATED\n");
   129ce:	482d      	ldr	r0, [pc, #180]	; (12a84 <cloud_event_handler+0x164>)
   129d0:	e7dd      	b.n	1298e <cloud_event_handler+0x6e>
		printk("NRF_CLOUD_EVT_SENSOR_ATTACHED\n");
   129d2:	482d      	ldr	r0, [pc, #180]	; (12a88 <cloud_event_handler+0x168>)
   129d4:	f01b fe2d 	bl	2e632 <printk>
}
   129d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		sensor_attached();
   129dc:	f7ff beae 	b.w	1273c <sensor_attached>
		printk("NRF_CLOUD_EVT_SENSOR_DATA_ACK\n");
   129e0:	482a      	ldr	r0, [pc, #168]	; (12a8c <cloud_event_handler+0x16c>)
   129e2:	e7d4      	b.n	1298e <cloud_event_handler+0x6e>
		printk("NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED\n");
   129e4:	482a      	ldr	r0, [pc, #168]	; (12a90 <cloud_event_handler+0x170>)
   129e6:	f01b fe24 	bl	2e632 <printk>
   129ea:	2300      	movs	r3, #0
   129ec:	4a1c      	ldr	r2, [pc, #112]	; (12a60 <cloud_event_handler+0x140>)
   129ee:	e8d2 1fef 	ldaex	r1, [r2]
   129f2:	e8c2 3fe0 	stlex	r0, r3, [r2]
   129f6:	2800      	cmp	r0, #0
   129f8:	d1f9      	bne.n	129ee <cloud_event_handler+0xce>
}
   129fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		display_state = LEDS_INITIALIZING;
   129fe:	4a16      	ldr	r2, [pc, #88]	; (12a58 <cloud_event_handler+0x138>)
		k_work_submit(&connect_work);
   12a00:	4824      	ldr	r0, [pc, #144]	; (12a94 <cloud_event_handler+0x174>)
		display_state = LEDS_INITIALIZING;
   12a02:	8013      	strh	r3, [r2, #0]
		k_work_submit(&connect_work);
   12a04:	f7ff bc48 	b.w	12298 <k_work_submit>
		printk("NRF_CLOUD_EVT_RX_DATA\n");
   12a08:	4823      	ldr	r0, [pc, #140]	; (12a98 <cloud_event_handler+0x178>)
   12a0a:	f01b fe12 	bl	2e632 <printk>
	if (memcmp(p_evt->param.data.ptr, CLOUD_LED_ON_STR,
   12a0e:	4823      	ldr	r0, [pc, #140]	; (12a9c <cloud_event_handler+0x17c>)
   12a10:	68e5      	ldr	r5, [r4, #12]
   12a12:	f018 f953 	bl	2acbc <strlen>
   12a16:	4921      	ldr	r1, [pc, #132]	; (12a9c <cloud_event_handler+0x17c>)
   12a18:	4602      	mov	r2, r0
   12a1a:	4628      	mov	r0, r5
   12a1c:	f017 fed2 	bl	2a7c4 <memcmp>
   12a20:	b928      	cbnz	r0, 12a2e <cloud_event_handler+0x10e>
		display_state |= CLOUD_LED_MSK;
   12a22:	4a0d      	ldr	r2, [pc, #52]	; (12a58 <cloud_event_handler+0x138>)
   12a24:	8813      	ldrh	r3, [r2, #0]
   12a26:	f043 0301 	orr.w	r3, r3, #1
		display_state &= ~CLOUD_LED_MSK;
   12a2a:	8013      	strh	r3, [r2, #0]
}
   12a2c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (memcmp(p_evt->param.data.ptr, CLOUD_LED_OFF_STR,
   12a2e:	481c      	ldr	r0, [pc, #112]	; (12aa0 <cloud_event_handler+0x180>)
   12a30:	68e4      	ldr	r4, [r4, #12]
   12a32:	f018 f943 	bl	2acbc <strlen>
   12a36:	491a      	ldr	r1, [pc, #104]	; (12aa0 <cloud_event_handler+0x180>)
   12a38:	4602      	mov	r2, r0
   12a3a:	4620      	mov	r0, r4
   12a3c:	f017 fec2 	bl	2a7c4 <memcmp>
   12a40:	b920      	cbnz	r0, 12a4c <cloud_event_handler+0x12c>
		display_state &= ~CLOUD_LED_MSK;
   12a42:	4a05      	ldr	r2, [pc, #20]	; (12a58 <cloud_event_handler+0x138>)
   12a44:	8813      	ldrh	r3, [r2, #0]
   12a46:	f023 0301 	bic.w	r3, r3, #1
   12a4a:	e7ee      	b.n	12a2a <cloud_event_handler+0x10a>
		printk("Data not recognised\n");
   12a4c:	4815      	ldr	r0, [pc, #84]	; (12aa4 <cloud_event_handler+0x184>)
   12a4e:	e79e      	b.n	1298e <cloud_event_handler+0x6e>
   12a50:	0003431a 	.word	0x0003431a
   12a54:	00034239 	.word	0x00034239
   12a58:	20027884 	.word	0x20027884
   12a5c:	000342b2 	.word	0x000342b2
   12a60:	20020948 	.word	0x20020948
   12a64:	00034184 	.word	0x00034184
   12a68:	200278e6 	.word	0x200278e6
   12a6c:	000341a7 	.word	0x000341a7
   12a70:	20020978 	.word	0x20020978
   12a74:	000341cf 	.word	0x000341cf
   12a78:	20020850 	.word	0x20020850
   12a7c:	20020854 	.word	0x20020854
   12a80:	000341fa 	.word	0x000341fa
   12a84:	0003421a 	.word	0x0003421a
   12a88:	0003424e 	.word	0x0003424e
   12a8c:	0003426d 	.word	0x0003426d
   12a90:	0003428c 	.word	0x0003428c
   12a94:	20020858 	.word	0x20020858
   12a98:	000342d3 	.word	0x000342d3
   12a9c:	000342ea 	.word	0x000342ea
   12aa0:	000342f7 	.word	0x000342f7
   12aa4:	00034305 	.word	0x00034305

00012aa8 <main>:
	}
#endif
}

void main(void)
{
   12aa8:	b58f      	push	{r0, r1, r2, r3, r7, lr}
	printk("Application started\n");
   12aaa:	484f      	ldr	r0, [pc, #316]	; (12be8 <main+0x140>)
   12aac:	f01b fdc1 	bl	2e632 <printk>
	err = dk_buttons_init(button_handler);
   12ab0:	484e      	ldr	r0, [pc, #312]	; (12bec <main+0x144>)
   12ab2:	f003 fbdd 	bl	16270 <dk_buttons_init>
	if (err) {
   12ab6:	4601      	mov	r1, r0
   12ab8:	b110      	cbz	r0, 12ac0 <main+0x18>
		printk("Could not initialize buttons, err code: %d\n", err);
   12aba:	484d      	ldr	r0, [pc, #308]	; (12bf0 <main+0x148>)
   12abc:	f01b fdb9 	bl	2e632 <printk>
	err = dk_leds_init();
   12ac0:	f003 fba2 	bl	16208 <dk_leds_init>
	if (err) {
   12ac4:	4601      	mov	r1, r0
   12ac6:	b110      	cbz	r0, 12ace <main+0x26>
		printk("Could not initialize leds, err code: %d\n", err);
   12ac8:	484a      	ldr	r0, [pc, #296]	; (12bf4 <main+0x14c>)
   12aca:	f01b fdb2 	bl	2e632 <printk>
	err = dk_set_leds_state(0x00, DK_ALL_LEDS_MSK);
   12ace:	210f      	movs	r1, #15
   12ad0:	2000      	movs	r0, #0
   12ad2:	f01c fd76 	bl	2f5c2 <dk_set_leds_state>
	if (err) {
   12ad6:	4601      	mov	r1, r0
   12ad8:	b110      	cbz	r0, 12ae0 <main+0x38>
		printk("Could not set leds state, err code: %d\n", err);
   12ada:	4847      	ldr	r0, [pc, #284]	; (12bf8 <main+0x150>)
   12adc:	f01b fda9 	bl	2e632 <printk>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   12ae0:	2400      	movs	r4, #0
   12ae2:	4b46      	ldr	r3, [pc, #280]	; (12bfc <main+0x154>)
   12ae4:	4a46      	ldr	r2, [pc, #280]	; (12c00 <main+0x158>)
   12ae6:	601c      	str	r4, [r3, #0]
   12ae8:	e9c3 2401 	strd	r2, r4, [r3, #4]
   12aec:	4b45      	ldr	r3, [pc, #276]	; (12c04 <main+0x15c>)
   12aee:	4a46      	ldr	r2, [pc, #280]	; (12c08 <main+0x160>)
   12af0:	601c      	str	r4, [r3, #0]
   12af2:	e9c3 2401 	strd	r2, r4, [r3, #4]
   12af6:	4b45      	ldr	r3, [pc, #276]	; (12c0c <main+0x164>)
   12af8:	4a45      	ldr	r2, [pc, #276]	; (12c10 <main+0x168>)
   12afa:	601c      	str	r4, [r3, #0]
   12afc:	e9c3 2401 	strd	r2, r4, [r3, #4]
   12b00:	4b44      	ldr	r3, [pc, #272]	; (12c14 <main+0x16c>)
   12b02:	4a45      	ldr	r2, [pc, #276]	; (12c18 <main+0x170>)
	k_delayed_work_init(&leds_update_work, leds_update);
   12b04:	4945      	ldr	r1, [pc, #276]	; (12c1c <main+0x174>)
   12b06:	4846      	ldr	r0, [pc, #280]	; (12c20 <main+0x178>)
   12b08:	e9c3 2401 	strd	r2, r4, [r3, #4]
   12b0c:	601c      	str	r4, [r3, #0]
   12b0e:	f01d ff47 	bl	309a0 <k_delayed_work_init>
	k_delayed_work_init(&flip_poll_work, flip_send);
   12b12:	4944      	ldr	r1, [pc, #272]	; (12c24 <main+0x17c>)
   12b14:	4844      	ldr	r0, [pc, #272]	; (12c28 <main+0x180>)
   12b16:	f01d ff43 	bl	309a0 <k_delayed_work_init>
	k_delayed_work_init(&long_press_button_work, accelerometer_calibrate);
   12b1a:	4944      	ldr	r1, [pc, #272]	; (12c2c <main+0x184>)
   12b1c:	4844      	ldr	r0, [pc, #272]	; (12c30 <main+0x188>)
   12b1e:	f01d ff3f 	bl	309a0 <k_delayed_work_init>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   12b22:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   12b26:	493e      	ldr	r1, [pc, #248]	; (12c20 <main+0x178>)
   12b28:	4842      	ldr	r0, [pc, #264]	; (12c34 <main+0x18c>)
   12b2a:	f016 f991 	bl	28e50 <k_delayed_work_submit_to_queue>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   12b2e:	4b42      	ldr	r3, [pc, #264]	; (12c38 <main+0x190>)
   12b30:	4a42      	ldr	r2, [pc, #264]	; (12c3c <main+0x194>)
   12b32:	601c      	str	r4, [r3, #0]
   12b34:	e9c3 2401 	strd	r2, r4, [r3, #4]
   12b38:	4b41      	ldr	r3, [pc, #260]	; (12c40 <main+0x198>)
   12b3a:	4a42      	ldr	r2, [pc, #264]	; (12c44 <main+0x19c>)
   12b3c:	601c      	str	r4, [r3, #0]
   12b3e:	e9c3 2401 	strd	r2, r4, [r3, #4]
	const struct nrf_cloud_init_param param = {
   12b42:	4b41      	ldr	r3, [pc, #260]	; (12c48 <main+0x1a0>)
   12b44:	ac04      	add	r4, sp, #16
   12b46:	f844 3d0c 	str.w	r3, [r4, #-12]!
	int err = nrf_cloud_init(&param);
   12b4a:	4620      	mov	r0, r4
   12b4c:	f004 fc02 	bl	17354 <nrf_cloud_init>
	if (err) {
   12b50:	4605      	mov	r5, r0
   12b52:	b128      	cbz	r0, 12b60 <main+0xb8>
		printk("nRF Cloud library could not be initialized.");
   12b54:	483d      	ldr	r0, [pc, #244]	; (12c4c <main+0x1a4>)
   12b56:	f01b fd6c 	bl	2e632 <printk>
		nrf_cloud_error_handler(err);
   12b5a:	4628      	mov	r0, r5
   12b5c:	f01b fa70 	bl	2e040 <nrf_cloud_error_handler>
		printk("LTE LC config ...\n");
   12b60:	483b      	ldr	r0, [pc, #236]	; (12c50 <main+0x1a8>)
   12b62:	f01b fd66 	bl	2e632 <printk>
		display_state = LEDS_CONNECTING;
   12b66:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12b6a:	4b3a      	ldr	r3, [pc, #232]	; (12c54 <main+0x1ac>)
   12b6c:	801a      	strh	r2, [r3, #0]
		err = lte_lc_init_and_connect();
   12b6e:	f005 fe55 	bl	1881c <lte_lc_init_and_connect>
		__ASSERT(err == 0, "LTE link could not be established.");
   12b72:	b170      	cbz	r0, 12b92 <main+0xea>
   12b74:	4938      	ldr	r1, [pc, #224]	; (12c58 <main+0x1b0>)
   12b76:	f240 33d5 	movw	r3, #981	; 0x3d5
   12b7a:	4a38      	ldr	r2, [pc, #224]	; (12c5c <main+0x1b4>)
   12b7c:	4838      	ldr	r0, [pc, #224]	; (12c60 <main+0x1b8>)
   12b7e:	f01b fd58 	bl	2e632 <printk>
   12b82:	4838      	ldr	r0, [pc, #224]	; (12c64 <main+0x1bc>)
   12b84:	f01b fd55 	bl	2e632 <printk>
   12b88:	f240 31d5 	movw	r1, #981	; 0x3d5
   12b8c:	4833      	ldr	r0, [pc, #204]	; (12c5c <main+0x1b4>)
   12b8e:	f01b fd5d 	bl	2e64c <assert_post_action>
	if (!pattern_recording) {
   12b92:	4e35      	ldr	r6, [pc, #212]	; (12c68 <main+0x1c0>)

	buttons_leds_init();
	work_init();
	cloud_init();
	modem_configure();
	cloud_connect(NULL);
   12b94:	2000      	movs	r0, #0
   12b96:	f7ff fd89 	bl	126ac <cloud_connect>
   12b9a:	4637      	mov	r7, r6
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   12b9c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 12c78 <main+0x1d0>

	while (true) {
		nrf_cloud_process();
   12ba0:	f01d fbac 	bl	302fc <nrf_cloud_process>
	if (!pattern_recording) {
   12ba4:	7833      	ldrb	r3, [r6, #0]
   12ba6:	b1cb      	cbz	r3, 12bdc <main+0x134>
   12ba8:	2100      	movs	r1, #0
   12baa:	4640      	mov	r0, r8
   12bac:	f015 fed2 	bl	28954 <z_impl_k_sem_take>
	if (k_sem_take(&user_assoc_sem, K_NO_WAIT) == 0) {
   12bb0:	b9a0      	cbnz	r0, 12bdc <main+0x134>
	const struct nrf_cloud_ua_param ua = {
   12bb2:	4b2e      	ldr	r3, [pc, #184]	; (12c6c <main+0x1c4>)
   12bb4:	f88d 0004 	strb.w	r0, [sp, #4]
   12bb8:	681b      	ldr	r3, [r3, #0]
	err = nrf_cloud_user_associate(&ua);
   12bba:	4620      	mov	r0, r4
	const struct nrf_cloud_ua_param ua = {
   12bbc:	9302      	str	r3, [sp, #8]
   12bbe:	4b2c      	ldr	r3, [pc, #176]	; (12c70 <main+0x1c8>)
   12bc0:	9303      	str	r3, [sp, #12]
	err = nrf_cloud_user_associate(&ua);
   12bc2:	f004 fbf3 	bl	173ac <nrf_cloud_user_associate>
	if (err) {
   12bc6:	4605      	mov	r5, r0
   12bc8:	b130      	cbz	r0, 12bd8 <main+0x130>
		printk("nrf_cloud_user_associate failed: %d\n", err);
   12bca:	4601      	mov	r1, r0
   12bcc:	4829      	ldr	r0, [pc, #164]	; (12c74 <main+0x1cc>)
   12bce:	f01b fd30 	bl	2e632 <printk>
		nrf_cloud_error_handler(err);
   12bd2:	4628      	mov	r0, r5
   12bd4:	f01b fa34 	bl	2e040 <nrf_cloud_error_handler>
		pattern_recording = false;
   12bd8:	2300      	movs	r3, #0
   12bda:	703b      	strb	r3, [r7, #0]
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, ms)
   12bdc:	200a      	movs	r0, #10
   12bde:	f015 fe03 	bl	287e8 <z_impl_k_sleep>
		input_process();
		k_sleep(K_MSEC(10));
		/* Put CPU to idle to save power */
		k_cpu_idle();
   12be2:	f000 fe87 	bl	138f4 <k_cpu_idle>
   12be6:	e7db      	b.n	12ba0 <main+0xf8>
   12be8:	0003439d 	.word	0x0003439d
   12bec:	000123ed 	.word	0x000123ed
   12bf0:	000343b2 	.word	0x000343b2
   12bf4:	000343de 	.word	0x000343de
   12bf8:	00034407 	.word	0x00034407
   12bfc:	20020858 	.word	0x20020858
   12c00:	000126ad 	.word	0x000126ad
   12c04:	20020958 	.word	0x20020958
   12c08:	00012699 	.word	0x00012699
   12c0c:	2002093c 	.word	0x2002093c
   12c10:	0001268d 	.word	0x0001268d
   12c14:	2002094c 	.word	0x2002094c
   12c18:	00012681 	.word	0x00012681
   12c1c:	00012351 	.word	0x00012351
   12c20:	200208f0 	.word	0x200208f0
   12c24:	000122d5 	.word	0x000122d5
   12c28:	200208c0 	.word	0x200208c0
   12c2c:	000123ad 	.word	0x000123ad
   12c30:	20020910 	.word	0x20020910
   12c34:	20027778 	.word	0x20027778
   12c38:	20020874 	.word	0x20020874
   12c3c:	00012639 	.word	0x00012639
   12c40:	20020930 	.word	0x20020930
   12c44:	000125c9 	.word	0x000125c9
   12c48:	00012921 	.word	0x00012921
   12c4c:	0003442f 	.word	0x0003442f
   12c50:	0003445b 	.word	0x0003445b
   12c54:	20027884 	.word	0x20027884
   12c58:	00034523 	.word	0x00034523
   12c5c:	00034515 	.word	0x00034515
   12c60:	0003452c 	.word	0x0003452c
   12c64:	0003446e 	.word	0x0003446e
   12c68:	200278e6 	.word	0x200278e6
   12c6c:	20020854 	.word	0x20020854
   12c70:	200278e7 	.word	0x200278e7
   12c74:	00034493 	.word	0x00034493
   12c78:	20020978 	.word	0x20020978

00012c7c <orientation_detector_calibrate>:

int orientation_detector_calibrate(void)
{
   12c7c:	b508      	push	{r3, lr}
		aggregated_data[2] +=
			(sensor_value_to_double(&accel_data[2])
			+ ((double)SENSOR_G) / 1000000.0);
	}

	accel_offset[0] = aggregated_data[0] / (double)CALIBRATION_ITERATIONS;
   12c7e:	2200      	movs	r2, #0
   12c80:	2300      	movs	r3, #0
   12c82:	4610      	mov	r0, r2
   12c84:	4619      	mov	r1, r3
   12c86:	f7f9 fd45 	bl	c714 <__aeabi_ddiv>
   12c8a:	4b04      	ldr	r3, [pc, #16]	; (12c9c <orientation_detector_calibrate+0x20>)
   12c8c:	e9c3 0100 	strd	r0, r1, [r3]
	accel_offset[1] = aggregated_data[1] / (double)CALIBRATION_ITERATIONS;
   12c90:	e9c3 0102 	strd	r0, r1, [r3, #8]
	accel_offset[2] = aggregated_data[2] / (double)CALIBRATION_ITERATIONS;
   12c94:	e9c3 0104 	strd	r0, r1, [r3, #16]

	return 0;
}
   12c98:	2000      	movs	r0, #0
   12c9a:	bd08      	pop	{r3, pc}
   12c9c:	20020020 	.word	0x20020020

00012ca0 <orientation_detector_init>:

void orientation_detector_init(struct device *accel_device)
{
	dev = accel_device;
   12ca0:	4b01      	ldr	r3, [pc, #4]	; (12ca8 <orientation_detector_init+0x8>)
   12ca2:	6018      	str	r0, [r3, #0]
}
   12ca4:	4770      	bx	lr
   12ca6:	bf00      	nop
   12ca8:	20020990 	.word	0x20020990

00012cac <z_sys_mem_pool_block_free>:
	return 0;
}

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   12cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cb0:	b087      	sub	sp, #28
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   12cb2:	7a83      	ldrb	r3, [r0, #10]
{
   12cb4:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   12cb6:	009b      	lsls	r3, r3, #2
   12cb8:	330a      	adds	r3, #10
   12cba:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   12cbe:	ebad 0d03 	sub.w	sp, sp, r3
{
   12cc2:	4605      	mov	r5, r0
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
   12cc4:	6843      	ldr	r3, [r0, #4]
   12cc6:	4668      	mov	r0, sp
   12cc8:	3303      	adds	r3, #3
   12cca:	f023 0303 	bic.w	r3, r3, #3
   12cce:	6003      	str	r3, [r0, #0]
   12cd0:	4604      	mov	r4, r0
	for (i = 1; i <= level; i++) {
   12cd2:	2001      	movs	r0, #1
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   12cd4:	f8c7 d00c 	str.w	sp, [r7, #12]
	for (i = 1; i <= level; i++) {
   12cd8:	4281      	cmp	r1, r0
   12cda:	d221      	bcs.n	12d20 <z_sys_mem_pool_block_free+0x74>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   12cdc:	7c28      	ldrb	r0, [r5, #16]
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   12cde:	460e      	mov	r6, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   12ce0:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   12ce4:	4690      	mov	r8, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   12ce6:	d001      	beq.n	12cec <z_sys_mem_pool_block_free+0x40>
   12ce8:	f01b f9f0 	bl	2e0cc <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   12cec:	4604      	mov	r4, r0
	while (level >= 0) {
   12cee:	2e00      	cmp	r6, #0
   12cf0:	da1f      	bge.n	12d32 <z_sys_mem_pool_block_free+0x86>
	__ASSERT(0, "out of levels");
   12cf2:	23c0      	movs	r3, #192	; 0xc0
   12cf4:	4a51      	ldr	r2, [pc, #324]	; (12e3c <z_sys_mem_pool_block_free+0x190>)
   12cf6:	4952      	ldr	r1, [pc, #328]	; (12e40 <z_sys_mem_pool_block_free+0x194>)
   12cf8:	4852      	ldr	r0, [pc, #328]	; (12e44 <z_sys_mem_pool_block_free+0x198>)
   12cfa:	f01b fc9a 	bl	2e632 <printk>
   12cfe:	4852      	ldr	r0, [pc, #328]	; (12e48 <z_sys_mem_pool_block_free+0x19c>)
   12d00:	f01b fc97 	bl	2e632 <printk>
   12d04:	21c0      	movs	r1, #192	; 0xc0
   12d06:	484d      	ldr	r0, [pc, #308]	; (12e3c <z_sys_mem_pool_block_free+0x190>)
   12d08:	f01b fca0 	bl	2e64c <assert_post_action>
	return -1;
   12d0c:	f04f 34ff 	mov.w	r4, #4294967295
	pool_irq_unlock(p, key);
   12d10:	4621      	mov	r1, r4
   12d12:	7c28      	ldrb	r0, [r5, #16]
   12d14:	f01b f9e3 	bl	2e0de <pool_irq_unlock.isra.4>
}
   12d18:	371c      	adds	r7, #28
   12d1a:	46bd      	mov	sp, r7
   12d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
   12d20:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   12d22:	3001      	adds	r0, #1
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
   12d24:	089b      	lsrs	r3, r3, #2
   12d26:	3303      	adds	r3, #3
   12d28:	f023 0303 	bic.w	r3, r3, #3
   12d2c:	f844 3f04 	str.w	r3, [r4, #4]!
   12d30:	e7d2      	b.n	12cd8 <z_sys_mem_pool_block_free+0x2c>
		int i, lsz = lsizes[level];
   12d32:	68fb      	ldr	r3, [r7, #12]
	return p->n_max * p->max_sz;
   12d34:	8929      	ldrh	r1, [r5, #8]
		int i, lsz = lsizes[level];
   12d36:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
		void *block = block_ptr(p, lsz, bn);
   12d3a:	f8d5 b000 	ldr.w	fp, [r5]
	return (u8_t *)p->buf + lsz * block;
   12d3e:	fb03 fa08 	mul.w	sl, r3, r8
		int i, lsz = lsizes[level];
   12d42:	60bb      	str	r3, [r7, #8]
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
   12d44:	3b01      	subs	r3, #1
   12d46:	eb03 020a 	add.w	r2, r3, sl
   12d4a:	607b      	str	r3, [r7, #4]
	return p->n_max * p->max_sz;
   12d4c:	686b      	ldr	r3, [r5, #4]
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
   12d4e:	eb0b 090a 	add.w	r9, fp, sl
	return p->n_max * p->max_sz;
   12d52:	434b      	muls	r3, r1
		__ASSERT(block_fits(p, block, lsz), "");
   12d54:	429a      	cmp	r2, r3
   12d56:	d30c      	bcc.n	12d72 <z_sys_mem_pool_block_free+0xc6>
   12d58:	493c      	ldr	r1, [pc, #240]	; (12e4c <z_sys_mem_pool_block_free+0x1a0>)
   12d5a:	23a4      	movs	r3, #164	; 0xa4
   12d5c:	4a37      	ldr	r2, [pc, #220]	; (12e3c <z_sys_mem_pool_block_free+0x190>)
   12d5e:	4839      	ldr	r0, [pc, #228]	; (12e44 <z_sys_mem_pool_block_free+0x198>)
   12d60:	f01b fc67 	bl	2e632 <printk>
   12d64:	483a      	ldr	r0, [pc, #232]	; (12e50 <z_sys_mem_pool_block_free+0x1a4>)
   12d66:	f01b fc64 	bl	2e632 <printk>
   12d6a:	21a4      	movs	r1, #164	; 0xa4
   12d6c:	4833      	ldr	r0, [pc, #204]	; (12e3c <z_sys_mem_pool_block_free+0x190>)
   12d6e:	f01b fc6d 	bl	2e64c <assert_post_action>
		set_free_bit(p, level, bn);
   12d72:	4642      	mov	r2, r8
   12d74:	4631      	mov	r1, r6
   12d76:	4628      	mov	r0, r5
   12d78:	f01b f98b 	bl	2e092 <set_free_bit>
		sys_dlist_append(&p->levels[level].free_list, block);
   12d7c:	230c      	movs	r3, #12
   12d7e:	68ea      	ldr	r2, [r5, #12]
		pool_irq_unlock(p, key);
   12d80:	4621      	mov	r1, r4
		sys_dlist_append(&p->levels[level].free_list, block);
   12d82:	fb03 2306 	mla	r3, r3, r6, r2
   12d86:	1d1a      	adds	r2, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   12d88:	f84b 200a 	str.w	r2, [fp, sl]
	node->prev = list->tail;
   12d8c:	689a      	ldr	r2, [r3, #8]
   12d8e:	f8c9 2004 	str.w	r2, [r9, #4]

	list->tail->next = node;
   12d92:	689a      	ldr	r2, [r3, #8]
   12d94:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   12d98:	f8c3 9008 	str.w	r9, [r3, #8]
		pool_irq_unlock(p, key);
   12d9c:	7c28      	ldrb	r0, [r5, #16]
   12d9e:	f01b f99e 	bl	2e0de <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   12da2:	7c28      	ldrb	r0, [r5, #16]
   12da4:	f010 0001 	ands.w	r0, r0, #1
   12da8:	d001      	beq.n	12dae <z_sys_mem_pool_block_free+0x102>
   12daa:	f01b f98f 	bl	2e0cc <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   12dae:	4604      	mov	r4, r0
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
   12db0:	2e00      	cmp	r6, #0
   12db2:	d0ad      	beq.n	12d10 <z_sys_mem_pool_block_free+0x64>
	int bit = get_bit_ptr(p, level, bn, &word);
   12db4:	f107 0314 	add.w	r3, r7, #20
   12db8:	4642      	mov	r2, r8
   12dba:	4631      	mov	r1, r6
   12dbc:	4628      	mov	r0, r5
   12dbe:	f01b f952 	bl	2e066 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   12dc2:	2304      	movs	r3, #4
   12dc4:	fb90 f3f3 	sdiv	r3, r0, r3
   12dc8:	697a      	ldr	r2, [r7, #20]
   12dca:	009b      	lsls	r3, r3, #2
   12dcc:	6810      	ldr	r0, [r2, #0]
   12dce:	40d8      	lsrs	r0, r3
   12dd0:	f000 000f 	and.w	r0, r0, #15
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
   12dd4:	280f      	cmp	r0, #15
   12dd6:	d19b      	bne.n	12d10 <z_sys_mem_pool_block_free+0x64>
		for (i = 0; i < 4; i++) {
   12dd8:	f04f 0900 	mov.w	r9, #0
	node->next = NULL;
   12ddc:	46cb      	mov	fp, r9
			int b = (bn & ~3) + i;
   12dde:	f028 0303 	bic.w	r3, r8, #3
   12de2:	603b      	str	r3, [r7, #0]
   12de4:	683b      	ldr	r3, [r7, #0]
	return p->n_max * p->max_sz;
   12de6:	f8b5 c008 	ldrh.w	ip, [r5, #8]
			int b = (bn & ~3) + i;
   12dea:	eb03 0209 	add.w	r2, r3, r9
	return (u8_t *)p->buf + lsz * block;
   12dee:	68bb      	ldr	r3, [r7, #8]
	return p->n_max * p->max_sz;
   12df0:	6869      	ldr	r1, [r5, #4]
	return (u8_t *)p->buf + lsz * block;
   12df2:	fb03 fa02 	mul.w	sl, r3, r2
	return p->n_max * p->max_sz;
   12df6:	fb01 f10c 	mul.w	r1, r1, ip
			if (block_fits(p, block_ptr(p, lsz, b), lsz)) {
   12dfa:	687b      	ldr	r3, [r7, #4]
   12dfc:	eb0a 0003 	add.w	r0, sl, r3
   12e00:	4288      	cmp	r0, r1
   12e02:	d211      	bcs.n	12e28 <z_sys_mem_pool_block_free+0x17c>
				clear_free_bit(p, level, b);
   12e04:	4631      	mov	r1, r6
   12e06:	4628      	mov	r0, r5
   12e08:	f01b f951 	bl	2e0ae <clear_free_bit>
	return (u8_t *)p->buf + lsz * block;
   12e0c:	682a      	ldr	r2, [r5, #0]
   12e0e:	eb02 010a 	add.w	r1, r2, sl
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   12e12:	f852 000a 	ldr.w	r0, [r2, sl]
   12e16:	684b      	ldr	r3, [r1, #4]
   12e18:	6018      	str	r0, [r3, #0]
	node->next->prev = node->prev;
   12e1a:	f852 000a 	ldr.w	r0, [r2, sl]
   12e1e:	6043      	str	r3, [r0, #4]
	node->next = NULL;
   12e20:	f842 b00a 	str.w	fp, [r2, sl]
	node->prev = NULL;
   12e24:	f8c1 b004 	str.w	fp, [r1, #4]
		for (i = 0; i < 4; i++) {
   12e28:	f109 0901 	add.w	r9, r9, #1
   12e2c:	f1b9 0f04 	cmp.w	r9, #4
   12e30:	d1d8      	bne.n	12de4 <z_sys_mem_pool_block_free+0x138>
		level = level - 1;
   12e32:	3e01      	subs	r6, #1
		bn = bn / 4;
   12e34:	fb98 f8f9 	sdiv	r8, r8, r9
   12e38:	e759      	b.n	12cee <z_sys_mem_pool_block_free+0x42>
   12e3a:	bf00      	nop
   12e3c:	0003466c 	.word	0x0003466c
   12e40:	00035e56 	.word	0x00035e56
   12e44:	0003452c 	.word	0x0003452c
   12e48:	000346b3 	.word	0x000346b3
   12e4c:	00034696 	.word	0x00034696
   12e50:	000346b0 	.word	0x000346b0

00012e54 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   12e54:	680b      	ldr	r3, [r1, #0]
   12e56:	3301      	adds	r3, #1
   12e58:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   12e5a:	4b01      	ldr	r3, [pc, #4]	; (12e60 <char_out+0xc>)
   12e5c:	681b      	ldr	r3, [r3, #0]
   12e5e:	4718      	bx	r3
   12e60:	2002d814 	.word	0x2002d814

00012e64 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   12e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e68:	b085      	sub	sp, #20
   12e6a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   12e6c:	469b      	mov	fp, r3
   12e6e:	2c01      	cmp	r4, #1
   12e70:	bfb8      	it	lt
   12e72:	2401      	movlt	r4, #1
   12e74:	2b01      	cmp	r3, #1
   12e76:	bf0c      	ite	eq
   12e78:	2330      	moveq	r3, #48	; 0x30
   12e7a:	2320      	movne	r3, #32
   12e7c:	4615      	mov	r5, r2
   12e7e:	4680      	mov	r8, r0
   12e80:	4689      	mov	r9, r1
   12e82:	2601      	movs	r6, #1
   12e84:	270a      	movs	r7, #10
   12e86:	2200      	movs	r2, #0
   12e88:	f8df a070 	ldr.w	sl, [pc, #112]	; 12efc <_printk_dec_ulong+0x98>
   12e8c:	9401      	str	r4, [sp, #4]
   12e8e:	9302      	str	r3, [sp, #8]
   12e90:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit != 0 || remainder > pos) {
   12e94:	b90a      	cbnz	r2, 12e9a <_printk_dec_ulong+0x36>
   12e96:	45aa      	cmp	sl, r5
   12e98:	d21e      	bcs.n	12ed8 <_printk_dec_ulong+0x74>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
   12e9a:	fbb5 f0f4 	udiv	r0, r5, r4
   12e9e:	4649      	mov	r1, r9
   12ea0:	3030      	adds	r0, #48	; 0x30
   12ea2:	47c0      	blx	r8
			found_largest_digit = 1;
   12ea4:	2201      	movs	r2, #1
			digits++;
   12ea6:	3601      	adds	r6, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= (pos + 1);
   12ea8:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
   12eac:	230a      	movs	r3, #10
		remaining--;
   12eae:	3f01      	subs	r7, #1
	while (pos >= 9) {
   12eb0:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
   12eb2:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
   12eb6:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
   12eba:	d1e9      	bne.n	12e90 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
   12ebc:	4649      	mov	r1, r9
   12ebe:	f105 0030 	add.w	r0, r5, #48	; 0x30
   12ec2:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
   12ec4:	f1bb 0f03 	cmp.w	fp, #3
   12ec8:	d103      	bne.n	12ed2 <_printk_dec_ulong+0x6e>
		remaining = min_width - digits;
   12eca:	9b01      	ldr	r3, [sp, #4]
   12ecc:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
   12ece:	2c00      	cmp	r4, #0
   12ed0:	dc0f      	bgt.n	12ef2 <_printk_dec_ulong+0x8e>
			out(' ', ctx);
		}
	}
}
   12ed2:	b005      	add	sp, #20
   12ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   12ed8:	9b01      	ldr	r3, [sp, #4]
   12eda:	42bb      	cmp	r3, r7
   12edc:	dbe4      	blt.n	12ea8 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
   12ede:	f1bb 0f02 	cmp.w	fp, #2
   12ee2:	d8e1      	bhi.n	12ea8 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   12ee4:	4649      	mov	r1, r9
   12ee6:	9802      	ldr	r0, [sp, #8]
   12ee8:	9203      	str	r2, [sp, #12]
			digits++;
   12eea:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   12eec:	47c0      	blx	r8
			digits++;
   12eee:	9a03      	ldr	r2, [sp, #12]
   12ef0:	e7da      	b.n	12ea8 <_printk_dec_ulong+0x44>
			out(' ', ctx);
   12ef2:	4649      	mov	r1, r9
   12ef4:	2020      	movs	r0, #32
   12ef6:	47c0      	blx	r8
   12ef8:	3c01      	subs	r4, #1
   12efa:	e7e8      	b.n	12ece <_printk_dec_ulong+0x6a>
   12efc:	3b9ac9ff 	.word	0x3b9ac9ff

00012f00 <__printk_hook_install>:
	_char_out = fn;
   12f00:	4b01      	ldr	r3, [pc, #4]	; (12f08 <__printk_hook_install+0x8>)
   12f02:	6018      	str	r0, [r3, #0]
}
   12f04:	4770      	bx	lr
   12f06:	bf00      	nop
   12f08:	2002d814 	.word	0x2002d814

00012f0c <vprintk>:
	struct out_context ctx = { 0 };
   12f0c:	2300      	movs	r3, #0
{
   12f0e:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
   12f10:	ac02      	add	r4, sp, #8
   12f12:	f844 3d04 	str.w	r3, [r4, #-4]!
	z_vprintk(char_out, &ctx, fmt, ap);
   12f16:	4602      	mov	r2, r0
   12f18:	460b      	mov	r3, r1
   12f1a:	4803      	ldr	r0, [pc, #12]	; (12f28 <vprintk+0x1c>)
   12f1c:	4621      	mov	r1, r4
   12f1e:	f01b fa2c 	bl	2e37a <z_vprintk>
}
   12f22:	b002      	add	sp, #8
   12f24:	bd10      	pop	{r4, pc}
   12f26:	bf00      	nop
   12f28:	00012e55 	.word	0x00012e55

00012f2c <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   12f2c:	f04f 0220 	mov.w	r2, #32
   12f30:	f3ef 8311 	mrs	r3, BASEPRI
   12f34:	f382 8811 	msr	BASEPRI, r2
   12f38:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   12f3c:	2101      	movs	r1, #1
   12f3e:	4a04      	ldr	r2, [pc, #16]	; (12f50 <nordicsemi_nrf91_init+0x24>)
   12f40:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   12f44:	f383 8811 	msr	BASEPRI, r3
   12f48:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   12f4c:	2000      	movs	r0, #0
   12f4e:	4770      	bx	lr
   12f50:	40039000 	.word	0x40039000

00012f54 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   12f54:	4a07      	ldr	r2, [pc, #28]	; (12f74 <SystemInit+0x20>)
   12f56:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   12f5a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   12f5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12f62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12f66:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   12f6a:	4b03      	ldr	r3, [pc, #12]	; (12f78 <SystemInit+0x24>)
   12f6c:	4a03      	ldr	r2, [pc, #12]	; (12f7c <SystemInit+0x28>)
   12f6e:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   12f70:	4770      	bx	lr
   12f72:	bf00      	nop
   12f74:	e000ed00 	.word	0xe000ed00
   12f78:	2002d818 	.word	0x2002d818
   12f7c:	03d09000 	.word	0x03d09000

00012f80 <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
__STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   12f80:	4a04      	ldr	r2, [pc, #16]	; (12f94 <nvmc_word_write+0x14>)
   12f82:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   12f86:	07db      	lsls	r3, r3, #31
   12f88:	d5fb      	bpl.n	12f82 <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   12f8a:	6001      	str	r1, [r0, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   12f8c:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   12f90:	4770      	bx	lr
   12f92:	bf00      	nop
   12f94:	40039000 	.word	0x40039000

00012f98 <partial_word_create>:
{
   12f98:	b513      	push	{r0, r1, r4, lr}
    byte_shift = addr % NVMC_BYTES_IN_WORD;
   12f9a:	f000 0003 	and.w	r0, r0, #3
    NRFX_ASSERT(bytes_count <= (NVMC_BYTES_IN_WORD - byte_shift));
   12f9e:	f1c0 0304 	rsb	r3, r0, #4
   12fa2:	4293      	cmp	r3, r2
   12fa4:	d205      	bcs.n	12fb2 <partial_word_create+0x1a>
   12fa6:	4b0b      	ldr	r3, [pc, #44]	; (12fd4 <partial_word_create+0x3c>)
   12fa8:	4a0b      	ldr	r2, [pc, #44]	; (12fd8 <partial_word_create+0x40>)
   12faa:	2192      	movs	r1, #146	; 0x92
   12fac:	480b      	ldr	r0, [pc, #44]	; (12fdc <partial_word_create+0x44>)
   12fae:	f017 f8df 	bl	2a170 <__assert_func>
    value32 = 0xFFFFFFFF;
   12fb2:	f04f 33ff 	mov.w	r3, #4294967295
   12fb6:	ac02      	add	r4, sp, #8
   12fb8:	f844 3d04 	str.w	r3, [r4, #-4]!
    for (uint32_t i = 0; i < bytes_count; i++)
   12fbc:	2300      	movs	r3, #0
        ((uint8_t *)&value32)[byte_shift] = bytes[i];
   12fbe:	4404      	add	r4, r0
    for (uint32_t i = 0; i < bytes_count; i++)
   12fc0:	4293      	cmp	r3, r2
   12fc2:	d102      	bne.n	12fca <partial_word_create+0x32>
}
   12fc4:	9801      	ldr	r0, [sp, #4]
   12fc6:	b002      	add	sp, #8
   12fc8:	bd10      	pop	{r4, pc}
        ((uint8_t *)&value32)[byte_shift] = bytes[i];
   12fca:	5cc8      	ldrb	r0, [r1, r3]
   12fcc:	54e0      	strb	r0, [r4, r3]
    for (uint32_t i = 0; i < bytes_count; i++)
   12fce:	3301      	adds	r3, #1
   12fd0:	e7f6      	b.n	12fc0 <partial_word_create+0x28>
   12fd2:	bf00      	nop
   12fd4:	0003476d 	.word	0x0003476d
   12fd8:	000346d2 	.word	0x000346d2
   12fdc:	0003478d 	.word	0x0003478d

00012fe0 <nrfx_nvmc_page_erase>:
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(addr < flash_total_size_get());
   12fe0:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   12fe4:	b508      	push	{r3, lr}
    NRFX_ASSERT(addr < flash_total_size_get());
   12fe6:	d305      	bcc.n	12ff4 <nrfx_nvmc_page_erase+0x14>
   12fe8:	4b0d      	ldr	r3, [pc, #52]	; (13020 <nrfx_nvmc_page_erase+0x40>)
   12fea:	4a0e      	ldr	r2, [pc, #56]	; (13024 <nrfx_nvmc_page_erase+0x44>)
   12fec:	21d1      	movs	r1, #209	; 0xd1
   12fee:	480e      	ldr	r0, [pc, #56]	; (13028 <nrfx_nvmc_page_erase+0x48>)
   12ff0:	f017 f8be 	bl	2a170 <__assert_func>
    return !(addr % flash_page_size_get());
   12ff4:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   12ff8:	b97b      	cbnz	r3, 1301a <nrfx_nvmc_page_erase+0x3a>

#if defined(NVMC_CONFIGNS_WEN_Msk)
__STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                 nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   12ffa:	2202      	movs	r2, #2
   12ffc:	4b0b      	ldr	r3, [pc, #44]	; (1302c <nrfx_nvmc_page_erase+0x4c>)
   12ffe:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   13002:	f04f 32ff 	mov.w	r2, #4294967295
   13006:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   13008:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1300c:	07d2      	lsls	r2, r2, #31
   1300e:	d5fb      	bpl.n	13008 <nrfx_nvmc_page_erase+0x28>
    p_reg->CONFIGNS = (uint32_t)mode;
   13010:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   13012:	4807      	ldr	r0, [pc, #28]	; (13030 <nrfx_nvmc_page_erase+0x50>)
   13014:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   13018:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1301a:	4806      	ldr	r0, [pc, #24]	; (13034 <nrfx_nvmc_page_erase+0x54>)
   1301c:	e7fc      	b.n	13018 <nrfx_nvmc_page_erase+0x38>
   1301e:	bf00      	nop
   13020:	00034726 	.word	0x00034726
   13024:	000346e6 	.word	0x000346e6
   13028:	0003478d 	.word	0x0003478d
   1302c:	40039000 	.word	0x40039000
   13030:	0bad0000 	.word	0x0bad0000
   13034:	0bad000a 	.word	0x0bad000a

00013038 <nrfx_nvmc_word_write>:
    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, &value, 1));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    NRFX_ASSERT(addr < flash_total_size_get());
   13038:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   1303c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(addr < flash_total_size_get());
   1303e:	d306      	bcc.n	1304e <nrfx_nvmc_word_write+0x16>
   13040:	f240 1141 	movw	r1, #321	; 0x141
   13044:	4b0a      	ldr	r3, [pc, #40]	; (13070 <nrfx_nvmc_word_write+0x38>)
   13046:	4a0b      	ldr	r2, [pc, #44]	; (13074 <nrfx_nvmc_word_write+0x3c>)
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   13048:	480b      	ldr	r0, [pc, #44]	; (13078 <nrfx_nvmc_word_write+0x40>)
   1304a:	f017 f891 	bl	2a170 <__assert_func>
   1304e:	f010 0403 	ands.w	r4, r0, #3
   13052:	d004      	beq.n	1305e <nrfx_nvmc_word_write+0x26>
   13054:	4b09      	ldr	r3, [pc, #36]	; (1307c <nrfx_nvmc_word_write+0x44>)
   13056:	4a07      	ldr	r2, [pc, #28]	; (13074 <nrfx_nvmc_word_write+0x3c>)
   13058:	f44f 71a1 	mov.w	r1, #322	; 0x142
   1305c:	e7f4      	b.n	13048 <nrfx_nvmc_word_write+0x10>
   1305e:	2301      	movs	r3, #1
   13060:	4d07      	ldr	r5, [pc, #28]	; (13080 <nrfx_nvmc_word_write+0x48>)
   13062:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   13066:	f7ff ff8b 	bl	12f80 <nvmc_word_write>
   1306a:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   1306e:	bd38      	pop	{r3, r4, r5, pc}
   13070:	00034726 	.word	0x00034726
   13074:	000346fb 	.word	0x000346fb
   13078:	0003478d 	.word	0x0003478d
   1307c:	00034744 	.word	0x00034744
   13080:	40039000 	.word	0x40039000

00013084 <nrfx_nvmc_bytes_write>:

void nrfx_nvmc_bytes_write(uint32_t addr, void const * src, uint32_t num_bytes)
{
    NRFX_ASSERT(addr < flash_total_size_get());
   13084:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   13088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1308c:	4604      	mov	r4, r0
   1308e:	460e      	mov	r6, r1
   13090:	4615      	mov	r5, r2
    NRFX_ASSERT(addr < flash_total_size_get());
   13092:	d306      	bcc.n	130a2 <nrfx_nvmc_bytes_write+0x1e>
   13094:	4b20      	ldr	r3, [pc, #128]	; (13118 <nrfx_nvmc_bytes_write+0x94>)
   13096:	4a21      	ldr	r2, [pc, #132]	; (1311c <nrfx_nvmc_bytes_write+0x98>)
   13098:	f240 114d 	movw	r1, #333	; 0x14d
   1309c:	4820      	ldr	r0, [pc, #128]	; (13120 <nrfx_nvmc_bytes_write+0x9c>)
   1309e:	f017 f867 	bl	2a170 <__assert_func>
   130a2:	2201      	movs	r2, #1
   130a4:	4b1f      	ldr	r3, [pc, #124]	; (13124 <nrfx_nvmc_bytes_write+0xa0>)
   130a6:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nvmc_write_mode_set();

    uint8_t const * bytes_src = (uint8_t const *)src;

    uint32_t unaligned_bytes = addr % NVMC_BYTES_IN_WORD;
    if (unaligned_bytes != 0)
   130aa:	f010 0303 	ands.w	r3, r0, #3
   130ae:	d010      	beq.n	130d2 <nrfx_nvmc_bytes_write+0x4e>
    {
        uint32_t leading_bytes = NVMC_BYTES_IN_WORD - unaligned_bytes;
   130b0:	f1c3 0704 	rsb	r7, r3, #4
   130b4:	42af      	cmp	r7, r5
   130b6:	bf28      	it	cs
   130b8:	462f      	movcs	r7, r5
        if (leading_bytes > num_bytes)
        {
            leading_bytes = num_bytes;
        }

        nvmc_word_write(addr - unaligned_bytes,
   130ba:	463a      	mov	r2, r7
   130bc:	eba0 0803 	sub.w	r8, r0, r3
   130c0:	f7ff ff6a 	bl	12f98 <partial_word_create>
   130c4:	4601      	mov	r1, r0
   130c6:	4640      	mov	r0, r8
   130c8:	f7ff ff5a 	bl	12f80 <nvmc_word_write>
                        partial_word_create(addr, bytes_src, leading_bytes));
        num_bytes -= leading_bytes;
   130cc:	1bed      	subs	r5, r5, r7
        addr      += leading_bytes;
   130ce:	443c      	add	r4, r7
        bytes_src += leading_bytes;
   130d0:	443e      	add	r6, r7
        }
    }
    else
#endif
    {
        uint32_t word_count = num_bytes / NVMC_BYTES_IN_WORD;
   130d2:	4637      	mov	r7, r6
   130d4:	f025 0803 	bic.w	r8, r5, #3
   130d8:	44b0      	add	r8, r6
   130da:	eba4 0906 	sub.w	r9, r4, r6
    for (uint32_t i = 0; i < num_words; i++)
   130de:	45b8      	cmp	r8, r7
   130e0:	d113      	bne.n	1310a <nrfx_nvmc_bytes_write+0x86>
        addr += word_count * NVMC_BYTES_IN_WORD;
        bytes_src += word_count * NVMC_BYTES_IN_WORD;
    }

    uint32_t trailing_bytes = num_bytes % NVMC_BYTES_IN_WORD;
    if (trailing_bytes != 0)
   130e2:	f015 0203 	ands.w	r2, r5, #3
   130e6:	d00a      	beq.n	130fe <nrfx_nvmc_bytes_write+0x7a>
        addr += word_count * NVMC_BYTES_IN_WORD;
   130e8:	f025 0103 	bic.w	r1, r5, #3
   130ec:	440c      	add	r4, r1
    {
        nvmc_word_write(addr, partial_word_create(addr, bytes_src, trailing_bytes));
   130ee:	4620      	mov	r0, r4
   130f0:	4431      	add	r1, r6
   130f2:	f7ff ff51 	bl	12f98 <partial_word_create>
   130f6:	4601      	mov	r1, r0
   130f8:	4620      	mov	r0, r4
   130fa:	f7ff ff41 	bl	12f80 <nvmc_word_write>
   130fe:	2200      	movs	r2, #0
   13100:	4b08      	ldr	r3, [pc, #32]	; (13124 <nrfx_nvmc_bytes_write+0xa0>)
   13102:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    }

    nvmc_readonly_mode_set();
}
   13106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1310a:	eb09 0007 	add.w	r0, r9, r7
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
   1310e:	f857 1b04 	ldr.w	r1, [r7], #4
   13112:	f7ff ff35 	bl	12f80 <nvmc_word_write>
   13116:	e7e2      	b.n	130de <nrfx_nvmc_bytes_write+0x5a>
   13118:	00034726 	.word	0x00034726
   1311c:	00034710 	.word	0x00034710
   13120:	0003478d 	.word	0x0003478d
   13124:	40039000 	.word	0x40039000

00013128 <socket_offload_register>:

/* Only one provider may register socket operations upon boot. */
const struct socket_offload *socket_ops;

void socket_offload_register(const struct socket_offload *ops)
{
   13128:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   1312a:	4605      	mov	r5, r0
   1312c:	b948      	cbnz	r0, 13142 <socket_offload_register+0x1a>
   1312e:	490c      	ldr	r1, [pc, #48]	; (13160 <socket_offload_register+0x38>)
   13130:	480c      	ldr	r0, [pc, #48]	; (13164 <socket_offload_register+0x3c>)
   13132:	2311      	movs	r3, #17
   13134:	4a0c      	ldr	r2, [pc, #48]	; (13168 <socket_offload_register+0x40>)
   13136:	f01b fa7c 	bl	2e632 <printk>
   1313a:	2111      	movs	r1, #17
   1313c:	480a      	ldr	r0, [pc, #40]	; (13168 <socket_offload_register+0x40>)
   1313e:	f01b fa85 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops == NULL);
   13142:	4c0a      	ldr	r4, [pc, #40]	; (1316c <socket_offload_register+0x44>)
   13144:	6822      	ldr	r2, [r4, #0]
   13146:	b14a      	cbz	r2, 1315c <socket_offload_register+0x34>
   13148:	4909      	ldr	r1, [pc, #36]	; (13170 <socket_offload_register+0x48>)
   1314a:	4806      	ldr	r0, [pc, #24]	; (13164 <socket_offload_register+0x3c>)
   1314c:	2312      	movs	r3, #18
   1314e:	4a06      	ldr	r2, [pc, #24]	; (13168 <socket_offload_register+0x40>)
   13150:	f01b fa6f 	bl	2e632 <printk>
   13154:	2112      	movs	r1, #18
   13156:	4804      	ldr	r0, [pc, #16]	; (13168 <socket_offload_register+0x40>)
   13158:	f01b fa78 	bl	2e64c <assert_post_action>

	socket_ops = ops;
   1315c:	6025      	str	r5, [r4, #0]
}
   1315e:	bd38      	pop	{r3, r4, r5, pc}
   13160:	000356b5 	.word	0x000356b5
   13164:	0003452c 	.word	0x0003452c
   13168:	000347d2 	.word	0x000347d2
   1316c:	20020994 	.word	0x20020994
   13170:	00034813 	.word	0x00034813

00013174 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   13174:	b508      	push	{r3, lr}
   13176:	4604      	mov	r4, r0
	__asm__ volatile(
   13178:	f04f 0220 	mov.w	r2, #32
   1317c:	f3ef 8311 	mrs	r3, BASEPRI
   13180:	f382 8811 	msr	BASEPRI, r2
   13184:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   13188:	f01b fa83 	bl	2e692 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   1318c:	4620      	mov	r0, r4
   1318e:	f01b fa81 	bl	2e694 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   13192:	4803      	ldr	r0, [pc, #12]	; (131a0 <sys_reboot+0x2c>)
   13194:	f01b fa4d 	bl	2e632 <printk>
	for (;;) {
		k_cpu_idle();
   13198:	f000 fbac 	bl	138f4 <k_cpu_idle>
   1319c:	e7fc      	b.n	13198 <sys_reboot+0x24>
   1319e:	bf00      	nop
   131a0:	0003482d 	.word	0x0003482d

000131a4 <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   131a4:	4b0a      	ldr	r3, [pc, #40]	; (131d0 <console_out+0x2c>)
{
   131a6:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   131a8:	b2c6      	uxtb	r6, r0
{
   131aa:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   131ac:	681b      	ldr	r3, [r3, #0]
   131ae:	4630      	mov	r0, r6
   131b0:	4798      	blx	r3

	if (handled_by_debug_server) {
   131b2:	2801      	cmp	r0, #1
   131b4:	d00a      	beq.n	131cc <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   131b6:	2c0a      	cmp	r4, #10
   131b8:	4d06      	ldr	r5, [pc, #24]	; (131d4 <console_out+0x30>)
   131ba:	d103      	bne.n	131c4 <console_out+0x20>

K_SYSCALL_DECLARE1(K_SYSCALL_UART_ERR_CHECK, uart_err_check, int, struct device *, dev)

K_SYSCALL_DECLARE2(K_SYSCALL_UART_POLL_IN, uart_poll_in, int, struct device *, dev, unsigned char *, p_char)

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_UART_POLL_OUT, uart_poll_out, struct device *, dev, unsigned char, out_char)
   131bc:	210d      	movs	r1, #13
   131be:	6828      	ldr	r0, [r5, #0]
   131c0:	f01b fa56 	bl	2e670 <z_impl_uart_poll_out>
   131c4:	4631      	mov	r1, r6
   131c6:	6828      	ldr	r0, [r5, #0]
   131c8:	f01b fa52 	bl	2e670 <z_impl_uart_poll_out>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);

	return c;
}
   131cc:	4620      	mov	r0, r4
   131ce:	bd70      	pop	{r4, r5, r6, pc}
   131d0:	2002d81c 	.word	0x2002d81c
   131d4:	20020998 	.word	0x20020998

000131d8 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
   131d8:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
   131da:	4c04      	ldr	r4, [pc, #16]	; (131ec <uart_console_hook_install+0x14>)
   131dc:	4620      	mov	r0, r4
   131de:	f001 f911 	bl	14404 <__stdout_hook_install>
	__printk_hook_install(console_out);
   131e2:	4620      	mov	r0, r4
}
   131e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
   131e8:	f7ff be8a 	b.w	12f00 <__printk_hook_install>
   131ec:	000131a5 	.word	0x000131a5

000131f0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
   131f0:	b508      	push	{r3, lr}
   131f2:	4804      	ldr	r0, [pc, #16]	; (13204 <uart_console_init+0x14>)
   131f4:	f013 faf6 	bl	267e4 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   131f8:	4b03      	ldr	r3, [pc, #12]	; (13208 <uart_console_init+0x18>)
   131fa:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
   131fc:	f7ff ffec 	bl	131d8 <uart_console_hook_install>

	return 0;
}
   13200:	2000      	movs	r0, #0
   13202:	bd08      	pop	{r3, pc}
   13204:	00034856 	.word	0x00034856
   13208:	20020998 	.word	0x20020998

0001320c <m16src_stop>:
		return -EINPROGRESS;
	}
}

static int m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
   1320c:	b510      	push	{r4, lr}
   1320e:	f04f 0320 	mov.w	r3, #32
   13212:	f3ef 8211 	mrs	r2, BASEPRI
   13216:	f383 8811 	msr	BASEPRI, r3
   1321a:	f3bf 8f6f 	isb	sy
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
   1321e:	4c15      	ldr	r4, [pc, #84]	; (13274 <m16src_stop+0x68>)
   13220:	7823      	ldrb	r3, [r4, #0]
   13222:	b933      	cbnz	r3, 13232 <m16src_stop+0x26>
	__asm__ volatile(
   13224:	f382 8811 	msr	BASEPRI, r2
   13228:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		return -EALREADY;
   1322c:	f06f 0077 	mvn.w	r0, #119	; 0x77

	/* release resource guard */
	m16src_grd = 0U;

	return 0;
}
   13230:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
   13232:	3b01      	subs	r3, #1
   13234:	b2db      	uxtb	r3, r3
   13236:	7023      	strb	r3, [r4, #0]
   13238:	b133      	cbz	r3, 13248 <m16src_stop+0x3c>
   1323a:	f382 8811 	msr	BASEPRI, r2
   1323e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   13242:	f06f 000f 	mvn.w	r0, #15
   13246:	e7f3      	b.n	13230 <m16src_stop+0x24>
	if (m16src_grd) {
   13248:	4b0b      	ldr	r3, [pc, #44]	; (13278 <m16src_stop+0x6c>)
   1324a:	2101      	movs	r1, #1
   1324c:	7818      	ldrb	r0, [r3, #0]
   1324e:	b138      	cbz	r0, 13260 <m16src_stop+0x54>
		m16src_ref++;
   13250:	7021      	strb	r1, [r4, #0]
   13252:	f382 8811 	msr	BASEPRI, r2
   13256:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1325a:	f06f 000a 	mvn.w	r0, #10
   1325e:	e7e7      	b.n	13230 <m16src_stop+0x24>
	m16src_grd = 1U;
   13260:	7019      	strb	r1, [r3, #0]
   13262:	f382 8811 	msr	BASEPRI, r2
   13266:	f3bf 8f6f 	isb	sy
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   1326a:	4a04      	ldr	r2, [pc, #16]	; (1327c <m16src_stop+0x70>)
   1326c:	6011      	str	r1, [r2, #0]
	m16src_grd = 0U;
   1326e:	7018      	strb	r0, [r3, #0]
	return 0;
   13270:	e7de      	b.n	13230 <m16src_stop+0x24>
   13272:	bf00      	nop
   13274:	200278f3 	.word	0x200278f3
   13278:	200278f2 	.word	0x200278f2
   1327c:	40005004 	.word	0x40005004

00013280 <k32src_start>:

static int k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
   13280:	b510      	push	{r4, lr}
	__asm__ volatile(
   13282:	f04f 0220 	mov.w	r2, #32
   13286:	f3ef 8311 	mrs	r3, BASEPRI
   1328a:	f382 8811 	msr	BASEPRI, r2
   1328e:	f3bf 8f6f 	isb	sy
	 * initialized flag.
	 */

	imask = irq_lock();

	if (k32src_initialized) {
   13292:	4c13      	ldr	r4, [pc, #76]	; (132e0 <k32src_start+0x60>)
   13294:	7820      	ldrb	r0, [r4, #0]
   13296:	b190      	cbz	r0, 132be <k32src_start+0x3e>
	__asm__ volatile(
   13298:	f383 8811 	msr	BASEPRI, r3
   1329c:	f3bf 8f6f 	isb	sy
		}
	}
#endif /* NRF_CLOCK_HAS_CALIBRATION */

lf_already_started:
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
   132a0:	4a10      	ldr	r2, [pc, #64]	; (132e4 <k32src_start+0x64>)
   132a2:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	       CLOCK_LFCLKSTAT_STATE_Msk;
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
   132a6:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
   132aa:	f003 0303 	and.w	r3, r3, #3
   132ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
   132b2:	4393      	bics	r3, r2
		return 0;
	} else {
		return -EINPROGRESS;
	}
}
   132b4:	bf14      	ite	ne
   132b6:	f06f 0076 	mvnne.w	r0, #118	; 0x76
   132ba:	2000      	moveq	r0, #0
   132bc:	bd10      	pop	{r4, pc}
	k32src_initialized = 1U;
   132be:	2201      	movs	r2, #1
   132c0:	7022      	strb	r2, [r4, #0]
   132c2:	f383 8811 	msr	BASEPRI, r3
   132c6:	f3bf 8f6f 	isb	sy
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
   132ca:	4b06      	ldr	r3, [pc, #24]	; (132e4 <k32src_start+0x64>)
   132cc:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
   132d0:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
   132d4:	2102      	movs	r1, #2
   132d6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   132da:	609a      	str	r2, [r3, #8]
   132dc:	e7e0      	b.n	132a0 <k32src_start+0x20>
   132de:	bf00      	nop
   132e0:	200278f1 	.word	0x200278f1
   132e4:	40005000 	.word	0x40005000

000132e8 <nrf_power_clock_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void nrf_power_clock_isr(void *arg)
{
   132e8:	b538      	push	{r3, r4, r5, lr}
#endif
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
	bool usb_detected, usb_pwr_rdy, usb_removed;
#endif

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
   132ea:	4b20      	ldr	r3, [pc, #128]	; (1336c <nrf_power_clock_isr+0x84>)
   132ec:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108

	hf_intenset = ((NRF_CLOCK->INTENSET &
   132f0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		       CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
   132f4:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	hf_intenset = ((NRF_CLOCK->INTENSET &
   132f8:	f002 0201 	and.w	r2, r2, #1

	lf_intenset = ((NRF_CLOCK->INTENSET &
   132fc:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
		       CLOCK_INTENSET_LFCLKSTARTED_Msk) != 0);
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
   13300:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
	usb_detected = nrf_power_event_check(NRF_POWER_EVENT_USBDETECTED);
	usb_pwr_rdy = nrf_power_event_check(NRF_POWER_EVENT_USBPWRRDY);
	usb_removed = nrf_power_event_check(NRF_POWER_EVENT_USBREMOVED);
#endif

	__ASSERT_NO_MSG(pof || hf || hf_intenset || lf
   13304:	bb1d      	cbnz	r5, 1334e <nrf_power_clock_isr+0x66>
   13306:	b978      	cbnz	r0, 13328 <nrf_power_clock_isr+0x40>
   13308:	bb42      	cbnz	r2, 1335c <nrf_power_clock_isr+0x74>
   1330a:	b9b1      	cbnz	r1, 1333a <nrf_power_clock_isr+0x52>
   1330c:	f240 1345 	movw	r3, #325	; 0x145
   13310:	4917      	ldr	r1, [pc, #92]	; (13370 <nrf_power_clock_isr+0x88>)
   13312:	4818      	ldr	r0, [pc, #96]	; (13374 <nrf_power_clock_isr+0x8c>)
   13314:	4a18      	ldr	r2, [pc, #96]	; (13378 <nrf_power_clock_isr+0x90>)
   13316:	f01b f98c 	bl	2e632 <printk>
	if (usb_removed) {
		nrf_power_event_clear(NRF_POWER_EVENT_USBREMOVED);
		power_event_cb(NRF_POWER_EVENT_USBREMOVED);
	}
#endif
}
   1331a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	__ASSERT_NO_MSG(pof || hf || hf_intenset || lf
   1331e:	f240 1145 	movw	r1, #325	; 0x145
   13322:	4815      	ldr	r0, [pc, #84]	; (13378 <nrf_power_clock_isr+0x90>)
   13324:	f01b b992 	b.w	2e64c <assert_post_action>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   13328:	2000      	movs	r0, #0
   1332a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
   1332e:	b11a      	cbz	r2, 13338 <nrf_power_clock_isr+0x50>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
   13330:	2201      	movs	r2, #1
   13332:	4b0e      	ldr	r3, [pc, #56]	; (1336c <nrf_power_clock_isr+0x84>)
   13334:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	if (lf) {
   13338:	b141      	cbz	r1, 1334c <nrf_power_clock_isr+0x64>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
   1333a:	2200      	movs	r2, #0
   1333c:	4b0b      	ldr	r3, [pc, #44]	; (1336c <nrf_power_clock_isr+0x84>)
   1333e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (lf_intenset) {
   13342:	07a2      	lsls	r2, r4, #30
   13344:	d502      	bpl.n	1334c <nrf_power_clock_isr+0x64>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
   13346:	2202      	movs	r2, #2
   13348:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1334c:	bd38      	pop	{r3, r4, r5, pc}
		NRF_POWER->EVENTS_POFWARN = 0;
   1334e:	2500      	movs	r5, #0
   13350:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
	if (hf) {
   13354:	2800      	cmp	r0, #0
   13356:	d1e7      	bne.n	13328 <nrf_power_clock_isr+0x40>
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
   13358:	2a00      	cmp	r2, #0
   1335a:	d0ed      	beq.n	13338 <nrf_power_clock_isr+0x50>
   1335c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   13360:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
   13364:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
   13368:	d1e6      	bne.n	13338 <nrf_power_clock_isr+0x50>
   1336a:	e7e1      	b.n	13330 <nrf_power_clock_isr+0x48>
   1336c:	40005000 	.word	0x40005000
   13370:	000348a9 	.word	0x000348a9
   13374:	0003452c 	.word	0x0003452c
   13378:	00034868 	.word	0x00034868

0001337c <m16src_start>:
{
   1337c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__asm__ volatile(
   13380:	f04f 0320 	mov.w	r3, #32
   13384:	f3ef 8211 	mrs	r2, BASEPRI
   13388:	f383 8811 	msr	BASEPRI, r3
   1338c:	f3bf 8f6f 	isb	sy
	if (m16src_ref++) {
   13390:	4b30      	ldr	r3, [pc, #192]	; (13454 <m16src_start+0xd8>)
   13392:	7818      	ldrb	r0, [r3, #0]
   13394:	461f      	mov	r7, r3
   13396:	1c44      	adds	r4, r0, #1
   13398:	701c      	strb	r4, [r3, #0]
   1339a:	b1d8      	cbz	r0, 133d4 <m16src_start+0x58>
	__asm__ volatile(
   1339c:	f382 8811 	msr	BASEPRI, r2
   133a0:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(m16src_ref);
   133a4:	783b      	ldrb	r3, [r7, #0]
   133a6:	b94b      	cbnz	r3, 133bc <m16src_start+0x40>
   133a8:	492b      	ldr	r1, [pc, #172]	; (13458 <m16src_start+0xdc>)
   133aa:	482c      	ldr	r0, [pc, #176]	; (1345c <m16src_start+0xe0>)
   133ac:	2360      	movs	r3, #96	; 0x60
   133ae:	4a2c      	ldr	r2, [pc, #176]	; (13460 <m16src_start+0xe4>)
   133b0:	f01b f93f 	bl	2e632 <printk>
   133b4:	2160      	movs	r1, #96	; 0x60
   133b6:	482a      	ldr	r0, [pc, #168]	; (13460 <m16src_start+0xe4>)
   133b8:	f01b f948 	bl	2e64c <assert_post_action>
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
   133bc:	4b29      	ldr	r3, [pc, #164]	; (13464 <m16src_start+0xe8>)
   133be:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   133c2:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
   133c6:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
   133ca:	bf0c      	ite	eq
   133cc:	2000      	moveq	r0, #0
   133ce:	f06f 0076 	mvnne.w	r0, #118	; 0x76
   133d2:	e00c      	b.n	133ee <m16src_start+0x72>
	if (m16src_grd) {
   133d4:	4d24      	ldr	r5, [pc, #144]	; (13468 <m16src_start+0xec>)
   133d6:	f895 8000 	ldrb.w	r8, [r5]
   133da:	f1b8 0f00 	cmp.w	r8, #0
   133de:	d008      	beq.n	133f2 <m16src_start+0x76>
		m16src_ref--;
   133e0:	7018      	strb	r0, [r3, #0]
   133e2:	f382 8811 	msr	BASEPRI, r2
   133e6:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   133ea:	f06f 000a 	mvn.w	r0, #10
}
   133ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	m16src_grd = 1U;
   133f2:	2601      	movs	r6, #1
   133f4:	702e      	strb	r6, [r5, #0]
   133f6:	f382 8811 	msr	BASEPRI, r2
   133fa:	f3bf 8f6f 	isb	sy
   133fe:	4c19      	ldr	r4, [pc, #100]	; (13464 <m16src_start+0xe8>)
	if (blocking) {
   13400:	b321      	cbz	r1, 1344c <m16src_start+0xd0>
		irq_disable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   13402:	2005      	movs	r0, #5
   13404:	f000 fc64 	bl	13cd0 <z_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   13408:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
   1340c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
   13410:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   13414:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
   13416:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   1341a:	b19a      	cbz	r2, 13444 <m16src_start+0xc8>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1341c:	2200      	movs	r2, #0
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
   1341e:	07db      	lsls	r3, r3, #31
    NRF_CLOCK->INTENCLR = int_mask;
   13420:	bf58      	it	pl
   13422:	2301      	movpl	r3, #1
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   13424:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13428:	f04f 0220 	mov.w	r2, #32
   1342c:	bf58      	it	pl
   1342e:	f8c4 3308 	strpl.w	r3, [r4, #776]	; 0x308
   13432:	4b0e      	ldr	r3, [pc, #56]	; (1346c <m16src_start+0xf0>)
		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   13434:	2005      	movs	r0, #5
   13436:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1343a:	f000 fc39 	bl	13cb0 <z_arch_irq_enable>
	m16src_grd = 0U;
   1343e:	2300      	movs	r3, #0
   13440:	702b      	strb	r3, [r5, #0]
   13442:	e7af      	b.n	133a4 <m16src_start+0x28>
			__WFE();
   13444:	bf20      	wfe
			__SEV();
   13446:	bf40      	sev
			__WFE();
   13448:	bf20      	wfe
   1344a:	e7e4      	b.n	13416 <m16src_start+0x9a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1344c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   13450:	6026      	str	r6, [r4, #0]
   13452:	e7f4      	b.n	1343e <m16src_start+0xc2>
   13454:	200278f3 	.word	0x200278f3
   13458:	0003485d 	.word	0x0003485d
   1345c:	0003452c 	.word	0x0003452c
   13460:	00034868 	.word	0x00034868
   13464:	40005000 	.word	0x40005000
   13468:	200278f2 	.word	0x200278f2
   1346c:	e000e100 	.word	0xe000e100

00013470 <z_clock_isr>:
#include <drivers/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   13470:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   13472:	4c06      	ldr	r4, [pc, #24]	; (1348c <z_clock_isr+0x1c>)
   13474:	4906      	ldr	r1, [pc, #24]	; (13490 <z_clock_isr+0x20>)
   13476:	4622      	mov	r2, r4
   13478:	4806      	ldr	r0, [pc, #24]	; (13494 <z_clock_isr+0x24>)
   1347a:	2317      	movs	r3, #23
   1347c:	f01b f8d9 	bl	2e632 <printk>
   13480:	4620      	mov	r0, r4
}
   13482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   13486:	2117      	movs	r1, #23
   13488:	f01b b8e0 	b.w	2e64c <assert_post_action>
   1348c:	000348e6 	.word	0x000348e6
   13490:	00035e56 	.word	0x00035e56
   13494:	0003452c 	.word	0x0003452c

00013498 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
   13498:	2200      	movs	r2, #0
{
   1349a:	b538      	push	{r3, r4, r5, lr}
	RTC->EVENTS_COMPARE[0] = 0;
   1349c:	4b23      	ldr	r3, [pc, #140]	; (1352c <rtc1_nrf_isr+0x94>)
   1349e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
   134a2:	f04f 0320 	mov.w	r3, #32
   134a6:	f3ef 8511 	mrs	r5, BASEPRI
   134aa:	f383 8811 	msr	BASEPRI, r3
   134ae:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = z_arch_irq_lock();

#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   134b2:	481f      	ldr	r0, [pc, #124]	; (13530 <rtc1_nrf_isr+0x98>)
   134b4:	f015 fb20 	bl	28af8 <z_spin_lock_valid>
   134b8:	b960      	cbnz	r0, 134d4 <rtc1_nrf_isr+0x3c>
   134ba:	491e      	ldr	r1, [pc, #120]	; (13534 <rtc1_nrf_isr+0x9c>)
   134bc:	234e      	movs	r3, #78	; 0x4e
   134be:	4a1e      	ldr	r2, [pc, #120]	; (13538 <rtc1_nrf_isr+0xa0>)
   134c0:	481e      	ldr	r0, [pc, #120]	; (1353c <rtc1_nrf_isr+0xa4>)
   134c2:	f01b f8b6 	bl	2e632 <printk>
   134c6:	481e      	ldr	r0, [pc, #120]	; (13540 <rtc1_nrf_isr+0xa8>)
   134c8:	f01b f8b3 	bl	2e632 <printk>
   134cc:	214e      	movs	r1, #78	; 0x4e
   134ce:	481a      	ldr	r0, [pc, #104]	; (13538 <rtc1_nrf_isr+0xa0>)
   134d0:	f01b f8bc 	bl	2e64c <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   134d4:	4816      	ldr	r0, [pc, #88]	; (13530 <rtc1_nrf_isr+0x98>)
   134d6:	f015 fb2d 	bl	28b34 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   134da:	4a1a      	ldr	r2, [pc, #104]	; (13544 <rtc1_nrf_isr+0xac>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
   134dc:	4b13      	ldr	r3, [pc, #76]	; (1352c <rtc1_nrf_isr+0x94>)
   134de:	6811      	ldr	r1, [r2, #0]
   134e0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   134e4:	4812      	ldr	r0, [pc, #72]	; (13530 <rtc1_nrf_isr+0x98>)
	return (a - b) & COUNTER_MAX;
   134e6:	1a5b      	subs	r3, r3, r1
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   134e8:	f3c3 240f 	ubfx	r4, r3, #8, #16

	last_count += dticks * CYC_PER_TICK;
   134ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   134f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   134f4:	440b      	add	r3, r1
   134f6:	6013      	str	r3, [r2, #0]
   134f8:	f015 fb0c 	bl	28b14 <z_spin_unlock_valid>
   134fc:	b960      	cbnz	r0, 13518 <rtc1_nrf_isr+0x80>
   134fe:	4912      	ldr	r1, [pc, #72]	; (13548 <rtc1_nrf_isr+0xb0>)
   13500:	2361      	movs	r3, #97	; 0x61
   13502:	4a0d      	ldr	r2, [pc, #52]	; (13538 <rtc1_nrf_isr+0xa0>)
   13504:	480d      	ldr	r0, [pc, #52]	; (1353c <rtc1_nrf_isr+0xa4>)
   13506:	f01b f894 	bl	2e632 <printk>
   1350a:	4810      	ldr	r0, [pc, #64]	; (1354c <rtc1_nrf_isr+0xb4>)
   1350c:	f01b f891 	bl	2e632 <printk>
   13510:	2161      	movs	r1, #97	; 0x61
   13512:	4809      	ldr	r0, [pc, #36]	; (13538 <rtc1_nrf_isr+0xa0>)
   13514:	f01b f89a 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   13518:	f385 8811 	msr	BASEPRI, r5
   1351c:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   13520:	4620      	mov	r0, r4
}
   13522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   13526:	f015 beeb 	b.w	29300 <z_clock_announce>
   1352a:	bf00      	nop
   1352c:	40015000 	.word	0x40015000
   13530:	200209a0 	.word	0x200209a0
   13534:	0003494a 	.word	0x0003494a
   13538:	0003491e 	.word	0x0003491e
   1353c:	0003452c 	.word	0x0003452c
   13540:	0003495f 	.word	0x0003495f
   13544:	2002099c 	.word	0x2002099c
   13548:	00034974 	.word	0x00034974
   1354c:	0003498b 	.word	0x0003498b

00013550 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
   13550:	b538      	push	{r3, r4, r5, lr}
   13552:	481a      	ldr	r0, [pc, #104]	; (135bc <z_clock_driver_init+0x6c>)
   13554:	f013 f946 	bl	267e4 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_NORDIC_NRF_CLOCK_0_LABEL "_32K");
	if (!clock) {
   13558:	b360      	cbz	r0, 135b4 <z_clock_driver_init+0x64>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   1355a:	6843      	ldr	r3, [r0, #4]
   1355c:	2102      	movs	r1, #2
   1355e:	681b      	ldr	r3, [r3, #0]
   13560:	4798      	blx	r3
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   13562:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
   13564:	f44f 7380 	mov.w	r3, #256	; 0x100
    p_reg->PRESCALER = val;
   13568:	4d15      	ldr	r5, [pc, #84]	; (135c0 <z_clock_driver_init+0x70>)
   1356a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1356e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
   13572:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
   13576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1357a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1357e:	4b11      	ldr	r3, [pc, #68]	; (135c4 <z_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   13580:	2101      	movs	r1, #1
   13582:	601c      	str	r4, [r3, #0]
   13584:	4b10      	ldr	r3, [pc, #64]	; (135c8 <z_clock_driver_init+0x78>)
   13586:	2015      	movs	r0, #21
   13588:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1358c:	4622      	mov	r2, r4
   1358e:	f000 fbb3 	bl	13cf8 <z_irq_priority_set>
	irq_enable(RTC1_IRQn);
   13592:	2015      	movs	r0, #21
   13594:	f000 fb8c 	bl	13cb0 <z_arch_irq_enable>
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   13598:	2301      	movs	r3, #1

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   1359a:	4620      	mov	r0, r4
   1359c:	4a0b      	ldr	r2, [pc, #44]	; (135cc <z_clock_driver_init+0x7c>)
   1359e:	6013      	str	r3, [r2, #0]
   135a0:	602b      	str	r3, [r5, #0]
     return p_reg->COUNTER;
   135a2:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
   135a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   135aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   135ae:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
   135b2:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   135b4:	f04f 30ff 	mov.w	r0, #4294967295
   135b8:	e7fb      	b.n	135b2 <z_clock_driver_init+0x62>
   135ba:	bf00      	nop
   135bc:	000348c8 	.word	0x000348c8
   135c0:	40015000 	.word	0x40015000
   135c4:	40015140 	.word	0x40015140
   135c8:	e000e100 	.word	0xe000e100
   135cc:	40015008 	.word	0x40015008

000135d0 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   135d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
   135d4:	f1b0 3fff 	cmp.w	r0, #4294967295
   135d8:	bf08      	it	eq
   135da:	4610      	moveq	r0, r2
{
   135dc:	b538      	push	{r3, r4, r5, lr}
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   135de:	1e45      	subs	r5, r0, #1
   135e0:	4295      	cmp	r5, r2
   135e2:	bfa8      	it	ge
   135e4:	4615      	movge	r5, r2
   135e6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
	__asm__ volatile(
   135ea:	f04f 0320 	mov.w	r3, #32
   135ee:	f3ef 8411 	mrs	r4, BASEPRI
   135f2:	f383 8811 	msr	BASEPRI, r3
   135f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   135fa:	4821      	ldr	r0, [pc, #132]	; (13680 <z_clock_set_timeout+0xb0>)
   135fc:	f015 fa7c 	bl	28af8 <z_spin_lock_valid>
   13600:	b960      	cbnz	r0, 1361c <z_clock_set_timeout+0x4c>
   13602:	4920      	ldr	r1, [pc, #128]	; (13684 <z_clock_set_timeout+0xb4>)
   13604:	234e      	movs	r3, #78	; 0x4e
   13606:	4a20      	ldr	r2, [pc, #128]	; (13688 <z_clock_set_timeout+0xb8>)
   13608:	4820      	ldr	r0, [pc, #128]	; (1368c <z_clock_set_timeout+0xbc>)
   1360a:	f01b f812 	bl	2e632 <printk>
   1360e:	4820      	ldr	r0, [pc, #128]	; (13690 <z_clock_set_timeout+0xc0>)
   13610:	f01b f80f 	bl	2e632 <printk>
   13614:	214e      	movs	r1, #78	; 0x4e
   13616:	481c      	ldr	r0, [pc, #112]	; (13688 <z_clock_set_timeout+0xb8>)
   13618:	f01b f818 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   1361c:	4818      	ldr	r0, [pc, #96]	; (13680 <z_clock_set_timeout+0xb0>)
   1361e:	f015 fa89 	bl	28b34 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   13622:	491c      	ldr	r1, [pc, #112]	; (13694 <z_clock_set_timeout+0xc4>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, t = counter();

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
   13624:	4b1c      	ldr	r3, [pc, #112]	; (13698 <z_clock_set_timeout+0xc8>)
   13626:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
   1362a:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   1362c:	1ad0      	subs	r0, r2, r3
   1362e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
   13632:	30ff      	adds	r0, #255	; 0xff
   13634:	eb00 2005 	add.w	r0, r0, r5, lsl #8
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
   13638:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
	cyc += last_count;
   1363c:	4403      	add	r3, r0
	return (a - b) & COUNTER_MAX;
   1363e:	1a9a      	subs	r2, r3, r2
   13640:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000

	if (counter_sub(cyc, t) < MIN_DELAY) {
   13644:	2a1f      	cmp	r2, #31
		cyc += CYC_PER_TICK;
   13646:	bf98      	it	ls
   13648:	f503 7380 	addls.w	r3, r3, #256	; 0x100
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1364c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   13650:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   13654:	480a      	ldr	r0, [pc, #40]	; (13680 <z_clock_set_timeout+0xb0>)
   13656:	f015 fa5d 	bl	28b14 <z_spin_unlock_valid>
   1365a:	b960      	cbnz	r0, 13676 <z_clock_set_timeout+0xa6>
   1365c:	490f      	ldr	r1, [pc, #60]	; (1369c <z_clock_set_timeout+0xcc>)
   1365e:	2361      	movs	r3, #97	; 0x61
   13660:	4a09      	ldr	r2, [pc, #36]	; (13688 <z_clock_set_timeout+0xb8>)
   13662:	480a      	ldr	r0, [pc, #40]	; (1368c <z_clock_set_timeout+0xbc>)
   13664:	f01a ffe5 	bl	2e632 <printk>
   13668:	480d      	ldr	r0, [pc, #52]	; (136a0 <z_clock_set_timeout+0xd0>)
   1366a:	f01a ffe2 	bl	2e632 <printk>
   1366e:	2161      	movs	r1, #97	; 0x61
   13670:	4805      	ldr	r0, [pc, #20]	; (13688 <z_clock_set_timeout+0xb8>)
   13672:	f01a ffeb 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   13676:	f384 8811 	msr	BASEPRI, r4
   1367a:	f3bf 8f6f 	isb	sy
	}

	set_comparator(cyc);
	k_spin_unlock(&lock, key);
#endif
}
   1367e:	bd38      	pop	{r3, r4, r5, pc}
   13680:	200209a0 	.word	0x200209a0
   13684:	0003494a 	.word	0x0003494a
   13688:	0003491e 	.word	0x0003491e
   1368c:	0003452c 	.word	0x0003452c
   13690:	0003495f 	.word	0x0003495f
   13694:	40015000 	.word	0x40015000
   13698:	2002099c 	.word	0x2002099c
   1369c:	00034974 	.word	0x00034974
   136a0:	0003498b 	.word	0x0003498b

000136a4 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
   136a4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   136a6:	f04f 0320 	mov.w	r3, #32
   136aa:	f3ef 8511 	mrs	r5, BASEPRI
   136ae:	f383 8811 	msr	BASEPRI, r3
   136b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   136b6:	4819      	ldr	r0, [pc, #100]	; (1371c <z_clock_elapsed+0x78>)
   136b8:	f015 fa1e 	bl	28af8 <z_spin_lock_valid>
   136bc:	b960      	cbnz	r0, 136d8 <z_clock_elapsed+0x34>
   136be:	4918      	ldr	r1, [pc, #96]	; (13720 <z_clock_elapsed+0x7c>)
   136c0:	234e      	movs	r3, #78	; 0x4e
   136c2:	4a18      	ldr	r2, [pc, #96]	; (13724 <z_clock_elapsed+0x80>)
   136c4:	4818      	ldr	r0, [pc, #96]	; (13728 <z_clock_elapsed+0x84>)
   136c6:	f01a ffb4 	bl	2e632 <printk>
   136ca:	4818      	ldr	r0, [pc, #96]	; (1372c <z_clock_elapsed+0x88>)
   136cc:	f01a ffb1 	bl	2e632 <printk>
   136d0:	214e      	movs	r1, #78	; 0x4e
   136d2:	4814      	ldr	r0, [pc, #80]	; (13724 <z_clock_elapsed+0x80>)
   136d4:	f01a ffba 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   136d8:	4810      	ldr	r0, [pc, #64]	; (1371c <z_clock_elapsed+0x78>)
   136da:	f015 fa2b 	bl	28b34 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   136de:	4b14      	ldr	r3, [pc, #80]	; (13730 <z_clock_elapsed+0x8c>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   136e0:	480e      	ldr	r0, [pc, #56]	; (1371c <z_clock_elapsed+0x78>)
   136e2:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   136e6:	4b13      	ldr	r3, [pc, #76]	; (13734 <z_clock_elapsed+0x90>)
	return (a - b) & COUNTER_MAX;
   136e8:	681b      	ldr	r3, [r3, #0]
   136ea:	1ae4      	subs	r4, r4, r3
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   136ec:	f3c4 240f 	ubfx	r4, r4, #8, #16
   136f0:	f015 fa10 	bl	28b14 <z_spin_unlock_valid>
   136f4:	b960      	cbnz	r0, 13710 <z_clock_elapsed+0x6c>
   136f6:	4910      	ldr	r1, [pc, #64]	; (13738 <z_clock_elapsed+0x94>)
   136f8:	2361      	movs	r3, #97	; 0x61
   136fa:	4a0a      	ldr	r2, [pc, #40]	; (13724 <z_clock_elapsed+0x80>)
   136fc:	480a      	ldr	r0, [pc, #40]	; (13728 <z_clock_elapsed+0x84>)
   136fe:	f01a ff98 	bl	2e632 <printk>
   13702:	480e      	ldr	r0, [pc, #56]	; (1373c <z_clock_elapsed+0x98>)
   13704:	f01a ff95 	bl	2e632 <printk>
   13708:	2161      	movs	r1, #97	; 0x61
   1370a:	4806      	ldr	r0, [pc, #24]	; (13724 <z_clock_elapsed+0x80>)
   1370c:	f01a ff9e 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   13710:	f385 8811 	msr	BASEPRI, r5
   13714:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   13718:	4620      	mov	r0, r4
   1371a:	bd38      	pop	{r3, r4, r5, pc}
   1371c:	200209a0 	.word	0x200209a0
   13720:	0003494a 	.word	0x0003494a
   13724:	0003491e 	.word	0x0003491e
   13728:	0003452c 	.word	0x0003452c
   1372c:	0003495f 	.word	0x0003495f
   13730:	40015000 	.word	0x40015000
   13734:	2002099c 	.word	0x2002099c
   13738:	00034974 	.word	0x00034974
   1373c:	0003498b 	.word	0x0003498b

00013740 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
   13740:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   13742:	f04f 0320 	mov.w	r3, #32
   13746:	f3ef 8511 	mrs	r5, BASEPRI
   1374a:	f383 8811 	msr	BASEPRI, r3
   1374e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   13752:	481a      	ldr	r0, [pc, #104]	; (137bc <z_timer_cycle_get_32+0x7c>)
   13754:	f015 f9d0 	bl	28af8 <z_spin_lock_valid>
   13758:	b960      	cbnz	r0, 13774 <z_timer_cycle_get_32+0x34>
   1375a:	4919      	ldr	r1, [pc, #100]	; (137c0 <z_timer_cycle_get_32+0x80>)
   1375c:	234e      	movs	r3, #78	; 0x4e
   1375e:	4a19      	ldr	r2, [pc, #100]	; (137c4 <z_timer_cycle_get_32+0x84>)
   13760:	4819      	ldr	r0, [pc, #100]	; (137c8 <z_timer_cycle_get_32+0x88>)
   13762:	f01a ff66 	bl	2e632 <printk>
   13766:	4819      	ldr	r0, [pc, #100]	; (137cc <z_timer_cycle_get_32+0x8c>)
   13768:	f01a ff63 	bl	2e632 <printk>
   1376c:	214e      	movs	r1, #78	; 0x4e
   1376e:	4815      	ldr	r0, [pc, #84]	; (137c4 <z_timer_cycle_get_32+0x84>)
   13770:	f01a ff6c 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   13774:	4811      	ldr	r0, [pc, #68]	; (137bc <z_timer_cycle_get_32+0x7c>)
   13776:	f015 f9dd 	bl	28b34 <z_spin_lock_set_owner>
   1377a:	4b15      	ldr	r3, [pc, #84]	; (137d0 <z_timer_cycle_get_32+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1377c:	480f      	ldr	r0, [pc, #60]	; (137bc <z_timer_cycle_get_32+0x7c>)
   1377e:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   13782:	4b14      	ldr	r3, [pc, #80]	; (137d4 <z_timer_cycle_get_32+0x94>)
   13784:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   13786:	1ae4      	subs	r4, r4, r3
   13788:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   1378c:	441c      	add	r4, r3
   1378e:	f015 f9c1 	bl	28b14 <z_spin_unlock_valid>
   13792:	b960      	cbnz	r0, 137ae <z_timer_cycle_get_32+0x6e>
   13794:	4910      	ldr	r1, [pc, #64]	; (137d8 <z_timer_cycle_get_32+0x98>)
   13796:	2361      	movs	r3, #97	; 0x61
   13798:	4a0a      	ldr	r2, [pc, #40]	; (137c4 <z_timer_cycle_get_32+0x84>)
   1379a:	480b      	ldr	r0, [pc, #44]	; (137c8 <z_timer_cycle_get_32+0x88>)
   1379c:	f01a ff49 	bl	2e632 <printk>
   137a0:	480e      	ldr	r0, [pc, #56]	; (137dc <z_timer_cycle_get_32+0x9c>)
   137a2:	f01a ff46 	bl	2e632 <printk>
   137a6:	2161      	movs	r1, #97	; 0x61
   137a8:	4806      	ldr	r0, [pc, #24]	; (137c4 <z_timer_cycle_get_32+0x84>)
   137aa:	f01a ff4f 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   137ae:	f385 8811 	msr	BASEPRI, r5
   137b2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   137b6:	4620      	mov	r0, r4
   137b8:	bd38      	pop	{r3, r4, r5, pc}
   137ba:	bf00      	nop
   137bc:	200209a0 	.word	0x200209a0
   137c0:	0003494a 	.word	0x0003494a
   137c4:	0003491e 	.word	0x0003491e
   137c8:	0003452c 	.word	0x0003452c
   137cc:	0003495f 	.word	0x0003495f
   137d0:	40015000 	.word	0x40015000
   137d4:	2002099c 	.word	0x2002099c
   137d8:	00034974 	.word	0x00034974
   137dc:	0003498b 	.word	0x0003498b

000137e0 <_IntExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   137e0:	4804      	ldr	r0, [pc, #16]	; (137f4 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   137e2:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
   137e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
   137e6:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   137e8:	d003      	beq.n	137f2 <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   137ea:	4903      	ldr	r1, [pc, #12]	; (137f8 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   137ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   137f0:	600a      	str	r2, [r1, #0]

000137f2 <_EXIT_EXC>:
    mov lr, r1
#else
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */
    bx lr
   137f2:	4770      	bx	lr
    ldr r0, =_kernel
   137f4:	20027730 	.word	0x20027730
    ldr r1, =_SCS_ICSR
   137f8:	e000ed04 	.word	0xe000ed04

000137fc <__pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   137fc:	492f      	ldr	r1, [pc, #188]	; (138bc <in_fp_endif+0x44>)
    ldr r2, [r1, #_kernel_offset_to_current]
   137fe:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13800:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   13804:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
   13806:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1380a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   1380e:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   13812:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   13816:	d004      	beq.n	13822 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   13818:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   1381c:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   13820:	e007      	b.n	13832 <out_fp_endif>

00013822 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   13822:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
   13826:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   1382a:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   1382e:	f050 0004 	orrs.w	r0, r0, #4

00013832 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   13832:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13836:	2020      	movs	r0, #32
    msr BASEPRI, r0
   13838:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1383c:	f3bf 8f6f 	isb	sy
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   13840:	4f1f      	ldr	r7, [pc, #124]	; (138c0 <in_fp_endif+0x48>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13842:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   13846:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   13848:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
   1384a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1384c:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
   1384e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13850:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   13852:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   13856:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   1385a:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   1385e:	d105      	bne.n	1386c <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   13860:	2300      	movs	r3, #0
    vmsr fpscr, r3
   13862:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   13866:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   1386a:	e005      	b.n	13878 <in_fp_endif>

0001386c <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   1386c:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   13870:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
   13874:	ec90 8a10 	vldmia	r0, {s16-s31}

00013878 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   13878:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   1387c:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   13880:	f383 8814 	msr	CONTROL, r3
    isb
   13884:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
   13888:	b504      	push	{r2, lr}
    ldr r0, =_kernel
   1388a:	480c      	ldr	r0, [pc, #48]	; (138bc <in_fp_endif+0x44>)
    ldr r0, [r0, #_kernel_offset_to_current]
   1388c:	6880      	ldr	r0, [r0, #8]
    bl z_arch_configure_dynamic_mpu_regions
   1388e:	f01a ff15 	bl	2e6bc <z_arch_configure_dynamic_mpu_regions>
    pop {r2,lr}
   13892:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   13896:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   1389a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
   1389e:	f04f 0000 	mov.w	r0, #0
    msr PSPLIM, r0
   138a2:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

    msr PSP, ip
   138a6:	f38c 8809 	msr	PSP, ip

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   138aa:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   138ae:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   138b0:	f01a fef5 	bl	2e69e <configure_builtin_stack_guard>
    pop {r2, lr}
   138b4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    pop {r0, lr}
#endif
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
   138b8:	4770      	bx	lr
   138ba:	0000      	.short	0x0000
    ldr r1, =_kernel
   138bc:	20027730 	.word	0x20027730
    ldr v4, =_SCS_ICSR
   138c0:	e000ed04 	.word	0xe000ed04

000138c4 <__svc>:
 * - System Calls (User mode)
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
   138c4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   138c8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   138ca:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   138ce:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   138d2:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read encoding */
    ldrh r1, [r1, #-2]
   138d4:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
   138d8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
   138dc:	2902      	cmp	r1, #2
    beq _oops
   138de:	d0ff      	beq.n	138e0 <_oops>

000138e0 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {r0, lr}
   138e0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   138e2:	f01a fee0 	bl	2e6a6 <z_do_kernel_oops>
    pop {r0, pc}
   138e6:	bd01      	pop	{r0, pc}

000138e8 <z_CpuIdleInit>:
 *
 * void z_CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, z_CpuIdleInit)
	ldr r1, =_SCB_SCR
   138e8:	4901      	ldr	r1, [pc, #4]	; (138f0 <z_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   138ea:	2210      	movs	r2, #16
	str r2, [r1]
   138ec:	600a      	str	r2, [r1, #0]
	bx lr
   138ee:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   138f0:	e000ed10 	.word	0xe000ed10

000138f4 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   138f4:	4040      	eors	r0, r0
	msr BASEPRI, r0
   138f6:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
   138fa:	bf30      	wfi

	bx lr
   138fc:	4770      	bx	lr
   138fe:	bf00      	nop

00013900 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
   13900:	4040      	eors	r0, r0
	msr BASEPRI, r0
   13902:	f380 8811 	msr	BASEPRI, r0
	/* RETTOBASE flag is not banked between security states.
	 * Therefore, we cannot rely on this flag, to obtain the SP
	 * of the current security state.
	 * Instead, we use the EXC_RETURN.SPSEL flag.
	 */
 	ldr r0, =0x4
   13906:	f04f 0004 	mov.w	r0, #4
	mov r1, lr
   1390a:	4671      	mov	r1, lr
	tst r1, r0
   1390c:	4201      	tst	r1, r0
	beq _s_stack_frame_msp
   1390e:	d002      	beq.n	13916 <_s_stack_frame_msp>
	mrs r0, PSP
   13910:	f3ef 8009 	mrs	r0, PSP
	bne _s_stack_frame_endif
   13914:	d101      	bne.n	1391a <_s_stack_frame_endif>

00013916 <_s_stack_frame_msp>:
_s_stack_frame_msp:
	mrs r0, MSP
   13916:	f3ef 8008 	mrs	r0, MSP

0001391a <_s_stack_frame_endif>:
	 *
	 * To determine this we need to inspect the EXC_RETURN value
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
   1391a:	4671      	mov	r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
   1391c:	b501      	push	{r0, lr}
	bl _Fault
   1391e:	f000 f947 	bl	13bb0 <_Fault>

	pop {r0, pc}
   13922:	bd01      	pop	{r0, pc}

00013924 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13924:	b501      	push	{r0, lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, z_sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   13926:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   13928:	4a0b      	ldr	r2, [pc, #44]	; (13958 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1392a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   1392c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1392e:	bf1e      	ittt	ne
	movne	r1, #0
   13930:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   13932:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   13934:	f01c ff54 	blne	307e0 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   13938:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
   1393a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1393e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   13942:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
   13946:	4905      	ldr	r1, [pc, #20]	; (1395c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   13948:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1394a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   1394c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1394e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
   13952:	4803      	ldr	r0, [pc, #12]	; (13960 <_isr_wrapper+0x3c>)
	bx r0
   13954:	4700      	bx	r0
   13956:	0000      	.short	0x0000
	ldr r2, =_kernel
   13958:	20027730 	.word	0x20027730
	ldr r1, =_sw_isr_table
   1395c:	00030a70 	.word	0x00030a70
	ldr r0, =_IntExit
   13960:	000137e1 	.word	0x000137e1

00013964 <z_IntLibInit>:
 * @return N/A
 */

void z_IntLibInit(void)
{
	int irq = 0;
   13964:	2300      	movs	r3, #0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13966:	2120      	movs	r1, #32
   13968:	4803      	ldr	r0, [pc, #12]	; (13978 <z_IntLibInit+0x14>)
   1396a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1396c:	3301      	adds	r3, #1
   1396e:	2b41      	cmp	r3, #65	; 0x41
   13970:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   13974:	d1f9      	bne.n	1396a <z_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   13976:	4770      	bx	lr
   13978:	e000e100 	.word	0xe000e100

0001397c <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   1397c:	4a09      	ldr	r2, [pc, #36]	; (139a4 <__swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1397e:	490a      	ldr	r1, [pc, #40]	; (139a8 <__swap+0x2c>)
	_current->arch.basepri = key;
   13980:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   13982:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   13984:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
   13986:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13988:	4908      	ldr	r1, [pc, #32]	; (139ac <__swap+0x30>)
   1398a:	684b      	ldr	r3, [r1, #4]
   1398c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13990:	604b      	str	r3, [r1, #4]
   13992:	2300      	movs	r3, #0
   13994:	f383 8811 	msr	BASEPRI, r3
   13998:	f3bf 8f6f 	isb	sy
	irq_unlock(0);

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1399c:	6893      	ldr	r3, [r2, #8]
}
   1399e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   139a0:	4770      	bx	lr
   139a2:	bf00      	nop
   139a4:	20027730 	.word	0x20027730
   139a8:	00033c04 	.word	0x00033c04
   139ac:	e000ed00 	.word	0xe000ed00

000139b0 <BusFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int BusFault(NANO_ESF *esf, int fromHardFault)
   139b0:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   139b2:	4c1e      	ldr	r4, [pc, #120]	; (13a2c <BusFault.isra.2+0x7c>)
static int BusFault(NANO_ESF *esf, int fromHardFault)
   139b4:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
   139b6:	481e      	ldr	r0, [pc, #120]	; (13a30 <BusFault.isra.2+0x80>)
   139b8:	f01a fe3b 	bl	2e632 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   139bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   139be:	04d9      	lsls	r1, r3, #19
   139c0:	d502      	bpl.n	139c8 <BusFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error\n");
   139c2:	481c      	ldr	r0, [pc, #112]	; (13a34 <BusFault.isra.2+0x84>)
   139c4:	f01a fe35 	bl	2e632 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   139c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   139ca:	051a      	lsls	r2, r3, #20
   139cc:	d502      	bpl.n	139d4 <BusFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
   139ce:	481a      	ldr	r0, [pc, #104]	; (13a38 <BusFault.isra.2+0x88>)
   139d0:	f01a fe2f 	bl	2e632 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   139d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   139d6:	059b      	lsls	r3, r3, #22
   139d8:	d50e      	bpl.n	139f8 <BusFault.isra.2+0x48>
		PR_FAULT_INFO("  Precise data bus error\n");
   139da:	4818      	ldr	r0, [pc, #96]	; (13a3c <BusFault.isra.2+0x8c>)
   139dc:	f01a fe29 	bl	2e632 <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   139e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   139e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   139e4:	0418      	lsls	r0, r3, #16
   139e6:	d507      	bpl.n	139f8 <BusFault.isra.2+0x48>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
   139e8:	4815      	ldr	r0, [pc, #84]	; (13a40 <BusFault.isra.2+0x90>)
   139ea:	f01a fe22 	bl	2e632 <printk>
			if (fromHardFault) {
   139ee:	b11d      	cbz	r5, 139f8 <BusFault.isra.2+0x48>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   139f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   139f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   139f6:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   139f8:	4c0c      	ldr	r4, [pc, #48]	; (13a2c <BusFault.isra.2+0x7c>)
   139fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   139fc:	0559      	lsls	r1, r3, #21
   139fe:	d502      	bpl.n	13a06 <BusFault.isra.2+0x56>
		PR_FAULT_INFO("  Imprecise data bus error\n");
   13a00:	4810      	ldr	r0, [pc, #64]	; (13a44 <BusFault.isra.2+0x94>)
   13a02:	f01a fe16 	bl	2e632 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   13a06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13a08:	05da      	lsls	r2, r3, #23
   13a0a:	d509      	bpl.n	13a20 <BusFault.isra.2+0x70>
		PR_FAULT_INFO("  Instruction bus error\n");
   13a0c:	480e      	ldr	r0, [pc, #56]	; (13a48 <BusFault.isra.2+0x98>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
   13a0e:	f01a fe10 	bl	2e632 <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13a12:	4a06      	ldr	r2, [pc, #24]	; (13a2c <BusFault.isra.2+0x7c>)
	if (MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
   13a14:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13a16:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13a18:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   13a1c:	6293      	str	r3, [r2, #40]	; 0x28
}
   13a1e:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   13a20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13a22:	049b      	lsls	r3, r3, #18
   13a24:	d5f5      	bpl.n	13a12 <BusFault.isra.2+0x62>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
   13a26:	4809      	ldr	r0, [pc, #36]	; (13a4c <BusFault.isra.2+0x9c>)
   13a28:	e7f1      	b.n	13a0e <BusFault.isra.2+0x5e>
   13a2a:	bf00      	nop
   13a2c:	e000ed00 	.word	0xe000ed00
   13a30:	0003499e 	.word	0x0003499e
   13a34:	000349b5 	.word	0x000349b5
   13a38:	000349c7 	.word	0x000349c7
   13a3c:	000349db 	.word	0x000349db
   13a40:	000349f5 	.word	0x000349f5
   13a44:	00034a0b 	.word	0x00034a0b
   13a48:	00034a27 	.word	0x00034a27
   13a4c:	00034a40 	.word	0x00034a40

00013a50 <UsageFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t UsageFault(const NANO_ESF *esf)
   13a50:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13a52:	4c1d      	ldr	r4, [pc, #116]	; (13ac8 <UsageFault.isra.3+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
   13a54:	481d      	ldr	r0, [pc, #116]	; (13acc <UsageFault.isra.3+0x7c>)
   13a56:	f01a fdec 	bl	2e632 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13a5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13a5c:	019b      	lsls	r3, r3, #6
   13a5e:	d502      	bpl.n	13a66 <UsageFault.isra.3+0x16>
		PR_FAULT_INFO("  Division by zero\n");
   13a60:	481b      	ldr	r0, [pc, #108]	; (13ad0 <UsageFault.isra.3+0x80>)
   13a62:	f01a fde6 	bl	2e632 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13a66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13a68:	01dd      	lsls	r5, r3, #7
   13a6a:	d502      	bpl.n	13a72 <UsageFault.isra.3+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
   13a6c:	4819      	ldr	r0, [pc, #100]	; (13ad4 <UsageFault.isra.3+0x84>)
   13a6e:	f01a fde0 	bl	2e632 <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   13a72:	6aa4      	ldr	r4, [r4, #40]	; 0x28
   13a74:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   13a78:	d003      	beq.n	13a82 <UsageFault.isra.3+0x32>
		PR_FAULT_INFO("  Stack overflow (context area not valid)\n");
   13a7a:	4817      	ldr	r0, [pc, #92]	; (13ad8 <UsageFault.isra.3+0x88>)
   13a7c:	f01a fdd9 	bl	2e632 <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
   13a80:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   13a82:	4d11      	ldr	r5, [pc, #68]	; (13ac8 <UsageFault.isra.3+0x78>)
   13a84:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13a86:	0318      	lsls	r0, r3, #12
   13a88:	d502      	bpl.n	13a90 <UsageFault.isra.3+0x40>
		PR_FAULT_INFO("  No coprocessor instructions\n");
   13a8a:	4814      	ldr	r0, [pc, #80]	; (13adc <UsageFault.isra.3+0x8c>)
   13a8c:	f01a fdd1 	bl	2e632 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13a90:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13a92:	0359      	lsls	r1, r3, #13
   13a94:	d502      	bpl.n	13a9c <UsageFault.isra.3+0x4c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
   13a96:	4812      	ldr	r0, [pc, #72]	; (13ae0 <UsageFault.isra.3+0x90>)
   13a98:	f01a fdcb 	bl	2e632 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13a9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13a9e:	039a      	lsls	r2, r3, #14
   13aa0:	d502      	bpl.n	13aa8 <UsageFault.isra.3+0x58>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
   13aa2:	4810      	ldr	r0, [pc, #64]	; (13ae4 <UsageFault.isra.3+0x94>)
   13aa4:	f01a fdc5 	bl	2e632 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   13aa8:	4d07      	ldr	r5, [pc, #28]	; (13ac8 <UsageFault.isra.3+0x78>)
   13aaa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13aac:	03db      	lsls	r3, r3, #15
   13aae:	d502      	bpl.n	13ab6 <UsageFault.isra.3+0x66>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
   13ab0:	480d      	ldr	r0, [pc, #52]	; (13ae8 <UsageFault.isra.3+0x98>)
   13ab2:	f01a fdbe 	bl	2e632 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13ab6:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   13ab8:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13aba:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   13abe:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   13ac2:	62ab      	str	r3, [r5, #40]	; 0x28
}
   13ac4:	bd38      	pop	{r3, r4, r5, pc}
   13ac6:	bf00      	nop
   13ac8:	e000ed00 	.word	0xe000ed00
   13acc:	00034b74 	.word	0x00034b74
   13ad0:	00034b8d 	.word	0x00034b8d
   13ad4:	00034ba1 	.word	0x00034ba1
   13ad8:	00034bbc 	.word	0x00034bbc
   13adc:	00034be7 	.word	0x00034be7
   13ae0:	00034c06 	.word	0x00034c06
   13ae4:	00034c2c 	.word	0x00034c2c
   13ae8:	00034c47 	.word	0x00034c47

00013aec <MpuFault.isra.6>:
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
   13aec:	b538      	push	{r3, r4, r5, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13aee:	4c24      	ldr	r4, [pc, #144]	; (13b80 <MpuFault.isra.6+0x94>)
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
   13af0:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
   13af2:	4824      	ldr	r0, [pc, #144]	; (13b84 <MpuFault.isra.6+0x98>)
   13af4:	f01a fd9d 	bl	2e632 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13af8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13afa:	06d9      	lsls	r1, r3, #27
   13afc:	d502      	bpl.n	13b04 <MpuFault.isra.6+0x18>
		PR_FAULT_INFO("  Stacking error (context area might be"
   13afe:	4822      	ldr	r0, [pc, #136]	; (13b88 <MpuFault.isra.6+0x9c>)
   13b00:	f01a fd97 	bl	2e632 <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   13b04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13b06:	071a      	lsls	r2, r3, #28
   13b08:	d502      	bpl.n	13b10 <MpuFault.isra.6+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
   13b0a:	4820      	ldr	r0, [pc, #128]	; (13b8c <MpuFault.isra.6+0xa0>)
   13b0c:	f01a fd91 	bl	2e632 <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13b10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13b12:	079b      	lsls	r3, r3, #30
   13b14:	d50e      	bpl.n	13b34 <MpuFault.isra.6+0x48>
		PR_FAULT_INFO("  Data Access Violation\n");
   13b16:	481e      	ldr	r0, [pc, #120]	; (13b90 <MpuFault.isra.6+0xa4>)
   13b18:	f01a fd8b 	bl	2e632 <printk>
		mmfar = SCB->MMFAR;
   13b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   13b1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13b20:	0618      	lsls	r0, r3, #24
   13b22:	d507      	bpl.n	13b34 <MpuFault.isra.6+0x48>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
   13b24:	481b      	ldr	r0, [pc, #108]	; (13b94 <MpuFault.isra.6+0xa8>)
   13b26:	f01a fd84 	bl	2e632 <printk>
			if (fromHardFault) {
   13b2a:	b11d      	cbz	r5, 13b34 <MpuFault.isra.6+0x48>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13b2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13b32:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   13b34:	4c12      	ldr	r4, [pc, #72]	; (13b80 <MpuFault.isra.6+0x94>)
   13b36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13b38:	07d9      	lsls	r1, r3, #31
   13b3a:	d502      	bpl.n	13b42 <MpuFault.isra.6+0x56>
		PR_FAULT_INFO("  Instruction Access Violation\n");
   13b3c:	4816      	ldr	r0, [pc, #88]	; (13b98 <MpuFault.isra.6+0xac>)
   13b3e:	f01a fd78 	bl	2e632 <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13b42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13b44:	069a      	lsls	r2, r3, #26
   13b46:	d502      	bpl.n	13b4e <MpuFault.isra.6+0x62>
		PR_FAULT_INFO(
   13b48:	4814      	ldr	r0, [pc, #80]	; (13b9c <MpuFault.isra.6+0xb0>)
   13b4a:	f01a fd72 	bl	2e632 <printk>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   13b4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13b50:	06db      	lsls	r3, r3, #27
   13b52:	d50e      	bpl.n	13b72 <MpuFault.isra.6+0x86>
	__ASSERT(0,
   13b54:	4912      	ldr	r1, [pc, #72]	; (13ba0 <MpuFault.isra.6+0xb4>)
   13b56:	f44f 739e 	mov.w	r3, #316	; 0x13c
   13b5a:	4a12      	ldr	r2, [pc, #72]	; (13ba4 <MpuFault.isra.6+0xb8>)
   13b5c:	4812      	ldr	r0, [pc, #72]	; (13ba8 <MpuFault.isra.6+0xbc>)
   13b5e:	f01a fd68 	bl	2e632 <printk>
   13b62:	4812      	ldr	r0, [pc, #72]	; (13bac <MpuFault.isra.6+0xc0>)
   13b64:	f01a fd65 	bl	2e632 <printk>
   13b68:	f44f 719e 	mov.w	r1, #316	; 0x13c
   13b6c:	480d      	ldr	r0, [pc, #52]	; (13ba4 <MpuFault.isra.6+0xb8>)
   13b6e:	f01a fd6d 	bl	2e64c <assert_post_action>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13b72:	4a03      	ldr	r2, [pc, #12]	; (13b80 <MpuFault.isra.6+0x94>)
}
   13b74:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13b76:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13b78:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   13b7c:	6293      	str	r3, [r2, #40]	; 0x28
}
   13b7e:	bd38      	pop	{r3, r4, r5, pc}
   13b80:	e000ed00 	.word	0xe000ed00
   13b84:	00034a70 	.word	0x00034a70
   13b88:	00034a87 	.word	0x00034a87
   13b8c:	000349c7 	.word	0x000349c7
   13b90:	00034abb 	.word	0x00034abb
   13b94:	00034ad4 	.word	0x00034ad4
   13b98:	00034aeb 	.word	0x00034aeb
   13b9c:	00034a40 	.word	0x00034a40
   13ba0:	00035e56 	.word	0x00035e56
   13ba4:	00034b0b 	.word	0x00034b0b
   13ba8:	0003452c 	.word	0x0003452c
   13bac:	00034b3a 	.word	0x00034b3a

00013bb0 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
   13bb0:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13bb2:	4b2d      	ldr	r3, [pc, #180]	; (13c68 <_Fault+0xb8>)
{
   13bb4:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13bb6:	685c      	ldr	r4, [r3, #4]
				goto _exit_fatal;
			}
		}
	}
#elif defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13bb8:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
   13bbc:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   13bc0:	d005      	beq.n	13bce <_Fault+0x1e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
   13bc2:	2000      	movs	r0, #0

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_NanoFatalErrorHandler(reason, esf);
   13bc4:	4629      	mov	r1, r5
}
   13bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_NanoFatalErrorHandler(reason, esf);
   13bca:	f000 b927 	b.w	13e1c <z_NanoFatalErrorHandler>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   13bce:	07c8      	lsls	r0, r1, #31
   13bd0:	d4f7      	bmi.n	13bc2 <_Fault+0x12>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   13bd2:	0649      	lsls	r1, r1, #25
   13bd4:	d502      	bpl.n	13bdc <_Fault+0x2c>
		PR_FAULT_INFO("Exception occurred in Secure State\n");
   13bd6:	4825      	ldr	r0, [pc, #148]	; (13c6c <_Fault+0xbc>)
   13bd8:	f01a fd2b 	bl	2e632 <printk>
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13bdc:	f3c4 0408 	ubfx	r4, r4, #0, #9
	switch (fault) {
   13be0:	1ee2      	subs	r2, r4, #3
   13be2:	2a09      	cmp	r2, #9
   13be4:	d835      	bhi.n	13c52 <_Fault+0xa2>
   13be6:	e8df f002 	tbb	[pc, r2]
   13bea:	2e05      	.short	0x2e05
   13bec:	34342b30 	.word	0x34342b30
   13bf0:	32343434 	.word	0x32343434
	PR_FAULT_INFO("***** HARD FAULT *****\n");
   13bf4:	481e      	ldr	r0, [pc, #120]	; (13c70 <_Fault+0xc0>)
   13bf6:	f01a fd1c 	bl	2e632 <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13bfa:	4b1b      	ldr	r3, [pc, #108]	; (13c68 <_Fault+0xb8>)
   13bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13bfe:	0792      	lsls	r2, r2, #30
   13c00:	d503      	bpl.n	13c0a <_Fault+0x5a>
		PR_EXC("  Bus fault on vector table read\n");
   13c02:	481c      	ldr	r0, [pc, #112]	; (13c74 <_Fault+0xc4>)
   13c04:	f01a fd15 	bl	2e632 <printk>
   13c08:	e7db      	b.n	13bc2 <_Fault+0x12>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   13c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13c0c:	005b      	lsls	r3, r3, #1
   13c0e:	d5d8      	bpl.n	13bc2 <_Fault+0x12>
		PR_EXC("  Fault escalation (see below)\n");
   13c10:	4819      	ldr	r0, [pc, #100]	; (13c78 <_Fault+0xc8>)
   13c12:	f01a fd0e 	bl	2e632 <printk>
		if (SCB_MMFSR != 0) {
   13c16:	4b19      	ldr	r3, [pc, #100]	; (13c7c <_Fault+0xcc>)
   13c18:	781b      	ldrb	r3, [r3, #0]
   13c1a:	b12b      	cbz	r3, 13c28 <_Fault+0x78>
			reason = MpuFault(esf, 1);
   13c1c:	2001      	movs	r0, #1
		reason = MpuFault(esf, 0);
   13c1e:	f7ff ff65 	bl	13aec <MpuFault.isra.6>
	if (reason == _NANO_ERR_RECOVERABLE) {
   13c22:	2806      	cmp	r0, #6
   13c24:	d1ce      	bne.n	13bc4 <_Fault+0x14>
}
   13c26:	bd38      	pop	{r3, r4, r5, pc}
		} else if (SCB_BFSR != 0) {
   13c28:	4b15      	ldr	r3, [pc, #84]	; (13c80 <_Fault+0xd0>)
   13c2a:	781b      	ldrb	r3, [r3, #0]
   13c2c:	b11b      	cbz	r3, 13c36 <_Fault+0x86>
			reason = BusFault(esf, 1);
   13c2e:	2001      	movs	r0, #1
		reason = BusFault(esf, 0);
   13c30:	f7ff febe 	bl	139b0 <BusFault.isra.2>
   13c34:	e7f5      	b.n	13c22 <_Fault+0x72>
		} else if (SCB_UFSR != 0) {
   13c36:	4b13      	ldr	r3, [pc, #76]	; (13c84 <_Fault+0xd4>)
   13c38:	881b      	ldrh	r3, [r3, #0]
   13c3a:	b29b      	uxth	r3, r3
   13c3c:	2b00      	cmp	r3, #0
   13c3e:	d0c0      	beq.n	13bc2 <_Fault+0x12>
		reason = UsageFault(esf);
   13c40:	f7ff ff06 	bl	13a50 <UsageFault.isra.3>
   13c44:	e7ed      	b.n	13c22 <_Fault+0x72>
		reason = MpuFault(esf, 0);
   13c46:	2000      	movs	r0, #0
   13c48:	e7e9      	b.n	13c1e <_Fault+0x6e>
		reason = BusFault(esf, 0);
   13c4a:	2000      	movs	r0, #0
   13c4c:	e7f0      	b.n	13c30 <_Fault+0x80>
	PR_FAULT_INFO(
   13c4e:	480e      	ldr	r0, [pc, #56]	; (13c88 <_Fault+0xd8>)
   13c50:	e7d8      	b.n	13c04 <_Fault+0x54>
	PR_FAULT_INFO("***** %s %d) *****\n",
   13c52:	480e      	ldr	r0, [pc, #56]	; (13c8c <_Fault+0xdc>)
   13c54:	490e      	ldr	r1, [pc, #56]	; (13c90 <_Fault+0xe0>)
   13c56:	f1a4 0210 	sub.w	r2, r4, #16
   13c5a:	2c0f      	cmp	r4, #15
   13c5c:	bfd8      	it	le
   13c5e:	4601      	movle	r1, r0
   13c60:	480c      	ldr	r0, [pc, #48]	; (13c94 <_Fault+0xe4>)
   13c62:	f01a fce6 	bl	2e632 <printk>
   13c66:	e7ac      	b.n	13bc2 <_Fault+0x12>
   13c68:	e000ed00 	.word	0xe000ed00
   13c6c:	00034ca1 	.word	0x00034ca1
   13c70:	00034cc5 	.word	0x00034cc5
   13c74:	00034cdd 	.word	0x00034cdd
   13c78:	00034cff 	.word	0x00034cff
   13c7c:	e000ed28 	.word	0xe000ed28
   13c80:	e000ed29 	.word	0xe000ed29
   13c84:	e000ed2a 	.word	0xe000ed2a
   13c88:	00034d1f 	.word	0x00034d1f
   13c8c:	00034c73 	.word	0x00034c73
   13c90:	00034c88 	.word	0x00034c88
   13c94:	00034d56 	.word	0x00034d56

00013c98 <z_FaultInit>:
 */
void z_FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   13c98:	4b04      	ldr	r3, [pc, #16]	; (13cac <z_FaultInit+0x14>)
   13c9a:	695a      	ldr	r2, [r3, #20]
   13c9c:	f042 0210 	orr.w	r2, r2, #16
   13ca0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   13ca2:	695a      	ldr	r2, [r3, #20]
   13ca4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   13ca8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   13caa:	4770      	bx	lr
   13cac:	e000ed00 	.word	0xe000ed00

00013cb0 <z_arch_irq_enable>:
 *
 * @return N/A
 */
void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13cb0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   13cb2:	2b00      	cmp	r3, #0
   13cb4:	db08      	blt.n	13cc8 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13cb6:	2201      	movs	r2, #1
   13cb8:	f000 001f 	and.w	r0, r0, #31
   13cbc:	fa02 f000 	lsl.w	r0, r2, r0
   13cc0:	4a02      	ldr	r2, [pc, #8]	; (13ccc <z_arch_irq_enable+0x1c>)
   13cc2:	095b      	lsrs	r3, r3, #5
   13cc4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   13cc8:	4770      	bx	lr
   13cca:	bf00      	nop
   13ccc:	e000e100 	.word	0xe000e100

00013cd0 <z_arch_irq_disable>:
 *
 * @return N/A
 */
void z_arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   13cd0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   13cd2:	2b00      	cmp	r3, #0
   13cd4:	db0d      	blt.n	13cf2 <z_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13cd6:	2201      	movs	r2, #1
   13cd8:	f000 001f 	and.w	r0, r0, #31
   13cdc:	fa02 f000 	lsl.w	r0, r2, r0
   13ce0:	095b      	lsrs	r3, r3, #5
   13ce2:	4a04      	ldr	r2, [pc, #16]	; (13cf4 <z_arch_irq_disable+0x24>)
   13ce4:	3320      	adds	r3, #32
   13ce6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
   13cea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13cee:	f3bf 8f6f 	isb	sy
}
   13cf2:	4770      	bx	lr
   13cf4:	e000e100 	.word	0xe000e100

00013cf8 <z_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
   13cf8:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   13cfa:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   13cfc:	2c07      	cmp	r4, #7
{
   13cfe:	4605      	mov	r5, r0
   13d00:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   13d02:	d90e      	bls.n	13d22 <z_irq_priority_set+0x2a>
   13d04:	2372      	movs	r3, #114	; 0x72
   13d06:	4a10      	ldr	r2, [pc, #64]	; (13d48 <z_irq_priority_set+0x50>)
   13d08:	4910      	ldr	r1, [pc, #64]	; (13d4c <z_irq_priority_set+0x54>)
   13d0a:	4811      	ldr	r0, [pc, #68]	; (13d50 <z_irq_priority_set+0x58>)
   13d0c:	f01a fc91 	bl	2e632 <printk>
   13d10:	4631      	mov	r1, r6
   13d12:	4810      	ldr	r0, [pc, #64]	; (13d54 <z_irq_priority_set+0x5c>)
   13d14:	2207      	movs	r2, #7
   13d16:	f01a fc8c 	bl	2e632 <printk>
   13d1a:	2172      	movs	r1, #114	; 0x72
   13d1c:	480a      	ldr	r0, [pc, #40]	; (13d48 <z_irq_priority_set+0x50>)
   13d1e:	f01a fc95 	bl	2e64c <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   13d22:	b26b      	sxtb	r3, r5
  if ((int32_t)(IRQn) >= 0)
   13d24:	2b00      	cmp	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13d26:	bfa8      	it	ge
   13d28:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
   13d2c:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13d30:	bfb8      	it	lt
   13d32:	4b09      	ldrlt	r3, [pc, #36]	; (13d58 <z_irq_priority_set+0x60>)
   13d34:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13d36:	bfab      	itete	ge
   13d38:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13d3c:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13d40:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13d44:	555c      	strblt	r4, [r3, r5]
}
   13d46:	bd70      	pop	{r4, r5, r6, pc}
   13d48:	00034d6a 	.word	0x00034d6a
   13d4c:	00034d9e 	.word	0x00034d9e
   13d50:	0003452c 	.word	0x0003452c
   13d54:	00034db9 	.word	0x00034db9
   13d58:	e000ed14 	.word	0xe000ed14

00013d5c <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   13d5c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13d5e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13d60:	4b04      	ldr	r3, [pc, #16]	; (13d74 <_arch_isr_direct_pm+0x18>)
   13d62:	6a18      	ldr	r0, [r3, #32]
   13d64:	b118      	cbz	r0, 13d6e <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   13d66:	2200      	movs	r2, #0
   13d68:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   13d6a:	f01c fd39 	bl	307e0 <z_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   13d6e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13d70:	bd08      	pop	{r3, pc}
   13d72:	bf00      	nop
   13d74:	20027730 	.word	0x20027730

00013d78 <z_new_thread>:

void z_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   13d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13d7c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   13d7e:	4605      	mov	r5, r0
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;

	Z_ASSERT_VALID_PRIO(priority, pEntry);
   13d80:	2e0f      	cmp	r6, #15
{
   13d82:	4689      	mov	r9, r1
   13d84:	4690      	mov	r8, r2
   13d86:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(priority, pEntry);
   13d88:	d102      	bne.n	13d90 <z_new_thread+0x18>
   13d8a:	4b1e      	ldr	r3, [pc, #120]	; (13e04 <z_new_thread+0x8c>)
   13d8c:	429f      	cmp	r7, r3
   13d8e:	d014      	beq.n	13dba <z_new_thread+0x42>
   13d90:	f106 0310 	add.w	r3, r6, #16
   13d94:	2b1e      	cmp	r3, #30
   13d96:	d910      	bls.n	13dba <z_new_thread+0x42>
   13d98:	233f      	movs	r3, #63	; 0x3f
   13d9a:	4a1b      	ldr	r2, [pc, #108]	; (13e08 <z_new_thread+0x90>)
   13d9c:	491b      	ldr	r1, [pc, #108]	; (13e0c <z_new_thread+0x94>)
   13d9e:	481c      	ldr	r0, [pc, #112]	; (13e10 <z_new_thread+0x98>)
   13da0:	f01a fc47 	bl	2e632 <printk>
   13da4:	4631      	mov	r1, r6
   13da6:	481b      	ldr	r0, [pc, #108]	; (13e14 <z_new_thread+0x9c>)
   13da8:	f06f 030f 	mvn.w	r3, #15
   13dac:	220e      	movs	r2, #14
   13dae:	f01a fc40 	bl	2e632 <printk>
   13db2:	213f      	movs	r1, #63	; 0x3f
   13db4:	4814      	ldr	r0, [pc, #80]	; (13e08 <z_new_thread+0x90>)
   13db6:	f01a fc49 	bl	2e64c <assert_post_action>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   13dba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13dbc:	2204      	movs	r2, #4
   13dbe:	4631      	mov	r1, r6
   13dc0:	4628      	mov	r0, r5
   13dc2:	f01c fdcc 	bl	3095e <z_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   13dc6:	2200      	movs	r2, #0
	 * k_thread_create(). If K_THREAD_STACK_SIZEOF() is used, the
	 * Guard size has already been take out of stackSize.
	 */
	stackSize -= MPU_GUARD_ALIGN_AND_SIZE;
#endif
	stackEnd = pStackMem + stackSize;
   13dc8:	eb09 0408 	add.w	r4, r9, r8
#else
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
   13dcc:	4912      	ldr	r1, [pc, #72]	; (13e18 <z_new_thread+0xa0>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   13dce:	f1a4 0320 	sub.w	r3, r4, #32
   13dd2:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
   13dd6:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
   13dda:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
   13dde:	e9c5 9816 	strd	r9, r8, [r5, #88]	; 0x58
   13de2:	6199      	str	r1, [r3, #24]

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
   13de4:	9908      	ldr	r1, [sp, #32]
	pInitCtx->basic.a1 = (u32_t)pEntry;
   13de6:	601f      	str	r7, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   13de8:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   13dea:	9909      	ldr	r1, [sp, #36]	; 0x24
   13dec:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   13dee:	990a      	ldr	r1, [sp, #40]	; 0x28
   13df0:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
   13df2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   13df6:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
   13df8:	64ab      	str	r3, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
   13dfa:	666a      	str	r2, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
   13dfc:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13e04:	0002683d 	.word	0x0002683d
   13e08:	00034dee 	.word	0x00034dee
   13e0c:	00034e1e 	.word	0x00034e1e
   13e10:	0003452c 	.word	0x0003452c
   13e14:	00034ea5 	.word	0x00034ea5
   13e18:	0002e311 	.word	0x0002e311

00013e1c <z_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void z_NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   13e1c:	b538      	push	{r3, r4, r5, lr}
   13e1e:	4604      	mov	r4, r0
   13e20:	460d      	mov	r5, r1
	const char *thread_name = k_thread_name_get(k_current_get());
#endif

	LOG_PANIC();

	switch (reason) {
   13e22:	2805      	cmp	r0, #5
   13e24:	d81c      	bhi.n	13e60 <z_NanoFatalErrorHandler+0x44>
   13e26:	e8df f000 	tbb	[pc, r0]
   13e2a:	1b03      	.short	0x1b03
   13e2c:	19171513 	.word	0x19171513
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
   13e30:	480e      	ldr	r0, [pc, #56]	; (13e6c <z_NanoFatalErrorHandler+0x50>)
		break;
#if defined(CONFIG_STACK_CANARIES) || defined(CONFIG_STACK_SENTINEL) || \
		defined(CONFIG_HW_STACK_PROTECTION) || \
		defined(CONFIG_USERSPACE)
	case _NANO_ERR_STACK_CHK_FAIL:
		printk("***** Stack Check Fail! *****\n");
   13e32:	f01a fbfe 	bl	2e632 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   13e36:	f014 fd09 	bl	2884c <z_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p"
   13e3a:	69aa      	ldr	r2, [r5, #24]
   13e3c:	4601      	mov	r1, r0
   13e3e:	480c      	ldr	r0, [pc, #48]	; (13e70 <z_NanoFatalErrorHandler+0x54>)
   13e40:	f01a fbf7 	bl	2e632 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	z_SysFatalErrorHandler(reason, pEsf);
   13e44:	4629      	mov	r1, r5
   13e46:	4620      	mov	r0, r4
}
   13e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_SysFatalErrorHandler(reason, pEsf);
   13e4c:	f000 b81c 	b.w	13e88 <z_SysFatalErrorHandler>
		printk("***** Stack Check Fail! *****\n");
   13e50:	4808      	ldr	r0, [pc, #32]	; (13e74 <z_NanoFatalErrorHandler+0x58>)
   13e52:	e7ee      	b.n	13e32 <z_NanoFatalErrorHandler+0x16>
		printk("**** Kernel Allocation Failure! ****\n");
   13e54:	4808      	ldr	r0, [pc, #32]	; (13e78 <z_NanoFatalErrorHandler+0x5c>)
   13e56:	e7ec      	b.n	13e32 <z_NanoFatalErrorHandler+0x16>
		printk("***** Kernel OOPS! *****\n");
   13e58:	4808      	ldr	r0, [pc, #32]	; (13e7c <z_NanoFatalErrorHandler+0x60>)
   13e5a:	e7ea      	b.n	13e32 <z_NanoFatalErrorHandler+0x16>
		printk("***** Kernel Panic! *****\n");
   13e5c:	4808      	ldr	r0, [pc, #32]	; (13e80 <z_NanoFatalErrorHandler+0x64>)
   13e5e:	e7e8      	b.n	13e32 <z_NanoFatalErrorHandler+0x16>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
   13e60:	4601      	mov	r1, r0
   13e62:	4808      	ldr	r0, [pc, #32]	; (13e84 <z_NanoFatalErrorHandler+0x68>)
   13e64:	f01a fbe5 	bl	2e632 <printk>
		break;
   13e68:	e7e5      	b.n	13e36 <z_NanoFatalErrorHandler+0x1a>
   13e6a:	bf00      	nop
   13e6c:	00034ed6 	.word	0x00034ed6
   13e70:	00034f93 	.word	0x00034f93
   13e74:	00034ef6 	.word	0x00034ef6
   13e78:	00034f15 	.word	0x00034f15
   13e7c:	00034f3b 	.word	0x00034f3b
   13e80:	00034f55 	.word	0x00034f55
   13e84:	00034f70 	.word	0x00034f70

00013e88 <z_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   13e88:	2805      	cmp	r0, #5
{
   13e8a:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   13e8c:	d00c      	beq.n	13ea8 <z_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || z_is_thread_essential()) {
   13e8e:	f014 fe01 	bl	28a94 <k_is_in_isr>
   13e92:	b160      	cbz	r0, 13eae <z_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
   13e94:	f014 fdfe 	bl	28a94 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
   13e98:	490c      	ldr	r1, [pc, #48]	; (13ecc <z_SysFatalErrorHandler+0x44>)
   13e9a:	4b0d      	ldr	r3, [pc, #52]	; (13ed0 <z_SysFatalErrorHandler+0x48>)
   13e9c:	2800      	cmp	r0, #0
   13e9e:	bf08      	it	eq
   13ea0:	4619      	moveq	r1, r3
   13ea2:	480c      	ldr	r0, [pc, #48]	; (13ed4 <z_SysFatalErrorHandler+0x4c>)
   13ea4:	f01a fbc5 	bl	2e632 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
   13ea8:	f7ff fd24 	bl	138f4 <k_cpu_idle>
   13eac:	e7fc      	b.n	13ea8 <z_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || z_is_thread_essential()) {
   13eae:	f014 fe01 	bl	28ab4 <z_is_thread_essential>
   13eb2:	2800      	cmp	r0, #0
   13eb4:	d1ee      	bne.n	13e94 <z_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
   13eb6:	4c08      	ldr	r4, [pc, #32]	; (13ed8 <z_SysFatalErrorHandler+0x50>)
   13eb8:	4808      	ldr	r0, [pc, #32]	; (13edc <z_SysFatalErrorHandler+0x54>)
   13eba:	68a1      	ldr	r1, [r4, #8]
   13ebc:	f01a fbb9 	bl	2e632 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
   13ec0:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
   13ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13ec6:	f000 b80b 	b.w	13ee0 <z_impl_k_thread_abort>
   13eca:	bf00      	nop
   13ecc:	00034fcf 	.word	0x00034fcf
   13ed0:	00034fd3 	.word	0x00034fd3
   13ed4:	00034fe4 	.word	0x00034fe4
   13ed8:	20027730 	.word	0x20027730
   13edc:	00035004 	.word	0x00035004

00013ee0 <z_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   13ee0:	b538      	push	{r3, r4, r5, lr}
   13ee2:	4604      	mov	r4, r0
	__asm__ volatile(
   13ee4:	f04f 0320 	mov.w	r3, #32
   13ee8:	f3ef 8511 	mrs	r5, BASEPRI
   13eec:	f383 8811 	msr	BASEPRI, r3
   13ef0:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   13ef4:	7b03      	ldrb	r3, [r0, #12]
   13ef6:	07db      	lsls	r3, r3, #31
   13ef8:	d50c      	bpl.n	13f14 <z_impl_k_thread_abort+0x34>
   13efa:	4912      	ldr	r1, [pc, #72]	; (13f44 <z_impl_k_thread_abort+0x64>)
   13efc:	2325      	movs	r3, #37	; 0x25
   13efe:	4a12      	ldr	r2, [pc, #72]	; (13f48 <z_impl_k_thread_abort+0x68>)
   13f00:	4812      	ldr	r0, [pc, #72]	; (13f4c <z_impl_k_thread_abort+0x6c>)
   13f02:	f01a fb96 	bl	2e632 <printk>
   13f06:	4812      	ldr	r0, [pc, #72]	; (13f50 <z_impl_k_thread_abort+0x70>)
   13f08:	f01a fb93 	bl	2e632 <printk>
   13f0c:	2125      	movs	r1, #37	; 0x25
   13f0e:	480e      	ldr	r0, [pc, #56]	; (13f48 <z_impl_k_thread_abort+0x68>)
   13f10:	f01a fb9c 	bl	2e64c <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
   13f14:	4620      	mov	r0, r4
   13f16:	f01c fd03 	bl	30920 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   13f1a:	4b0e      	ldr	r3, [pc, #56]	; (13f54 <z_impl_k_thread_abort+0x74>)
   13f1c:	689b      	ldr	r3, [r3, #8]
   13f1e:	42a3      	cmp	r3, r4
   13f20:	d10b      	bne.n	13f3a <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   13f22:	4b0d      	ldr	r3, [pc, #52]	; (13f58 <z_impl_k_thread_abort+0x78>)
   13f24:	685a      	ldr	r2, [r3, #4]
   13f26:	f3c2 0208 	ubfx	r2, r2, #0, #9
   13f2a:	b912      	cbnz	r2, 13f32 <z_impl_k_thread_abort+0x52>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
   13f2c:	4628      	mov	r0, r5
   13f2e:	f7ff fd25 	bl	1397c <__swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13f32:	685a      	ldr	r2, [r3, #4]
   13f34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   13f38:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   13f3a:	4628      	mov	r0, r5
}
   13f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   13f40:	f01c bcaf 	b.w	308a2 <z_reschedule_irqlock>
   13f44:	0003505f 	.word	0x0003505f
   13f48:	00035029 	.word	0x00035029
   13f4c:	0003452c 	.word	0x0003452c
   13f50:	0003508d 	.word	0x0003508d
   13f54:	20027730 	.word	0x20027730
   13f58:	e000ed00 	.word	0xe000ed00

00013f5c <__reset>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   13f5c:	f01a fb7d 	bl	2e65a <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13f60:	2020      	movs	r0, #32
    msr BASEPRI, r0
   13f62:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
   13f66:	4808      	ldr	r0, [pc, #32]	; (13f88 <__reset+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   13f68:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   13f6c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13f6e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13f72:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   13f76:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   13f78:	4308      	orrs	r0, r1
    msr CONTROL, r0
   13f7a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   13f7e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
   13f82:	f000 f807 	bl	13f94 <_PrepC>
   13f86:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   13f88:	2002aec0 	.word	0x2002aec0

00013f8c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13f8c:	bf30      	wfi
    b z_SysNmiOnReset
   13f8e:	f7ff bffd 	b.w	13f8c <z_SysNmiOnReset>
   13f92:	bf00      	nop

00013f94 <_PrepC>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13f94:	4a11      	ldr	r2, [pc, #68]	; (13fdc <_PrepC+0x48>)

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
   13f96:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13f98:	4b11      	ldr	r3, [pc, #68]	; (13fe0 <_PrepC+0x4c>)
   13f9a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13f9e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   13fa0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13fa4:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   13fa8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13fac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   13fb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   13fb4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   13fb8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   13fbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13fc0:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   13fc4:	2300      	movs	r3, #0
   13fc6:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
   13fca:	f012 fc51 	bl	26870 <z_bss_zero>
	z_data_copy();
   13fce:	f012 fc59 	bl	26884 <z_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	z_IntLibInit();
   13fd2:	f7ff fcc7 	bl	13964 <z_IntLibInit>
	z_cstart();
   13fd6:	f012 fc87 	bl	268e8 <z_cstart>
   13fda:	bf00      	nop
   13fdc:	0000c000 	.word	0x0000c000
   13fe0:	e000ed00 	.word	0xe000ed00

00013fe4 <z_arch_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_static_mpu_regions(void)
{
   13fe4:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   13fe6:	4b0e      	ldr	r3, [pc, #56]	; (14020 <z_arch_configure_static_mpu_regions+0x3c>)
{
   13fe8:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   13fea:	9302      	str	r3, [sp, #8]
   13fec:	4b0d      	ldr	r3, [pc, #52]	; (14024 <z_arch_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13fee:	4c0e      	ldr	r4, [pc, #56]	; (14028 <z_arch_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   13ff0:	9303      	str	r3, [sp, #12]
   13ff2:	4b0e      	ldr	r3, [pc, #56]	; (1402c <z_arch_configure_static_mpu_regions+0x48>)
	const struct k_mem_partition *static_regions[] = {
   13ff4:	a808      	add	r0, sp, #32
		const struct k_mem_partition ramfunc_region =
   13ff6:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   13ff8:	ab02      	add	r3, sp, #8
   13ffa:	f840 3d1c 	str.w	r3, [r0, #-28]!
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13ffe:	4a0c      	ldr	r2, [pc, #48]	; (14030 <z_arch_configure_static_mpu_regions+0x4c>)
   14000:	4623      	mov	r3, r4
   14002:	2101      	movs	r1, #1
   14004:	f000 f934 	bl	14270 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   14008:	2300      	movs	r3, #0
   1400a:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1400c:	4b09      	ldr	r3, [pc, #36]	; (14034 <z_arch_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1400e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   14010:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   14012:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   14014:	9305      	str	r3, [sp, #20]
   14016:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   14018:	f000 f94e 	bl	142b8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1401c:	b008      	add	sp, #32
   1401e:	bd10      	pop	{r4, pc}
   14020:	20020000 	.word	0x20020000
   14024:	00000000 	.word	0x00000000
   14028:	20040000 	.word	0x20040000
   1402c:	00010006 	.word	0x00010006
   14030:	20020000 	.word	0x20020000
   14034:	20020000 	.word	0x20020000

00014038 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   14038:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1403a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1403c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1403e:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   14042:	f004 021f 	and.w	r2, r4, #31
	ARM_MPU_SetRegion(
   14046:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   14048:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1404a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1404c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   14050:	4904      	ldr	r1, [pc, #16]	; (14064 <region_init+0x2c>)
	ARM_MPU_SetRegion(
   14052:	f043 0301 	orr.w	r3, r3, #1
   14056:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
   1405a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   1405c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   1405e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   14060:	bd10      	pop	{r4, pc}
   14062:	bf00      	nop
   14064:	e000ed90 	.word	0xe000ed90

00014068 <mpu_configure_regions.constprop.2>:

/* This internal function programs a set of given MPU regions
 * over a background memory area, optionally performing a
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
   14068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1406c:	4680      	mov	r8, r0
   1406e:	4689      	mov	r9, r1
   14070:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   14072:	2700      	movs	r7, #0
	MPU->RNR = index;
   14074:	4d48      	ldr	r5, [pc, #288]	; (14198 <mpu_configure_regions.constprop.2+0x130>)
static int mpu_configure_regions(const struct k_mem_partition
   14076:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   14078:	454f      	cmp	r7, r9
   1407a:	da07      	bge.n	1408c <mpu_configure_regions.constprop.2+0x24>
		if (regions[i]->size == 0U) {
   1407c:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
   14080:	685e      	ldr	r6, [r3, #4]
   14082:	b3c6      	cbz	r6, 140f6 <mpu_configure_regions.constprop.2+0x8e>
		&&
   14084:	2e1f      	cmp	r6, #31
   14086:	d805      	bhi.n	14094 <mpu_configure_regions.constprop.2+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   14088:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1408c:	4620      	mov	r0, r4
   1408e:	b005      	add	sp, #20
   14090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
   14094:	06f2      	lsls	r2, r6, #27
   14096:	d1f7      	bne.n	14088 <mpu_configure_regions.constprop.2+0x20>
		((part->start &
   14098:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   1409c:	f01a 0f1f 	tst.w	sl, #31
   140a0:	d1f2      	bne.n	14088 <mpu_configure_regions.constprop.2+0x20>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   140a2:	4650      	mov	r0, sl
   140a4:	f019 ffd6 	bl	2e054 <arm_cmse_mpu_region_get>
   140a8:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   140aa:	eb06 000a 	add.w	r0, r6, sl
   140ae:	3801      	subs	r0, #1
   140b0:	f019 ffd0 	bl	2e054 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   140b4:	4583      	cmp	fp, r0
   140b6:	d1e7      	bne.n	14088 <mpu_configure_regions.constprop.2+0x20>
		if ((u_reg_index == -EINVAL) ||
   140b8:	f11b 0f16 	cmn.w	fp, #22
   140bc:	d0e4      	beq.n	14088 <mpu_configure_regions.constprop.2+0x20>
			(u_reg_index > (reg_index - 1))) {
   140be:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   140c0:	455b      	cmp	r3, fp
   140c2:	dbe1      	blt.n	14088 <mpu_configure_regions.constprop.2+0x20>
	MPU->RNR = index;
   140c4:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   140c8:	68e8      	ldr	r0, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   140ca:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
   140ce:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   140d2:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   140d4:	f020 001f 	bic.w	r0, r0, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   140d8:	e9d1 3200 	ldrd	r3, r2, [r1]
   140dc:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   140de:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   140e0:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   140e4:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   140e8:	d118      	bne.n	1411c <mpu_configure_regions.constprop.2+0xb4>
   140ea:	4556      	cmp	r6, sl
   140ec:	d105      	bne.n	140fa <mpu_configure_regions.constprop.2+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
   140ee:	fa5f f08b 	uxtb.w	r0, fp
   140f2:	f01a faeb 	bl	2e6cc <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   140f6:	3701      	adds	r7, #1
   140f8:	e7be      	b.n	14078 <mpu_configure_regions.constprop.2+0x10>
	MPU->RNR = index;
   140fa:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   140fe:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   14100:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   14104:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   14108:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1410a:	60ea      	str	r2, [r5, #12]
			reg_index =
   1410c:	b2e0      	uxtb	r0, r4
			reg_index =
   1410e:	f01a fadd 	bl	2e6cc <mpu_configure_region>
			if (reg_index == -EINVAL) {
   14112:	f110 0f16 	cmn.w	r0, #22
   14116:	d0b7      	beq.n	14088 <mpu_configure_regions.constprop.2+0x20>
			reg_index++;
   14118:	1c44      	adds	r4, r0, #1
   1411a:	e7ec      	b.n	140f6 <mpu_configure_regions.constprop.2+0x8e>
	MPU->RNR = index;
   1411c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   14120:	692a      	ldr	r2, [r5, #16]
   14122:	3b01      	subs	r3, #1
   14124:	f023 031f 	bic.w	r3, r3, #31
   14128:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   1412c:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   1412e:	4556      	cmp	r6, sl
   14130:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   14132:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   14134:	d0eb      	beq.n	1410e <mpu_configure_regions.constprop.2+0xa6>
			reg_index =
   14136:	f01a fac9 	bl	2e6cc <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1413a:	f110 0f16 	cmn.w	r0, #22
   1413e:	d0a3      	beq.n	14088 <mpu_configure_regions.constprop.2+0x20>
	MPU->RNR = index;
   14140:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   14144:	68ea      	ldr	r2, [r5, #12]
   14146:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   1414a:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
   1414c:	f362 0304 	bfi	r3, r2, #0, #5
   14150:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   14154:	692b      	ldr	r3, [r5, #16]
   14156:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1415a:	085b      	lsrs	r3, r3, #1
   1415c:	f363 1247 	bfi	r2, r3, #5, #3
   14160:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   14164:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
   14168:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
   1416a:	e9d2 3200 	ldrd	r3, r2, [r2]
   1416e:	4413      	add	r3, r2
   14170:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   14172:	f023 031f 	bic.w	r3, r3, #31
   14176:	441e      	add	r6, r3
   14178:	eba6 060a 	sub.w	r6, r6, sl
   1417c:	b2c4      	uxtb	r4, r0
   1417e:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   14182:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
   14184:	9603      	str	r6, [sp, #12]
   14186:	f63f af7f 	bhi.w	14088 <mpu_configure_regions.constprop.2+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   1418a:	4620      	mov	r0, r4
   1418c:	4669      	mov	r1, sp
   1418e:	f7ff ff53 	bl	14038 <region_init>
			reg_index++;
   14192:	3401      	adds	r4, #1
   14194:	e7af      	b.n	140f6 <mpu_configure_regions.constprop.2+0x8e>
   14196:	bf00      	nop
   14198:	e000ed90 	.word	0xe000ed90

0001419c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1419c:	2205      	movs	r2, #5
   1419e:	4b03      	ldr	r3, [pc, #12]	; (141ac <arm_core_mpu_enable+0x10>)
   141a0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   141a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   141a6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   141aa:	4770      	bx	lr
   141ac:	e000ed90 	.word	0xe000ed90

000141b0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   141b0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   141b4:	2200      	movs	r2, #0
   141b6:	4b01      	ldr	r3, [pc, #4]	; (141bc <arm_core_mpu_disable+0xc>)
   141b8:	605a      	str	r2, [r3, #4]
}
   141ba:	4770      	bx	lr
   141bc:	e000ed90 	.word	0xe000ed90

000141c0 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   141c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   141c2:	4f21      	ldr	r7, [pc, #132]	; (14248 <arm_mpu_init+0x88>)
   141c4:	683e      	ldr	r6, [r7, #0]
   141c6:	2e10      	cmp	r6, #16
   141c8:	d913      	bls.n	141f2 <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   141ca:	f240 1307 	movw	r3, #263	; 0x107
   141ce:	4a1f      	ldr	r2, [pc, #124]	; (1424c <arm_mpu_init+0x8c>)
   141d0:	491f      	ldr	r1, [pc, #124]	; (14250 <arm_mpu_init+0x90>)
   141d2:	4820      	ldr	r0, [pc, #128]	; (14254 <arm_mpu_init+0x94>)
   141d4:	f01a fa2d 	bl	2e632 <printk>
   141d8:	2210      	movs	r2, #16
   141da:	4631      	mov	r1, r6
   141dc:	481e      	ldr	r0, [pc, #120]	; (14258 <arm_mpu_init+0x98>)
   141de:	f01a fa28 	bl	2e632 <printk>
   141e2:	481a      	ldr	r0, [pc, #104]	; (1424c <arm_mpu_init+0x8c>)
   141e4:	f240 1107 	movw	r1, #263	; 0x107
   141e8:	f01a fa30 	bl	2e64c <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   141ec:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   141f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   141f2:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   141f4:	f7ff ffdc 	bl	141b0 <arm_core_mpu_disable>
	MPU->MAIR0 =
   141f8:	4d18      	ldr	r5, [pc, #96]	; (1425c <arm_mpu_init+0x9c>)
   141fa:	4a19      	ldr	r2, [pc, #100]	; (14260 <arm_mpu_init+0xa0>)
   141fc:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   141fe:	42a6      	cmp	r6, r4
   14200:	d119      	bne.n	14236 <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   14202:	4b18      	ldr	r3, [pc, #96]	; (14264 <arm_mpu_init+0xa4>)
   14204:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
   14206:	f7ff ffc9 	bl	1419c <arm_core_mpu_enable>
	__ASSERT(
   1420a:	682b      	ldr	r3, [r5, #0]
   1420c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14210:	2b10      	cmp	r3, #16
   14212:	d00e      	beq.n	14232 <arm_mpu_init+0x72>
   14214:	4914      	ldr	r1, [pc, #80]	; (14268 <arm_mpu_init+0xa8>)
   14216:	f44f 7394 	mov.w	r3, #296	; 0x128
   1421a:	4a0c      	ldr	r2, [pc, #48]	; (1424c <arm_mpu_init+0x8c>)
   1421c:	480d      	ldr	r0, [pc, #52]	; (14254 <arm_mpu_init+0x94>)
   1421e:	f01a fa08 	bl	2e632 <printk>
   14222:	4812      	ldr	r0, [pc, #72]	; (1426c <arm_mpu_init+0xac>)
   14224:	f01a fa05 	bl	2e632 <printk>
   14228:	f44f 7194 	mov.w	r1, #296	; 0x128
   1422c:	4807      	ldr	r0, [pc, #28]	; (1424c <arm_mpu_init+0x8c>)
   1422e:	f01a fa0d 	bl	2e64c <assert_post_action>
	return 0;
   14232:	2000      	movs	r0, #0
   14234:	e7dc      	b.n	141f0 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   14236:	6879      	ldr	r1, [r7, #4]
   14238:	4620      	mov	r0, r4
   1423a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1423e:	f7ff fefb 	bl	14038 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14242:	3401      	adds	r4, #1
   14244:	e7db      	b.n	141fe <arm_mpu_init+0x3e>
   14246:	bf00      	nop
   14248:	00030eb4 	.word	0x00030eb4
   1424c:	00035130 	.word	0x00035130
   14250:	00035e56 	.word	0x00035e56
   14254:	0003452c 	.word	0x0003452c
   14258:	0003516e 	.word	0x0003516e
   1425c:	e000ed90 	.word	0xe000ed90
   14260:	0044ffaa 	.word	0x0044ffaa
   14264:	200278f4 	.word	0x200278f4
   14268:	000351a2 	.word	0x000351a2
   1426c:	000351f3 	.word	0x000351f3

00014270 <arm_core_mpu_configure_static_mpu_regions>:
{
   14270:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   14272:	4c0c      	ldr	r4, [pc, #48]	; (142a4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   14274:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   14276:	7822      	ldrb	r2, [r4, #0]
   14278:	f7ff fef6 	bl	14068 <mpu_configure_regions.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1427c:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1427e:	3016      	adds	r0, #22
   14280:	d10f      	bne.n	142a2 <arm_core_mpu_configure_static_mpu_regions+0x32>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   14282:	23cd      	movs	r3, #205	; 0xcd
   14284:	4a08      	ldr	r2, [pc, #32]	; (142a8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   14286:	4909      	ldr	r1, [pc, #36]	; (142ac <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   14288:	4809      	ldr	r0, [pc, #36]	; (142b0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   1428a:	f01a f9d2 	bl	2e632 <printk>
   1428e:	4629      	mov	r1, r5
   14290:	4808      	ldr	r0, [pc, #32]	; (142b4 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   14292:	f01a f9ce 	bl	2e632 <printk>
}
   14296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1429a:	21cd      	movs	r1, #205	; 0xcd
   1429c:	4802      	ldr	r0, [pc, #8]	; (142a8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   1429e:	f01a b9d5 	b.w	2e64c <assert_post_action>
}
   142a2:	bd38      	pop	{r3, r4, r5, pc}
   142a4:	200278f4 	.word	0x200278f4
   142a8:	00035130 	.word	0x00035130
   142ac:	00035e56 	.word	0x00035e56
   142b0:	0003452c 	.word	0x0003452c
   142b4:	000350d5 	.word	0x000350d5

000142b8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   142b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142bc:	460f      	mov	r7, r1
   142be:	4680      	mov	r8, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   142c0:	2600      	movs	r6, #0
   142c2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 14388 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>
		if (dyn_reg_info[i].index == -EINVAL) {

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   142c6:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1438c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>
	MPU->RNR = index;
   142ca:	4c2a      	ldr	r4, [pc, #168]	; (14374 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   142cc:	42be      	cmp	r6, r7
   142ce:	db02      	blt.n	142d6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
   142d0:	b003      	add	sp, #12
   142d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   142d6:	f8d8 b004 	ldr.w	fp, [r8, #4]
   142da:	f1bb 0f00 	cmp.w	fp, #0
   142de:	d045      	beq.n	1436c <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>
			get_region_index(dyn_region_areas[i].start,
   142e0:	f8d8 3000 	ldr.w	r3, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   142e4:	4618      	mov	r0, r3
   142e6:	9301      	str	r3, [sp, #4]
   142e8:	f019 feb4 	bl	2e054 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   142ec:	9b01      	ldr	r3, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   142ee:	4605      	mov	r5, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   142f0:	eb0b 0003 	add.w	r0, fp, r3
   142f4:	3801      	subs	r0, #1
   142f6:	f019 fead 	bl	2e054 <arm_cmse_mpu_region_get>
   142fa:	2314      	movs	r3, #20
	if (region_start_addr == region_end_addr) {
   142fc:	4285      	cmp	r5, r0
   142fe:	fb03 f306 	mul.w	r3, r3, r6
   14302:	d014      	beq.n	1432e <arm_core_mpu_mark_areas_for_dynamic_regions+0x76>
		dyn_reg_info[i].index =
   14304:	f06f 0215 	mvn.w	r2, #21
   14308:	f849 2003 	str.w	r2, [r9, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1430c:	23dd      	movs	r3, #221	; 0xdd
   1430e:	4a1a      	ldr	r2, [pc, #104]	; (14378 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
   14310:	491a      	ldr	r1, [pc, #104]	; (1437c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   14312:	481b      	ldr	r0, [pc, #108]	; (14380 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   14314:	f01a f98d 	bl	2e632 <printk>
   14318:	4639      	mov	r1, r7
   1431a:	481a      	ldr	r0, [pc, #104]	; (14384 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   1431c:	f01a f989 	bl	2e632 <printk>
   14320:	21dd      	movs	r1, #221	; 0xdd
   14322:	4815      	ldr	r0, [pc, #84]	; (14378 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
}
   14324:	b003      	add	sp, #12
   14326:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1432a:	f01a b98f 	b.w	2e64c <assert_post_action>
		if (dyn_reg_info[i].index == -EINVAL) {
   1432e:	f115 0f16 	cmn.w	r5, #22
		dyn_reg_info[i].index =
   14332:	f849 5003 	str.w	r5, [r9, r3]
		if (dyn_reg_info[i].index == -EINVAL) {
   14336:	d0e9      	beq.n	1430c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		if (dyn_reg_info[i].index >= static_regions_num) {
   14338:	f89a 2000 	ldrb.w	r2, [sl]
   1433c:	42aa      	cmp	r2, r5
   1433e:	dde5      	ble.n	1430c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	MPU->RNR = index;
   14340:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
   14342:	444b      	add	r3, r9
	MPU->RNR = index;
   14344:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
   14346:	68e0      	ldr	r0, [r4, #12]
   14348:	7b19      	ldrb	r1, [r3, #12]
   1434a:	f360 0104 	bfi	r1, r0, #0, #5
   1434e:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   14350:	6921      	ldr	r1, [r4, #16]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   14352:	68e2      	ldr	r2, [r4, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   14354:	7b18      	ldrb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   14356:	f022 021f 	bic.w	r2, r2, #31
   1435a:	605a      	str	r2, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   1435c:	6922      	ldr	r2, [r4, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1435e:	0849      	lsrs	r1, r1, #1
   14360:	f361 1047 	bfi	r0, r1, #5, #3
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   14364:	f022 021f 	bic.w	r2, r2, #31
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   14368:	7318      	strb	r0, [r3, #12]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   1436a:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1436c:	3601      	adds	r6, #1
   1436e:	f108 080c 	add.w	r8, r8, #12
   14372:	e7ab      	b.n	142cc <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   14374:	e000ed90 	.word	0xe000ed90
   14378:	00035130 	.word	0x00035130
   1437c:	00035e56 	.word	0x00035e56
   14380:	0003452c 	.word	0x0003452c
   14384:	00035101 	.word	0x00035101
   14388:	200209a4 	.word	0x200209a4
   1438c:	200278f4 	.word	0x200278f4

00014390 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   14390:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   14392:	4b15      	ldr	r3, [pc, #84]	; (143e8 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   14394:	460c      	mov	r4, r1
   14396:	781d      	ldrb	r5, [r3, #0]
   14398:	4606      	mov	r6, r0
   1439a:	462b      	mov	r3, r5
  mpu->RLAR = 0U;
   1439c:	2100      	movs	r1, #0
  mpu->RNR = rnr;
   1439e:	4a13      	ldr	r2, [pc, #76]	; (143ec <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   143a0:	2b0f      	cmp	r3, #15
   143a2:	dd1b      	ble.n	143dc <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>

	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
   143a4:	4b12      	ldr	r3, [pc, #72]	; (143f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   143a6:	1d19      	adds	r1, r3, #4
   143a8:	6818      	ldr	r0, [r3, #0]
   143aa:	f7ff fe45 	bl	14038 <region_init>
	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   143ae:	462a      	mov	r2, r5
   143b0:	4621      	mov	r1, r4
   143b2:	4630      	mov	r0, r6
   143b4:	f7ff fe58 	bl	14068 <mpu_configure_regions.constprop.2>
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   143b8:	3016      	adds	r0, #22
   143ba:	d113      	bne.n	143e4 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   143bc:	23ec      	movs	r3, #236	; 0xec
   143be:	4a0d      	ldr	r2, [pc, #52]	; (143f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
   143c0:	490d      	ldr	r1, [pc, #52]	; (143f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
   143c2:	480e      	ldr	r0, [pc, #56]	; (143fc <arm_core_mpu_configure_dynamic_mpu_regions+0x6c>)
   143c4:	f01a f935 	bl	2e632 <printk>
   143c8:	4621      	mov	r1, r4
   143ca:	480d      	ldr	r0, [pc, #52]	; (14400 <arm_core_mpu_configure_dynamic_mpu_regions+0x70>)
   143cc:	f01a f931 	bl	2e632 <printk>
}
   143d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   143d4:	21ec      	movs	r1, #236	; 0xec
   143d6:	4807      	ldr	r0, [pc, #28]	; (143f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
   143d8:	f01a b938 	b.w	2e64c <assert_post_action>
   143dc:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   143de:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   143e0:	3301      	adds	r3, #1
   143e2:	e7dd      	b.n	143a0 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
}
   143e4:	bd70      	pop	{r4, r5, r6, pc}
   143e6:	bf00      	nop
   143e8:	200278f4 	.word	0x200278f4
   143ec:	e000ed90 	.word	0xe000ed90
   143f0:	200209a4 	.word	0x200209a4
   143f4:	00035130 	.word	0x00035130
   143f8:	00035e56 	.word	0x00035e56
   143fc:	0003452c 	.word	0x0003452c
   14400:	000350a8 	.word	0x000350a8

00014404 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   14404:	4b01      	ldr	r3, [pc, #4]	; (1440c <__stdout_hook_install+0x8>)
   14406:	6018      	str	r0, [r3, #0]
}
   14408:	4770      	bx	lr
   1440a:	bf00      	nop
   1440c:	2002d824 	.word	0x2002d824

00014410 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   14410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14412:	4606      	mov	r6, r0
   14414:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   14416:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   14418:	4f06      	ldr	r7, [pc, #24]	; (14434 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   1441a:	42ac      	cmp	r4, r5
   1441c:	da08      	bge.n	14430 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   1441e:	683b      	ldr	r3, [r7, #0]
   14420:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   14422:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   14424:	5530      	strb	r0, [r6, r4]
   14426:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1442a:	d001      	beq.n	14430 <z_impl_zephyr_read_stdin+0x20>
   1442c:	280d      	cmp	r0, #13
   1442e:	d1f4      	bne.n	1441a <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   14430:	4620      	mov	r0, r4
   14432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14434:	2002d820 	.word	0x2002d820

00014438 <z_impl_zephyr_write_stdout>:
	return z_impl_zephyr_read_stdin((char *)buf, nbytes);
}
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   14438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1443c:	4606      	mov	r6, r0
   1443e:	460d      	mov	r5, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   14440:	4604      	mov	r4, r0
   14442:	4f0a      	ldr	r7, [pc, #40]	; (1446c <z_impl_zephyr_write_stdout+0x34>)
   14444:	1ba3      	subs	r3, r4, r6
   14446:	429d      	cmp	r5, r3
   14448:	dc02      	bgt.n	14450 <z_impl_zephyr_write_stdout+0x18>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   1444a:	4628      	mov	r0, r5
   1444c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (*(buf + i) == '\n') {
   14450:	7823      	ldrb	r3, [r4, #0]
   14452:	46a0      	mov	r8, r4
   14454:	2b0a      	cmp	r3, #10
   14456:	d102      	bne.n	1445e <z_impl_zephyr_write_stdout+0x26>
			_stdout_hook('\r');
   14458:	683b      	ldr	r3, [r7, #0]
   1445a:	200d      	movs	r0, #13
   1445c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   1445e:	683b      	ldr	r3, [r7, #0]
   14460:	f898 0000 	ldrb.w	r0, [r8]
   14464:	3401      	adds	r4, #1
   14466:	4798      	blx	r3
   14468:	e7ec      	b.n	14444 <z_impl_zephyr_write_stdout+0xc>
   1446a:	bf00      	nop
   1446c:	2002d824 	.word	0x2002d824

00014470 <_exit>:
	return 0;
}
FUNC_ALIAS(_fstat, fstat, int);

void _exit(int status)
{
   14470:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   14472:	2105      	movs	r1, #5
   14474:	4801      	ldr	r0, [pc, #4]	; (1447c <_exit+0xc>)
   14476:	f7ff ffdf 	bl	14438 <z_impl_zephyr_write_stdout>
   1447a:	e7fe      	b.n	1447a <_exit+0xa>
   1447c:	00035214 	.word	0x00035214

00014480 <_sbrk>:
void *_sbrk(int count)
{
#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	void *ptr = heap_base + heap_sz;
#else
	void *ptr = _end + heap_sz;
   14480:	4907      	ldr	r1, [pc, #28]	; (144a0 <_sbrk+0x20>)
{
   14482:	b510      	push	{r4, lr}
	void *ptr = _end + heap_sz;
   14484:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   14486:	18c4      	adds	r4, r0, r3
   14488:	4806      	ldr	r0, [pc, #24]	; (144a4 <_sbrk+0x24>)
   1448a:	f1c0 5200 	rsb	r2, r0, #536870912	; 0x20000000
   1448e:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   14492:	4294      	cmp	r4, r2
	void *ptr = _end + heap_sz;
   14494:	bf3a      	itte	cc
   14496:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
   14498:	600c      	strcc	r4, [r1, #0]
		return ptr;
	} else {
		return (void *)-1;
   1449a:	f04f 30ff 	movcs.w	r0, #4294967295
	}
}
   1449e:	bd10      	pop	{r4, pc}
   144a0:	200209b8 	.word	0x200209b8
   144a4:	2002e040 	.word	0x2002e040

000144a8 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   144a8:	2124      	movs	r1, #36	; 0x24
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   144aa:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
   144ac:	4a04      	ldr	r2, [pc, #16]	; (144c0 <net_buf_id+0x18>)
   144ae:	fb01 2303 	mla	r3, r1, r3, r2
   144b2:	6a1b      	ldr	r3, [r3, #32]
   144b4:	1ac0      	subs	r0, r0, r3
}
   144b6:	4b03      	ldr	r3, [pc, #12]	; (144c4 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   144b8:	10c0      	asrs	r0, r0, #3
}
   144ba:	4358      	muls	r0, r3
   144bc:	4770      	bx	lr
   144be:	bf00      	nop
   144c0:	2002dfa0 	.word	0x2002dfa0
   144c4:	aaaaaaab 	.word	0xaaaaaaab

000144c8 <fixed_data_alloc>:
	.ref   = generic_data_ref,
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size, s32_t timeout)
{
   144c8:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   144ca:	2424      	movs	r4, #36	; 0x24
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   144cc:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   144ce:	4a09      	ldr	r2, [pc, #36]	; (144f4 <fixed_data_alloc+0x2c>)
   144d0:	fb04 2303 	mla	r3, r4, r3, r2
   144d4:	69db      	ldr	r3, [r3, #28]

	*size = MIN(fixed->data_size, *size);
   144d6:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   144d8:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   144da:	6823      	ldr	r3, [r4, #0]
   144dc:	429a      	cmp	r2, r3
   144de:	bf94      	ite	ls
   144e0:	600a      	strls	r2, [r1, #0]
   144e2:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   144e4:	f7ff ffe0 	bl	144a8 <net_buf_id>
   144e8:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   144ec:	fb02 3000 	mla	r0, r2, r0, r3
   144f0:	bd10      	pop	{r4, pc}
   144f2:	bf00      	nop
   144f4:	2002dfa0 	.word	0x2002dfa0

000144f8 <net_context_init>:
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   144f8:	f04f 32ff 	mov.w	r2, #4294967295
   144fc:	2101      	movs	r1, #1
   144fe:	4801      	ldr	r0, [pc, #4]	; (14504 <net_context_init+0xc>)
   14500:	f014 b9aa 	b.w	28858 <z_impl_k_sem_init>
   14504:	200209bc 	.word	0x200209bc

00014508 <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   14508:	b538      	push	{r3, r4, r5, lr}
   1450a:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   1450c:	4604      	mov	r4, r0
   1450e:	b958      	cbnz	r0, 14528 <net_if_flag_is_set+0x20>
   14510:	4909      	ldr	r1, [pc, #36]	; (14538 <net_if_flag_is_set+0x30>)
   14512:	480a      	ldr	r0, [pc, #40]	; (1453c <net_if_flag_is_set+0x34>)
   14514:	f240 2306 	movw	r3, #518	; 0x206
   14518:	4a09      	ldr	r2, [pc, #36]	; (14540 <net_if_flag_is_set+0x38>)
   1451a:	f01a f88a 	bl	2e632 <printk>
   1451e:	f240 2106 	movw	r1, #518	; 0x206
   14522:	4807      	ldr	r0, [pc, #28]	; (14540 <net_if_flag_is_set+0x38>)
   14524:	f01a f892 	bl	2e64c <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14528:	6823      	ldr	r3, [r4, #0]
   1452a:	330c      	adds	r3, #12
   1452c:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14530:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   14532:	f000 0001 	and.w	r0, r0, #1
   14536:	bd38      	pop	{r3, r4, r5, pc}
   14538:	00035248 	.word	0x00035248
   1453c:	0003452c 	.word	0x0003452c
   14540:	0003521a 	.word	0x0003521a

00014544 <net_if_flag_set.constprop.25>:
static inline void net_if_flag_set(struct net_if *iface,
   14544:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   14546:	4604      	mov	r4, r0
   14548:	b958      	cbnz	r0, 14562 <net_if_flag_set.constprop.25+0x1e>
   1454a:	490b      	ldr	r1, [pc, #44]	; (14578 <net_if_flag_set.constprop.25+0x34>)
   1454c:	480b      	ldr	r0, [pc, #44]	; (1457c <net_if_flag_set.constprop.25+0x38>)
   1454e:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
   14552:	4a0b      	ldr	r2, [pc, #44]	; (14580 <net_if_flag_set.constprop.25+0x3c>)
   14554:	f01a f86d 	bl	2e632 <printk>
   14558:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
   1455c:	4808      	ldr	r0, [pc, #32]	; (14580 <net_if_flag_set.constprop.25+0x3c>)
   1455e:	f01a f875 	bl	2e64c <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14562:	6823      	ldr	r3, [r4, #0]
   14564:	330c      	adds	r3, #12
   14566:	e8d3 2fef 	ldaex	r2, [r3]
   1456a:	f042 0201 	orr.w	r2, r2, #1
   1456e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14572:	2900      	cmp	r1, #0
   14574:	d1f7      	bne.n	14566 <net_if_flag_set.constprop.25+0x22>
}
   14576:	bd10      	pop	{r4, pc}
   14578:	00035248 	.word	0x00035248
   1457c:	0003452c 	.word	0x0003452c
   14580:	0003521a 	.word	0x0003521a

00014584 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   14584:	b510      	push	{r4, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   14586:	2100      	movs	r1, #0
{
   14588:	4604      	mov	r4, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1458a:	f7ff ffbd 	bl	14508 <net_if_flag_is_set>
   1458e:	b928      	cbnz	r0, 1459c <net_if_up+0x18>
		return 0;
	}

	if (IS_ENABLED(CONFIG_NET_OFFLOAD) && net_if_is_ip_offloaded(iface)) {
   14590:	6823      	ldr	r3, [r4, #0]
   14592:	699a      	ldr	r2, [r3, #24]
   14594:	b122      	cbz	r2, 145a0 <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   14596:	4620      	mov	r0, r4
   14598:	f7ff ffd4 	bl	14544 <net_if_flag_set.constprop.25>
		return 0;
   1459c:	2000      	movs	r0, #0
   1459e:	e018      	b.n	145d2 <net_if_up+0x4e>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface)->enable) {
   145a0:	685b      	ldr	r3, [r3, #4]
   145a2:	689b      	ldr	r3, [r3, #8]
   145a4:	b983      	cbnz	r3, 145c8 <net_if_up+0x44>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   145a6:	6823      	ldr	r3, [r4, #0]
   145a8:	691b      	ldr	r3, [r3, #16]
   145aa:	2b00      	cmp	r3, #0
   145ac:	d1f3      	bne.n	14596 <net_if_up+0x12>
   145ae:	f640 3354 	movw	r3, #2900	; 0xb54
   145b2:	4a08      	ldr	r2, [pc, #32]	; (145d4 <net_if_up+0x50>)
   145b4:	4908      	ldr	r1, [pc, #32]	; (145d8 <net_if_up+0x54>)
   145b6:	4809      	ldr	r0, [pc, #36]	; (145dc <net_if_up+0x58>)
   145b8:	f01a f83b 	bl	2e632 <printk>
   145bc:	f640 3154 	movw	r1, #2900	; 0xb54
   145c0:	4804      	ldr	r0, [pc, #16]	; (145d4 <net_if_up+0x50>)
   145c2:	f01a f843 	bl	2e64c <assert_post_action>
   145c6:	e7e6      	b.n	14596 <net_if_up+0x12>
	status = net_if_l2(iface)->enable(iface, true);
   145c8:	2101      	movs	r1, #1
   145ca:	4620      	mov	r0, r4
   145cc:	4798      	blx	r3
	if (status < 0) {
   145ce:	2800      	cmp	r0, #0
   145d0:	dae9      	bge.n	145a6 <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   145d2:	bd10      	pop	{r4, pc}
   145d4:	0003527f 	.word	0x0003527f
   145d8:	0003524e 	.word	0x0003524e
   145dc:	0003452c 	.word	0x0003452c

000145e0 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP */

void net_if_init(void)
{
   145e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   145e2:	4e0a      	ldr	r6, [pc, #40]	; (1460c <net_if_init+0x2c>)
	int i;
#endif

	NET_DBG("");

	net_tc_tx_init();
   145e4:	f000 f82e 	bl	14644 <net_tc_tx_init>
#if defined(CONFIG_NET_IPV6)
	k_delayed_work_init(&address_lifetime_timer, address_lifetime_timeout);
	k_delayed_work_init(&prefix_lifetime_timer, prefix_lifetime_timeout);
#endif

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   145e8:	2400      	movs	r4, #0
   145ea:	4637      	mov	r7, r6
   145ec:	4d08      	ldr	r5, [pc, #32]	; (14610 <net_if_init+0x30>)
   145ee:	1bad      	subs	r5, r5, r6
   145f0:	42ac      	cmp	r4, r5
   145f2:	eb06 0004 	add.w	r0, r6, r4
   145f6:	d100      	bne.n	145fa <net_if_init+0x1a>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   145f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   145fa:	593b      	ldr	r3, [r7, r4]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   145fc:	681b      	ldr	r3, [r3, #0]
   145fe:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   14600:	b113      	cbz	r3, 14608 <net_if_init+0x28>
   14602:	681b      	ldr	r3, [r3, #0]
   14604:	b103      	cbz	r3, 14608 <net_if_init+0x28>
	api->init(iface);
   14606:	4798      	blx	r3
   14608:	3420      	adds	r4, #32
   1460a:	e7f1      	b.n	145f0 <net_if_init+0x10>
   1460c:	2002e000 	.word	0x2002e000
   14610:	2002e020 	.word	0x2002e020

00014614 <net_if_post_init>:

void net_if_post_init(void)
{
   14614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   14616:	2400      	movs	r4, #0
   14618:	4f08      	ldr	r7, [pc, #32]	; (1463c <net_if_post_init+0x28>)
   1461a:	4d09      	ldr	r5, [pc, #36]	; (14640 <net_if_post_init+0x2c>)
   1461c:	1bed      	subs	r5, r5, r7
   1461e:	42ac      	cmp	r4, r5
   14620:	eb04 0607 	add.w	r6, r4, r7
   14624:	d100      	bne.n	14628 <net_if_post_init+0x14>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   14626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   14628:	2103      	movs	r1, #3
   1462a:	4630      	mov	r0, r6
   1462c:	f7ff ff6c 	bl	14508 <net_if_flag_is_set>
   14630:	b910      	cbnz	r0, 14638 <net_if_post_init+0x24>
			net_if_up(iface);
   14632:	4630      	mov	r0, r6
   14634:	f7ff ffa6 	bl	14584 <net_if_up>
   14638:	3420      	adds	r4, #32
   1463a:	e7f0      	b.n	1461e <net_if_post_init+0xa>
   1463c:	2002e000 	.word	0x2002e000
   14640:	2002e020 	.word	0x2002e020

00014644 <net_tc_tx_init>:

	for (i = 0; i < NET_TC_TX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = tx_tc2thread(i);
		tx_classes[i].tc = thread_priority;
   14644:	2307      	movs	r3, #7
{
   14646:	b510      	push	{r4, lr}
		tx_classes[i].tc = thread_priority;
   14648:	4c08      	ldr	r4, [pc, #32]	; (1466c <net_tc_tx_init+0x28>)
			"prio %d (%d)", i,
			&tx_classes[i].work_q.queue, TX_STACK(i),
			K_THREAD_STACK_SIZEOF(tx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&tx_classes[i].work_q,
   1464a:	4909      	ldr	r1, [pc, #36]	; (14670 <net_tc_tx_init+0x2c>)
		tx_classes[i].tc = thread_priority;
   1464c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
		k_work_q_start(&tx_classes[i].work_q,
   14650:	4620      	mov	r0, r4
   14652:	f06f 0308 	mvn.w	r3, #8
   14656:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1465a:	f014 fbd5 	bl	28e08 <k_work_q_start>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   1465e:	f104 0014 	add.w	r0, r4, #20
   14662:	4904      	ldr	r1, [pc, #16]	; (14674 <net_tc_tx_init+0x30>)
			       tx_stack[i],
			       K_THREAD_STACK_SIZEOF(tx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&tx_classes[i].work_q.thread, "tx_workq");
	}
}
   14664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14668:	f01c b959 	b.w	3091e <z_impl_k_thread_name_set>
   1466c:	20020aa0 	.word	0x20020aa0
   14670:	20027ef0 	.word	0x20027ef0
   14674:	000352b8 	.word	0x000352b8

00014678 <net_tc_rx_init>:

	for (i = 0; i < NET_TC_RX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = rx_tc2thread(i);
		rx_classes[i].tc = thread_priority;
   14678:	2307      	movs	r3, #7
{
   1467a:	b510      	push	{r4, lr}
		rx_classes[i].tc = thread_priority;
   1467c:	4c08      	ldr	r4, [pc, #32]	; (146a0 <net_tc_rx_init+0x28>)
			"prio %d (%d)", i,
			&rx_classes[i].work_q.queue, RX_STACK(i),
			K_THREAD_STACK_SIZEOF(rx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&rx_classes[i].work_q,
   1467e:	4909      	ldr	r1, [pc, #36]	; (146a4 <net_tc_rx_init+0x2c>)
		rx_classes[i].tc = thread_priority;
   14680:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
		k_work_q_start(&rx_classes[i].work_q,
   14684:	4620      	mov	r0, r4
   14686:	f06f 0308 	mvn.w	r3, #8
   1468a:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1468e:	f014 fbbb 	bl	28e08 <k_work_q_start>
   14692:	f104 0014 	add.w	r0, r4, #20
   14696:	4904      	ldr	r1, [pc, #16]	; (146a8 <net_tc_rx_init+0x30>)
			       rx_stack[i],
			       K_THREAD_STACK_SIZEOF(rx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&rx_classes[i].work_q.thread, "rx_workq");
	}
}
   14698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1469c:	f01c b93f 	b.w	3091e <z_impl_k_thread_name_set>
   146a0:	200209d4 	.word	0x200209d4
   146a4:	200283a0 	.word	0x200283a0
   146a8:	000352af 	.word	0x000352af

000146ac <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   146ac:	b570      	push	{r4, r5, r6, lr}
   146ae:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   146b0:	6884      	ldr	r4, [r0, #8]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   146b2:	460d      	mov	r5, r1
   146b4:	b961      	cbnz	r1, 146d0 <gpio_nrfx_manage_callback+0x24>
   146b6:	4922      	ldr	r1, [pc, #136]	; (14740 <gpio_nrfx_manage_callback+0x94>)
   146b8:	231c      	movs	r3, #28
   146ba:	4a22      	ldr	r2, [pc, #136]	; (14744 <gpio_nrfx_manage_callback+0x98>)
   146bc:	4822      	ldr	r0, [pc, #136]	; (14748 <gpio_nrfx_manage_callback+0x9c>)
   146be:	f019 ffb8 	bl	2e632 <printk>
   146c2:	4822      	ldr	r0, [pc, #136]	; (1474c <gpio_nrfx_manage_callback+0xa0>)
   146c4:	f019 ffb5 	bl	2e632 <printk>
   146c8:	211c      	movs	r1, #28
   146ca:	481e      	ldr	r0, [pc, #120]	; (14744 <gpio_nrfx_manage_callback+0x98>)
   146cc:	f019 ffbe 	bl	2e64c <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   146d0:	686b      	ldr	r3, [r5, #4]
   146d2:	b963      	cbnz	r3, 146ee <gpio_nrfx_manage_callback+0x42>
   146d4:	491e      	ldr	r1, [pc, #120]	; (14750 <gpio_nrfx_manage_callback+0xa4>)
   146d6:	231d      	movs	r3, #29
   146d8:	4a1a      	ldr	r2, [pc, #104]	; (14744 <gpio_nrfx_manage_callback+0x98>)
   146da:	481b      	ldr	r0, [pc, #108]	; (14748 <gpio_nrfx_manage_callback+0x9c>)
   146dc:	f019 ffa9 	bl	2e632 <printk>
   146e0:	481c      	ldr	r0, [pc, #112]	; (14754 <gpio_nrfx_manage_callback+0xa8>)
   146e2:	f019 ffa6 	bl	2e632 <printk>
   146e6:	211d      	movs	r1, #29
   146e8:	4816      	ldr	r0, [pc, #88]	; (14744 <gpio_nrfx_manage_callback+0x98>)
   146ea:	f019 ffaf 	bl	2e64c <assert_post_action>
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
   146ee:	6823      	ldr	r3, [r4, #0]

	if (!sys_slist_is_empty(callbacks)) {
   146f0:	b15b      	cbz	r3, 1470a <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   146f2:	2200      	movs	r2, #0
   146f4:	429d      	cmp	r5, r3
   146f6:	d113      	bne.n	14720 <gpio_nrfx_manage_callback+0x74>
   146f8:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   146fa:	b95a      	cbnz	r2, 14714 <gpio_nrfx_manage_callback+0x68>
   146fc:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   146fe:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   14700:	4295      	cmp	r5, r2
   14702:	d100      	bne.n	14706 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   14704:	6063      	str	r3, [r4, #4]
	parent->next = child;
   14706:	2300      	movs	r3, #0
   14708:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1470a:	b976      	cbnz	r6, 1472a <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1470c:	2000      	movs	r0, #0
				     callback, set);
}
   1470e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14710:	460b      	mov	r3, r1
   14712:	e7ef      	b.n	146f4 <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
   14714:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   14716:	6863      	ldr	r3, [r4, #4]
   14718:	429d      	cmp	r5, r3
	list->tail = node;
   1471a:	bf08      	it	eq
   1471c:	6062      	streq	r2, [r4, #4]
   1471e:	e7f2      	b.n	14706 <gpio_nrfx_manage_callback+0x5a>
	return node->next;
   14720:	6819      	ldr	r1, [r3, #0]
   14722:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14724:	2900      	cmp	r1, #0
   14726:	d1f3      	bne.n	14710 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   14728:	b13e      	cbz	r6, 1473a <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   1472a:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   1472c:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1472e:	6860      	ldr	r0, [r4, #4]
	list->head = node;
   14730:	6025      	str	r5, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   14732:	2800      	cmp	r0, #0
   14734:	d1ea      	bne.n	1470c <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   14736:	6065      	str	r5, [r4, #4]
   14738:	e7e9      	b.n	1470e <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   1473a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1473e:	e7e6      	b.n	1470e <gpio_nrfx_manage_callback+0x62>
   14740:	0003530d 	.word	0x0003530d
   14744:	000352da 	.word	0x000352da
   14748:	0003452c 	.word	0x0003452c
   1474c:	00035316 	.word	0x00035316
   14750:	00035325 	.word	0x00035325
   14754:	00035337 	.word	0x00035337

00014758 <nrf_gpio_pin_port_decode.isra.6.part.7>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   14758:	b508      	push	{r3, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   1475a:	4a03      	ldr	r2, [pc, #12]	; (14768 <nrf_gpio_pin_port_decode.isra.6.part.7+0x10>)
   1475c:	4b03      	ldr	r3, [pc, #12]	; (1476c <nrf_gpio_pin_port_decode.isra.6.part.7+0x14>)
   1475e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   14762:	4803      	ldr	r0, [pc, #12]	; (14770 <nrf_gpio_pin_port_decode.isra.6.part.7+0x18>)
   14764:	f015 fd04 	bl	2a170 <__assert_func>
   14768:	000352c1 	.word	0x000352c1
   1476c:	0003535a 	.word	0x0003535a
   14770:	00035368 	.word	0x00035368

00014774 <nrf_gpio_cfg_sense_set>:
   14774:	281f      	cmp	r0, #31
        sense_config);
}


__STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number, nrf_gpio_pin_sense_t sense_config)
{
   14776:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   14778:	d901      	bls.n	1477e <nrf_gpio_cfg_sense_set+0xa>
   1477a:	f7ff ffed 	bl	14758 <nrf_gpio_pin_port_decode.isra.6.part.7>
   1477e:	4b08      	ldr	r3, [pc, #32]	; (147a0 <nrf_gpio_cfg_sense_set+0x2c>)
   14780:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   14784:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   14788:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   1478c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   14790:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   14794:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   14798:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   1479c:	bd08      	pop	{r3, pc}
   1479e:	bf00      	nop
   147a0:	40842500 	.word	0x40842500

000147a4 <gpiote_pin_int_cfg>:
{
   147a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
   147a8:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   147aa:	f001 041f 	and.w	r4, r1, #31
   147ae:	689b      	ldr	r3, [r3, #8]
{
   147b0:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   147b2:	791b      	ldrb	r3, [r3, #4]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
   147b4:	4e48      	ldr	r6, [pc, #288]	; (148d8 <gpiote_pin_int_cfg+0x134>)
   147b6:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   147ba:	2300      	movs	r3, #0
   147bc:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
   147c0:	6887      	ldr	r7, [r0, #8]
   147c2:	b2d2      	uxtb	r2, r2
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   147c4:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   147c8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   147cc:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
   147d0:	428c      	cmp	r4, r1
   147d2:	d166      	bne.n	148a2 <gpiote_pin_int_cfg+0xfe>
		    && (intenset & BIT(i))) {
   147d4:	fa22 f103 	lsr.w	r1, r2, r3
   147d8:	07c9      	lsls	r1, r1, #31
   147da:	d562      	bpl.n	148a2 <gpiote_pin_int_cfg+0xfe>
   147dc:	009a      	lsls	r2, r3, #2
   147de:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   147e2:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   147e6:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   147ea:	f021 0101 	bic.w	r1, r1, #1
   147ee:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
   147f2:	2201      	movs	r2, #1
   147f4:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
   147f8:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   147fc:	4620      	mov	r0, r4
   147fe:	2100      	movs	r1, #0
   14800:	f7ff ffb8 	bl	14774 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   14804:	68b8      	ldr	r0, [r7, #8]
   14806:	40e8      	lsrs	r0, r5
   14808:	f010 0001 	ands.w	r0, r0, #1
   1480c:	d047      	beq.n	1489e <gpiote_pin_int_cfg+0xfa>
   1480e:	68f8      	ldr	r0, [r7, #12]
   14810:	40e8      	lsrs	r0, r5
   14812:	f010 0001 	ands.w	r0, r0, #1
   14816:	d042      	beq.n	1489e <gpiote_pin_int_cfg+0xfa>
		if (data->trig_edge & BIT(pin)) {
   14818:	6978      	ldr	r0, [r7, #20]
   1481a:	40e8      	lsrs	r0, r5
   1481c:	f010 0801 	ands.w	r8, r0, #1
   14820:	d04b      	beq.n	148ba <gpiote_pin_int_cfg+0x116>
			if (data->double_edge & BIT(pin)) {
   14822:	69bb      	ldr	r3, [r7, #24]
   14824:	40eb      	lsrs	r3, r5
   14826:	07db      	lsls	r3, r3, #31
   14828:	d43f      	bmi.n	148aa <gpiote_pin_int_cfg+0x106>
			} else if (((data->active_level & BIT(pin)) != 0U)
   1482a:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   1482c:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   1482e:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   14830:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
   14834:	f003 0301 	and.w	r3, r3, #1
   14838:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
   1483c:	42ab      	cmp	r3, r5
   1483e:	bf0c      	ite	eq
   14840:	2502      	moveq	r5, #2
   14842:	2501      	movne	r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   14844:	2200      	movs	r2, #0
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   14846:	f502 73a2 	add.w	r3, r2, #324	; 0x144
   1484a:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
   1484e:	f010 0003 	ands.w	r0, r0, #3
   14852:	d12c      	bne.n	148ae <gpiote_pin_int_cfg+0x10a>
			nrf_gpiote_events_t evt =
   14854:	0093      	lsls	r3, r2, #2
   14856:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1485a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1485e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14862:	0224      	lsls	r4, r4, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14864:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   14868:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   1486c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14870:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   14874:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   14878:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1487c:	430d      	orrs	r5, r1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1487e:	4917      	ldr	r1, [pc, #92]	; (148dc <gpiote_pin_int_cfg+0x138>)
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14880:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   14884:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   14888:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1488c:	f041 0101 	orr.w	r1, r1, #1
   14890:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
   14894:	2301      	movs	r3, #1
   14896:	fa03 f202 	lsl.w	r2, r3, r2
    NRF_GPIOTE->INTENSET = mask;
   1489a:	f8c6 2304 	str.w	r2, [r6, #772]	; 0x304
}
   1489e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   148a2:	3301      	adds	r3, #1
   148a4:	2b08      	cmp	r3, #8
   148a6:	d18d      	bne.n	147c4 <gpiote_pin_int_cfg+0x20>
   148a8:	e7a8      	b.n	147fc <gpiote_pin_int_cfg+0x58>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   148aa:	2503      	movs	r5, #3
   148ac:	e7ca      	b.n	14844 <gpiote_pin_int_cfg+0xa0>
   148ae:	3201      	adds	r2, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   148b0:	2a08      	cmp	r2, #8
   148b2:	d1c8      	bne.n	14846 <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
   148b4:	f06f 0012 	mvn.w	r0, #18
   148b8:	e7f1      	b.n	1489e <gpiote_pin_int_cfg+0xfa>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   148ba:	693b      	ldr	r3, [r7, #16]
   148bc:	69fa      	ldr	r2, [r7, #28]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   148be:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   148c0:	4053      	eors	r3, r2
   148c2:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   148c6:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   148ca:	bf0c      	ite	eq
   148cc:	2103      	moveq	r1, #3
   148ce:	2102      	movne	r1, #2
   148d0:	f7ff ff50 	bl	14774 <nrf_gpio_cfg_sense_set>
	int res = 0;
   148d4:	4640      	mov	r0, r8
   148d6:	e7e2      	b.n	1489e <gpiote_pin_int_cfg+0xfa>
   148d8:	40031000 	.word	0x40031000
   148dc:	40031100 	.word	0x40031100

000148e0 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   148e0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   148e2:	4b09      	ldr	r3, [pc, #36]	; (14908 <gpio_nrfx_init+0x28>)
   148e4:	781a      	ldrb	r2, [r3, #0]
   148e6:	b96a      	cbnz	r2, 14904 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   148e8:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ,
   148ea:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   148ec:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ,
   148ee:	2105      	movs	r1, #5
   148f0:	f7ff fa02 	bl	13cf8 <z_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ);
   148f4:	2031      	movs	r0, #49	; 0x31
   148f6:	f7ff f9db 	bl	13cb0 <z_arch_irq_enable>
   148fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   148fe:	4b03      	ldr	r3, [pc, #12]	; (1490c <gpio_nrfx_init+0x2c>)
   14900:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   14904:	2000      	movs	r0, #0
   14906:	bd08      	pop	{r3, pc}
   14908:	200278f5 	.word	0x200278f5
   1490c:	40031000 	.word	0x40031000

00014910 <gpio_nrfx_config>:
{
   14910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14914:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   14916:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   14918:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   1491c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   14920:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   14922:	d049      	beq.n	149b8 <gpio_nrfx_config+0xa8>
   14924:	dc2c      	bgt.n	14980 <gpio_nrfx_config+0x70>
   14926:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   1492a:	d03d      	beq.n	149a8 <gpio_nrfx_config+0x98>
   1492c:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   14930:	d03e      	beq.n	149b0 <gpio_nrfx_config+0xa0>
   14932:	bb60      	cbnz	r0, 1498e <gpio_nrfx_config+0x7e>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   14934:	f406 7740 	and.w	r7, r6, #768	; 0x300
   14938:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   1493c:	d03e      	beq.n	149bc <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_PULLUP;
   1493e:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   14942:	4263      	negs	r3, r4
   14944:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   14946:	2901      	cmp	r1, #1
		from_pin = pin;
   14948:	bf19      	ittee	ne
   1494a:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   1494c:	46a1      	movne	r9, r4
		to_pin   = 31U;
   1494e:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   14952:	2400      	moveq	r4, #0
   14954:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   14958:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   1495c:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   14960:	ea47 070c 	orr.w	r7, r7, ip
   14964:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14968:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 14a3c <gpio_nrfx_config+0x12c>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1496c:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   14970:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   14974:	45a1      	cmp	r9, r4
   14976:	d223      	bcs.n	149c0 <gpio_nrfx_config+0xb0>
	return 0;
   14978:	2000      	movs	r0, #0
}
   1497a:	b003      	add	sp, #12
   1497c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   14980:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   14984:	d016      	beq.n	149b4 <gpio_nrfx_config+0xa4>
   14986:	dc05      	bgt.n	14994 <gpio_nrfx_config+0x84>
   14988:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   1498c:	d00e      	beq.n	149ac <gpio_nrfx_config+0x9c>
		return -EINVAL;
   1498e:	f06f 0015 	mvn.w	r0, #21
   14992:	e7f2      	b.n	1497a <gpio_nrfx_config+0x6a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   14994:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   14998:	d004      	beq.n	149a4 <gpio_nrfx_config+0x94>
   1499a:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   1499e:	d1f6      	bne.n	1498e <gpio_nrfx_config+0x7e>
		drive = NRF_GPIO_PIN_H0D1;
   149a0:	2007      	movs	r0, #7
		break;
   149a2:	e7c7      	b.n	14934 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0D1;
   149a4:	2006      	movs	r0, #6
		break;
   149a6:	e7c5      	b.n	14934 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0S1;
   149a8:	2001      	movs	r0, #1
		break;
   149aa:	e7c3      	b.n	14934 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   149ac:	2003      	movs	r0, #3
		break;
   149ae:	e7c1      	b.n	14934 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0S1;
   149b0:	2004      	movs	r0, #4
		break;
   149b2:	e7bf      	b.n	14934 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0H1;
   149b4:	2005      	movs	r0, #5
		break;
   149b6:	e7bd      	b.n	14934 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0H1;
   149b8:	2002      	movs	r0, #2
   149ba:	e7bb      	b.n	14934 <gpio_nrfx_config+0x24>
		pull = NRF_GPIO_PIN_PULLUP;
   149bc:	2303      	movs	r3, #3
   149be:	e7c2      	b.n	14946 <gpio_nrfx_config+0x36>
	return port->config->config_info;
   149c0:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   149c4:	6892      	ldr	r2, [r2, #8]
   149c6:	7911      	ldrb	r1, [r2, #4]
   149c8:	f004 021f 	and.w	r2, r4, #31
   149cc:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   149d0:	2a1f      	cmp	r2, #31
   149d2:	dd01      	ble.n	149d8 <gpio_nrfx_config+0xc8>
   149d4:	f7ff fec0 	bl	14758 <nrf_gpio_pin_port_decode.isra.6.part.7>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   149d8:	3280      	adds	r2, #128	; 0x80
   149da:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
   149de:	68a9      	ldr	r1, [r5, #8]
   149e0:	fa0b f204 	lsl.w	r2, fp, r4
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   149e4:	2b00      	cmp	r3, #0
   149e6:	d025      	beq.n	14a34 <gpio_nrfx_config+0x124>
   149e8:	4311      	orrs	r1, r2
   149ea:	60a9      	str	r1, [r5, #8]
   149ec:	6969      	ldr	r1, [r5, #20]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   149ee:	06b0      	lsls	r0, r6, #26
   149f0:	bf4c      	ite	mi
   149f2:	4311      	orrmi	r1, r2
   149f4:	4391      	bicpl	r1, r2
   149f6:	6169      	str	r1, [r5, #20]
   149f8:	69a9      	ldr	r1, [r5, #24]
		WRITE_BIT(data->double_edge, curr_pin,
   149fa:	0670      	lsls	r0, r6, #25
   149fc:	bf4c      	ite	mi
   149fe:	4311      	orrmi	r1, r2
   14a00:	4391      	bicpl	r1, r2
   14a02:	61a9      	str	r1, [r5, #24]
   14a04:	6929      	ldr	r1, [r5, #16]
		WRITE_BIT(data->active_level, curr_pin,
   14a06:	0770      	lsls	r0, r6, #29
   14a08:	bf4c      	ite	mi
   14a0a:	4311      	orrmi	r1, r2
   14a0c:	4391      	bicpl	r1, r2
   14a0e:	6129      	str	r1, [r5, #16]
   14a10:	69e9      	ldr	r1, [r5, #28]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   14a12:	0630      	lsls	r0, r6, #24
   14a14:	bf4c      	ite	mi
   14a16:	430a      	orrmi	r2, r1
   14a18:	ea21 0202 	bicpl.w	r2, r1, r2
   14a1c:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   14a1e:	4621      	mov	r1, r4
   14a20:	4640      	mov	r0, r8
   14a22:	9301      	str	r3, [sp, #4]
   14a24:	f7ff febe 	bl	147a4 <gpiote_pin_int_cfg>
		if (res != 0) {
   14a28:	2800      	cmp	r0, #0
   14a2a:	d1a6      	bne.n	1497a <gpio_nrfx_config+0x6a>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   14a2c:	3401      	adds	r4, #1
   14a2e:	b2e4      	uxtb	r4, r4
   14a30:	9b01      	ldr	r3, [sp, #4]
   14a32:	e79f      	b.n	14974 <gpio_nrfx_config+0x64>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   14a34:	ea21 0102 	bic.w	r1, r1, r2
   14a38:	e7d7      	b.n	149ea <gpio_nrfx_config+0xda>
   14a3a:	bf00      	nop
   14a3c:	40842500 	.word	0x40842500

00014a40 <gpiote_event_handler>:
{
   14a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
   14a44:	4f52      	ldr	r7, [pc, #328]	; (14b90 <gpiote_event_handler+0x150>)
   14a46:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
   14a48:	2e01      	cmp	r6, #1
   14a4a:	d174      	bne.n	14b36 <gpiote_event_handler+0xf6>
	u32_t bit = 1U << pin;
   14a4c:	46b0      	mov	r8, r6
	u32_t pin = 0U;
   14a4e:	f04f 0a00 	mov.w	sl, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   14a52:	4a50      	ldr	r2, [pc, #320]	; (14b94 <gpiote_event_handler+0x154>)
   14a54:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   14a56:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   14a58:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
   14a5a:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   14a5e:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
   14a62:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
   14a64:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   14a68:	430a      	orrs	r2, r1
   14a6a:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   14a6e:	f8d9 2000 	ldr.w	r2, [r9]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   14a72:	691b      	ldr	r3, [r3, #16]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   14a74:	6912      	ldr	r2, [r2, #16]
   14a76:	405c      	eors	r4, r3
   14a78:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
   14a7a:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   14a7e:	2d00      	cmp	r5, #0
   14a80:	d146      	bne.n	14b10 <gpiote_event_handler+0xd0>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   14a82:	603d      	str	r5, [r7, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   14a84:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
   14a86:	2701      	movs	r7, #1
   14a88:	469e      	mov	lr, r3
    return (NRF_GPIOTE->INTENSET & mask);
   14a8a:	4d43      	ldr	r5, [pc, #268]	; (14b98 <gpiote_event_handler+0x158>)
   14a8c:	f8df c114 	ldr.w	ip, [pc, #276]	; 14ba4 <gpiote_event_handler+0x164>
   14a90:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
   14a94:	fa07 f103 	lsl.w	r1, r7, r3
   14a98:	4211      	tst	r1, r2
   14a9a:	d00f      	beq.n	14abc <gpiote_event_handler+0x7c>
   14a9c:	eb03 020c 	add.w	r2, r3, ip
   14aa0:	0092      	lsls	r2, r2, #2
   14aa2:	6811      	ldr	r1, [r2, #0]
   14aa4:	2901      	cmp	r1, #1
   14aa6:	d109      	bne.n	14abc <gpiote_event_handler+0x7c>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14aa8:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   14aac:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   14ab0:	f8c2 e000 	str.w	lr, [r2]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14ab4:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   14ab8:	4081      	lsls	r1, r0
   14aba:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   14abc:	3301      	adds	r3, #1
   14abe:	2b08      	cmp	r3, #8
   14ac0:	d1e6      	bne.n	14a90 <gpiote_event_handler+0x50>
	if (fired_triggers[0]) {
   14ac2:	2c00      	cmp	r4, #0
   14ac4:	d039      	beq.n	14b3a <gpiote_event_handler+0xfa>
	gpio_fire_callbacks(&get_port_data(port)->callbacks, port, pins);
   14ac6:	4833      	ldr	r0, [pc, #204]	; (14b94 <gpiote_event_handler+0x154>)
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14ac8:	6883      	ldr	r3, [r0, #8]
   14aca:	681d      	ldr	r5, [r3, #0]
   14acc:	b3ad      	cbz	r5, 14b3a <gpiote_event_handler+0xfa>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   14ace:	4680      	mov	r8, r0
	return node->next;
   14ad0:	682f      	ldr	r7, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
   14ad2:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 14ba8 <gpiote_event_handler+0x168>
   14ad6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 14bac <gpiote_event_handler+0x16c>
		if (cb->pin_mask & pins) {
   14ada:	68ab      	ldr	r3, [r5, #8]
   14adc:	421c      	tst	r4, r3
   14ade:	d013      	beq.n	14b08 <gpiote_event_handler+0xc8>
			__ASSERT(cb->handler, "No callback handler!");
   14ae0:	686b      	ldr	r3, [r5, #4]
   14ae2:	b963      	cbnz	r3, 14afe <gpiote_event_handler+0xbe>
   14ae4:	4651      	mov	r1, sl
   14ae6:	233d      	movs	r3, #61	; 0x3d
   14ae8:	464a      	mov	r2, r9
   14aea:	482c      	ldr	r0, [pc, #176]	; (14b9c <gpiote_event_handler+0x15c>)
   14aec:	f019 fda1 	bl	2e632 <printk>
   14af0:	482b      	ldr	r0, [pc, #172]	; (14ba0 <gpiote_event_handler+0x160>)
   14af2:	f019 fd9e 	bl	2e632 <printk>
   14af6:	213d      	movs	r1, #61	; 0x3d
   14af8:	4648      	mov	r0, r9
   14afa:	f019 fda7 	bl	2e64c <assert_post_action>
			cb->handler(port, cb, pins);
   14afe:	686b      	ldr	r3, [r5, #4]
   14b00:	4622      	mov	r2, r4
   14b02:	4629      	mov	r1, r5
   14b04:	4640      	mov	r0, r8
   14b06:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14b08:	b1bf      	cbz	r7, 14b3a <gpiote_event_handler+0xfa>
   14b0a:	463d      	mov	r5, r7
   14b0c:	683f      	ldr	r7, [r7, #0]
   14b0e:	e7e4      	b.n	14ada <gpiote_event_handler+0x9a>
		if (level_pins & bit) {
   14b10:	ea15 0f08 	tst.w	r5, r8
   14b14:	d00a      	beq.n	14b2c <gpiote_event_handler+0xec>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14b16:	f899 3004 	ldrb.w	r3, [r9, #4]
   14b1a:	f00a 001f 	and.w	r0, sl, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   14b1e:	2100      	movs	r1, #0
   14b20:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   14b24:	f7ff fe26 	bl	14774 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   14b28:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   14b2c:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   14b30:	ea4f 0848 	mov.w	r8, r8, lsl #1
   14b34:	e7a3      	b.n	14a7e <gpiote_event_handler+0x3e>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   14b36:	2400      	movs	r4, #0
   14b38:	e7a4      	b.n	14a84 <gpiote_event_handler+0x44>
	if (port_event) {
   14b3a:	2e01      	cmp	r6, #1
   14b3c:	d10e      	bne.n	14b5c <gpiote_event_handler+0x11c>
	u32_t pin = 0U;
   14b3e:	2700      	movs	r7, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   14b40:	4b14      	ldr	r3, [pc, #80]	; (14b94 <gpiote_event_handler+0x154>)
   14b42:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
   14b44:	681b      	ldr	r3, [r3, #0]
   14b46:	f8d3 8008 	ldr.w	r8, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   14b4a:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
   14b4e:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   14b50:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
   14b54:	4313      	orrs	r3, r2
   14b56:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   14b5a:	b90c      	cbnz	r4, 14b60 <gpiote_event_handler+0x120>
}
   14b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (level_pins & bit) {
   14b60:	4226      	tst	r6, r4
   14b62:	d012      	beq.n	14b8a <gpiote_event_handler+0x14a>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   14b64:	692b      	ldr	r3, [r5, #16]
   14b66:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14b68:	f898 c004 	ldrb.w	ip, [r8, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   14b6c:	4053      	eors	r3, r2
   14b6e:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
   14b70:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14b74:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   14b78:	bf0c      	ite	eq
   14b7a:	2103      	moveq	r1, #3
   14b7c:	2102      	movne	r1, #2
   14b7e:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
   14b82:	f7ff fdf7 	bl	14774 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   14b86:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   14b8a:	3701      	adds	r7, #1
		bit <<= 1;
   14b8c:	0076      	lsls	r6, r6, #1
   14b8e:	e7e4      	b.n	14b5a <gpiote_event_handler+0x11a>
   14b90:	4003117c 	.word	0x4003117c
   14b94:	2002de98 	.word	0x2002de98
   14b98:	40031000 	.word	0x40031000
   14b9c:	0003452c 	.word	0x0003452c
   14ba0:	00035337 	.word	0x00035337
   14ba4:	1000c440 	.word	0x1000c440
   14ba8:	000352da 	.word	0x000352da
   14bac:	0003534e 	.word	0x0003534e

00014bb0 <flash_nrf_write_protection>:
}

static int flash_nrf_write_protection(struct device *dev, bool enable)
{
	/* virtual write-erase protection */
	write_protect = enable;
   14bb0:	4b01      	ldr	r3, [pc, #4]	; (14bb8 <flash_nrf_write_protection+0x8>)

	return 0;
}
   14bb2:	2000      	movs	r0, #0
	write_protect = enable;
   14bb4:	7019      	strb	r1, [r3, #0]
}
   14bb6:	4770      	bx	lr
   14bb8:	200278f6 	.word	0x200278f6

00014bbc <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   14bbc:	4b02      	ldr	r3, [pc, #8]	; (14bc8 <flash_nrf_pages_layout+0xc>)
   14bbe:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   14bc0:	2301      	movs	r3, #1
   14bc2:	6013      	str	r3, [r2, #0]
}
   14bc4:	4770      	bx	lr
   14bc6:	bf00      	nop
   14bc8:	20020b8c 	.word	0x20020b8c

00014bcc <nrf_flash_init>:
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   14bcc:	2201      	movs	r2, #1
#endif
	.write_block_size = 1,
};

static int nrf_flash_init(struct device *dev)
{
   14bce:	b510      	push	{r4, lr}
   14bd0:	4611      	mov	r1, r2
   14bd2:	4807      	ldr	r0, [pc, #28]	; (14bf0 <nrf_flash_init+0x24>)
   14bd4:	f013 fe40 	bl	28858 <z_impl_k_sem_init>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	k_sem_init(&sem_sync, 0, 1);
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   14bd8:	f019 fd47 	bl	2e66a <nrfx_nvmc_flash_page_count_get>
   14bdc:	4c05      	ldr	r4, [pc, #20]	; (14bf4 <nrf_flash_init+0x28>)
   14bde:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   14be0:	f019 fd40 	bl	2e664 <nrfx_nvmc_flash_page_size_get>
#endif
	write_protect = true;
   14be4:	2201      	movs	r2, #1
   14be6:	4b04      	ldr	r3, [pc, #16]	; (14bf8 <nrf_flash_init+0x2c>)
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   14be8:	6060      	str	r0, [r4, #4]
	write_protect = true;
   14bea:	701a      	strb	r2, [r3, #0]

	return 0;
}
   14bec:	2000      	movs	r0, #0
   14bee:	bd10      	pop	{r4, pc}
   14bf0:	20020b94 	.word	0x20020b94
   14bf4:	20020b8c 	.word	0x20020b8c
   14bf8:	200278f6 	.word	0x200278f6

00014bfc <flash_nrf_erase>:
{
   14bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14bfe:	4616      	mov	r6, r2
   14c00:	460d      	mov	r5, r1
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   14c02:	f019 fd2f 	bl	2e664 <nrfx_nvmc_flash_page_size_get>
	if (write_protect) {
   14c06:	4b17      	ldr	r3, [pc, #92]	; (14c64 <flash_nrf_erase+0x68>)
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   14c08:	4607      	mov	r7, r0
	if (write_protect) {
   14c0a:	781b      	ldrb	r3, [r3, #0]
	u32_t n_pages = size / pg_size;
   14c0c:	fbb6 f4f0 	udiv	r4, r6, r0
	if (write_protect) {
   14c10:	bb03      	cbnz	r3, 14c54 <flash_nrf_erase+0x58>
	if (is_regular_addr_valid(addr, size)) {
   14c12:	4631      	mov	r1, r6
   14c14:	4628      	mov	r0, r5
   14c16:	f019 fe1d 	bl	2e854 <is_regular_addr_valid>
   14c1a:	b1f0      	cbz	r0, 14c5a <flash_nrf_erase+0x5e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   14c1c:	fbb5 f3f7 	udiv	r3, r5, r7
   14c20:	fb07 5313 	mls	r3, r7, r3, r5
   14c24:	b9cb      	cbnz	r3, 14c5a <flash_nrf_erase+0x5e>
   14c26:	fb07 6714 	mls	r7, r7, r4, r6
   14c2a:	b9b7      	cbnz	r7, 14c5a <flash_nrf_erase+0x5e>
		if (!n_pages) {
   14c2c:	b1c4      	cbz	r4, 14c60 <flash_nrf_erase+0x64>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   14c2e:	f04f 31ff 	mov.w	r1, #4294967295
   14c32:	480d      	ldr	r0, [pc, #52]	; (14c68 <flash_nrf_erase+0x6c>)
   14c34:	f013 fe8e 	bl	28954 <z_impl_k_sem_take>

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   14c38:	f019 fd14 	bl	2e664 <nrfx_nvmc_flash_page_size_get>
   14c3c:	4604      	mov	r4, r0
		return FLASH_OP_DONE;
	}
#endif

	do {
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   14c3e:	4628      	mov	r0, r5
   14c40:	f7fe f9ce 	bl	12fe0 <nrfx_nvmc_page_erase>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
   14c44:	1b36      	subs	r6, r6, r4
   14c46:	4425      	add	r5, r4
   14c48:	d1f9      	bne.n	14c3e <flash_nrf_erase+0x42>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   14c4a:	4807      	ldr	r0, [pc, #28]	; (14c68 <flash_nrf_erase+0x6c>)
   14c4c:	f013 fe3a 	bl	288c4 <z_impl_k_sem_give>
	return ret;
   14c50:	4630      	mov	r0, r6
}
   14c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EACCES;
   14c54:	f06f 000c 	mvn.w	r0, #12
   14c58:	e7fb      	b.n	14c52 <flash_nrf_erase+0x56>
		return -EINVAL;
   14c5a:	f06f 0015 	mvn.w	r0, #21
   14c5e:	e7f8      	b.n	14c52 <flash_nrf_erase+0x56>
			return 0;
   14c60:	4620      	mov	r0, r4
   14c62:	e7f6      	b.n	14c52 <flash_nrf_erase+0x56>
   14c64:	200278f6 	.word	0x200278f6
   14c68:	20020b94 	.word	0x20020b94

00014c6c <flash_nrf_write>:
{
   14c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14c70:	461d      	mov	r5, r3
	if (write_protect) {
   14c72:	4b28      	ldr	r3, [pc, #160]	; (14d14 <flash_nrf_write+0xa8>)
{
   14c74:	460c      	mov	r4, r1
	if (write_protect) {
   14c76:	781b      	ldrb	r3, [r3, #0]
{
   14c78:	4616      	mov	r6, r2
	if (write_protect) {
   14c7a:	2b00      	cmp	r3, #0
   14c7c:	d141      	bne.n	14d02 <flash_nrf_write+0x96>
	return is_regular_addr_valid(addr, len) ||
   14c7e:	4629      	mov	r1, r5
   14c80:	4620      	mov	r0, r4
   14c82:	f019 fde7 	bl	2e854 <is_regular_addr_valid>
	if (!is_addr_valid(addr, len)) {
   14c86:	2800      	cmp	r0, #0
   14c88:	d03e      	beq.n	14d08 <flash_nrf_write+0x9c>
	if (!len) {
   14c8a:	2d00      	cmp	r5, #0
   14c8c:	d03f      	beq.n	14d0e <flash_nrf_write+0xa2>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   14c8e:	f04f 31ff 	mov.w	r1, #4294967295
   14c92:	4821      	ldr	r0, [pc, #132]	; (14d18 <flash_nrf_write+0xac>)
   14c94:	f013 fe5e 	bl	28954 <z_impl_k_sem_take>
		ticks_begin = ticker_ticks_now_get();
	}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	/* If not aligned, write unaligned beginning */
	if (!is_aligned_32(w_ctx->flash_addr)) {
   14c98:	f014 0703 	ands.w	r7, r4, #3
   14c9c:	d00c      	beq.n	14cb8 <flash_nrf_write+0x4c>
		count = sizeof(u32_t) - (w_ctx->flash_addr & 0x3);
   14c9e:	f1c7 0704 	rsb	r7, r7, #4
   14ca2:	42af      	cmp	r7, r5
   14ca4:	bf28      	it	cs
   14ca6:	462f      	movcs	r7, r5
		if (count > w_ctx->len) {
			count = w_ctx->len;
		}

		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
   14ca8:	4631      	mov	r1, r6
   14caa:	4620      	mov	r0, r4
   14cac:	463a      	mov	r2, r7
   14cae:	f7fe f9e9 	bl	13084 <nrfx_nvmc_bytes_write>
	w_ctx->flash_addr += shift;
   14cb2:	443c      	add	r4, r7
	w_ctx->data_addr += shift;
   14cb4:	443e      	add	r6, r7
	w_ctx->len -= shift;
   14cb6:	1bed      	subs	r5, r5, r7
   14cb8:	f025 0803 	bic.w	r8, r5, #3
   14cbc:	eb04 0708 	add.w	r7, r4, r8
	}

	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(u32_t)) {
		nrfx_nvmc_word_write(w_ctx->flash_addr,
				     UNALIGNED_GET((u32_t *)w_ctx->data_addr));
   14cc0:	eba6 0904 	sub.w	r9, r6, r4
   14cc4:	e005      	b.n	14cd2 <flash_nrf_write+0x66>
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   14cc6:	f859 1004 	ldr.w	r1, [r9, r4]
   14cca:	4620      	mov	r0, r4
   14ccc:	f7fe f9b4 	bl	13038 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   14cd0:	3404      	adds	r4, #4
	while (w_ctx->len >= sizeof(u32_t)) {
   14cd2:	42a7      	cmp	r7, r4
   14cd4:	d1f7      	bne.n	14cc6 <flash_nrf_write+0x5a>
   14cd6:	f06f 0303 	mvn.w	r3, #3
   14cda:	08aa      	lsrs	r2, r5, #2
   14cdc:	fb03 5202 	mla	r2, r3, r2, r5
   14ce0:	eb06 0108 	add.w	r1, r6, r8
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	}

	/* Write remaining unaligned data */
	if (w_ctx->len) {
   14ce4:	b112      	cbz	r2, 14cec <flash_nrf_write+0x80>
		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
   14ce6:	4638      	mov	r0, r7
   14ce8:	f7fe f9cc 	bl	13084 <nrfx_nvmc_bytes_write>
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   14cec:	4a0b      	ldr	r2, [pc, #44]	; (14d1c <flash_nrf_write+0xb0>)
   14cee:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   14cf2:	07db      	lsls	r3, r3, #31
   14cf4:	d5fb      	bpl.n	14cee <flash_nrf_write+0x82>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   14cf6:	4808      	ldr	r0, [pc, #32]	; (14d18 <flash_nrf_write+0xac>)
   14cf8:	f013 fde4 	bl	288c4 <z_impl_k_sem_give>
   14cfc:	2000      	movs	r0, #0
}
   14cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EACCES;
   14d02:	f06f 000c 	mvn.w	r0, #12
   14d06:	e7fa      	b.n	14cfe <flash_nrf_write+0x92>
		return -EINVAL;
   14d08:	f06f 0015 	mvn.w	r0, #21
   14d0c:	e7f7      	b.n	14cfe <flash_nrf_write+0x92>
		return 0;
   14d0e:	4628      	mov	r0, r5
   14d10:	e7f5      	b.n	14cfe <flash_nrf_write+0x92>
   14d12:	bf00      	nop
   14d14:	200278f6 	.word	0x200278f6
   14d18:	20020b94 	.word	0x20020b94
   14d1c:	40039000 	.word	0x40039000

00014d20 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   14d20:	b570      	push	{r4, r5, r6, lr}
	nrf_uarte_parity_t parity;
	nrf_uarte_hwfc_t hwfc;

	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   14d22:	794b      	ldrb	r3, [r1, #5]
   14d24:	2b01      	cmp	r3, #1
   14d26:	d123      	bne.n	14d70 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   14d28:	798b      	ldrb	r3, [r1, #6]
   14d2a:	2b03      	cmp	r3, #3
   14d2c:	d120      	bne.n	14d70 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   14d2e:	79cc      	ldrb	r4, [r1, #7]
   14d30:	b12c      	cbz	r4, 14d3e <uarte_nrfx_configure+0x1e>
   14d32:	2c01      	cmp	r4, #1
   14d34:	d11c      	bne.n	14d70 <uarte_nrfx_configure+0x50>
	return dev->config->config_info;
   14d36:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   14d38:	689b      	ldr	r3, [r3, #8]
   14d3a:	791b      	ldrb	r3, [r3, #4]
   14d3c:	b1c3      	cbz	r3, 14d70 <uarte_nrfx_configure+0x50>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
   14d3e:	790a      	ldrb	r2, [r1, #4]
   14d40:	b112      	cbz	r2, 14d48 <uarte_nrfx_configure+0x28>
   14d42:	2a02      	cmp	r2, #2
   14d44:	d114      	bne.n	14d70 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UARTE_PARITY_INCLUDED;
   14d46:	220e      	movs	r2, #14
	switch (baudrate) {
   14d48:	f647 2612 	movw	r6, #31250	; 0x7a12
	return dev->config->config_info;
   14d4c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   14d4e:	689b      	ldr	r3, [r3, #8]
   14d50:	681d      	ldr	r5, [r3, #0]
	switch (baudrate) {
   14d52:	680b      	ldr	r3, [r1, #0]
   14d54:	42b3      	cmp	r3, r6
   14d56:	d06b      	beq.n	14e30 <uarte_nrfx_configure+0x110>
   14d58:	d827      	bhi.n	14daa <uarte_nrfx_configure+0x8a>
   14d5a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   14d5e:	d061      	beq.n	14e24 <uarte_nrfx_configure+0x104>
   14d60:	d812      	bhi.n	14d88 <uarte_nrfx_configure+0x68>
   14d62:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   14d66:	d04d      	beq.n	14e04 <uarte_nrfx_configure+0xe4>
   14d68:	d805      	bhi.n	14d76 <uarte_nrfx_configure+0x56>
   14d6a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   14d6e:	d074      	beq.n	14e5a <uarte_nrfx_configure+0x13a>
		return -ENOTSUP;
   14d70:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14d74:	e052      	b.n	14e1c <uarte_nrfx_configure+0xfc>
	switch (baudrate) {
   14d76:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   14d7a:	d050      	beq.n	14e1e <uarte_nrfx_configure+0xfe>
   14d7c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   14d80:	d1f6      	bne.n	14d70 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   14d82:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   14d86:	e03f      	b.n	14e08 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   14d88:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   14d8c:	d04c      	beq.n	14e28 <uarte_nrfx_configure+0x108>
   14d8e:	d804      	bhi.n	14d9a <uarte_nrfx_configure+0x7a>
   14d90:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14d94:	d1ec      	bne.n	14d70 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   14d96:	4b32      	ldr	r3, [pc, #200]	; (14e60 <uarte_nrfx_configure+0x140>)
   14d98:	e036      	b.n	14e08 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   14d9a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   14d9e:	d045      	beq.n	14e2c <uarte_nrfx_configure+0x10c>
   14da0:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   14da4:	d1e4      	bne.n	14d70 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   14da6:	4b2f      	ldr	r3, [pc, #188]	; (14e64 <uarte_nrfx_configure+0x144>)
   14da8:	e02e      	b.n	14e08 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   14daa:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   14dae:	d048      	beq.n	14e42 <uarte_nrfx_configure+0x122>
   14db0:	d812      	bhi.n	14dd8 <uarte_nrfx_configure+0xb8>
   14db2:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   14db6:	42b3      	cmp	r3, r6
   14db8:	d03d      	beq.n	14e36 <uarte_nrfx_configure+0x116>
   14dba:	d805      	bhi.n	14dc8 <uarte_nrfx_configure+0xa8>
   14dbc:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   14dc0:	d1d6      	bne.n	14d70 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   14dc2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   14dc6:	e01f      	b.n	14e08 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   14dc8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   14dcc:	d036      	beq.n	14e3c <uarte_nrfx_configure+0x11c>
   14dce:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   14dd2:	d1cd      	bne.n	14d70 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   14dd4:	4b24      	ldr	r3, [pc, #144]	; (14e68 <uarte_nrfx_configure+0x148>)
   14dd6:	e017      	b.n	14e08 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   14dd8:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   14ddc:	d037      	beq.n	14e4e <uarte_nrfx_configure+0x12e>
   14dde:	d808      	bhi.n	14df2 <uarte_nrfx_configure+0xd2>
   14de0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   14de4:	d030      	beq.n	14e48 <uarte_nrfx_configure+0x128>
   14de6:	4e21      	ldr	r6, [pc, #132]	; (14e6c <uarte_nrfx_configure+0x14c>)
   14de8:	42b3      	cmp	r3, r6
   14dea:	d1c1      	bne.n	14d70 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   14dec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   14df0:	e00a      	b.n	14e08 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   14df2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   14df6:	d02d      	beq.n	14e54 <uarte_nrfx_configure+0x134>
   14df8:	4e1d      	ldr	r6, [pc, #116]	; (14e70 <uarte_nrfx_configure+0x150>)
   14dfa:	42b3      	cmp	r3, r6
   14dfc:	d1b8      	bne.n	14d70 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   14dfe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14e02:	e001      	b.n	14e08 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00027000;
   14e04:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type   * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   14e08:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), parity, hwfc);

	get_dev_data(dev)->uart_config = *cfg;
   14e0c:	6883      	ldr	r3, [r0, #8]
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   14e0e:	4322      	orrs	r2, r4
   14e10:	c903      	ldmia	r1, {r0, r1}
   14e12:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   14e16:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   14e1a:	2000      	movs	r0, #0
}
   14e1c:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   14e1e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   14e22:	e7f1      	b.n	14e08 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   14e24:	4b13      	ldr	r3, [pc, #76]	; (14e74 <uarte_nrfx_configure+0x154>)
   14e26:	e7ef      	b.n	14e08 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   14e28:	4b13      	ldr	r3, [pc, #76]	; (14e78 <uarte_nrfx_configure+0x158>)
   14e2a:	e7ed      	b.n	14e08 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   14e2c:	4b13      	ldr	r3, [pc, #76]	; (14e7c <uarte_nrfx_configure+0x15c>)
   14e2e:	e7eb      	b.n	14e08 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   14e30:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   14e34:	e7e8      	b.n	14e08 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   14e36:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   14e3a:	e7e5      	b.n	14e08 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   14e3c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   14e40:	e7e2      	b.n	14e08 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   14e42:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   14e46:	e7df      	b.n	14e08 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   14e48:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   14e4c:	e7dc      	b.n	14e08 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   14e4e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   14e52:	e7d9      	b.n	14e08 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   14e54:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   14e58:	e7d6      	b.n	14e08 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00014000;
   14e5a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   14e5e:	e7d3      	b.n	14e08 <uarte_nrfx_configure+0xe8>
   14e60:	00275000 	.word	0x00275000
   14e64:	0075c000 	.word	0x0075c000
   14e68:	013a9000 	.word	0x013a9000
   14e6c:	0003d090 	.word	0x0003d090
   14e70:	000f4240 	.word	0x000f4240
   14e74:	0013b000 	.word	0x0013b000
   14e78:	003af000 	.word	0x003af000
   14e7c:	004ea000 	.word	0x004ea000

00014e80 <uarte_0_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
   14e80:	b570      	push	{r4, r5, r6, lr}
   14e82:	4606      	mov	r6, r0
   14e84:	2200      	movs	r2, #0
   14e86:	2101      	movs	r1, #1
   14e88:	2008      	movs	r0, #8
   14e8a:	f7fe ff35 	bl	13cf8 <z_irq_priority_set>
   14e8e:	2008      	movs	r0, #8
   14e90:	f7fe ff0e 	bl	13cb0 <z_arch_irq_enable>
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   14e94:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	return dev->config->config_info;
   14e98:	6833      	ldr	r3, [r6, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14e9a:	68b5      	ldr	r5, [r6, #8]
	return config->uarte_regs;
   14e9c:	689b      	ldr	r3, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14e9e:	2103      	movs	r1, #3
   14ea0:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   14ea2:	4b1a      	ldr	r3, [pc, #104]	; (14f0c <uarte_0_init+0x8c>)
    p_reg->PSEL.TXD = pseltxd;
   14ea4:	201d      	movs	r0, #29
   14ea6:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14ea8:	2200      	movs	r2, #0
   14eaa:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
   14eae:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
   14eb2:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   14eb6:	201c      	movs	r0, #28
   14eb8:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
   14ebc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   14ec0:	6098      	str	r0, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14ec2:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
   14ec6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
   14eca:	231b      	movs	r3, #27
   14ecc:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   14ed0:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   14ed2:	4629      	mov	r1, r5
   14ed4:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   14ed8:	4630      	mov	r0, r6
   14eda:	f7ff ff21 	bl	14d20 <uarte_nrfx_configure>
	if (err) {
   14ede:	b9a0      	cbnz	r0, 14f0a <uarte_0_init+0x8a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   14ee0:	2308      	movs	r3, #8
   14ee2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   14ee6:	f105 030c 	add.w	r3, r5, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14eea:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

__STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t *        p_buffer,
                                             size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   14eee:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   14ef2:	2301      	movs	r3, #1
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   14ef4:	68aa      	ldr	r2, [r5, #8]
   14ef6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14efa:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14efc:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14efe:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14f02:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14f06:	60a3      	str	r3, [r4, #8]
   14f08:	60e3      	str	r3, [r4, #12]
	UART_NRF_UARTE_DEVICE(0);
   14f0a:	bd70      	pop	{r4, r5, r6, pc}
   14f0c:	40842500 	.word	0x40842500

00014f10 <parse_string>:

/* Parse the input text into an unescaped cstring, and populate item. */
static const unsigned char firstByteMark[7] = {0x00, 0x00, 0xC0, 0xE0,
					       0xF0, 0xF8, 0xFC};
static const char *parse_string(cJSON *item, const char *str)
{
   14f10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const char *ptr = str + 1;
	char *ptr2;
	char *out;
	int len = 0;
	unsigned uc, uc2;
	if (*str != '\"') {
   14f14:	780a      	ldrb	r2, [r1, #0]
{
   14f16:	4606      	mov	r6, r0
	if (*str != '\"') {
   14f18:	2a22      	cmp	r2, #34	; 0x22
	const char *ptr = str + 1;
   14f1a:	f101 0901 	add.w	r9, r1, #1
	if (*str != '\"') {
   14f1e:	d034      	beq.n	14f8a <parse_string+0x7a>
		ep = str;
		return 0;
   14f20:	f04f 0900 	mov.w	r9, #0
		ep = str;
   14f24:	4b62      	ldr	r3, [pc, #392]	; (150b0 <parse_string+0x1a0>)
   14f26:	6019      	str	r1, [r3, #0]
	if (*ptr == '\"')
		ptr++;
	item->valuestring = out;
	item->type = cJSON_String;
	return ptr;
}
   14f28:	4648      	mov	r0, r9
   14f2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (*ptr++ == '\\')
   14f2e:	295c      	cmp	r1, #92	; 0x5c
   14f30:	bf14      	ite	ne
   14f32:	3201      	addne	r2, #1
			ptr++; /* Skip escaped quotes. */
   14f34:	3202      	addeq	r2, #2
   14f36:	3401      	adds	r4, #1
	while (*ptr != '\"' && *ptr && ++len)
   14f38:	7811      	ldrb	r1, [r2, #0]
   14f3a:	4620      	mov	r0, r4
   14f3c:	2922      	cmp	r1, #34	; 0x22
   14f3e:	d003      	beq.n	14f48 <parse_string+0x38>
   14f40:	b111      	cbz	r1, 14f48 <parse_string+0x38>
   14f42:	1c60      	adds	r0, r4, #1
   14f44:	d1f3      	bne.n	14f2e <parse_string+0x1e>
   14f46:	2000      	movs	r0, #0
	out = (char *)cJSON_malloc(
   14f48:	4a5a      	ldr	r2, [pc, #360]	; (150b4 <parse_string+0x1a4>)
   14f4a:	3001      	adds	r0, #1
   14f4c:	6812      	ldr	r2, [r2, #0]
   14f4e:	4790      	blx	r2
	if (!out)
   14f50:	4607      	mov	r7, r0
   14f52:	2800      	cmp	r0, #0
   14f54:	f000 80a9 	beq.w	150aa <parse_string+0x19a>
   14f58:	4604      	mov	r4, r0
				*ptr2++ = '\n';
   14f5a:	f04f 0a0a 	mov.w	sl, #10
				*ptr2++ = '\t';
   14f5e:	f04f 0809 	mov.w	r8, #9
				*ptr2++ = '\r';
   14f62:	f04f 0b0d 	mov.w	fp, #13
	while (*ptr != '\"' && *ptr) {
   14f66:	f899 2000 	ldrb.w	r2, [r9]
   14f6a:	2a22      	cmp	r2, #34	; 0x22
   14f6c:	d000      	beq.n	14f70 <parse_string+0x60>
   14f6e:	b97a      	cbnz	r2, 14f90 <parse_string+0x80>
	*ptr2 = 0;
   14f70:	2200      	movs	r2, #0
   14f72:	7022      	strb	r2, [r4, #0]
	if (*ptr == '\"')
   14f74:	f899 2000 	ldrb.w	r2, [r9]
	item->valuestring = out;
   14f78:	6137      	str	r7, [r6, #16]
	if (*ptr == '\"')
   14f7a:	2a22      	cmp	r2, #34	; 0x22
	item->type = cJSON_String;
   14f7c:	f04f 0204 	mov.w	r2, #4
		ptr++;
   14f80:	bf08      	it	eq
   14f82:	f109 0901 	addeq.w	r9, r9, #1
	item->type = cJSON_String;
   14f86:	60f2      	str	r2, [r6, #12]
	return ptr;
   14f88:	e7ce      	b.n	14f28 <parse_string+0x18>
	const char *ptr = str + 1;
   14f8a:	464a      	mov	r2, r9
   14f8c:	2400      	movs	r4, #0
   14f8e:	e7d3      	b.n	14f38 <parse_string+0x28>
		if (*ptr != '\\')
   14f90:	2a5c      	cmp	r2, #92	; 0x5c
   14f92:	f109 0c01 	add.w	ip, r9, #1
   14f96:	d003      	beq.n	14fa0 <parse_string+0x90>
			*ptr2++ = *ptr++;
   14f98:	7022      	strb	r2, [r4, #0]
   14f9a:	3401      	adds	r4, #1
   14f9c:	46e1      	mov	r9, ip
   14f9e:	e7e2      	b.n	14f66 <parse_string+0x56>
			switch (*ptr) {
   14fa0:	f899 2001 	ldrb.w	r2, [r9, #1]
   14fa4:	2a6e      	cmp	r2, #110	; 0x6e
   14fa6:	d019      	beq.n	14fdc <parse_string+0xcc>
   14fa8:	d807      	bhi.n	14fba <parse_string+0xaa>
   14faa:	2a62      	cmp	r2, #98	; 0x62
   14fac:	f104 0301 	add.w	r3, r4, #1
   14fb0:	d00c      	beq.n	14fcc <parse_string+0xbc>
   14fb2:	2a66      	cmp	r2, #102	; 0x66
   14fb4:	d010      	beq.n	14fd8 <parse_string+0xc8>
				*ptr2++ = *ptr;
   14fb6:	7022      	strb	r2, [r4, #0]
   14fb8:	e012      	b.n	14fe0 <parse_string+0xd0>
			switch (*ptr) {
   14fba:	2a74      	cmp	r2, #116	; 0x74
   14fbc:	d012      	beq.n	14fe4 <parse_string+0xd4>
   14fbe:	2a75      	cmp	r2, #117	; 0x75
   14fc0:	d013      	beq.n	14fea <parse_string+0xda>
   14fc2:	2a72      	cmp	r2, #114	; 0x72
   14fc4:	d1f7      	bne.n	14fb6 <parse_string+0xa6>
				*ptr2++ = '\r';
   14fc6:	f884 b000 	strb.w	fp, [r4]
   14fca:	e009      	b.n	14fe0 <parse_string+0xd0>
				*ptr2++ = '\b';
   14fcc:	2208      	movs	r2, #8
				*ptr2++ = '\f';
   14fce:	7022      	strb	r2, [r4, #0]
   14fd0:	461c      	mov	r4, r3
			ptr++;
   14fd2:	f10c 0c01 	add.w	ip, ip, #1
   14fd6:	e7e1      	b.n	14f9c <parse_string+0x8c>
				*ptr2++ = '\f';
   14fd8:	220c      	movs	r2, #12
   14fda:	e7f8      	b.n	14fce <parse_string+0xbe>
				*ptr2++ = '\n';
   14fdc:	f884 a000 	strb.w	sl, [r4]
				*ptr2++ = *ptr;
   14fe0:	3401      	adds	r4, #1
				break;
   14fe2:	e7f6      	b.n	14fd2 <parse_string+0xc2>
				*ptr2++ = '\t';
   14fe4:	f884 8000 	strb.w	r8, [r4]
   14fe8:	e7fa      	b.n	14fe0 <parse_string+0xd0>
				uc = parse_hex4(ptr + 1);
   14fea:	f109 0002 	add.w	r0, r9, #2
   14fee:	f019 fd46 	bl	2ea7e <parse_hex4>
				if ((uc >= 0xDC00 && uc <= 0xDFFF) || uc == 0)
   14ff2:	f5a0 425c 	sub.w	r2, r0, #56320	; 0xdc00
   14ff6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
				uc = parse_hex4(ptr + 1);
   14ffa:	4605      	mov	r5, r0
				ptr += 4; /* get the unicode char. */
   14ffc:	f109 0c05 	add.w	ip, r9, #5
				if ((uc >= 0xDC00 && uc <= 0xDFFF) || uc == 0)
   15000:	d3e7      	bcc.n	14fd2 <parse_string+0xc2>
   15002:	2800      	cmp	r0, #0
   15004:	d0e5      	beq.n	14fd2 <parse_string+0xc2>
				if (uc >= 0xD800 &&
   15006:	f5a0 4258 	sub.w	r2, r0, #55296	; 0xd800
   1500a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1500e:	d23a      	bcs.n	15086 <parse_string+0x176>
					if (ptr[1] != '\\' || ptr[2] != 'u')
   15010:	f899 2006 	ldrb.w	r2, [r9, #6]
   15014:	2a5c      	cmp	r2, #92	; 0x5c
   15016:	d1dc      	bne.n	14fd2 <parse_string+0xc2>
   15018:	f899 2007 	ldrb.w	r2, [r9, #7]
   1501c:	2a75      	cmp	r2, #117	; 0x75
   1501e:	d1d8      	bne.n	14fd2 <parse_string+0xc2>
					uc2 = parse_hex4(ptr + 3);
   15020:	f109 0008 	add.w	r0, r9, #8
   15024:	f019 fd2b 	bl	2ea7e <parse_hex4>
					if (uc2 < 0xDC00 || uc2 > 0xDFFF)
   15028:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   1502c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
					ptr += 6;
   15030:	f109 0c0b 	add.w	ip, r9, #11
					if (uc2 < 0xDC00 || uc2 > 0xDFFF)
   15034:	d2cd      	bcs.n	14fd2 <parse_string+0xc2>
					uc = 0x10000 + (((uc & 0x3FF) << 10) |
   15036:	4b20      	ldr	r3, [pc, #128]	; (150b8 <parse_string+0x1a8>)
							(uc2 & 0x3FF));
   15038:	f3c0 0009 	ubfx	r0, r0, #0, #10
					uc = 0x10000 + (((uc & 0x3FF) << 10) |
   1503c:	ea03 2585 	and.w	r5, r3, r5, lsl #10
   15040:	4328      	orrs	r0, r5
   15042:	f500 3580 	add.w	r5, r0, #65536	; 0x10000
				else if (uc < 0x10000)
   15046:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
					*--ptr2 = ((uc | 0x80) & 0xBF);
   1504a:	bf23      	ittte	cs
   1504c:	f005 033f 	andcs.w	r3, r5, #63	; 0x3f
   15050:	f063 037f 	orncs	r3, r3, #127	; 0x7f
   15054:	70e3      	strbcs	r3, [r4, #3]
					len = 3;
   15056:	2303      	movcc	r3, #3
				len = 4;
   15058:	bf24      	itt	cs
   1505a:	2304      	movcs	r3, #4
					uc >>= 6;
   1505c:	09ad      	lsrcs	r5, r5, #6
					*--ptr2 = ((uc | 0x80) & 0xBF);
   1505e:	f005 003f 	and.w	r0, r5, #63	; 0x3f
   15062:	f104 0e03 	add.w	lr, r4, #3
   15066:	f060 007f 	orn	r0, r0, #127	; 0x7f
   1506a:	f10e 32ff 	add.w	r2, lr, #4294967295
   1506e:	f80e 0c01 	strb.w	r0, [lr, #-1]
					uc >>= 6;
   15072:	09ad      	lsrs	r5, r5, #6
					*--ptr2 = ((uc | 0x80) & 0xBF);
   15074:	f005 003f 	and.w	r0, r5, #63	; 0x3f
   15078:	f060 007f 	orn	r0, r0, #127	; 0x7f
   1507c:	1e54      	subs	r4, r2, #1
   1507e:	f802 0c01 	strb.w	r0, [r2, #-1]
					uc >>= 6;
   15082:	09ad      	lsrs	r5, r5, #6
   15084:	e003      	b.n	1508e <parse_string+0x17e>
				if (uc < 0x80)
   15086:	287f      	cmp	r0, #127	; 0x7f
   15088:	d809      	bhi.n	1509e <parse_string+0x18e>
					len = 1;
   1508a:	2301      	movs	r3, #1
				ptr2 += len;
   1508c:	3401      	adds	r4, #1
					*--ptr2 = (uc | firstByteMark[len]);
   1508e:	4a0b      	ldr	r2, [pc, #44]	; (150bc <parse_string+0x1ac>)
   15090:	5cd2      	ldrb	r2, [r2, r3]
				ptr2 += len;
   15092:	3b01      	subs	r3, #1
					*--ptr2 = (uc | firstByteMark[len]);
   15094:	4315      	orrs	r5, r2
   15096:	f804 5c01 	strb.w	r5, [r4, #-1]
				ptr2 += len;
   1509a:	441c      	add	r4, r3
				break;
   1509c:	e799      	b.n	14fd2 <parse_string+0xc2>
				else if (uc < 0x800)
   1509e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   150a2:	d2d0      	bcs.n	15046 <parse_string+0x136>
				ptr2 += len;
   150a4:	1ca2      	adds	r2, r4, #2
					len = 2;
   150a6:	2302      	movs	r3, #2
   150a8:	e7e4      	b.n	15074 <parse_string+0x164>
		return 0;
   150aa:	4681      	mov	r9, r0
   150ac:	e73c      	b.n	14f28 <parse_string+0x18>
   150ae:	bf00      	nop
   150b0:	20020bac 	.word	0x20020bac
   150b4:	2002d84c 	.word	0x2002d84c
   150b8:	000ffc00 	.word	0x000ffc00
   150bc:	000353be 	.word	0x000353be

000150c0 <cJSON_New_Item>:
	cJSON *node = (cJSON *)cJSON_malloc(sizeof(cJSON));
   150c0:	4b06      	ldr	r3, [pc, #24]	; (150dc <cJSON_New_Item+0x1c>)
{
   150c2:	b510      	push	{r4, lr}
	cJSON *node = (cJSON *)cJSON_malloc(sizeof(cJSON));
   150c4:	681b      	ldr	r3, [r3, #0]
   150c6:	2028      	movs	r0, #40	; 0x28
   150c8:	4798      	blx	r3
	if (node)
   150ca:	4604      	mov	r4, r0
   150cc:	b118      	cbz	r0, 150d6 <cJSON_New_Item+0x16>
__ssp_bos_icheck3(memset, void *, int)
   150ce:	2228      	movs	r2, #40	; 0x28
   150d0:	2100      	movs	r1, #0
   150d2:	f015 fc07 	bl	2a8e4 <memset>
}
   150d6:	4620      	mov	r0, r4
   150d8:	bd10      	pop	{r4, pc}
   150da:	bf00      	nop
   150dc:	2002d84c 	.word	0x2002d84c

000150e0 <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item, const char *value)
{
   150e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   150e2:	4605      	mov	r5, r0
	if (!value)
   150e4:	460c      	mov	r4, r1
   150e6:	b909      	cbnz	r1, 150ec <parse_value+0xc>
	if (*value == '{') {
		return parse_object(item, value);
	}

	ep = value;
	return 0; /* failure. */
   150e8:	2400      	movs	r4, #0
   150ea:	e011      	b.n	15110 <parse_value+0x30>
	if (!strncmp(value, "null", 4)) {
   150ec:	2204      	movs	r2, #4
   150ee:	4975      	ldr	r1, [pc, #468]	; (152c4 <parse_value+0x1e4>)
   150f0:	4620      	mov	r0, r4
   150f2:	f015 fe11 	bl	2ad18 <strncmp>
   150f6:	b918      	cbnz	r0, 15100 <parse_value+0x20>
		item->type = cJSON_NULL;
   150f8:	2302      	movs	r3, #2
   150fa:	60eb      	str	r3, [r5, #12]
		return value + 4;
   150fc:	3404      	adds	r4, #4
   150fe:	e007      	b.n	15110 <parse_value+0x30>
	if (!strncmp(value, "false", 5)) {
   15100:	2205      	movs	r2, #5
   15102:	4971      	ldr	r1, [pc, #452]	; (152c8 <parse_value+0x1e8>)
   15104:	4620      	mov	r0, r4
   15106:	f015 fe07 	bl	2ad18 <strncmp>
   1510a:	b918      	cbnz	r0, 15114 <parse_value+0x34>
		item->type = cJSON_False;
   1510c:	60e8      	str	r0, [r5, #12]
		return value + 5;
   1510e:	3405      	adds	r4, #5
}
   15110:	4620      	mov	r0, r4
   15112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!strncmp(value, "true", 4)) {
   15114:	2204      	movs	r2, #4
   15116:	496d      	ldr	r1, [pc, #436]	; (152cc <parse_value+0x1ec>)
   15118:	4620      	mov	r0, r4
   1511a:	f015 fdfd 	bl	2ad18 <strncmp>
   1511e:	b918      	cbnz	r0, 15128 <parse_value+0x48>
		item->type = cJSON_True;
   15120:	2301      	movs	r3, #1
   15122:	60eb      	str	r3, [r5, #12]
		item->valueint = 1;
   15124:	616b      	str	r3, [r5, #20]
   15126:	e7e9      	b.n	150fc <parse_value+0x1c>
	if (*value == '\"') {
   15128:	7823      	ldrb	r3, [r4, #0]
   1512a:	2b22      	cmp	r3, #34	; 0x22
   1512c:	d105      	bne.n	1513a <parse_value+0x5a>
		return parse_string(item, value);
   1512e:	4621      	mov	r1, r4
   15130:	4628      	mov	r0, r5
}
   15132:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return parse_string(item, value);
   15136:	f7ff beeb 	b.w	14f10 <parse_string>
	if (*value == '-' || (*value >= '0' && *value <= '9')) {
   1513a:	2b2d      	cmp	r3, #45	; 0x2d
   1513c:	d005      	beq.n	1514a <parse_value+0x6a>
   1513e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   15142:	2a09      	cmp	r2, #9
   15144:	d81d      	bhi.n	15182 <parse_value+0xa2>
	int n = 0, sign = 1;
   15146:	2301      	movs	r3, #1
   15148:	e002      	b.n	15150 <parse_value+0x70>
		sign = -1, num++; /* Has sign? */
   1514a:	f04f 33ff 	mov.w	r3, #4294967295
   1514e:	3401      	adds	r4, #1
	if (*num == '0')
   15150:	7822      	ldrb	r2, [r4, #0]
   15152:	2a30      	cmp	r2, #48	; 0x30
		num++; /* is zero */
   15154:	bf08      	it	eq
   15156:	3401      	addeq	r4, #1
	if (*num >= '1' && *num <= '9')
   15158:	7822      	ldrb	r2, [r4, #0]
   1515a:	3a31      	subs	r2, #49	; 0x31
   1515c:	2a08      	cmp	r2, #8
	int n = 0, sign = 1;
   1515e:	f04f 0200 	mov.w	r2, #0
	if (*num >= '1' && *num <= '9')
   15162:	d809      	bhi.n	15178 <parse_value+0x98>
			n = (n * 10) + (*num++ - '0');
   15164:	200a      	movs	r0, #10
   15166:	f814 1b01 	ldrb.w	r1, [r4], #1
   1516a:	3930      	subs	r1, #48	; 0x30
   1516c:	fb00 1202 	mla	r2, r0, r2, r1
		while (*num >= '0' && *num <= '9'); /* Number? */
   15170:	7821      	ldrb	r1, [r4, #0]
   15172:	3930      	subs	r1, #48	; 0x30
   15174:	2909      	cmp	r1, #9
   15176:	d9f6      	bls.n	15166 <parse_value+0x86>
	n = sign * n;
   15178:	4353      	muls	r3, r2
	item->valueint = (int)n;
   1517a:	616b      	str	r3, [r5, #20]
	item->type = cJSON_Number;
   1517c:	2303      	movs	r3, #3
   1517e:	60eb      	str	r3, [r5, #12]
   15180:	e7c6      	b.n	15110 <parse_value+0x30>
	if (*value == '[') {
   15182:	2b5b      	cmp	r3, #91	; 0x5b
   15184:	d136      	bne.n	151f4 <parse_value+0x114>
	if (*value != '[') {
		ep = value;
		return 0;
	} /* not an array! */

	item->type = cJSON_Array;
   15186:	2305      	movs	r3, #5
	value = skip(value + 1);
   15188:	1c60      	adds	r0, r4, #1
	item->type = cJSON_Array;
   1518a:	60eb      	str	r3, [r5, #12]
	value = skip(value + 1);
   1518c:	f019 fccd 	bl	2eb2a <skip>
	if (*value == ']')
   15190:	7803      	ldrb	r3, [r0, #0]
	value = skip(value + 1);
   15192:	4604      	mov	r4, r0
	if (*value == ']')
   15194:	2b5d      	cmp	r3, #93	; 0x5d
   15196:	d101      	bne.n	1519c <parse_value+0xbc>
	} /* not an object! */

	item->type = cJSON_Object;
	value = skip(value + 1);
	if (*value == '}')
		return value + 1; /* empty array. */
   15198:	3401      	adds	r4, #1
   1519a:	e7b9      	b.n	15110 <parse_value+0x30>
	item->child = child = cJSON_New_Item();
   1519c:	f7ff ff90 	bl	150c0 <cJSON_New_Item>
   151a0:	4606      	mov	r6, r0
   151a2:	60a8      	str	r0, [r5, #8]
	if (!item->child)
   151a4:	2800      	cmp	r0, #0
   151a6:	d09f      	beq.n	150e8 <parse_value+0x8>
	value = skip(parse_value(
   151a8:	4620      	mov	r0, r4
   151aa:	f019 fcbe 	bl	2eb2a <skip>
   151ae:	4601      	mov	r1, r0
   151b0:	4630      	mov	r0, r6
   151b2:	f7ff ff95 	bl	150e0 <parse_value>
   151b6:	f019 fcb8 	bl	2eb2a <skip>
		if (!value)
   151ba:	4604      	mov	r4, r0
   151bc:	2800      	cmp	r0, #0
   151be:	d093      	beq.n	150e8 <parse_value+0x8>
	while (*value == ',') {
   151c0:	7803      	ldrb	r3, [r0, #0]
   151c2:	2b2c      	cmp	r3, #44	; 0x2c
   151c4:	d004      	beq.n	151d0 <parse_value+0xf0>
	if (*value == ']')
   151c6:	2b5d      	cmp	r3, #93	; 0x5d
   151c8:	d0e6      	beq.n	15198 <parse_value+0xb8>
	ep = value;
   151ca:	4b41      	ldr	r3, [pc, #260]	; (152d0 <parse_value+0x1f0>)
   151cc:	601c      	str	r4, [r3, #0]
   151ce:	e78b      	b.n	150e8 <parse_value+0x8>
		new_item = cJSON_New_Item();
   151d0:	f7ff ff76 	bl	150c0 <cJSON_New_Item>
		if (!new_item)
   151d4:	4605      	mov	r5, r0
   151d6:	2800      	cmp	r0, #0
   151d8:	d086      	beq.n	150e8 <parse_value+0x8>
		child->next = new_item;
   151da:	6030      	str	r0, [r6, #0]
		new_item->prev = child;
   151dc:	6046      	str	r6, [r0, #4]
		value = skip(parse_value(child, skip(value + 1)));
   151de:	1c60      	adds	r0, r4, #1
   151e0:	f019 fca3 	bl	2eb2a <skip>
   151e4:	4601      	mov	r1, r0
   151e6:	4628      	mov	r0, r5
   151e8:	f7ff ff7a 	bl	150e0 <parse_value>
   151ec:	f019 fc9d 	bl	2eb2a <skip>
   151f0:	462e      	mov	r6, r5
   151f2:	e7e2      	b.n	151ba <parse_value+0xda>
	if (*value == '{') {
   151f4:	2b7b      	cmp	r3, #123	; 0x7b
   151f6:	d1e8      	bne.n	151ca <parse_value+0xea>
	item->type = cJSON_Object;
   151f8:	2306      	movs	r3, #6
	value = skip(value + 1);
   151fa:	1c60      	adds	r0, r4, #1
	item->type = cJSON_Object;
   151fc:	60eb      	str	r3, [r5, #12]
	value = skip(value + 1);
   151fe:	f019 fc94 	bl	2eb2a <skip>
	if (*value == '}')
   15202:	7803      	ldrb	r3, [r0, #0]
	value = skip(value + 1);
   15204:	4604      	mov	r4, r0
	if (*value == '}')
   15206:	2b7d      	cmp	r3, #125	; 0x7d
   15208:	d0c6      	beq.n	15198 <parse_value+0xb8>

	item->child = child = cJSON_New_Item();
   1520a:	f7ff ff59 	bl	150c0 <cJSON_New_Item>
   1520e:	4606      	mov	r6, r0
   15210:	60a8      	str	r0, [r5, #8]
	if (!item->child)
   15212:	2800      	cmp	r0, #0
   15214:	f43f af68 	beq.w	150e8 <parse_value+0x8>
		return 0;
	value = skip(parse_string(child, skip(value)));
   15218:	4620      	mov	r0, r4
   1521a:	f019 fc86 	bl	2eb2a <skip>
   1521e:	4601      	mov	r1, r0
   15220:	4630      	mov	r0, r6
   15222:	f7ff fe75 	bl	14f10 <parse_string>
   15226:	f019 fc80 	bl	2eb2a <skip>
	if (!value)
   1522a:	2800      	cmp	r0, #0
   1522c:	f43f af5c 	beq.w	150e8 <parse_value+0x8>
		return 0;
	child->string = child->valuestring;
	child->valuestring = 0;
   15230:	2400      	movs	r4, #0
	child->string = child->valuestring;
   15232:	6933      	ldr	r3, [r6, #16]
	child->valuestring = 0;
   15234:	6134      	str	r4, [r6, #16]
	child->string = child->valuestring;
   15236:	6233      	str	r3, [r6, #32]
	if (*value != ':') {
   15238:	7803      	ldrb	r3, [r0, #0]
   1523a:	2b3a      	cmp	r3, #58	; 0x3a
   1523c:	d002      	beq.n	15244 <parse_value+0x164>
		ep = value;
   1523e:	4b24      	ldr	r3, [pc, #144]	; (152d0 <parse_value+0x1f0>)
   15240:	6018      	str	r0, [r3, #0]
   15242:	e765      	b.n	15110 <parse_value+0x30>
		return 0;
	} /* fail! */
	value = skip(parse_value(
   15244:	3001      	adds	r0, #1
   15246:	f019 fc70 	bl	2eb2a <skip>
   1524a:	4601      	mov	r1, r0
   1524c:	4630      	mov	r0, r6
   1524e:	f7ff ff47 	bl	150e0 <parse_value>
   15252:	f019 fc6a 	bl	2eb2a <skip>
			return 0;
		} /* fail! */
		value = skip(parse_value(
			child, skip(value +
				    1))); /* skip any spacing, get the value. */
		if (!value)
   15256:	4607      	mov	r7, r0
   15258:	2800      	cmp	r0, #0
   1525a:	f43f af45 	beq.w	150e8 <parse_value+0x8>
	while (*value == ',') {
   1525e:	7803      	ldrb	r3, [r0, #0]
   15260:	2b2c      	cmp	r3, #44	; 0x2c
   15262:	d003      	beq.n	1526c <parse_value+0x18c>
			return 0;
	}

	if (*value == '}')
   15264:	2b7d      	cmp	r3, #125	; 0x7d
   15266:	d129      	bne.n	152bc <parse_value+0x1dc>
		return value + 1; /* end of array */
   15268:	1c44      	adds	r4, r0, #1
   1526a:	e751      	b.n	15110 <parse_value+0x30>
		new_item = cJSON_New_Item();
   1526c:	f7ff ff28 	bl	150c0 <cJSON_New_Item>
		if (!(new_item))
   15270:	4605      	mov	r5, r0
   15272:	2800      	cmp	r0, #0
   15274:	f43f af38 	beq.w	150e8 <parse_value+0x8>
		child->next = new_item;
   15278:	6030      	str	r0, [r6, #0]
		new_item->prev = child;
   1527a:	6046      	str	r6, [r0, #4]
		value = skip(parse_string(child, skip(value + 1)));
   1527c:	1c78      	adds	r0, r7, #1
   1527e:	f019 fc54 	bl	2eb2a <skip>
   15282:	4601      	mov	r1, r0
   15284:	4628      	mov	r0, r5
   15286:	f7ff fe43 	bl	14f10 <parse_string>
   1528a:	f019 fc4e 	bl	2eb2a <skip>
		if (!value)
   1528e:	2800      	cmp	r0, #0
   15290:	f43f af2a 	beq.w	150e8 <parse_value+0x8>
		child->string = child->valuestring;
   15294:	692b      	ldr	r3, [r5, #16]
		child->valuestring = 0;
   15296:	612c      	str	r4, [r5, #16]
		child->string = child->valuestring;
   15298:	622b      	str	r3, [r5, #32]
		if (*value != ':') {
   1529a:	7803      	ldrb	r3, [r0, #0]
   1529c:	2b3a      	cmp	r3, #58	; 0x3a
   1529e:	d002      	beq.n	152a6 <parse_value+0x1c6>
			ep = value;
   152a0:	4b0b      	ldr	r3, [pc, #44]	; (152d0 <parse_value+0x1f0>)
   152a2:	6018      	str	r0, [r3, #0]
   152a4:	e720      	b.n	150e8 <parse_value+0x8>
		value = skip(parse_value(
   152a6:	3001      	adds	r0, #1
   152a8:	f019 fc3f 	bl	2eb2a <skip>
   152ac:	4601      	mov	r1, r0
   152ae:	4628      	mov	r0, r5
   152b0:	f7ff ff16 	bl	150e0 <parse_value>
   152b4:	f019 fc39 	bl	2eb2a <skip>
   152b8:	462e      	mov	r6, r5
   152ba:	e7cc      	b.n	15256 <parse_value+0x176>
	ep = value;
   152bc:	4b04      	ldr	r3, [pc, #16]	; (152d0 <parse_value+0x1f0>)
   152be:	6018      	str	r0, [r3, #0]
   152c0:	e712      	b.n	150e8 <parse_value+0x8>
   152c2:	bf00      	nop
   152c4:	000353c5 	.word	0x000353c5
   152c8:	000353ca 	.word	0x000353ca
   152cc:	000353d0 	.word	0x000353d0
   152d0:	20020bac 	.word	0x20020bac

000152d4 <ensure>:
{
   152d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!p || !p->buffer)
   152d6:	4605      	mov	r5, r0
   152d8:	b368      	cbz	r0, 15336 <ensure+0x62>
   152da:	6806      	ldr	r6, [r0, #0]
   152dc:	b1f6      	cbz	r6, 1531c <ensure+0x48>
	needed += p->offset;
   152de:	6883      	ldr	r3, [r0, #8]
	if (needed <= p->length)
   152e0:	6842      	ldr	r2, [r0, #4]
	needed += p->offset;
   152e2:	185c      	adds	r4, r3, r1
	if (needed <= p->length)
   152e4:	42a2      	cmp	r2, r4
   152e6:	db01      	blt.n	152ec <ensure+0x18>
	return newbuffer + p->offset;
   152e8:	441e      	add	r6, r3
   152ea:	e017      	b.n	1531c <ensure+0x48>
	--x;
   152ec:	3c01      	subs	r4, #1
	x |= x >> 1;
   152ee:	ea44 0464 	orr.w	r4, r4, r4, asr #1
	x |= x >> 2;
   152f2:	ea44 04a4 	orr.w	r4, r4, r4, asr #2
	x |= x >> 4;
   152f6:	ea44 1424 	orr.w	r4, r4, r4, asr #4
	x |= x >> 8;
   152fa:	ea44 2424 	orr.w	r4, r4, r4, asr #8
	x |= x >> 16;
   152fe:	ea44 4424 	orr.w	r4, r4, r4, asr #16
	newbuffer = (char *)cJSON_malloc(newsize);
   15302:	4b0e      	ldr	r3, [pc, #56]	; (1533c <ensure+0x68>)
	return x + 1;
   15304:	3401      	adds	r4, #1
	newbuffer = (char *)cJSON_malloc(newsize);
   15306:	681b      	ldr	r3, [r3, #0]
   15308:	4620      	mov	r0, r4
   1530a:	4798      	blx	r3
   1530c:	4f0c      	ldr	r7, [pc, #48]	; (15340 <ensure+0x6c>)
	if (!newbuffer) {
   1530e:	4606      	mov	r6, r0
   15310:	b930      	cbnz	r0, 15320 <ensure+0x4c>
		cJSON_free(p->buffer);
   15312:	683b      	ldr	r3, [r7, #0]
   15314:	6828      	ldr	r0, [r5, #0]
   15316:	4798      	blx	r3
		p->length = 0, p->buffer = 0;
   15318:	e9c5 6600 	strd	r6, r6, [r5]
}
   1531c:	4630      	mov	r0, r6
   1531e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15320:	e9d5 1200 	ldrd	r1, r2, [r5]
   15324:	f7f8 fc58 	bl	dbd8 <memcpy>
	cJSON_free(p->buffer);
   15328:	683b      	ldr	r3, [r7, #0]
   1532a:	6828      	ldr	r0, [r5, #0]
   1532c:	4798      	blx	r3
	p->buffer = newbuffer;
   1532e:	e9c5 6400 	strd	r6, r4, [r5]
	return newbuffer + p->offset;
   15332:	68ab      	ldr	r3, [r5, #8]
   15334:	e7d8      	b.n	152e8 <ensure+0x14>
		return 0;
   15336:	4606      	mov	r6, r0
   15338:	e7f0      	b.n	1531c <ensure+0x48>
   1533a:	bf00      	nop
   1533c:	2002d84c 	.word	0x2002d84c
   15340:	2002d848 	.word	0x2002d848

00015344 <cJSON_strdup>:
{
   15344:	b570      	push	{r4, r5, r6, lr}
   15346:	4606      	mov	r6, r0
	len = strlen(str) + 1;
   15348:	f015 fcb8 	bl	2acbc <strlen>
	copy = (char *)cJSON_malloc(len);
   1534c:	4b06      	ldr	r3, [pc, #24]	; (15368 <cJSON_strdup+0x24>)
	len = strlen(str) + 1;
   1534e:	1c44      	adds	r4, r0, #1
	copy = (char *)cJSON_malloc(len);
   15350:	681b      	ldr	r3, [r3, #0]
   15352:	4620      	mov	r0, r4
   15354:	4798      	blx	r3
	if (!copy)
   15356:	4605      	mov	r5, r0
   15358:	b118      	cbz	r0, 15362 <cJSON_strdup+0x1e>
   1535a:	4622      	mov	r2, r4
   1535c:	4631      	mov	r1, r6
   1535e:	f7f8 fc3b 	bl	dbd8 <memcpy>
}
   15362:	4628      	mov	r0, r5
   15364:	bd70      	pop	{r4, r5, r6, pc}
   15366:	bf00      	nop
   15368:	2002d84c 	.word	0x2002d84c

0001536c <print_string_ptr>:
{
   1536c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15370:	4603      	mov	r3, r0
   15372:	4606      	mov	r6, r0
   15374:	4688      	mov	r8, r1
	int len = 0, flag = 0;
   15376:	2200      	movs	r2, #0
	for (ptr = str; *ptr; ptr++)
   15378:	4619      	mov	r1, r3
   1537a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1537e:	b9cc      	cbnz	r4, 153b4 <print_string_ptr+0x48>
	if (!flag) {
   15380:	bb5a      	cbnz	r2, 153da <print_string_ptr+0x6e>
		len = ptr - str;
   15382:	1b9c      	subs	r4, r3, r6
   15384:	1ce1      	adds	r1, r4, #3
		if (p)
   15386:	f1b8 0f00 	cmp.w	r8, #0
   1538a:	d021      	beq.n	153d0 <print_string_ptr+0x64>
			out = ensure(p, len + 3);
   1538c:	4640      	mov	r0, r8
   1538e:	f7ff ffa1 	bl	152d4 <ensure>
			out = (char *)cJSON_malloc(len + 3);
   15392:	4605      	mov	r5, r0
		if (!out)
   15394:	b158      	cbz	r0, 153ae <print_string_ptr+0x42>
		*ptr2++ = '\"';
   15396:	2722      	movs	r7, #34	; 0x22
   15398:	1c43      	adds	r3, r0, #1
   1539a:	7007      	strb	r7, [r0, #0]
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1539c:	4631      	mov	r1, r6
   1539e:	4618      	mov	r0, r3
   153a0:	f015 fc2e 	bl	2ac00 <strcpy>
   153a4:	4603      	mov	r3, r0
		ptr2[len + 1] = 0;
   153a6:	2200      	movs	r2, #0
   153a8:	4423      	add	r3, r4
		ptr2[len] = '\"';
   153aa:	5507      	strb	r7, [r0, r4]
		ptr2[len + 1] = 0;
   153ac:	705a      	strb	r2, [r3, #1]
}
   153ae:	4628      	mov	r0, r5
   153b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				: 0;
   153b4:	1e63      	subs	r3, r4, #1
   153b6:	2b1e      	cmp	r3, #30
   153b8:	d908      	bls.n	153cc <print_string_ptr+0x60>
		flag |= ((*ptr > 0 && *ptr < 32) || (*ptr == '\"') ||
   153ba:	2c22      	cmp	r4, #34	; 0x22
   153bc:	d006      	beq.n	153cc <print_string_ptr+0x60>
				: 0;
   153be:	f1a4 035c 	sub.w	r3, r4, #92	; 0x5c
   153c2:	425c      	negs	r4, r3
   153c4:	415c      	adcs	r4, r3
		flag |= ((*ptr > 0 && *ptr < 32) || (*ptr == '\"') ||
   153c6:	4322      	orrs	r2, r4
   153c8:	460b      	mov	r3, r1
   153ca:	e7d5      	b.n	15378 <print_string_ptr+0xc>
				: 0;
   153cc:	2401      	movs	r4, #1
   153ce:	e7fa      	b.n	153c6 <print_string_ptr+0x5a>
			out = (char *)cJSON_malloc(len + 3);
   153d0:	4b41      	ldr	r3, [pc, #260]	; (154d8 <print_string_ptr+0x16c>)
   153d2:	4608      	mov	r0, r1
   153d4:	681b      	ldr	r3, [r3, #0]
   153d6:	4798      	blx	r3
   153d8:	e7db      	b.n	15392 <print_string_ptr+0x26>
	if (!str) {
   153da:	b996      	cbnz	r6, 15402 <print_string_ptr+0x96>
		if (p)
   153dc:	f1b8 0f00 	cmp.w	r8, #0
   153e0:	d00a      	beq.n	153f8 <print_string_ptr+0x8c>
			out = ensure(p, 3);
   153e2:	2103      	movs	r1, #3
   153e4:	4640      	mov	r0, r8
   153e6:	f7ff ff75 	bl	152d4 <ensure>
			out = (char *)cJSON_malloc(3);
   153ea:	4605      	mov	r5, r0
		if (!out)
   153ec:	2800      	cmp	r0, #0
   153ee:	d0de      	beq.n	153ae <print_string_ptr+0x42>
   153f0:	493a      	ldr	r1, [pc, #232]	; (154dc <print_string_ptr+0x170>)
   153f2:	f015 fc05 	bl	2ac00 <strcpy>
   153f6:	e7da      	b.n	153ae <print_string_ptr+0x42>
			out = (char *)cJSON_malloc(3);
   153f8:	4b37      	ldr	r3, [pc, #220]	; (154d8 <print_string_ptr+0x16c>)
   153fa:	2003      	movs	r0, #3
   153fc:	681b      	ldr	r3, [r3, #0]
   153fe:	4798      	blx	r3
   15400:	e7f3      	b.n	153ea <print_string_ptr+0x7e>
	while ((token) && ++len) {
   15402:	46b1      	mov	r9, r6
	token = *ptr;
   15404:	7837      	ldrb	r7, [r6, #0]
		if (strchr("\"\\\b\f\n\r\t", token))
   15406:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 154e0 <print_string_ptr+0x174>
	while ((token) && ++len) {
   1540a:	b117      	cbz	r7, 15412 <print_string_ptr+0xa6>
   1540c:	1c65      	adds	r5, r4, #1
   1540e:	d11a      	bne.n	15446 <print_string_ptr+0xda>
   15410:	462c      	mov	r4, r5
   15412:	1ce1      	adds	r1, r4, #3
	if (p)
   15414:	f1b8 0f00 	cmp.w	r8, #0
   15418:	d023      	beq.n	15462 <print_string_ptr+0xf6>
		out = ensure(p, len + 3);
   1541a:	4640      	mov	r0, r8
   1541c:	f7ff ff5a 	bl	152d4 <ensure>
		out = (char *)cJSON_malloc(len + 3);
   15420:	4605      	mov	r5, r0
	if (!out)
   15422:	2800      	cmp	r0, #0
   15424:	d0c3      	beq.n	153ae <print_string_ptr+0x42>
	*ptr2++ = '\"';
   15426:	2322      	movs	r3, #34	; 0x22
			*ptr2++ = '\\';
   15428:	275c      	movs	r7, #92	; 0x5c
				*ptr2++ = 'f';
   1542a:	f04f 0866 	mov.w	r8, #102	; 0x66
				sprintf(ptr2, "u%04x", token);
   1542e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 154e4 <print_string_ptr+0x178>
	*ptr2++ = '\"';
   15432:	1c44      	adds	r4, r0, #1
   15434:	7003      	strb	r3, [r0, #0]
   15436:	3e01      	subs	r6, #1
	while (*ptr) {
   15438:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   1543c:	b9b3      	cbnz	r3, 1546c <print_string_ptr+0x100>
	*ptr2++ = '\"';
   1543e:	2222      	movs	r2, #34	; 0x22
	*ptr2++ = 0;
   15440:	7063      	strb	r3, [r4, #1]
	*ptr2++ = '\"';
   15442:	7022      	strb	r2, [r4, #0]
	return out;
   15444:	e7b3      	b.n	153ae <print_string_ptr+0x42>
		if (strchr("\"\\\b\f\n\r\t", token))
   15446:	4639      	mov	r1, r7
   15448:	4650      	mov	r0, sl
   1544a:	f015 fb63 	bl	2ab14 <strchr>
   1544e:	b120      	cbz	r0, 1545a <print_string_ptr+0xee>
			len++;
   15450:	1ca5      	adds	r5, r4, #2
		token = *ptr;
   15452:	f819 7f01 	ldrb.w	r7, [r9, #1]!
   15456:	462c      	mov	r4, r5
   15458:	e7d7      	b.n	1540a <print_string_ptr+0x9e>
		else if (token < 32)
   1545a:	2f1f      	cmp	r7, #31
			len += 5;
   1545c:	bf98      	it	ls
   1545e:	1da5      	addls	r5, r4, #6
   15460:	e7f7      	b.n	15452 <print_string_ptr+0xe6>
		out = (char *)cJSON_malloc(len + 3);
   15462:	4b1d      	ldr	r3, [pc, #116]	; (154d8 <print_string_ptr+0x16c>)
   15464:	4608      	mov	r0, r1
   15466:	681b      	ldr	r3, [r3, #0]
   15468:	4798      	blx	r3
   1546a:	e7d9      	b.n	15420 <print_string_ptr+0xb4>
		if ((unsigned char)*ptr > 31 && *ptr != '\"' && *ptr != '\\')
   1546c:	2b1f      	cmp	r3, #31
   1546e:	f104 0001 	add.w	r0, r4, #1
   15472:	d906      	bls.n	15482 <print_string_ptr+0x116>
   15474:	2b22      	cmp	r3, #34	; 0x22
   15476:	d004      	beq.n	15482 <print_string_ptr+0x116>
   15478:	2b5c      	cmp	r3, #92	; 0x5c
   1547a:	d002      	beq.n	15482 <print_string_ptr+0x116>
			*ptr2++ = *ptr++;
   1547c:	7023      	strb	r3, [r4, #0]
   1547e:	4604      	mov	r4, r0
   15480:	e7da      	b.n	15438 <print_string_ptr+0xcc>
			*ptr2++ = '\\';
   15482:	7027      	strb	r7, [r4, #0]
			switch (token = *ptr++) {
   15484:	7832      	ldrb	r2, [r6, #0]
   15486:	2a0c      	cmp	r2, #12
   15488:	d016      	beq.n	154b8 <print_string_ptr+0x14c>
   1548a:	d809      	bhi.n	154a0 <print_string_ptr+0x134>
   1548c:	2a09      	cmp	r2, #9
   1548e:	d01a      	beq.n	154c6 <print_string_ptr+0x15a>
   15490:	2a0a      	cmp	r2, #10
   15492:	d015      	beq.n	154c0 <print_string_ptr+0x154>
   15494:	2a08      	cmp	r2, #8
   15496:	d119      	bne.n	154cc <print_string_ptr+0x160>
				*ptr2++ = 'b';
   15498:	2362      	movs	r3, #98	; 0x62
   1549a:	1ca0      	adds	r0, r4, #2
				*ptr2++ = 't';
   1549c:	7063      	strb	r3, [r4, #1]
				break;
   1549e:	e7ee      	b.n	1547e <print_string_ptr+0x112>
			switch (token = *ptr++) {
   154a0:	2a22      	cmp	r2, #34	; 0x22
   154a2:	d006      	beq.n	154b2 <print_string_ptr+0x146>
   154a4:	2a5c      	cmp	r2, #92	; 0x5c
   154a6:	d004      	beq.n	154b2 <print_string_ptr+0x146>
   154a8:	2a0d      	cmp	r2, #13
   154aa:	d10f      	bne.n	154cc <print_string_ptr+0x160>
				*ptr2++ = 'r';
   154ac:	1ca0      	adds	r0, r4, #2
   154ae:	2372      	movs	r3, #114	; 0x72
   154b0:	e7f4      	b.n	1549c <print_string_ptr+0x130>
				*ptr2++ = '\"';
   154b2:	1ca0      	adds	r0, r4, #2
   154b4:	7062      	strb	r2, [r4, #1]
				break;
   154b6:	e7e2      	b.n	1547e <print_string_ptr+0x112>
				*ptr2++ = 'f';
   154b8:	1ca0      	adds	r0, r4, #2
   154ba:	f884 8001 	strb.w	r8, [r4, #1]
				break;
   154be:	e7de      	b.n	1547e <print_string_ptr+0x112>
				*ptr2++ = 'n';
   154c0:	1ca0      	adds	r0, r4, #2
   154c2:	236e      	movs	r3, #110	; 0x6e
   154c4:	e7ea      	b.n	1549c <print_string_ptr+0x130>
				*ptr2++ = 't';
   154c6:	1ca0      	adds	r0, r4, #2
   154c8:	2374      	movs	r3, #116	; 0x74
   154ca:	e7e7      	b.n	1549c <print_string_ptr+0x130>
				sprintf(ptr2, "u%04x", token);
   154cc:	4649      	mov	r1, r9
   154ce:	f015 fadf 	bl	2aa90 <sprintf>
				ptr2 += 5;
   154d2:	1da0      	adds	r0, r4, #6
				break; /* escape and print */
   154d4:	e7d3      	b.n	1547e <print_string_ptr+0x112>
   154d6:	bf00      	nop
   154d8:	2002d84c 	.word	0x2002d84c
   154dc:	000353e3 	.word	0x000353e3
   154e0:	000353e6 	.word	0x000353e6
   154e4:	000353ee 	.word	0x000353ee

000154e8 <print_array.isra.3>:
static char *print_array(cJSON *item, int depth, int fmt, printbuffer *p)
   154e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154ec:	4680      	mov	r8, r0
   154ee:	468a      	mov	sl, r1
   154f0:	4616      	mov	r6, r2
   154f2:	461c      	mov	r4, r3
	int numentries = 0, i = 0, fail = 0;
   154f4:	2500      	movs	r5, #0
	cJSON *child = item->child;
   154f6:	6807      	ldr	r7, [r0, #0]
static char *print_array(cJSON *item, int depth, int fmt, printbuffer *p)
   154f8:	b085      	sub	sp, #20
	while (child)
   154fa:	b977      	cbnz	r7, 1551a <print_array.isra.3+0x32>
	if (!numentries) {
   154fc:	b9ad      	cbnz	r5, 1552a <print_array.isra.3+0x42>
		if (p)
   154fe:	b17c      	cbz	r4, 15520 <print_array.isra.3+0x38>
			out = ensure(p, 3);
   15500:	2103      	movs	r1, #3
   15502:	4620      	mov	r0, r4
   15504:	f7ff fee6 	bl	152d4 <ensure>
			out = (char *)cJSON_malloc(3);
   15508:	4682      	mov	sl, r0
		if (out)
   1550a:	b110      	cbz	r0, 15512 <print_array.isra.3+0x2a>
   1550c:	4974      	ldr	r1, [pc, #464]	; (156e0 <print_array.isra.3+0x1f8>)
   1550e:	f015 fb77 	bl	2ac00 <strcpy>
}
   15512:	4650      	mov	r0, sl
   15514:	b005      	add	sp, #20
   15516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		numentries++, child = child->next;
   1551a:	3501      	adds	r5, #1
   1551c:	683f      	ldr	r7, [r7, #0]
   1551e:	e7ec      	b.n	154fa <print_array.isra.3+0x12>
			out = (char *)cJSON_malloc(3);
   15520:	4b70      	ldr	r3, [pc, #448]	; (156e4 <print_array.isra.3+0x1fc>)
   15522:	2003      	movs	r0, #3
   15524:	681b      	ldr	r3, [r3, #0]
   15526:	4798      	blx	r3
   15528:	e7ee      	b.n	15508 <print_array.isra.3+0x20>
	if (p) {
   1552a:	2c00      	cmp	r4, #0
   1552c:	d04b      	beq.n	155c6 <print_array.isra.3+0xde>
		i = p->offset;
   1552e:	68a3      	ldr	r3, [r4, #8]
		ptr = ensure(p, 1);
   15530:	2101      	movs	r1, #1
   15532:	4620      	mov	r0, r4
		i = p->offset;
   15534:	9301      	str	r3, [sp, #4]
		ptr = ensure(p, 1);
   15536:	f7ff fecd 	bl	152d4 <ensure>
		if (!ptr)
   1553a:	b910      	cbnz	r0, 15542 <print_array.isra.3+0x5a>
			return 0;
   1553c:	f04f 0a00 	mov.w	sl, #0
   15540:	e7e7      	b.n	15512 <print_array.isra.3+0x2a>
		*ptr = '[';
   15542:	235b      	movs	r3, #91	; 0x5b
   15544:	2e00      	cmp	r6, #0
   15546:	7003      	strb	r3, [r0, #0]
		child = item->child;
   15548:	f8d8 5000 	ldr.w	r5, [r8]
   1554c:	bf14      	ite	ne
   1554e:	f04f 0802 	movne.w	r8, #2
   15552:	f04f 0801 	moveq.w	r8, #1
				*ptr++ = ',';
   15556:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
		p->offset++;
   1555a:	68a3      	ldr	r3, [r4, #8]
				ptr = ensure(p, len + 1);
   1555c:	f108 0901 	add.w	r9, r8, #1
		p->offset++;
   15560:	3301      	adds	r3, #1
   15562:	60a3      	str	r3, [r4, #8]
			print_value(child, depth + 1, fmt, p);
   15564:	f10a 0a01 	add.w	sl, sl, #1
		while (child && !fail) {
   15568:	b96d      	cbnz	r5, 15586 <print_array.isra.3+0x9e>
		ptr = ensure(p, 2);
   1556a:	2102      	movs	r1, #2
   1556c:	4620      	mov	r0, r4
   1556e:	f7ff feb1 	bl	152d4 <ensure>
		if (!ptr)
   15572:	2800      	cmp	r0, #0
   15574:	d0e2      	beq.n	1553c <print_array.isra.3+0x54>
		*ptr++ = ']';
   15576:	235d      	movs	r3, #93	; 0x5d
		*ptr = 0;
   15578:	7045      	strb	r5, [r0, #1]
		*ptr++ = ']';
   1557a:	7003      	strb	r3, [r0, #0]
		out = (p->buffer) + i;
   1557c:	6823      	ldr	r3, [r4, #0]
   1557e:	9a01      	ldr	r2, [sp, #4]
   15580:	441a      	add	r2, r3
   15582:	4692      	mov	sl, r2
   15584:	e7c5      	b.n	15512 <print_array.isra.3+0x2a>
			print_value(child, depth + 1, fmt, p);
   15586:	4623      	mov	r3, r4
   15588:	4632      	mov	r2, r6
   1558a:	4651      	mov	r1, sl
   1558c:	4628      	mov	r0, r5
   1558e:	f000 f8ad 	bl	156ec <print_value>
			p->offset = update(p);
   15592:	4620      	mov	r0, r4
   15594:	f019 fad2 	bl	2eb3c <update>
			if (child->next) {
   15598:	682b      	ldr	r3, [r5, #0]
			p->offset = update(p);
   1559a:	60a0      	str	r0, [r4, #8]
			if (child->next) {
   1559c:	b16b      	cbz	r3, 155ba <print_array.isra.3+0xd2>
				ptr = ensure(p, len + 1);
   1559e:	4649      	mov	r1, r9
   155a0:	4620      	mov	r0, r4
   155a2:	f7ff fe97 	bl	152d4 <ensure>
				if (!ptr)
   155a6:	2800      	cmp	r0, #0
   155a8:	d0c8      	beq.n	1553c <print_array.isra.3+0x54>
				*ptr++ = ',';
   155aa:	f880 b000 	strb.w	fp, [r0]
				if (fmt)
   155ae:	b936      	cbnz	r6, 155be <print_array.isra.3+0xd6>
				*ptr++ = ',';
   155b0:	1c43      	adds	r3, r0, #1
				*ptr = 0;
   155b2:	701f      	strb	r7, [r3, #0]
				p->offset += len;
   155b4:	68a3      	ldr	r3, [r4, #8]
   155b6:	4443      	add	r3, r8
   155b8:	60a3      	str	r3, [r4, #8]
			child = child->next;
   155ba:	682d      	ldr	r5, [r5, #0]
   155bc:	e7d4      	b.n	15568 <print_array.isra.3+0x80>
					*ptr++ = ' ';
   155be:	2220      	movs	r2, #32
   155c0:	1c83      	adds	r3, r0, #2
   155c2:	7042      	strb	r2, [r0, #1]
   155c4:	e7f5      	b.n	155b2 <print_array.isra.3+0xca>
		entries = (char **)cJSON_malloc(numentries * sizeof(char *));
   155c6:	f8df 911c 	ldr.w	r9, [pc, #284]	; 156e4 <print_array.isra.3+0x1fc>
   155ca:	00ab      	lsls	r3, r5, #2
   155cc:	9302      	str	r3, [sp, #8]
   155ce:	00a8      	lsls	r0, r5, #2
   155d0:	f8d9 3000 	ldr.w	r3, [r9]
   155d4:	4798      	blx	r3
   155d6:	f8cd 900c 	str.w	r9, [sp, #12]
		if (!entries)
   155da:	4607      	mov	r7, r0
   155dc:	2800      	cmp	r0, #0
   155de:	d0ad      	beq.n	1553c <print_array.isra.3+0x54>
	int len = 5;
   155e0:	f04f 0b05 	mov.w	fp, #5
__ssp_bos_icheck3(memset, void *, int)
   155e4:	00aa      	lsls	r2, r5, #2
   155e6:	4621      	mov	r1, r4
   155e8:	f015 f97c 	bl	2a8e4 <memset>
		child = item->child;
   155ec:	f8d8 9000 	ldr.w	r9, [r8]
   155f0:	f1a7 0804 	sub.w	r8, r7, #4
   155f4:	f8cd 8004 	str.w	r8, [sp, #4]
			ret = print_value(child, depth + 1, fmt, 0);
   155f8:	f10a 0a01 	add.w	sl, sl, #1
		while (child && !fail) {
   155fc:	f1b9 0f00 	cmp.w	r9, #0
   15600:	d01e      	beq.n	15640 <print_array.isra.3+0x158>
   15602:	b12c      	cbz	r4, 15610 <print_array.isra.3+0x128>
   15604:	9b02      	ldr	r3, [sp, #8]
   15606:	463d      	mov	r5, r7
   15608:	443b      	add	r3, r7
   1560a:	461c      	mov	r4, r3
   1560c:	4e36      	ldr	r6, [pc, #216]	; (156e8 <print_array.isra.3+0x200>)
   1560e:	e05a      	b.n	156c6 <print_array.isra.3+0x1de>
			ret = print_value(child, depth + 1, fmt, 0);
   15610:	4632      	mov	r2, r6
   15612:	4623      	mov	r3, r4
   15614:	4651      	mov	r1, sl
   15616:	4648      	mov	r0, r9
   15618:	f000 f868 	bl	156ec <print_value>
			entries[i++] = ret;
   1561c:	9a01      	ldr	r2, [sp, #4]
   1561e:	f842 0f04 	str.w	r0, [r2, #4]!
   15622:	9201      	str	r2, [sp, #4]
			if (ret)
   15624:	b150      	cbz	r0, 1563c <print_array.isra.3+0x154>
				len += strlen(ret) + 2 + (fmt ? 1 : 0);
   15626:	f015 fb49 	bl	2acbc <strlen>
   1562a:	1c33      	adds	r3, r6, #0
   1562c:	bf18      	it	ne
   1562e:	2301      	movne	r3, #1
   15630:	3302      	adds	r3, #2
   15632:	449b      	add	fp, r3
   15634:	4483      	add	fp, r0
			child = child->next;
   15636:	f8d9 9000 	ldr.w	r9, [r9]
   1563a:	e7df      	b.n	155fc <print_array.isra.3+0x114>
				fail = 1;
   1563c:	2401      	movs	r4, #1
   1563e:	e7fa      	b.n	15636 <print_array.isra.3+0x14e>
		if (!fail)
   15640:	2c00      	cmp	r4, #0
   15642:	d1df      	bne.n	15604 <print_array.isra.3+0x11c>
			out = (char *)cJSON_malloc(len);
   15644:	9b03      	ldr	r3, [sp, #12]
   15646:	4658      	mov	r0, fp
   15648:	681b      	ldr	r3, [r3, #0]
   1564a:	4798      	blx	r3
		if (!out)
   1564c:	4682      	mov	sl, r0
   1564e:	2800      	cmp	r0, #0
   15650:	d0d8      	beq.n	15604 <print_array.isra.3+0x11c>
		*out = '[';
   15652:	235b      	movs	r3, #91	; 0x5b
   15654:	4681      	mov	r9, r0
			cJSON_free(entries[i]);
   15656:	f8df b090 	ldr.w	fp, [pc, #144]	; 156e8 <print_array.isra.3+0x200>
		*out = '[';
   1565a:	f809 3b01 	strb.w	r3, [r9], #1
			if (i != numentries - 1) {
   1565e:	1e6b      	subs	r3, r5, #1
		*ptr = 0;
   15660:	7044      	strb	r4, [r0, #1]
			if (i != numentries - 1) {
   15662:	9301      	str	r3, [sp, #4]
			tmplen = strlen(entries[i]);
   15664:	f858 0f04 	ldr.w	r0, [r8, #4]!
   15668:	f015 fb28 	bl	2acbc <strlen>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1566c:	f8d8 1000 	ldr.w	r1, [r8]
   15670:	4602      	mov	r2, r0
   15672:	9002      	str	r0, [sp, #8]
   15674:	4648      	mov	r0, r9
   15676:	f7f8 faaf 	bl	dbd8 <memcpy>
			ptr += tmplen;
   1567a:	9b02      	ldr	r3, [sp, #8]
   1567c:	4499      	add	r9, r3
			if (i != numentries - 1) {
   1567e:	9b01      	ldr	r3, [sp, #4]
   15680:	429c      	cmp	r4, r3
   15682:	d009      	beq.n	15698 <print_array.isra.3+0x1b0>
				*ptr++ = ',';
   15684:	f04f 032c 	mov.w	r3, #44	; 0x2c
   15688:	f889 3000 	strb.w	r3, [r9]
				if (fmt)
   1568c:	bb0e      	cbnz	r6, 156d2 <print_array.isra.3+0x1ea>
				*ptr++ = ',';
   1568e:	f109 0901 	add.w	r9, r9, #1
				*ptr = 0;
   15692:	2300      	movs	r3, #0
   15694:	f889 3000 	strb.w	r3, [r9]
			cJSON_free(entries[i]);
   15698:	f8db 3000 	ldr.w	r3, [fp]
   1569c:	f8d8 0000 	ldr.w	r0, [r8]
		for (i = 0; i < numentries; i++) {
   156a0:	3401      	adds	r4, #1
			cJSON_free(entries[i]);
   156a2:	4798      	blx	r3
		for (i = 0; i < numentries; i++) {
   156a4:	42a5      	cmp	r5, r4
   156a6:	d1dd      	bne.n	15664 <print_array.isra.3+0x17c>
		cJSON_free(entries);
   156a8:	f8db 3000 	ldr.w	r3, [fp]
   156ac:	4638      	mov	r0, r7
   156ae:	4798      	blx	r3
		*ptr++ = ']';
   156b0:	235d      	movs	r3, #93	; 0x5d
   156b2:	f889 3000 	strb.w	r3, [r9]
		*ptr++ = 0;
   156b6:	2300      	movs	r3, #0
   156b8:	f889 3001 	strb.w	r3, [r9, #1]
   156bc:	e729      	b.n	15512 <print_array.isra.3+0x2a>
				if (entries[i])
   156be:	f855 0b04 	ldr.w	r0, [r5], #4
   156c2:	b100      	cbz	r0, 156c6 <print_array.isra.3+0x1de>
					cJSON_free(entries[i]);
   156c4:	4798      	blx	r3
			for (i = 0; i < numentries; i++)
   156c6:	42a5      	cmp	r5, r4
   156c8:	6833      	ldr	r3, [r6, #0]
   156ca:	d1f8      	bne.n	156be <print_array.isra.3+0x1d6>
			cJSON_free(entries);
   156cc:	4638      	mov	r0, r7
   156ce:	4798      	blx	r3
   156d0:	e734      	b.n	1553c <print_array.isra.3+0x54>
					*ptr++ = ' ';
   156d2:	2320      	movs	r3, #32
   156d4:	f109 0902 	add.w	r9, r9, #2
   156d8:	f809 3c01 	strb.w	r3, [r9, #-1]
   156dc:	e7d9      	b.n	15692 <print_array.isra.3+0x1aa>
   156de:	bf00      	nop
   156e0:	000353d5 	.word	0x000353d5
   156e4:	2002d84c 	.word	0x2002d84c
   156e8:	2002d848 	.word	0x2002d848

000156ec <print_value>:
{
   156ec:	b510      	push	{r4, lr}
	if (!item)
   156ee:	2800      	cmp	r0, #0
   156f0:	d052      	beq.n	15798 <print_value+0xac>
   156f2:	7b04      	ldrb	r4, [r0, #12]
	if (p) {
   156f4:	b37b      	cbz	r3, 15756 <print_value+0x6a>
		switch ((item->type) & 255) {
   156f6:	2c06      	cmp	r4, #6
   156f8:	d84e      	bhi.n	15798 <print_value+0xac>
   156fa:	e8df f004 	tbb	[pc, r4]
   156fe:	180f      	.short	0x180f
   15700:	42262104 	.word	0x42262104
   15704:	48          	.byte	0x48
   15705:	00          	.byte	0x00
			out = ensure(p, 5);
   15706:	2105      	movs	r1, #5
   15708:	4618      	mov	r0, r3
   1570a:	f7ff fde3 	bl	152d4 <ensure>
			if (out)
   1570e:	4604      	mov	r4, r0
   15710:	b110      	cbz	r0, 15718 <print_value+0x2c>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   15712:	4922      	ldr	r1, [pc, #136]	; (1579c <print_value+0xb0>)
   15714:	f015 fa74 	bl	2ac00 <strcpy>
}
   15718:	4620      	mov	r0, r4
   1571a:	bd10      	pop	{r4, pc}
			out = ensure(p, 6);
   1571c:	2106      	movs	r1, #6
   1571e:	4618      	mov	r0, r3
   15720:	f7ff fdd8 	bl	152d4 <ensure>
			if (out)
   15724:	4604      	mov	r4, r0
   15726:	2800      	cmp	r0, #0
   15728:	d0f6      	beq.n	15718 <print_value+0x2c>
   1572a:	491d      	ldr	r1, [pc, #116]	; (157a0 <print_value+0xb4>)
   1572c:	e7f2      	b.n	15714 <print_value+0x28>
			out = ensure(p, 5);
   1572e:	2105      	movs	r1, #5
   15730:	4618      	mov	r0, r3
   15732:	f7ff fdcf 	bl	152d4 <ensure>
			if (out)
   15736:	4604      	mov	r4, r0
   15738:	2800      	cmp	r0, #0
   1573a:	d0ed      	beq.n	15718 <print_value+0x2c>
   1573c:	4919      	ldr	r1, [pc, #100]	; (157a4 <print_value+0xb8>)
   1573e:	e7e9      	b.n	15714 <print_value+0x28>
			out = print_number(item, p);
   15740:	4619      	mov	r1, r3
}
   15742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			out = print_number(item, 0);
   15746:	f7f8 bc83 	b.w	e050 <print_number>
	return print_string_ptr(item->valuestring, p);
   1574a:	4619      	mov	r1, r3
}
   1574c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return print_string_ptr(item->valuestring, p);
   15750:	6900      	ldr	r0, [r0, #16]
   15752:	f7ff be0b 	b.w	1536c <print_string_ptr>
		switch ((item->type) & 255) {
   15756:	2c06      	cmp	r4, #6
   15758:	d81e      	bhi.n	15798 <print_value+0xac>
   1575a:	e8df f004 	tbb	[pc, r4]
   1575e:	0b09      	.short	0x0b09
   15760:	110f0d04 	.word	0x110f0d04
   15764:	17          	.byte	0x17
   15765:	00          	.byte	0x00
			out = cJSON_strdup("null");
   15766:	480d      	ldr	r0, [pc, #52]	; (1579c <print_value+0xb0>)
}
   15768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			out = cJSON_strdup("false");
   1576c:	f7ff bdea 	b.w	15344 <cJSON_strdup>
   15770:	480b      	ldr	r0, [pc, #44]	; (157a0 <print_value+0xb4>)
   15772:	e7f9      	b.n	15768 <print_value+0x7c>
			out = cJSON_strdup("true");
   15774:	480b      	ldr	r0, [pc, #44]	; (157a4 <print_value+0xb8>)
   15776:	e7f7      	b.n	15768 <print_value+0x7c>
			out = print_number(item, 0);
   15778:	2100      	movs	r1, #0
   1577a:	e7e2      	b.n	15742 <print_value+0x56>
	return print_string_ptr(item->valuestring, p);
   1577c:	2100      	movs	r1, #0
   1577e:	e7e5      	b.n	1574c <print_value+0x60>
			out = print_array(item, depth, fmt, 0);
   15780:	2300      	movs	r3, #0
}
   15782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			out = print_array(item, depth, fmt, 0);
   15786:	3008      	adds	r0, #8
   15788:	f7ff beae 	b.w	154e8 <print_array.isra.3>
			out = print_object(item, depth, fmt, 0);
   1578c:	2300      	movs	r3, #0
}
   1578e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			out = print_object(item, depth, fmt, 0);
   15792:	3008      	adds	r0, #8
   15794:	f000 b808 	b.w	157a8 <print_object.isra.2>
	char *out = 0;
   15798:	2400      	movs	r4, #0
   1579a:	e7bd      	b.n	15718 <print_value+0x2c>
   1579c:	000353c5 	.word	0x000353c5
   157a0:	000353ca 	.word	0x000353ca
   157a4:	000353d0 	.word	0x000353d0

000157a8 <print_object.isra.2>:
	return 0; /* malformed. */
}

/* Render an object to text. */
static char *print_object(cJSON *item, int depth, int fmt, printbuffer *p)
   157a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157ac:	4680      	mov	r8, r0
   157ae:	468b      	mov	fp, r1
   157b0:	4615      	mov	r5, r2
{
	char **entries = 0, **names = 0;
	char *out = 0, *ptr, *ret, *str;
	int len = 7, i = 0, j;
	cJSON *child = item->child;
	int numentries = 0, fail = 0;
   157b2:	2700      	movs	r7, #0
static char *print_object(cJSON *item, int depth, int fmt, printbuffer *p)
   157b4:	461c      	mov	r4, r3
	cJSON *child = item->child;
   157b6:	6803      	ldr	r3, [r0, #0]
static char *print_object(cJSON *item, int depth, int fmt, printbuffer *p)
   157b8:	b089      	sub	sp, #36	; 0x24
	size_t tmplen = 0;
	/* Count the number of entries. */
	while (child)
   157ba:	b95b      	cbnz	r3, 157d4 <print_object.isra.2+0x2c>
		numentries++, child = child->next;
	/* Explicitly handle empty object case */
	if (!numentries) {
   157bc:	bbaf      	cbnz	r7, 1582a <print_object.isra.2+0x82>
		if (p)
   157be:	b174      	cbz	r4, 157de <print_object.isra.2+0x36>
			out = ensure(p, fmt ? depth + 4 : 3);
   157c0:	b15d      	cbz	r5, 157da <print_object.isra.2+0x32>
   157c2:	f10b 0104 	add.w	r1, fp, #4
   157c6:	4620      	mov	r0, r4
   157c8:	f7ff fd84 	bl	152d4 <ensure>
		else
			out = (char *)cJSON_malloc(fmt ? depth + 4 : 3);
   157cc:	4604      	mov	r4, r0
		if (!out)
   157ce:	b978      	cbnz	r0, 157f0 <print_object.isra.2+0x48>
				if (entries[i])
					cJSON_free(entries[i]);
			}
			cJSON_free(names);
			cJSON_free(entries);
			return 0;
   157d0:	2400      	movs	r4, #0
   157d2:	e015      	b.n	15800 <print_object.isra.2+0x58>
		numentries++, child = child->next;
   157d4:	3701      	adds	r7, #1
   157d6:	681b      	ldr	r3, [r3, #0]
   157d8:	e7ef      	b.n	157ba <print_object.isra.2+0x12>
			out = ensure(p, fmt ? depth + 4 : 3);
   157da:	2103      	movs	r1, #3
   157dc:	e7f3      	b.n	157c6 <print_object.isra.2+0x1e>
			out = (char *)cJSON_malloc(fmt ? depth + 4 : 3);
   157de:	4bae      	ldr	r3, [pc, #696]	; (15a98 <print_object.isra.2+0x2f0>)
   157e0:	681b      	ldr	r3, [r3, #0]
   157e2:	b11d      	cbz	r5, 157ec <print_object.isra.2+0x44>
   157e4:	f10b 0004 	add.w	r0, fp, #4
   157e8:	4798      	blx	r3
   157ea:	e7ef      	b.n	157cc <print_object.isra.2+0x24>
   157ec:	2003      	movs	r0, #3
   157ee:	e7fb      	b.n	157e8 <print_object.isra.2+0x40>
		*ptr++ = '{';
   157f0:	237b      	movs	r3, #123	; 0x7b
   157f2:	7003      	strb	r3, [r0, #0]
		if (fmt) {
   157f4:	b945      	cbnz	r5, 15808 <print_object.isra.2+0x60>
		*ptr++ = '{';
   157f6:	1c43      	adds	r3, r0, #1
		*ptr++ = '}';
   157f8:	227d      	movs	r2, #125	; 0x7d
   157fa:	701a      	strb	r2, [r3, #0]
		*ptr++ = 0;
   157fc:	2200      	movs	r2, #0
   157fe:	705a      	strb	r2, [r3, #1]
				*ptr++ = '\t';
		*ptr++ = '}';
		*ptr++ = 0;
	}
	return out;
}
   15800:	4620      	mov	r0, r4
   15802:	b009      	add	sp, #36	; 0x24
   15804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*ptr++ = '\n';
   15808:	220a      	movs	r2, #10
   1580a:	1c83      	adds	r3, r0, #2
   1580c:	7042      	strb	r2, [r0, #1]
				*ptr++ = '\t';
   1580e:	2509      	movs	r5, #9
			*ptr++ = '\n';
   15810:	461a      	mov	r2, r3
			for (i = 0; i < depth - 1; i++)
   15812:	f10b 31ff 	add.w	r1, fp, #4294967295
   15816:	1ad0      	subs	r0, r2, r3
   15818:	4281      	cmp	r1, r0
   1581a:	dc03      	bgt.n	15824 <print_object.isra.2+0x7c>
   1581c:	2900      	cmp	r1, #0
   1581e:	bfa8      	it	ge
   15820:	185b      	addge	r3, r3, r1
   15822:	e7e9      	b.n	157f8 <print_object.isra.2+0x50>
				*ptr++ = '\t';
   15824:	f802 5b01 	strb.w	r5, [r2], #1
   15828:	e7f5      	b.n	15816 <print_object.isra.2+0x6e>
	if (p) {
   1582a:	2c00      	cmp	r4, #0
   1582c:	f000 8094 	beq.w	15958 <print_object.isra.2+0x1b0>
		len = fmt ? 2 : 1;
   15830:	2d00      	cmp	r5, #0
   15832:	bf0c      	ite	eq
   15834:	2701      	moveq	r7, #1
   15836:	2702      	movne	r7, #2
		ptr = ensure(p, len + 1);
   15838:	4620      	mov	r0, r4
   1583a:	1c79      	adds	r1, r7, #1
		i = p->offset;
   1583c:	f8d4 9008 	ldr.w	r9, [r4, #8]
		ptr = ensure(p, len + 1);
   15840:	f7ff fd48 	bl	152d4 <ensure>
		if (!ptr)
   15844:	2800      	cmp	r0, #0
   15846:	d0c3      	beq.n	157d0 <print_object.isra.2+0x28>
		*ptr++ = '{';
   15848:	237b      	movs	r3, #123	; 0x7b
   1584a:	7003      	strb	r3, [r0, #0]
		if (fmt)
   1584c:	b9f5      	cbnz	r5, 1588c <print_object.isra.2+0xe4>
		*ptr++ = '{';
   1584e:	1c43      	adds	r3, r0, #1
		*ptr = 0;
   15850:	2200      	movs	r2, #0
					*ptr++ = '\t';
   15852:	f04f 0a09 	mov.w	sl, #9
		*ptr = 0;
   15856:	701a      	strb	r2, [r3, #0]
		p->offset += len;
   15858:	68a3      	ldr	r3, [r4, #8]
		child = item->child;
   1585a:	f8d8 6000 	ldr.w	r6, [r8]
		p->offset += len;
   1585e:	443b      	add	r3, r7
   15860:	60a3      	str	r3, [r4, #8]
		depth++;
   15862:	f10b 0801 	add.w	r8, fp, #1
		while (child) {
   15866:	b9ae      	cbnz	r6, 15894 <print_object.isra.2+0xec>
		ptr = ensure(p, fmt ? (depth + 1) : 2);
   15868:	2d00      	cmp	r5, #0
   1586a:	d067      	beq.n	1593c <print_object.isra.2+0x194>
   1586c:	f10b 0102 	add.w	r1, fp, #2
   15870:	4620      	mov	r0, r4
   15872:	f7ff fd2f 	bl	152d4 <ensure>
		if (!ptr)
   15876:	2800      	cmp	r0, #0
   15878:	d0aa      	beq.n	157d0 <print_object.isra.2+0x28>
		if (fmt)
   1587a:	2d00      	cmp	r5, #0
   1587c:	d169      	bne.n	15952 <print_object.isra.2+0x1aa>
		*ptr++ = '}';
   1587e:	237d      	movs	r3, #125	; 0x7d
   15880:	7003      	strb	r3, [r0, #0]
		*ptr = 0;
   15882:	2300      	movs	r3, #0
   15884:	7043      	strb	r3, [r0, #1]
		out = (p->buffer) + i;
   15886:	6824      	ldr	r4, [r4, #0]
   15888:	444c      	add	r4, r9
   1588a:	e7b9      	b.n	15800 <print_object.isra.2+0x58>
			*ptr++ = '\n';
   1588c:	220a      	movs	r2, #10
   1588e:	1c83      	adds	r3, r0, #2
   15890:	7042      	strb	r2, [r0, #1]
   15892:	e7dd      	b.n	15850 <print_object.isra.2+0xa8>
			if (fmt) {
   15894:	b165      	cbz	r5, 158b0 <print_object.isra.2+0x108>
				ptr = ensure(p, depth);
   15896:	4641      	mov	r1, r8
   15898:	4620      	mov	r0, r4
   1589a:	f7ff fd1b 	bl	152d4 <ensure>
				if (!ptr)
   1589e:	2800      	cmp	r0, #0
   158a0:	d096      	beq.n	157d0 <print_object.isra.2+0x28>
   158a2:	4603      	mov	r3, r0
				for (j = 0; j < depth; j++)
   158a4:	1a1a      	subs	r2, r3, r0
   158a6:	4590      	cmp	r8, r2
   158a8:	dc45      	bgt.n	15936 <print_object.isra.2+0x18e>
				p->offset += depth;
   158aa:	68a3      	ldr	r3, [r4, #8]
   158ac:	4443      	add	r3, r8
   158ae:	60a3      	str	r3, [r4, #8]
			print_string_ptr(child->string, p);
   158b0:	4621      	mov	r1, r4
   158b2:	6a30      	ldr	r0, [r6, #32]
   158b4:	f7ff fd5a 	bl	1536c <print_string_ptr>
			p->offset = update(p);
   158b8:	4620      	mov	r0, r4
   158ba:	f019 f93f 	bl	2eb3c <update>
			ptr = ensure(p, len);
   158be:	4639      	mov	r1, r7
			p->offset = update(p);
   158c0:	60a0      	str	r0, [r4, #8]
			ptr = ensure(p, len);
   158c2:	4620      	mov	r0, r4
   158c4:	f7ff fd06 	bl	152d4 <ensure>
			if (!ptr)
   158c8:	2800      	cmp	r0, #0
   158ca:	d081      	beq.n	157d0 <print_object.isra.2+0x28>
			*ptr++ = ':';
   158cc:	f04f 033a 	mov.w	r3, #58	; 0x3a
   158d0:	7003      	strb	r3, [r0, #0]
			if (fmt)
   158d2:	b10d      	cbz	r5, 158d8 <print_object.isra.2+0x130>
				*ptr++ = '\t';
   158d4:	f880 a001 	strb.w	sl, [r0, #1]
			p->offset += len;
   158d8:	68a3      	ldr	r3, [r4, #8]
			print_value(child, depth, fmt, p);
   158da:	462a      	mov	r2, r5
			p->offset += len;
   158dc:	443b      	add	r3, r7
			print_value(child, depth, fmt, p);
   158de:	4641      	mov	r1, r8
			p->offset += len;
   158e0:	60a3      	str	r3, [r4, #8]
			print_value(child, depth, fmt, p);
   158e2:	4630      	mov	r0, r6
   158e4:	4623      	mov	r3, r4
   158e6:	f7ff ff01 	bl	156ec <print_value>
			p->offset = update(p);
   158ea:	4620      	mov	r0, r4
   158ec:	f019 f926 	bl	2eb3c <update>
			len = (fmt ? 1 : 0) + (child->next ? 1 : 0);
   158f0:	1c2b      	adds	r3, r5, #0
   158f2:	bf18      	it	ne
   158f4:	2301      	movne	r3, #1
   158f6:	6832      	ldr	r2, [r6, #0]
			p->offset = update(p);
   158f8:	60a0      	str	r0, [r4, #8]
			len = (fmt ? 1 : 0) + (child->next ? 1 : 0);
   158fa:	2a00      	cmp	r2, #0
   158fc:	bf18      	it	ne
   158fe:	3301      	addne	r3, #1
			ptr = ensure(p, len + 1);
   15900:	4620      	mov	r0, r4
   15902:	1c59      	adds	r1, r3, #1
   15904:	9300      	str	r3, [sp, #0]
   15906:	f7ff fce5 	bl	152d4 <ensure>
			if (!ptr)
   1590a:	2800      	cmp	r0, #0
   1590c:	f43f af60 	beq.w	157d0 <print_object.isra.2+0x28>
			if (child->next)
   15910:	6832      	ldr	r2, [r6, #0]
   15912:	9b00      	ldr	r3, [sp, #0]
   15914:	b11a      	cbz	r2, 1591e <print_object.isra.2+0x176>
				*ptr++ = ',';
   15916:	222c      	movs	r2, #44	; 0x2c
   15918:	3001      	adds	r0, #1
   1591a:	f800 2c01 	strb.w	r2, [r0, #-1]
			if (fmt) {
   1591e:	b11d      	cbz	r5, 15928 <print_object.isra.2+0x180>
				*ptr++ = '\n';
   15920:	220a      	movs	r2, #10
   15922:	3001      	adds	r0, #1
   15924:	f800 2c01 	strb.w	r2, [r0, #-1]
			*ptr = 0;
   15928:	2200      	movs	r2, #0
   1592a:	7002      	strb	r2, [r0, #0]
			p->offset += len;
   1592c:	68a2      	ldr	r2, [r4, #8]
			child = child->next;
   1592e:	6836      	ldr	r6, [r6, #0]
			p->offset += len;
   15930:	4413      	add	r3, r2
   15932:	60a3      	str	r3, [r4, #8]
   15934:	e797      	b.n	15866 <print_object.isra.2+0xbe>
					*ptr++ = '\t';
   15936:	f803 ab01 	strb.w	sl, [r3], #1
   1593a:	e7b3      	b.n	158a4 <print_object.isra.2+0xfc>
		ptr = ensure(p, fmt ? (depth + 1) : 2);
   1593c:	2102      	movs	r1, #2
   1593e:	e797      	b.n	15870 <print_object.isra.2+0xc8>
				*ptr++ = '\t';
   15940:	f803 1b01 	strb.w	r1, [r3], #1
			for (i = 0; i < depth - 1; i++)
   15944:	1a1a      	subs	r2, r3, r0
   15946:	4593      	cmp	fp, r2
   15948:	dcfa      	bgt.n	15940 <print_object.isra.2+0x198>
   1594a:	ea2b 79eb 	bic.w	r9, fp, fp, asr #31
   1594e:	4448      	add	r0, r9
   15950:	e795      	b.n	1587e <print_object.isra.2+0xd6>
		if (fmt)
   15952:	4603      	mov	r3, r0
				*ptr++ = '\t';
   15954:	2109      	movs	r1, #9
   15956:	e7f5      	b.n	15944 <print_object.isra.2+0x19c>
		entries = (char **)cJSON_malloc(numentries * sizeof(char *));
   15958:	f8df a13c 	ldr.w	sl, [pc, #316]	; 15a98 <print_object.isra.2+0x2f0>
   1595c:	ea4f 0987 	mov.w	r9, r7, lsl #2
   15960:	f8da 3000 	ldr.w	r3, [sl]
   15964:	4648      	mov	r0, r9
   15966:	4798      	blx	r3
		if (!entries)
   15968:	4606      	mov	r6, r0
   1596a:	2800      	cmp	r0, #0
   1596c:	f43f af30 	beq.w	157d0 <print_object.isra.2+0x28>
		names = (char **)cJSON_malloc(numentries * sizeof(char *));
   15970:	f8da 3000 	ldr.w	r3, [sl]
   15974:	4648      	mov	r0, r9
   15976:	4798      	blx	r3
		if (!names) {
   15978:	9000      	str	r0, [sp, #0]
   1597a:	b920      	cbnz	r0, 15986 <print_object.isra.2+0x1de>
			cJSON_free(entries);
   1597c:	4b47      	ldr	r3, [pc, #284]	; (15a9c <print_object.isra.2+0x2f4>)
   1597e:	4630      	mov	r0, r6
   15980:	681b      	ldr	r3, [r3, #0]
   15982:	4798      	blx	r3
   15984:	e73c      	b.n	15800 <print_object.isra.2+0x58>
__ssp_bos_icheck3(memset, void *, int)
   15986:	464a      	mov	r2, r9
   15988:	4621      	mov	r1, r4
   1598a:	4630      	mov	r0, r6
   1598c:	f014 ffaa 	bl	2a8e4 <memset>
   15990:	464a      	mov	r2, r9
   15992:	4621      	mov	r1, r4
   15994:	9800      	ldr	r0, [sp, #0]
   15996:	f014 ffa5 	bl	2a8e4 <memset>
		depth++;
   1599a:	f10b 0301 	add.w	r3, fp, #1
		child = item->child;
   1599e:	f8d8 8000 	ldr.w	r8, [r8]
		depth++;
   159a2:	9303      	str	r3, [sp, #12]
		if (fmt)
   159a4:	b325      	cbz	r5, 159f0 <print_object.isra.2+0x248>
			len += depth;
   159a6:	f10b 0408 	add.w	r4, fp, #8
   159aa:	2d00      	cmp	r5, #0
				       (fmt ? 2 + depth : 0);
   159ac:	f10b 0303 	add.w	r3, fp, #3
   159b0:	bf08      	it	eq
   159b2:	2300      	moveq	r3, #0
   159b4:	f04f 0a00 	mov.w	sl, #0
   159b8:	9a00      	ldr	r2, [sp, #0]
				len += strlen(ret) + strlen(str) + 2 +
   159ba:	3302      	adds	r3, #2
   159bc:	3a04      	subs	r2, #4
   159be:	9202      	str	r2, [sp, #8]
   159c0:	1f32      	subs	r2, r6, #4
   159c2:	9201      	str	r2, [sp, #4]
				       (fmt ? 2 + depth : 0);
   159c4:	9205      	str	r2, [sp, #20]
   159c6:	9a02      	ldr	r2, [sp, #8]
				len += strlen(ret) + strlen(str) + 2 +
   159c8:	9306      	str	r3, [sp, #24]
				       (fmt ? 2 + depth : 0);
   159ca:	9204      	str	r2, [sp, #16]
		while (child) {
   159cc:	f1b8 0f00 	cmp.w	r8, #0
   159d0:	d110      	bne.n	159f4 <print_object.isra.2+0x24c>
		if (!fail)
   159d2:	f1ba 0f00 	cmp.w	sl, #0
   159d6:	d036      	beq.n	15a46 <print_object.isra.2+0x29e>
   159d8:	4d30      	ldr	r5, [pc, #192]	; (15a9c <print_object.isra.2+0x2f4>)
				       (fmt ? 2 + depth : 0);
   159da:	2400      	movs	r4, #0
   159dc:	46a8      	mov	r8, r5
			for (i = 0; i < numentries; i++) {
   159de:	42a7      	cmp	r7, r4
   159e0:	682b      	ldr	r3, [r5, #0]
   159e2:	d146      	bne.n	15a72 <print_object.isra.2+0x2ca>
			cJSON_free(names);
   159e4:	9800      	ldr	r0, [sp, #0]
   159e6:	4798      	blx	r3
			cJSON_free(entries);
   159e8:	682b      	ldr	r3, [r5, #0]
   159ea:	4630      	mov	r0, r6
   159ec:	4798      	blx	r3
   159ee:	e6ef      	b.n	157d0 <print_object.isra.2+0x28>
	int len = 7, i = 0, j;
   159f0:	2407      	movs	r4, #7
   159f2:	e7da      	b.n	159aa <print_object.isra.2+0x202>
			names[i] = str = print_string_ptr(child->string, 0);
   159f4:	2100      	movs	r1, #0
   159f6:	f8d8 0020 	ldr.w	r0, [r8, #32]
   159fa:	f7ff fcb7 	bl	1536c <print_string_ptr>
   159fe:	9b04      	ldr	r3, [sp, #16]
			entries[i++] = ret = print_value(child, depth, fmt, 0);
   15a00:	462a      	mov	r2, r5
			names[i] = str = print_string_ptr(child->string, 0);
   15a02:	f843 0f04 	str.w	r0, [r3, #4]!
   15a06:	9304      	str	r3, [sp, #16]
   15a08:	4681      	mov	r9, r0
			entries[i++] = ret = print_value(child, depth, fmt, 0);
   15a0a:	2300      	movs	r3, #0
   15a0c:	9903      	ldr	r1, [sp, #12]
   15a0e:	4640      	mov	r0, r8
   15a10:	f7ff fe6c 	bl	156ec <print_value>
   15a14:	9a05      	ldr	r2, [sp, #20]
   15a16:	f842 0f04 	str.w	r0, [r2, #4]!
   15a1a:	9205      	str	r2, [sp, #20]
			if (str && ret)
   15a1c:	f1b9 0f00 	cmp.w	r9, #0
   15a20:	d00e      	beq.n	15a40 <print_object.isra.2+0x298>
   15a22:	b168      	cbz	r0, 15a40 <print_object.isra.2+0x298>
				len += strlen(ret) + strlen(str) + 2 +
   15a24:	f015 f94a 	bl	2acbc <strlen>
   15a28:	9007      	str	r0, [sp, #28]
   15a2a:	4648      	mov	r0, r9
   15a2c:	f015 f946 	bl	2acbc <strlen>
   15a30:	9b06      	ldr	r3, [sp, #24]
   15a32:	441c      	add	r4, r3
   15a34:	9b07      	ldr	r3, [sp, #28]
   15a36:	441c      	add	r4, r3
   15a38:	4404      	add	r4, r0
			child = child->next;
   15a3a:	f8d8 8000 	ldr.w	r8, [r8]
   15a3e:	e7c5      	b.n	159cc <print_object.isra.2+0x224>
				fail = 1;
   15a40:	f04f 0a01 	mov.w	sl, #1
   15a44:	e7f9      	b.n	15a3a <print_object.isra.2+0x292>
			out = (char *)cJSON_malloc(len);
   15a46:	4b14      	ldr	r3, [pc, #80]	; (15a98 <print_object.isra.2+0x2f0>)
   15a48:	4620      	mov	r0, r4
   15a4a:	681b      	ldr	r3, [r3, #0]
   15a4c:	4798      	blx	r3
		if (!out)
   15a4e:	4604      	mov	r4, r0
   15a50:	2800      	cmp	r0, #0
   15a52:	d0c1      	beq.n	159d8 <print_object.isra.2+0x230>
		*out = '{';
   15a54:	237b      	movs	r3, #123	; 0x7b
   15a56:	7003      	strb	r3, [r0, #0]
		if (fmt)
   15a58:	b9c5      	cbnz	r5, 15a8c <print_object.isra.2+0x2e4>
		ptr = out + 1;
   15a5a:	f100 0801 	add.w	r8, r0, #1
		*ptr = 0;
   15a5e:	2300      	movs	r3, #0
   15a60:	f888 3000 	strb.w	r3, [r8]
   15a64:	9b03      	ldr	r3, [sp, #12]
   15a66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   15a6a:	9304      	str	r3, [sp, #16]
			if (fmt)
   15a6c:	b31d      	cbz	r5, 15ab6 <print_object.isra.2+0x30e>
   15a6e:	4643      	mov	r3, r8
   15a70:	e01a      	b.n	15aa8 <print_object.isra.2+0x300>
				if (names[i])
   15a72:	9a00      	ldr	r2, [sp, #0]
   15a74:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   15a78:	b100      	cbz	r0, 15a7c <print_object.isra.2+0x2d4>
					cJSON_free(names[i]);
   15a7a:	4798      	blx	r3
				if (entries[i])
   15a7c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   15a80:	f8d8 3000 	ldr.w	r3, [r8]
   15a84:	b100      	cbz	r0, 15a88 <print_object.isra.2+0x2e0>
					cJSON_free(entries[i]);
   15a86:	4798      	blx	r3
			for (i = 0; i < numentries; i++) {
   15a88:	3401      	adds	r4, #1
   15a8a:	e7a8      	b.n	159de <print_object.isra.2+0x236>
			*ptr++ = '\n';
   15a8c:	230a      	movs	r3, #10
   15a8e:	f100 0802 	add.w	r8, r0, #2
   15a92:	7043      	strb	r3, [r0, #1]
   15a94:	e7e3      	b.n	15a5e <print_object.isra.2+0x2b6>
   15a96:	bf00      	nop
   15a98:	2002d84c 	.word	0x2002d84c
   15a9c:	2002d848 	.word	0x2002d848
					*ptr++ = '\t';
   15aa0:	f04f 0209 	mov.w	r2, #9
   15aa4:	f803 2b01 	strb.w	r2, [r3], #1
				for (j = 0; j < depth; j++)
   15aa8:	9903      	ldr	r1, [sp, #12]
   15aaa:	eba3 0208 	sub.w	r2, r3, r8
   15aae:	4291      	cmp	r1, r2
   15ab0:	dcf6      	bgt.n	15aa0 <print_object.isra.2+0x2f8>
   15ab2:	9b04      	ldr	r3, [sp, #16]
   15ab4:	4498      	add	r8, r3
			tmplen = strlen(names[i]);
   15ab6:	9b02      	ldr	r3, [sp, #8]
   15ab8:	f853 0f04 	ldr.w	r0, [r3, #4]!
   15abc:	9302      	str	r3, [sp, #8]
   15abe:	f015 f8fd 	bl	2acbc <strlen>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15ac2:	9b02      	ldr	r3, [sp, #8]
   15ac4:	4681      	mov	r9, r0
   15ac6:	4602      	mov	r2, r0
   15ac8:	6819      	ldr	r1, [r3, #0]
   15aca:	4640      	mov	r0, r8
   15acc:	f7f8 f884 	bl	dbd8 <memcpy>
			*ptr++ = ':';
   15ad0:	223a      	movs	r2, #58	; 0x3a
			ptr += tmplen;
   15ad2:	eb08 0309 	add.w	r3, r8, r9
			*ptr++ = ':';
   15ad6:	f808 2009 	strb.w	r2, [r8, r9]
			if (fmt)
   15ada:	2d00      	cmp	r5, #0
   15adc:	d140      	bne.n	15b60 <print_object.isra.2+0x3b8>
			*ptr++ = ':';
   15ade:	f103 0901 	add.w	r9, r3, #1
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   15ae2:	9b01      	ldr	r3, [sp, #4]
   15ae4:	4648      	mov	r0, r9
   15ae6:	f853 1f04 	ldr.w	r1, [r3, #4]!
   15aea:	9301      	str	r3, [sp, #4]
   15aec:	f015 f888 	bl	2ac00 <strcpy>
			ptr += strlen(entries[i]);
   15af0:	9b01      	ldr	r3, [sp, #4]
   15af2:	6818      	ldr	r0, [r3, #0]
   15af4:	f015 f8e2 	bl	2acbc <strlen>
			if (i != numentries - 1)
   15af8:	1e7b      	subs	r3, r7, #1
   15afa:	459a      	cmp	sl, r3
				*ptr++ = ',';
   15afc:	bf18      	it	ne
   15afe:	232c      	movne	r3, #44	; 0x2c
			ptr += strlen(entries[i]);
   15b00:	eb09 0800 	add.w	r8, r9, r0
				*ptr++ = ',';
   15b04:	bf1c      	itt	ne
   15b06:	f809 3000 	strbne.w	r3, [r9, r0]
   15b0a:	f108 0801 	addne.w	r8, r8, #1
			if (fmt) {
   15b0e:	b125      	cbz	r5, 15b1a <print_object.isra.2+0x372>
				*ptr++ = '\n';
   15b10:	230a      	movs	r3, #10
   15b12:	f108 0801 	add.w	r8, r8, #1
   15b16:	f808 3c01 	strb.w	r3, [r8, #-1]
			*ptr = 0;
   15b1a:	2300      	movs	r3, #0
			cJSON_free(names[i]);
   15b1c:	9a02      	ldr	r2, [sp, #8]
   15b1e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 15b88 <print_object.isra.2+0x3e0>
			*ptr = 0;
   15b22:	f888 3000 	strb.w	r3, [r8]
			cJSON_free(names[i]);
   15b26:	6810      	ldr	r0, [r2, #0]
   15b28:	f8d9 3000 	ldr.w	r3, [r9]
   15b2c:	4798      	blx	r3
			cJSON_free(entries[i]);
   15b2e:	9a01      	ldr	r2, [sp, #4]
   15b30:	f8d9 3000 	ldr.w	r3, [r9]
   15b34:	6810      	ldr	r0, [r2, #0]
		for (i = 0; i < numentries; i++) {
   15b36:	f10a 0a01 	add.w	sl, sl, #1
			cJSON_free(entries[i]);
   15b3a:	4798      	blx	r3
		for (i = 0; i < numentries; i++) {
   15b3c:	4557      	cmp	r7, sl
   15b3e:	d195      	bne.n	15a6c <print_object.isra.2+0x2c4>
		cJSON_free(names);
   15b40:	f8d9 3000 	ldr.w	r3, [r9]
   15b44:	9800      	ldr	r0, [sp, #0]
   15b46:	4798      	blx	r3
		cJSON_free(entries);
   15b48:	f8d9 3000 	ldr.w	r3, [r9]
   15b4c:	4630      	mov	r0, r6
   15b4e:	4798      	blx	r3
		if (fmt)
   15b50:	b9bd      	cbnz	r5, 15b82 <print_object.isra.2+0x3da>
		*ptr++ = '}';
   15b52:	237d      	movs	r3, #125	; 0x7d
   15b54:	f888 3000 	strb.w	r3, [r8]
		*ptr++ = 0;
   15b58:	2300      	movs	r3, #0
   15b5a:	f888 3001 	strb.w	r3, [r8, #1]
   15b5e:	e64f      	b.n	15800 <print_object.isra.2+0x58>
				*ptr++ = '\t';
   15b60:	f04f 0209 	mov.w	r2, #9
   15b64:	f103 0902 	add.w	r9, r3, #2
   15b68:	705a      	strb	r2, [r3, #1]
   15b6a:	e7ba      	b.n	15ae2 <print_object.isra.2+0x33a>
				*ptr++ = '\t';
   15b6c:	f803 1b01 	strb.w	r1, [r3], #1
			for (i = 0; i < depth - 1; i++)
   15b70:	eba3 0208 	sub.w	r2, r3, r8
   15b74:	4593      	cmp	fp, r2
   15b76:	dcf9      	bgt.n	15b6c <print_object.isra.2+0x3c4>
   15b78:	f1bb 0f00 	cmp.w	fp, #0
   15b7c:	bfa8      	it	ge
   15b7e:	44d8      	addge	r8, fp
   15b80:	e7e7      	b.n	15b52 <print_object.isra.2+0x3aa>
		if (fmt)
   15b82:	4643      	mov	r3, r8
				*ptr++ = '\t';
   15b84:	2109      	movs	r1, #9
   15b86:	e7f3      	b.n	15b70 <print_object.isra.2+0x3c8>
   15b88:	2002d848 	.word	0x2002d848

00015b8c <cJSON_InitHooks>:
{
   15b8c:	b510      	push	{r4, lr}
   15b8e:	490a      	ldr	r1, [pc, #40]	; (15bb8 <cJSON_InitHooks+0x2c>)
   15b90:	4a0a      	ldr	r2, [pc, #40]	; (15bbc <cJSON_InitHooks+0x30>)
	if (!hooks) { /* Reset hooks */
   15b92:	b920      	cbnz	r0, 15b9e <cJSON_InitHooks+0x12>
		cJSON_malloc = malloc;
   15b94:	4b0a      	ldr	r3, [pc, #40]	; (15bc0 <cJSON_InitHooks+0x34>)
   15b96:	600b      	str	r3, [r1, #0]
		cJSON_free = free;
   15b98:	4b0a      	ldr	r3, [pc, #40]	; (15bc4 <cJSON_InitHooks+0x38>)
	cJSON_free = (hooks->free_fn) ? hooks->free_fn : free;
   15b9a:	6013      	str	r3, [r2, #0]
}
   15b9c:	bd10      	pop	{r4, pc}
	cJSON_malloc = (hooks->malloc_fn) ? hooks->malloc_fn : malloc;
   15b9e:	6803      	ldr	r3, [r0, #0]
   15ba0:	4c07      	ldr	r4, [pc, #28]	; (15bc0 <cJSON_InitHooks+0x34>)
   15ba2:	2b00      	cmp	r3, #0
   15ba4:	bf08      	it	eq
   15ba6:	4623      	moveq	r3, r4
   15ba8:	600b      	str	r3, [r1, #0]
	cJSON_free = (hooks->free_fn) ? hooks->free_fn : free;
   15baa:	6843      	ldr	r3, [r0, #4]
   15bac:	4905      	ldr	r1, [pc, #20]	; (15bc4 <cJSON_InitHooks+0x38>)
   15bae:	2b00      	cmp	r3, #0
   15bb0:	bf08      	it	eq
   15bb2:	460b      	moveq	r3, r1
   15bb4:	e7f1      	b.n	15b9a <cJSON_InitHooks+0xe>
   15bb6:	bf00      	nop
   15bb8:	2002d84c 	.word	0x2002d84c
   15bbc:	2002d848 	.word	0x2002d848
   15bc0:	0002a21d 	.word	0x0002a21d
   15bc4:	0002a22d 	.word	0x0002a22d

00015bc8 <cJSON_Delete>:
{
   15bc8:	b570      	push	{r4, r5, r6, lr}
   15bca:	4604      	mov	r4, r0
   15bcc:	4d0e      	ldr	r5, [pc, #56]	; (15c08 <cJSON_Delete+0x40>)
	while (c) {
   15bce:	b904      	cbnz	r4, 15bd2 <cJSON_Delete+0xa>
}
   15bd0:	bd70      	pop	{r4, r5, r6, pc}
		if (!(c->type & cJSON_IsReference) && c->child)
   15bd2:	68e3      	ldr	r3, [r4, #12]
		next = c->next;
   15bd4:	6826      	ldr	r6, [r4, #0]
		if (!(c->type & cJSON_IsReference) && c->child)
   15bd6:	05d9      	lsls	r1, r3, #23
   15bd8:	d403      	bmi.n	15be2 <cJSON_Delete+0x1a>
   15bda:	68a0      	ldr	r0, [r4, #8]
   15bdc:	b108      	cbz	r0, 15be2 <cJSON_Delete+0x1a>
			cJSON_Delete(c->child);
   15bde:	f7ff fff3 	bl	15bc8 <cJSON_Delete>
		if (!(c->type & cJSON_IsReference) && c->valuestring)
   15be2:	68e3      	ldr	r3, [r4, #12]
   15be4:	05da      	lsls	r2, r3, #23
   15be6:	d403      	bmi.n	15bf0 <cJSON_Delete+0x28>
   15be8:	6920      	ldr	r0, [r4, #16]
   15bea:	b108      	cbz	r0, 15bf0 <cJSON_Delete+0x28>
			cJSON_free(c->valuestring);
   15bec:	682b      	ldr	r3, [r5, #0]
   15bee:	4798      	blx	r3
		if (!(c->type & cJSON_StringIsConst) && c->string)
   15bf0:	68e3      	ldr	r3, [r4, #12]
   15bf2:	059b      	lsls	r3, r3, #22
   15bf4:	d403      	bmi.n	15bfe <cJSON_Delete+0x36>
   15bf6:	6a20      	ldr	r0, [r4, #32]
   15bf8:	b108      	cbz	r0, 15bfe <cJSON_Delete+0x36>
			cJSON_free(c->string);
   15bfa:	682b      	ldr	r3, [r5, #0]
   15bfc:	4798      	blx	r3
		cJSON_free(c);
   15bfe:	4620      	mov	r0, r4
   15c00:	682b      	ldr	r3, [r5, #0]
   15c02:	4798      	blx	r3
		c = next;
   15c04:	4634      	mov	r4, r6
   15c06:	e7e2      	b.n	15bce <cJSON_Delete+0x6>
   15c08:	2002d848 	.word	0x2002d848

00015c0c <cJSON_ParseWithOpts>:
{
   15c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15c10:	4605      	mov	r5, r0
   15c12:	460e      	mov	r6, r1
   15c14:	4691      	mov	r9, r2
	ep = 0;
   15c16:	2700      	movs	r7, #0
	cJSON *c = cJSON_New_Item();
   15c18:	f7ff fa52 	bl	150c0 <cJSON_New_Item>
	ep = 0;
   15c1c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 15c70 <cJSON_ParseWithOpts+0x64>
	if (!c)
   15c20:	4604      	mov	r4, r0
	ep = 0;
   15c22:	f8c8 7000 	str.w	r7, [r8]
	if (!c)
   15c26:	b160      	cbz	r0, 15c42 <cJSON_ParseWithOpts+0x36>
	end = parse_value(c, skip(value));
   15c28:	4628      	mov	r0, r5
   15c2a:	f018 ff7e 	bl	2eb2a <skip>
   15c2e:	4601      	mov	r1, r0
   15c30:	4620      	mov	r0, r4
   15c32:	f7ff fa55 	bl	150e0 <parse_value>
	if (!end) {
   15c36:	4605      	mov	r5, r0
   15c38:	b930      	cbnz	r0, 15c48 <cJSON_ParseWithOpts+0x3c>
		cJSON_Delete(c);
   15c3a:	4620      	mov	r0, r4
   15c3c:	f7ff ffc4 	bl	15bc8 <cJSON_Delete>
		return 0;
   15c40:	462c      	mov	r4, r5
}
   15c42:	4620      	mov	r0, r4
   15c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (require_null_terminated) {
   15c48:	f1b9 0f00 	cmp.w	r9, #0
   15c4c:	d00b      	beq.n	15c66 <cJSON_ParseWithOpts+0x5a>
		end = skip(end);
   15c4e:	f018 ff6c 	bl	2eb2a <skip>
		if (*end) {
   15c52:	7803      	ldrb	r3, [r0, #0]
		end = skip(end);
   15c54:	4605      	mov	r5, r0
		if (*end) {
   15c56:	b133      	cbz	r3, 15c66 <cJSON_ParseWithOpts+0x5a>
			cJSON_Delete(c);
   15c58:	4620      	mov	r0, r4
   15c5a:	f7ff ffb5 	bl	15bc8 <cJSON_Delete>
			return 0;
   15c5e:	463c      	mov	r4, r7
			ep = end;
   15c60:	f8c8 5000 	str.w	r5, [r8]
			return 0;
   15c64:	e7ed      	b.n	15c42 <cJSON_ParseWithOpts+0x36>
	if (return_parse_end)
   15c66:	2e00      	cmp	r6, #0
   15c68:	d0eb      	beq.n	15c42 <cJSON_ParseWithOpts+0x36>
		*return_parse_end = end;
   15c6a:	6035      	str	r5, [r6, #0]
   15c6c:	e7e9      	b.n	15c42 <cJSON_ParseWithOpts+0x36>
   15c6e:	bf00      	nop
   15c70:	20020bac 	.word	0x20020bac

00015c74 <cJSON_AddItemToObject>:
			c = c->next;
		suffix_object(c, item);
	}
}
void cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
   15c74:	b570      	push	{r4, r5, r6, lr}
   15c76:	4605      	mov	r5, r0
   15c78:	460e      	mov	r6, r1
	if (!item)
   15c7a:	4614      	mov	r4, r2
   15c7c:	b172      	cbz	r2, 15c9c <cJSON_AddItemToObject+0x28>
		return;
	if (item->string)
   15c7e:	6a10      	ldr	r0, [r2, #32]
   15c80:	b110      	cbz	r0, 15c88 <cJSON_AddItemToObject+0x14>
		cJSON_free(item->string);
   15c82:	4b07      	ldr	r3, [pc, #28]	; (15ca0 <cJSON_AddItemToObject+0x2c>)
   15c84:	681b      	ldr	r3, [r3, #0]
   15c86:	4798      	blx	r3
	item->string = cJSON_strdup(string);
   15c88:	4630      	mov	r0, r6
   15c8a:	f7ff fb5b 	bl	15344 <cJSON_strdup>
	cJSON_AddItemToArray(object, item);
   15c8e:	4621      	mov	r1, r4
	item->string = cJSON_strdup(string);
   15c90:	6220      	str	r0, [r4, #32]
	cJSON_AddItemToArray(object, item);
   15c92:	4628      	mov	r0, r5
}
   15c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cJSON_AddItemToArray(object, item);
   15c98:	f018 bfb6 	b.w	2ec08 <cJSON_AddItemToArray>
}
   15c9c:	bd70      	pop	{r4, r5, r6, pc}
   15c9e:	bf00      	nop
   15ca0:	2002d848 	.word	0x2002d848

00015ca4 <cJSON_Init>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }

/**@brief Initialize cJSON by assigning function hooks. */
void cJSON_Init(void)
{
	_cjson_hooks.malloc_fn = malloc_fn_hook;
   15ca4:	4803      	ldr	r0, [pc, #12]	; (15cb4 <cJSON_Init+0x10>)
   15ca6:	4b04      	ldr	r3, [pc, #16]	; (15cb8 <cJSON_Init+0x14>)
   15ca8:	6003      	str	r3, [r0, #0]
	_cjson_hooks.free_fn = free_fn_hook;
   15caa:	4b04      	ldr	r3, [pc, #16]	; (15cbc <cJSON_Init+0x18>)
   15cac:	6043      	str	r3, [r0, #4]

	cJSON_InitHooks(&_cjson_hooks);
   15cae:	f7ff bf6d 	b.w	15b8c <cJSON_InitHooks>
   15cb2:	bf00      	nop
   15cb4:	20020bb0 	.word	0x20020bb0
   15cb8:	0002ecd3 	.word	0x0002ecd3
   15cbc:	0002eccf 	.word	0x0002eccf

00015cc0 <thread_monitor_entry_get>:
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   15cc0:	2200      	movs	r2, #0
   15cc2:	4b0e      	ldr	r3, [pc, #56]	; (15cfc <thread_monitor_entry_get+0x3c>)
{
   15cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
		entry_age = rpc_event_cnt - entry->cnt;
   15cc6:	681c      	ldr	r4, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   15cc8:	4b0d      	ldr	r3, [pc, #52]	; (15d00 <thread_monitor_entry_get+0x40>)
	int entry_age, oldest_entry_age = 0;
   15cca:	4616      	mov	r6, r2
   15ccc:	461f      	mov	r7, r3
		if (entry->id == id) {
   15cce:	58bd      	ldr	r5, [r7, r2]
   15cd0:	18b9      	adds	r1, r7, r2
   15cd2:	4285      	cmp	r5, r0
   15cd4:	d00d      	beq.n	15cf2 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   15cd6:	b175      	cbz	r5, 15cf6 <thread_monitor_entry_get+0x36>
		entry_age = rpc_event_cnt - entry->cnt;
   15cd8:	684d      	ldr	r5, [r1, #4]
   15cda:	3208      	adds	r2, #8
   15cdc:	1b65      	subs	r5, r4, r5
		if (entry_age > oldest_entry_age) {
   15cde:	42b5      	cmp	r5, r6
   15ce0:	bfc4      	itt	gt
   15ce2:	462e      	movgt	r6, r5
   15ce4:	460b      	movgt	r3, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   15ce6:	2a50      	cmp	r2, #80	; 0x50
   15ce8:	d1f1      	bne.n	15cce <thread_monitor_entry_get+0xe>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   15cea:	4619      	mov	r1, r3
	new_entry->cnt = rpc_event_cnt - 1;
   15cec:	3c01      	subs	r4, #1
	new_entry->id = id;
   15cee:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   15cf0:	605c      	str	r4, [r3, #4]
}
   15cf2:	4608      	mov	r0, r1
   15cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15cf6:	460b      	mov	r3, r1
   15cf8:	e7f7      	b.n	15cea <thread_monitor_entry_get+0x2a>
   15cfa:	bf00      	nop
   15cfc:	20020bb8 	.word	0x20020bb8
   15d00:	20020bc4 	.word	0x20020bc4

00015d04 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   15d04:	4668      	mov	r0, sp
   15d06:	f020 0107 	bic.w	r1, r0, #7
   15d0a:	468d      	mov	sp, r1
   15d0c:	b519      	push	{r0, r3, r4, lr}
   15d0e:	f018 fcc5 	bl	2e69c <z_arch_isr_direct_header>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   15d12:	4b0d      	ldr	r3, [pc, #52]	; (15d48 <rpc_proxy_irq_handler+0x44>)
   15d14:	e8d3 2fef 	ldaex	r2, [r3]
   15d18:	3201      	adds	r2, #1
   15d1a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   15d1e:	2900      	cmp	r1, #0
   15d20:	d1f8      	bne.n	15d14 <rpc_proxy_irq_handler+0x10>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   15d22:	f00f f903 	bl	24f2c <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   15d26:	4b09      	ldr	r3, [pc, #36]	; (15d4c <rpc_proxy_irq_handler+0x48>)
   15d28:	681c      	ldr	r4, [r3, #0]
   15d2a:	b124      	cbz	r4, 15d36 <rpc_proxy_irq_handler+0x32>
   15d2c:	1d20      	adds	r0, r4, #4
   15d2e:	f012 fdc9 	bl	288c4 <z_impl_k_sem_give>
   15d32:	6824      	ldr	r4, [r4, #0]
   15d34:	e7f9      	b.n	15d2a <rpc_proxy_irq_handler+0x26>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   15d36:	f7fe f811 	bl	13d5c <_arch_isr_direct_pm>

#ifdef CONFIG_TRACING
	z_sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		_IntExit();
   15d3a:	f7fd fd51 	bl	137e0 <_IntExit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   15d3e:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   15d42:	4685      	mov	sp, r0
   15d44:	4770      	bx	lr
   15d46:	bf00      	nop
   15d48:	20020bb8 	.word	0x20020bb8
   15d4c:	20020bbc 	.word	0x20020bbc

00015d50 <bsd_os_timedwait>:
{
   15d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15d54:	460d      	mov	r5, r1
   15d56:	b089      	sub	sp, #36	; 0x24
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   15d58:	f01a fe39 	bl	309ce <z_impl_k_uptime_get>
	if (*timeout == 0) {
   15d5c:	682b      	ldr	r3, [r5, #0]
   15d5e:	4606      	mov	r6, r0
   15d60:	2b00      	cmp	r3, #0
   15d62:	460f      	mov	r7, r1
   15d64:	d103      	bne.n	15d6e <bsd_os_timedwait+0x1e>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   15d66:	f012 fbef 	bl	28548 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   15d6a:	203c      	movs	r0, #60	; 0x3c
   15d6c:	e06c      	b.n	15e48 <bsd_os_timedwait+0xf8>
		*timeout = K_FOREVER;
   15d6e:	bfb8      	it	lt
   15d70:	f04f 33ff 	movlt.w	r3, #4294967295
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   15d74:	f04f 0201 	mov.w	r2, #1
   15d78:	bfb8      	it	lt
   15d7a:	602b      	strlt	r3, [r5, #0]
   15d7c:	2100      	movs	r1, #0
   15d7e:	a802      	add	r0, sp, #8
   15d80:	f012 fd6a 	bl	28858 <z_impl_k_sem_init>
   15d84:	f10d 0804 	add.w	r8, sp, #4
   15d88:	f04f 0320 	mov.w	r3, #32
   15d8c:	f3ef 8911 	mrs	r9, BASEPRI
   15d90:	f383 8811 	msr	BASEPRI, r3
   15d94:	f3bf 8f6f 	isb	sy
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   15d98:	f012 fd58 	bl	2884c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   15d9c:	f7ff ff90 	bl	15cc0 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   15da0:	4c32      	ldr	r4, [pc, #200]	; (15e6c <bsd_os_timedwait+0x11c>)
   15da2:	6843      	ldr	r3, [r0, #4]
   15da4:	6822      	ldr	r2, [r4, #0]
   15da6:	4293      	cmp	r3, r2
   15da8:	f04f 0300 	mov.w	r3, #0
   15dac:	d108      	bne.n	15dc0 <bsd_os_timedwait+0x70>
	parent->next = child;
   15dae:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   15db0:	4b2f      	ldr	r3, [pc, #188]	; (15e70 <bsd_os_timedwait+0x120>)
   15db2:	685a      	ldr	r2, [r3, #4]
   15db4:	2a00      	cmp	r2, #0
   15db6:	d14a      	bne.n	15e4e <bsd_os_timedwait+0xfe>
	list->head = node;
   15db8:	e9c3 8800 	strd	r8, r8, [r3]
		allow_to_sleep = true;
   15dbc:	2301      	movs	r3, #1
   15dbe:	e000      	b.n	15dc2 <bsd_os_timedwait+0x72>
	entry->cnt = rpc_event_cnt;
   15dc0:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   15dc2:	f389 8811 	msr	BASEPRI, r9
   15dc6:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   15dca:	2b00      	cmp	r3, #0
   15dcc:	d03b      	beq.n	15e46 <bsd_os_timedwait+0xf6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   15dce:	6829      	ldr	r1, [r5, #0]
   15dd0:	a802      	add	r0, sp, #8
   15dd2:	f012 fdbf 	bl	28954 <z_impl_k_sem_take>
	__asm__ volatile(
   15dd6:	f04f 0320 	mov.w	r3, #32
   15dda:	f3ef 8911 	mrs	r9, BASEPRI
   15dde:	f383 8811 	msr	BASEPRI, r3
   15de2:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15de6:	2100      	movs	r1, #0
   15de8:	4b21      	ldr	r3, [pc, #132]	; (15e70 <bsd_os_timedwait+0x120>)
   15dea:	681a      	ldr	r2, [r3, #0]
   15dec:	b15a      	cbz	r2, 15e06 <bsd_os_timedwait+0xb6>
   15dee:	4542      	cmp	r2, r8
   15df0:	d138      	bne.n	15e64 <bsd_os_timedwait+0x114>
   15df2:	9801      	ldr	r0, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   15df4:	2900      	cmp	r1, #0
   15df6:	d12f      	bne.n	15e58 <bsd_os_timedwait+0x108>
   15df8:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   15dfa:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   15dfc:	4291      	cmp	r1, r2
   15dfe:	d100      	bne.n	15e02 <bsd_os_timedwait+0xb2>
	list->tail = node;
   15e00:	6058      	str	r0, [r3, #4]
	parent->next = child;
   15e02:	2300      	movs	r3, #0
   15e04:	9301      	str	r3, [sp, #4]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   15e06:	f012 fd21 	bl	2884c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   15e0a:	f7ff ff59 	bl	15cc0 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   15e0e:	6823      	ldr	r3, [r4, #0]
   15e10:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   15e12:	f389 8811 	msr	BASEPRI, r9
   15e16:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   15e1a:	682c      	ldr	r4, [r5, #0]
   15e1c:	1c63      	adds	r3, r4, #1
   15e1e:	d012      	beq.n	15e46 <bsd_os_timedwait+0xf6>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   15e20:	f01a fdd5 	bl	309ce <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   15e24:	1b86      	subs	r6, r0, r6
   15e26:	eb61 0707 	sbc.w	r7, r1, r7
   15e2a:	17e3      	asrs	r3, r4, #31
   15e2c:	1ba2      	subs	r2, r4, r6
   15e2e:	eb63 0307 	sbc.w	r3, r3, r7
   15e32:	4619      	mov	r1, r3
	*timeout = remaining > 0 ? remaining : 0;
   15e34:	2a00      	cmp	r2, #0
   15e36:	f171 0300 	sbcs.w	r3, r1, #0
	remaining = *timeout - (k_uptime_get() - start);
   15e3a:	4610      	mov	r0, r2
	*timeout = remaining > 0 ? remaining : 0;
   15e3c:	bfb8      	it	lt
   15e3e:	2000      	movlt	r0, #0
   15e40:	6028      	str	r0, [r5, #0]
	if (*timeout == 0) {
   15e42:	2800      	cmp	r0, #0
   15e44:	d091      	beq.n	15d6a <bsd_os_timedwait+0x1a>
	return 0;
   15e46:	2000      	movs	r0, #0
}
   15e48:	b009      	add	sp, #36	; 0x24
   15e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15e4e:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   15e52:	f8c3 8004 	str.w	r8, [r3, #4]
   15e56:	e7b1      	b.n	15dbc <bsd_os_timedwait+0x6c>
	parent->next = child;
   15e58:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   15e5a:	6858      	ldr	r0, [r3, #4]
   15e5c:	4290      	cmp	r0, r2
	list->tail = node;
   15e5e:	bf08      	it	eq
   15e60:	6059      	streq	r1, [r3, #4]
   15e62:	e7ce      	b.n	15e02 <bsd_os_timedwait+0xb2>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15e64:	4611      	mov	r1, r2
   15e66:	6812      	ldr	r2, [r2, #0]
   15e68:	e7c0      	b.n	15dec <bsd_os_timedwait+0x9c>
   15e6a:	bf00      	nop
   15e6c:	20020bb8 	.word	0x20020bb8
   15e70:	20020bbc 	.word	0x20020bbc

00015e74 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   15e78:	4b01      	ldr	r3, [pc, #4]	; (15e80 <bsd_os_application_irq_set+0xc>)
   15e7a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   15e7e:	4770      	bx	lr
   15e80:	e000e100 	.word	0xe000e100

00015e84 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   15e88:	4b01      	ldr	r3, [pc, #4]	; (15e90 <bsd_os_application_irq_clear+0xc>)
   15e8a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   15e8e:	4770      	bx	lr
   15e90:	e000e100 	.word	0xe000e100

00015e94 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15e94:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   15e98:	4b01      	ldr	r3, [pc, #4]	; (15ea0 <bsd_os_trace_irq_set+0xc>)
   15e9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   15e9e:	4770      	bx	lr
   15ea0:	e000e100 	.word	0xe000e100

00015ea4 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15ea4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   15ea8:	4b01      	ldr	r3, [pc, #4]	; (15eb0 <bsd_os_trace_irq_clear+0xc>)
   15eaa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   15eae:	4770      	bx	lr
   15eb0:	e000e100 	.word	0xe000e100

00015eb4 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   15eb4:	b508      	push	{r3, lr}
	list->head = NULL;
   15eb6:	2300      	movs	r3, #0
   15eb8:	4a07      	ldr	r2, [pc, #28]	; (15ed8 <bsd_os_init+0x24>)
	list->tail = NULL;
   15eba:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15ebe:	4a07      	ldr	r2, [pc, #28]	; (15edc <bsd_os_init+0x28>)
   15ec0:	e8d2 1fef 	ldaex	r1, [r2]
   15ec4:	e8c2 3fe0 	stlex	r0, r3, [r2]
   15ec8:	2800      	cmp	r0, #0
   15eca:	d1f9      	bne.n	15ec0 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   15ecc:	f018 ffe5 	bl	2ee9a <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   15ed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   15ed4:	f018 bfd6 	b.w	2ee84 <trace_task_create>
   15ed8:	20020bbc 	.word	0x20020bbc
   15edc:	20020bb8 	.word	0x20020bb8

00015ee0 <nrf91_socket_iface_init>:
	struct net_if *iface;
} nrf91_socket_iface_data;

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;
   15ee0:	4b03      	ldr	r3, [pc, #12]	; (15ef0 <nrf91_socket_iface_init+0x10>)

	iface->if_dev->offload = &nrf91_net_offload;
   15ee2:	4a04      	ldr	r2, [pc, #16]	; (15ef4 <nrf91_socket_iface_init+0x14>)
	nrf91_socket_iface_data.iface = iface;
   15ee4:	6018      	str	r0, [r3, #0]
	iface->if_dev->offload = &nrf91_net_offload;
   15ee6:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   15ee8:	4803      	ldr	r0, [pc, #12]	; (15ef8 <nrf91_socket_iface_init+0x18>)
	iface->if_dev->offload = &nrf91_net_offload;
   15eea:	619a      	str	r2, [r3, #24]
	socket_offload_register(&nrf91_socket_offload_ops);
   15eec:	f7fd b91c 	b.w	13128 <socket_offload_register>
   15ef0:	20020c38 	.word	0x20020c38
   15ef4:	20020c14 	.word	0x20020c14
   15ef8:	00030fb0 	.word	0x00030fb0

00015efc <z_to_nrf_optname>:
	switch (z_in_level) {
   15efc:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   15f00:	d00d      	beq.n	15f1e <z_to_nrf_optname+0x22>
   15f02:	f240 2302 	movw	r3, #514	; 0x202
   15f06:	4298      	cmp	r0, r3
   15f08:	d02a      	beq.n	15f60 <z_to_nrf_optname+0x64>
   15f0a:	2801      	cmp	r0, #1
   15f0c:	d12a      	bne.n	15f64 <z_to_nrf_optname+0x68>
		switch (z_in_optname) {
   15f0e:	2914      	cmp	r1, #20
   15f10:	d024      	beq.n	15f5c <z_to_nrf_optname+0x60>
   15f12:	2919      	cmp	r1, #25
   15f14:	d022      	beq.n	15f5c <z_to_nrf_optname+0x60>
   15f16:	2904      	cmp	r1, #4
   15f18:	d124      	bne.n	15f64 <z_to_nrf_optname+0x68>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   15f1a:	2304      	movs	r3, #4
   15f1c:	e013      	b.n	15f46 <z_to_nrf_optname+0x4a>
		switch (z_in_optname) {
   15f1e:	3901      	subs	r1, #1
   15f20:	2905      	cmp	r1, #5
   15f22:	d81f      	bhi.n	15f64 <z_to_nrf_optname+0x68>
   15f24:	a301      	add	r3, pc, #4	; (adr r3, 15f2c <z_to_nrf_optname+0x30>)
   15f26:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   15f2a:	bf00      	nop
   15f2c:	00015f45 	.word	0x00015f45
   15f30:	00015f4d 	.word	0x00015f4d
   15f34:	00015f51 	.word	0x00015f51
   15f38:	00015f55 	.word	0x00015f55
   15f3c:	00015f1b 	.word	0x00015f1b
   15f40:	00015f59 	.word	0x00015f59
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   15f44:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_HOSTNAME;
   15f46:	6013      	str	r3, [r2, #0]
	int retval = 0;
   15f48:	2000      	movs	r0, #0
   15f4a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_HOSTNAME;
   15f4c:	2305      	movs	r3, #5
   15f4e:	e7fa      	b.n	15f46 <z_to_nrf_optname+0x4a>
			*nrf_out_optname = NRF_SO_CIPHERSUITE_LIST;
   15f50:	2306      	movs	r3, #6
   15f52:	e7f8      	b.n	15f46 <z_to_nrf_optname+0x4a>
			*nrf_out_optname = NRF_SO_CIPHER_IN_USE;
   15f54:	2307      	movs	r3, #7
   15f56:	e7f6      	b.n	15f46 <z_to_nrf_optname+0x4a>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   15f58:	2301      	movs	r3, #1
   15f5a:	e7f4      	b.n	15f46 <z_to_nrf_optname+0x4a>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   15f5c:	6011      	str	r1, [r2, #0]
   15f5e:	e7f3      	b.n	15f48 <z_to_nrf_optname+0x4c>
		switch (z_in_optname) {
   15f60:	2901      	cmp	r1, #1
   15f62:	d0f9      	beq.n	15f58 <z_to_nrf_optname+0x5c>
		retval = -1;
   15f64:	f04f 30ff 	mov.w	r0, #4294967295
}
   15f68:	4770      	bx	lr
   15f6a:	bf00      	nop

00015f6c <dk_set_leds_state.part.1>:
int dk_set_leds(u32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(u32_t leds_on_mask, u32_t leds_off_mask)
   15f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15f70:	4607      	mov	r7, r0
   15f72:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   15f74:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_write(gpio_dev, led_pins[i], val);
   15f76:	4e0d      	ldr	r6, [pc, #52]	; (15fac <dk_set_leds_state.part.1+0x40>)
   15f78:	4d0d      	ldr	r5, [pc, #52]	; (15fb0 <dk_set_leds_state.part.1+0x44>)
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   15f7a:	fa27 f304 	lsr.w	r3, r7, r4
   15f7e:	fa28 f204 	lsr.w	r2, r8, r4
   15f82:	431a      	orrs	r2, r3
   15f84:	07d2      	lsls	r2, r2, #31
   15f86:	d405      	bmi.n	15f94 <dk_set_leds_state.part.1+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   15f88:	3401      	adds	r4, #1
   15f8a:	2c04      	cmp	r4, #4
   15f8c:	d1f5      	bne.n	15f7a <dk_set_leds_state.part.1+0xe>
				return err;
			}
		}
	}

	return 0;
   15f8e:	2000      	movs	r0, #0
}
   15f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			int err = gpio_pin_write(gpio_dev, led_pins[i], val);
   15f94:	6830      	ldr	r0, [r6, #0]
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
   15f96:	f003 0301 	and.w	r3, r3, #1
   15f9a:	6842      	ldr	r2, [r0, #4]
   15f9c:	2100      	movs	r1, #0
   15f9e:	f8d2 9004 	ldr.w	r9, [r2, #4]
   15fa2:	5d2a      	ldrb	r2, [r5, r4]
   15fa4:	47c8      	blx	r9
			if (err) {
   15fa6:	2800      	cmp	r0, #0
   15fa8:	d0ee      	beq.n	15f88 <dk_set_leds_state.part.1+0x1c>
   15faa:	e7f1      	b.n	15f90 <dk_set_leds_state.part.1+0x24>
   15fac:	20020c6c 	.word	0x20020c6c
   15fb0:	00035449 	.word	0x00035449

00015fb4 <button_pressed>:
{
   15fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   15fb6:	f04f 0320 	mov.w	r3, #32
   15fba:	f3ef 8511 	mrs	r5, BASEPRI
   15fbe:	f383 8811 	msr	BASEPRI, r3
   15fc2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   15fc6:	4828      	ldr	r0, [pc, #160]	; (16068 <button_pressed+0xb4>)
   15fc8:	f012 fd96 	bl	28af8 <z_spin_lock_valid>
   15fcc:	b960      	cbnz	r0, 15fe8 <button_pressed+0x34>
   15fce:	4927      	ldr	r1, [pc, #156]	; (1606c <button_pressed+0xb8>)
   15fd0:	234e      	movs	r3, #78	; 0x4e
   15fd2:	4a27      	ldr	r2, [pc, #156]	; (16070 <button_pressed+0xbc>)
   15fd4:	4827      	ldr	r0, [pc, #156]	; (16074 <button_pressed+0xc0>)
   15fd6:	f018 fb2c 	bl	2e632 <printk>
   15fda:	4827      	ldr	r0, [pc, #156]	; (16078 <button_pressed+0xc4>)
   15fdc:	f018 fb29 	bl	2e632 <printk>
   15fe0:	214e      	movs	r1, #78	; 0x4e
   15fe2:	4823      	ldr	r0, [pc, #140]	; (16070 <button_pressed+0xbc>)
   15fe4:	f018 fb32 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   15fe8:	481f      	ldr	r0, [pc, #124]	; (16068 <button_pressed+0xb4>)
   15fea:	f012 fda3 	bl	28b34 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   15fee:	2400      	movs	r4, #0
			err = gpio_pin_disable_callback(gpio_dev,
   15ff0:	4e22      	ldr	r6, [pc, #136]	; (1607c <button_pressed+0xc8>)
			  button_pins[i]);
   15ff2:	4f23      	ldr	r7, [pc, #140]	; (16080 <button_pressed+0xcc>)
			err = gpio_pin_disable_callback(gpio_dev,
   15ff4:	6830      	ldr	r0, [r6, #0]
   15ff6:	5de2      	ldrb	r2, [r4, r7]
					      int access_op, u32_t pin)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->disable_callback == NULL) {
   15ff8:	6843      	ldr	r3, [r0, #4]
   15ffa:	695b      	ldr	r3, [r3, #20]
   15ffc:	b32b      	cbz	r3, 1604a <button_pressed+0x96>
		return -ENOTSUP;
	}

	return api->disable_callback(port, access_op, pin);
   15ffe:	2100      	movs	r1, #0
   16000:	4798      	blx	r3
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   16002:	3401      	adds	r4, #1
   16004:	2c04      	cmp	r4, #4
   16006:	d001      	beq.n	1600c <button_pressed+0x58>
   16008:	2800      	cmp	r0, #0
   1600a:	d0f3      	beq.n	15ff4 <button_pressed+0x40>
	switch (state) {
   1600c:	4b1d      	ldr	r3, [pc, #116]	; (16084 <button_pressed+0xd0>)
   1600e:	781a      	ldrb	r2, [r3, #0]
   16010:	b9f2      	cbnz	r2, 16050 <button_pressed+0x9c>
		state = STATE_SCANNING;
   16012:	2201      	movs	r2, #1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16014:	491c      	ldr	r1, [pc, #112]	; (16088 <button_pressed+0xd4>)
   16016:	481d      	ldr	r0, [pc, #116]	; (1608c <button_pressed+0xd8>)
   16018:	701a      	strb	r2, [r3, #0]
   1601a:	f012 ff19 	bl	28e50 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1601e:	4812      	ldr	r0, [pc, #72]	; (16068 <button_pressed+0xb4>)
   16020:	f012 fd78 	bl	28b14 <z_spin_unlock_valid>
   16024:	b960      	cbnz	r0, 16040 <button_pressed+0x8c>
   16026:	491a      	ldr	r1, [pc, #104]	; (16090 <button_pressed+0xdc>)
   16028:	2361      	movs	r3, #97	; 0x61
   1602a:	4a11      	ldr	r2, [pc, #68]	; (16070 <button_pressed+0xbc>)
   1602c:	4811      	ldr	r0, [pc, #68]	; (16074 <button_pressed+0xc0>)
   1602e:	f018 fb00 	bl	2e632 <printk>
   16032:	4818      	ldr	r0, [pc, #96]	; (16094 <button_pressed+0xe0>)
   16034:	f018 fafd 	bl	2e632 <printk>
   16038:	2161      	movs	r1, #97	; 0x61
   1603a:	480d      	ldr	r0, [pc, #52]	; (16070 <button_pressed+0xbc>)
   1603c:	f018 fb06 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   16040:	f385 8811 	msr	BASEPRI, r5
   16044:	f3bf 8f6f 	isb	sy
}
   16048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
   1604a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1604e:	e7d8      	b.n	16002 <button_pressed+0x4e>
		__ASSERT_NO_MSG(false);
   16050:	23db      	movs	r3, #219	; 0xdb
   16052:	4a11      	ldr	r2, [pc, #68]	; (16098 <button_pressed+0xe4>)
   16054:	4911      	ldr	r1, [pc, #68]	; (1609c <button_pressed+0xe8>)
   16056:	4807      	ldr	r0, [pc, #28]	; (16074 <button_pressed+0xc0>)
   16058:	f018 faeb 	bl	2e632 <printk>
   1605c:	21db      	movs	r1, #219	; 0xdb
   1605e:	480e      	ldr	r0, [pc, #56]	; (16098 <button_pressed+0xe4>)
   16060:	f018 faf4 	bl	2e64c <assert_post_action>
		break;
   16064:	e7db      	b.n	1601e <button_pressed+0x6a>
   16066:	bf00      	nop
   16068:	20020c78 	.word	0x20020c78
   1606c:	0003494a 	.word	0x0003494a
   16070:	0003491e 	.word	0x0003491e
   16074:	0003452c 	.word	0x0003452c
   16078:	0003495f 	.word	0x0003495f
   1607c:	20020c6c 	.word	0x20020c6c
   16080:	00035401 	.word	0x00035401
   16084:	20027917 	.word	0x20027917
   16088:	20020c40 	.word	0x20020c40
   1608c:	20027778 	.word	0x20027778
   16090:	00034974 	.word	0x00034974
   16094:	0003498b 	.word	0x0003498b
   16098:	00035405 	.word	0x00035405
   1609c:	00035e56 	.word	0x00035e56

000160a0 <buttons_scan_fn>:
{
   160a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	u32_t ret = 0;
   160a4:	2400      	movs	r4, #0
		if (gpio_pin_read(gpio_dev, button_pins[i], &val)) {
   160a6:	f8df 815c 	ldr.w	r8, [pc, #348]	; 16204 <buttons_scan_fn+0x164>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   160aa:	4625      	mov	r5, r4
   160ac:	4647      	mov	r7, r8
		if (gpio_pin_read(gpio_dev, button_pins[i], &val)) {
   160ae:	4e44      	ldr	r6, [pc, #272]	; (161c0 <buttons_scan_fn+0x120>)
   160b0:	f8d8 0000 	ldr.w	r0, [r8]
	return api->read(port, access_op, pin, value);
   160b4:	5d72      	ldrb	r2, [r6, r5]
   160b6:	6843      	ldr	r3, [r0, #4]
   160b8:	2100      	movs	r1, #0
   160ba:	f8d3 9008 	ldr.w	r9, [r3, #8]
   160be:	ab01      	add	r3, sp, #4
   160c0:	47c8      	blx	r9
   160c2:	b1f0      	cbz	r0, 16102 <buttons_scan_fn+0x62>
			return 0;
   160c4:	2400      	movs	r4, #0
   160c6:	4b3f      	ldr	r3, [pc, #252]	; (161c4 <buttons_scan_fn+0x124>)
   160c8:	e8d3 2fef 	ldaex	r2, [r3]
   160cc:	e8c3 4fe1 	stlex	r1, r4, [r3]
   160d0:	2900      	cmp	r1, #0
   160d2:	d1f9      	bne.n	160c8 <buttons_scan_fn+0x28>
	if (!initial_run) {
   160d4:	4b3c      	ldr	r3, [pc, #240]	; (161c8 <buttons_scan_fn+0x128>)
   160d6:	4d3d      	ldr	r5, [pc, #244]	; (161cc <buttons_scan_fn+0x12c>)
   160d8:	781a      	ldrb	r2, [r3, #0]
   160da:	b9da      	cbnz	r2, 16114 <buttons_scan_fn+0x74>
		if (button_handler_cb != NULL) {
   160dc:	4b3c      	ldr	r3, [pc, #240]	; (161d0 <buttons_scan_fn+0x130>)
   160de:	681b      	ldr	r3, [r3, #0]
   160e0:	b12b      	cbz	r3, 160ee <buttons_scan_fn+0x4e>
			if (button_scan != last_button_scan) {
   160e2:	6829      	ldr	r1, [r5, #0]
   160e4:	42a1      	cmp	r1, r4
   160e6:	d002      	beq.n	160ee <buttons_scan_fn+0x4e>
				button_handler_cb(button_scan, has_changed);
   160e8:	4061      	eors	r1, r4
   160ea:	4620      	mov	r0, r4
   160ec:	4798      	blx	r3
	last_button_scan = button_scan;
   160ee:	602c      	str	r4, [r5, #0]
	if (button_scan != 0) {
   160f0:	b19c      	cbz	r4, 1611a <buttons_scan_fn+0x7a>
   160f2:	220a      	movs	r2, #10
   160f4:	4937      	ldr	r1, [pc, #220]	; (161d4 <buttons_scan_fn+0x134>)
   160f6:	4838      	ldr	r0, [pc, #224]	; (161d8 <buttons_scan_fn+0x138>)
   160f8:	f012 feaa 	bl	28e50 <k_delayed_work_submit_to_queue>
}
   160fc:	b003      	add	sp, #12
   160fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   16102:	9b01      	ldr	r3, [sp, #4]
   16104:	b913      	cbnz	r3, 1610c <buttons_scan_fn+0x6c>
			ret |= 1U << i;
   16106:	2301      	movs	r3, #1
   16108:	40ab      	lsls	r3, r5
   1610a:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1610c:	3501      	adds	r5, #1
   1610e:	2d04      	cmp	r5, #4
   16110:	d1ce      	bne.n	160b0 <buttons_scan_fn+0x10>
   16112:	e7d8      	b.n	160c6 <buttons_scan_fn+0x26>
		initial_run = false;
   16114:	2200      	movs	r2, #0
   16116:	701a      	strb	r2, [r3, #0]
   16118:	e7e9      	b.n	160ee <buttons_scan_fn+0x4e>
	__asm__ volatile(
   1611a:	f04f 0320 	mov.w	r3, #32
   1611e:	f3ef 8511 	mrs	r5, BASEPRI
   16122:	f383 8811 	msr	BASEPRI, r3
   16126:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1612a:	482c      	ldr	r0, [pc, #176]	; (161dc <buttons_scan_fn+0x13c>)
   1612c:	f012 fce4 	bl	28af8 <z_spin_lock_valid>
   16130:	b960      	cbnz	r0, 1614c <buttons_scan_fn+0xac>
   16132:	492b      	ldr	r1, [pc, #172]	; (161e0 <buttons_scan_fn+0x140>)
   16134:	234e      	movs	r3, #78	; 0x4e
   16136:	4a2b      	ldr	r2, [pc, #172]	; (161e4 <buttons_scan_fn+0x144>)
   16138:	482b      	ldr	r0, [pc, #172]	; (161e8 <buttons_scan_fn+0x148>)
   1613a:	f018 fa7a 	bl	2e632 <printk>
   1613e:	482b      	ldr	r0, [pc, #172]	; (161ec <buttons_scan_fn+0x14c>)
   16140:	f018 fa77 	bl	2e632 <printk>
   16144:	214e      	movs	r1, #78	; 0x4e
   16146:	4827      	ldr	r0, [pc, #156]	; (161e4 <buttons_scan_fn+0x144>)
   16148:	f018 fa80 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   1614c:	4823      	ldr	r0, [pc, #140]	; (161dc <buttons_scan_fn+0x13c>)
   1614e:	f012 fcf1 	bl	28b34 <z_spin_lock_set_owner>
		switch (state) {
   16152:	4b27      	ldr	r3, [pc, #156]	; (161f0 <buttons_scan_fn+0x150>)
   16154:	781a      	ldrb	r2, [r3, #0]
   16156:	2a01      	cmp	r2, #1
   16158:	d126      	bne.n	161a8 <buttons_scan_fn+0x108>
			state = STATE_WAITING;
   1615a:	2400      	movs	r4, #0
   1615c:	701c      	strb	r4, [r3, #0]
			err = gpio_pin_enable_callback(gpio_dev,
   1615e:	6838      	ldr	r0, [r7, #0]
   16160:	5d32      	ldrb	r2, [r6, r4]
	if (api->enable_callback == NULL) {
   16162:	6843      	ldr	r3, [r0, #4]
   16164:	691b      	ldr	r3, [r3, #16]
   16166:	b1e3      	cbz	r3, 161a2 <buttons_scan_fn+0x102>
	return api->enable_callback(port, access_op, pin);
   16168:	2100      	movs	r1, #0
   1616a:	4798      	blx	r3
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1616c:	3401      	adds	r4, #1
   1616e:	2c04      	cmp	r4, #4
   16170:	d001      	beq.n	16176 <buttons_scan_fn+0xd6>
   16172:	2800      	cmp	r0, #0
   16174:	d0f3      	beq.n	1615e <buttons_scan_fn+0xbe>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   16176:	4819      	ldr	r0, [pc, #100]	; (161dc <buttons_scan_fn+0x13c>)
   16178:	f012 fccc 	bl	28b14 <z_spin_unlock_valid>
   1617c:	b960      	cbnz	r0, 16198 <buttons_scan_fn+0xf8>
   1617e:	491d      	ldr	r1, [pc, #116]	; (161f4 <buttons_scan_fn+0x154>)
   16180:	2361      	movs	r3, #97	; 0x61
   16182:	4a18      	ldr	r2, [pc, #96]	; (161e4 <buttons_scan_fn+0x144>)
   16184:	4818      	ldr	r0, [pc, #96]	; (161e8 <buttons_scan_fn+0x148>)
   16186:	f018 fa54 	bl	2e632 <printk>
   1618a:	481b      	ldr	r0, [pc, #108]	; (161f8 <buttons_scan_fn+0x158>)
   1618c:	f018 fa51 	bl	2e632 <printk>
   16190:	2161      	movs	r1, #97	; 0x61
   16192:	4814      	ldr	r0, [pc, #80]	; (161e4 <buttons_scan_fn+0x144>)
   16194:	f018 fa5a 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   16198:	f385 8811 	msr	BASEPRI, r5
   1619c:	f3bf 8f6f 	isb	sy
}
   161a0:	e7ac      	b.n	160fc <buttons_scan_fn+0x5c>
		return -ENOTSUP;
   161a2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   161a6:	e7e1      	b.n	1616c <buttons_scan_fn+0xcc>
			__ASSERT_NO_MSG(false);
   161a8:	2390      	movs	r3, #144	; 0x90
   161aa:	4a14      	ldr	r2, [pc, #80]	; (161fc <buttons_scan_fn+0x15c>)
   161ac:	4914      	ldr	r1, [pc, #80]	; (16200 <buttons_scan_fn+0x160>)
   161ae:	480e      	ldr	r0, [pc, #56]	; (161e8 <buttons_scan_fn+0x148>)
   161b0:	f018 fa3f 	bl	2e632 <printk>
   161b4:	2190      	movs	r1, #144	; 0x90
   161b6:	4811      	ldr	r0, [pc, #68]	; (161fc <buttons_scan_fn+0x15c>)
   161b8:	f018 fa48 	bl	2e64c <assert_post_action>
   161bc:	e7db      	b.n	16176 <buttons_scan_fn+0xd6>
   161be:	bf00      	nop
   161c0:	00035401 	.word	0x00035401
   161c4:	20020c7c 	.word	0x20020c7c
   161c8:	2002de0e 	.word	0x2002de0e
   161cc:	20020c70 	.word	0x20020c70
   161d0:	20020c3c 	.word	0x20020c3c
   161d4:	20020c40 	.word	0x20020c40
   161d8:	20027778 	.word	0x20027778
   161dc:	20020c78 	.word	0x20020c78
   161e0:	0003494a 	.word	0x0003494a
   161e4:	0003491e 	.word	0x0003491e
   161e8:	0003452c 	.word	0x0003452c
   161ec:	0003495f 	.word	0x0003495f
   161f0:	20027917 	.word	0x20027917
   161f4:	00034974 	.word	0x00034974
   161f8:	0003498b 	.word	0x0003498b
   161fc:	00035405 	.word	0x00035405
   16200:	00035e56 	.word	0x00035e56
   16204:	20020c6c 	.word	0x20020c6c

00016208 <dk_leds_init>:
{
   16208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1620a:	480e      	ldr	r0, [pc, #56]	; (16244 <dk_leds_init+0x3c>)
   1620c:	f010 faea 	bl	267e4 <z_impl_device_get_binding>
	gpio_dev = device_get_binding(DT_GPIO_P0_DEV_NAME);
   16210:	4d0d      	ldr	r5, [pc, #52]	; (16248 <dk_leds_init+0x40>)
   16212:	6028      	str	r0, [r5, #0]
	if (!gpio_dev) {
   16214:	b190      	cbz	r0, 1623c <dk_leds_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   16216:	2400      	movs	r4, #0
		err = gpio_pin_configure(gpio_dev, led_pins[i],
   16218:	4e0c      	ldr	r6, [pc, #48]	; (1624c <dk_leds_init+0x44>)
   1621a:	6828      	ldr	r0, [r5, #0]
	return api->config(port, access_op, pin, flags);
   1621c:	5d32      	ldrb	r2, [r6, r4]
   1621e:	6843      	ldr	r3, [r0, #4]
   16220:	2100      	movs	r1, #0
   16222:	681f      	ldr	r7, [r3, #0]
   16224:	2301      	movs	r3, #1
   16226:	47b8      	blx	r7
		if (err) {
   16228:	4603      	mov	r3, r0
   1622a:	b948      	cbnz	r0, 16240 <dk_leds_init+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1622c:	3401      	adds	r4, #1
   1622e:	2c04      	cmp	r4, #4
   16230:	d1f3      	bne.n	1621a <dk_leds_init+0x12>
}
   16232:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   16236:	210f      	movs	r1, #15
   16238:	f7ff be98 	b.w	15f6c <dk_set_leds_state.part.1>
		return -ENODEV;
   1623c:	f06f 0312 	mvn.w	r3, #18
}
   16240:	4618      	mov	r0, r3
   16242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16244:	000353a4 	.word	0x000353a4
   16248:	20020c6c 	.word	0x20020c6c
   1624c:	00035449 	.word	0x00035449

00016250 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16250:	4b05      	ldr	r3, [pc, #20]	; (16268 <dk_read_buttons+0x18>)
   16252:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   16256:	b100      	cbz	r0, 1625a <dk_read_buttons+0xa>
		*button_state = current_state;
   16258:	6003      	str	r3, [r0, #0]
   1625a:	4804      	ldr	r0, [pc, #16]	; (1626c <dk_read_buttons+0x1c>)
	if (has_changed != NULL) {
   1625c:	b111      	cbz	r1, 16264 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   1625e:	6802      	ldr	r2, [r0, #0]
   16260:	405a      	eors	r2, r3
   16262:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   16264:	6003      	str	r3, [r0, #0]
}
   16266:	4770      	bx	lr
   16268:	20020c7c 	.word	0x20020c7c
   1626c:	20020c74 	.word	0x20020c74

00016270 <dk_buttons_init>:
	button_handler_cb = button_handler;
   16270:	4b36      	ldr	r3, [pc, #216]	; (1634c <dk_buttons_init+0xdc>)
{
   16272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	button_handler_cb = button_handler;
   16276:	6018      	str	r0, [r3, #0]
   16278:	4835      	ldr	r0, [pc, #212]	; (16350 <dk_buttons_init+0xe0>)
   1627a:	f010 fab3 	bl	267e4 <z_impl_device_get_binding>
	gpio_dev = device_get_binding(DT_GPIO_P0_DEV_NAME);
   1627e:	4d35      	ldr	r5, [pc, #212]	; (16354 <dk_buttons_init+0xe4>)
   16280:	6028      	str	r0, [r5, #0]
	if (!gpio_dev) {
   16282:	2800      	cmp	r0, #0
   16284:	d05f      	beq.n	16346 <dk_buttons_init+0xd6>
		err = gpio_pin_configure(gpio_dev, button_pins[i],
   16286:	4f34      	ldr	r7, [pc, #208]	; (16358 <dk_buttons_init+0xe8>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16288:	2600      	movs	r6, #0
   1628a:	46b9      	mov	r9, r7
		err = gpio_pin_configure(gpio_dev, button_pins[i],
   1628c:	6828      	ldr	r0, [r5, #0]
   1628e:	5dba      	ldrb	r2, [r7, r6]
   16290:	6843      	ldr	r3, [r0, #4]
   16292:	2100      	movs	r1, #0
   16294:	681c      	ldr	r4, [r3, #0]
   16296:	f44f 7380 	mov.w	r3, #256	; 0x100
   1629a:	47a0      	blx	r4
		if (err) {
   1629c:	4604      	mov	r4, r0
   1629e:	b990      	cbnz	r0, 162c6 <dk_buttons_init+0x56>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   162a0:	3601      	adds	r6, #1
   162a2:	2e04      	cmp	r6, #4
   162a4:	d1f2      	bne.n	1628c <dk_buttons_init+0x1c>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   162a6:	4606      	mov	r6, r0
		err = gpio_pin_configure(gpio_dev, button_pins[i],
   162a8:	6828      	ldr	r0, [r5, #0]
   162aa:	f819 2006 	ldrb.w	r2, [r9, r6]
   162ae:	6843      	ldr	r3, [r0, #4]
   162b0:	2100      	movs	r1, #0
   162b2:	681c      	ldr	r4, [r3, #0]
   162b4:	f44f 7381 	mov.w	r3, #258	; 0x102
   162b8:	47a0      	blx	r4
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   162ba:	3601      	adds	r6, #1
   162bc:	2e04      	cmp	r6, #4
   162be:	4604      	mov	r4, r0
   162c0:	d004      	beq.n	162cc <dk_buttons_init+0x5c>
   162c2:	2800      	cmp	r0, #0
   162c4:	d0f0      	beq.n	162a8 <dk_buttons_init+0x38>
}
   162c6:	4620      	mov	r0, r4
   162c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (err) {
   162cc:	2800      	cmp	r0, #0
   162ce:	d1fa      	bne.n	162c6 <dk_buttons_init+0x56>
	u32_t pin_mask = 0;
   162d0:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   162d2:	4607      	mov	r7, r0
		pin_mask |= BIT(button_pins[i]);
   162d4:	f04f 0a01 	mov.w	sl, #1
		err = gpio_pin_disable_callback(gpio_dev, button_pins[i]);
   162d8:	6828      	ldr	r0, [r5, #0]
   162da:	f819 8007 	ldrb.w	r8, [r9, r7]
	if (api->disable_callback == NULL) {
   162de:	6843      	ldr	r3, [r0, #4]
   162e0:	695b      	ldr	r3, [r3, #20]
   162e2:	b913      	cbnz	r3, 162ea <dk_buttons_init+0x7a>
		return -ENOTSUP;
   162e4:	f06f 0485 	mvn.w	r4, #133	; 0x85
   162e8:	e7ed      	b.n	162c6 <dk_buttons_init+0x56>
	return api->disable_callback(port, access_op, pin);
   162ea:	4642      	mov	r2, r8
   162ec:	2100      	movs	r1, #0
   162ee:	4798      	blx	r3
		if (err) {
   162f0:	4604      	mov	r4, r0
   162f2:	2800      	cmp	r0, #0
   162f4:	d1e7      	bne.n	162c6 <dk_buttons_init+0x56>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   162f6:	3701      	adds	r7, #1
		pin_mask |= BIT(button_pins[i]);
   162f8:	fa0a f808 	lsl.w	r8, sl, r8
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   162fc:	2f04      	cmp	r7, #4
		pin_mask |= BIT(button_pins[i]);
   162fe:	ea46 0608 	orr.w	r6, r6, r8
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16302:	d1e9      	bne.n	162d8 <dk_buttons_init+0x68>
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   16304:	4b15      	ldr	r3, [pc, #84]	; (1635c <dk_buttons_init+0xec>)
   16306:	4916      	ldr	r1, [pc, #88]	; (16360 <dk_buttons_init+0xf0>)
	err = gpio_add_callback(gpio_dev, &gpio_cb);
   16308:	6828      	ldr	r0, [r5, #0]
	callback->pin_mask = pin_mask;
   1630a:	e9c1 3601 	strd	r3, r6, [r1, #4]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
   1630e:	6843      	ldr	r3, [r0, #4]
   16310:	68db      	ldr	r3, [r3, #12]
   16312:	2b00      	cmp	r3, #0
   16314:	d0e6      	beq.n	162e4 <dk_buttons_init+0x74>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   16316:	2201      	movs	r2, #1
   16318:	4798      	blx	r3
	if (err) {
   1631a:	4604      	mov	r4, r0
   1631c:	2800      	cmp	r0, #0
   1631e:	d1d2      	bne.n	162c6 <dk_buttons_init+0x56>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   16320:	4910      	ldr	r1, [pc, #64]	; (16364 <dk_buttons_init+0xf4>)
   16322:	4811      	ldr	r0, [pc, #68]	; (16368 <dk_buttons_init+0xf8>)
   16324:	f01a fb3c 	bl	309a0 <k_delayed_work_init>
	state = STATE_SCANNING;
   16328:	4b10      	ldr	r3, [pc, #64]	; (1636c <dk_buttons_init+0xfc>)
   1632a:	4622      	mov	r2, r4
   1632c:	490e      	ldr	r1, [pc, #56]	; (16368 <dk_buttons_init+0xf8>)
   1632e:	4810      	ldr	r0, [pc, #64]	; (16370 <dk_buttons_init+0x100>)
   16330:	f883 a000 	strb.w	sl, [r3]
   16334:	f012 fd8c 	bl	28e50 <k_delayed_work_submit_to_queue>
	if (err) {
   16338:	4604      	mov	r4, r0
   1633a:	2800      	cmp	r0, #0
   1633c:	d1c3      	bne.n	162c6 <dk_buttons_init+0x56>
	dk_read_buttons(NULL, NULL);
   1633e:	4601      	mov	r1, r0
   16340:	f7ff ff86 	bl	16250 <dk_read_buttons>
	return 0;
   16344:	e7bf      	b.n	162c6 <dk_buttons_init+0x56>
		return -ENODEV;
   16346:	f06f 0412 	mvn.w	r4, #18
   1634a:	e7bc      	b.n	162c6 <dk_buttons_init+0x56>
   1634c:	20020c3c 	.word	0x20020c3c
   16350:	000353a4 	.word	0x000353a4
   16354:	20020c6c 	.word	0x20020c6c
   16358:	00035401 	.word	0x00035401
   1635c:	00015fb5 	.word	0x00015fb5
   16360:	20020c60 	.word	0x20020c60
   16364:	000160a1 	.word	0x000160a1
   16368:	20020c40 	.word	0x20020c40
   1636c:	20027917 	.word	0x20027917
   16370:	20027778 	.word	0x20027778

00016374 <write_uart_string>:
static const char termination[3] = { '\0', '\r', '\n' };



static inline void write_uart_string(char *str, size_t len)
{
   16374:	b570      	push	{r4, r5, r6, lr}
   16376:	4604      	mov	r4, r0
	for (size_t i = 0; i < len; i++) {
		uart_poll_out(uart_dev, str[i]);
   16378:	4e05      	ldr	r6, [pc, #20]	; (16390 <write_uart_string+0x1c>)
   1637a:	1845      	adds	r5, r0, r1
	for (size_t i = 0; i < len; i++) {
   1637c:	42ac      	cmp	r4, r5
   1637e:	d100      	bne.n	16382 <write_uart_string+0xe>
	}
}
   16380:	bd70      	pop	{r4, r5, r6, pc}
		uart_poll_out(uart_dev, str[i]);
   16382:	6830      	ldr	r0, [r6, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
   16384:	f814 1b01 	ldrb.w	r1, [r4], #1
   16388:	6843      	ldr	r3, [r0, #4]
   1638a:	685b      	ldr	r3, [r3, #4]
   1638c:	4798      	blx	r3
   1638e:	e7f5      	b.n	1637c <write_uart_string+0x8>
   16390:	20020c94 	.word	0x20020c94

00016394 <cmd_send>:
	int               err;

	ARG_UNUSED(work);

	/* Make sure the string is 0-terminated */
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
   16394:	4b1f      	ldr	r3, [pc, #124]	; (16414 <cmd_send+0x80>)
   16396:	2200      	movs	r2, #0
   16398:	681b      	ldr	r3, [r3, #0]
{
   1639a:	b500      	push	{lr}
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
   1639c:	2bff      	cmp	r3, #255	; 0xff
   1639e:	bf28      	it	cs
   163a0:	23ff      	movcs	r3, #255	; 0xff
   163a2:	481d      	ldr	r0, [pc, #116]	; (16418 <cmd_send+0x84>)
{
   163a4:	b089      	sub	sp, #36	; 0x24
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
   163a6:	54c2      	strb	r2, [r0, r3]

	err = at_cmd_write(at_buf, buf, AT_MAX_CMD_LEN, &state);
   163a8:	491c      	ldr	r1, [pc, #112]	; (1641c <cmd_send+0x88>)
   163aa:	f10d 030f 	add.w	r3, sp, #15
   163ae:	f44f 7280 	mov.w	r2, #256	; 0x100
   163b2:	f002 f961 	bl	18678 <at_cmd_write>
	if (err < 0) {
   163b6:	2800      	cmp	r0, #0
		LOG_ERR("Could not send AT command to modem: %d", err);
		state = AT_CMD_ERROR;
   163b8:	bfbc      	itt	lt
   163ba:	2301      	movlt	r3, #1
   163bc:	f88d 300f 	strblt.w	r3, [sp, #15]
	}

	switch (state) {
   163c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   163c4:	2b03      	cmp	r3, #3
   163c6:	d80e      	bhi.n	163e6 <cmd_send+0x52>
   163c8:	e8df f003 	tbb	[pc, r3]
   163cc:	21171402 	.word	0x21171402
	case AT_CMD_OK:
		write_uart_string(buf, strlen(buf));
   163d0:	4812      	ldr	r0, [pc, #72]	; (1641c <cmd_send+0x88>)
   163d2:	f014 fc73 	bl	2acbc <strlen>
   163d6:	4601      	mov	r1, r0
   163d8:	4810      	ldr	r0, [pc, #64]	; (1641c <cmd_send+0x88>)
   163da:	f7ff ffcb 	bl	16374 <write_uart_string>
		write_uart_string(OK_STR, sizeof(OK_STR));
   163de:	2105      	movs	r1, #5
   163e0:	480f      	ldr	r0, [pc, #60]	; (16420 <cmd_send+0x8c>)
		chars = sprintf(str, "+CMS: %d\r\n", err);
		write_uart_string(str, ++chars);
		break;
	case AT_CMD_ERROR_CME:
		chars = sprintf(str, "+CME: %d\r\n", err);
		write_uart_string(str, ++chars);
   163e2:	f7ff ffc7 	bl	16374 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   163e6:	4b0f      	ldr	r3, [pc, #60]	; (16424 <cmd_send+0x90>)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_ENABLE, uart_irq_tx_enable, struct device *, dev)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_DISABLE, uart_irq_tx_disable, struct device *, dev)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_RX_ENABLE, uart_irq_rx_enable, struct device *, dev)
   163e8:	6818      	ldr	r0, [r3, #0]
   163ea:	f019 f8f7 	bl	2f5dc <z_impl_uart_irq_rx_enable>
}
   163ee:	b009      	add	sp, #36	; 0x24
   163f0:	f85d fb04 	ldr.w	pc, [sp], #4
		write_uart_string(ERROR_STR, sizeof(ERROR_STR));
   163f4:	2108      	movs	r1, #8
   163f6:	480c      	ldr	r0, [pc, #48]	; (16428 <cmd_send+0x94>)
   163f8:	e7f3      	b.n	163e2 <cmd_send+0x4e>
		chars = sprintf(str, "+CMS: %d\r\n", err);
   163fa:	4b0c      	ldr	r3, [pc, #48]	; (1642c <cmd_send+0x98>)
   163fc:	9000      	str	r0, [sp, #0]
		chars = sprintf(str, "+CME: %d\r\n", err);
   163fe:	2100      	movs	r1, #0
   16400:	220f      	movs	r2, #15
   16402:	a804      	add	r0, sp, #16
   16404:	f014 fb66 	bl	2aad4 <__sprintf_chk>
		write_uart_string(str, ++chars);
   16408:	1c41      	adds	r1, r0, #1
   1640a:	a804      	add	r0, sp, #16
   1640c:	e7e9      	b.n	163e2 <cmd_send+0x4e>
		chars = sprintf(str, "+CME: %d\r\n", err);
   1640e:	9000      	str	r0, [sp, #0]
   16410:	4b07      	ldr	r3, [pc, #28]	; (16430 <cmd_send+0x9c>)
   16412:	e7f4      	b.n	163fe <cmd_send+0x6a>
   16414:	20020c80 	.word	0x20020c80
   16418:	20027918 	.word	0x20027918
   1641c:	20027a18 	.word	0x20027a18
   16420:	0003544d 	.word	0x0003544d
   16424:	20020c94 	.word	0x20020c94
   16428:	00035452 	.word	0x00035452
   1642c:	0003545a 	.word	0x0003545a
   16430:	00035465 	.word	0x00035465

00016434 <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   16434:	2201      	movs	r2, #1
{
   16436:	b538      	push	{r3, r4, r5, lr}
		term_mode = mode;
   16438:	4b14      	ldr	r3, [pc, #80]	; (1648c <at_host_init+0x58>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	at_cmd_set_notification_handler(response_handler);
   1643a:	4815      	ldr	r0, [pc, #84]	; (16490 <at_host_init+0x5c>)
		term_mode = mode;
   1643c:	701a      	strb	r2, [r3, #0]
	at_cmd_set_notification_handler(response_handler);
   1643e:	f002 f93d 	bl	186bc <at_cmd_set_notification_handler>
   16442:	4814      	ldr	r0, [pc, #80]	; (16494 <at_host_init+0x60>)
   16444:	f010 f9ce 	bl	267e4 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   16448:	4d13      	ldr	r5, [pc, #76]	; (16498 <at_host_init+0x64>)
   1644a:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   1644c:	b910      	cbnz	r0, 16454 <at_host_init+0x20>

	/* Initialize the UART module */
	err = at_uart_init(uart_dev_name);
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
		return -EFAULT;
   1644e:	f06f 000d 	mvn.w	r0, #13

	k_work_init(&cmd_send_work, cmd_send);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   16452:	bd38      	pop	{r3, r4, r5, pc}
	if (api->err_check != NULL) {
   16454:	6843      	ldr	r3, [r0, #4]
   16456:	689b      	ldr	r3, [r3, #8]
   16458:	b96b      	cbnz	r3, 16476 <at_host_init+0x42>
	uart_irq_callback_set(uart_dev, isr);
   1645a:	682a      	ldr	r2, [r5, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
   1645c:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   1645e:	b973      	cbnz	r3, 1647e <at_host_init+0x4a>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   16460:	2400      	movs	r4, #0
   16462:	4b0e      	ldr	r3, [pc, #56]	; (1649c <at_host_init+0x68>)
   16464:	4a0e      	ldr	r2, [pc, #56]	; (164a0 <at_host_init+0x6c>)
   16466:	6828      	ldr	r0, [r5, #0]
   16468:	601c      	str	r4, [r3, #0]
   1646a:	e9c3 2401 	strd	r2, r4, [r3, #4]
   1646e:	f019 f8b5 	bl	2f5dc <z_impl_uart_irq_rx_enable>
	return err;
   16472:	4620      	mov	r0, r4
   16474:	e7ed      	b.n	16452 <at_host_init+0x1e>
		return api->err_check(dev);
   16476:	4798      	blx	r3
	if (err) {
   16478:	2800      	cmp	r0, #0
   1647a:	d0ee      	beq.n	1645a <at_host_init+0x26>
   1647c:	e7e7      	b.n	1644e <at_host_init+0x1a>
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   1647e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   16480:	2b00      	cmp	r3, #0
   16482:	d0ed      	beq.n	16460 <at_host_init+0x2c>
		api->irq_callback_set(dev, cb, user_data);
   16484:	4907      	ldr	r1, [pc, #28]	; (164a4 <at_host_init+0x70>)
   16486:	4610      	mov	r0, r2
   16488:	4798      	blx	r3
   1648a:	e7e9      	b.n	16460 <at_host_init+0x2c>
   1648c:	20027b19 	.word	0x20027b19
   16490:	0002f5e7 	.word	0x0002f5e7
   16494:	00034856 	.word	0x00034856
   16498:	20020c94 	.word	0x20020c94
   1649c:	20020c88 	.word	0x20020c88
   164a0:	00016395 	.word	0x00016395
   164a4:	000164a9 	.word	0x000164a9

000164a8 <isr>:
	if (api->irq_update) {
   164a8:	6843      	ldr	r3, [r0, #4]
{
   164aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   164ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   164ae:	4605      	mov	r5, r0
   164b0:	b103      	cbz	r3, 164b4 <isr+0xc>
		return api->irq_update(dev);
   164b2:	4798      	blx	r3
	if (api->irq_rx_ready) {
   164b4:	686b      	ldr	r3, [r5, #4]
   164b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   164b8:	b16b      	cbz	r3, 164d6 <isr+0x2e>
		return api->irq_rx_ready(dev);
   164ba:	4628      	mov	r0, r5
   164bc:	4798      	blx	r3
	if (!uart_irq_rx_ready(dev)) {
   164be:	b150      	cbz	r0, 164d6 <isr+0x2e>
	cmd_len += 1;
   164c0:	4c34      	ldr	r4, [pc, #208]	; (16594 <isr+0xec>)
	if (inside_quotes) {
   164c2:	4e35      	ldr	r6, [pc, #212]	; (16598 <isr+0xf0>)
	if (api->fifo_read) {
   164c4:	686b      	ldr	r3, [r5, #4]
   164c6:	699b      	ldr	r3, [r3, #24]
   164c8:	b12b      	cbz	r3, 164d6 <isr+0x2e>
		return api->fifo_read(dev, rx_data, size);
   164ca:	2201      	movs	r2, #1
   164cc:	f10d 0107 	add.w	r1, sp, #7
   164d0:	4628      	mov	r0, r5
   164d2:	4798      	blx	r3
	while (uart_fifo_read(dev, &character, 1)) {
   164d4:	b908      	cbnz	r0, 164da <isr+0x32>
}
   164d6:	b003      	add	sp, #12
   164d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cmd_len += 1;
   164da:	6822      	ldr	r2, [r4, #0]
		uart_rx_handler(character);
   164dc:	f89d 1007 	ldrb.w	r1, [sp, #7]
	cmd_len += 1;
   164e0:	1c53      	adds	r3, r2, #1
	switch (character) {
   164e2:	2922      	cmp	r1, #34	; 0x22
	cmd_len += 1;
   164e4:	6023      	str	r3, [r4, #0]
	switch (character) {
   164e6:	d018      	beq.n	1651a <isr+0x72>
   164e8:	297f      	cmp	r1, #127	; 0x7f
   164ea:	d001      	beq.n	164f0 <isr+0x48>
   164ec:	2908      	cmp	r1, #8
   164ee:	d118      	bne.n	16522 <isr+0x7a>
		pos = pos ? pos - 1 : 0;
   164f0:	b102      	cbz	r2, 164f4 <isr+0x4c>
   164f2:	3a01      	subs	r2, #1
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
   164f4:	2b02      	cmp	r3, #2
   164f6:	bf38      	it	cc
   164f8:	2302      	movcc	r3, #2
		at_buf[pos] = 0;
   164fa:	2700      	movs	r7, #0
   164fc:	4827      	ldr	r0, [pc, #156]	; (1659c <isr+0xf4>)
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
   164fe:	3b02      	subs	r3, #2
		at_buf[pos] = 0;
   16500:	5487      	strb	r7, [r0, r2]
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
   16502:	6023      	str	r3, [r4, #0]
	if (inside_quotes) {
   16504:	7833      	ldrb	r3, [r6, #0]
   16506:	2b00      	cmp	r3, #0
   16508:	d1dc      	bne.n	164c4 <isr+0x1c>
	switch (term_mode) {
   1650a:	4b25      	ldr	r3, [pc, #148]	; (165a0 <isr+0xf8>)
   1650c:	781b      	ldrb	r3, [r3, #0]
   1650e:	2b03      	cmp	r3, #3
   16510:	d8d8      	bhi.n	164c4 <isr+0x1c>
   16512:	e8df f003 	tbb	[pc, r3]
   16516:	1212      	.short	0x1212
   16518:	3830      	.short	0x3830
		inside_quotes = !inside_quotes;
   1651a:	7830      	ldrb	r0, [r6, #0]
   1651c:	f080 0001 	eor.w	r0, r0, #1
   16520:	7030      	strb	r0, [r6, #0]
		if (cmd_len > AT_MAX_CMD_LEN) {
   16522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   16526:	d903      	bls.n	16530 <isr+0x88>
			cmd_len = AT_MAX_CMD_LEN;
   16528:	f44f 7380 	mov.w	r3, #256	; 0x100
	cmd_len = 0;
   1652c:	6023      	str	r3, [r4, #0]
   1652e:	e7c9      	b.n	164c4 <isr+0x1c>
		} else if (cmd_len < 1) {
   16530:	2b00      	cmp	r3, #0
   16532:	d0fb      	beq.n	1652c <isr+0x84>
		at_buf[pos] = character;
   16534:	4b19      	ldr	r3, [pc, #100]	; (1659c <isr+0xf4>)
   16536:	5499      	strb	r1, [r3, r2]
   16538:	e7e4      	b.n	16504 <isr+0x5c>
		if (character == termination[term_mode]) {
   1653a:	4a1a      	ldr	r2, [pc, #104]	; (165a4 <isr+0xfc>)
   1653c:	5cd3      	ldrb	r3, [r2, r3]
   1653e:	428b      	cmp	r3, r1
		if ((at_buf[pos - 1] == '\r') && (character == '\n')) {
   16540:	d1c0      	bne.n	164c4 <isr+0x1c>
	uart_irq_rx_disable(uart_dev);
   16542:	4b19      	ldr	r3, [pc, #100]	; (165a8 <isr+0x100>)
   16544:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   16546:	6843      	ldr	r3, [r0, #4]
   16548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1654a:	b103      	cbz	r3, 1654e <isr+0xa6>
		api->irq_rx_disable(dev);
   1654c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1654e:	4917      	ldr	r1, [pc, #92]	; (165ac <isr+0x104>)
   16550:	e8d1 3fef 	ldaex	r3, [r1]
   16554:	f043 0201 	orr.w	r2, r3, #1
   16558:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1655c:	2800      	cmp	r0, #0
   1655e:	d1f7      	bne.n	16550 <isr+0xa8>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   16560:	07db      	lsls	r3, r3, #31
   16562:	d403      	bmi.n	1656c <isr+0xc4>
		k_queue_append(&work_q->queue, work);
   16564:	3908      	subs	r1, #8
   16566:	4812      	ldr	r0, [pc, #72]	; (165b0 <isr+0x108>)
   16568:	f01a f984 	bl	30874 <k_queue_append>
	at_buf_len = cmd_len;
   1656c:	4b11      	ldr	r3, [pc, #68]	; (165b4 <isr+0x10c>)
   1656e:	6822      	ldr	r2, [r4, #0]
   16570:	601a      	str	r2, [r3, #0]
	cmd_len = 0;
   16572:	2300      	movs	r3, #0
   16574:	e7da      	b.n	1652c <isr+0x84>
		if ((at_buf[pos - 1]) &&
   16576:	4b09      	ldr	r3, [pc, #36]	; (1659c <isr+0xf4>)
   16578:	441a      	add	r2, r3
   1657a:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   1657e:	2b00      	cmp	r3, #0
   16580:	d0a0      	beq.n	164c4 <isr+0x1c>
		if ((at_buf[pos - 1] == '\r') && (character == '\n')) {
   16582:	290a      	cmp	r1, #10
   16584:	e7dc      	b.n	16540 <isr+0x98>
   16586:	4b05      	ldr	r3, [pc, #20]	; (1659c <isr+0xf4>)
   16588:	441a      	add	r2, r3
   1658a:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   1658e:	2b0d      	cmp	r3, #13
   16590:	d198      	bne.n	164c4 <isr+0x1c>
   16592:	e7f6      	b.n	16582 <isr+0xda>
   16594:	20020c84 	.word	0x20020c84
   16598:	20027b18 	.word	0x20027b18
   1659c:	20027918 	.word	0x20027918
   165a0:	20027b19 	.word	0x20027b19
   165a4:	00035470 	.word	0x00035470
   165a8:	20020c94 	.word	0x20020c94
   165ac:	20020c90 	.word	0x20020c90
   165b0:	20027778 	.word	0x20027778
   165b4:	20020c80 	.word	0x20020c80

000165b8 <at_params_get>:


/* Internal function. */
static struct at_param *at_params_get(const struct at_param_list *list,
				size_t index)
{
   165b8:	b538      	push	{r3, r4, r5, lr}
   165ba:	460d      	mov	r5, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.\n");
   165bc:	4604      	mov	r4, r0
   165be:	b960      	cbnz	r0, 165da <at_params_get+0x22>
   165c0:	490a      	ldr	r1, [pc, #40]	; (165ec <at_params_get+0x34>)
   165c2:	232c      	movs	r3, #44	; 0x2c
   165c4:	4a0a      	ldr	r2, [pc, #40]	; (165f0 <at_params_get+0x38>)
   165c6:	480b      	ldr	r0, [pc, #44]	; (165f4 <at_params_get+0x3c>)
   165c8:	f018 f833 	bl	2e632 <printk>
   165cc:	480a      	ldr	r0, [pc, #40]	; (165f8 <at_params_get+0x40>)
   165ce:	f018 f830 	bl	2e632 <printk>
   165d2:	212c      	movs	r1, #44	; 0x2c
   165d4:	4806      	ldr	r0, [pc, #24]	; (165f0 <at_params_get+0x38>)
   165d6:	f018 f839 	bl	2e64c <assert_post_action>

	if (index >= list->param_count) {
   165da:	6823      	ldr	r3, [r4, #0]
   165dc:	42ab      	cmp	r3, r5
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   165de:	bf8a      	itet	hi
   165e0:	6860      	ldrhi	r0, [r4, #4]
		return NULL;
   165e2:	2000      	movls	r0, #0
	return &param[index];
   165e4:	eb00 00c5 	addhi.w	r0, r0, r5, lsl #3
}
   165e8:	bd38      	pop	{r3, r4, r5, pc}
   165ea:	bf00      	nop
   165ec:	000354e5 	.word	0x000354e5
   165f0:	000354ad 	.word	0x000354ad
   165f4:	0003452c 	.word	0x0003452c
   165f8:	000354f9 	.word	0x000354f9

000165fc <at_param_clear>:
{
   165fc:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter pointer cannot be NULL.\n");
   165fe:	4604      	mov	r4, r0
   16600:	b960      	cbnz	r0, 1661c <at_param_clear+0x20>
   16602:	490f      	ldr	r1, [pc, #60]	; (16640 <at_param_clear+0x44>)
   16604:	231c      	movs	r3, #28
   16606:	4a0f      	ldr	r2, [pc, #60]	; (16644 <at_param_clear+0x48>)
   16608:	480f      	ldr	r0, [pc, #60]	; (16648 <at_param_clear+0x4c>)
   1660a:	f018 f812 	bl	2e632 <printk>
   1660e:	480f      	ldr	r0, [pc, #60]	; (1664c <at_param_clear+0x50>)
   16610:	f018 f80f 	bl	2e632 <printk>
   16614:	211c      	movs	r1, #28
   16616:	480b      	ldr	r0, [pc, #44]	; (16644 <at_param_clear+0x48>)
   16618:	f018 f818 	bl	2e64c <assert_post_action>
	if (param->type == AT_PARAM_TYPE_STRING) {
   1661c:	7823      	ldrb	r3, [r4, #0]
   1661e:	2b03      	cmp	r3, #3
   16620:	d104      	bne.n	1662c <at_param_clear+0x30>
		k_free(param->value.str_val);
   16622:	6860      	ldr	r0, [r4, #4]
}
   16624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_free(param->value.str_val);
   16628:	f01a b8ef 	b.w	3080a <k_free>
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   1662c:	2b02      	cmp	r3, #2
   1662e:	d102      	bne.n	16636 <at_param_clear+0x3a>
		param->value.int_val = 0;
   16630:	2300      	movs	r3, #0
   16632:	6063      	str	r3, [r4, #4]
}
   16634:	bd10      	pop	{r4, pc}
	} else if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   16636:	2b01      	cmp	r3, #1
		param->value.short_val = 0;
   16638:	bf04      	itt	eq
   1663a:	2300      	moveq	r3, #0
   1663c:	80a3      	strheq	r3, [r4, #4]
}
   1663e:	e7f9      	b.n	16634 <at_param_clear+0x38>
   16640:	00035473 	.word	0x00035473
   16644:	000354ad 	.word	0x000354ad
   16648:	0003452c 	.word	0x0003452c
   1664c:	00035488 	.word	0x00035488

00016650 <at_param_init>:
{
   16650:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter pointer cannot be NULL.\n");
   16652:	4604      	mov	r4, r0
   16654:	b960      	cbnz	r0, 16670 <at_param_init+0x20>
   16656:	4908      	ldr	r1, [pc, #32]	; (16678 <at_param_init+0x28>)
   16658:	2313      	movs	r3, #19
   1665a:	4a08      	ldr	r2, [pc, #32]	; (1667c <at_param_init+0x2c>)
   1665c:	4808      	ldr	r0, [pc, #32]	; (16680 <at_param_init+0x30>)
   1665e:	f017 ffe8 	bl	2e632 <printk>
   16662:	4808      	ldr	r0, [pc, #32]	; (16684 <at_param_init+0x34>)
   16664:	f017 ffe5 	bl	2e632 <printk>
   16668:	2113      	movs	r1, #19
   1666a:	4804      	ldr	r0, [pc, #16]	; (1667c <at_param_init+0x2c>)
   1666c:	f017 ffee 	bl	2e64c <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   16670:	2300      	movs	r3, #0
   16672:	6023      	str	r3, [r4, #0]
   16674:	6063      	str	r3, [r4, #4]
}
   16676:	bd10      	pop	{r4, pc}
   16678:	00035473 	.word	0x00035473
   1667c:	000354ad 	.word	0x000354ad
   16680:	0003452c 	.word	0x0003452c
   16684:	00035488 	.word	0x00035488

00016688 <modem_info_parse>:

	return err;
}

static int modem_info_parse(const struct modem_info_data *modem_data, char *buf)
{
   16688:	b538      	push	{r3, r4, r5, lr}
   1668a:	4605      	mov	r5, r0
	int err;
	u32_t param_index;

	err = at_parser_max_params_from_str(
		&buf[CMD_SIZE(modem_data->cmd)], &m_param_list,
   1668c:	6800      	ldr	r0, [r0, #0]
{
   1668e:	460c      	mov	r4, r1
		&buf[CMD_SIZE(modem_data->cmd)], &m_param_list,
   16690:	f014 fb14 	bl	2acbc <strlen>
   16694:	3801      	subs	r0, #1
	err = at_parser_max_params_from_str(
   16696:	4420      	add	r0, r4
   16698:	796a      	ldrb	r2, [r5, #5]
   1669a:	4907      	ldr	r1, [pc, #28]	; (166b8 <modem_info_parse+0x30>)
   1669c:	f018 ffb0 	bl	2f600 <at_parser_max_params_from_str>
		modem_data->param_count);

	if (err != 0) {
   166a0:	4604      	mov	r4, r0
   166a2:	b938      	cbnz	r0, 166b4 <modem_info_parse+0x2c>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   166a4:	4804      	ldr	r0, [pc, #16]	; (166b8 <modem_info_parse+0x30>)
   166a6:	f019 f969 	bl	2f97c <at_params_valid_count_get>
	if (param_index != modem_data->param_count) {
   166aa:	796b      	ldrb	r3, [r5, #5]
		return -EAGAIN;
   166ac:	4298      	cmp	r0, r3
   166ae:	bf18      	it	ne
   166b0:	f06f 040a 	mvnne.w	r4, #10
	}

	return err;
}
   166b4:	4620      	mov	r0, r4
   166b6:	bd38      	pop	{r3, r4, r5, pc}
   166b8:	20020c98 	.word	0x20020c98

000166bc <modem_info_type_get>:

enum at_param_type modem_info_type_get(enum modem_info info)
{
	__ASSERT(info < MODEM_INFO_COUNT, "Invalid argument.");
   166bc:	280a      	cmp	r0, #10
{
   166be:	b510      	push	{r4, lr}
   166c0:	4604      	mov	r4, r0
	__ASSERT(info < MODEM_INFO_COUNT, "Invalid argument.");
   166c2:	d90c      	bls.n	166de <modem_info_type_get+0x22>
   166c4:	4908      	ldr	r1, [pc, #32]	; (166e8 <modem_info_type_get+0x2c>)
   166c6:	23fe      	movs	r3, #254	; 0xfe
   166c8:	4a08      	ldr	r2, [pc, #32]	; (166ec <modem_info_type_get+0x30>)
   166ca:	4809      	ldr	r0, [pc, #36]	; (166f0 <modem_info_type_get+0x34>)
   166cc:	f017 ffb1 	bl	2e632 <printk>
   166d0:	4808      	ldr	r0, [pc, #32]	; (166f4 <modem_info_type_get+0x38>)
   166d2:	f017 ffae 	bl	2e632 <printk>
   166d6:	21fe      	movs	r1, #254	; 0xfe
   166d8:	4804      	ldr	r0, [pc, #16]	; (166ec <modem_info_type_get+0x30>)
   166da:	f017 ffb7 	bl	2e64c <assert_post_action>

	return modem_data[info]->data_type;
   166de:	4b06      	ldr	r3, [pc, #24]	; (166f8 <modem_info_type_get+0x3c>)
   166e0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
}
   166e4:	7998      	ldrb	r0, [r3, #6]
   166e6:	bd10      	pop	{r4, pc}
   166e8:	0003555f 	.word	0x0003555f
   166ec:	0003552d 	.word	0x0003552d
   166f0:	0003452c 	.word	0x0003452c
   166f4:	00035577 	.word	0x00035577
   166f8:	00031028 	.word	0x00031028

000166fc <modem_info_name_get>:

int modem_info_name_get(enum modem_info info, char *name)
{
   166fc:	b570      	push	{r4, r5, r6, lr}
	int len;

	if (name == NULL) {
   166fe:	460d      	mov	r5, r1
   16700:	b919      	cbnz	r1, 1670a <modem_info_name_get+0xe>
		return -EINVAL;
   16702:	f06f 0415 	mvn.w	r4, #21
	memcpy(name,
		modem_data_name[info],
		len);

	return len;
}
   16706:	4620      	mov	r0, r4
   16708:	bd70      	pop	{r4, r5, r6, pc}
	len = strlen(modem_data_name[info]);
   1670a:	4b07      	ldr	r3, [pc, #28]	; (16728 <modem_info_name_get+0x2c>)
   1670c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   16710:	4630      	mov	r0, r6
   16712:	f014 fad3 	bl	2acbc <strlen>
	if (len <= 0) {
   16716:	1e04      	subs	r4, r0, #0
   16718:	ddf3      	ble.n	16702 <modem_info_name_get+0x6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1671a:	4622      	mov	r2, r4
   1671c:	4631      	mov	r1, r6
   1671e:	4628      	mov	r0, r5
   16720:	f7f7 fa5a 	bl	dbd8 <memcpy>
   16724:	e7ef      	b.n	16706 <modem_info_name_get+0xa>
   16726:	bf00      	nop
   16728:	00031054 	.word	0x00031054

0001672c <modem_info_short_get>:

int modem_info_short_get(enum modem_info info, u16_t *buf)
{
   1672c:	b530      	push	{r4, r5, lr}
   1672e:	460d      	mov	r5, r1
   16730:	b0a1      	sub	sp, #132	; 0x84
   16732:	4604      	mov	r4, r0
	int err;
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   16734:	2280      	movs	r2, #128	; 0x80
   16736:	2100      	movs	r1, #0
   16738:	4668      	mov	r0, sp
   1673a:	f014 f8d3 	bl	2a8e4 <memset>

	if (buf == NULL) {
   1673e:	b1dd      	cbz	r5, 16778 <modem_info_short_get+0x4c>
		return -EINVAL;
	}

	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   16740:	4b10      	ldr	r3, [pc, #64]	; (16784 <modem_info_short_get+0x58>)
   16742:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   16746:	79a3      	ldrb	r3, [r4, #6]
   16748:	2b03      	cmp	r3, #3
   1674a:	d015      	beq.n	16778 <modem_info_short_get+0x4c>
		return -EINVAL;
	}

	err = at_cmd_write(modem_data[info]->cmd,
   1674c:	2300      	movs	r3, #0
   1674e:	2280      	movs	r2, #128	; 0x80
   16750:	4669      	mov	r1, sp
   16752:	6820      	ldr	r0, [r4, #0]
   16754:	f001 ff90 	bl	18678 <at_cmd_write>
			   recv_buf,
			   CONFIG_MODEM_INFO_BUFFER_SIZE,
			   NULL);

	if (err != 0) {
   16758:	b988      	cbnz	r0, 1677e <modem_info_short_get+0x52>
		return -EIO;
	}

	err = modem_info_parse(modem_data[info], recv_buf);
   1675a:	4669      	mov	r1, sp
   1675c:	4620      	mov	r0, r4
   1675e:	f7ff ff93 	bl	16688 <modem_info_parse>

	if (err) {
   16762:	b938      	cbnz	r0, 16774 <modem_info_short_get+0x48>
		return err;
	}

	err = at_params_short_get(&m_param_list,
   16764:	462a      	mov	r2, r5
   16766:	7921      	ldrb	r1, [r4, #4]
   16768:	4807      	ldr	r0, [pc, #28]	; (16788 <modem_info_short_get+0x5c>)
   1676a:	f019 f8cd 	bl	2f908 <at_params_short_get>

	if (err) {
		return err;
	}

	return sizeof(u16_t);
   1676e:	2800      	cmp	r0, #0
   16770:	bf08      	it	eq
   16772:	2002      	moveq	r0, #2
}
   16774:	b021      	add	sp, #132	; 0x84
   16776:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   16778:	f06f 0015 	mvn.w	r0, #21
   1677c:	e7fa      	b.n	16774 <modem_info_short_get+0x48>
		return -EIO;
   1677e:	f06f 0004 	mvn.w	r0, #4
   16782:	e7f7      	b.n	16774 <modem_info_short_get+0x48>
   16784:	00031028 	.word	0x00031028
   16788:	20020c98 	.word	0x20020c98

0001678c <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(char *response)
{
   1678c:	b513      	push	{r0, r1, r4, lr}
   1678e:	4604      	mov	r4, r0
	u16_t param_value;
	int   len = strlen(response);
   16790:	f014 fa94 	bl	2acbc <strlen>
	return strstr(buf, AT_CMD_CESQ_RESP) ? true : false;
   16794:	490a      	ldr	r1, [pc, #40]	; (167c0 <modem_info_rsrp_subscribe_handler+0x34>)
   16796:	4620      	mov	r0, r4
   16798:	f014 fca0 	bl	2b0dc <strstr>

	if (is_cesq_notification(response, len)) {
   1679c:	b168      	cbz	r0, 167ba <modem_info_rsrp_subscribe_handler+0x2e>
		modem_info_parse(modem_data[MODEM_INFO_RSRP], response);
   1679e:	4621      	mov	r1, r4
   167a0:	4808      	ldr	r0, [pc, #32]	; (167c4 <modem_info_rsrp_subscribe_handler+0x38>)
   167a2:	f7ff ff71 	bl	16688 <modem_info_parse>
		len = modem_info_short_get(MODEM_INFO_RSRP, &param_value);
   167a6:	f10d 0106 	add.w	r1, sp, #6
   167aa:	2000      	movs	r0, #0
   167ac:	f7ff ffbe 	bl	1672c <modem_info_short_get>
		modem_info_rsrp_cb(param_value);
   167b0:	4b05      	ldr	r3, [pc, #20]	; (167c8 <modem_info_rsrp_subscribe_handler+0x3c>)
   167b2:	f89d 0006 	ldrb.w	r0, [sp, #6]
   167b6:	681b      	ldr	r3, [r3, #0]
   167b8:	4798      	blx	r3
	}
}
   167ba:	b002      	add	sp, #8
   167bc:	bd10      	pop	{r4, pc}
   167be:	bf00      	nop
   167c0:	00035644 	.word	0x00035644
   167c4:	00031088 	.word	0x00031088
   167c8:	20020ca0 	.word	0x20020ca0

000167cc <modem_info_string_get>:
{
   167cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   167ce:	460e      	mov	r6, r1
   167d0:	b0a3      	sub	sp, #140	; 0x8c
   167d2:	4607      	mov	r7, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   167d4:	2280      	movs	r2, #128	; 0x80
   167d6:	2100      	movs	r1, #0
   167d8:	a802      	add	r0, sp, #8
   167da:	f014 f883 	bl	2a8e4 <memset>
	if (buf == NULL) {
   167de:	2e00      	cmp	r6, #0
   167e0:	d060      	beq.n	168a4 <modem_info_string_get+0xd8>
	err = at_cmd_write(modem_data[info]->cmd,
   167e2:	4b37      	ldr	r3, [pc, #220]	; (168c0 <modem_info_string_get+0xf4>)
   167e4:	2280      	movs	r2, #128	; 0x80
   167e6:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
   167ea:	a902      	add	r1, sp, #8
   167ec:	2300      	movs	r3, #0
   167ee:	6828      	ldr	r0, [r5, #0]
   167f0:	f001 ff42 	bl	18678 <at_cmd_write>
	if (err != 0) {
   167f4:	2800      	cmp	r0, #0
   167f6:	d158      	bne.n	168aa <modem_info_string_get+0xde>
	if (info == MODEM_INFO_ICCID) {
   167f8:	2f0a      	cmp	r7, #10
   167fa:	d128      	bne.n	1684e <modem_info_string_get+0x82>
		&buf[CMD_SIZE(AT_CMD_CRSM)], &m_param_list,
   167fc:	4831      	ldr	r0, [pc, #196]	; (168c4 <modem_info_string_get+0xf8>)
   167fe:	f014 fa5d 	bl	2acbc <strlen>
	err = at_parser_max_params_from_str(
   16802:	ab02      	add	r3, sp, #8
		&buf[CMD_SIZE(AT_CMD_CRSM)], &m_param_list,
   16804:	3801      	subs	r0, #1
	err = at_parser_max_params_from_str(
   16806:	796a      	ldrb	r2, [r5, #5]
   16808:	492f      	ldr	r1, [pc, #188]	; (168c8 <modem_info_string_get+0xfc>)
   1680a:	4418      	add	r0, r3
   1680c:	f018 fef8 	bl	2f600 <at_parser_max_params_from_str>
	if (err != 0) {
   16810:	4604      	mov	r4, r0
   16812:	bb18      	cbnz	r0, 1685c <modem_info_string_get+0x90>
	param_index = at_params_valid_count_get(&m_param_list);
   16814:	482c      	ldr	r0, [pc, #176]	; (168c8 <modem_info_string_get+0xfc>)
   16816:	f019 f8b1 	bl	2f97c <at_params_valid_count_get>
	if (param_index != modem_data->param_count) {
   1681a:	796b      	ldrb	r3, [r5, #5]
   1681c:	4298      	cmp	r0, r3
   1681e:	d147      	bne.n	168b0 <modem_info_string_get+0xe4>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   16820:	79ab      	ldrb	r3, [r5, #6]
   16822:	2b01      	cmp	r3, #1
   16824:	d11d      	bne.n	16862 <modem_info_string_get+0x96>
		err = at_params_short_get(&m_param_list,
   16826:	f10d 0206 	add.w	r2, sp, #6
   1682a:	7929      	ldrb	r1, [r5, #4]
   1682c:	4826      	ldr	r0, [pc, #152]	; (168c8 <modem_info_string_get+0xfc>)
   1682e:	f019 f86b 	bl	2f908 <at_params_short_get>
		if (err) {
   16832:	4604      	mov	r4, r0
   16834:	b990      	cbnz	r0, 1685c <modem_info_string_get+0x90>
		len = snprintf(buf, MODEM_INFO_MAX_RESPONSE_SIZE,
   16836:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1683a:	4a24      	ldr	r2, [pc, #144]	; (168cc <modem_info_string_get+0x100>)
   1683c:	2164      	movs	r1, #100	; 0x64
   1683e:	4630      	mov	r0, r6
   16840:	f014 f8de 	bl	2aa00 <snprintf>
	if (info == MODEM_INFO_ICCID) {
   16844:	2f0a      	cmp	r7, #10
		len = snprintf(buf, MODEM_INFO_MAX_RESPONSE_SIZE,
   16846:	4604      	mov	r4, r0
	if (info == MODEM_INFO_ICCID) {
   16848:	d108      	bne.n	1685c <modem_info_string_get+0x90>
	int len = 0;
   1684a:	4635      	mov	r5, r6
   1684c:	e021      	b.n	16892 <modem_info_string_get+0xc6>
		err = modem_info_parse(modem_data[info], recv_buf);
   1684e:	a902      	add	r1, sp, #8
   16850:	4628      	mov	r0, r5
   16852:	f7ff ff19 	bl	16688 <modem_info_parse>
	if (err) {
   16856:	4604      	mov	r4, r0
   16858:	2800      	cmp	r0, #0
   1685a:	d0e1      	beq.n	16820 <modem_info_string_get+0x54>
}
   1685c:	4620      	mov	r0, r4
   1685e:	b023      	add	sp, #140	; 0x8c
   16860:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   16862:	2b03      	cmp	r3, #3
   16864:	d127      	bne.n	168b6 <modem_info_string_get+0xea>
		len = at_params_string_get(&m_param_list,
   16866:	2364      	movs	r3, #100	; 0x64
   16868:	4632      	mov	r2, r6
   1686a:	7929      	ldrb	r1, [r5, #4]
   1686c:	4816      	ldr	r0, [pc, #88]	; (168c8 <modem_info_string_get+0xfc>)
   1686e:	f019 f861 	bl	2f934 <at_params_string_get>
	if (info == MODEM_INFO_ICCID) {
   16872:	2f0a      	cmp	r7, #10
		len = at_params_string_get(&m_param_list,
   16874:	4604      	mov	r4, r0
	if (info == MODEM_INFO_ICCID) {
   16876:	d0e8      	beq.n	1684a <modem_info_string_get+0x7e>
	return len <= 0 ? -ENOTSUP : len;
   16878:	2c00      	cmp	r4, #0
   1687a:	dcef      	bgt.n	1685c <modem_info_string_get+0x90>
   1687c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   16880:	e7ec      	b.n	1685c <modem_info_string_get+0x90>
		current_char = buf[i];
   16882:	f815 3c02 	ldrb.w	r3, [r5, #-2]
		buf[i] = next_char;
   16886:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		buf[i + 1] = current_char;
   1688a:	f805 3c01 	strb.w	r3, [r5, #-1]
		buf[i] = next_char;
   1688e:	f805 2c02 	strb.w	r2, [r5, #-2]
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   16892:	4630      	mov	r0, r6
   16894:	f014 fa12 	bl	2acbc <strlen>
   16898:	1baf      	subs	r7, r5, r6
   1689a:	42b8      	cmp	r0, r7
   1689c:	f105 0502 	add.w	r5, r5, #2
   168a0:	d8ef      	bhi.n	16882 <modem_info_string_get+0xb6>
   168a2:	e7e9      	b.n	16878 <modem_info_string_get+0xac>
		return -EINVAL;
   168a4:	f06f 0415 	mvn.w	r4, #21
   168a8:	e7d8      	b.n	1685c <modem_info_string_get+0x90>
		return -EIO;
   168aa:	f06f 0404 	mvn.w	r4, #4
   168ae:	e7d5      	b.n	1685c <modem_info_string_get+0x90>
		return -EAGAIN;
   168b0:	f06f 040a 	mvn.w	r4, #10
   168b4:	e7d2      	b.n	1685c <modem_info_string_get+0x90>
	if (info == MODEM_INFO_ICCID) {
   168b6:	2f0a      	cmp	r7, #10
   168b8:	d1e0      	bne.n	1687c <modem_info_string_get+0xb0>
	int len = 0;
   168ba:	2400      	movs	r4, #0
   168bc:	e7c5      	b.n	1684a <modem_info_string_get+0x7e>
   168be:	bf00      	nop
   168c0:	00031028 	.word	0x00031028
   168c4:	00035525 	.word	0x00035525
   168c8:	20020c98 	.word	0x20020c98
   168cc:	000344b8 	.word	0x000344b8

000168d0 <modem_info_rsrp_register>:

int modem_info_rsrp_register(rsrp_cb_t cb)
{
   168d0:	b508      	push	{r3, lr}
	modem_info_rsrp_cb = cb;
   168d2:	4b08      	ldr	r3, [pc, #32]	; (168f4 <modem_info_rsrp_register+0x24>)
   168d4:	6018      	str	r0, [r3, #0]

	at_cmd_set_notification_handler(modem_info_rsrp_subscribe_handler);
   168d6:	4808      	ldr	r0, [pc, #32]	; (168f8 <modem_info_rsrp_register+0x28>)
   168d8:	f001 fef0 	bl	186bc <at_cmd_set_notification_handler>

	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
   168dc:	2300      	movs	r3, #0
   168de:	4807      	ldr	r0, [pc, #28]	; (168fc <modem_info_rsrp_register+0x2c>)
   168e0:	461a      	mov	r2, r3
   168e2:	4619      	mov	r1, r3
   168e4:	f001 fec8 	bl	18678 <at_cmd_write>
   168e8:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   168ea:	bf18      	it	ne
   168ec:	f06f 0004 	mvnne.w	r0, #4
   168f0:	bd08      	pop	{r3, pc}
   168f2:	bf00      	nop
   168f4:	20020ca0 	.word	0x20020ca0
   168f8:	0001678d 	.word	0x0001678d
   168fc:	0003551b 	.word	0x0003551b

00016900 <modem_info_init>:

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   16900:	2108      	movs	r1, #8
   16902:	4801      	ldr	r0, [pc, #4]	; (16908 <modem_info_init+0x8>)
   16904:	f018 bf6e 	b.w	2f7e4 <at_params_list_init>
   16908:	20020c98 	.word	0x20020c98

0001690c <modem_info_json_string_get>:

	return json_add_obj(parent, str, json_str);
}

int modem_info_json_string_get(char *buf)
{
   1690c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16910:	b0b4      	sub	sp, #208	; 0xd0
	u16_t param_value;
	size_t len = 0;
	size_t total_len = 0;
	int ret = 0;
	char data_buffer[MODEM_INFO_MAX_RESPONSE_SIZE] = {0};
   16912:	2264      	movs	r2, #100	; 0x64
   16914:	2100      	movs	r1, #0
{
   16916:	4681      	mov	r9, r0
	char data_buffer[MODEM_INFO_MAX_RESPONSE_SIZE] = {0};
   16918:	a802      	add	r0, sp, #8
   1691a:	f013 ffe3 	bl	2a8e4 <memset>
	char data_name[MODEM_INFO_MAX_RESPONSE_SIZE];
	cJSON *data_obj = cJSON_CreateObject();
   1691e:	f018 f9b0 	bl	2ec82 <cJSON_CreateObject>
	enum at_param_type data_type;

	if (data_obj == NULL) {
   16922:	4605      	mov	r5, r0
   16924:	2800      	cmp	r0, #0
   16926:	d039      	beq.n	1699c <modem_info_json_string_get+0x90>
		return -ENOMEM;
	}

	for (size_t i = 0; i < ARRAY_SIZE(modem_information); i++) {
   16928:	2600      	movs	r6, #0
	int ret = 0;
   1692a:	4637      	mov	r7, r6
	size_t total_len = 0;
   1692c:	4634      	mov	r4, r6
		memset(data_name, 0, MODEM_INFO_MAX_RESPONSE_SIZE);
		len = modem_info_name_get(modem_information[i]->info,
   1692e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 169f8 <modem_info_json_string_get+0xec>
		memset(data_name, 0, MODEM_INFO_MAX_RESPONSE_SIZE);
   16932:	2264      	movs	r2, #100	; 0x64
   16934:	2100      	movs	r1, #0
   16936:	a81b      	add	r0, sp, #108	; 0x6c
   16938:	f013 ffd4 	bl	2a8e4 <memset>
		len = modem_info_name_get(modem_information[i]->info,
   1693c:	f85a 8026 	ldr.w	r8, [sl, r6, lsl #2]
   16940:	a91b      	add	r1, sp, #108	; 0x6c
   16942:	f898 0000 	ldrb.w	r0, [r8]
   16946:	f7ff fed9 	bl	166fc <modem_info_name_get>
		if (len < 0) {
			LOG_DBG("Data name not obtained: %d\n", len);
			continue;
		}

		data_type = modem_info_type_get(modem_information[i]->info);
   1694a:	f898 0000 	ldrb.w	r0, [r8]
   1694e:	f7ff feb5 	bl	166bc <modem_info_type_get>

		if (data_type == AT_PARAM_TYPE_STRING) {
   16952:	2803      	cmp	r0, #3
   16954:	d125      	bne.n	169a2 <modem_info_json_string_get+0x96>
			len = modem_info_string_get(modem_information[i]->info,
   16956:	a902      	add	r1, sp, #8
   16958:	f898 0000 	ldrb.w	r0, [r8]
   1695c:	f7ff ff36 	bl	167cc <modem_info_string_get>
			if (len < 0) {
				LOG_DBG("Link data not obtained: %d\n", len);
				continue;
			}

			total_len += len;
   16960:	4404      	add	r4, r0
	json_str = cJSON_CreateString(item);
   16962:	a802      	add	r0, sp, #8
   16964:	f018 f978 	bl	2ec58 <cJSON_CreateString>
	if (json_num == NULL) {
   16968:	4602      	mov	r2, r0
   1696a:	b360      	cbz	r0, 169c6 <modem_info_json_string_get+0xba>
	cJSON_AddItemToObject(parent, str, item);
   1696c:	a91b      	add	r1, sp, #108	; 0x6c
   1696e:	4628      	mov	r0, r5
   16970:	f7ff f980 	bl	15c74 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_num);
   16974:	2300      	movs	r3, #0
				LOG_DBG("Link data not obtained: %d\n", len);
				continue;
			}

			total_len += len;
			ret += json_add_num(data_obj, data_name, param_value);
   16976:	441f      	add	r7, r3
	for (size_t i = 0; i < ARRAY_SIZE(modem_information); i++) {
   16978:	3601      	adds	r6, #1
   1697a:	2e09      	cmp	r6, #9
   1697c:	d1d9      	bne.n	16932 <modem_info_json_string_get+0x26>
	json_str = cJSON_CreateString(item);
   1697e:	481c      	ldr	r0, [pc, #112]	; (169f0 <modem_info_json_string_get+0xe4>)
   16980:	f018 f96a 	bl	2ec58 <cJSON_CreateString>
	if (json_str == NULL) {
   16984:	4602      	mov	r2, r0
   16986:	b308      	cbz	r0, 169cc <modem_info_json_string_get+0xc0>
	cJSON_AddItemToObject(parent, str, item);
   16988:	491a      	ldr	r1, [pc, #104]	; (169f4 <modem_info_json_string_get+0xe8>)
   1698a:	4628      	mov	r0, r5
   1698c:	f7ff f972 	bl	15c74 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   16990:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_BOARD)) {
		ret += json_add_str(data_obj, "BOARD", CONFIG_BOARD);
	}

	if (ret != 0) {
   16992:	42df      	cmn	r7, r3
		cJSON_Delete(data_obj);
   16994:	4628      	mov	r0, r5
	if (ret != 0) {
   16996:	d01c      	beq.n	169d2 <modem_info_json_string_get+0xc6>
		cJSON_Delete(data_obj);
   16998:	f7ff f916 	bl	15bc8 <cJSON_Delete>
		return -ENOMEM;
   1699c:	f06f 000b 	mvn.w	r0, #11
   169a0:	e023      	b.n	169ea <modem_info_json_string_get+0xde>
		} else if (data_type == AT_PARAM_TYPE_NUM_SHORT) {
   169a2:	2801      	cmp	r0, #1
   169a4:	d1e8      	bne.n	16978 <modem_info_json_string_get+0x6c>
			len = modem_info_short_get(modem_information[i]->info,
   169a6:	f10d 0106 	add.w	r1, sp, #6
   169aa:	f898 0000 	ldrb.w	r0, [r8]
   169ae:	f7ff febd 	bl	1672c <modem_info_short_get>
			total_len += len;
   169b2:	4404      	add	r4, r0
			ret += json_add_num(data_obj, data_name, param_value);
   169b4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   169b8:	f7f5 fd08 	bl	c3cc <__aeabi_ui2d>
	json_num = cJSON_CreateNumber(num);
   169bc:	ec41 0b10 	vmov	d0, r0, r1
   169c0:	f018 f935 	bl	2ec2e <cJSON_CreateNumber>
   169c4:	e7d0      	b.n	16968 <modem_info_json_string_get+0x5c>
		return -ENOMEM;
   169c6:	f06f 030b 	mvn.w	r3, #11
   169ca:	e7d4      	b.n	16976 <modem_info_json_string_get+0x6a>
		return -ENOMEM;
   169cc:	f06f 030b 	mvn.w	r3, #11
   169d0:	e7df      	b.n	16992 <modem_info_json_string_get+0x86>
		return -ENOMEM;
	}

	memcpy(buf,
   169d2:	f018 f907 	bl	2ebe4 <cJSON_PrintUnformatted>
   169d6:	f44f 7280 	mov.w	r2, #256	; 0x100
   169da:	4601      	mov	r1, r0
   169dc:	4648      	mov	r0, r9
   169de:	f7f7 f8fb 	bl	dbd8 <memcpy>
		cJSON_PrintUnformatted(data_obj),
		MODEM_INFO_JSON_STRING_SIZE);

	cJSON_Delete(data_obj);
   169e2:	4628      	mov	r0, r5
   169e4:	f7ff f8f0 	bl	15bc8 <cJSON_Delete>

	return total_len;
   169e8:	4620      	mov	r0, r4
}
   169ea:	b034      	add	sp, #208	; 0xd0
   169ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   169f0:	00035650 	.word	0x00035650
   169f4:	00035661 	.word	0x00035661
   169f8:	000310a0 	.word	0x000310a0

000169fc <connect_request_encode>:
	return err_code;
}

int connect_request_encode(const struct mqtt_client *client,
			   const u8_t **packet, u32_t *packet_length)
{
   169fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   16a00:	460f      	mov	r7, r1
	u32_t offset = 0;
   16a02:	2100      	movs	r1, #0
	u8_t *payload = &client->tx_buf[MQTT_FIXED_HEADER_EXTENDED_SIZE];
   16a04:	6c03      	ldr	r3, [r0, #64]	; 0x40
	/* Clean session always. */
	u8_t connect_flags = client->clean_session << 1;
   16a06:	f890 4055 	ldrb.w	r4, [r0, #85]	; 0x55
{
   16a0a:	4605      	mov	r5, r0
   16a0c:	4690      	mov	r8, r2
	int err_code;
	const struct mqtt_utf8 *mqtt_proto_desc;

	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   16a0e:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
		mqtt_proto_desc = &mqtt_3_1_1_proto_desc;
   16a12:	4a4e      	ldr	r2, [pc, #312]	; (16b4c <connect_request_encode+0x150>)
   16a14:	4e4e      	ldr	r6, [pc, #312]	; (16b50 <connect_request_encode+0x154>)
	u8_t *payload = &client->tx_buf[MQTT_FIXED_HEADER_EXTENDED_SIZE];
   16a16:	3305      	adds	r3, #5
		mqtt_proto_desc = &mqtt_3_1_1_proto_desc;
   16a18:	2804      	cmp	r0, #4
   16a1a:	bf08      	it	eq
   16a1c:	4616      	moveq	r6, r2
__ssp_bos_icheck3(memset, void *, int)
   16a1e:	4618      	mov	r0, r3
   16a20:	f240 72fb 	movw	r2, #2043	; 0x7fb
	u8_t *payload = &client->tx_buf[MQTT_FIXED_HEADER_EXTENDED_SIZE];
   16a24:	9301      	str	r3, [sp, #4]
	u32_t offset = 0;
   16a26:	9100      	str	r1, [sp, #0]
   16a28:	f013 ff5c 	bl	2a8e4 <memset>

	/* Pack protocol description. */
	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(
   16a2c:	466a      	mov	r2, sp
   16a2e:	4601      	mov	r1, r0
   16a30:	4630      	mov	r0, r6
   16a32:	f019 f8bd 	bl	2fbb0 <pack_utf8_str.constprop.5>
	u8_t connect_flags = client->clean_session << 1;
   16a36:	f3c4 0440 	ubfx	r4, r4, #1, #1
		mqtt_proto_desc, MQTT_MAX_VARIABLE_HEADER_N_PAYLOAD,
		payload, &offset);
	if (err_code == 0) {
   16a3a:	4603      	mov	r3, r0
   16a3c:	b970      	cbnz	r0, 16a5c <connect_request_encode+0x60>
	if (buffer_len > *offset) {
   16a3e:	e9dd 2100 	ldrd	r2, r1, [sp]
   16a42:	f240 76fa 	movw	r6, #2042	; 0x7fa
   16a46:	42b2      	cmp	r2, r6
	int err_code = -EINVAL;
   16a48:	bf88      	it	hi
   16a4a:	f06f 0315 	mvnhi.w	r3, #21
		MQTT_TRC("Encoding Protocol Version %02x.",
			 client->protocol_version);
		/* Pack protocol version. */
		err_code = pack_uint8(client->protocol_version,
   16a4e:	f895 0054 	ldrb.w	r0, [r5, #84]	; 0x54
		buffer[*offset] = val;
   16a52:	bf9f      	itttt	ls
   16a54:	5488      	strbls	r0, [r1, r2]
		*offset += sizeof(u8_t);
   16a56:	9a00      	ldrls	r2, [sp, #0]
   16a58:	3201      	addls	r2, #1
   16a5a:	9200      	strls	r2, [sp, #0]

	/* Remember position of connect flag and leave one byte for it to
	 * be packed once we determine its value.
	 */
	const u32_t connect_flag_offset =
		MQTT_FIXED_HEADER_EXTENDED_SIZE + offset;
   16a5c:	f8dd 9000 	ldr.w	r9, [sp]
	offset++;
   16a60:	f109 0201 	add.w	r2, r9, #1
   16a64:	9200      	str	r2, [sp, #0]

	if (err_code == 0) {
   16a66:	2b00      	cmp	r3, #0
   16a68:	d165      	bne.n	16b36 <connect_request_encode+0x13a>
		MQTT_TRC("Encoding Keep Alive Time %04x.", MQTT_KEEPALIVE);
		/* Pack keep alive time. */
		err_code = pack_uint16(MQTT_KEEPALIVE,
   16a6a:	466a      	mov	r2, sp
   16a6c:	9901      	ldr	r1, [sp, #4]
   16a6e:	2078      	movs	r0, #120	; 0x78
   16a70:	f019 f886 	bl	2fb80 <pack_uint16.constprop.6>
				       MQTT_MAX_VARIABLE_HEADER_N_PAYLOAD,
				       payload, &offset);
	}

	if (err_code == 0) {
   16a74:	4603      	mov	r3, r0
   16a76:	2800      	cmp	r0, #0
   16a78:	d15d      	bne.n	16b36 <connect_request_encode+0x13a>
		MQTT_TRC("Encoding Client Id. Str:%s Size:%08x.",
			 client->client_id.utf8,
			 client->client_id.size);

		/* Pack client id */
		err_code = pack_utf8_str(&client->client_id,
   16a7a:	466a      	mov	r2, sp
   16a7c:	9901      	ldr	r1, [sp, #4]
   16a7e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   16a82:	f019 f895 	bl	2fbb0 <pack_utf8_str.constprop.5>
					 MQTT_MAX_VARIABLE_HEADER_N_PAYLOAD,
					 payload, &offset);
	}

	if (err_code == 0) {
   16a86:	4606      	mov	r6, r0
   16a88:	2800      	cmp	r0, #0
   16a8a:	d15d      	bne.n	16b48 <connect_request_encode+0x14c>
		/* Pack will topic and QoS */
		if (client->will_topic != NULL) {
   16a8c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	u8_t connect_flags = client->clean_session << 1;
   16a8e:	0064      	lsls	r4, r4, #1
		if (client->will_topic != NULL) {
   16a90:	b1f0      	cbz	r0, 16ad0 <connect_request_encode+0xd4>
				 client->will_topic->topic.size);

			/* Set Will topic in connect flags. */
			connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;

			err_code = pack_utf8_str(
   16a92:	466a      	mov	r2, sp
   16a94:	9901      	ldr	r1, [sp, #4]
   16a96:	f019 f88b 	bl	2fbb0 <pack_utf8_str.constprop.5>
				&client->will_topic->topic,
				MQTT_MAX_VARIABLE_HEADER_N_PAYLOAD,
				payload, &offset);

			if (err_code == 0) {
   16a9a:	4603      	mov	r3, r0
   16a9c:	2800      	cmp	r0, #0
   16a9e:	d14a      	bne.n	16b36 <connect_request_encode+0x13a>
				/* QoS is always 1 as of now. */
				connect_flags |=
					((client->will_topic->qos & 0x03) << 3);
   16aa0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
				connect_flags |= client->will_retain << 5;
   16aa2:	f895 2055 	ldrb.w	r2, [r5, #85]	; 0x55
					((client->will_topic->qos & 0x03) << 3);
   16aa6:	7a1b      	ldrb	r3, [r3, #8]
				connect_flags |= client->will_retain << 5;
   16aa8:	f002 0201 	and.w	r2, r2, #1
					((client->will_topic->qos & 0x03) << 3);
   16aac:	00db      	lsls	r3, r3, #3
			connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   16aae:	f044 0404 	orr.w	r4, r4, #4
					((client->will_topic->qos & 0x03) << 3);
   16ab2:	f003 0318 	and.w	r3, r3, #24
				connect_flags |= client->will_retain << 5;
   16ab6:	ea44 1442 	orr.w	r4, r4, r2, lsl #5
   16aba:	431c      	orrs	r4, r3

				if (client->will_message != NULL) {
   16abc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16abe:	9901      	ldr	r1, [sp, #4]
					    "Encoding Will Message. "
					    "Str:%s Size:%08x.",
					    client->will_message->utf8,
					    client->will_message->size);

					err_code = pack_utf8_str(
   16ac0:	466a      	mov	r2, sp
				if (client->will_message != NULL) {
   16ac2:	b363      	cbz	r3, 16b1e <connect_request_encode+0x122>
					err_code = pack_utf8_str(
   16ac4:	4618      	mov	r0, r3
   16ac6:	f019 f873 	bl	2fbb0 <pack_utf8_str.constprop.5>
	return pack_uint16(0x0000, buffer_len, buffer, offset);
   16aca:	4603      	mov	r3, r0
				}
			}
		}
	}

	if (err_code == 0) {
   16acc:	2800      	cmp	r0, #0
   16ace:	d132      	bne.n	16b36 <connect_request_encode+0x13a>
		/* Pack Username if any. */
		if (client->user_name != NULL) {
   16ad0:	6a68      	ldr	r0, [r5, #36]	; 0x24
   16ad2:	b148      	cbz	r0, 16ae8 <connect_request_encode+0xec>

			MQTT_TRC("Encoding Username. Str:%s, Size:%08x.",
				 client->user_name->utf8,
				 client->user_name->size);

			err_code = pack_utf8_str(
   16ad4:	466a      	mov	r2, sp
   16ad6:	9901      	ldr	r1, [sp, #4]
   16ad8:	f019 f86a 	bl	2fbb0 <pack_utf8_str.constprop.5>
				client->user_name,
				MQTT_MAX_VARIABLE_HEADER_N_PAYLOAD,
				payload, &offset);

			if (err_code == 0) {
   16adc:	4603      	mov	r3, r0
   16ade:	bb50      	cbnz	r0, 16b36 <connect_request_encode+0x13a>
				/* Pack Password if any. */
				if (client->password != NULL) {
   16ae0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   16ae2:	b9f8      	cbnz	r0, 16b24 <connect_request_encode+0x128>
			connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   16ae4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	}

	if (err_code == 0) {
		u8_t connect_pkt_qos = MQTT_QOS_0_AT_MOST_ONCE;

		if (client->protocol_version == MQTT_VERSION_3_1_0) {
   16ae8:	f895 0054 	ldrb.w	r0, [r5, #84]	; 0x54
   16aec:	1ec3      	subs	r3, r0, #3
   16aee:	4258      	negs	r0, r3
   16af0:	4158      	adcs	r0, r3
			connect_pkt_qos = MQTT_QOS_1_AT_LEAST_ONCE;
		}

		/* Pack the connect flags. */
		client->tx_buf[connect_flag_offset] = connect_flags;
   16af2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   16af4:	4499      	add	r9, r3
   16af6:	f889 4005 	strb.w	r4, [r9, #5]

		const u8_t message_type = MQTT_MESSAGES_OPTIONS(
			MQTT_PKT_TYPE_CONNECT,
			0, connect_pkt_qos, 0);

		offset = mqtt_encode_fixed_header(message_type, offset,
   16afa:	9900      	ldr	r1, [sp, #0]
	if (length <= MQTT_MAX_PAYLOAD_SIZE) {
   16afc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   16b00:	d21f      	bcs.n	16b42 <connect_request_encode+0x146>
		const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   16b02:	0040      	lsls	r0, r0, #1
   16b04:	aa01      	add	r2, sp, #4
   16b06:	f040 0010 	orr.w	r0, r0, #16
   16b0a:	f019 f878 	bl	2fbfe <mqtt_encode_fixed_header.part.0>
						  &payload);

		*packet_length = offset;
		*packet = payload;
   16b0e:	9b01      	ldr	r3, [sp, #4]
		*packet_length = offset;
   16b10:	f8c8 0000 	str.w	r0, [r8]
		*packet = payload;
   16b14:	603b      	str	r3, [r7, #0]
		*packet_length = 0;
		*packet = NULL;
	}

	return err_code;
}
   16b16:	4630      	mov	r0, r6
   16b18:	b003      	add	sp, #12
   16b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return pack_uint16(0x0000, buffer_len, buffer, offset);
   16b1e:	f019 f82f 	bl	2fb80 <pack_uint16.constprop.6>
   16b22:	e7d2      	b.n	16aca <connect_request_encode+0xce>
					err_code = pack_utf8_str(
   16b24:	466a      	mov	r2, sp
   16b26:	9901      	ldr	r1, [sp, #4]
   16b28:	f019 f842 	bl	2fbb0 <pack_utf8_str.constprop.5>
					connect_flags |=
   16b2c:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
	if (err_code == 0) {
   16b30:	4603      	mov	r3, r0
   16b32:	2800      	cmp	r0, #0
   16b34:	d0d8      	beq.n	16ae8 <connect_request_encode+0xec>
		*packet_length = 0;
   16b36:	2200      	movs	r2, #0
		*packet = NULL;
   16b38:	461e      	mov	r6, r3
		*packet_length = 0;
   16b3a:	f8c8 2000 	str.w	r2, [r8]
		*packet = NULL;
   16b3e:	603a      	str	r2, [r7, #0]
	return err_code;
   16b40:	e7e9      	b.n	16b16 <connect_request_encode+0x11a>
	u32_t packet_length = 0xFFFFFFFF;
   16b42:	f04f 30ff 	mov.w	r0, #4294967295
   16b46:	e7e2      	b.n	16b0e <connect_request_encode+0x112>
   16b48:	4603      	mov	r3, r0
   16b4a:	e7f4      	b.n	16b36 <connect_request_encode+0x13a>
   16b4c:	000310cc 	.word	0x000310cc
   16b50:	000310c4 	.word	0x000310c4

00016b54 <disconnect_encode>:
int disconnect_encode(const struct mqtt_client *client, const u8_t **packet,
		      u32_t *packet_length)
{
	(void)client;

	*packet = disc_packet;
   16b54:	4b02      	ldr	r3, [pc, #8]	; (16b60 <disconnect_encode+0xc>)
	*packet_length = sizeof(disc_packet);

	return 0;
}
   16b56:	2000      	movs	r0, #0
	*packet = disc_packet;
   16b58:	600b      	str	r3, [r1, #0]
	*packet_length = sizeof(disc_packet);
   16b5a:	2302      	movs	r3, #2
   16b5c:	6013      	str	r3, [r2, #0]
}
   16b5e:	4770      	bx	lr
   16b60:	0003566a 	.word	0x0003566a

00016b64 <ping_request_encode>:
int ping_request_encode(const struct mqtt_client *client, const u8_t **packet,
			u32_t *packet_length)
{
	(void)client;

	*packet = ping_packet;
   16b64:	4b02      	ldr	r3, [pc, #8]	; (16b70 <ping_request_encode+0xc>)
	*packet_length = sizeof(ping_packet);

	return 0;
}
   16b66:	2000      	movs	r0, #0
	*packet = ping_packet;
   16b68:	600b      	str	r3, [r1, #0]
	*packet_length = sizeof(ping_packet);
   16b6a:	2302      	movs	r3, #2
   16b6c:	6013      	str	r3, [r2, #0]
}
   16b6e:	4770      	bx	lr
   16b70:	00035676 	.word	0x00035676

00016b74 <close>:

	return socket_ops->socket(family, type, proto);
}

static inline int close(int sock)
{
   16b74:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   16b76:	4c10      	ldr	r4, [pc, #64]	; (16bb8 <close+0x44>)
{
   16b78:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   16b7a:	6823      	ldr	r3, [r4, #0]
   16b7c:	b94b      	cbnz	r3, 16b92 <close+0x1e>
   16b7e:	490f      	ldr	r1, [pc, #60]	; (16bbc <close+0x48>)
   16b80:	480f      	ldr	r0, [pc, #60]	; (16bc0 <close+0x4c>)
   16b82:	2321      	movs	r3, #33	; 0x21
   16b84:	4a0f      	ldr	r2, [pc, #60]	; (16bc4 <close+0x50>)
   16b86:	f017 fd54 	bl	2e632 <printk>
   16b8a:	2121      	movs	r1, #33	; 0x21
   16b8c:	480d      	ldr	r0, [pc, #52]	; (16bc4 <close+0x50>)
   16b8e:	f017 fd5d 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   16b92:	6823      	ldr	r3, [r4, #0]
   16b94:	685b      	ldr	r3, [r3, #4]
   16b96:	b94b      	cbnz	r3, 16bac <close+0x38>
   16b98:	490b      	ldr	r1, [pc, #44]	; (16bc8 <close+0x54>)
   16b9a:	4809      	ldr	r0, [pc, #36]	; (16bc0 <close+0x4c>)
   16b9c:	2322      	movs	r3, #34	; 0x22
   16b9e:	4a09      	ldr	r2, [pc, #36]	; (16bc4 <close+0x50>)
   16ba0:	f017 fd47 	bl	2e632 <printk>
   16ba4:	2122      	movs	r1, #34	; 0x22
   16ba6:	4807      	ldr	r0, [pc, #28]	; (16bc4 <close+0x50>)
   16ba8:	f017 fd50 	bl	2e64c <assert_post_action>

	return socket_ops->close(sock);
   16bac:	6823      	ldr	r3, [r4, #0]
   16bae:	4628      	mov	r0, r5
}
   16bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   16bb4:	685b      	ldr	r3, [r3, #4]
   16bb6:	4718      	bx	r3
   16bb8:	20020994 	.word	0x20020994
   16bbc:	000356ae 	.word	0x000356ae
   16bc0:	0003452c 	.word	0x0003452c
   16bc4:	00035678 	.word	0x00035678
   16bc8:	000356b9 	.word	0x000356b9

00016bcc <mqtt_client_tcp_connect>:
 * @param[in] client Identifies the client on which the procedure is requested.
 *
 * @retval 0 or an error code indicating reason for failure.
 */
int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   16bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   16bd0:	4c2d      	ldr	r4, [pc, #180]	; (16c88 <mqtt_client_tcp_connect+0xbc>)
	const struct sockaddr *broker = client->broker;
   16bd2:	6a05      	ldr	r5, [r0, #32]
   16bd4:	6823      	ldr	r3, [r4, #0]
{
   16bd6:	4606      	mov	r6, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   16bd8:	882f      	ldrh	r7, [r5, #0]
   16bda:	b94b      	cbnz	r3, 16bf0 <mqtt_client_tcp_connect+0x24>
   16bdc:	492b      	ldr	r1, [pc, #172]	; (16c8c <mqtt_client_tcp_connect+0xc0>)
   16bde:	482c      	ldr	r0, [pc, #176]	; (16c90 <mqtt_client_tcp_connect+0xc4>)
   16be0:	2319      	movs	r3, #25
   16be2:	4a2c      	ldr	r2, [pc, #176]	; (16c94 <mqtt_client_tcp_connect+0xc8>)
   16be4:	f017 fd25 	bl	2e632 <printk>
   16be8:	2119      	movs	r1, #25
   16bea:	482a      	ldr	r0, [pc, #168]	; (16c94 <mqtt_client_tcp_connect+0xc8>)
   16bec:	f017 fd2e 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   16bf0:	6823      	ldr	r3, [r4, #0]
   16bf2:	681b      	ldr	r3, [r3, #0]
   16bf4:	b94b      	cbnz	r3, 16c0a <mqtt_client_tcp_connect+0x3e>
   16bf6:	4928      	ldr	r1, [pc, #160]	; (16c98 <mqtt_client_tcp_connect+0xcc>)
   16bf8:	4825      	ldr	r0, [pc, #148]	; (16c90 <mqtt_client_tcp_connect+0xc4>)
   16bfa:	231a      	movs	r3, #26
   16bfc:	4a25      	ldr	r2, [pc, #148]	; (16c94 <mqtt_client_tcp_connect+0xc8>)
   16bfe:	f017 fd18 	bl	2e632 <printk>
   16c02:	211a      	movs	r1, #26
   16c04:	4823      	ldr	r0, [pc, #140]	; (16c94 <mqtt_client_tcp_connect+0xc8>)
   16c06:	f017 fd21 	bl	2e64c <assert_post_action>
	return socket_ops->socket(family, type, proto);
   16c0a:	6823      	ldr	r3, [r4, #0]
   16c0c:	4638      	mov	r0, r7
   16c0e:	681b      	ldr	r3, [r3, #0]
   16c10:	2206      	movs	r2, #6
   16c12:	2101      	movs	r1, #1
   16c14:	4798      	blx	r3
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   16c16:	2800      	cmp	r0, #0
   16c18:	4607      	mov	r7, r0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   16c1a:	6070      	str	r0, [r6, #4]
	if (client->transport.tcp.sock < 0) {
   16c1c:	da05      	bge.n	16c2a <mqtt_client_tcp_connect+0x5e>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   16c1e:	f017 fd94 	bl	2e74a <__errno>
   16c22:	6800      	ldr	r0, [r0, #0]
   16c24:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   16c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (broker->sa_family == AF_INET) {
   16c2a:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   16c2c:	6a35      	ldr	r5, [r6, #32]
		peer_addr_size = sizeof(struct sockaddr_in);
   16c2e:	2b01      	cmp	r3, #1
}

static inline int connect(int sock, const struct sockaddr *addr,
			  socklen_t addrlen)
{
	__ASSERT_NO_MSG(socket_ops);
   16c30:	6823      	ldr	r3, [r4, #0]
   16c32:	bf14      	ite	ne
   16c34:	f04f 0818 	movne.w	r8, #24
   16c38:	f04f 0808 	moveq.w	r8, #8
   16c3c:	b94b      	cbnz	r3, 16c52 <mqtt_client_tcp_connect+0x86>
   16c3e:	4913      	ldr	r1, [pc, #76]	; (16c8c <mqtt_client_tcp_connect+0xc0>)
   16c40:	4813      	ldr	r0, [pc, #76]	; (16c90 <mqtt_client_tcp_connect+0xc4>)
   16c42:	2345      	movs	r3, #69	; 0x45
   16c44:	4a13      	ldr	r2, [pc, #76]	; (16c94 <mqtt_client_tcp_connect+0xc8>)
   16c46:	f017 fcf4 	bl	2e632 <printk>
   16c4a:	2145      	movs	r1, #69	; 0x45
   16c4c:	4811      	ldr	r0, [pc, #68]	; (16c94 <mqtt_client_tcp_connect+0xc8>)
   16c4e:	f017 fcfd 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   16c52:	6823      	ldr	r3, [r4, #0]
   16c54:	695b      	ldr	r3, [r3, #20]
   16c56:	b94b      	cbnz	r3, 16c6c <mqtt_client_tcp_connect+0xa0>
   16c58:	4910      	ldr	r1, [pc, #64]	; (16c9c <mqtt_client_tcp_connect+0xd0>)
   16c5a:	480d      	ldr	r0, [pc, #52]	; (16c90 <mqtt_client_tcp_connect+0xc4>)
   16c5c:	2346      	movs	r3, #70	; 0x46
   16c5e:	4a0d      	ldr	r2, [pc, #52]	; (16c94 <mqtt_client_tcp_connect+0xc8>)
   16c60:	f017 fce7 	bl	2e632 <printk>
   16c64:	2146      	movs	r1, #70	; 0x46
   16c66:	480b      	ldr	r0, [pc, #44]	; (16c94 <mqtt_client_tcp_connect+0xc8>)
   16c68:	f017 fcf0 	bl	2e64c <assert_post_action>

	return socket_ops->connect(sock, addr, addrlen);
   16c6c:	6823      	ldr	r3, [r4, #0]
   16c6e:	4642      	mov	r2, r8
   16c70:	695b      	ldr	r3, [r3, #20]
   16c72:	4629      	mov	r1, r5
   16c74:	4638      	mov	r0, r7
   16c76:	4798      	blx	r3
	if (ret < 0) {
   16c78:	2800      	cmp	r0, #0
   16c7a:	da03      	bge.n	16c84 <mqtt_client_tcp_connect+0xb8>
		(void)close(client->transport.tcp.sock);
   16c7c:	6870      	ldr	r0, [r6, #4]
   16c7e:	f7ff ff79 	bl	16b74 <close>
   16c82:	e7cc      	b.n	16c1e <mqtt_client_tcp_connect+0x52>
	return 0;
   16c84:	2000      	movs	r0, #0
   16c86:	e7ce      	b.n	16c26 <mqtt_client_tcp_connect+0x5a>
   16c88:	20020994 	.word	0x20020994
   16c8c:	000356ae 	.word	0x000356ae
   16c90:	0003452c 	.word	0x0003452c
   16c94:	00035678 	.word	0x00035678
   16c98:	000356cb 	.word	0x000356cb
   16c9c:	000356de 	.word	0x000356de

00016ca0 <mqtt_client_tcp_write>:
 *
 * @retval 0 or an error code indicating reason for failure.
 */
int mqtt_client_tcp_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   16ca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ca4:	4680      	mov	r8, r0
   16ca6:	4689      	mov	r9, r1
   16ca8:	4617      	mov	r7, r2
	u32_t offset = 0;
   16caa:	2400      	movs	r4, #0
}

static inline ssize_t send(int sock, const void *buf, size_t len,
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
   16cac:	4d1d      	ldr	r5, [pc, #116]	; (16d24 <mqtt_client_tcp_write+0x84>)
	int ret;

	while (offset < datalen) {
   16cae:	42bc      	cmp	r4, r7
   16cb0:	d301      	bcc.n	16cb6 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   16cb2:	2000      	movs	r0, #0
   16cb4:	e031      	b.n	16d1a <mqtt_client_tcp_write+0x7a>
		ret = send(client->transport.tcp.sock, data + offset,
   16cb6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   16cba:	eb09 0a04 	add.w	sl, r9, r4
   16cbe:	461e      	mov	r6, r3
   16cc0:	4b19      	ldr	r3, [pc, #100]	; (16d28 <mqtt_client_tcp_write+0x88>)
   16cc2:	eba7 0b04 	sub.w	fp, r7, r4
   16cc6:	681b      	ldr	r3, [r3, #0]
   16cc8:	b94b      	cbnz	r3, 16cde <mqtt_client_tcp_write+0x3e>
   16cca:	4918      	ldr	r1, [pc, #96]	; (16d2c <mqtt_client_tcp_write+0x8c>)
   16ccc:	4818      	ldr	r0, [pc, #96]	; (16d30 <mqtt_client_tcp_write+0x90>)
   16cce:	237e      	movs	r3, #126	; 0x7e
   16cd0:	462a      	mov	r2, r5
   16cd2:	f017 fcae 	bl	2e632 <printk>
   16cd6:	217e      	movs	r1, #126	; 0x7e
   16cd8:	4628      	mov	r0, r5
   16cda:	f017 fcb7 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   16cde:	4b12      	ldr	r3, [pc, #72]	; (16d28 <mqtt_client_tcp_write+0x88>)
   16ce0:	681b      	ldr	r3, [r3, #0]
   16ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16ce4:	b94b      	cbnz	r3, 16cfa <mqtt_client_tcp_write+0x5a>
   16ce6:	4913      	ldr	r1, [pc, #76]	; (16d34 <mqtt_client_tcp_write+0x94>)
   16ce8:	4811      	ldr	r0, [pc, #68]	; (16d30 <mqtt_client_tcp_write+0x90>)
   16cea:	237f      	movs	r3, #127	; 0x7f
   16cec:	462a      	mov	r2, r5
   16cee:	f017 fca0 	bl	2e632 <printk>
   16cf2:	217f      	movs	r1, #127	; 0x7f
   16cf4:	4628      	mov	r0, r5
   16cf6:	f017 fca9 	bl	2e64c <assert_post_action>

	return socket_ops->send(sock, buf, len, flags);
   16cfa:	4b0b      	ldr	r3, [pc, #44]	; (16d28 <mqtt_client_tcp_write+0x88>)
   16cfc:	4630      	mov	r0, r6
   16cfe:	681b      	ldr	r3, [r3, #0]
   16d00:	465a      	mov	r2, fp
   16d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16d04:	4651      	mov	r1, sl
   16d06:	469c      	mov	ip, r3
   16d08:	2300      	movs	r3, #0
   16d0a:	4666      	mov	r6, ip
   16d0c:	47b0      	blx	r6
		if (ret < 0) {
   16d0e:	2800      	cmp	r0, #0
   16d10:	da05      	bge.n	16d1e <mqtt_client_tcp_write+0x7e>
			return -errno;
   16d12:	f017 fd1a 	bl	2e74a <__errno>
   16d16:	6800      	ldr	r0, [r0, #0]
   16d18:	4240      	negs	r0, r0
}
   16d1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += ret;
   16d1e:	4404      	add	r4, r0
   16d20:	e7c5      	b.n	16cae <mqtt_client_tcp_write+0xe>
   16d22:	bf00      	nop
   16d24:	00035678 	.word	0x00035678
   16d28:	20020994 	.word	0x20020994
   16d2c:	000356ae 	.word	0x000356ae
   16d30:	0003452c 	.word	0x0003452c
   16d34:	00035703 	.word	0x00035703

00016d38 <mqtt_client_tcp_read>:
 *                       received data length as output.
 *
 * @retval 0 or an error code indicating reason for failure.
 */
int mqtt_client_tcp_read(struct mqtt_client *client, u8_t *data, u32_t *datalen)
{
   16d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   16d3c:	4c18      	ldr	r4, [pc, #96]	; (16da0 <mqtt_client_tcp_read+0x68>)
   16d3e:	460f      	mov	r7, r1
   16d40:	6823      	ldr	r3, [r4, #0]
   16d42:	4615      	mov	r5, r2
	int ret;

	ret = recv(client->transport.tcp.sock, data, *datalen, MSG_DONTWAIT);
   16d44:	6846      	ldr	r6, [r0, #4]
   16d46:	f8d2 8000 	ldr.w	r8, [r2]
   16d4a:	b94b      	cbnz	r3, 16d60 <mqtt_client_tcp_read+0x28>
   16d4c:	4915      	ldr	r1, [pc, #84]	; (16da4 <mqtt_client_tcp_read+0x6c>)
   16d4e:	4816      	ldr	r0, [pc, #88]	; (16da8 <mqtt_client_tcp_read+0x70>)
   16d50:	2369      	movs	r3, #105	; 0x69
   16d52:	4a16      	ldr	r2, [pc, #88]	; (16dac <mqtt_client_tcp_read+0x74>)
   16d54:	f017 fc6d 	bl	2e632 <printk>
   16d58:	2169      	movs	r1, #105	; 0x69
   16d5a:	4814      	ldr	r0, [pc, #80]	; (16dac <mqtt_client_tcp_read+0x74>)
   16d5c:	f017 fc76 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   16d60:	6823      	ldr	r3, [r4, #0]
   16d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16d64:	b94b      	cbnz	r3, 16d7a <mqtt_client_tcp_read+0x42>
   16d66:	4912      	ldr	r1, [pc, #72]	; (16db0 <mqtt_client_tcp_read+0x78>)
   16d68:	480f      	ldr	r0, [pc, #60]	; (16da8 <mqtt_client_tcp_read+0x70>)
   16d6a:	236a      	movs	r3, #106	; 0x6a
   16d6c:	4a0f      	ldr	r2, [pc, #60]	; (16dac <mqtt_client_tcp_read+0x74>)
   16d6e:	f017 fc60 	bl	2e632 <printk>
   16d72:	216a      	movs	r1, #106	; 0x6a
   16d74:	480d      	ldr	r0, [pc, #52]	; (16dac <mqtt_client_tcp_read+0x74>)
   16d76:	f017 fc69 	bl	2e64c <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   16d7a:	6823      	ldr	r3, [r4, #0]
   16d7c:	4642      	mov	r2, r8
   16d7e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   16d80:	4639      	mov	r1, r7
   16d82:	2340      	movs	r3, #64	; 0x40
   16d84:	4630      	mov	r0, r6
   16d86:	47a0      	blx	r4
	if (ret < 0) {
   16d88:	2800      	cmp	r0, #0
   16d8a:	da05      	bge.n	16d98 <mqtt_client_tcp_read+0x60>
		return -errno;
   16d8c:	f017 fcdd 	bl	2e74a <__errno>
   16d90:	6800      	ldr	r0, [r0, #0]
   16d92:	4240      	negs	r0, r0
	}

	*datalen = ret;
	return 0;
}
   16d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*datalen = ret;
   16d98:	6028      	str	r0, [r5, #0]
	return 0;
   16d9a:	2000      	movs	r0, #0
   16d9c:	e7fa      	b.n	16d94 <mqtt_client_tcp_read+0x5c>
   16d9e:	bf00      	nop
   16da0:	20020994 	.word	0x20020994
   16da4:	000356ae 	.word	0x000356ae
   16da8:	0003452c 	.word	0x0003452c
   16dac:	00035678 	.word	0x00035678
   16db0:	000356f2 	.word	0x000356f2

00016db4 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_TLS */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   16db4:	7803      	ldrb	r3, [r0, #0]
   16db6:	4a02      	ldr	r2, [pc, #8]	; (16dc0 <mqtt_transport_connect+0xc>)
   16db8:	011b      	lsls	r3, r3, #4
   16dba:	58d3      	ldr	r3, [r2, r3]
   16dbc:	4718      	bx	r3
   16dbe:	bf00      	nop
   16dc0:	000310d4 	.word	0x000310d4

00016dc4 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const u8_t *data,
			 u32_t datalen)
{
   16dc4:	b410      	push	{r4}
	return transport_fn[client->transport.type].write(client, data,
   16dc6:	4b04      	ldr	r3, [pc, #16]	; (16dd8 <mqtt_transport_write+0x14>)
   16dc8:	7804      	ldrb	r4, [r0, #0]
   16dca:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   16dce:	685b      	ldr	r3, [r3, #4]
							  datalen);
}
   16dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write(client, data,
   16dd4:	4718      	bx	r3
   16dd6:	bf00      	nop
   16dd8:	000310d4 	.word	0x000310d4

00016ddc <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, u8_t *data, u32_t *datalen)
{
   16ddc:	b410      	push	{r4}
	return transport_fn[client->transport.type].read(client, data, datalen);
   16dde:	4b04      	ldr	r3, [pc, #16]	; (16df0 <mqtt_transport_read+0x14>)
   16de0:	7804      	ldrb	r4, [r0, #0]
   16de2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   16de6:	689b      	ldr	r3, [r3, #8]
}
   16de8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].read(client, data, datalen);
   16dec:	4718      	bx	r3
   16dee:	bf00      	nop
   16df0:	000310d4 	.word	0x000310d4

00016df4 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   16df4:	7802      	ldrb	r2, [r0, #0]
   16df6:	4b02      	ldr	r3, [pc, #8]	; (16e00 <mqtt_transport_disconnect+0xc>)
   16df8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   16dfc:	68db      	ldr	r3, [r3, #12]
   16dfe:	4718      	bx	r3
   16e00:	000310d4 	.word	0x000310d4

00016e04 <mqtt_mutex_unlock>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   16e04:	4801      	ldr	r0, [pc, #4]	; (16e0c <mqtt_mutex_unlock+0x8>)
   16e06:	f010 ba93 	b.w	27330 <z_impl_k_mutex_unlock>
   16e0a:	bf00      	nop
   16e0c:	20020ca8 	.word	0x20020ca8

00016e10 <mqtt_mutex_lock>:
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   16e10:	f04f 31ff 	mov.w	r1, #4294967295
   16e14:	4801      	ldr	r0, [pc, #4]	; (16e1c <mqtt_mutex_lock+0xc>)
   16e16:	f010 b9d7 	b.w	271c8 <z_impl_k_mutex_lock>
   16e1a:	bf00      	nop
   16e1c:	20020ca8 	.word	0x20020ca8

00016e20 <client_free>:

	return MQTT_MAX_CLIENTS;
}

static void client_free(struct mqtt_client *client)
{
   16e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
	MQTT_STATE_INIT(client);
   16e22:	2500      	movs	r5, #0

	/* Free memory used for TX packets and reset the pointer. */
	if (client->tx_buf != NULL) {
   16e24:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
   16e26:	4604      	mov	r4, r0
	MQTT_STATE_INIT(client);
   16e28:	63c5      	str	r5, [r0, #60]	; 0x3c
	if (client->tx_buf != NULL) {
   16e2a:	b133      	cbz	r3, 16e3a <client_free+0x1a>
 *
 * @param[in] ptr Memory to be freed.
 */
static inline void mqtt_free(void *ptr)
{
	void *mem = ptr;
   16e2c:	a902      	add	r1, sp, #8
   16e2e:	f841 3d04 	str.w	r3, [r1, #-4]!

	k_mem_slab_free(&mqtt_slab, (void **)&mem);
   16e32:	4808      	ldr	r0, [pc, #32]	; (16e54 <client_free+0x34>)
   16e34:	f00f fec2 	bl	26bbc <k_mem_slab_free>
		mqtt_free(client->tx_buf);
		client->tx_buf = NULL;
   16e38:	6425      	str	r5, [r4, #64]	; 0x40
	}

	if (client->rx_buf != NULL) {
   16e3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   16e3c:	b13b      	cbz	r3, 16e4e <client_free+0x2e>
	void *mem = ptr;
   16e3e:	a902      	add	r1, sp, #8
   16e40:	f841 3d04 	str.w	r3, [r1, #-4]!
	k_mem_slab_free(&mqtt_slab, (void **)&mem);
   16e44:	4803      	ldr	r0, [pc, #12]	; (16e54 <client_free+0x34>)
   16e46:	f00f feb9 	bl	26bbc <k_mem_slab_free>
		mqtt_free(client->rx_buf);
		client->rx_buf = NULL;
   16e4a:	2300      	movs	r3, #0
   16e4c:	6463      	str	r3, [r4, #68]	; 0x44
	}
}
   16e4e:	b003      	add	sp, #12
   16e50:	bd30      	pop	{r4, r5, pc}
   16e52:	bf00      	nop
   16e54:	20020cbc 	.word	0x20020cbc

00016e58 <disconnect_event_notify>:
		if (mqtt_client[index] == client) {
   16e58:	4b0f      	ldr	r3, [pc, #60]	; (16e98 <disconnect_event_notify+0x40>)
 *
 * @param[in] client Identifies the client for which the procedure is requested.
 * @param[in] result Reason for disconnection.
 */
static void disconnect_event_notify(struct mqtt_client *client, int result)
{
   16e5a:	b510      	push	{r4, lr}
		if (mqtt_client[index] == client) {
   16e5c:	681a      	ldr	r2, [r3, #0]
{
   16e5e:	b088      	sub	sp, #32
		if (mqtt_client[index] == client) {
   16e60:	4290      	cmp	r0, r2
	const u32_t client_index = get_client_index(client);
	struct mqtt_evt evt;

	/* Remove the client from internal table. */
	if (client_index != MQTT_MAX_CLIENTS) {
		mqtt_client[client_index] = NULL;
   16e62:	bf04      	itt	eq
   16e64:	2200      	moveq	r2, #0
   16e66:	601a      	streq	r2, [r3, #0]
	}

	/* Determine appropriate event to generate. */
	if (MQTT_VERIFY_STATE(client, MQTT_STATE_CONNECTED) ||
   16e68:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   16e6a:	4604      	mov	r4, r0
	if (MQTT_VERIFY_STATE(client, MQTT_STATE_CONNECTED) ||
   16e6c:	f013 0314 	ands.w	r3, r3, #20
	    MQTT_VERIFY_STATE(client, MQTT_STATE_DISCONNECTING)) {
		evt.type = MQTT_EVT_DISCONNECT;
   16e70:	bf13      	iteet	ne
   16e72:	2301      	movne	r3, #1
		evt.result = result;
	} else {
		evt.type = MQTT_EVT_CONNACK;
   16e74:	f88d 3000 	strbeq.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   16e78:	f06f 036e 	mvneq.w	r3, #110	; 0x6e
		evt.result = result;
   16e7c:	9107      	strne	r1, [sp, #28]
		evt.type = MQTT_EVT_DISCONNECT;
   16e7e:	bf14      	ite	ne
   16e80:	f88d 3000 	strbne.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   16e84:	9307      	streq	r3, [sp, #28]
	}

	/* Free the instance. */
	client_free(client);
   16e86:	f7ff ffcb 	bl	16e20 <client_free>

	/* Notify application. */
	event_notify(client, &evt, MQTT_EVT_FLAG_INSTANCE_RESET);
   16e8a:	2201      	movs	r2, #1
   16e8c:	4669      	mov	r1, sp
   16e8e:	4620      	mov	r0, r4
   16e90:	f019 f8c2 	bl	30018 <event_notify>
}
   16e94:	b008      	add	sp, #32
   16e96:	bd10      	pop	{r4, pc}
   16e98:	20020ca4 	.word	0x20020ca4

00016e9c <mqtt_init>:

	return 0;
}

int mqtt_init(void)
{
   16e9c:	b510      	push	{r4, lr}
	mqtt_mutex_init();

	mqtt_mutex_lock();

	memset(mqtt_client, 0, sizeof(mqtt_client));
   16e9e:	2400      	movs	r4, #0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)
   16ea0:	4808      	ldr	r0, [pc, #32]	; (16ec4 <mqtt_init+0x28>)
   16ea2:	f019 fccc 	bl	3083e <z_impl_k_mutex_init>
	mqtt_mutex_lock();
   16ea6:	f7ff ffb3 	bl	16e10 <mqtt_mutex_lock>
	memset(mqtt_client, 0, sizeof(mqtt_client));
   16eaa:	4b07      	ldr	r3, [pc, #28]	; (16ec8 <mqtt_init+0x2c>)

	k_mem_slab_init(&mqtt_slab, mqtt_slab_buffer,
   16eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
	memset(mqtt_client, 0, sizeof(mqtt_client));
   16eb0:	601c      	str	r4, [r3, #0]
	k_mem_slab_init(&mqtt_slab, mqtt_slab_buffer,
   16eb2:	4906      	ldr	r1, [pc, #24]	; (16ecc <mqtt_init+0x30>)
   16eb4:	2302      	movs	r3, #2
   16eb6:	4806      	ldr	r0, [pc, #24]	; (16ed0 <mqtt_init+0x34>)
   16eb8:	f00f fdd8 	bl	26a6c <k_mem_slab_init>
			MQTT_MAX_PACKET_LENGTH, TOTAL_BUFFER_COUNT);

	mqtt_mutex_unlock();
   16ebc:	f7ff ffa2 	bl	16e04 <mqtt_mutex_unlock>

	return 0;
}
   16ec0:	4620      	mov	r0, r4
   16ec2:	bd10      	pop	{r4, pc}
   16ec4:	20020ca8 	.word	0x20020ca8
   16ec8:	20020ca4 	.word	0x20020ca4
   16ecc:	20020cd8 	.word	0x20020cd8
   16ed0:	20020cbc 	.word	0x20020cbc

00016ed4 <mqtt_client_init>:

void mqtt_client_init(struct mqtt_client *client)
{
   16ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK_VOID(client);
   16ed6:	4604      	mov	r4, r0
   16ed8:	b310      	cbz	r0, 16f20 <mqtt_client_init+0x4c>

	mqtt_mutex_lock();
   16eda:	f7ff ff99 	bl	16e10 <mqtt_mutex_lock>
   16ede:	2258      	movs	r2, #88	; 0x58
   16ee0:	2100      	movs	r1, #0
   16ee2:	4620      	mov	r0, r4
   16ee4:	f013 fcfe 	bl	2a8e4 <memset>
	client->protocol_version = MQTT_VERSION_3_1_1;
   16ee8:	2304      	movs	r3, #4
	MQTT_STATE_INIT(client);
   16eea:	2500      	movs	r5, #0
	client->protocol_version = MQTT_VERSION_3_1_1;
   16eec:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
	client->clean_session = 1;
   16ef0:	2302      	movs	r3, #2
	if (k_mem_slab_alloc(&mqtt_slab, (void **)&mem, K_NO_WAIT) < 0) {
   16ef2:	462a      	mov	r2, r5
   16ef4:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
   16ef8:	a901      	add	r1, sp, #4
   16efa:	480a      	ldr	r0, [pc, #40]	; (16f24 <mqtt_client_init+0x50>)
   16efc:	f00f fde4 	bl	26ac8 <k_mem_slab_alloc>
   16f00:	42a8      	cmp	r0, r5
	return mem;
   16f02:	bfa8      	it	ge
   16f04:	9d01      	ldrge	r5, [sp, #4]
	if (k_mem_slab_alloc(&mqtt_slab, (void **)&mem, K_NO_WAIT) < 0) {
   16f06:	2200      	movs	r2, #0
	client->tx_buf = mqtt_malloc(MQTT_MAX_PACKET_LENGTH);
   16f08:	6425      	str	r5, [r4, #64]	; 0x40
   16f0a:	a901      	add	r1, sp, #4
   16f0c:	4805      	ldr	r0, [pc, #20]	; (16f24 <mqtt_client_init+0x50>)
   16f0e:	f00f fddb 	bl	26ac8 <k_mem_slab_alloc>
   16f12:	2800      	cmp	r0, #0
		return NULL;
   16f14:	bfb4      	ite	lt
   16f16:	2300      	movlt	r3, #0
	return mem;
   16f18:	9b01      	ldrge	r3, [sp, #4]
	client->rx_buf = mqtt_malloc(MQTT_MAX_PACKET_LENGTH);
   16f1a:	6463      	str	r3, [r4, #68]	; 0x44

	client_init(client);

	mqtt_mutex_unlock();
   16f1c:	f7ff ff72 	bl	16e04 <mqtt_mutex_unlock>
}
   16f20:	b003      	add	sp, #12
   16f22:	bd30      	pop	{r4, r5, pc}
   16f24:	20020cbc 	.word	0x20020cbc

00016f28 <mqtt_connect>:

int mqtt_connect(struct mqtt_client *client)
{
   16f28:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* Look for a free instance if available. */
	int err_code;
	u32_t client_index;

	NULL_PARAM_CHECK(client);
   16f2a:	4604      	mov	r4, r0
   16f2c:	2800      	cmp	r0, #0
   16f2e:	d045      	beq.n	16fbc <mqtt_connect+0x94>
	NULL_PARAM_CHECK(client->client_id.utf8);
   16f30:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   16f32:	2b00      	cmp	r3, #0
   16f34:	d042      	beq.n	16fbc <mqtt_connect+0x94>

	mqtt_mutex_lock();
   16f36:	f7ff ff6b 	bl	16e10 <mqtt_mutex_lock>

	for (client_index = 0; client_index < MQTT_MAX_CLIENTS;
	     client_index++) {
		if (mqtt_client[client_index] == NULL) {
   16f3a:	4b22      	ldr	r3, [pc, #136]	; (16fc4 <mqtt_connect+0x9c>)
   16f3c:	681a      	ldr	r2, [r3, #0]
   16f3e:	461e      	mov	r6, r3
   16f40:	b14a      	cbz	r2, 16f56 <mqtt_connect+0x2e>
		}
	}

	if ((client_index == MQTT_MAX_CLIENTS) || (client->tx_buf == NULL) ||
	    (client->rx_buf == NULL)) {
		client_free(client);
   16f42:	4620      	mov	r0, r4
   16f44:	f7ff ff6c 	bl	16e20 <client_free>
		err_code = -ENOMEM;
   16f48:	f06f 050b 	mvn.w	r5, #11
			mqtt_client[client_index] = NULL;
			err_code = -ECONNREFUSED;
		}
	}

	mqtt_mutex_unlock();
   16f4c:	f7ff ff5a 	bl	16e04 <mqtt_mutex_unlock>

	return err_code;
}
   16f50:	4628      	mov	r0, r5
   16f52:	b002      	add	sp, #8
   16f54:	bd70      	pop	{r4, r5, r6, pc}
			mqtt_client[client_index] = client;
   16f56:	601c      	str	r4, [r3, #0]
	if ((client_index == MQTT_MAX_CLIENTS) || (client->tx_buf == NULL) ||
   16f58:	6c23      	ldr	r3, [r4, #64]	; 0x40
   16f5a:	2b00      	cmp	r3, #0
   16f5c:	d0f1      	beq.n	16f42 <mqtt_connect+0x1a>
   16f5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   16f60:	2b00      	cmp	r3, #0
   16f62:	d0ee      	beq.n	16f42 <mqtt_connect+0x1a>
	int err_code = mqtt_transport_connect(client);
   16f64:	4620      	mov	r0, r4
   16f66:	f7ff ff25 	bl	16db4 <mqtt_transport_connect>
	if (err_code == 0) {
   16f6a:	b9f8      	cbnz	r0, 16fac <mqtt_connect+0x84>
		MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   16f6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		err_code = connect_request_encode(client, &packet, &packetlen);
   16f6e:	aa01      	add	r2, sp, #4
		MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   16f70:	f043 0302 	orr.w	r3, r3, #2
   16f74:	63e3      	str	r3, [r4, #60]	; 0x3c
		err_code = connect_request_encode(client, &packet, &packetlen);
   16f76:	4669      	mov	r1, sp
   16f78:	4620      	mov	r0, r4
   16f7a:	f7ff fd3f 	bl	169fc <connect_request_encode>
		if (err_code == 0) {
   16f7e:	b990      	cbnz	r0, 16fa6 <mqtt_connect+0x7e>
			err_code = mqtt_transport_write(client, packet,
   16f80:	e9dd 1200 	ldrd	r1, r2, [sp]
			MQTT_SET_STATE(client, MQTT_STATE_PENDING_WRITE);
   16f84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			err_code = mqtt_transport_write(client, packet,
   16f86:	4620      	mov	r0, r4
			MQTT_SET_STATE(client, MQTT_STATE_PENDING_WRITE);
   16f88:	f043 0308 	orr.w	r3, r3, #8
   16f8c:	63e3      	str	r3, [r4, #60]	; 0x3c
			err_code = mqtt_transport_write(client, packet,
   16f8e:	f7ff ff19 	bl	16dc4 <mqtt_transport_write>
			MQTT_RESET_STATE(client, MQTT_STATE_PENDING_WRITE);
   16f92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		if (err_code == 0) {
   16f94:	4605      	mov	r5, r0
			MQTT_RESET_STATE(client, MQTT_STATE_PENDING_WRITE);
   16f96:	f023 0308 	bic.w	r3, r3, #8
   16f9a:	63e3      	str	r3, [r4, #60]	; 0x3c
		if (err_code == 0) {
   16f9c:	b918      	cbnz	r0, 16fa6 <mqtt_connect+0x7e>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   16f9e:	f019 fd0b 	bl	309b8 <z_impl_k_uptime_get_32>
			client->last_activity = mqtt_sys_tick_in_ms_get();
   16fa2:	63a0      	str	r0, [r4, #56]	; 0x38
   16fa4:	e7d2      	b.n	16f4c <mqtt_connect+0x24>
			client_abort(client);
   16fa6:	4620      	mov	r0, r4
   16fa8:	f019 f845 	bl	30036 <client_abort>
			client_free(client);
   16fac:	4620      	mov	r0, r4
   16fae:	f7ff ff37 	bl	16e20 <client_free>
			mqtt_client[client_index] = NULL;
   16fb2:	2300      	movs	r3, #0
			err_code = -ECONNREFUSED;
   16fb4:	f06f 056e 	mvn.w	r5, #110	; 0x6e
			mqtt_client[client_index] = NULL;
   16fb8:	6033      	str	r3, [r6, #0]
   16fba:	e7c7      	b.n	16f4c <mqtt_connect+0x24>
	NULL_PARAM_CHECK(client);
   16fbc:	f06f 0515 	mvn.w	r5, #21
   16fc0:	e7c6      	b.n	16f50 <mqtt_connect+0x28>
   16fc2:	bf00      	nop
   16fc4:	20020ca4 	.word	0x20020ca4

00016fc8 <mqtt_live>:

	return 0;
}

int mqtt_live(void)
{
   16fc8:	b538      	push	{r3, r4, r5, lr}
	u32_t elapsed_time;
	u32_t index;

	mqtt_mutex_lock();
   16fca:	f7ff ff21 	bl	16e10 <mqtt_mutex_lock>

	for (index = 0; index < MQTT_MAX_CLIENTS; index++) {
		struct mqtt_client *client = mqtt_client[index];
   16fce:	4b0d      	ldr	r3, [pc, #52]	; (17004 <mqtt_live+0x3c>)
   16fd0:	681c      	ldr	r4, [r3, #0]

		if (client != NULL) {
   16fd2:	b134      	cbz	r4, 16fe2 <mqtt_live+0x1a>
			if (MQTT_VERIFY_STATE(client,
   16fd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   16fd6:	06db      	lsls	r3, r3, #27
   16fd8:	d507      	bpl.n	16fea <mqtt_live+0x22>
					      MQTT_STATE_DISCONNECTING)) {
				client_disconnect(client, 0);
   16fda:	2100      	movs	r1, #0
   16fdc:	4620      	mov	r0, r4
   16fde:	f019 f838 	bl	30052 <client_disconnect>
				}
			}
		}
	}

	mqtt_mutex_unlock();
   16fe2:	f7ff ff0f 	bl	16e04 <mqtt_mutex_unlock>

	return 0;
}
   16fe6:	2000      	movs	r0, #0
   16fe8:	bd38      	pop	{r3, r4, r5, pc}
							client->last_activity);
   16fea:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   16fec:	f019 fce4 	bl	309b8 <z_impl_k_uptime_get_32>
				if ((MQTT_KEEPALIVE > 0) &&
   16ff0:	4b05      	ldr	r3, [pc, #20]	; (17008 <mqtt_live+0x40>)
   16ff2:	1b5b      	subs	r3, r3, r5
   16ff4:	4418      	add	r0, r3
   16ff6:	4b05      	ldr	r3, [pc, #20]	; (1700c <mqtt_live+0x44>)
   16ff8:	4298      	cmp	r0, r3
   16ffa:	d8f2      	bhi.n	16fe2 <mqtt_live+0x1a>
					(void)mqtt_ping(client);
   16ffc:	4620      	mov	r0, r4
   16ffe:	f019 f900 	bl	30202 <mqtt_ping>
   17002:	e7ee      	b.n	16fe2 <mqtt_live+0x1a>
   17004:	20020ca4 	.word	0x20020ca4
   17008:	fffe2b40 	.word	0xfffe2b40
   1700c:	7ffe2b3f 	.word	0x7ffe2b3f

00017010 <close>:
{
   17010:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   17012:	4c10      	ldr	r4, [pc, #64]	; (17054 <close+0x44>)
{
   17014:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   17016:	6823      	ldr	r3, [r4, #0]
   17018:	b94b      	cbnz	r3, 1702e <close+0x1e>
   1701a:	490f      	ldr	r1, [pc, #60]	; (17058 <close+0x48>)
   1701c:	480f      	ldr	r0, [pc, #60]	; (1705c <close+0x4c>)
   1701e:	2321      	movs	r3, #33	; 0x21
   17020:	4a0f      	ldr	r2, [pc, #60]	; (17060 <close+0x50>)
   17022:	f017 fb06 	bl	2e632 <printk>
   17026:	2121      	movs	r1, #33	; 0x21
   17028:	480d      	ldr	r0, [pc, #52]	; (17060 <close+0x50>)
   1702a:	f017 fb0f 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   1702e:	6823      	ldr	r3, [r4, #0]
   17030:	685b      	ldr	r3, [r3, #4]
   17032:	b94b      	cbnz	r3, 17048 <close+0x38>
   17034:	490b      	ldr	r1, [pc, #44]	; (17064 <close+0x54>)
   17036:	4809      	ldr	r0, [pc, #36]	; (1705c <close+0x4c>)
   17038:	2322      	movs	r3, #34	; 0x22
   1703a:	4a09      	ldr	r2, [pc, #36]	; (17060 <close+0x50>)
   1703c:	f017 faf9 	bl	2e632 <printk>
   17040:	2122      	movs	r1, #34	; 0x22
   17042:	4807      	ldr	r0, [pc, #28]	; (17060 <close+0x50>)
   17044:	f017 fb02 	bl	2e64c <assert_post_action>
	return socket_ops->close(sock);
   17048:	6823      	ldr	r3, [r4, #0]
   1704a:	4628      	mov	r0, r5
}
   1704c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   17050:	685b      	ldr	r3, [r3, #4]
   17052:	4718      	bx	r3
   17054:	20020994 	.word	0x20020994
   17058:	000356ae 	.word	0x000356ae
   1705c:	0003452c 	.word	0x0003452c
   17060:	00035678 	.word	0x00035678
   17064:	000356b9 	.word	0x000356b9

00017068 <setsockopt.constprop.2>:
static inline int setsockopt(int sock, int level, int optname,
   17068:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   1706c:	4c15      	ldr	r4, [pc, #84]	; (170c4 <setsockopt.constprop.2+0x5c>)
static inline int setsockopt(int sock, int level, int optname,
   1706e:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   17070:	6823      	ldr	r3, [r4, #0]
static inline int setsockopt(int sock, int level, int optname,
   17072:	4605      	mov	r5, r0
   17074:	460e      	mov	r6, r1
   17076:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   17078:	b94b      	cbnz	r3, 1708e <setsockopt.constprop.2+0x26>
   1707a:	4913      	ldr	r1, [pc, #76]	; (170c8 <setsockopt.constprop.2+0x60>)
   1707c:	4813      	ldr	r0, [pc, #76]	; (170cc <setsockopt.constprop.2+0x64>)
   1707e:	2357      	movs	r3, #87	; 0x57
   17080:	4a13      	ldr	r2, [pc, #76]	; (170d0 <setsockopt.constprop.2+0x68>)
   17082:	f017 fad6 	bl	2e632 <printk>
   17086:	2157      	movs	r1, #87	; 0x57
   17088:	4811      	ldr	r0, [pc, #68]	; (170d0 <setsockopt.constprop.2+0x68>)
   1708a:	f017 fadf 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   1708e:	6823      	ldr	r3, [r4, #0]
   17090:	69db      	ldr	r3, [r3, #28]
   17092:	b94b      	cbnz	r3, 170a8 <setsockopt.constprop.2+0x40>
   17094:	490f      	ldr	r1, [pc, #60]	; (170d4 <setsockopt.constprop.2+0x6c>)
   17096:	480d      	ldr	r0, [pc, #52]	; (170cc <setsockopt.constprop.2+0x64>)
   17098:	2358      	movs	r3, #88	; 0x58
   1709a:	4a0d      	ldr	r2, [pc, #52]	; (170d0 <setsockopt.constprop.2+0x68>)
   1709c:	f017 fac9 	bl	2e632 <printk>
   170a0:	2158      	movs	r1, #88	; 0x58
   170a2:	480b      	ldr	r0, [pc, #44]	; (170d0 <setsockopt.constprop.2+0x68>)
   170a4:	f017 fad2 	bl	2e64c <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   170a8:	6823      	ldr	r3, [r4, #0]
   170aa:	f8cd 8000 	str.w	r8, [sp]
   170ae:	69dc      	ldr	r4, [r3, #28]
   170b0:	4632      	mov	r2, r6
   170b2:	463b      	mov	r3, r7
   170b4:	f44f 718d 	mov.w	r1, #282	; 0x11a
   170b8:	4628      	mov	r0, r5
   170ba:	47a0      	blx	r4
}
   170bc:	b002      	add	sp, #8
   170be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   170c2:	bf00      	nop
   170c4:	20020994 	.word	0x20020994
   170c8:	000356ae 	.word	0x000356ae
   170cc:	0003452c 	.word	0x0003452c
   170d0:	00035678 	.word	0x00035678
   170d4:	00035714 	.word	0x00035714

000170d8 <mqtt_client_tls_connect>:
 * @param[in] client Identifies the client on which the procedure is requested.
 *
 * @retval 0 or an error code indicating reason for failure.
 */
int mqtt_client_tls_connect(struct mqtt_client *client)
{
   170d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   170dc:	4d48      	ldr	r5, [pc, #288]	; (17200 <mqtt_client_tls_connect+0x128>)
	const struct sockaddr *broker = client->broker;
   170de:	6a07      	ldr	r7, [r0, #32]
   170e0:	682b      	ldr	r3, [r5, #0]
{
   170e2:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = socket(broker->sa_family,
   170e4:	883e      	ldrh	r6, [r7, #0]
   170e6:	b94b      	cbnz	r3, 170fc <mqtt_client_tls_connect+0x24>
   170e8:	4946      	ldr	r1, [pc, #280]	; (17204 <mqtt_client_tls_connect+0x12c>)
   170ea:	4847      	ldr	r0, [pc, #284]	; (17208 <mqtt_client_tls_connect+0x130>)
   170ec:	2319      	movs	r3, #25
   170ee:	4a47      	ldr	r2, [pc, #284]	; (1720c <mqtt_client_tls_connect+0x134>)
   170f0:	f017 fa9f 	bl	2e632 <printk>
   170f4:	2119      	movs	r1, #25
   170f6:	4845      	ldr	r0, [pc, #276]	; (1720c <mqtt_client_tls_connect+0x134>)
   170f8:	f017 faa8 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   170fc:	682b      	ldr	r3, [r5, #0]
   170fe:	681b      	ldr	r3, [r3, #0]
   17100:	b94b      	cbnz	r3, 17116 <mqtt_client_tls_connect+0x3e>
   17102:	4943      	ldr	r1, [pc, #268]	; (17210 <mqtt_client_tls_connect+0x138>)
   17104:	4840      	ldr	r0, [pc, #256]	; (17208 <mqtt_client_tls_connect+0x130>)
   17106:	231a      	movs	r3, #26
   17108:	4a40      	ldr	r2, [pc, #256]	; (1720c <mqtt_client_tls_connect+0x134>)
   1710a:	f017 fa92 	bl	2e632 <printk>
   1710e:	211a      	movs	r1, #26
   17110:	483e      	ldr	r0, [pc, #248]	; (1720c <mqtt_client_tls_connect+0x134>)
   17112:	f017 fa9b 	bl	2e64c <assert_post_action>
	return socket_ops->socket(family, type, proto);
   17116:	682b      	ldr	r3, [r5, #0]
   17118:	f44f 7281 	mov.w	r2, #258	; 0x102
   1711c:	681b      	ldr	r3, [r3, #0]
   1711e:	2101      	movs	r1, #1
   17120:	4630      	mov	r0, r6
   17122:	4798      	blx	r3
					    SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   17124:	2800      	cmp	r0, #0
	client->transport.tls.sock = socket(broker->sa_family,
   17126:	6060      	str	r0, [r4, #4]
	if (client->transport.tls.sock < 0) {
   17128:	da05      	bge.n	17136 <mqtt_client_tls_connect+0x5e>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void)close(client->transport.tls.sock);
	return -errno;
   1712a:	f017 fb0e 	bl	2e74a <__errno>
   1712e:	6800      	ldr	r0, [r0, #0]
   17130:	4240      	negs	r0, r0
}
   17132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = setsockopt(client->transport.tls.sock, SOL_TLS, TLS_PEER_VERIFY,
   17136:	2304      	movs	r3, #4
   17138:	f104 0208 	add.w	r2, r4, #8
   1713c:	2105      	movs	r1, #5
   1713e:	f7ff ff93 	bl	17068 <setsockopt.constprop.2>
	if (ret < 0) {
   17142:	2800      	cmp	r0, #0
   17144:	da03      	bge.n	1714e <mqtt_client_tls_connect+0x76>
	(void)close(client->transport.tls.sock);
   17146:	6860      	ldr	r0, [r4, #4]
   17148:	f7ff ff62 	bl	17010 <close>
   1714c:	e7ed      	b.n	1712a <mqtt_client_tls_connect+0x52>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   1714e:	6922      	ldr	r2, [r4, #16]
   17150:	2a00      	cmp	r2, #0
   17152:	d131      	bne.n	171b8 <mqtt_client_tls_connect+0xe0>
	if (tls_config->seg_tag_list != NULL && tls_config->sec_tag_count > 0) {
   17154:	69a2      	ldr	r2, [r4, #24]
   17156:	2a00      	cmp	r2, #0
   17158:	d139      	bne.n	171ce <mqtt_client_tls_connect+0xf6>
	if (tls_config->hostname) {
   1715a:	69e6      	ldr	r6, [r4, #28]
   1715c:	2e00      	cmp	r6, #0
   1715e:	d141      	bne.n	171e4 <mqtt_client_tls_connect+0x10c>
	if (broker->sa_family == AF_INET) {
   17160:	883b      	ldrh	r3, [r7, #0]
	ret = connect(client->transport.tls.sock, client->broker,
   17162:	6866      	ldr	r6, [r4, #4]
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   17164:	2b01      	cmp	r3, #1
	__ASSERT_NO_MSG(socket_ops);
   17166:	682b      	ldr	r3, [r5, #0]
   17168:	bf0c      	ite	eq
   1716a:	f04f 0808 	moveq.w	r8, #8
   1716e:	f04f 0818 	movne.w	r8, #24
	ret = connect(client->transport.tls.sock, client->broker,
   17172:	6a27      	ldr	r7, [r4, #32]
   17174:	b94b      	cbnz	r3, 1718a <mqtt_client_tls_connect+0xb2>
   17176:	4923      	ldr	r1, [pc, #140]	; (17204 <mqtt_client_tls_connect+0x12c>)
   17178:	4823      	ldr	r0, [pc, #140]	; (17208 <mqtt_client_tls_connect+0x130>)
   1717a:	2345      	movs	r3, #69	; 0x45
   1717c:	4a23      	ldr	r2, [pc, #140]	; (1720c <mqtt_client_tls_connect+0x134>)
   1717e:	f017 fa58 	bl	2e632 <printk>
   17182:	2145      	movs	r1, #69	; 0x45
   17184:	4821      	ldr	r0, [pc, #132]	; (1720c <mqtt_client_tls_connect+0x134>)
   17186:	f017 fa61 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   1718a:	682b      	ldr	r3, [r5, #0]
   1718c:	695b      	ldr	r3, [r3, #20]
   1718e:	b94b      	cbnz	r3, 171a4 <mqtt_client_tls_connect+0xcc>
   17190:	4920      	ldr	r1, [pc, #128]	; (17214 <mqtt_client_tls_connect+0x13c>)
   17192:	481d      	ldr	r0, [pc, #116]	; (17208 <mqtt_client_tls_connect+0x130>)
   17194:	2346      	movs	r3, #70	; 0x46
   17196:	4a1d      	ldr	r2, [pc, #116]	; (1720c <mqtt_client_tls_connect+0x134>)
   17198:	f017 fa4b 	bl	2e632 <printk>
   1719c:	2146      	movs	r1, #70	; 0x46
   1719e:	481b      	ldr	r0, [pc, #108]	; (1720c <mqtt_client_tls_connect+0x134>)
   171a0:	f017 fa54 	bl	2e64c <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   171a4:	682b      	ldr	r3, [r5, #0]
   171a6:	4642      	mov	r2, r8
   171a8:	695b      	ldr	r3, [r3, #20]
   171aa:	4639      	mov	r1, r7
   171ac:	4630      	mov	r0, r6
   171ae:	4798      	blx	r3
	if (ret < 0) {
   171b0:	2800      	cmp	r0, #0
   171b2:	dbc8      	blt.n	17146 <mqtt_client_tls_connect+0x6e>
	return 0;
   171b4:	2000      	movs	r0, #0
   171b6:	e7bc      	b.n	17132 <mqtt_client_tls_connect+0x5a>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   171b8:	68e3      	ldr	r3, [r4, #12]
   171ba:	2b00      	cmp	r3, #0
   171bc:	d0ca      	beq.n	17154 <mqtt_client_tls_connect+0x7c>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   171be:	009b      	lsls	r3, r3, #2
   171c0:	2103      	movs	r1, #3
   171c2:	6860      	ldr	r0, [r4, #4]
   171c4:	f7ff ff50 	bl	17068 <setsockopt.constprop.2>
		if (ret < 0) {
   171c8:	2800      	cmp	r0, #0
   171ca:	dac3      	bge.n	17154 <mqtt_client_tls_connect+0x7c>
   171cc:	e7bb      	b.n	17146 <mqtt_client_tls_connect+0x6e>
	if (tls_config->seg_tag_list != NULL && tls_config->sec_tag_count > 0) {
   171ce:	6963      	ldr	r3, [r4, #20]
   171d0:	2b00      	cmp	r3, #0
   171d2:	d0c2      	beq.n	1715a <mqtt_client_tls_connect+0x82>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   171d4:	009b      	lsls	r3, r3, #2
   171d6:	2101      	movs	r1, #1
   171d8:	6860      	ldr	r0, [r4, #4]
   171da:	f7ff ff45 	bl	17068 <setsockopt.constprop.2>
		if (ret < 0) {
   171de:	2800      	cmp	r0, #0
   171e0:	dabb      	bge.n	1715a <mqtt_client_tls_connect+0x82>
   171e2:	e7b0      	b.n	17146 <mqtt_client_tls_connect+0x6e>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   171e4:	4630      	mov	r0, r6
   171e6:	f8d4 8004 	ldr.w	r8, [r4, #4]
   171ea:	f013 fd67 	bl	2acbc <strlen>
   171ee:	4632      	mov	r2, r6
   171f0:	4603      	mov	r3, r0
   171f2:	2102      	movs	r1, #2
   171f4:	4640      	mov	r0, r8
   171f6:	f7ff ff37 	bl	17068 <setsockopt.constprop.2>
		if (ret < 0) {
   171fa:	2800      	cmp	r0, #0
   171fc:	dab0      	bge.n	17160 <mqtt_client_tls_connect+0x88>
   171fe:	e7a2      	b.n	17146 <mqtt_client_tls_connect+0x6e>
   17200:	20020994 	.word	0x20020994
   17204:	000356ae 	.word	0x000356ae
   17208:	0003452c 	.word	0x0003452c
   1720c:	00035678 	.word	0x00035678
   17210:	000356cb 	.word	0x000356cb
   17214:	000356de 	.word	0x000356de

00017218 <mqtt_client_tls_write>:
 *
 * @retval 0 or an error code indicating reason for failure.
 */
int mqtt_client_tls_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   17218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1721c:	4680      	mov	r8, r0
   1721e:	4689      	mov	r9, r1
   17220:	4617      	mov	r7, r2
	u32_t offset = 0;
   17222:	2400      	movs	r4, #0
	__ASSERT_NO_MSG(socket_ops);
   17224:	4d1d      	ldr	r5, [pc, #116]	; (1729c <mqtt_client_tls_write+0x84>)
	int ret;

	while (offset < datalen) {
   17226:	42bc      	cmp	r4, r7
   17228:	d301      	bcc.n	1722e <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   1722a:	2000      	movs	r0, #0
   1722c:	e031      	b.n	17292 <mqtt_client_tls_write+0x7a>
		ret = send(client->transport.tls.sock, data + offset,
   1722e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   17232:	eb09 0a04 	add.w	sl, r9, r4
   17236:	461e      	mov	r6, r3
   17238:	4b19      	ldr	r3, [pc, #100]	; (172a0 <mqtt_client_tls_write+0x88>)
   1723a:	eba7 0b04 	sub.w	fp, r7, r4
   1723e:	681b      	ldr	r3, [r3, #0]
   17240:	b94b      	cbnz	r3, 17256 <mqtt_client_tls_write+0x3e>
   17242:	4918      	ldr	r1, [pc, #96]	; (172a4 <mqtt_client_tls_write+0x8c>)
   17244:	4818      	ldr	r0, [pc, #96]	; (172a8 <mqtt_client_tls_write+0x90>)
   17246:	237e      	movs	r3, #126	; 0x7e
   17248:	462a      	mov	r2, r5
   1724a:	f017 f9f2 	bl	2e632 <printk>
   1724e:	217e      	movs	r1, #126	; 0x7e
   17250:	4628      	mov	r0, r5
   17252:	f017 f9fb 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   17256:	4b12      	ldr	r3, [pc, #72]	; (172a0 <mqtt_client_tls_write+0x88>)
   17258:	681b      	ldr	r3, [r3, #0]
   1725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1725c:	b94b      	cbnz	r3, 17272 <mqtt_client_tls_write+0x5a>
   1725e:	4913      	ldr	r1, [pc, #76]	; (172ac <mqtt_client_tls_write+0x94>)
   17260:	4811      	ldr	r0, [pc, #68]	; (172a8 <mqtt_client_tls_write+0x90>)
   17262:	237f      	movs	r3, #127	; 0x7f
   17264:	462a      	mov	r2, r5
   17266:	f017 f9e4 	bl	2e632 <printk>
   1726a:	217f      	movs	r1, #127	; 0x7f
   1726c:	4628      	mov	r0, r5
   1726e:	f017 f9ed 	bl	2e64c <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   17272:	4b0b      	ldr	r3, [pc, #44]	; (172a0 <mqtt_client_tls_write+0x88>)
   17274:	4630      	mov	r0, r6
   17276:	681b      	ldr	r3, [r3, #0]
   17278:	465a      	mov	r2, fp
   1727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1727c:	4651      	mov	r1, sl
   1727e:	469c      	mov	ip, r3
   17280:	2300      	movs	r3, #0
   17282:	4666      	mov	r6, ip
   17284:	47b0      	blx	r6
		if (ret < 0) {
   17286:	2800      	cmp	r0, #0
   17288:	da05      	bge.n	17296 <mqtt_client_tls_write+0x7e>
			return -errno;
   1728a:	f017 fa5e 	bl	2e74a <__errno>
   1728e:	6800      	ldr	r0, [r0, #0]
   17290:	4240      	negs	r0, r0
}
   17292:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += ret;
   17296:	4404      	add	r4, r0
   17298:	e7c5      	b.n	17226 <mqtt_client_tls_write+0xe>
   1729a:	bf00      	nop
   1729c:	00035678 	.word	0x00035678
   172a0:	20020994 	.word	0x20020994
   172a4:	000356ae 	.word	0x000356ae
   172a8:	0003452c 	.word	0x0003452c
   172ac:	00035703 	.word	0x00035703

000172b0 <mqtt_client_tls_read>:
 * @param[in] datalen Size of memory provided for the operation.
 *
 * @retval 0 or an error code indicating reason for failure.
 */
int mqtt_client_tls_read(struct mqtt_client *client, u8_t *data, u32_t *datalen)
{
   172b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   172b4:	4c18      	ldr	r4, [pc, #96]	; (17318 <mqtt_client_tls_read+0x68>)
   172b6:	460f      	mov	r7, r1
   172b8:	6823      	ldr	r3, [r4, #0]
   172ba:	4615      	mov	r5, r2
	int ret;

	ret = recv(client->transport.tls.sock, data, *datalen, MSG_DONTWAIT);
   172bc:	6846      	ldr	r6, [r0, #4]
   172be:	f8d2 8000 	ldr.w	r8, [r2]
   172c2:	b94b      	cbnz	r3, 172d8 <mqtt_client_tls_read+0x28>
   172c4:	4915      	ldr	r1, [pc, #84]	; (1731c <mqtt_client_tls_read+0x6c>)
   172c6:	4816      	ldr	r0, [pc, #88]	; (17320 <mqtt_client_tls_read+0x70>)
   172c8:	2369      	movs	r3, #105	; 0x69
   172ca:	4a16      	ldr	r2, [pc, #88]	; (17324 <mqtt_client_tls_read+0x74>)
   172cc:	f017 f9b1 	bl	2e632 <printk>
   172d0:	2169      	movs	r1, #105	; 0x69
   172d2:	4814      	ldr	r0, [pc, #80]	; (17324 <mqtt_client_tls_read+0x74>)
   172d4:	f017 f9ba 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   172d8:	6823      	ldr	r3, [r4, #0]
   172da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   172dc:	b94b      	cbnz	r3, 172f2 <mqtt_client_tls_read+0x42>
   172de:	4912      	ldr	r1, [pc, #72]	; (17328 <mqtt_client_tls_read+0x78>)
   172e0:	480f      	ldr	r0, [pc, #60]	; (17320 <mqtt_client_tls_read+0x70>)
   172e2:	236a      	movs	r3, #106	; 0x6a
   172e4:	4a0f      	ldr	r2, [pc, #60]	; (17324 <mqtt_client_tls_read+0x74>)
   172e6:	f017 f9a4 	bl	2e632 <printk>
   172ea:	216a      	movs	r1, #106	; 0x6a
   172ec:	480d      	ldr	r0, [pc, #52]	; (17324 <mqtt_client_tls_read+0x74>)
   172ee:	f017 f9ad 	bl	2e64c <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   172f2:	6823      	ldr	r3, [r4, #0]
   172f4:	4642      	mov	r2, r8
   172f6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   172f8:	4639      	mov	r1, r7
   172fa:	2340      	movs	r3, #64	; 0x40
   172fc:	4630      	mov	r0, r6
   172fe:	47a0      	blx	r4
	if (ret < 0) {
   17300:	2800      	cmp	r0, #0
   17302:	da05      	bge.n	17310 <mqtt_client_tls_read+0x60>
		return -errno;
   17304:	f017 fa21 	bl	2e74a <__errno>
   17308:	6800      	ldr	r0, [r0, #0]
   1730a:	4240      	negs	r0, r0
	}

	*datalen = ret;
	return 0;
}
   1730c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*datalen = ret;
   17310:	6028      	str	r0, [r5, #0]
	return 0;
   17312:	2000      	movs	r0, #0
   17314:	e7fa      	b.n	1730c <mqtt_client_tls_read+0x5c>
   17316:	bf00      	nop
   17318:	20020994 	.word	0x20020994
   1731c:	000356ae 	.word	0x000356ae
   17320:	0003452c 	.word	0x0003452c
   17324:	00035678 	.word	0x00035678
   17328:	000356f2 	.word	0x000356f2

0001732c <nfsm_get_current_state>:
static nrf_cloud_event_handler_t m_event_handler;


enum nfsm_state nfsm_get_current_state(void)
{
	return m_current_state;
   1732c:	4b01      	ldr	r3, [pc, #4]	; (17334 <nfsm_get_current_state+0x8>)
   1732e:	7818      	ldrb	r0, [r3, #0]
}
   17330:	4770      	bx	lr
   17332:	bf00      	nop
   17334:	20027b1a 	.word	0x20027b1a

00017338 <nfsm_set_current_state_and_notify>:
void nfsm_set_current_state_and_notify(enum nfsm_state state,
				       const struct nrf_cloud_evt *evt)
{
	LOG_DBG("state: %d", state);

	m_current_state = state;
   17338:	4b04      	ldr	r3, [pc, #16]	; (1734c <nfsm_set_current_state_and_notify+0x14>)
   1733a:	7018      	strb	r0, [r3, #0]
	if ((m_event_handler != NULL) && (evt != NULL)) {
   1733c:	4b04      	ldr	r3, [pc, #16]	; (17350 <nfsm_set_current_state_and_notify+0x18>)
   1733e:	681b      	ldr	r3, [r3, #0]
   17340:	b113      	cbz	r3, 17348 <nfsm_set_current_state_and_notify+0x10>
   17342:	b109      	cbz	r1, 17348 <nfsm_set_current_state_and_notify+0x10>
		m_event_handler(evt);
   17344:	4608      	mov	r0, r1
   17346:	4718      	bx	r3
	}
}
   17348:	4770      	bx	lr
   1734a:	bf00      	nop
   1734c:	20027b1a 	.word	0x20027b1a
   17350:	20021cd8 	.word	0x20021cd8

00017354 <nrf_cloud_init>:

int nrf_cloud_init(const struct nrf_cloud_init_param *param)
{
   17354:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (m_current_state != STATE_IDLE) {
   17356:	4c0d      	ldr	r4, [pc, #52]	; (1738c <nrf_cloud_init+0x38>)
{
   17358:	4605      	mov	r5, r0
	if (m_current_state != STATE_IDLE) {
   1735a:	7823      	ldrb	r3, [r4, #0]
   1735c:	b983      	cbnz	r3, 17380 <nrf_cloud_init+0x2c>
		return -EACCES;
	}

	if (param->event_handler == NULL) {
   1735e:	6803      	ldr	r3, [r0, #0]
   17360:	b18b      	cbz	r3, 17386 <nrf_cloud_init+0x32>
		return -EINVAL;
	}

	/* Initialize the state machine. */
	err = nfsm_init();
   17362:	f019 fa0a 	bl	3077a <nfsm_init>
	if (err) {
   17366:	b950      	cbnz	r0, 1737e <nrf_cloud_init+0x2a>
		return err;
	}
	/* Initialize the encoder, decoder unit. */
	err = nrf_codec_init();
   17368:	f019 f859 	bl	3041e <nrf_codec_init>
	if (err) {
   1736c:	b938      	cbnz	r0, 1737e <nrf_cloud_init+0x2a>
		return err;
	}

	/* Initialize the transport. */
	err = nct_init();
   1736e:	f000 fdb1 	bl	17ed4 <nct_init>
	if (err) {
   17372:	b920      	cbnz	r0, 1737e <nrf_cloud_init+0x2a>
		return err;
	}

	m_event_handler = param->event_handler;
   17374:	4b06      	ldr	r3, [pc, #24]	; (17390 <nrf_cloud_init+0x3c>)
   17376:	682a      	ldr	r2, [r5, #0]
   17378:	601a      	str	r2, [r3, #0]
	m_current_state = STATE_INITIALIZED;
   1737a:	2301      	movs	r3, #1
   1737c:	7023      	strb	r3, [r4, #0]

	return 0;
}
   1737e:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
   17380:	f06f 000c 	mvn.w	r0, #12
   17384:	e7fb      	b.n	1737e <nrf_cloud_init+0x2a>
		return -EINVAL;
   17386:	f06f 0015 	mvn.w	r0, #21
   1738a:	e7f8      	b.n	1737e <nrf_cloud_init+0x2a>
   1738c:	20027b1a 	.word	0x20027b1a
   17390:	20021cd8 	.word	0x20021cd8

00017394 <nrf_cloud_connect>:

int nrf_cloud_connect(const struct nrf_cloud_connect_param *param)
{
	if (NOT_VALID_STATE(STATE_INITIALIZED)) {
   17394:	4b04      	ldr	r3, [pc, #16]	; (173a8 <nrf_cloud_connect+0x14>)
   17396:	781b      	ldrb	r3, [r3, #0]
   17398:	2b01      	cmp	r3, #1
   1739a:	d801      	bhi.n	173a0 <nrf_cloud_connect+0xc>
		return -EACCES;
	}
	return nct_connect();
   1739c:	f000 be62 	b.w	18064 <nct_connect>
}
   173a0:	f06f 000c 	mvn.w	r0, #12
   173a4:	4770      	bx	lr
   173a6:	bf00      	nop
   173a8:	20027b1a 	.word	0x20027b1a

000173ac <nrf_cloud_user_associate>:
	}
	return nct_disconnect();
}

int nrf_cloud_user_associate(const struct nrf_cloud_ua_param *param)
{
   173ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	if (param == NULL) {
   173ae:	4604      	mov	r4, r0
   173b0:	b1f0      	cbz	r0, 173f0 <nrf_cloud_user_associate+0x44>
		return -EINVAL;
	}

	if (NOT_VALID_STATE(STATE_UA_INPUT_WAIT)) {
   173b2:	4b12      	ldr	r3, [pc, #72]	; (173fc <nrf_cloud_user_associate+0x50>)
   173b4:	781b      	ldrb	r3, [r3, #0]
   173b6:	2b07      	cmp	r3, #7
   173b8:	d81d      	bhi.n	173f6 <nrf_cloud_user_associate+0x4a>
		return -EACCES;
	}

	struct nct_cc_data ua_msg = {
   173ba:	2210      	movs	r2, #16
   173bc:	2100      	movs	r1, #0
   173be:	4668      	mov	r0, sp
   173c0:	f013 fa90 	bl	2a8e4 <memset>
   173c4:	f242 534b 	movw	r3, #9547	; 0x254b
   173c8:	9302      	str	r3, [sp, #8]
   173ca:	2301      	movs	r3, #1
		.opcode = NCT_CC_OPCODE_UPDATE_REQ,
		.id = CC_UA_DATA_ID
	};

	err = nrf_cloud_encode_ua(param, &ua_msg.data);
   173cc:	4620      	mov	r0, r4
   173ce:	4669      	mov	r1, sp
	struct nct_cc_data ua_msg = {
   173d0:	f88d 300c 	strb.w	r3, [sp, #12]
	err = nrf_cloud_encode_ua(param, &ua_msg.data);
   173d4:	f000 f878 	bl	174c8 <nrf_cloud_encode_ua>
	if (err) {
   173d8:	4604      	mov	r4, r0
   173da:	b930      	cbnz	r0, 173ea <nrf_cloud_user_associate+0x3e>
		return err;
	}

	err = nct_cc_send(&ua_msg);
   173dc:	4668      	mov	r0, sp
   173de:	f000 fec7 	bl	18170 <nct_cc_send>
   173e2:	4604      	mov	r4, r0
	nrf_cloud_free((void *)ua_msg.data.ptr);
   173e4:	9801      	ldr	r0, [sp, #4]
   173e6:	f019 fa10 	bl	3080a <k_free>

	return err;
}
   173ea:	4620      	mov	r0, r4
   173ec:	b004      	add	sp, #16
   173ee:	bd10      	pop	{r4, pc}
		return -EINVAL;
   173f0:	f06f 0415 	mvn.w	r4, #21
   173f4:	e7f9      	b.n	173ea <nrf_cloud_user_associate+0x3e>
		return -EACCES;
   173f6:	f06f 040c 	mvn.w	r4, #12
   173fa:	e7f6      	b.n	173ea <nrf_cloud_user_associate+0x3e>
   173fc:	20027b1a 	.word	0x20027b1a

00017400 <nrf_cloud_sensor_attach>:

int nrf_cloud_sensor_attach(const struct nrf_cloud_sa_param *param)
{
   17400:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (NOT_VALID_STATE(STATE_DC_CONNECTED)) {
   17402:	4b0b      	ldr	r3, [pc, #44]	; (17430 <nrf_cloud_sensor_attach+0x30>)
   17404:	781b      	ldrb	r3, [r3, #0]
   17406:	2b0c      	cmp	r3, #12
   17408:	d80f      	bhi.n	1742a <nrf_cloud_sensor_attach+0x2a>
		return -EACCES;
	}

	const struct nrf_cloud_evt evt = {
   1740a:	2214      	movs	r2, #20
   1740c:	2100      	movs	r1, #0
   1740e:	a801      	add	r0, sp, #4
   17410:	f013 fa68 	bl	2a8e4 <memset>
   17414:	2305      	movs	r3, #5
		.type = NRF_CLOUD_EVT_SENSOR_ATTACHED
	};

	nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   17416:	200c      	movs	r0, #12
   17418:	a901      	add	r1, sp, #4
	const struct nrf_cloud_evt evt = {
   1741a:	f88d 3004 	strb.w	r3, [sp, #4]
	nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   1741e:	f7ff ff8b 	bl	17338 <nfsm_set_current_state_and_notify>

	return 0;
   17422:	2000      	movs	r0, #0
}
   17424:	b007      	add	sp, #28
   17426:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
   1742a:	f06f 000c 	mvn.w	r0, #12
   1742e:	e7f9      	b.n	17424 <nrf_cloud_sensor_attach+0x24>
   17430:	20027b1a 	.word	0x20027b1a

00017434 <nrf_cloud_sensor_data_send>:

int nrf_cloud_sensor_data_send(const struct nrf_cloud_sensor_data *param)
{
   17434:	b530      	push	{r4, r5, lr}
	int err;
	struct nct_dc_data sensor_data;

	if (NOT_VALID_STATE(STATE_DC_CONNECTED)) {
   17436:	4b0f      	ldr	r3, [pc, #60]	; (17474 <nrf_cloud_sensor_data_send+0x40>)
{
   17438:	b085      	sub	sp, #20
	if (NOT_VALID_STATE(STATE_DC_CONNECTED)) {
   1743a:	781b      	ldrb	r3, [r3, #0]
{
   1743c:	4605      	mov	r5, r0
	if (NOT_VALID_STATE(STATE_DC_CONNECTED)) {
   1743e:	2b0c      	cmp	r3, #12
   17440:	d811      	bhi.n	17466 <nrf_cloud_sensor_data_send+0x32>
		return -EACCES;
	}

	if (param == NULL) {
   17442:	b198      	cbz	r0, 1746c <nrf_cloud_sensor_data_send+0x38>
		return -EINVAL;
	}

	err = nrf_cloud_encode_sensor_data(param, &sensor_data.data);
   17444:	a901      	add	r1, sp, #4
   17446:	f000 f91f 	bl	17688 <nrf_cloud_encode_sensor_data>
	if (err) {
   1744a:	4604      	mov	r4, r0
   1744c:	b940      	cbnz	r0, 17460 <nrf_cloud_sensor_data_send+0x2c>
		return err;
	}

	sensor_data.id = param->tag;
   1744e:	68eb      	ldr	r3, [r5, #12]
	err = nct_dc_send(&sensor_data);
   17450:	a801      	add	r0, sp, #4
	sensor_data.id = param->tag;
   17452:	9303      	str	r3, [sp, #12]
	err = nct_dc_send(&sensor_data);
   17454:	f019 f993 	bl	3077e <nct_dc_send>
   17458:	4604      	mov	r4, r0
	nrf_cloud_free((void *)sensor_data.data.ptr);
   1745a:	9802      	ldr	r0, [sp, #8]
   1745c:	f019 f9d5 	bl	3080a <k_free>

	return err;
}
   17460:	4620      	mov	r0, r4
   17462:	b005      	add	sp, #20
   17464:	bd30      	pop	{r4, r5, pc}
		return -EACCES;
   17466:	f06f 040c 	mvn.w	r4, #12
   1746a:	e7f9      	b.n	17460 <nrf_cloud_sensor_data_send+0x2c>
		return -EINVAL;
   1746c:	f06f 0415 	mvn.w	r4, #21
   17470:	e7f6      	b.n	17460 <nrf_cloud_sensor_data_send+0x2c>
   17472:	bf00      	nop
   17474:	20027b1a 	.word	0x20027b1a

00017478 <nrf_cloud_sensor_data_stream>:

int nrf_cloud_sensor_data_stream(const struct nrf_cloud_sensor_data *param)
{
   17478:	b530      	push	{r4, r5, lr}
	int err;
	struct nct_dc_data sensor_data;

	if (NOT_VALID_STATE(STATE_DC_CONNECTED)) {
   1747a:	4b0f      	ldr	r3, [pc, #60]	; (174b8 <nrf_cloud_sensor_data_stream+0x40>)
{
   1747c:	b085      	sub	sp, #20
	if (NOT_VALID_STATE(STATE_DC_CONNECTED)) {
   1747e:	781b      	ldrb	r3, [r3, #0]
{
   17480:	4605      	mov	r5, r0
	if (NOT_VALID_STATE(STATE_DC_CONNECTED)) {
   17482:	2b0c      	cmp	r3, #12
   17484:	d811      	bhi.n	174aa <nrf_cloud_sensor_data_stream+0x32>
		return -EACCES;
	}

	if (param == NULL) {
   17486:	b198      	cbz	r0, 174b0 <nrf_cloud_sensor_data_stream+0x38>
		return -EINVAL;
	}

	err = nrf_cloud_encode_sensor_data(param, &sensor_data.data);
   17488:	a901      	add	r1, sp, #4
   1748a:	f000 f8fd 	bl	17688 <nrf_cloud_encode_sensor_data>
	if (err) {
   1748e:	4604      	mov	r4, r0
   17490:	b940      	cbnz	r0, 174a4 <nrf_cloud_sensor_data_stream+0x2c>
		return err;
	}

	sensor_data.id = param->tag;
   17492:	68eb      	ldr	r3, [r5, #12]
	err = nct_dc_stream(&sensor_data);
   17494:	a801      	add	r0, sp, #4
	sensor_data.id = param->tag;
   17496:	9303      	str	r3, [sp, #12]
	err = nct_dc_stream(&sensor_data);
   17498:	f019 f974 	bl	30784 <nct_dc_stream>
   1749c:	4604      	mov	r4, r0
	nrf_cloud_free((void *)sensor_data.data.ptr);
   1749e:	9802      	ldr	r0, [sp, #8]
   174a0:	f019 f9b3 	bl	3080a <k_free>

	return err;
}
   174a4:	4620      	mov	r0, r4
   174a6:	b005      	add	sp, #20
   174a8:	bd30      	pop	{r4, r5, pc}
		return -EACCES;
   174aa:	f06f 040c 	mvn.w	r4, #12
   174ae:	e7f9      	b.n	174a4 <nrf_cloud_sensor_data_stream+0x2c>
		return -EINVAL;
   174b0:	f06f 0415 	mvn.w	r4, #21
   174b4:	e7f6      	b.n	174a4 <nrf_cloud_sensor_data_stream+0x2c>
   174b6:	bf00      	nop
   174b8:	20027b1a 	.word	0x20027b1a

000174bc <nct_input>:

int nct_input(const struct nct_evt *evt)
{
	return nfsm_handle_incoming_event(evt, m_current_state);
   174bc:	4b01      	ldr	r3, [pc, #4]	; (174c4 <nct_input+0x8>)
   174be:	7819      	ldrb	r1, [r3, #0]
   174c0:	f000 bbf4 	b.w	17cac <nfsm_handle_incoming_event>
   174c4:	20027b1a 	.word	0x20027b1a

000174c8 <nrf_cloud_encode_ua>:
	return 0;
}

int nrf_cloud_encode_ua(const struct nrf_cloud_ua_param *input,
			struct nrf_cloud_data *output)
{
   174c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174cc:	b085      	sub	sp, #20
   174ce:	9100      	str	r1, [sp, #0]
	__ASSERT_NO_MSG(input != NULL);
   174d0:	4604      	mov	r4, r0
   174d2:	b948      	cbnz	r0, 174e8 <nrf_cloud_encode_ua+0x20>
   174d4:	495c      	ldr	r1, [pc, #368]	; (17648 <nrf_cloud_encode_ua+0x180>)
   174d6:	485d      	ldr	r0, [pc, #372]	; (1764c <nrf_cloud_encode_ua+0x184>)
   174d8:	23a2      	movs	r3, #162	; 0xa2
   174da:	4a5d      	ldr	r2, [pc, #372]	; (17650 <nrf_cloud_encode_ua+0x188>)
   174dc:	f017 f8a9 	bl	2e632 <printk>
   174e0:	21a2      	movs	r1, #162	; 0xa2
   174e2:	485b      	ldr	r0, [pc, #364]	; (17650 <nrf_cloud_encode_ua+0x188>)
   174e4:	f017 f8b2 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   174e8:	9b00      	ldr	r3, [sp, #0]
   174ea:	b94b      	cbnz	r3, 17500 <nrf_cloud_encode_ua+0x38>
   174ec:	4959      	ldr	r1, [pc, #356]	; (17654 <nrf_cloud_encode_ua+0x18c>)
   174ee:	4857      	ldr	r0, [pc, #348]	; (1764c <nrf_cloud_encode_ua+0x184>)
   174f0:	23a3      	movs	r3, #163	; 0xa3
   174f2:	4a57      	ldr	r2, [pc, #348]	; (17650 <nrf_cloud_encode_ua+0x188>)
   174f4:	f017 f89d 	bl	2e632 <printk>
   174f8:	21a3      	movs	r1, #163	; 0xa3
   174fa:	4855      	ldr	r0, [pc, #340]	; (17650 <nrf_cloud_encode_ua+0x188>)
   174fc:	f017 f8a6 	bl	2e64c <assert_post_action>

	/* Encoded sequence. */
	struct nrf_cloud_data enc_seq = {0};
	const char *method = ua_encode_info[input->type].desc_str;
   17500:	4620      	mov	r0, r4
	struct nrf_cloud_data enc_seq = {0};
   17502:	2300      	movs	r3, #0
	const char *method = ua_encode_info[input->type].desc_str;
   17504:	f810 2b04 	ldrb.w	r2, [r0], #4
	struct nrf_cloud_data enc_seq = {0};
   17508:	e9cd 3302 	strd	r3, r3, [sp, #8]
	const char *method = ua_encode_info[input->type].desc_str;
   1750c:	4b52      	ldr	r3, [pc, #328]	; (17658 <nrf_cloud_encode_ua+0x190>)
	int ret;

	ua_encode_info[input->type].encode(&input->sequence, &enc_seq);
   1750e:	a902      	add	r1, sp, #8
	const char *method = ua_encode_info[input->type].desc_str;
   17510:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   17514:	9301      	str	r3, [sp, #4]
	ua_encode_info[input->type].encode(&input->sequence, &enc_seq);
   17516:	f018 fef3 	bl	30300 <encode_ua_button_sequence>

	cJSON *root_obj = cJSON_CreateObject();
   1751a:	f017 fbb2 	bl	2ec82 <cJSON_CreateObject>
   1751e:	4606      	mov	r6, r0
	cJSON *state_obj = cJSON_CreateObject();
   17520:	f017 fbaf 	bl	2ec82 <cJSON_CreateObject>
   17524:	4682      	mov	sl, r0
	cJSON *reported_obj = cJSON_CreateObject();
   17526:	f017 fbac 	bl	2ec82 <cJSON_CreateObject>
   1752a:	4681      	mov	r9, r0
	cJSON *pairing_obj = cJSON_CreateObject();
   1752c:	f017 fba9 	bl	2ec82 <cJSON_CreateObject>
   17530:	4680      	mov	r8, r0
	cJSON *config_obj = cJSON_CreateObject();
   17532:	f017 fba6 	bl	2ec82 <cJSON_CreateObject>
   17536:	4605      	mov	r5, r0
	cJSON *status_obj = cJSON_CreateObject();
   17538:	f017 fba3 	bl	2ec82 <cJSON_CreateObject>
   1753c:	4607      	mov	r7, r0
	cJSON *pattern_obj = cJSON_CreateIntArray(enc_seq.ptr, enc_seq.len);
   1753e:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
   17542:	f017 fba5 	bl	2ec90 <cJSON_CreateIntArray>
   17546:	4683      	mov	fp, r0

	if ((root_obj  == NULL) || (state_obj == NULL) ||
   17548:	b15e      	cbz	r6, 17562 <nrf_cloud_encode_ua+0x9a>
   1754a:	f1ba 0f00 	cmp.w	sl, #0
   1754e:	d008      	beq.n	17562 <nrf_cloud_encode_ua+0x9a>
   17550:	f1b9 0f00 	cmp.w	r9, #0
   17554:	d005      	beq.n	17562 <nrf_cloud_encode_ua+0x9a>
	    (reported_obj == NULL) || (pairing_obj == NULL) ||
   17556:	f1b8 0f00 	cmp.w	r8, #0
   1755a:	d002      	beq.n	17562 <nrf_cloud_encode_ua+0x9a>
   1755c:	b10d      	cbz	r5, 17562 <nrf_cloud_encode_ua+0x9a>
	    (config_obj == NULL) || (status_obj == NULL)   ||
   1755e:	b107      	cbz	r7, 17562 <nrf_cloud_encode_ua+0x9a>
   17560:	b9e8      	cbnz	r0, 1759e <nrf_cloud_encode_ua+0xd6>
	    (pattern_obj == NULL)) {
		cJSON_Delete(root_obj);
   17562:	4630      	mov	r0, r6
	ret += json_add_obj(reported_obj, "pairingStatus", status_obj);
	ret += json_add_obj(state_obj, "reported", reported_obj);
	ret += json_add_obj(root_obj, "state", state_obj);

	if (ret != 0) {
		cJSON_Delete(root_obj);
   17564:	f7fe fb30 	bl	15bc8 <cJSON_Delete>
		cJSON_Delete(state_obj);
   17568:	4650      	mov	r0, sl
   1756a:	f7fe fb2d 	bl	15bc8 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   1756e:	4648      	mov	r0, r9
   17570:	f7fe fb2a 	bl	15bc8 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   17574:	4640      	mov	r0, r8
   17576:	f7fe fb27 	bl	15bc8 <cJSON_Delete>
		cJSON_Delete(config_obj);
   1757a:	4628      	mov	r0, r5
   1757c:	f7fe fb24 	bl	15bc8 <cJSON_Delete>
		cJSON_Delete(status_obj);
   17580:	4638      	mov	r0, r7
   17582:	f7fe fb21 	bl	15bc8 <cJSON_Delete>
		cJSON_Delete(pattern_obj);
   17586:	4658      	mov	r0, fp
   17588:	f7fe fb1e 	bl	15bc8 <cJSON_Delete>

		nrf_cloud_free((void *)enc_seq.ptr);
   1758c:	9803      	ldr	r0, [sp, #12]
   1758e:	f019 f93c 	bl	3080a <k_free>
		return -ENOMEM;
   17592:	f06f 040b 	mvn.w	r4, #11

	output->ptr = buffer;
	output->len = strlen(buffer);

	return 0;
}
   17596:	4620      	mov	r0, r4
   17598:	b005      	add	sp, #20
   1759a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ret = json_add_num(config_obj, "iteration", 1);
   1759e:	4b2f      	ldr	r3, [pc, #188]	; (1765c <nrf_cloud_encode_ua+0x194>)
   175a0:	2200      	movs	r2, #0
   175a2:	492f      	ldr	r1, [pc, #188]	; (17660 <nrf_cloud_encode_ua+0x198>)
   175a4:	4628      	mov	r0, r5
   175a6:	f018 fed5 	bl	30354 <json_add_num>
	ret += json_add_str(config_obj, "method", method);
   175aa:	9a01      	ldr	r2, [sp, #4]
	ret = json_add_num(config_obj, "iteration", 1);
   175ac:	4604      	mov	r4, r0
	ret += json_add_str(config_obj, "method", method);
   175ae:	492d      	ldr	r1, [pc, #180]	; (17664 <nrf_cloud_encode_ua+0x19c>)
   175b0:	4628      	mov	r0, r5
   175b2:	f018 fee1 	bl	30378 <json_add_str>
   175b6:	4404      	add	r4, r0
	ret += json_add_num(config_obj, "length", enc_seq.len);
   175b8:	9802      	ldr	r0, [sp, #8]
   175ba:	f7f4 ff07 	bl	c3cc <__aeabi_ui2d>
   175be:	460b      	mov	r3, r1
   175c0:	4602      	mov	r2, r0
   175c2:	4929      	ldr	r1, [pc, #164]	; (17668 <nrf_cloud_encode_ua+0x1a0>)
   175c4:	4628      	mov	r0, r5
   175c6:	f018 fec5 	bl	30354 <json_add_num>
	ret += json_add_str(pairing_obj, "state", PATTERN_WAIT_STR);
   175ca:	4a28      	ldr	r2, [pc, #160]	; (1766c <nrf_cloud_encode_ua+0x1a4>)
	ret += json_add_num(config_obj, "length", enc_seq.len);
   175cc:	4404      	add	r4, r0
	ret += json_add_str(pairing_obj, "state", PATTERN_WAIT_STR);
   175ce:	4928      	ldr	r1, [pc, #160]	; (17670 <nrf_cloud_encode_ua+0x1a8>)
   175d0:	4640      	mov	r0, r8
   175d2:	f018 fed1 	bl	30378 <json_add_str>
	cJSON_AddItemToObject(parent, str, item);
   175d6:	462a      	mov	r2, r5
	ret += json_add_str(pairing_obj, "state", PATTERN_WAIT_STR);
   175d8:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   175da:	4926      	ldr	r1, [pc, #152]	; (17674 <nrf_cloud_encode_ua+0x1ac>)
   175dc:	4640      	mov	r0, r8
   175de:	f7fe fb49 	bl	15c74 <cJSON_AddItemToObject>
	ret += json_add_str(status_obj, "method", method);
   175e2:	9a01      	ldr	r2, [sp, #4]
   175e4:	491f      	ldr	r1, [pc, #124]	; (17664 <nrf_cloud_encode_ua+0x19c>)
   175e6:	4638      	mov	r0, r7
   175e8:	f018 fec6 	bl	30378 <json_add_str>
	cJSON_AddItemToObject(parent, str, item);
   175ec:	465a      	mov	r2, fp
   175ee:	4922      	ldr	r1, [pc, #136]	; (17678 <nrf_cloud_encode_ua+0x1b0>)
	ret += json_add_str(status_obj, "method", method);
   175f0:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   175f2:	4638      	mov	r0, r7
   175f4:	f7fe fb3e 	bl	15c74 <cJSON_AddItemToObject>
   175f8:	4642      	mov	r2, r8
   175fa:	4920      	ldr	r1, [pc, #128]	; (1767c <nrf_cloud_encode_ua+0x1b4>)
   175fc:	4648      	mov	r0, r9
   175fe:	f7fe fb39 	bl	15c74 <cJSON_AddItemToObject>
   17602:	463a      	mov	r2, r7
   17604:	491e      	ldr	r1, [pc, #120]	; (17680 <nrf_cloud_encode_ua+0x1b8>)
   17606:	4648      	mov	r0, r9
   17608:	f7fe fb34 	bl	15c74 <cJSON_AddItemToObject>
   1760c:	464a      	mov	r2, r9
   1760e:	491d      	ldr	r1, [pc, #116]	; (17684 <nrf_cloud_encode_ua+0x1bc>)
   17610:	4650      	mov	r0, sl
   17612:	f7fe fb2f 	bl	15c74 <cJSON_AddItemToObject>
   17616:	4630      	mov	r0, r6
   17618:	4652      	mov	r2, sl
   1761a:	4915      	ldr	r1, [pc, #84]	; (17670 <nrf_cloud_encode_ua+0x1a8>)
   1761c:	f7fe fb2a 	bl	15c74 <cJSON_AddItemToObject>
		cJSON_Delete(root_obj);
   17620:	4630      	mov	r0, r6
	if (ret != 0) {
   17622:	2c00      	cmp	r4, #0
   17624:	d19e      	bne.n	17564 <nrf_cloud_encode_ua+0x9c>
	buffer = cJSON_PrintUnformatted(root_obj);
   17626:	f017 fadd 	bl	2ebe4 <cJSON_PrintUnformatted>
   1762a:	4605      	mov	r5, r0
	nrf_cloud_free((void *)enc_seq.ptr);
   1762c:	9803      	ldr	r0, [sp, #12]
   1762e:	f019 f8ec 	bl	3080a <k_free>
	cJSON_Delete(root_obj);
   17632:	4630      	mov	r0, r6
   17634:	f7fe fac8 	bl	15bc8 <cJSON_Delete>
	output->ptr = buffer;
   17638:	9b00      	ldr	r3, [sp, #0]
	output->len = strlen(buffer);
   1763a:	4628      	mov	r0, r5
	output->ptr = buffer;
   1763c:	605d      	str	r5, [r3, #4]
	output->len = strlen(buffer);
   1763e:	f013 fb3d 	bl	2acbc <strlen>
   17642:	9b00      	ldr	r3, [sp, #0]
   17644:	6018      	str	r0, [r3, #0]
	return 0;
   17646:	e7a6      	b.n	17596 <nrf_cloud_encode_ua+0xce>
   17648:	000358aa 	.word	0x000358aa
   1764c:	0003452c 	.word	0x0003452c
   17650:	00035865 	.word	0x00035865
   17654:	000358bf 	.word	0x000358bf
   17658:	00031118 	.word	0x00031118
   1765c:	3ff00000 	.word	0x3ff00000
   17660:	000358d5 	.word	0x000358d5
   17664:	000358df 	.word	0x000358df
   17668:	000358e6 	.word	0x000358e6
   1766c:	000358ed 	.word	0x000358ed
   17670:	000358fa 	.word	0x000358fa
   17674:	00035900 	.word	0x00035900
   17678:	00035907 	.word	0x00035907
   1767c:	0003590f 	.word	0x0003590f
   17680:	00035917 	.word	0x00035917
   17684:	00035925 	.word	0x00035925

00017688 <nrf_cloud_encode_sensor_data>:

int nrf_cloud_encode_sensor_data(const struct nrf_cloud_sensor_data *sensor,
				 struct nrf_cloud_data *output)
{
   17688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1768a:	460f      	mov	r7, r1
	int ret;

	__ASSERT_NO_MSG(sensor != NULL);
   1768c:	4606      	mov	r6, r0
   1768e:	b948      	cbnz	r0, 176a4 <nrf_cloud_encode_sensor_data+0x1c>
   17690:	492c      	ldr	r1, [pc, #176]	; (17744 <nrf_cloud_encode_sensor_data+0xbc>)
   17692:	482d      	ldr	r0, [pc, #180]	; (17748 <nrf_cloud_encode_sensor_data+0xc0>)
   17694:	23ee      	movs	r3, #238	; 0xee
   17696:	4a2d      	ldr	r2, [pc, #180]	; (1774c <nrf_cloud_encode_sensor_data+0xc4>)
   17698:	f016 ffcb 	bl	2e632 <printk>
   1769c:	21ee      	movs	r1, #238	; 0xee
   1769e:	482b      	ldr	r0, [pc, #172]	; (1774c <nrf_cloud_encode_sensor_data+0xc4>)
   176a0:	f016 ffd4 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(sensor->data.ptr != NULL);
   176a4:	68b3      	ldr	r3, [r6, #8]
   176a6:	b94b      	cbnz	r3, 176bc <nrf_cloud_encode_sensor_data+0x34>
   176a8:	4929      	ldr	r1, [pc, #164]	; (17750 <nrf_cloud_encode_sensor_data+0xc8>)
   176aa:	4827      	ldr	r0, [pc, #156]	; (17748 <nrf_cloud_encode_sensor_data+0xc0>)
   176ac:	23ef      	movs	r3, #239	; 0xef
   176ae:	4a27      	ldr	r2, [pc, #156]	; (1774c <nrf_cloud_encode_sensor_data+0xc4>)
   176b0:	f016 ffbf 	bl	2e632 <printk>
   176b4:	21ef      	movs	r1, #239	; 0xef
   176b6:	4825      	ldr	r0, [pc, #148]	; (1774c <nrf_cloud_encode_sensor_data+0xc4>)
   176b8:	f016 ffc8 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(sensor->data.len != 0);
   176bc:	6873      	ldr	r3, [r6, #4]
   176be:	b94b      	cbnz	r3, 176d4 <nrf_cloud_encode_sensor_data+0x4c>
   176c0:	4924      	ldr	r1, [pc, #144]	; (17754 <nrf_cloud_encode_sensor_data+0xcc>)
   176c2:	4821      	ldr	r0, [pc, #132]	; (17748 <nrf_cloud_encode_sensor_data+0xc0>)
   176c4:	23f0      	movs	r3, #240	; 0xf0
   176c6:	4a21      	ldr	r2, [pc, #132]	; (1774c <nrf_cloud_encode_sensor_data+0xc4>)
   176c8:	f016 ffb3 	bl	2e632 <printk>
   176cc:	21f0      	movs	r1, #240	; 0xf0
   176ce:	481f      	ldr	r0, [pc, #124]	; (1774c <nrf_cloud_encode_sensor_data+0xc4>)
   176d0:	f016 ffbc 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   176d4:	b94f      	cbnz	r7, 176ea <nrf_cloud_encode_sensor_data+0x62>
   176d6:	4920      	ldr	r1, [pc, #128]	; (17758 <nrf_cloud_encode_sensor_data+0xd0>)
   176d8:	481b      	ldr	r0, [pc, #108]	; (17748 <nrf_cloud_encode_sensor_data+0xc0>)
   176da:	23f1      	movs	r3, #241	; 0xf1
   176dc:	4a1b      	ldr	r2, [pc, #108]	; (1774c <nrf_cloud_encode_sensor_data+0xc4>)
   176de:	f016 ffa8 	bl	2e632 <printk>
   176e2:	21f1      	movs	r1, #241	; 0xf1
   176e4:	4819      	ldr	r0, [pc, #100]	; (1774c <nrf_cloud_encode_sensor_data+0xc4>)
   176e6:	f016 ffb1 	bl	2e64c <assert_post_action>

	cJSON *root_obj = cJSON_CreateObject();
   176ea:	f017 faca 	bl	2ec82 <cJSON_CreateObject>

	if (root_obj == NULL) {
   176ee:	4605      	mov	r5, r0
   176f0:	b1b8      	cbz	r0, 17722 <nrf_cloud_encode_sensor_data+0x9a>
		return -ENOMEM;
	}

	ret = json_add_str(root_obj, "appId", sensor_type_str[sensor->type]);
   176f2:	4b1a      	ldr	r3, [pc, #104]	; (1775c <nrf_cloud_encode_sensor_data+0xd4>)
   176f4:	7832      	ldrb	r2, [r6, #0]
   176f6:	491a      	ldr	r1, [pc, #104]	; (17760 <nrf_cloud_encode_sensor_data+0xd8>)
   176f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   176fc:	f018 fe3c 	bl	30378 <json_add_str>
	ret += json_add_str(root_obj, "data", sensor->data.ptr);
   17700:	68b2      	ldr	r2, [r6, #8]
	ret = json_add_str(root_obj, "appId", sensor_type_str[sensor->type]);
   17702:	4604      	mov	r4, r0
	ret += json_add_str(root_obj, "data", sensor->data.ptr);
   17704:	4917      	ldr	r1, [pc, #92]	; (17764 <nrf_cloud_encode_sensor_data+0xdc>)
   17706:	4628      	mov	r0, r5
   17708:	f018 fe36 	bl	30378 <json_add_str>
	ret += json_add_str(root_obj, "messageType", "DATA");
   1770c:	4a16      	ldr	r2, [pc, #88]	; (17768 <nrf_cloud_encode_sensor_data+0xe0>)
	ret += json_add_str(root_obj, "data", sensor->data.ptr);
   1770e:	4404      	add	r4, r0
	ret += json_add_str(root_obj, "messageType", "DATA");
   17710:	4916      	ldr	r1, [pc, #88]	; (1776c <nrf_cloud_encode_sensor_data+0xe4>)
   17712:	4628      	mov	r0, r5
   17714:	f018 fe30 	bl	30378 <json_add_str>

	if (ret != 0) {
   17718:	1824      	adds	r4, r4, r0
		cJSON_Delete(root_obj);
   1771a:	4628      	mov	r0, r5
	if (ret != 0) {
   1771c:	d004      	beq.n	17728 <nrf_cloud_encode_sensor_data+0xa0>
		cJSON_Delete(root_obj);
   1771e:	f7fe fa53 	bl	15bc8 <cJSON_Delete>
		return -ENOMEM;
   17722:	f06f 040b 	mvn.w	r4, #11
   17726:	e00a      	b.n	1773e <nrf_cloud_encode_sensor_data+0xb6>
		return -ENOMEM;
	}

	char *buffer;

	buffer = cJSON_PrintUnformatted(root_obj);
   17728:	f017 fa5c 	bl	2ebe4 <cJSON_PrintUnformatted>
   1772c:	4606      	mov	r6, r0
	cJSON_Delete(root_obj);
   1772e:	4628      	mov	r0, r5
   17730:	f7fe fa4a 	bl	15bc8 <cJSON_Delete>

	output->ptr = buffer;
   17734:	607e      	str	r6, [r7, #4]
	output->len = strlen(buffer);
   17736:	4630      	mov	r0, r6
   17738:	f013 fac0 	bl	2acbc <strlen>
   1773c:	6038      	str	r0, [r7, #0]

	return 0;
}
   1773e:	4620      	mov	r0, r4
   17740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17742:	bf00      	nop
   17744:	000357db 	.word	0x000357db
   17748:	0003452c 	.word	0x0003452c
   1774c:	00035865 	.word	0x00035865
   17750:	000357f1 	.word	0x000357f1
   17754:	00035811 	.word	0x00035811
   17758:	000358bf 	.word	0x000358bf
   1775c:	000310f4 	.word	0x000310f4
   17760:	00035827 	.word	0x00035827
   17764:	0003582d 	.word	0x0003582d
   17768:	00035832 	.word	0x00035832
   1776c:	00035837 	.word	0x00035837

00017770 <nrf_cloud_decode_requested_state>:

int nrf_cloud_decode_requested_state(const struct nrf_cloud_data *input,
				     enum nfsm_state *requested_state)
{
   17770:	b570      	push	{r4, r5, r6, lr}
   17772:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(requested_state != NULL);
   17774:	460c      	mov	r4, r1
   17776:	b959      	cbnz	r1, 17790 <nrf_cloud_decode_requested_state+0x20>
   17778:	493e      	ldr	r1, [pc, #248]	; (17874 <nrf_cloud_decode_requested_state+0x104>)
   1777a:	483f      	ldr	r0, [pc, #252]	; (17878 <nrf_cloud_decode_requested_state+0x108>)
   1777c:	f44f 7388 	mov.w	r3, #272	; 0x110
   17780:	4a3e      	ldr	r2, [pc, #248]	; (1787c <nrf_cloud_decode_requested_state+0x10c>)
   17782:	f016 ff56 	bl	2e632 <printk>
   17786:	f44f 7188 	mov.w	r1, #272	; 0x110
   1778a:	483c      	ldr	r0, [pc, #240]	; (1787c <nrf_cloud_decode_requested_state+0x10c>)
   1778c:	f016 ff5e 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   17790:	b95d      	cbnz	r5, 177aa <nrf_cloud_decode_requested_state+0x3a>
   17792:	493b      	ldr	r1, [pc, #236]	; (17880 <nrf_cloud_decode_requested_state+0x110>)
   17794:	4838      	ldr	r0, [pc, #224]	; (17878 <nrf_cloud_decode_requested_state+0x108>)
   17796:	f240 1311 	movw	r3, #273	; 0x111
   1779a:	4a38      	ldr	r2, [pc, #224]	; (1787c <nrf_cloud_decode_requested_state+0x10c>)
   1779c:	f016 ff49 	bl	2e632 <printk>
   177a0:	f240 1111 	movw	r1, #273	; 0x111
   177a4:	4835      	ldr	r0, [pc, #212]	; (1787c <nrf_cloud_decode_requested_state+0x10c>)
   177a6:	f016 ff51 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   177aa:	686b      	ldr	r3, [r5, #4]
   177ac:	b95b      	cbnz	r3, 177c6 <nrf_cloud_decode_requested_state+0x56>
   177ae:	4935      	ldr	r1, [pc, #212]	; (17884 <nrf_cloud_decode_requested_state+0x114>)
   177b0:	4831      	ldr	r0, [pc, #196]	; (17878 <nrf_cloud_decode_requested_state+0x108>)
   177b2:	f44f 7389 	mov.w	r3, #274	; 0x112
   177b6:	4a31      	ldr	r2, [pc, #196]	; (1787c <nrf_cloud_decode_requested_state+0x10c>)
   177b8:	f016 ff3b 	bl	2e632 <printk>
   177bc:	f44f 7189 	mov.w	r1, #274	; 0x112
   177c0:	482e      	ldr	r0, [pc, #184]	; (1787c <nrf_cloud_decode_requested_state+0x10c>)
   177c2:	f016 ff43 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   177c6:	682b      	ldr	r3, [r5, #0]
   177c8:	b95b      	cbnz	r3, 177e2 <nrf_cloud_decode_requested_state+0x72>
   177ca:	492f      	ldr	r1, [pc, #188]	; (17888 <nrf_cloud_decode_requested_state+0x118>)
   177cc:	482a      	ldr	r0, [pc, #168]	; (17878 <nrf_cloud_decode_requested_state+0x108>)
   177ce:	f240 1313 	movw	r3, #275	; 0x113
   177d2:	4a2a      	ldr	r2, [pc, #168]	; (1787c <nrf_cloud_decode_requested_state+0x10c>)
   177d4:	f016 ff2d 	bl	2e632 <printk>
   177d8:	f240 1113 	movw	r1, #275	; 0x113
   177dc:	4827      	ldr	r0, [pc, #156]	; (1787c <nrf_cloud_decode_requested_state+0x10c>)
   177de:	f016 ff35 	bl	2e64c <assert_post_action>
	cJSON *state_obj;
	cJSON *desired_obj;
	cJSON *pairing_obj;
	cJSON *pairing_state_obj;

	root_obj = cJSON_Parse(input->ptr);
   177e2:	6868      	ldr	r0, [r5, #4]
   177e4:	f017 f9fa 	bl	2ebdc <cJSON_Parse>
	if (root_obj == NULL) {
   177e8:	4606      	mov	r6, r0
   177ea:	b1b0      	cbz	r0, 1781a <nrf_cloud_decode_requested_state+0xaa>
		LOG_ERR("cJSON_Parse failed: %s",
			log_strdup((char *)input->ptr));
		return -ENOENT;
	}

	state_obj = json_object_decode(root_obj, "state");
   177ec:	4927      	ldr	r1, [pc, #156]	; (1788c <nrf_cloud_decode_requested_state+0x11c>)
   177ee:	f018 fdd4 	bl	3039a <json_object_decode>
	desired_obj = json_object_decode(state_obj, "desired");
   177f2:	4927      	ldr	r1, [pc, #156]	; (17890 <nrf_cloud_decode_requested_state+0x120>)
	state_obj = json_object_decode(root_obj, "state");
   177f4:	4605      	mov	r5, r0
	desired_obj = json_object_decode(state_obj, "desired");
   177f6:	f018 fdd0 	bl	3039a <json_object_decode>
	if (desired_obj == NULL) {
		desired_obj = state_obj;
	}

	pairing_obj = json_object_decode(desired_obj, "pairing");
   177fa:	4926      	ldr	r1, [pc, #152]	; (17894 <nrf_cloud_decode_requested_state+0x124>)
   177fc:	2800      	cmp	r0, #0
   177fe:	bf08      	it	eq
   17800:	4628      	moveq	r0, r5
   17802:	f018 fdca 	bl	3039a <json_object_decode>
	pairing_state_obj = json_object_decode(pairing_obj, "state");
   17806:	4921      	ldr	r1, [pc, #132]	; (1788c <nrf_cloud_decode_requested_state+0x11c>)
   17808:	f018 fdc7 	bl	3039a <json_object_decode>

	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
   1780c:	b110      	cbz	r0, 17814 <nrf_cloud_decode_requested_state+0xa4>
   1780e:	68c3      	ldr	r3, [r0, #12]
   17810:	2b04      	cmp	r3, #4
   17812:	d005      	beq.n	17820 <nrf_cloud_decode_requested_state+0xb0>
		LOG_DBG("No valid state found!");
		cJSON_Delete(root_obj);
   17814:	4630      	mov	r0, r6
   17816:	f7fe f9d7 	bl	15bc8 <cJSON_Delete>
		return -ENOENT;
   1781a:	f06f 0001 	mvn.w	r0, #1
   1781e:	e00b      	b.n	17838 <nrf_cloud_decode_requested_state+0xc8>
		return -ENOENT;
	}

	const char *state_str = pairing_state_obj->valuestring;
   17820:	6905      	ldr	r5, [r0, #16]

	if (compare(state_str, INITIATE_STR)) {
   17822:	491d      	ldr	r1, [pc, #116]	; (17898 <nrf_cloud_decode_requested_state+0x128>)
   17824:	4628      	mov	r0, r5
   17826:	f018 fdbc 	bl	303a2 <compare>
   1782a:	b130      	cbz	r0, 1783a <nrf_cloud_decode_requested_state+0xca>
		(*requested_state) = STATE_UA_INITIATE;
   1782c:	2306      	movs	r3, #6
	} else if (compare(state_str, PATTERN_MISMATCH_STR)) {
		(*requested_state) = STATE_UA_INPUT_MISMATCH;
	} else if (compare(state_str, TIMEOUT_STR)) {
		(*requested_state) = STATE_UA_INPUT_TIMEOUT;
	} else if (compare(state_str, PAIRED_STR)) {
		(*requested_state) = STATE_UA_COMPLETE;
   1782e:	7023      	strb	r3, [r4, #0]
	}

	cJSON_Delete(root_obj);
   17830:	4630      	mov	r0, r6
   17832:	f7fe f9c9 	bl	15bc8 <cJSON_Delete>

	return 0;
   17836:	2000      	movs	r0, #0
}
   17838:	bd70      	pop	{r4, r5, r6, pc}
	} else if (compare(state_str, PATTERN_WAIT_STR)) {
   1783a:	4918      	ldr	r1, [pc, #96]	; (1789c <nrf_cloud_decode_requested_state+0x12c>)
   1783c:	4628      	mov	r0, r5
   1783e:	f018 fdb0 	bl	303a2 <compare>
   17842:	b108      	cbz	r0, 17848 <nrf_cloud_decode_requested_state+0xd8>
		(*requested_state) = STATE_UA_INPUT_WAIT;
   17844:	2307      	movs	r3, #7
   17846:	e7f2      	b.n	1782e <nrf_cloud_decode_requested_state+0xbe>
	} else if (compare(state_str, PATTERN_MISMATCH_STR)) {
   17848:	4915      	ldr	r1, [pc, #84]	; (178a0 <nrf_cloud_decode_requested_state+0x130>)
   1784a:	4628      	mov	r0, r5
   1784c:	f018 fda9 	bl	303a2 <compare>
   17850:	b108      	cbz	r0, 17856 <nrf_cloud_decode_requested_state+0xe6>
		(*requested_state) = STATE_UA_INPUT_MISMATCH;
   17852:	2308      	movs	r3, #8
   17854:	e7eb      	b.n	1782e <nrf_cloud_decode_requested_state+0xbe>
	} else if (compare(state_str, TIMEOUT_STR)) {
   17856:	4913      	ldr	r1, [pc, #76]	; (178a4 <nrf_cloud_decode_requested_state+0x134>)
   17858:	4628      	mov	r0, r5
   1785a:	f018 fda2 	bl	303a2 <compare>
   1785e:	b108      	cbz	r0, 17864 <nrf_cloud_decode_requested_state+0xf4>
		(*requested_state) = STATE_UA_INPUT_TIMEOUT;
   17860:	2309      	movs	r3, #9
   17862:	e7e4      	b.n	1782e <nrf_cloud_decode_requested_state+0xbe>
	} else if (compare(state_str, PAIRED_STR)) {
   17864:	4910      	ldr	r1, [pc, #64]	; (178a8 <nrf_cloud_decode_requested_state+0x138>)
   17866:	4628      	mov	r0, r5
   17868:	f018 fd9b 	bl	303a2 <compare>
   1786c:	2800      	cmp	r0, #0
   1786e:	d0df      	beq.n	17830 <nrf_cloud_decode_requested_state+0xc0>
		(*requested_state) = STATE_UA_COMPLETE;
   17870:	230a      	movs	r3, #10
   17872:	e7dc      	b.n	1782e <nrf_cloud_decode_requested_state+0xbe>
   17874:	00035761 	.word	0x00035761
   17878:	0003452c 	.word	0x0003452c
   1787c:	00035865 	.word	0x00035865
   17880:	000358aa 	.word	0x000358aa
   17884:	00035780 	.word	0x00035780
   17888:	0003579a 	.word	0x0003579a
   1788c:	000358fa 	.word	0x000358fa
   17890:	000357aa 	.word	0x000357aa
   17894:	0003590f 	.word	0x0003590f
   17898:	000357b2 	.word	0x000357b2
   1789c:	000358ed 	.word	0x000358ed
   178a0:	000357bb 	.word	0x000357bb
   178a4:	000357cc 	.word	0x000357cc
   178a8:	000357d4 	.word	0x000357d4

000178ac <nrf_cloud_encode_state>:

int nrf_cloud_encode_state(u32_t reported_state, struct nrf_cloud_data *output)
{
   178ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178b0:	4604      	mov	r4, r0
   178b2:	b085      	sub	sp, #20
	int ret;

	__ASSERT_NO_MSG(output != NULL);
   178b4:	4689      	mov	r9, r1
   178b6:	b959      	cbnz	r1, 178d0 <nrf_cloud_encode_state+0x24>
   178b8:	497b      	ldr	r1, [pc, #492]	; (17aa8 <nrf_cloud_encode_state+0x1fc>)
   178ba:	487c      	ldr	r0, [pc, #496]	; (17aac <nrf_cloud_encode_state+0x200>)
   178bc:	f44f 73a4 	mov.w	r3, #328	; 0x148
   178c0:	4a7b      	ldr	r2, [pc, #492]	; (17ab0 <nrf_cloud_encode_state+0x204>)
   178c2:	f016 feb6 	bl	2e632 <printk>
   178c6:	f44f 71a4 	mov.w	r1, #328	; 0x148
   178ca:	4879      	ldr	r0, [pc, #484]	; (17ab0 <nrf_cloud_encode_state+0x204>)
   178cc:	f016 febe 	bl	2e64c <assert_post_action>

	cJSON *root_obj = cJSON_CreateObject();
   178d0:	f017 f9d7 	bl	2ec82 <cJSON_CreateObject>
   178d4:	4607      	mov	r7, r0
	cJSON *state_obj = cJSON_CreateObject();
   178d6:	f017 f9d4 	bl	2ec82 <cJSON_CreateObject>
   178da:	4680      	mov	r8, r0
	cJSON *reported_obj = cJSON_CreateObject();
   178dc:	f017 f9d1 	bl	2ec82 <cJSON_CreateObject>
   178e0:	4606      	mov	r6, r0
	cJSON *pairing_obj = cJSON_CreateObject();
   178e2:	f017 f9ce 	bl	2ec82 <cJSON_CreateObject>
   178e6:	4605      	mov	r5, r0

	if ((root_obj  == NULL) || (state_obj == NULL) ||
   178e8:	b127      	cbz	r7, 178f4 <nrf_cloud_encode_state+0x48>
   178ea:	f1b8 0f00 	cmp.w	r8, #0
   178ee:	d001      	beq.n	178f4 <nrf_cloud_encode_state+0x48>
   178f0:	b106      	cbz	r6, 178f4 <nrf_cloud_encode_state+0x48>
	    (reported_obj == NULL) || (pairing_obj == NULL)) {
   178f2:	b950      	cbnz	r0, 1790a <nrf_cloud_encode_state+0x5e>

		/* Report pairing topics. */
		cJSON *topics_obj = cJSON_CreateObject();

		if (topics_obj == NULL) {
			cJSON_Delete(root_obj);
   178f4:	4638      	mov	r0, r7
	ret += json_add_obj(state_obj, "reported", reported_obj);
	ret += json_add_obj(root_obj, "state", state_obj);

	if (ret != 0) {

		cJSON_Delete(root_obj);
   178f6:	f7fe f967 	bl	15bc8 <cJSON_Delete>
		cJSON_Delete(state_obj);
   178fa:	4640      	mov	r0, r8
   178fc:	f7fe f964 	bl	15bc8 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   17900:	4630      	mov	r0, r6
   17902:	f7fe f961 	bl	15bc8 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   17906:	4628      	mov	r0, r5
   17908:	e05a      	b.n	179c0 <nrf_cloud_encode_state+0x114>
	switch (reported_state) {
   1790a:	1fa0      	subs	r0, r4, #6
   1790c:	2804      	cmp	r0, #4
   1790e:	f200 80b9 	bhi.w	17a84 <nrf_cloud_encode_state+0x1d8>
   17912:	e8df f000 	tbb	[pc, r0]
   17916:	3a03      	.short	0x3a03
   17918:	b781      	.short	0xb781
   1791a:	88          	.byte	0x88
   1791b:	00          	.byte	0x00
		ret += json_add_str(reported_obj, "stage", "prod");
   1791c:	4a65      	ldr	r2, [pc, #404]	; (17ab4 <nrf_cloud_encode_state+0x208>)
   1791e:	4966      	ldr	r1, [pc, #408]	; (17ab8 <nrf_cloud_encode_state+0x20c>)
   17920:	4630      	mov	r0, r6
   17922:	f018 fd29 	bl	30378 <json_add_str>
		ret += json_add_str(pairing_obj, "state", INITIATE_STR);
   17926:	4a65      	ldr	r2, [pc, #404]	; (17abc <nrf_cloud_encode_state+0x210>)
		ret += json_add_str(reported_obj, "stage", "prod");
   17928:	4604      	mov	r4, r0
		ret += json_add_str(pairing_obj, "state", INITIATE_STR);
   1792a:	4965      	ldr	r1, [pc, #404]	; (17ac0 <nrf_cloud_encode_state+0x214>)
   1792c:	4628      	mov	r0, r5
   1792e:	f018 fd23 	bl	30378 <json_add_str>
		ret += json_add_null(pairing_obj, "config");
   17932:	4964      	ldr	r1, [pc, #400]	; (17ac4 <nrf_cloud_encode_state+0x218>)
		ret += json_add_str(pairing_obj, "state", INITIATE_STR);
   17934:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   17936:	4628      	mov	r0, r5
   17938:	f018 fd42 	bl	303c0 <json_add_null>
		ret += json_add_null(pairing_obj, "topics");
   1793c:	4962      	ldr	r1, [pc, #392]	; (17ac8 <nrf_cloud_encode_state+0x21c>)
		ret += json_add_null(pairing_obj, "config");
   1793e:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "topics");
   17940:	4628      	mov	r0, r5
   17942:	f018 fd3d 	bl	303c0 <json_add_null>
   17946:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   17948:	462a      	mov	r2, r5
   1794a:	4960      	ldr	r1, [pc, #384]	; (17acc <nrf_cloud_encode_state+0x220>)
   1794c:	4630      	mov	r0, r6
   1794e:	f7fe f991 	bl	15c74 <cJSON_AddItemToObject>
   17952:	4632      	mov	r2, r6
   17954:	495e      	ldr	r1, [pc, #376]	; (17ad0 <nrf_cloud_encode_state+0x224>)
   17956:	4640      	mov	r0, r8
   17958:	f7fe f98c 	bl	15c74 <cJSON_AddItemToObject>
   1795c:	4638      	mov	r0, r7
   1795e:	4642      	mov	r2, r8
   17960:	4957      	ldr	r1, [pc, #348]	; (17ac0 <nrf_cloud_encode_state+0x214>)
   17962:	f7fe f987 	bl	15c74 <cJSON_AddItemToObject>
		cJSON_Delete(root_obj);
   17966:	4638      	mov	r0, r7
	if (ret != 0) {
   17968:	2c00      	cmp	r4, #0
   1796a:	d1c4      	bne.n	178f6 <nrf_cloud_encode_state+0x4a>
		return -ENOMEM;
	}

	char *buffer;

	buffer = cJSON_PrintUnformatted(root_obj);
   1796c:	f017 f93a 	bl	2ebe4 <cJSON_PrintUnformatted>
   17970:	4605      	mov	r5, r0
	cJSON_Delete(root_obj);
   17972:	4638      	mov	r0, r7
   17974:	f7fe f928 	bl	15bc8 <cJSON_Delete>

	if (buffer == NULL) {
   17978:	b325      	cbz	r5, 179c4 <nrf_cloud_encode_state+0x118>
		return -ENOMEM;
	}

	output->ptr = buffer;
   1797a:	f8c9 5004 	str.w	r5, [r9, #4]
	output->len = strlen(buffer);
   1797e:	4628      	mov	r0, r5
   17980:	f013 f99c 	bl	2acbc <strlen>
   17984:	f8c9 0000 	str.w	r0, [r9]

	return 0;
   17988:	e08a      	b.n	17aa0 <nrf_cloud_encode_state+0x1f4>
		cJSON *config_obj = cJSON_CreateObject();
   1798a:	f017 f97a 	bl	2ec82 <cJSON_CreateObject>
   1798e:	4682      	mov	sl, r0
		cJSON *method_obj = cJSON_CreateString(
   17990:	4850      	ldr	r0, [pc, #320]	; (17ad4 <nrf_cloud_encode_state+0x228>)
   17992:	f017 f961 	bl	2ec58 <cJSON_CreateString>
   17996:	4683      	mov	fp, r0
		if ((config_obj == NULL) || (method_obj == NULL)) {
   17998:	f1ba 0f00 	cmp.w	sl, #0
   1799c:	d000      	beq.n	179a0 <nrf_cloud_encode_state+0xf4>
   1799e:	b9a0      	cbnz	r0, 179ca <nrf_cloud_encode_state+0x11e>
			cJSON_Delete(root_obj);
   179a0:	4638      	mov	r0, r7
   179a2:	f7fe f911 	bl	15bc8 <cJSON_Delete>
			cJSON_Delete(state_obj);
   179a6:	4640      	mov	r0, r8
   179a8:	f7fe f90e 	bl	15bc8 <cJSON_Delete>
			cJSON_Delete(reported_obj);
   179ac:	4630      	mov	r0, r6
   179ae:	f7fe f90b 	bl	15bc8 <cJSON_Delete>
			cJSON_Delete(pairing_obj);
   179b2:	4628      	mov	r0, r5
   179b4:	f7fe f908 	bl	15bc8 <cJSON_Delete>
			cJSON_Delete(config_obj);
   179b8:	4650      	mov	r0, sl
   179ba:	f7fe f905 	bl	15bc8 <cJSON_Delete>
			cJSON_Delete(method_obj);
   179be:	4658      	mov	r0, fp
		cJSON_Delete(pairing_obj);
   179c0:	f7fe f902 	bl	15bc8 <cJSON_Delete>
		return -ENOMEM;
   179c4:	f06f 040b 	mvn.w	r4, #11
   179c8:	e06a      	b.n	17aa0 <nrf_cloud_encode_state+0x1f4>
		ret += json_add_num(config_obj, "iteration", 1);
   179ca:	4b43      	ldr	r3, [pc, #268]	; (17ad8 <nrf_cloud_encode_state+0x22c>)
   179cc:	2200      	movs	r2, #0
   179ce:	4943      	ldr	r1, [pc, #268]	; (17adc <nrf_cloud_encode_state+0x230>)
   179d0:	4650      	mov	r0, sl
   179d2:	f018 fcbf 	bl	30354 <json_add_num>
	cJSON_AddItemToObject(parent, str, item);
   179d6:	465a      	mov	r2, fp
		ret += json_add_num(config_obj, "iteration", 1);
   179d8:	4604      	mov	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   179da:	4941      	ldr	r1, [pc, #260]	; (17ae0 <nrf_cloud_encode_state+0x234>)
   179dc:	4650      	mov	r0, sl
   179de:	f7fe f949 	bl	15c74 <cJSON_AddItemToObject>
		ret += json_add_num(config_obj, "length", 6);
   179e2:	2200      	movs	r2, #0
   179e4:	4b3f      	ldr	r3, [pc, #252]	; (17ae4 <nrf_cloud_encode_state+0x238>)
   179e6:	4940      	ldr	r1, [pc, #256]	; (17ae8 <nrf_cloud_encode_state+0x23c>)
   179e8:	4650      	mov	r0, sl
   179ea:	f018 fcb3 	bl	30354 <json_add_num>
		ret += json_add_str(pairing_obj, "state", PATTERN_WAIT_STR);
   179ee:	4a3f      	ldr	r2, [pc, #252]	; (17aec <nrf_cloud_encode_state+0x240>)
		ret += json_add_num(config_obj, "length", 6);
   179f0:	4404      	add	r4, r0
		ret += json_add_str(pairing_obj, "state", PATTERN_WAIT_STR);
   179f2:	4933      	ldr	r1, [pc, #204]	; (17ac0 <nrf_cloud_encode_state+0x214>)
   179f4:	4628      	mov	r0, r5
   179f6:	f018 fcbf 	bl	30378 <json_add_str>
	cJSON_AddItemToObject(parent, str, item);
   179fa:	4652      	mov	r2, sl
		ret += json_add_str(pairing_obj, "state", PATTERN_WAIT_STR);
   179fc:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   179fe:	4931      	ldr	r1, [pc, #196]	; (17ac4 <nrf_cloud_encode_state+0x218>)
   17a00:	4628      	mov	r0, r5
   17a02:	f7fe f937 	bl	15c74 <cJSON_AddItemToObject>
		if (ret != 0) {
   17a06:	2c00      	cmp	r4, #0
   17a08:	d09e      	beq.n	17948 <nrf_cloud_encode_state+0x9c>
			cJSON_Delete(config_obj);
   17a0a:	4650      	mov	r0, sl
   17a0c:	f7fe f8dc 	bl	15bc8 <cJSON_Delete>
			cJSON_Delete(method_obj);
   17a10:	4658      	mov	r0, fp
			cJSON_Delete(topics_obj);
   17a12:	f7fe f8d9 	bl	15bc8 <cJSON_Delete>
   17a16:	e797      	b.n	17948 <nrf_cloud_encode_state+0x9c>
		ret += json_add_str(pairing_obj, "state", PATTERN_MISMATCH_STR);
   17a18:	4a35      	ldr	r2, [pc, #212]	; (17af0 <nrf_cloud_encode_state+0x244>)
   17a1a:	4929      	ldr	r1, [pc, #164]	; (17ac0 <nrf_cloud_encode_state+0x214>)
   17a1c:	4628      	mov	r0, r5
   17a1e:	f018 fcab 	bl	30378 <json_add_str>
   17a22:	4604      	mov	r4, r0
		break;
   17a24:	e790      	b.n	17948 <nrf_cloud_encode_state+0x9c>
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   17a26:	4a33      	ldr	r2, [pc, #204]	; (17af4 <nrf_cloud_encode_state+0x248>)
   17a28:	4925      	ldr	r1, [pc, #148]	; (17ac0 <nrf_cloud_encode_state+0x214>)
   17a2a:	4628      	mov	r0, r5
   17a2c:	f018 fca4 	bl	30378 <json_add_str>
		ret += json_add_null(pairing_obj, "config");
   17a30:	4924      	ldr	r1, [pc, #144]	; (17ac4 <nrf_cloud_encode_state+0x218>)
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   17a32:	4604      	mov	r4, r0
		ret += json_add_null(pairing_obj, "config");
   17a34:	4628      	mov	r0, r5
   17a36:	f018 fcc3 	bl	303c0 <json_add_null>
		ret += json_add_null(reported_obj, "pairingStatus");
   17a3a:	492f      	ldr	r1, [pc, #188]	; (17af8 <nrf_cloud_encode_state+0x24c>)
		ret += json_add_null(pairing_obj, "config");
   17a3c:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "pairingStatus");
   17a3e:	4630      	mov	r0, r6
   17a40:	f018 fcbe 	bl	303c0 <json_add_null>
		nct_dc_endpoint_get(&tx_endp, &rx_endp);
   17a44:	4669      	mov	r1, sp
		ret += json_add_null(reported_obj, "pairingStatus");
   17a46:	4404      	add	r4, r0
		nct_dc_endpoint_get(&tx_endp, &rx_endp);
   17a48:	a802      	add	r0, sp, #8
   17a4a:	f000 fbd7 	bl	181fc <nct_dc_endpoint_get>
		cJSON *topics_obj = cJSON_CreateObject();
   17a4e:	f017 f918 	bl	2ec82 <cJSON_CreateObject>
		if (topics_obj == NULL) {
   17a52:	4682      	mov	sl, r0
   17a54:	2800      	cmp	r0, #0
   17a56:	f43f af4d 	beq.w	178f4 <nrf_cloud_encode_state+0x48>
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   17a5a:	9a03      	ldr	r2, [sp, #12]
   17a5c:	4927      	ldr	r1, [pc, #156]	; (17afc <nrf_cloud_encode_state+0x250>)
   17a5e:	f018 fc8b 	bl	30378 <json_add_str>
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   17a62:	9a01      	ldr	r2, [sp, #4]
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   17a64:	4404      	add	r4, r0
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   17a66:	4926      	ldr	r1, [pc, #152]	; (17b00 <nrf_cloud_encode_state+0x254>)
   17a68:	4650      	mov	r0, sl
   17a6a:	f018 fc85 	bl	30378 <json_add_str>
	cJSON_AddItemToObject(parent, str, item);
   17a6e:	4652      	mov	r2, sl
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   17a70:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   17a72:	4915      	ldr	r1, [pc, #84]	; (17ac8 <nrf_cloud_encode_state+0x21c>)
   17a74:	4628      	mov	r0, r5
   17a76:	f7fe f8fd 	bl	15c74 <cJSON_AddItemToObject>
		if (ret != 0) {
   17a7a:	2c00      	cmp	r4, #0
   17a7c:	f43f af64 	beq.w	17948 <nrf_cloud_encode_state+0x9c>
			cJSON_Delete(topics_obj);
   17a80:	4650      	mov	r0, sl
   17a82:	e7c6      	b.n	17a12 <nrf_cloud_encode_state+0x166>
		cJSON_Delete(root_obj);
   17a84:	4638      	mov	r0, r7
   17a86:	f7fe f89f 	bl	15bc8 <cJSON_Delete>
		cJSON_Delete(state_obj);
   17a8a:	4640      	mov	r0, r8
   17a8c:	f7fe f89c 	bl	15bc8 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   17a90:	4630      	mov	r0, r6
   17a92:	f7fe f899 	bl	15bc8 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   17a96:	4628      	mov	r0, r5
   17a98:	f7fe f896 	bl	15bc8 <cJSON_Delete>
		return -ENOTSUP;
   17a9c:	f06f 0485 	mvn.w	r4, #133	; 0x85
}
   17aa0:	4620      	mov	r0, r4
   17aa2:	b005      	add	sp, #20
   17aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17aa8:	000358bf 	.word	0x000358bf
   17aac:	0003452c 	.word	0x0003452c
   17ab0:	00035865 	.word	0x00035865
   17ab4:	00035843 	.word	0x00035843
   17ab8:	00035848 	.word	0x00035848
   17abc:	000357b2 	.word	0x000357b2
   17ac0:	000358fa 	.word	0x000358fa
   17ac4:	00035900 	.word	0x00035900
   17ac8:	0003584e 	.word	0x0003584e
   17acc:	0003590f 	.word	0x0003590f
   17ad0:	00035925 	.word	0x00035925
   17ad4:	00035855 	.word	0x00035855
   17ad8:	3ff00000 	.word	0x3ff00000
   17adc:	000358d5 	.word	0x000358d5
   17ae0:	000358df 	.word	0x000358df
   17ae4:	40180000 	.word	0x40180000
   17ae8:	000358e6 	.word	0x000358e6
   17aec:	000358ed 	.word	0x000358ed
   17af0:	000357bb 	.word	0x000357bb
   17af4:	000357d4 	.word	0x000357d4
   17af8:	00035917 	.word	0x00035917
   17afc:	0003585d 	.word	0x0003585d
   17b00:	00035861 	.word	0x00035861

00017b04 <nrf_cloud_decode_data_endpoint>:
 * @retval 0 or an error code indicating reason for failure
 */
int nrf_cloud_decode_data_endpoint(const struct nrf_cloud_data *input,
				   struct nrf_cloud_data *tx_endpoint,
				   struct nrf_cloud_data *rx_endpoint)
{
   17b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17b08:	4688      	mov	r8, r1
   17b0a:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(input != NULL);
   17b0c:	4604      	mov	r4, r0
   17b0e:	b958      	cbnz	r0, 17b28 <nrf_cloud_decode_data_endpoint+0x24>
   17b10:	4944      	ldr	r1, [pc, #272]	; (17c24 <nrf_cloud_decode_data_endpoint+0x120>)
   17b12:	4845      	ldr	r0, [pc, #276]	; (17c28 <nrf_cloud_decode_data_endpoint+0x124>)
   17b14:	f240 13db 	movw	r3, #475	; 0x1db
   17b18:	4a44      	ldr	r2, [pc, #272]	; (17c2c <nrf_cloud_decode_data_endpoint+0x128>)
   17b1a:	f016 fd8a 	bl	2e632 <printk>
   17b1e:	f240 11db 	movw	r1, #475	; 0x1db
   17b22:	4842      	ldr	r0, [pc, #264]	; (17c2c <nrf_cloud_decode_data_endpoint+0x128>)
   17b24:	f016 fd92 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   17b28:	6863      	ldr	r3, [r4, #4]
   17b2a:	b95b      	cbnz	r3, 17b44 <nrf_cloud_decode_data_endpoint+0x40>
   17b2c:	4940      	ldr	r1, [pc, #256]	; (17c30 <nrf_cloud_decode_data_endpoint+0x12c>)
   17b2e:	483e      	ldr	r0, [pc, #248]	; (17c28 <nrf_cloud_decode_data_endpoint+0x124>)
   17b30:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
   17b34:	4a3d      	ldr	r2, [pc, #244]	; (17c2c <nrf_cloud_decode_data_endpoint+0x128>)
   17b36:	f016 fd7c 	bl	2e632 <printk>
   17b3a:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
   17b3e:	483b      	ldr	r0, [pc, #236]	; (17c2c <nrf_cloud_decode_data_endpoint+0x128>)
   17b40:	f016 fd84 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   17b44:	6823      	ldr	r3, [r4, #0]
   17b46:	b95b      	cbnz	r3, 17b60 <nrf_cloud_decode_data_endpoint+0x5c>
   17b48:	493a      	ldr	r1, [pc, #232]	; (17c34 <nrf_cloud_decode_data_endpoint+0x130>)
   17b4a:	4837      	ldr	r0, [pc, #220]	; (17c28 <nrf_cloud_decode_data_endpoint+0x124>)
   17b4c:	f240 13dd 	movw	r3, #477	; 0x1dd
   17b50:	4a36      	ldr	r2, [pc, #216]	; (17c2c <nrf_cloud_decode_data_endpoint+0x128>)
   17b52:	f016 fd6e 	bl	2e632 <printk>
   17b56:	f240 11dd 	movw	r1, #477	; 0x1dd
   17b5a:	4834      	ldr	r0, [pc, #208]	; (17c2c <nrf_cloud_decode_data_endpoint+0x128>)
   17b5c:	f016 fd76 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(tx_endpoint != NULL);
   17b60:	f1b8 0f00 	cmp.w	r8, #0
   17b64:	d10b      	bne.n	17b7e <nrf_cloud_decode_data_endpoint+0x7a>
   17b66:	4934      	ldr	r1, [pc, #208]	; (17c38 <nrf_cloud_decode_data_endpoint+0x134>)
   17b68:	482f      	ldr	r0, [pc, #188]	; (17c28 <nrf_cloud_decode_data_endpoint+0x124>)
   17b6a:	f44f 73ef 	mov.w	r3, #478	; 0x1de
   17b6e:	4a2f      	ldr	r2, [pc, #188]	; (17c2c <nrf_cloud_decode_data_endpoint+0x128>)
   17b70:	f016 fd5f 	bl	2e632 <printk>
   17b74:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   17b78:	482c      	ldr	r0, [pc, #176]	; (17c2c <nrf_cloud_decode_data_endpoint+0x128>)
   17b7a:	f016 fd67 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(rx_endpoint != NULL);
   17b7e:	b95f      	cbnz	r7, 17b98 <nrf_cloud_decode_data_endpoint+0x94>
   17b80:	492e      	ldr	r1, [pc, #184]	; (17c3c <nrf_cloud_decode_data_endpoint+0x138>)
   17b82:	4829      	ldr	r0, [pc, #164]	; (17c28 <nrf_cloud_decode_data_endpoint+0x124>)
   17b84:	f240 13df 	movw	r3, #479	; 0x1df
   17b88:	4a28      	ldr	r2, [pc, #160]	; (17c2c <nrf_cloud_decode_data_endpoint+0x128>)
   17b8a:	f016 fd52 	bl	2e632 <printk>
   17b8e:	f240 11df 	movw	r1, #479	; 0x1df
   17b92:	4826      	ldr	r0, [pc, #152]	; (17c2c <nrf_cloud_decode_data_endpoint+0x128>)
   17b94:	f016 fd5a 	bl	2e64c <assert_post_action>

	int err;
	cJSON *root_obj;

	root_obj = cJSON_Parse(input->ptr);
   17b98:	6860      	ldr	r0, [r4, #4]
   17b9a:	f017 f81f 	bl	2ebdc <cJSON_Parse>
	if (root_obj == NULL) {
   17b9e:	4605      	mov	r5, r0
   17ba0:	b1f0      	cbz	r0, 17be0 <nrf_cloud_decode_data_endpoint+0xdc>
		return -ENOENT;
	}

	cJSON *state_obj = json_object_decode(root_obj, "state");
   17ba2:	4927      	ldr	r1, [pc, #156]	; (17c40 <nrf_cloud_decode_data_endpoint+0x13c>)
   17ba4:	f018 fbf9 	bl	3039a <json_object_decode>
	cJSON *parent_obj = json_object_decode(state_obj, "desired");
   17ba8:	4926      	ldr	r1, [pc, #152]	; (17c44 <nrf_cloud_decode_data_endpoint+0x140>)
	cJSON *state_obj = json_object_decode(root_obj, "state");
   17baa:	4604      	mov	r4, r0
	cJSON *parent_obj = json_object_decode(state_obj, "desired");
   17bac:	f018 fbf5 	bl	3039a <json_object_decode>

	if (parent_obj == NULL) {
		parent_obj = state_obj;
	}

	cJSON *pairing_obj = json_object_decode(parent_obj, "pairing");
   17bb0:	4925      	ldr	r1, [pc, #148]	; (17c48 <nrf_cloud_decode_data_endpoint+0x144>)
   17bb2:	2800      	cmp	r0, #0
   17bb4:	bf08      	it	eq
   17bb6:	4620      	moveq	r0, r4
   17bb8:	f018 fbef 	bl	3039a <json_object_decode>
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   17bbc:	4920      	ldr	r1, [pc, #128]	; (17c40 <nrf_cloud_decode_data_endpoint+0x13c>)
	cJSON *pairing_obj = json_object_decode(parent_obj, "pairing");
   17bbe:	4606      	mov	r6, r0
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   17bc0:	f018 fbeb 	bl	3039a <json_object_decode>
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   17bc4:	4921      	ldr	r1, [pc, #132]	; (17c4c <nrf_cloud_decode_data_endpoint+0x148>)
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   17bc6:	4604      	mov	r4, r0
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   17bc8:	4630      	mov	r0, r6
   17bca:	f018 fbe6 	bl	3039a <json_object_decode>
   17bce:	4606      	mov	r6, r0

	if ((pairing_state_obj == NULL) || (topic_obj == NULL) ||
   17bd0:	b11c      	cbz	r4, 17bda <nrf_cloud_decode_data_endpoint+0xd6>
   17bd2:	b110      	cbz	r0, 17bda <nrf_cloud_decode_data_endpoint+0xd6>
   17bd4:	68e3      	ldr	r3, [r4, #12]
   17bd6:	2b04      	cmp	r3, #4
   17bd8:	d005      	beq.n	17be6 <nrf_cloud_decode_data_endpoint+0xe2>
	}

	const char *state_str = pairing_state_obj->valuestring;

	if (!compare(state_str, PAIRED_STR)) {
		cJSON_Delete(root_obj);
   17bda:	4628      	mov	r0, r5
   17bdc:	f7fd fff4 	bl	15bc8 <cJSON_Delete>
		return -ENOENT;
   17be0:	f06f 0401 	mvn.w	r4, #1
   17be4:	e011      	b.n	17c0a <nrf_cloud_decode_data_endpoint+0x106>
	if (!compare(state_str, PAIRED_STR)) {
   17be6:	491a      	ldr	r1, [pc, #104]	; (17c50 <nrf_cloud_decode_data_endpoint+0x14c>)
   17be8:	6920      	ldr	r0, [r4, #16]
   17bea:	f018 fbda 	bl	303a2 <compare>
   17bee:	2800      	cmp	r0, #0
   17bf0:	d0f3      	beq.n	17bda <nrf_cloud_decode_data_endpoint+0xd6>
		return -ENOENT;
	}

	cJSON *tx_obj = json_object_decode(topic_obj, "d2c");
   17bf2:	4918      	ldr	r1, [pc, #96]	; (17c54 <nrf_cloud_decode_data_endpoint+0x150>)
   17bf4:	4630      	mov	r0, r6
   17bf6:	f018 fbd0 	bl	3039a <json_object_decode>

	err = json_decode_and_alloc(tx_obj, tx_endpoint);
   17bfa:	4641      	mov	r1, r8
   17bfc:	f018 fbf0 	bl	303e0 <json_decode_and_alloc>
	if (err) {
   17c00:	4604      	mov	r4, r0
   17c02:	b128      	cbz	r0, 17c10 <nrf_cloud_decode_data_endpoint+0x10c>

	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");

	err = json_decode_and_alloc(rx_obj, rx_endpoint);
	if (err) {
		cJSON_Delete(root_obj);
   17c04:	4628      	mov	r0, r5
		return err;
	}

	cJSON_Delete(root_obj);
   17c06:	f7fd ffdf 	bl	15bc8 <cJSON_Delete>

	return err;
}
   17c0a:	4620      	mov	r0, r4
   17c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");
   17c10:	4911      	ldr	r1, [pc, #68]	; (17c58 <nrf_cloud_decode_data_endpoint+0x154>)
   17c12:	4630      	mov	r0, r6
   17c14:	f018 fbc1 	bl	3039a <json_object_decode>
	err = json_decode_and_alloc(rx_obj, rx_endpoint);
   17c18:	4639      	mov	r1, r7
   17c1a:	f018 fbe1 	bl	303e0 <json_decode_and_alloc>
	if (err) {
   17c1e:	4604      	mov	r4, r0
   17c20:	e7f0      	b.n	17c04 <nrf_cloud_decode_data_endpoint+0x100>
   17c22:	bf00      	nop
   17c24:	000358aa 	.word	0x000358aa
   17c28:	0003452c 	.word	0x0003452c
   17c2c:	00035865 	.word	0x00035865
   17c30:	00035780 	.word	0x00035780
   17c34:	0003579a 	.word	0x0003579a
   17c38:	0003572b 	.word	0x0003572b
   17c3c:	00035746 	.word	0x00035746
   17c40:	000358fa 	.word	0x000358fa
   17c44:	000357aa 	.word	0x000357aa
   17c48:	0003590f 	.word	0x0003590f
   17c4c:	0003584e 	.word	0x0003584e
   17c50:	000357d4 	.word	0x000357d4
   17c54:	0003585d 	.word	0x0003585d
   17c58:	00035861 	.word	0x00035861

00017c5c <cc_connection_handler>:

	return 0;
}

static int cc_connection_handler(const struct nct_evt *nct_evt)
{
   17c5c:	b510      	push	{r4, lr}
   17c5e:	4604      	mov	r4, r0
   17c60:	b086      	sub	sp, #24
		.opcode = NCT_CC_OPCODE_GET_REQ,
		.id = CLOUD_STATE_REQ_ID,
	};

	int err;
	const struct nrf_cloud_evt evt = {
   17c62:	2100      	movs	r1, #0
   17c64:	2214      	movs	r2, #20
   17c66:	a801      	add	r0, sp, #4
   17c68:	f012 fe3c 	bl	2a8e4 <memset>
   17c6c:	23ff      	movs	r3, #255	; 0xff
		.type = NRF_CLOUD_EVT_ERROR,
	};

	if (nct_evt->status != 0) {
   17c6e:	6821      	ldr	r1, [r4, #0]
	const struct nrf_cloud_evt evt = {
   17c70:	f88d 3004 	strb.w	r3, [sp, #4]
	if (nct_evt->status != 0) {
   17c74:	b139      	cbz	r1, 17c86 <cc_connection_handler+0x2a>
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   17c76:	a901      	add	r1, sp, #4
   17c78:	200f      	movs	r0, #15
   17c7a:	f7ff fb5d 	bl	17338 <nfsm_set_current_state_and_notify>
		return 0;
   17c7e:	2400      	movs	r4, #0
	}

	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);

	return 0;
}
   17c80:	4620      	mov	r0, r4
   17c82:	b006      	add	sp, #24
   17c84:	bd10      	pop	{r4, pc}
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTED, NULL);
   17c86:	2004      	movs	r0, #4
   17c88:	f7ff fb56 	bl	17338 <nfsm_set_current_state_and_notify>
	err = nct_cc_send(&get_request);
   17c8c:	4806      	ldr	r0, [pc, #24]	; (17ca8 <cc_connection_handler+0x4c>)
   17c8e:	f000 fa6f 	bl	18170 <nct_cc_send>
	if (err) {
   17c92:	4604      	mov	r4, r0
   17c94:	b120      	cbz	r0, 17ca0 <cc_connection_handler+0x44>
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   17c96:	2002      	movs	r0, #2
   17c98:	a901      	add	r1, sp, #4
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   17c9a:	f7ff fb4d 	bl	17338 <nfsm_set_current_state_and_notify>
   17c9e:	e7ef      	b.n	17c80 <cc_connection_handler+0x24>
   17ca0:	4601      	mov	r1, r0
   17ca2:	2005      	movs	r0, #5
   17ca4:	e7f9      	b.n	17c9a <cc_connection_handler+0x3e>
   17ca6:	bf00      	nop
   17ca8:	00031210 	.word	0x00031210

00017cac <nfsm_handle_incoming_event>:
	if (state < STATE_TOTAL) {
   17cac:	290f      	cmp	r1, #15
{
   17cae:	b510      	push	{r4, lr}
	if (state < STATE_TOTAL) {
   17cb0:	d808      	bhi.n	17cc4 <nfsm_handle_incoming_event+0x18>
}
   17cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		int err = state_event_handlers[state][nct_evt->type](nct_evt);
   17cb6:	4b0b      	ldr	r3, [pc, #44]	; (17ce4 <nfsm_handle_incoming_event+0x38>)
   17cb8:	7a02      	ldrb	r2, [r0, #8]
   17cba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   17cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   17cc2:	4718      	bx	r3
	__ASSERT_NO_MSG(false);
   17cc4:	f240 1303 	movw	r3, #259	; 0x103
   17cc8:	4a07      	ldr	r2, [pc, #28]	; (17ce8 <nfsm_handle_incoming_event+0x3c>)
   17cca:	4908      	ldr	r1, [pc, #32]	; (17cec <nfsm_handle_incoming_event+0x40>)
   17ccc:	4808      	ldr	r0, [pc, #32]	; (17cf0 <nfsm_handle_incoming_event+0x44>)
   17cce:	f016 fcb0 	bl	2e632 <printk>
   17cd2:	f240 1103 	movw	r1, #259	; 0x103
   17cd6:	4804      	ldr	r0, [pc, #16]	; (17ce8 <nfsm_handle_incoming_event+0x3c>)
   17cd8:	f016 fcb8 	bl	2e64c <assert_post_action>
}
   17cdc:	f06f 0015 	mvn.w	r0, #21
   17ce0:	bd10      	pop	{r4, pc}
   17ce2:	bf00      	nop
   17ce4:	00031270 	.word	0x00031270
   17ce8:	0003595e 	.word	0x0003595e
   17cec:	00035e56 	.word	0x00035e56
   17cf0:	0003452c 	.word	0x0003452c

00017cf4 <dc_send>:
	}
	dc_endpoint_reset();
}

static u32_t dc_send(const struct nct_dc_data *dc_data, u8_t qos)
{
   17cf4:	b530      	push	{r4, r5, lr}
   17cf6:	460d      	mov	r5, r1
   17cf8:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   17cfa:	4604      	mov	r4, r0
   17cfc:	b368      	cbz	r0, 17d5a <dc_send+0x66>
		return -EINVAL;
	}

	struct mqtt_publish_param publish = {
   17cfe:	2210      	movs	r2, #16
   17d00:	2100      	movs	r1, #0
   17d02:	a802      	add	r0, sp, #8
   17d04:	f012 fdee 	bl	2a8e4 <memset>
		.message.topic.qos = qos,
		.message.topic.topic.size = nct.dc_tx_endp.size,
		.message.topic.topic.utf8 = nct.dc_tx_endp.utf8,
   17d08:	4b15      	ldr	r3, [pc, #84]	; (17d60 <dc_send+0x6c>)
	struct mqtt_publish_param publish = {
   17d0a:	f88d 5008 	strb.w	r5, [sp, #8]
   17d0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   17d12:	9200      	str	r2, [sp, #0]
   17d14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   17d18:	9201      	str	r2, [sp, #4]
	};

	/* Populate payload. */
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   17d1a:	6822      	ldr	r2, [r4, #0]
   17d1c:	b11a      	cbz	r2, 17d26 <dc_send+0x32>
   17d1e:	6861      	ldr	r1, [r4, #4]
   17d20:	b109      	cbz	r1, 17d26 <dc_send+0x32>
		publish.message.payload.data = (u8_t *)dc_data->data.ptr;
		publish.message.payload.len = dc_data->data.len;
   17d22:	e9cd 1203 	strd	r1, r2, [sp, #12]
	}

	if (dc_data->id != 0) {
   17d26:	68a2      	ldr	r2, [r4, #8]
   17d28:	b13a      	cbz	r2, 17d3a <dc_send+0x46>
		publish.message_id = dc_data->id;
   17d2a:	f8ad 2014 	strh.w	r2, [sp, #20]
	} else {
		publish.message_id = dc_get_next_message_id();
	}

	return mqtt_publish(&nct.client, &publish);
   17d2e:	4669      	mov	r1, sp
   17d30:	480c      	ldr	r0, [pc, #48]	; (17d64 <dc_send+0x70>)
   17d32:	f018 f9bc 	bl	300ae <mqtt_publish>
}
   17d36:	b007      	add	sp, #28
   17d38:	bd30      	pop	{r4, r5, pc}
	nct.message_id++;
   17d3a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
   17d3e:	1c51      	adds	r1, r2, #1
	if ((u16_t)nct.message_id == 0) {
   17d40:	b288      	uxth	r0, r1
   17d42:	b130      	cbz	r0, 17d52 <dc_send+0x5e>
	nct.message_id++;
   17d44:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
		publish.message_id = dc_get_next_message_id();
   17d48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   17d4c:	f8ad 3014 	strh.w	r3, [sp, #20]
   17d50:	e7ed      	b.n	17d2e <dc_send+0x3a>
		nct.message_id++;
   17d52:	3202      	adds	r2, #2
   17d54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   17d58:	e7f6      	b.n	17d48 <dc_send+0x54>
		return -EINVAL;
   17d5a:	f06f 0015 	mvn.w	r0, #21
   17d5e:	e7ea      	b.n	17d36 <dc_send+0x42>
   17d60:	20021cdc 	.word	0x20021cdc
   17d64:	20021cf4 	.word	0x20021cf4

00017d68 <nct_mqtt_evt_handler>:

/* Handle MQTT events. */
static void nct_mqtt_evt_handler(struct mqtt_client *const mqtt_client,
				 const struct mqtt_evt *_mqtt_evt)
{
	struct nct_evt evt = {
   17d68:	2300      	movs	r3, #0
{
   17d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17d6e:	b08c      	sub	sp, #48	; 0x30
	struct nct_evt evt = {
   17d70:	e9cd 3303 	strd	r3, r3, [sp, #12]
   17d74:	69cb      	ldr	r3, [r1, #28]
{
   17d76:	4607      	mov	r7, r0
	struct nct_evt evt = {
   17d78:	9302      	str	r3, [sp, #8]
	};
	struct nct_cc_data cc;
	struct nct_dc_data dc;
	bool event_notify = false;

	switch (_mqtt_evt->type) {
   17d7a:	780b      	ldrb	r3, [r1, #0]
{
   17d7c:	460c      	mov	r4, r1
	switch (_mqtt_evt->type) {
   17d7e:	2b08      	cmp	r3, #8
   17d80:	d834      	bhi.n	17dec <nct_mqtt_evt_handler+0x84>
   17d82:	e8df f003 	tbb	[pc, r3]
   17d86:	5a30      	.short	0x5a30
   17d88:	33335405 	.word	0x33335405
   17d8c:	4433      	.short	0x4433
   17d8e:	4d          	.byte	0x4d
   17d8f:	00          	.byte	0x00
	for (u32_t index = 0; index < list_size; index++) {
   17d90:	2500      	movs	r5, #0
   17d92:	f04f 080c 	mov.w	r8, #12
		if (strings_compare(
   17d96:	4e2d      	ldr	r6, [pc, #180]	; (17e4c <nct_mqtt_evt_handler+0xe4>)
   17d98:	fb08 f305 	mul.w	r3, r8, r5
   17d9c:	18f2      	adds	r2, r6, r3
	return (strncmp(s1, s2, MIN(s1_len, s2_len))) ? false : true;
   17d9e:	6851      	ldr	r1, [r2, #4]
   17da0:	68a2      	ldr	r2, [r4, #8]
   17da2:	6860      	ldr	r0, [r4, #4]
   17da4:	428a      	cmp	r2, r1
   17da6:	bf28      	it	cs
   17da8:	460a      	movcs	r2, r1
   17daa:	5999      	ldr	r1, [r3, r6]
   17dac:	f012 ffb4 	bl	2ad18 <strncmp>
		if (strings_compare(
   17db0:	b9f8      	cbnz	r0, 17df2 <nct_mqtt_evt_handler+0x8a>
			*opcode = nct_cc_rx_opcode_map[index];
   17db2:	4b27      	ldr	r3, [pc, #156]	; (17e50 <nct_mqtt_evt_handler+0xe8>)
   17db4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   17db8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
		 * topic. Then we notify the same.
		 */
		if (control_channel_topic_match(
			NCT_RX_LIST, &p->message.topic, &cc.opcode)) {

			cc.id = p->message_id;
   17dbc:	8b23      	ldrh	r3, [r4, #24]
   17dbe:	930a      	str	r3, [sp, #40]	; 0x28
			cc.data.ptr = p->message.payload.data;
   17dc0:	6923      	ldr	r3, [r4, #16]
   17dc2:	9309      	str	r3, [sp, #36]	; 0x24
			cc.data.len = p->message.payload.len;
   17dc4:	6963      	ldr	r3, [r4, #20]
   17dc6:	9308      	str	r3, [sp, #32]

			evt.type = NCT_EVT_CC_RX_DATA;
   17dc8:	2303      	movs	r3, #3
   17dca:	f88d 3010 	strb.w	r3, [sp, #16]
			evt.param.cc = &cc;
   17dce:	ab08      	add	r3, sp, #32
			dc.id = p->message_id;
			dc.data.ptr = p->message.payload.data;
			dc.data.len = p->message.payload.len;

			evt.type = NCT_EVT_DC_RX_DATA;
			evt.param.dc = &dc;
   17dd0:	9303      	str	r3, [sp, #12]
			event_notify = true;
		}

		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   17dd2:	7b23      	ldrb	r3, [r4, #12]
   17dd4:	2b01      	cmp	r3, #1
   17dd6:	d106      	bne.n	17de6 <nct_mqtt_evt_handler+0x7e>
			const struct mqtt_puback_param ack = {
   17dd8:	8b23      	ldrh	r3, [r4, #24]
   17dda:	a90c      	add	r1, sp, #48	; 0x30
   17ddc:	f821 3d2c 	strh.w	r3, [r1, #-44]!
				.message_id = p->message_id
			};

			/* Send acknowledgment. */
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   17de0:	4638      	mov	r0, r7
   17de2:	f018 f986 	bl	300f2 <mqtt_publish_qos1_ack>
	default:
		break;
	}

	if (event_notify) {
		int err = nct_input(&evt);
   17de6:	a802      	add	r0, sp, #8
   17de8:	f7ff fb68 	bl	174bc <nct_input>

		if (err != 0) {
			LOG_ERR("nct_input: failed %d", err);
		}
	}
}
   17dec:	b00c      	add	sp, #48	; 0x30
   17dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (u32_t index = 0; index < list_size; index++) {
   17df2:	3501      	adds	r5, #1
   17df4:	2d03      	cmp	r5, #3
   17df6:	d1cf      	bne.n	17d98 <nct_mqtt_evt_handler+0x30>
			dc.id = p->message_id;
   17df8:	8b23      	ldrh	r3, [r4, #24]
   17dfa:	9307      	str	r3, [sp, #28]
			dc.data.ptr = p->message.payload.data;
   17dfc:	6923      	ldr	r3, [r4, #16]
   17dfe:	9306      	str	r3, [sp, #24]
			dc.data.len = p->message.payload.len;
   17e00:	6963      	ldr	r3, [r4, #20]
   17e02:	9305      	str	r3, [sp, #20]
			evt.type = NCT_EVT_DC_RX_DATA;
   17e04:	2305      	movs	r3, #5
   17e06:	f88d 3010 	strb.w	r3, [sp, #16]
			evt.param.dc = &dc;
   17e0a:	ab05      	add	r3, sp, #20
   17e0c:	e7e0      	b.n	17dd0 <nct_mqtt_evt_handler+0x68>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   17e0e:	f240 42d2 	movw	r2, #1234	; 0x4d2
   17e12:	888b      	ldrh	r3, [r1, #4]
   17e14:	4293      	cmp	r3, r2
   17e16:	d112      	bne.n	17e3e <nct_mqtt_evt_handler+0xd6>
			evt.type = NCT_EVT_CC_CONNECTED;
   17e18:	2301      	movs	r3, #1
		evt.type = NCT_EVT_DISCONNECTED;
   17e1a:	f88d 3010 	strb.w	r3, [sp, #16]
   17e1e:	e7e2      	b.n	17de6 <nct_mqtt_evt_handler+0x7e>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   17e20:	f240 43d2 	movw	r3, #1234	; 0x4d2
   17e24:	888a      	ldrh	r2, [r1, #4]
   17e26:	429a      	cmp	r2, r3
   17e28:	d1e0      	bne.n	17dec <nct_mqtt_evt_handler+0x84>
			evt.type = NCT_EVT_CC_DISCONNECTED;
   17e2a:	2307      	movs	r3, #7
   17e2c:	e7f5      	b.n	17e1a <nct_mqtt_evt_handler+0xb2>
		evt.type = NCT_EVT_CC_TX_DATA_CNF;
   17e2e:	2304      	movs	r3, #4
   17e30:	f88d 3010 	strb.w	r3, [sp, #16]
		evt.param.data_id = _mqtt_evt->param.puback.message_id;
   17e34:	888b      	ldrh	r3, [r1, #4]
   17e36:	9303      	str	r3, [sp, #12]
   17e38:	e7d5      	b.n	17de6 <nct_mqtt_evt_handler+0x7e>
		evt.type = NCT_EVT_DISCONNECTED;
   17e3a:	2309      	movs	r3, #9
   17e3c:	e7ed      	b.n	17e1a <nct_mqtt_evt_handler+0xb2>
		if (_mqtt_evt->param.suback.message_id == NCT_DC_SUBSCRIBE_ID) {
   17e3e:	f242 223d 	movw	r2, #8765	; 0x223d
   17e42:	4293      	cmp	r3, r2
   17e44:	d1d2      	bne.n	17dec <nct_mqtt_evt_handler+0x84>
			evt.type = NCT_EVT_DC_CONNECTED;
   17e46:	2302      	movs	r3, #2
   17e48:	e7e7      	b.n	17e1a <nct_mqtt_evt_handler+0xb2>
   17e4a:	bf00      	nop
   17e4c:	00031328 	.word	0x00031328
   17e50:	0003134c 	.word	0x0003134c

00017e54 <dc_endpoint_free>:
{
   17e54:	b510      	push	{r4, lr}
	if (nct.dc_rx_endp.utf8 != NULL) {
   17e56:	4c08      	ldr	r4, [pc, #32]	; (17e78 <dc_endpoint_free+0x24>)
   17e58:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   17e5c:	b108      	cbz	r0, 17e62 <dc_endpoint_free+0xe>
		nrf_cloud_free(nct.dc_rx_endp.utf8);
   17e5e:	f018 fcd4 	bl	3080a <k_free>
	if (nct.dc_tx_endp.utf8 != NULL) {
   17e62:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   17e66:	b108      	cbz	r0, 17e6c <dc_endpoint_free+0x18>
		nrf_cloud_free(nct.dc_tx_endp.utf8);
   17e68:	f018 fccf 	bl	3080a <k_free>
	nct.dc_rx_endp.utf8 = NULL;
   17e6c:	2300      	movs	r3, #0
	nct.dc_rx_endp.size = 0;
   17e6e:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	nct.dc_tx_endp.size = 0;
   17e72:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
}
   17e76:	bd10      	pop	{r4, pc}
   17e78:	20021cdc 	.word	0x20021cdc

00017e7c <nct_mqtt_connect>:
{
   17e7c:	b570      	push	{r4, r5, r6, lr}
	mqtt_client_init(&nct.client);
   17e7e:	4c12      	ldr	r4, [pc, #72]	; (17ec8 <nct_mqtt_connect+0x4c>)
   17e80:	f104 0618 	add.w	r6, r4, #24
   17e84:	4630      	mov	r0, r6
   17e86:	f7ff f825 	bl	16ed4 <mqtt_client_init>
	nct.client.broker = (struct sockaddr *)&nct.broker;
   17e8a:	f104 0370 	add.w	r3, r4, #112	; 0x70
   17e8e:	63a3      	str	r3, [r4, #56]	; 0x38
	nct.client.client_id.utf8 = (u8_t *)client_id_buf;
   17e90:	480e      	ldr	r0, [pc, #56]	; (17ecc <nct_mqtt_connect+0x50>)
	nct.client.evt_cb = nct_mqtt_evt_handler;
   17e92:	4b0f      	ldr	r3, [pc, #60]	; (17ed0 <nct_mqtt_connect+0x54>)
	nct.client.client_id.utf8 = (u8_t *)client_id_buf;
   17e94:	6660      	str	r0, [r4, #100]	; 0x64
	nct.client.evt_cb = nct_mqtt_evt_handler;
   17e96:	64e3      	str	r3, [r4, #76]	; 0x4c
	nct.client.client_id.size = strlen(client_id_buf);
   17e98:	f012 ff10 	bl	2acbc <strlen>
	nct.client.protocol_version = MQTT_VERSION_3_1_1;
   17e9c:	2304      	movs	r3, #4
   17e9e:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	nct.client.password = NULL;
   17ea2:	2300      	movs	r3, #0
	nct.client.user_name = NULL;
   17ea4:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
	nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   17ea8:	2301      	movs	r3, #1
   17eaa:	f104 0520 	add.w	r5, r4, #32
	nct.client.client_id.size = strlen(client_id_buf);
   17eae:	66a0      	str	r0, [r4, #104]	; 0x68
	nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   17eb0:	7623      	strb	r3, [r4, #24]
   17eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   17eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   17eb6:	e894 0003 	ldmia.w	r4, {r0, r1}
   17eba:	e885 0003 	stmia.w	r5, {r0, r1}
	return mqtt_connect(&nct.client);
   17ebe:	4630      	mov	r0, r6
}
   17ec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_connect(&nct.client);
   17ec4:	f7ff b830 	b.w	16f28 <mqtt_connect>
   17ec8:	20021cdc 	.word	0x20021cdc
   17ecc:	20027b4f 	.word	0x20027b4f
   17ed0:	00017d69 	.word	0x00017d69

00017ed4 <nct_init>:
	nct.dc_rx_endp.utf8 = NULL;
   17ed4:	2100      	movs	r1, #0

int nct_init(void)
{
   17ed6:	b530      	push	{r4, r5, lr}
	nct.dc_rx_endp.utf8 = NULL;
   17ed8:	4c4a      	ldr	r4, [pc, #296]	; (18004 <nct_init+0x130>)
{
   17eda:	b085      	sub	sp, #20
	at_socket_fd = nrf_socket(NRF_AF_LTE, 0, NRF_PROTO_AT);
   17edc:	f240 2201 	movw	r2, #513	; 0x201
   17ee0:	2066      	movs	r0, #102	; 0x66
	nct.dc_rx_endp.size = 0;
   17ee2:	e9c4 1124 	strd	r1, r1, [r4, #144]	; 0x90
	nct.dc_tx_endp.size = 0;
   17ee6:	e9c4 1122 	strd	r1, r1, [r4, #136]	; 0x88
	at_socket_fd = nrf_socket(NRF_AF_LTE, 0, NRF_PROTO_AT);
   17eea:	f00e fb23 	bl	26534 <nrf_socket>
	__ASSERT_NO_MSG(at_socket_fd >= 0);
   17eee:	1e05      	subs	r5, r0, #0
   17ef0:	da09      	bge.n	17f06 <nct_init+0x32>
   17ef2:	4945      	ldr	r1, [pc, #276]	; (18008 <nct_init+0x134>)
   17ef4:	4845      	ldr	r0, [pc, #276]	; (1800c <nct_init+0x138>)
   17ef6:	23fb      	movs	r3, #251	; 0xfb
   17ef8:	4a45      	ldr	r2, [pc, #276]	; (18010 <nct_init+0x13c>)
   17efa:	f016 fb9a 	bl	2e632 <printk>
   17efe:	21fb      	movs	r1, #251	; 0xfb
   17f00:	4843      	ldr	r0, [pc, #268]	; (18010 <nct_init+0x13c>)
   17f02:	f016 fba3 	bl	2e64c <assert_post_action>
	bytes_written = nrf_write(at_socket_fd, "AT+CGSN", 7);
   17f06:	2207      	movs	r2, #7
   17f08:	4942      	ldr	r1, [pc, #264]	; (18014 <nct_init+0x140>)
   17f0a:	4628      	mov	r0, r5
   17f0c:	f00e fb68 	bl	265e0 <nrf_write>
	__ASSERT_NO_MSG(bytes_written == 7);
   17f10:	2807      	cmp	r0, #7
   17f12:	d009      	beq.n	17f28 <nct_init+0x54>
   17f14:	4940      	ldr	r1, [pc, #256]	; (18018 <nct_init+0x144>)
   17f16:	483d      	ldr	r0, [pc, #244]	; (1800c <nct_init+0x138>)
   17f18:	23fe      	movs	r3, #254	; 0xfe
   17f1a:	4a3d      	ldr	r2, [pc, #244]	; (18010 <nct_init+0x13c>)
   17f1c:	f016 fb89 	bl	2e632 <printk>
   17f20:	21fe      	movs	r1, #254	; 0xfe
   17f22:	483b      	ldr	r0, [pc, #236]	; (18010 <nct_init+0x13c>)
   17f24:	f016 fb92 	bl	2e64c <assert_post_action>
	bytes_read = nrf_read(at_socket_fd, imei_buf, NRF_IMEI_LEN);
   17f28:	220f      	movs	r2, #15
   17f2a:	4669      	mov	r1, sp
   17f2c:	4628      	mov	r0, r5
   17f2e:	f00e fba3 	bl	26678 <nrf_read>
	__ASSERT_NO_MSG(bytes_read == NRF_IMEI_LEN);
   17f32:	280f      	cmp	r0, #15
   17f34:	d00b      	beq.n	17f4e <nct_init+0x7a>
   17f36:	4939      	ldr	r1, [pc, #228]	; (1801c <nct_init+0x148>)
   17f38:	4834      	ldr	r0, [pc, #208]	; (1800c <nct_init+0x138>)
   17f3a:	f240 1301 	movw	r3, #257	; 0x101
   17f3e:	4a34      	ldr	r2, [pc, #208]	; (18010 <nct_init+0x13c>)
   17f40:	f016 fb77 	bl	2e632 <printk>
   17f44:	f240 1101 	movw	r1, #257	; 0x101
   17f48:	4831      	ldr	r0, [pc, #196]	; (18010 <nct_init+0x13c>)
   17f4a:	f016 fb7f 	bl	2e64c <assert_post_action>
	imei_buf[NRF_IMEI_LEN] = 0;
   17f4e:	2300      	movs	r3, #0
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "nrf-%s", imei_buf);
   17f50:	4a33      	ldr	r2, [pc, #204]	; (18020 <nct_init+0x14c>)
	imei_buf[NRF_IMEI_LEN] = 0;
   17f52:	f88d 300f 	strb.w	r3, [sp, #15]
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "nrf-%s", imei_buf);
   17f56:	2114      	movs	r1, #20
   17f58:	466b      	mov	r3, sp
   17f5a:	4832      	ldr	r0, [pc, #200]	; (18024 <nct_init+0x150>)
   17f5c:	f012 fd50 	bl	2aa00 <snprintf>
	ret = nrf_close(at_socket_fd);
   17f60:	4628      	mov	r0, r5
   17f62:	f00e faf9 	bl	26558 <nrf_close>
	__ASSERT_NO_MSG(ret == 0);
   17f66:	b158      	cbz	r0, 17f80 <nct_init+0xac>
   17f68:	492f      	ldr	r1, [pc, #188]	; (18028 <nct_init+0x154>)
   17f6a:	4828      	ldr	r0, [pc, #160]	; (1800c <nct_init+0x138>)
   17f6c:	f240 1307 	movw	r3, #263	; 0x107
   17f70:	4a27      	ldr	r2, [pc, #156]	; (18010 <nct_init+0x13c>)
   17f72:	f016 fb5e 	bl	2e632 <printk>
   17f76:	f240 1107 	movw	r1, #263	; 0x107
   17f7a:	4825      	ldr	r0, [pc, #148]	; (18010 <nct_init+0x13c>)
   17f7c:	f016 fb66 	bl	2e64c <assert_post_action>
	ret = snprintf(shadow_base_topic, sizeof(shadow_base_topic),
   17f80:	4b28      	ldr	r3, [pc, #160]	; (18024 <nct_init+0x150>)
   17f82:	4a2a      	ldr	r2, [pc, #168]	; (1802c <nct_init+0x158>)
   17f84:	2127      	movs	r1, #39	; 0x27
   17f86:	482a      	ldr	r0, [pc, #168]	; (18030 <nct_init+0x15c>)
   17f88:	f012 fd3a 	bl	2aa00 <snprintf>
	if (ret != NCT_SHADOW_BASE_TOPIC_LEN) {
   17f8c:	2826      	cmp	r0, #38	; 0x26
   17f8e:	d003      	beq.n	17f98 <nct_init+0xc4>
		return -ENOMEM;
   17f90:	f06f 000b 	mvn.w	r0, #11
	if (err) {
		return err;
	}

	return mqtt_init();
}
   17f94:	b005      	add	sp, #20
   17f96:	bd30      	pop	{r4, r5, pc}
	ret = snprintf(accepted_topic, sizeof(accepted_topic),
   17f98:	4b22      	ldr	r3, [pc, #136]	; (18024 <nct_init+0x150>)
   17f9a:	4a26      	ldr	r2, [pc, #152]	; (18034 <nct_init+0x160>)
   17f9c:	2134      	movs	r1, #52	; 0x34
   17f9e:	4826      	ldr	r0, [pc, #152]	; (18038 <nct_init+0x164>)
   17fa0:	f012 fd2e 	bl	2aa00 <snprintf>
	if (ret != NCT_ACCEPTED_TOPIC_LEN) {
   17fa4:	2833      	cmp	r0, #51	; 0x33
   17fa6:	d1f3      	bne.n	17f90 <nct_init+0xbc>
	ret = snprintf(rejected_topic, sizeof(rejected_topic),
   17fa8:	4b1e      	ldr	r3, [pc, #120]	; (18024 <nct_init+0x150>)
   17faa:	4a24      	ldr	r2, [pc, #144]	; (1803c <nct_init+0x168>)
   17fac:	2134      	movs	r1, #52	; 0x34
   17fae:	4824      	ldr	r0, [pc, #144]	; (18040 <nct_init+0x16c>)
   17fb0:	f012 fd26 	bl	2aa00 <snprintf>
	if (ret != NCT_REJECTED_TOPIC_LEN) {
   17fb4:	2833      	cmp	r0, #51	; 0x33
   17fb6:	d1eb      	bne.n	17f90 <nct_init+0xbc>
	ret = snprintf(update_delta_topic, sizeof(update_delta_topic),
   17fb8:	4b1a      	ldr	r3, [pc, #104]	; (18024 <nct_init+0x150>)
   17fba:	4a22      	ldr	r2, [pc, #136]	; (18044 <nct_init+0x170>)
   17fbc:	2134      	movs	r1, #52	; 0x34
   17fbe:	4822      	ldr	r0, [pc, #136]	; (18048 <nct_init+0x174>)
   17fc0:	f012 fd1e 	bl	2aa00 <snprintf>
	if (ret != NCT_UPDATE_DELTA_TOPIC_LEN) {
   17fc4:	2833      	cmp	r0, #51	; 0x33
   17fc6:	d1e3      	bne.n	17f90 <nct_init+0xbc>
	ret = snprintf(update_topic, sizeof(update_topic),
   17fc8:	4b16      	ldr	r3, [pc, #88]	; (18024 <nct_init+0x150>)
   17fca:	4a20      	ldr	r2, [pc, #128]	; (1804c <nct_init+0x178>)
   17fcc:	212e      	movs	r1, #46	; 0x2e
   17fce:	4820      	ldr	r0, [pc, #128]	; (18050 <nct_init+0x17c>)
   17fd0:	f012 fd16 	bl	2aa00 <snprintf>
	if (ret != NCT_UPDATE_TOPIC_LEN) {
   17fd4:	282d      	cmp	r0, #45	; 0x2d
   17fd6:	d1db      	bne.n	17f90 <nct_init+0xbc>
	ret = snprintf(shadow_get_topic, sizeof(shadow_get_topic),
   17fd8:	4b12      	ldr	r3, [pc, #72]	; (18024 <nct_init+0x150>)
   17fda:	4a1e      	ldr	r2, [pc, #120]	; (18054 <nct_init+0x180>)
   17fdc:	212b      	movs	r1, #43	; 0x2b
   17fde:	481e      	ldr	r0, [pc, #120]	; (18058 <nct_init+0x184>)
   17fe0:	f012 fd0e 	bl	2aa00 <snprintf>
	if (ret != NCT_SHADOW_GET_LEN) {
   17fe4:	282a      	cmp	r0, #42	; 0x2a
   17fe6:	d1d3      	bne.n	17f90 <nct_init+0xbc>
	nct.tls_config.cipher_count = 0;
   17fe8:	2300      	movs	r3, #0
   17fea:	2202      	movs	r2, #2
	nct.tls_config.cipher_list = NULL;
   17fec:	60a3      	str	r3, [r4, #8]
	nct.tls_config.cipher_count = 0;
   17fee:	e9c4 2300 	strd	r2, r3, [r4]
	nct.tls_config.sec_tag_count = ARRAY_SIZE(sec_tag_list);
   17ff2:	2301      	movs	r3, #1
   17ff4:	60e3      	str	r3, [r4, #12]
	nct.tls_config.seg_tag_list = sec_tag_list;
   17ff6:	4b19      	ldr	r3, [pc, #100]	; (1805c <nct_init+0x188>)
   17ff8:	6123      	str	r3, [r4, #16]
	nct.tls_config.hostname = NRF_CLOUD_HOSTNAME;
   17ffa:	4b19      	ldr	r3, [pc, #100]	; (18060 <nct_init+0x18c>)
   17ffc:	6163      	str	r3, [r4, #20]
	return mqtt_init();
   17ffe:	f7fe ff4d 	bl	16e9c <mqtt_init>
   18002:	e7c7      	b.n	17f94 <nct_init+0xc0>
   18004:	20021cdc 	.word	0x20021cdc
   18008:	00035a1b 	.word	0x00035a1b
   1800c:	0003452c 	.word	0x0003452c
   18010:	000359d2 	.word	0x000359d2
   18014:	00035a2d 	.word	0x00035a2d
   18018:	00035a35 	.word	0x00035a35
   1801c:	00035a48 	.word	0x00035a48
   18020:	00035a59 	.word	0x00035a59
   18024:	20027b4f 	.word	0x20027b4f
   18028:	00035a60 	.word	0x00035a60
   1802c:	00035a69 	.word	0x00035a69
   18030:	20027b97 	.word	0x20027b97
   18034:	00035a7f 	.word	0x00035a7f
   18038:	20027b1b 	.word	0x20027b1b
   1803c:	00035aa2 	.word	0x00035aa2
   18040:	20027b63 	.word	0x20027b63
   18044:	00035ac5 	.word	0x00035ac5
   18048:	20027be9 	.word	0x20027be9
   1804c:	00035ae8 	.word	0x00035ae8
   18050:	20027c1d 	.word	0x20027c1d
   18054:	00035b05 	.word	0x00035b05
   18058:	20027bbe 	.word	0x20027bbe
   1805c:	2002d854 	.word	0x2002d854
   18060:	00035b1f 	.word	0x00035b1f

00018064 <nct_connect>:

	return err;
}
#else
int nct_connect(void)
{
   18064:	b570      	push	{r4, r5, r6, lr}
   18066:	b08a      	sub	sp, #40	; 0x28
	int err;
	struct addrinfo *result;
	struct addrinfo *addr;
	struct addrinfo hints = {
   18068:	2220      	movs	r2, #32
   1806a:	2100      	movs	r1, #0
   1806c:	a802      	add	r0, sp, #8
   1806e:	f012 fc39 	bl	2a8e4 <memset>
   18072:	2301      	movs	r3, #1

static inline int getaddrinfo(const char *node, const char *service,
			      const struct addrinfo *hints,
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
   18074:	4c2c      	ldr	r4, [pc, #176]	; (18128 <nct_connect+0xc4>)
   18076:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1807a:	6823      	ldr	r3, [r4, #0]
   1807c:	b94b      	cbnz	r3, 18092 <nct_connect+0x2e>
   1807e:	492b      	ldr	r1, [pc, #172]	; (1812c <nct_connect+0xc8>)
   18080:	482b      	ldr	r0, [pc, #172]	; (18130 <nct_connect+0xcc>)
   18082:	2393      	movs	r3, #147	; 0x93
   18084:	4a2b      	ldr	r2, [pc, #172]	; (18134 <nct_connect+0xd0>)
   18086:	f016 fad4 	bl	2e632 <printk>
   1808a:	2193      	movs	r1, #147	; 0x93
   1808c:	4829      	ldr	r0, [pc, #164]	; (18134 <nct_connect+0xd0>)
   1808e:	f016 fadd 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);
   18092:	6823      	ldr	r3, [r4, #0]
   18094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   18096:	b94b      	cbnz	r3, 180ac <nct_connect+0x48>
   18098:	4927      	ldr	r1, [pc, #156]	; (18138 <nct_connect+0xd4>)
   1809a:	4825      	ldr	r0, [pc, #148]	; (18130 <nct_connect+0xcc>)
   1809c:	2394      	movs	r3, #148	; 0x94
   1809e:	4a25      	ldr	r2, [pc, #148]	; (18134 <nct_connect+0xd0>)
   180a0:	f016 fac7 	bl	2e632 <printk>
   180a4:	2194      	movs	r1, #148	; 0x94
   180a6:	4823      	ldr	r0, [pc, #140]	; (18134 <nct_connect+0xd0>)
   180a8:	f016 fad0 	bl	2e64c <assert_post_action>

	return socket_ops->getaddrinfo(node, service, hints, res);
   180ac:	6823      	ldr	r3, [r4, #0]
   180ae:	aa02      	add	r2, sp, #8
   180b0:	6b5d      	ldr	r5, [r3, #52]	; 0x34
   180b2:	2100      	movs	r1, #0
   180b4:	ab01      	add	r3, sp, #4
   180b6:	4821      	ldr	r0, [pc, #132]	; (1813c <nct_connect+0xd8>)
   180b8:	47a8      	blx	r5
		.ai_family = NRF_CLOUD_AF_FAMILY,
		.ai_socktype = SOCK_STREAM
	};

	err = getaddrinfo(NRF_CLOUD_HOSTNAME, NULL, &hints, &result);
	if (err) {
   180ba:	4605      	mov	r5, r0
   180bc:	2800      	cmp	r0, #0
   180be:	d12c      	bne.n	1811a <nct_connect+0xb6>
		LOG_DBG("getaddrinfo failed %d", err);

		return err;
	}

	addr = result;
   180c0:	9b01      	ldr	r3, [sp, #4]
	err = -ENOENT;

	/* Look for address of the broker. */
	while (addr != NULL) {
   180c2:	2b00      	cmp	r3, #0
   180c4:	d02c      	beq.n	18120 <nct_connect+0xbc>
		/* IPv4 Address. */
		if ((addr->ai_addrlen == sizeof(struct sockaddr_in)) &&
   180c6:	691a      	ldr	r2, [r3, #16]
   180c8:	2a08      	cmp	r2, #8
   180ca:	d129      	bne.n	18120 <nct_connect+0xbc>
			struct sockaddr_in *broker =
				((struct sockaddr_in *)&nct.broker);

			broker->sin_addr.s_addr =
				((struct sockaddr_in *)addr->ai_addr)
				->sin_addr.s_addr;
   180cc:	695b      	ldr	r3, [r3, #20]
   180ce:	685a      	ldr	r2, [r3, #4]
			broker->sin_addr.s_addr =
   180d0:	4b1b      	ldr	r3, [pc, #108]	; (18140 <nct_connect+0xdc>)
   180d2:	675a      	str	r2, [r3, #116]	; 0x74
			broker->sin_family = AF_INET;
   180d4:	4a1b      	ldr	r2, [pc, #108]	; (18144 <nct_connect+0xe0>)
   180d6:	671a      	str	r2, [r3, #112]	; 0x70
			broker->sin_port = htons(NRF_CLOUD_PORT);

			LOG_DBG("IPv4 Address 0x%08x", broker->sin_addr.s_addr);
			err = nct_mqtt_connect();
   180d8:	f7ff fed0 	bl	17e7c <nct_mqtt_connect>
   180dc:	4605      	mov	r5, r0
}

static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
   180de:	6823      	ldr	r3, [r4, #0]
		addr = addr->ai_next;
		break;
	}

	/* Free the address. */
	freeaddrinfo(result);
   180e0:	9e01      	ldr	r6, [sp, #4]
   180e2:	b94b      	cbnz	r3, 180f8 <nct_connect+0x94>
   180e4:	4911      	ldr	r1, [pc, #68]	; (1812c <nct_connect+0xc8>)
   180e6:	4812      	ldr	r0, [pc, #72]	; (18130 <nct_connect+0xcc>)
   180e8:	239b      	movs	r3, #155	; 0x9b
   180ea:	4a12      	ldr	r2, [pc, #72]	; (18134 <nct_connect+0xd0>)
   180ec:	f016 faa1 	bl	2e632 <printk>
   180f0:	219b      	movs	r1, #155	; 0x9b
   180f2:	4810      	ldr	r0, [pc, #64]	; (18134 <nct_connect+0xd0>)
   180f4:	f016 faaa 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);
   180f8:	6823      	ldr	r3, [r4, #0]
   180fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   180fc:	b94b      	cbnz	r3, 18112 <nct_connect+0xae>
   180fe:	4912      	ldr	r1, [pc, #72]	; (18148 <nct_connect+0xe4>)
   18100:	480b      	ldr	r0, [pc, #44]	; (18130 <nct_connect+0xcc>)
   18102:	239c      	movs	r3, #156	; 0x9c
   18104:	4a0b      	ldr	r2, [pc, #44]	; (18134 <nct_connect+0xd0>)
   18106:	f016 fa94 	bl	2e632 <printk>
   1810a:	219c      	movs	r1, #156	; 0x9c
   1810c:	4809      	ldr	r0, [pc, #36]	; (18134 <nct_connect+0xd0>)
   1810e:	f016 fa9d 	bl	2e64c <assert_post_action>

	return socket_ops->freeaddrinfo(res);
   18112:	6823      	ldr	r3, [r4, #0]
   18114:	4630      	mov	r0, r6
   18116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18118:	4798      	blx	r3

	return err;
}
   1811a:	4628      	mov	r0, r5
   1811c:	b00a      	add	sp, #40	; 0x28
   1811e:	bd70      	pop	{r4, r5, r6, pc}
	err = -ENOENT;
   18120:	f06f 0501 	mvn.w	r5, #1
   18124:	e7db      	b.n	180de <nct_connect+0x7a>
   18126:	bf00      	nop
   18128:	20020994 	.word	0x20020994
   1812c:	000356ae 	.word	0x000356ae
   18130:	0003452c 	.word	0x0003452c
   18134:	00035678 	.word	0x00035678
   18138:	000359a1 	.word	0x000359a1
   1813c:	00035b1f 	.word	0x00035b1f
   18140:	20021cdc 	.word	0x20021cdc
   18144:	b3220001 	.word	0xb3220001
   18148:	000359b9 	.word	0x000359b9

0001814c <nct_cc_connect>:
#endif /* defined(CONFIG_NRF_CLOUD_STATIC_IPV4) */

int nct_cc_connect(void)
{
   1814c:	b507      	push	{r0, r1, r2, lr}
	const struct mqtt_subscription_list subscription_list = {
   1814e:	466b      	mov	r3, sp
   18150:	4a05      	ldr	r2, [pc, #20]	; (18168 <nct_cc_connect+0x1c>)
   18152:	e892 0003 	ldmia.w	r2, {r0, r1}
   18156:	e883 0003 	stmia.w	r3, {r0, r1}
		.list = (struct mqtt_topic *)&nct_cc_rx_list,
		.list_count = ARRAY_SIZE(nct_cc_rx_list),
		.message_id = NCT_CC_SUBSCRIBE_ID
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   1815a:	4619      	mov	r1, r3
   1815c:	4803      	ldr	r0, [pc, #12]	; (1816c <nct_cc_connect+0x20>)
   1815e:	f018 f80c 	bl	3017a <mqtt_subscribe>
}
   18162:	b003      	add	sp, #12
   18164:	f85d fb04 	ldr.w	pc, [sp], #4
   18168:	00030d68 	.word	0x00030d68
   1816c:	20021cf4 	.word	0x20021cf4

00018170 <nct_cc_send>:

int nct_cc_send(const struct nct_cc_data *cc_data)
{
   18170:	b530      	push	{r4, r5, lr}
	if (cc_data == NULL) {
   18172:	4604      	mov	r4, r0
{
   18174:	b087      	sub	sp, #28
	if (cc_data == NULL) {
   18176:	b308      	cbz	r0, 181bc <nct_cc_send+0x4c>
		LOG_ERR("cc_data == NULL");
		return -EINVAL;
	}

	if (cc_data->opcode >= ARRAY_SIZE(nct_cc_tx_list)) {
   18178:	7b05      	ldrb	r5, [r0, #12]
   1817a:	2d01      	cmp	r5, #1
   1817c:	d821      	bhi.n	181c2 <nct_cc_send+0x52>
		LOG_ERR("opcode = %d", cc_data->opcode);
		return -ENOTSUP;
	}

	struct mqtt_publish_param publish = {
   1817e:	2210      	movs	r2, #16
   18180:	2100      	movs	r1, #0
   18182:	a802      	add	r0, sp, #8
   18184:	f012 fbae 	bl	2a8e4 <memset>
		.message.topic.qos = nct_cc_tx_list[cc_data->opcode].qos,
		.message.topic.topic.size =
			nct_cc_tx_list[cc_data->opcode].topic.size,
		.message.topic.topic.utf8 =
			nct_cc_tx_list[cc_data->opcode].topic.utf8,
   18188:	230c      	movs	r3, #12
   1818a:	436b      	muls	r3, r5
   1818c:	490e      	ldr	r1, [pc, #56]	; (181c8 <nct_cc_send+0x58>)
   1818e:	18ca      	adds	r2, r1, r3
	struct mqtt_publish_param publish = {
   18190:	58cb      	ldr	r3, [r1, r3]
   18192:	9300      	str	r3, [sp, #0]
   18194:	6853      	ldr	r3, [r2, #4]
   18196:	9301      	str	r3, [sp, #4]
   18198:	7a13      	ldrb	r3, [r2, #8]
   1819a:	f88d 3008 	strb.w	r3, [sp, #8]
	};

	/* Populate payload. */
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   1819e:	6823      	ldr	r3, [r4, #0]
   181a0:	b11b      	cbz	r3, 181aa <nct_cc_send+0x3a>
   181a2:	6862      	ldr	r2, [r4, #4]
   181a4:	b10a      	cbz	r2, 181aa <nct_cc_send+0x3a>
		publish.message.payload.data = (u8_t *)cc_data->data.ptr,
		publish.message.payload.len = cc_data->data.len;
   181a6:	e9cd 2303 	strd	r2, r3, [sp, #12]
	}

	publish.message_id = cc_data->id;
   181aa:	68a3      	ldr	r3, [r4, #8]

	LOG_DBG("mqtt_publish: id=%d opcode=%d len=%d",
		publish.message_id, cc_data->opcode,
		cc_data->data.len);

	int err = mqtt_publish(&nct.client, &publish);
   181ac:	4669      	mov	r1, sp
   181ae:	4807      	ldr	r0, [pc, #28]	; (181cc <nct_cc_send+0x5c>)
	publish.message_id = cc_data->id;
   181b0:	f8ad 3014 	strh.w	r3, [sp, #20]
	int err = mqtt_publish(&nct.client, &publish);
   181b4:	f017 ff7b 	bl	300ae <mqtt_publish>
	if (err) {
		LOG_ERR("mqtt_publish failed %d", err);
	}

	return err;
}
   181b8:	b007      	add	sp, #28
   181ba:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   181bc:	f06f 0015 	mvn.w	r0, #21
   181c0:	e7fa      	b.n	181b8 <nct_cc_send+0x48>
		return -ENOTSUP;
   181c2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   181c6:	e7f7      	b.n	181b8 <nct_cc_send+0x48>
   181c8:	00031358 	.word	0x00031358
   181cc:	20021cf4 	.word	0x20021cf4

000181d0 <nct_dc_endpoint_set>:
	return mqtt_unsubscribe(&nct.client, &subscription_list);
}

void nct_dc_endpoint_set(const struct nrf_cloud_data *tx_endp,
			 const struct nrf_cloud_data *rx_endp)
{
   181d0:	b538      	push	{r3, r4, r5, lr}
   181d2:	4605      	mov	r5, r0
   181d4:	460c      	mov	r4, r1
	LOG_DBG("nct_dc_endpoint_set");

	/* In case the endpoint was previous set, free and reset
	 * before copying new one.
	 */
	dc_endpoint_free();
   181d6:	f7ff fe3d 	bl	17e54 <dc_endpoint_free>

	nct.dc_tx_endp.utf8 = (u8_t *)tx_endp->ptr;
   181da:	686a      	ldr	r2, [r5, #4]
   181dc:	4b06      	ldr	r3, [pc, #24]	; (181f8 <nct_dc_endpoint_set+0x28>)
   181de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	nct.dc_tx_endp.size = tx_endp->len;
   181e2:	682a      	ldr	r2, [r5, #0]
   181e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	nct.dc_rx_endp.utf8 = (u8_t *)rx_endp->ptr;
   181e8:	6862      	ldr	r2, [r4, #4]
   181ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	nct.dc_rx_endp.size = rx_endp->len;
   181ee:	6822      	ldr	r2, [r4, #0]
   181f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   181f4:	bd38      	pop	{r3, r4, r5, pc}
   181f6:	bf00      	nop
   181f8:	20021cdc 	.word	0x20021cdc

000181fc <nct_dc_endpoint_get>:
void nct_dc_endpoint_get(struct nrf_cloud_data *const tx_endp,
			 struct nrf_cloud_data *const rx_endp)
{
	LOG_DBG("nct_dc_endpoint_get");

	tx_endp->ptr = nct.dc_tx_endp.utf8;
   181fc:	4b06      	ldr	r3, [pc, #24]	; (18218 <nct_dc_endpoint_get+0x1c>)
   181fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   18202:	6042      	str	r2, [r0, #4]
	tx_endp->len = nct.dc_tx_endp.size;
   18204:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   18208:	6002      	str	r2, [r0, #0]

	rx_endp->ptr = nct.dc_rx_endp.utf8;
   1820a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	rx_endp->len = nct.dc_rx_endp.size;
   1820e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
	rx_endp->ptr = nct.dc_rx_endp.utf8;
   18212:	604a      	str	r2, [r1, #4]
	rx_endp->len = nct.dc_rx_endp.size;
   18214:	600b      	str	r3, [r1, #0]
}
   18216:	4770      	bx	lr
   18218:	20021cdc 	.word	0x20021cdc

0001821c <nct_dc_connect>:

int nct_dc_connect(void)
{
   1821c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("nct_dc_connect");

	struct mqtt_topic subscribe_topic = {
		.topic = {
			.utf8 = nct.dc_rx_endp.utf8,
   1821e:	480a      	ldr	r0, [pc, #40]	; (18248 <nct_dc_connect+0x2c>)
		.list = &subscribe_topic,
		.list_count = 1,
		.message_id = NCT_DC_SUBSCRIBE_ID
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   18220:	a901      	add	r1, sp, #4
	struct mqtt_topic subscribe_topic = {
   18222:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
	return mqtt_subscribe(&nct.client, &subscription_list);
   18226:	3018      	adds	r0, #24
	struct mqtt_topic subscribe_topic = {
   18228:	9303      	str	r3, [sp, #12]
   1822a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1822c:	9304      	str	r3, [sp, #16]
   1822e:	2301      	movs	r3, #1
   18230:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
   18234:	ab03      	add	r3, sp, #12
   18236:	9301      	str	r3, [sp, #4]
   18238:	4b04      	ldr	r3, [pc, #16]	; (1824c <nct_dc_connect+0x30>)
   1823a:	9302      	str	r3, [sp, #8]
	return mqtt_subscribe(&nct.client, &subscription_list);
   1823c:	f017 ff9d 	bl	3017a <mqtt_subscribe>
}
   18240:	b007      	add	sp, #28
   18242:	f85d fb04 	ldr.w	pc, [sp], #4
   18246:	bf00      	nop
   18248:	20021cdc 	.word	0x20021cdc
   1824c:	223d0001 	.word	0x223d0001

00018250 <nct_dc_disconnect>:
{
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
}

int nct_dc_disconnect(void)
{
   18250:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_dc_disconnect");

	const struct mqtt_subscription_list subscription_list = {
   18252:	466b      	mov	r3, sp
   18254:	4a05      	ldr	r2, [pc, #20]	; (1826c <nct_dc_disconnect+0x1c>)
   18256:	e892 0003 	ldmia.w	r2, {r0, r1}
   1825a:	e883 0003 	stmia.w	r3, {r0, r1}
		.list = (struct mqtt_topic *)&nct.dc_rx_endp,
		.list_count = 1,
		.message_id = NCT_DC_SUBSCRIBE_ID
	};

	return mqtt_unsubscribe(&nct.client, &subscription_list);
   1825e:	4619      	mov	r1, r3
   18260:	4803      	ldr	r0, [pc, #12]	; (18270 <nct_dc_disconnect+0x20>)
   18262:	f017 ffac 	bl	301be <mqtt_unsubscribe>
}
   18266:	b003      	add	sp, #12
   18268:	f85d fb04 	ldr.w	pc, [sp], #4
   1826c:	00030d70 	.word	0x00030d70
   18270:	20021cf4 	.word	0x20021cf4

00018274 <nct_disconnect>:

int nct_disconnect(void)
{
   18274:	b508      	push	{r3, lr}
	LOG_DBG("nct_disconnect");

	dc_endpoint_free();
   18276:	f7ff fded 	bl	17e54 <dc_endpoint_free>
	return mqtt_disconnect(&nct.client);
}
   1827a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mqtt_disconnect(&nct.client);
   1827e:	4801      	ldr	r0, [pc, #4]	; (18284 <nct_disconnect+0x10>)
   18280:	f017 bf59 	b.w	30136 <mqtt_disconnect>
   18284:	20021cf4 	.word	0x20021cf4

00018288 <nct_process>:

void nct_process(void)
{
   18288:	b508      	push	{r3, lr}
	mqtt_input(&nct.client);
   1828a:	4803      	ldr	r0, [pc, #12]	; (18298 <nct_process+0x10>)
   1828c:	f017 ffd8 	bl	30240 <mqtt_input>
	mqtt_live();
}
   18290:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mqtt_live();
   18294:	f7fe be98 	b.w	16fc8 <mqtt_live>
   18298:	20021cf4 	.word	0x20021cf4

0001829c <close>:
{
   1829c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   1829e:	4c10      	ldr	r4, [pc, #64]	; (182e0 <close+0x44>)
{
   182a0:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   182a2:	6823      	ldr	r3, [r4, #0]
   182a4:	b94b      	cbnz	r3, 182ba <close+0x1e>
   182a6:	490f      	ldr	r1, [pc, #60]	; (182e4 <close+0x48>)
   182a8:	480f      	ldr	r0, [pc, #60]	; (182e8 <close+0x4c>)
   182aa:	2321      	movs	r3, #33	; 0x21
   182ac:	4a0f      	ldr	r2, [pc, #60]	; (182ec <close+0x50>)
   182ae:	f016 f9c0 	bl	2e632 <printk>
   182b2:	2121      	movs	r1, #33	; 0x21
   182b4:	480d      	ldr	r0, [pc, #52]	; (182ec <close+0x50>)
   182b6:	f016 f9c9 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   182ba:	6823      	ldr	r3, [r4, #0]
   182bc:	685b      	ldr	r3, [r3, #4]
   182be:	b94b      	cbnz	r3, 182d4 <close+0x38>
   182c0:	490b      	ldr	r1, [pc, #44]	; (182f0 <close+0x54>)
   182c2:	4809      	ldr	r0, [pc, #36]	; (182e8 <close+0x4c>)
   182c4:	2322      	movs	r3, #34	; 0x22
   182c6:	4a09      	ldr	r2, [pc, #36]	; (182ec <close+0x50>)
   182c8:	f016 f9b3 	bl	2e632 <printk>
   182cc:	2122      	movs	r1, #34	; 0x22
   182ce:	4807      	ldr	r0, [pc, #28]	; (182ec <close+0x50>)
   182d0:	f016 f9bc 	bl	2e64c <assert_post_action>
	return socket_ops->close(sock);
   182d4:	6823      	ldr	r3, [r4, #0]
   182d6:	4628      	mov	r0, r5
}
   182d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   182dc:	685b      	ldr	r3, [r3, #4]
   182de:	4718      	bx	r3
   182e0:	20020994 	.word	0x20020994
   182e4:	000356ae 	.word	0x000356ae
   182e8:	0003452c 	.word	0x0003452c
   182ec:	00035678 	.word	0x00035678
   182f0:	000356b9 	.word	0x000356b9

000182f4 <open_socket>:
	char             data[CONFIG_AT_CMD_RESPONSE_MAX_LEN];
	at_cmd_handler_t callback;
};

static int open_socket(void)
{
   182f4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(socket_ops);
   182f6:	4c16      	ldr	r4, [pc, #88]	; (18350 <open_socket+0x5c>)
   182f8:	6823      	ldr	r3, [r4, #0]
   182fa:	b94b      	cbnz	r3, 18310 <open_socket+0x1c>
   182fc:	4915      	ldr	r1, [pc, #84]	; (18354 <open_socket+0x60>)
   182fe:	4816      	ldr	r0, [pc, #88]	; (18358 <open_socket+0x64>)
   18300:	2319      	movs	r3, #25
   18302:	4a16      	ldr	r2, [pc, #88]	; (1835c <open_socket+0x68>)
   18304:	f016 f995 	bl	2e632 <printk>
   18308:	2119      	movs	r1, #25
   1830a:	4814      	ldr	r0, [pc, #80]	; (1835c <open_socket+0x68>)
   1830c:	f016 f99e 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   18310:	6823      	ldr	r3, [r4, #0]
   18312:	681b      	ldr	r3, [r3, #0]
   18314:	b94b      	cbnz	r3, 1832a <open_socket+0x36>
   18316:	4912      	ldr	r1, [pc, #72]	; (18360 <open_socket+0x6c>)
   18318:	480f      	ldr	r0, [pc, #60]	; (18358 <open_socket+0x64>)
   1831a:	231a      	movs	r3, #26
   1831c:	4a0f      	ldr	r2, [pc, #60]	; (1835c <open_socket+0x68>)
   1831e:	f016 f988 	bl	2e632 <printk>
   18322:	211a      	movs	r1, #26
   18324:	480d      	ldr	r0, [pc, #52]	; (1835c <open_socket+0x68>)
   18326:	f016 f991 	bl	2e64c <assert_post_action>
	return socket_ops->socket(family, type, proto);
   1832a:	6823      	ldr	r3, [r4, #0]
   1832c:	f240 2201 	movw	r2, #513	; 0x201
   18330:	681b      	ldr	r3, [r3, #0]
   18332:	2100      	movs	r1, #0
   18334:	2066      	movs	r0, #102	; 0x66
   18336:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
   18338:	4b0a      	ldr	r3, [pc, #40]	; (18364 <open_socket+0x70>)
   1833a:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   1833c:	3001      	adds	r0, #1
   1833e:	d104      	bne.n	1834a <open_socket+0x56>
		return -errno;
   18340:	f016 fa03 	bl	2e74a <__errno>
   18344:	6800      	ldr	r0, [r0, #0]
   18346:	4240      	negs	r0, r0
	}

	return 0;
}
   18348:	bd10      	pop	{r4, pc}
	return 0;
   1834a:	2000      	movs	r0, #0
   1834c:	e7fc      	b.n	18348 <open_socket+0x54>
   1834e:	bf00      	nop
   18350:	20020994 	.word	0x20020994
   18354:	000356ae 	.word	0x000356ae
   18358:	0003452c 	.word	0x0003452c
   1835c:	00035678 	.word	0x00035678
   18360:	000356cb 	.word	0x000356cb
   18364:	20021d78 	.word	0x20021d78

00018368 <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   18368:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1836c:	4680      	mov	r8, r0
   1836e:	460d      	mov	r5, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   18370:	f012 fca4 	bl	2acbc <strlen>
	__ASSERT_NO_MSG(socket_ops);
   18374:	4c1d      	ldr	r4, [pc, #116]	; (183ec <at_write+0x84>)
	struct return_state_object ret;

	LOG_DBG("Sending command %s", cmd);
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   18376:	4b1e      	ldr	r3, [pc, #120]	; (183f0 <at_write+0x88>)
	int bytes_to_send = strlen(cmd);
   18378:	4606      	mov	r6, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   1837a:	681f      	ldr	r7, [r3, #0]
   1837c:	6823      	ldr	r3, [r4, #0]
   1837e:	b94b      	cbnz	r3, 18394 <at_write+0x2c>
   18380:	491c      	ldr	r1, [pc, #112]	; (183f4 <at_write+0x8c>)
   18382:	481d      	ldr	r0, [pc, #116]	; (183f8 <at_write+0x90>)
   18384:	237e      	movs	r3, #126	; 0x7e
   18386:	4a1d      	ldr	r2, [pc, #116]	; (183fc <at_write+0x94>)
   18388:	f016 f953 	bl	2e632 <printk>
   1838c:	217e      	movs	r1, #126	; 0x7e
   1838e:	481b      	ldr	r0, [pc, #108]	; (183fc <at_write+0x94>)
   18390:	f016 f95c 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   18394:	6823      	ldr	r3, [r4, #0]
   18396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18398:	b94b      	cbnz	r3, 183ae <at_write+0x46>
   1839a:	4919      	ldr	r1, [pc, #100]	; (18400 <at_write+0x98>)
   1839c:	4816      	ldr	r0, [pc, #88]	; (183f8 <at_write+0x90>)
   1839e:	237f      	movs	r3, #127	; 0x7f
   183a0:	4a16      	ldr	r2, [pc, #88]	; (183fc <at_write+0x94>)
   183a2:	f016 f946 	bl	2e632 <printk>
   183a6:	217f      	movs	r1, #127	; 0x7f
   183a8:	4814      	ldr	r0, [pc, #80]	; (183fc <at_write+0x94>)
   183aa:	f016 f94f 	bl	2e64c <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   183ae:	6823      	ldr	r3, [r4, #0]
   183b0:	4632      	mov	r2, r6
   183b2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   183b4:	4641      	mov	r1, r8
   183b6:	2300      	movs	r3, #0
   183b8:	4638      	mov	r0, r7
   183ba:	47a0      	blx	r4

	if (bytes_sent != bytes_to_send) {
   183bc:	4286      	cmp	r6, r0
   183be:	d00d      	beq.n	183dc <at_write+0x74>
		LOG_ERR("Failed to send AT command");
		ret.code  = -EIO;
   183c0:	f06f 0304 	mvn.w	r3, #4
   183c4:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   183c6:	2301      	movs	r3, #1
   183c8:	f88d 3004 	strb.w	r3, [sp, #4]
	} else {
		k_msgq_get(&return_code_msq, &ret, K_FOREVER);
		LOG_DBG("Bytes sent: %d", bytes_sent);
	}

	if (state) {
   183cc:	b115      	cbz	r5, 183d4 <at_write+0x6c>
		*state = ret.state;
   183ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
   183d2:	702b      	strb	r3, [r5, #0]
	}

	return ret.code;
}
   183d4:	9800      	ldr	r0, [sp, #0]
   183d6:	b002      	add	sp, #8
   183d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_ALLOC_INIT, k_msgq_alloc_init, int, struct k_msgq *, q, size_t, msg_size, u32_t, max_msgs)

K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_PUT, k_msgq_put, int, struct k_msgq *, q, void *, data, s32_t, timeout)

K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_GET, k_msgq_get, int, struct k_msgq *, q, void *, data, s32_t, timeout)
   183dc:	f04f 32ff 	mov.w	r2, #4294967295
   183e0:	4669      	mov	r1, sp
   183e2:	4808      	ldr	r0, [pc, #32]	; (18404 <at_write+0x9c>)
   183e4:	f00e fdfe 	bl	26fe4 <z_impl_k_msgq_get>
   183e8:	e7f0      	b.n	183cc <at_write+0x64>
   183ea:	bf00      	nop
   183ec:	20020994 	.word	0x20020994
   183f0:	20021d78 	.word	0x20021d78
   183f4:	000356ae 	.word	0x000356ae
   183f8:	0003452c 	.word	0x0003452c
   183fc:	00035678 	.word	0x00035678
   18400:	00035703 	.word	0x00035703
   18404:	2002df74 	.word	0x2002df74

00018408 <at_cmd_init>:

	k_mutex_unlock(&cmd_pending);
}

static int at_cmd_init(struct device *dev)
{
   18408:	b510      	push	{r4, lr}
   1840a:	b086      	sub	sp, #24
	ARG_UNUSED(dev);

	if (open_socket() != 0) {
   1840c:	f7ff ff72 	bl	182f4 <open_socket>
   18410:	4604      	mov	r4, r0
   18412:	b980      	cbnz	r0, 18436 <at_cmd_init+0x2e>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   18414:	230a      	movs	r3, #10
   18416:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1841a:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1841e:	e9cd 0000 	strd	r0, r0, [sp]
   18422:	4b06      	ldr	r3, [pc, #24]	; (1843c <at_cmd_init+0x34>)
   18424:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18428:	4905      	ldr	r1, [pc, #20]	; (18440 <at_cmd_init+0x38>)
   1842a:	4806      	ldr	r0, [pc, #24]	; (18444 <at_cmd_init+0x3c>)
   1842c:	f010 fbe0 	bl	28bf0 <z_impl_k_thread_create>
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   18430:	4620      	mov	r0, r4
   18432:	b006      	add	sp, #24
   18434:	bd10      	pop	{r4, pc}
		return -1;
   18436:	f04f 34ff 	mov.w	r4, #4294967295
   1843a:	e7f9      	b.n	18430 <at_cmd_init+0x28>
   1843c:	00018449 	.word	0x00018449
   18440:	20028980 	.word	0x20028980
   18444:	20021d8c 	.word	0x20021d8c

00018448 <socket_thread_fn>:
{
   18448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   1844c:	f8df 8220 	ldr.w	r8, [pc, #544]	; 18670 <socket_thread_fn+0x228>
	struct return_state_object ret = {
   18450:	2500      	movs	r5, #0
   18452:	46c1      	mov	r9, r8
	__ASSERT_NO_MSG(socket_ops);
   18454:	4e75      	ldr	r6, [pc, #468]	; (1862c <socket_thread_fn+0x1e4>)
{
   18456:	b085      	sub	sp, #20
   18458:	6833      	ldr	r3, [r6, #0]
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   1845a:	f8d8 7000 	ldr.w	r7, [r8]
   1845e:	b94b      	cbnz	r3, 18474 <socket_thread_fn+0x2c>
   18460:	4973      	ldr	r1, [pc, #460]	; (18630 <socket_thread_fn+0x1e8>)
   18462:	4874      	ldr	r0, [pc, #464]	; (18634 <socket_thread_fn+0x1ec>)
   18464:	2369      	movs	r3, #105	; 0x69
   18466:	4a74      	ldr	r2, [pc, #464]	; (18638 <socket_thread_fn+0x1f0>)
   18468:	f016 f8e3 	bl	2e632 <printk>
   1846c:	2169      	movs	r1, #105	; 0x69
   1846e:	4872      	ldr	r0, [pc, #456]	; (18638 <socket_thread_fn+0x1f0>)
   18470:	f016 f8ec 	bl	2e64c <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   18474:	6833      	ldr	r3, [r6, #0]
   18476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18478:	b94b      	cbnz	r3, 1848e <socket_thread_fn+0x46>
   1847a:	4970      	ldr	r1, [pc, #448]	; (1863c <socket_thread_fn+0x1f4>)
   1847c:	486d      	ldr	r0, [pc, #436]	; (18634 <socket_thread_fn+0x1ec>)
   1847e:	236a      	movs	r3, #106	; 0x6a
   18480:	4a6d      	ldr	r2, [pc, #436]	; (18638 <socket_thread_fn+0x1f0>)
   18482:	f016 f8d6 	bl	2e632 <printk>
   18486:	216a      	movs	r1, #106	; 0x6a
   18488:	486b      	ldr	r0, [pc, #428]	; (18638 <socket_thread_fn+0x1f0>)
   1848a:	f016 f8df 	bl	2e64c <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   1848e:	6833      	ldr	r3, [r6, #0]
   18490:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 18660 <socket_thread_fn+0x218>
   18494:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   18496:	f44f 7280 	mov.w	r2, #256	; 0x100
   1849a:	2300      	movs	r3, #0
   1849c:	4651      	mov	r1, sl
   1849e:	4638      	mov	r0, r7
   184a0:	47a0      	blx	r4
		if (bytes_read < 0) {
   184a2:	2800      	cmp	r0, #0
   184a4:	4654      	mov	r4, sl
   184a6:	da29      	bge.n	184fc <socket_thread_fn+0xb4>
			if ((close(common_socket_fd) == 0) &&
   184a8:	f8d9 0000 	ldr.w	r0, [r9]
   184ac:	f7ff fef6 	bl	1829c <close>
   184b0:	b9e8      	cbnz	r0, 184ee <socket_thread_fn+0xa6>
			    (open_socket() == 0)) {
   184b2:	f7ff ff1f 	bl	182f4 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   184b6:	b9d0      	cbnz	r0, 184ee <socket_thread_fn+0xa6>
				if (cmd_pending.lock_count > 0) {
   184b8:	4b61      	ldr	r3, [pc, #388]	; (18640 <socket_thread_fn+0x1f8>)
   184ba:	68db      	ldr	r3, [r3, #12]
   184bc:	2b00      	cmp	r3, #0
   184be:	d0cb      	beq.n	18458 <socket_thread_fn+0x10>
					ret.code  = -errno;
   184c0:	f016 f943 	bl	2e74a <__errno>
					ret.state = AT_CMD_ERROR;
   184c4:	f04f 0a01 	mov.w	sl, #1
					ret.code  = -errno;
   184c8:	6805      	ldr	r5, [r0, #0]
   184ca:	426d      	negs	r5, r5
		current_cmd_handler = NULL;
   184cc:	2200      	movs	r2, #0
   184ce:	4b5d      	ldr	r3, [pc, #372]	; (18644 <socket_thread_fn+0x1fc>)
		if (ret.state != AT_CMD_NOTIFICATION) {
   184d0:	f1ba 0f04 	cmp.w	sl, #4
		current_cmd_handler = NULL;
   184d4:	601a      	str	r2, [r3, #0]
		if (ret.state != AT_CMD_NOTIFICATION) {
   184d6:	d0bf      	beq.n	18458 <socket_thread_fn+0x10>
K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_PUT, k_msgq_put, int, struct k_msgq *, q, void *, data, s32_t, timeout)
   184d8:	f04f 32ff 	mov.w	r2, #4294967295
   184dc:	a902      	add	r1, sp, #8
   184de:	485a      	ldr	r0, [pc, #360]	; (18648 <socket_thread_fn+0x200>)
			struct return_state_object ret_copy = {
   184e0:	9502      	str	r5, [sp, #8]
   184e2:	f88d a00c 	strb.w	sl, [sp, #12]
			ret.code  = 0;
   184e6:	2500      	movs	r5, #0
   184e8:	f00e fcd6 	bl	26e98 <z_impl_k_msgq_put>
   184ec:	e7b4      	b.n	18458 <socket_thread_fn+0x10>
			close(common_socket_fd);
   184ee:	f8d9 0000 	ldr.w	r0, [r9]
   184f2:	f7ff fed3 	bl	1829c <close>
}
   184f6:	b005      	add	sp, #20
   184f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(buf) ||
   184fc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   18500:	d07c      	beq.n	185fc <socket_thread_fn+0x1b4>
			   buf[bytes_read - 1] != '\0') {
   18502:	4450      	add	r0, sl
		} else if (bytes_read == sizeof(buf) ||
   18504:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   18508:	2b00      	cmp	r3, #0
   1850a:	d177      	bne.n	185fc <socket_thread_fn+0x1b4>
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   1850c:	494f      	ldr	r1, [pc, #316]	; (1864c <socket_thread_fn+0x204>)
   1850e:	4650      	mov	r0, sl
   18510:	9301      	str	r3, [sp, #4]
   18512:	f012 fde3 	bl	2b0dc <strstr>
   18516:	4f4b      	ldr	r7, [pc, #300]	; (18644 <socket_thread_fn+0x1fc>)
		if (tmpstr) {
   18518:	4683      	mov	fp, r0
   1851a:	9b01      	ldr	r3, [sp, #4]
   1851c:	2800      	cmp	r0, #0
   1851e:	d177      	bne.n	18610 <socket_thread_fn+0x1c8>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   18520:	494b      	ldr	r1, [pc, #300]	; (18650 <socket_thread_fn+0x208>)
   18522:	4650      	mov	r0, sl
   18524:	f012 fdda 	bl	2b0dc <strstr>
		if (tmpstr) {
   18528:	4683      	mov	fp, r0
   1852a:	2800      	cmp	r0, #0
   1852c:	d173      	bne.n	18616 <socket_thread_fn+0x1ce>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   1852e:	4949      	ldr	r1, [pc, #292]	; (18654 <socket_thread_fn+0x20c>)
   18530:	4650      	mov	r0, sl
   18532:	f012 fdd3 	bl	2b0dc <strstr>
		if (tmpstr) {
   18536:	4683      	mov	fp, r0
   18538:	b198      	cbz	r0, 18562 <socket_thread_fn+0x11a>
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   1853a:	1d60      	adds	r0, r4, #5
   1853c:	f011 fe36 	bl	2a1ac <atoi>
			ret->state = AT_CMD_ERROR_CMS;
   18540:	f04f 0a02 	mov.w	sl, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   18544:	4605      	mov	r5, r0
		buf[new_len++] = '\0';
   18546:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   18548:	ebab 0404 	sub.w	r4, fp, r4
		buf[new_len++] = '\0';
   1854c:	f88b 3000 	strb.w	r3, [fp]
			if ((response_buf_len > 0) &&
   18550:	f8df b120 	ldr.w	fp, [pc, #288]	; 18674 <socket_thread_fn+0x22c>
		buf[new_len++] = '\0';
   18554:	3401      	adds	r4, #1
			if ((response_buf_len > 0) &&
   18556:	f8db 2000 	ldr.w	r2, [fp]
   1855a:	b982      	cbnz	r2, 1857e <socket_thread_fn+0x136>
		if (payload_len == 0) {
   1855c:	bb24      	cbnz	r4, 185a8 <socket_thread_fn+0x160>
		current_cmd_handler = NULL;
   1855e:	603c      	str	r4, [r7, #0]
   18560:	e7ba      	b.n	184d8 <socket_thread_fn+0x90>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   18562:	493d      	ldr	r1, [pc, #244]	; (18658 <socket_thread_fn+0x210>)
   18564:	4650      	mov	r0, sl
   18566:	f012 fdb9 	bl	2b0dc <strstr>
		if (tmpstr) {
   1856a:	4683      	mov	fp, r0
   1856c:	2800      	cmp	r0, #0
   1856e:	d056      	beq.n	1861e <socket_thread_fn+0x1d6>
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   18570:	1d60      	adds	r0, r4, #5
   18572:	f011 fe1b 	bl	2a1ac <atoi>
			ret->state = AT_CMD_ERROR_CME;
   18576:	f04f 0a03 	mov.w	sl, #3
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   1857a:	4605      	mov	r5, r0
   1857c:	e7e3      	b.n	18546 <socket_thread_fn+0xfe>
			    (response_buf != NULL)) {
   1857e:	4b37      	ldr	r3, [pc, #220]	; (1865c <socket_thread_fn+0x214>)
   18580:	6818      	ldr	r0, [r3, #0]
			if ((response_buf_len > 0) &&
   18582:	2800      	cmp	r0, #0
   18584:	d0ea      	beq.n	1855c <socket_thread_fn+0x114>
				if (response_buf_len > payload_len) {
   18586:	42a2      	cmp	r2, r4
   18588:	d90a      	bls.n	185a0 <socket_thread_fn+0x158>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1858a:	4622      	mov	r2, r4
   1858c:	4934      	ldr	r1, [pc, #208]	; (18660 <socket_thread_fn+0x218>)
   1858e:	9301      	str	r3, [sp, #4]
   18590:	f7f5 fb22 	bl	dbd8 <memcpy>
   18594:	9b01      	ldr	r3, [sp, #4]
				response_buf_len = 0;
   18596:	2200      	movs	r2, #0
   18598:	f8cb 2000 	str.w	r2, [fp]
				response_buf     = NULL;
   1859c:	601a      	str	r2, [r3, #0]
   1859e:	e795      	b.n	184cc <socket_thread_fn+0x84>
					ret.code = AT_CMD_ERROR;
   185a0:	2501      	movs	r5, #1
   185a2:	e7f8      	b.n	18596 <socket_thread_fn+0x14e>
		if (payload_len == 0) {
   185a4:	f04f 0a04 	mov.w	sl, #4
			struct callback_work_item *item =
   185a8:	f44f 7088 	mov.w	r0, #272	; 0x110
   185ac:	f00e fc64 	bl	26e78 <k_malloc>
			if (!item) {
   185b0:	4683      	mov	fp, r0
   185b2:	b340      	cbz	r0, 18606 <socket_thread_fn+0x1be>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   185b4:	2300      	movs	r3, #0
   185b6:	4a2b      	ldr	r2, [pc, #172]	; (18664 <socket_thread_fn+0x21c>)
   185b8:	6003      	str	r3, [r0, #0]
   185ba:	e9c0 2301 	strd	r2, r3, [r0, #4]
   185be:	4928      	ldr	r1, [pc, #160]	; (18660 <socket_thread_fn+0x218>)
   185c0:	4622      	mov	r2, r4
   185c2:	300c      	adds	r0, #12
   185c4:	f7f5 fb08 	bl	dbd8 <memcpy>
			if (ret.state == AT_CMD_NOTIFICATION) {
   185c8:	f1ba 0f04 	cmp.w	sl, #4
				item->callback = notification_handler;
   185cc:	bf0a      	itet	eq
   185ce:	4b26      	ldreq	r3, [pc, #152]	; (18668 <socket_thread_fn+0x220>)
				item->callback = current_cmd_handler;
   185d0:	683b      	ldrne	r3, [r7, #0]
				item->callback = notification_handler;
   185d2:	681b      	ldreq	r3, [r3, #0]
				item->callback = current_cmd_handler;
   185d4:	f8cb 310c 	str.w	r3, [fp, #268]	; 0x10c
   185d8:	f10b 0308 	add.w	r3, fp, #8
   185dc:	e8d3 2fef 	ldaex	r2, [r3]
   185e0:	f042 0101 	orr.w	r1, r2, #1
   185e4:	e8c3 1fe0 	stlex	r0, r1, [r3]
   185e8:	2800      	cmp	r0, #0
   185ea:	d1f7      	bne.n	185dc <socket_thread_fn+0x194>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   185ec:	07d3      	lsls	r3, r2, #31
   185ee:	f53f af6d 	bmi.w	184cc <socket_thread_fn+0x84>
		k_queue_append(&work_q->queue, work);
   185f2:	4659      	mov	r1, fp
   185f4:	481d      	ldr	r0, [pc, #116]	; (1866c <socket_thread_fn+0x224>)
   185f6:	f018 f93d 	bl	30874 <k_queue_append>
   185fa:	e767      	b.n	184cc <socket_thread_fn+0x84>
			ret.state = AT_CMD_ERROR;
   185fc:	f04f 0a01 	mov.w	sl, #1
			ret.code  = -ENOBUFS;
   18600:	f06f 0568 	mvn.w	r5, #104	; 0x68
   18604:	e762      	b.n	184cc <socket_thread_fn+0x84>
				ret.state = AT_CMD_ERROR;
   18606:	f04f 0a01 	mov.w	sl, #1
				ret.code  = -ENOMEM;
   1860a:	f06f 050b 	mvn.w	r5, #11
   1860e:	e75d      	b.n	184cc <socket_thread_fn+0x84>
			ret->state = AT_CMD_OK;
   18610:	461d      	mov	r5, r3
			ret->code  = 0;
   18612:	469a      	mov	sl, r3
   18614:	e797      	b.n	18546 <socket_thread_fn+0xfe>
			ret->state = AT_CMD_ERROR;
   18616:	f04f 0a01 	mov.w	sl, #1
			ret->code  = ENOEXEC;
   1861a:	2508      	movs	r5, #8
   1861c:	e793      	b.n	18546 <socket_thread_fn+0xfe>
		new_len = strlen(buf) + 1;
   1861e:	4650      	mov	r0, sl
   18620:	f012 fb4c 	bl	2acbc <strlen>
		if (payload_len == 0) {
   18624:	1c44      	adds	r4, r0, #1
   18626:	d1bd      	bne.n	185a4 <socket_thread_fn+0x15c>
		current_cmd_handler = NULL;
   18628:	603c      	str	r4, [r7, #0]
   1862a:	e715      	b.n	18458 <socket_thread_fn+0x10>
   1862c:	20020994 	.word	0x20020994
   18630:	000356ae 	.word	0x000356ae
   18634:	0003452c 	.word	0x0003452c
   18638:	00035678 	.word	0x00035678
   1863c:	000356f2 	.word	0x000356f2
   18640:	2002df60 	.word	0x2002df60
   18644:	20021d7c 	.word	0x20021d7c
   18648:	2002df74 	.word	0x2002df74
   1864c:	00035b4e 	.word	0x00035b4e
   18650:	00035b51 	.word	0x00035b51
   18654:	00035b57 	.word	0x00035b57
   18658:	00035b5d 	.word	0x00035b5d
   1865c:	20021d84 	.word	0x20021d84
   18660:	20027c4b 	.word	0x20027c4b
   18664:	0003078b 	.word	0x0003078b
   18668:	20021d80 	.word	0x20021d80
   1866c:	20027778 	.word	0x20027778
   18670:	20021d78 	.word	0x20021d78
   18674:	20021d88 	.word	0x20021d88

00018678 <at_cmd_write>:
{
   18678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1867c:	4688      	mov	r8, r1
   1867e:	461e      	mov	r6, r3
   18680:	4605      	mov	r5, r0
   18682:	4617      	mov	r7, r2
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   18684:	4c0a      	ldr	r4, [pc, #40]	; (186b0 <at_cmd_write+0x38>)
   18686:	f04f 31ff 	mov.w	r1, #4294967295
   1868a:	4620      	mov	r0, r4
   1868c:	f00e fd9c 	bl	271c8 <z_impl_k_mutex_lock>
	response_buf     = buf;
   18690:	4b08      	ldr	r3, [pc, #32]	; (186b4 <at_cmd_write+0x3c>)
	return_code = at_write(cmd, state);
   18692:	4631      	mov	r1, r6
	response_buf     = buf;
   18694:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   18698:	4b07      	ldr	r3, [pc, #28]	; (186b8 <at_cmd_write+0x40>)
	return_code = at_write(cmd, state);
   1869a:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   1869c:	601f      	str	r7, [r3, #0]
	return_code = at_write(cmd, state);
   1869e:	f7ff fe63 	bl	18368 <at_write>
   186a2:	4605      	mov	r5, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   186a4:	4620      	mov	r0, r4
   186a6:	f00e fe43 	bl	27330 <z_impl_k_mutex_unlock>
}
   186aa:	4628      	mov	r0, r5
   186ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   186b0:	2002df60 	.word	0x2002df60
   186b4:	20021d84 	.word	0x20021d84
   186b8:	20021d88 	.word	0x20021d88

000186bc <at_cmd_set_notification_handler>:
{
   186bc:	b538      	push	{r3, r4, r5, lr}
   186be:	4605      	mov	r5, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   186c0:	4c06      	ldr	r4, [pc, #24]	; (186dc <at_cmd_set_notification_handler+0x20>)
   186c2:	f04f 31ff 	mov.w	r1, #4294967295
   186c6:	4620      	mov	r0, r4
   186c8:	f00e fd7e 	bl	271c8 <z_impl_k_mutex_lock>
	notification_handler = handler;
   186cc:	4b04      	ldr	r3, [pc, #16]	; (186e0 <at_cmd_set_notification_handler+0x24>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   186ce:	4620      	mov	r0, r4
   186d0:	601d      	str	r5, [r3, #0]
}
   186d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   186d6:	f00e be2b 	b.w	27330 <z_impl_k_mutex_unlock>
   186da:	bf00      	nop
   186dc:	2002df60 	.word	0x2002df60
   186e0:	20021d80 	.word	0x20021d80

000186e4 <gps_sim_channel_get>:

static int gps_sim_channel_get(struct device *dev, enum gps_channel chan,
			       struct gps_data *sample)
{
   186e4:	b538      	push	{r3, r4, r5, lr}
   186e6:	4613      	mov	r3, r2
	switch (chan) {
   186e8:	460c      	mov	r4, r1
   186ea:	b961      	cbnz	r1, 18706 <gps_sim_channel_get+0x22>
	case GPS_CHAN_NMEA:
		memcpy(sample->str, nmea_sample.str, nmea_sample.len);
   186ec:	4d07      	ldr	r5, [pc, #28]	; (1870c <gps_sim_channel_get+0x28>)
   186ee:	4618      	mov	r0, r3
   186f0:	f895 2051 	ldrb.w	r2, [r5, #81]	; 0x51
   186f4:	4629      	mov	r1, r5
   186f6:	f7f5 fa6f 	bl	dbd8 <memcpy>
		sample->len = nmea_sample.len;
   186fa:	f895 2051 	ldrb.w	r2, [r5, #81]	; 0x51
   186fe:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   18702:	4620      	mov	r0, r4
}
   18704:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   18706:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1870a:	e7fb      	b.n	18704 <gps_sim_channel_get+0x20>
   1870c:	20027d4b 	.word	0x20027d4b

00018710 <gps_sim_trigger_set>:
	switch (trig->type) {
   18710:	780b      	ldrb	r3, [r1, #0]
{
   18712:	b570      	push	{r4, r5, r6, lr}
	switch (trig->type) {
   18714:	2b01      	cmp	r3, #1
{
   18716:	460d      	mov	r5, r1
   18718:	4616      	mov	r6, r2
	struct gps_sim_data *drv_data = dev->driver_data;
   1871a:	6884      	ldr	r4, [r0, #8]
	switch (trig->type) {
   1871c:	d10c      	bne.n	18738 <gps_sim_trigger_set+0x28>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   1871e:	f04f 31ff 	mov.w	r1, #4294967295
   18722:	4807      	ldr	r0, [pc, #28]	; (18740 <gps_sim_trigger_set+0x30>)
   18724:	f00e fd50 	bl	271c8 <z_impl_k_mutex_lock>
		drv_data->drdy_trigger = *trig;
   18728:	882b      	ldrh	r3, [r5, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   1872a:	4805      	ldr	r0, [pc, #20]	; (18740 <gps_sim_trigger_set+0x30>)
		drv_data->drdy_handler = handler;
   1872c:	6326      	str	r6, [r4, #48]	; 0x30
		drv_data->drdy_trigger = *trig;
   1872e:	86a3      	strh	r3, [r4, #52]	; 0x34
   18730:	f00e fdfe 	bl	27330 <z_impl_k_mutex_unlock>
	int ret = 0;
   18734:	2000      	movs	r0, #0
}
   18736:	bd70      	pop	{r4, r5, r6, pc}
		ret = -ENOTSUP;
   18738:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return ret;
   1873c:	e7fb      	b.n	18736 <gps_sim_trigger_set+0x26>
   1873e:	bf00      	nop
   18740:	20021e40 	.word	0x20021e40

00018744 <gps_sim_init>:
{
   18744:	b570      	push	{r4, r5, r6, lr}
   18746:	4606      	mov	r6, r0
   18748:	b086      	sub	sp, #24
		srand(k_cycle_get_32());
   1874a:	f7fa fff9 	bl	13740 <z_timer_cycle_get_32>
   1874e:	f012 f91f 	bl	2a990 <srand>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)
   18752:	480c      	ldr	r0, [pc, #48]	; (18784 <gps_sim_init+0x40>)
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   18754:	2400      	movs	r4, #0
	struct gps_sim_data *drv_data = dev->driver_data;
   18756:	68b5      	ldr	r5, [r6, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)
   18758:	f018 f871 	bl	3083e <z_impl_k_mutex_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   1875c:	f06f 0305 	mvn.w	r3, #5
   18760:	e9cd 4404 	strd	r4, r4, [sp, #16]
   18764:	e9cd 4302 	strd	r4, r3, [sp, #8]
   18768:	e9cd 6400 	strd	r6, r4, [sp]
   1876c:	4b06      	ldr	r3, [pc, #24]	; (18788 <gps_sim_init+0x44>)
   1876e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18772:	f105 0138 	add.w	r1, r5, #56	; 0x38
   18776:	f505 6087 	add.w	r0, r5, #1080	; 0x438
   1877a:	f010 fa39 	bl	28bf0 <z_impl_k_thread_create>
}
   1877e:	4620      	mov	r0, r4
   18780:	b006      	add	sp, #24
   18782:	bd70      	pop	{r4, r5, r6, pc}
   18784:	20021e40 	.word	0x20021e40
   18788:	0001878d 	.word	0x0001878d

0001878c <gps_sim_thread>:
{
   1878c:	b570      	push	{r4, r5, r6, lr}
   1878e:	4605      	mov	r5, r0
	struct gps_sim_data *drv_data = dev->driver_data;
   18790:	6886      	ldr	r6, [r0, #8]
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   18792:	4c0a      	ldr	r4, [pc, #40]	; (187bc <gps_sim_thread+0x30>)
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, ms)
   18794:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   18798:	f010 f826 	bl	287e8 <z_impl_k_sleep>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   1879c:	f04f 31ff 	mov.w	r1, #4294967295
   187a0:	4620      	mov	r0, r4
   187a2:	f00e fd11 	bl	271c8 <z_impl_k_mutex_lock>
		if (drv_data->drdy_handler != NULL) {
   187a6:	6b33      	ldr	r3, [r6, #48]	; 0x30
   187a8:	b11b      	cbz	r3, 187b2 <gps_sim_thread+0x26>
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   187aa:	f106 0134 	add.w	r1, r6, #52	; 0x34
   187ae:	4628      	mov	r0, r5
   187b0:	4798      	blx	r3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   187b2:	4620      	mov	r0, r4
   187b4:	f00e fdbc 	bl	27330 <z_impl_k_mutex_unlock>
   187b8:	e7ec      	b.n	18794 <gps_sim_thread+0x8>
   187ba:	bf00      	nop
   187bc:	20021e40 	.word	0x20021e40

000187c0 <at_handler>:
#if defined(CONFIG_LTE_LEGACY_PCO_MODE)
static const char legacy_pco[] = "AT%XEPCO=0";
#endif

void at_handler(char *response)
{
   187c0:	b510      	push	{r4, lr}
	LOG_DBG("recv: %s", response);

	if (!memcmp(status1, response, AT_CMD_SIZE(status1)) ||
   187c2:	4601      	mov	r1, r0
{
   187c4:	4604      	mov	r4, r0
	if (!memcmp(status1, response, AT_CMD_SIZE(status1)) ||
   187c6:	2209      	movs	r2, #9
   187c8:	480f      	ldr	r0, [pc, #60]	; (18808 <at_handler+0x48>)
   187ca:	f011 fffb 	bl	2a7c4 <memcmp>
   187ce:	b920      	cbnz	r0, 187da <at_handler+0x1a>
	    !memcmp(status2, response, AT_CMD_SIZE(status2)) ||
	    !memcmp(status3, response, AT_CMD_SIZE(status3)) ||
	    !memcmp(status4, response, AT_CMD_SIZE(status4))) {
		k_sem_give(&link);
	}
}
   187d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   187d4:	480d      	ldr	r0, [pc, #52]	; (1880c <at_handler+0x4c>)
   187d6:	f010 b875 	b.w	288c4 <z_impl_k_sem_give>
	    !memcmp(status2, response, AT_CMD_SIZE(status2)) ||
   187da:	2208      	movs	r2, #8
   187dc:	4621      	mov	r1, r4
   187de:	480c      	ldr	r0, [pc, #48]	; (18810 <at_handler+0x50>)
   187e0:	f011 fff0 	bl	2a7c4 <memcmp>
	if (!memcmp(status1, response, AT_CMD_SIZE(status1)) ||
   187e4:	2800      	cmp	r0, #0
   187e6:	d0f3      	beq.n	187d0 <at_handler+0x10>
	    !memcmp(status3, response, AT_CMD_SIZE(status3)) ||
   187e8:	2209      	movs	r2, #9
   187ea:	4621      	mov	r1, r4
   187ec:	4809      	ldr	r0, [pc, #36]	; (18814 <at_handler+0x54>)
   187ee:	f011 ffe9 	bl	2a7c4 <memcmp>
	    !memcmp(status2, response, AT_CMD_SIZE(status2)) ||
   187f2:	2800      	cmp	r0, #0
   187f4:	d0ec      	beq.n	187d0 <at_handler+0x10>
	    !memcmp(status4, response, AT_CMD_SIZE(status4))) {
   187f6:	2208      	movs	r2, #8
   187f8:	4621      	mov	r1, r4
   187fa:	4807      	ldr	r0, [pc, #28]	; (18818 <at_handler+0x58>)
   187fc:	f011 ffe2 	bl	2a7c4 <memcmp>
	    !memcmp(status3, response, AT_CMD_SIZE(status3)) ||
   18800:	2800      	cmp	r0, #0
   18802:	d0e5      	beq.n	187d0 <at_handler+0x10>
}
   18804:	bd10      	pop	{r4, pc}
   18806:	bf00      	nop
   18808:	00035bd5 	.word	0x00035bd5
   1880c:	20021e54 	.word	0x20021e54
   18810:	00035bdf 	.word	0x00035bdf
   18814:	00035be8 	.word	0x00035be8
   18818:	00035bf2 	.word	0x00035bf2

0001881c <lte_lc_init_and_connect>:
	/* Request configured eDRX settings to save power */
	if (at_cmd_write(edrx_req, NULL, 0, NULL) != 0) {
		return -EIO;
	}
#endif
	if (at_cmd_write(subscribe, NULL, 0, NULL) != 0) {
   1881c:	2300      	movs	r3, #0
	return 0;
}

/* lte lc Init and connect wrapper */
int lte_lc_init_and_connect(void)
{
   1881e:	b510      	push	{r4, lr}
	if (at_cmd_write(subscribe, NULL, 0, NULL) != 0) {
   18820:	461a      	mov	r2, r3
   18822:	4619      	mov	r1, r3
   18824:	4815      	ldr	r0, [pc, #84]	; (1887c <lte_lc_init_and_connect+0x60>)
   18826:	f7ff ff27 	bl	18678 <at_cmd_write>
   1882a:	4603      	mov	r3, r0
   1882c:	b118      	cbz	r0, 18836 <lte_lc_init_and_connect+0x1a>
		return -EIO;
   1882e:	f06f 0404 	mvn.w	r4, #4
	struct device *x = 0;

	int err = w_lte_lc_init_and_connect(x);

	return err;
}
   18832:	4620      	mov	r0, r4
   18834:	bd10      	pop	{r4, pc}
	if (at_cmd_write(network_mode, NULL, 0, NULL) != 0) {
   18836:	4602      	mov	r2, r0
   18838:	4601      	mov	r1, r0
   1883a:	4811      	ldr	r0, [pc, #68]	; (18880 <lte_lc_init_and_connect+0x64>)
   1883c:	f7ff ff1c 	bl	18678 <at_cmd_write>
   18840:	4604      	mov	r4, r0
   18842:	2800      	cmp	r0, #0
   18844:	d1f3      	bne.n	1882e <lte_lc_init_and_connect+0x12>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   18846:	4601      	mov	r1, r0
   18848:	2201      	movs	r2, #1
   1884a:	480e      	ldr	r0, [pc, #56]	; (18884 <lte_lc_init_and_connect+0x68>)
   1884c:	f010 f804 	bl	28858 <z_impl_k_sem_init>
	at_cmd_set_notification_handler(at_handler);
   18850:	480d      	ldr	r0, [pc, #52]	; (18888 <lte_lc_init_and_connect+0x6c>)
   18852:	f7ff ff33 	bl	186bc <at_cmd_set_notification_handler>
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   18856:	4623      	mov	r3, r4
   18858:	4622      	mov	r2, r4
   1885a:	4621      	mov	r1, r4
   1885c:	480b      	ldr	r0, [pc, #44]	; (1888c <lte_lc_init_and_connect+0x70>)
   1885e:	f7ff ff0b 	bl	18678 <at_cmd_write>
   18862:	4604      	mov	r4, r0
   18864:	2800      	cmp	r0, #0
   18866:	d1e2      	bne.n	1882e <lte_lc_init_and_connect+0x12>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   18868:	f04f 31ff 	mov.w	r1, #4294967295
   1886c:	4805      	ldr	r0, [pc, #20]	; (18884 <lte_lc_init_and_connect+0x68>)
   1886e:	f010 f871 	bl	28954 <z_impl_k_sem_take>
	at_cmd_set_notification_handler(NULL);
   18872:	4620      	mov	r0, r4
   18874:	f7ff ff22 	bl	186bc <at_cmd_set_notification_handler>
	return err;
   18878:	e7db      	b.n	18832 <lte_lc_init_and_connect+0x16>
   1887a:	bf00      	nop
   1887c:	00035bfb 	.word	0x00035bfb
   18880:	00035baa 	.word	0x00035baa
   18884:	20021e54 	.word	0x20021e54
   18888:	000187c1 	.word	0x000187c1
   1888c:	00035bc1 	.word	0x00035bc1

00018890 <lte_lc_power_off>:

	return 0;
}

int lte_lc_power_off(void)
{
   18890:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   18892:	2300      	movs	r3, #0
   18894:	4804      	ldr	r0, [pc, #16]	; (188a8 <lte_lc_power_off+0x18>)
   18896:	461a      	mov	r2, r3
   18898:	4619      	mov	r1, r3
   1889a:	f7ff feed 	bl	18678 <at_cmd_write>
   1889e:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   188a0:	bf18      	it	ne
   188a2:	f06f 0004 	mvnne.w	r0, #4
   188a6:	bd08      	pop	{r3, pc}
   188a8:	00035bcb 	.word	0x00035bcb

000188ac <sensor_sim_channel_get>:

static int sensor_sim_channel_get(struct device *dev,
				  enum sensor_channel chan,
				  struct sensor_value *sample)
{
   188ac:	b538      	push	{r3, r4, r5, lr}
   188ae:	4614      	mov	r4, r2
	switch (chan) {
   188b0:	2910      	cmp	r1, #16
   188b2:	d82f      	bhi.n	18914 <sensor_sim_channel_get+0x68>
   188b4:	e8df f001 	tbb	[pc, r1]
   188b8:	18140d09 	.word	0x18140d09
   188bc:	2e2e2e2e 	.word	0x2e2e2e2e
   188c0:	2e2e2e2e 	.word	0x2e2e2e2e
   188c4:	2e2c282e 	.word	0x2e2c282e
   188c8:	2a          	.byte	0x2a
   188c9:	00          	.byte	0x00
	case SENSOR_CHAN_ACCEL_X:
		double_to_sensor_value(accel_samples[0], sample);
   188ca:	4b14      	ldr	r3, [pc, #80]	; (1891c <sensor_sim_channel_get+0x70>)
		break;
	case SENSOR_CHAN_HUMIDITY:
		double_to_sensor_value(humidity_sample, sample);
		break;
	case SENSOR_CHAN_PRESS:
		double_to_sensor_value(pressure_sample, sample);
   188cc:	e9d3 0100 	ldrd	r0, r1, [r3]
   188d0:	e002      	b.n	188d8 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[1], sample);
   188d2:	4b12      	ldr	r3, [pc, #72]	; (1891c <sensor_sim_channel_get+0x70>)
   188d4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
		double_to_sensor_value(pressure_sample, sample);
   188d8:	f7f5 fd76 	bl	e3c8 <double_to_sensor_value>
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   188dc:	2000      	movs	r0, #0
}
   188de:	bd38      	pop	{r3, r4, r5, pc}
		double_to_sensor_value(accel_samples[2], sample);
   188e0:	4b0e      	ldr	r3, [pc, #56]	; (1891c <sensor_sim_channel_get+0x70>)
   188e2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   188e6:	e7f7      	b.n	188d8 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[0], sample);
   188e8:	4d0c      	ldr	r5, [pc, #48]	; (1891c <sensor_sim_channel_get+0x70>)
   188ea:	e9d5 0100 	ldrd	r0, r1, [r5]
   188ee:	f7f5 fd6b 	bl	e3c8 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[1], ++sample);
   188f2:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   188f6:	f104 0208 	add.w	r2, r4, #8
   188fa:	f7f5 fd65 	bl	e3c8 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[2], ++sample);
   188fe:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   18902:	f104 0210 	add.w	r2, r4, #16
   18906:	e7e7      	b.n	188d8 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(temp_sample, sample);
   18908:	4b05      	ldr	r3, [pc, #20]	; (18920 <sensor_sim_channel_get+0x74>)
   1890a:	e7df      	b.n	188cc <sensor_sim_channel_get+0x20>
		double_to_sensor_value(humidity_sample, sample);
   1890c:	4b05      	ldr	r3, [pc, #20]	; (18924 <sensor_sim_channel_get+0x78>)
   1890e:	e7dd      	b.n	188cc <sensor_sim_channel_get+0x20>
		double_to_sensor_value(pressure_sample, sample);
   18910:	4b05      	ldr	r3, [pc, #20]	; (18928 <sensor_sim_channel_get+0x7c>)
   18912:	e7db      	b.n	188cc <sensor_sim_channel_get+0x20>
		return -ENOTSUP;
   18914:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18918:	e7e1      	b.n	188de <sensor_sim_channel_get+0x32>
   1891a:	bf00      	nop
   1891c:	20020520 	.word	0x20020520
   18920:	20020830 	.word	0x20020830
   18924:	20020538 	.word	0x20020538
   18928:	20020540 	.word	0x20020540

0001892c <generate_sine.constprop.0>:
static double generate_sine(double offset, double amplitude)
   1892c:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   1892e:	f018 f843 	bl	309b8 <z_impl_k_uptime_get_32>
	return offset + amplitude * sin(time % 65535);
   18932:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18936:	fbb0 f3f3 	udiv	r3, r0, r3
   1893a:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
   1893e:	1ac0      	subs	r0, r0, r3
   18940:	f7f3 fd44 	bl	c3cc <__aeabi_ui2d>
   18944:	ec41 0b10 	vmov	d0, r0, r1
   18948:	f7f8 fb62 	bl	11010 <sin>
   1894c:	2200      	movs	r2, #0
   1894e:	4b05      	ldr	r3, [pc, #20]	; (18964 <generate_sine.constprop.0+0x38>)
   18950:	ec51 0b10 	vmov	r0, r1, d0
   18954:	f7f3 fdb4 	bl	c4c0 <__aeabi_dmul>
   18958:	2200      	movs	r2, #0
   1895a:	2300      	movs	r3, #0
   1895c:	f7f3 fbfa 	bl	c154 <__adddf3>
}
   18960:	bd08      	pop	{r3, pc}
   18962:	bf00      	nop
   18964:	40340000 	.word	0x40340000

00018968 <sensor_sim_init>:
{
   18968:	b530      	push	{r4, r5, lr}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   1896a:	f06f 0305 	mvn.w	r3, #5
   1896e:	2400      	movs	r4, #0
	struct sensor_sim_data *drv_data = dev->driver_data;
   18970:	6885      	ldr	r5, [r0, #8]
{
   18972:	b087      	sub	sp, #28
   18974:	f44f 7200 	mov.w	r2, #512	; 0x200
   18978:	f105 0138 	add.w	r1, r5, #56	; 0x38
   1897c:	e9cd 4302 	strd	r4, r3, [sp, #8]
   18980:	e9cd 0400 	strd	r0, r4, [sp]
   18984:	4b06      	ldr	r3, [pc, #24]	; (189a0 <sensor_sim_init+0x38>)
   18986:	e9cd 4404 	strd	r4, r4, [sp, #16]
   1898a:	f505 700e 	add.w	r0, r5, #568	; 0x238
   1898e:	f010 f92f 	bl	28bf0 <z_impl_k_thread_create>
	srand(k_cycle_get_32());
   18992:	f7fa fed5 	bl	13740 <z_timer_cycle_get_32>
   18996:	f011 fffb 	bl	2a990 <srand>
}
   1899a:	4620      	mov	r0, r4
   1899c:	b007      	add	sp, #28
   1899e:	bd30      	pop	{r4, r5, pc}
   189a0:	000307c1 	.word	0x000307c1

000189a4 <dfu_client_event_handler>:
   189a4:	f850 1b08 	ldr.w	r1, [r0], #8
   189a8:	0c09      	lsrs	r1, r1, #16
   189aa:	f008 b833 	b.w	20a14 <rpc_dfu_event_handler>
   189ae:	bf00      	nop

000189b0 <rpc_dfu_client_init>:
   189b0:	4801      	ldr	r0, [pc, #4]	; (189b8 <rpc_dfu_client_init+0x8>)
   189b2:	f00c bb2b 	b.w	2500c <rpc_client_register>
   189b6:	bf00      	nop
   189b8:	0003138c 	.word	0x0003138c

000189bc <rpc_dfu_client_request_alloc>:
   189bc:	2300      	movs	r3, #0
   189be:	b510      	push	{r4, lr}
   189c0:	b082      	sub	sp, #8
   189c2:	9301      	str	r3, [sp, #4]
   189c4:	b158      	cbz	r0, 189de <rpc_dfu_client_request_alloc+0x22>
   189c6:	4604      	mov	r4, r0
   189c8:	aa01      	add	r2, sp, #4
   189ca:	2006      	movs	r0, #6
   189cc:	f00c fd5e 	bl	2548c <rpc_message_alloc>
   189d0:	b918      	cbnz	r0, 189da <rpc_dfu_client_request_alloc+0x1e>
   189d2:	9b01      	ldr	r3, [sp, #4]
   189d4:	b10b      	cbz	r3, 189da <rpc_dfu_client_request_alloc+0x1e>
   189d6:	3308      	adds	r3, #8
   189d8:	6023      	str	r3, [r4, #0]
   189da:	b002      	add	sp, #8
   189dc:	bd10      	pop	{r4, pc}
   189de:	2007      	movs	r0, #7
   189e0:	b002      	add	sp, #8
   189e2:	bd10      	pop	{r4, pc}

000189e4 <rpc_dfu_client_request_send>:
   189e4:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   189e8:	d10b      	bne.n	18a02 <rpc_dfu_client_request_send+0x1e>
   189ea:	b160      	cbz	r0, 18a06 <rpc_dfu_client_request_send+0x22>
   189ec:	4603      	mov	r3, r0
   189ee:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   189f2:	2006      	movs	r0, #6
   189f4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   189f8:	f843 1d08 	str.w	r1, [r3, #-8]!
   189fc:	4619      	mov	r1, r3
   189fe:	f00c bd2d 	b.w	2545c <rpc_message_send>
   18a02:	200f      	movs	r0, #15
   18a04:	4770      	bx	lr
   18a06:	2007      	movs	r0, #7
   18a08:	4770      	bx	lr
   18a0a:	bf00      	nop

00018a0c <rpc_dfu_client_message_free>:
   18a0c:	b120      	cbz	r0, 18a18 <rpc_dfu_client_message_free+0xc>
   18a0e:	f1a0 0108 	sub.w	r1, r0, #8
   18a12:	2006      	movs	r0, #6
   18a14:	f00c bd6e 	b.w	254f4 <rpc_message_free>
   18a18:	2007      	movs	r0, #7
   18a1a:	4770      	bx	lr

00018a1c <rpc_dfu_client_data_free>:
   18a1c:	b118      	cbz	r0, 18a26 <rpc_dfu_client_data_free+0xa>
   18a1e:	4601      	mov	r1, r0
   18a20:	2006      	movs	r0, #6
   18a22:	f00c be17 	b.w	25654 <rpc_message_data_free>
   18a26:	2007      	movs	r0, #7
   18a28:	4770      	bx	lr
   18a2a:	bf00      	nop

00018a2c <mem_free>:
   18a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a30:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 18b00 <mem_free+0xd4>
   18a34:	b083      	sub	sp, #12
   18a36:	9000      	str	r0, [sp, #0]
   18a38:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   18a3c:	f8dc 3008 	ldr.w	r3, [ip, #8]
   18a40:	b12b      	cbz	r3, 18a4e <mem_free+0x22>
   18a42:	f8dc 2000 	ldr.w	r2, [ip]
   18a46:	9c00      	ldr	r4, [sp, #0]
   18a48:	7810      	ldrb	r0, [r2, #0]
   18a4a:	42a0      	cmp	r0, r4
   18a4c:	d006      	beq.n	18a5c <mem_free+0x30>
   18a4e:	f10c 0c0c 	add.w	ip, ip, #12
   18a52:	45e3      	cmp	fp, ip
   18a54:	d1f2      	bne.n	18a3c <mem_free+0x10>
   18a56:	b003      	add	sp, #12
   18a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a5c:	f8dc a004 	ldr.w	sl, [ip, #4]
   18a60:	eb03 080a 	add.w	r8, r3, sl
   18a64:	45c2      	cmp	sl, r8
   18a66:	d2f2      	bcs.n	18a4e <mem_free+0x22>
   18a68:	6853      	ldr	r3, [r2, #4]
   18a6a:	f8cd c004 	str.w	ip, [sp, #4]
   18a6e:	46d6      	mov	lr, sl
   18a70:	469c      	mov	ip, r3
   18a72:	f8d2 9010 	ldr.w	r9, [r2, #16]
   18a76:	8997      	ldrh	r7, [r2, #12]
   18a78:	ebae 000a 	sub.w	r0, lr, sl
   18a7c:	b3df      	cbz	r7, 18af6 <mem_free+0xca>
   18a7e:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   18a82:	4290      	cmp	r0, r2
   18a84:	d31c      	bcc.n	18ac0 <mem_free+0x94>
   18a86:	4665      	mov	r5, ip
   18a88:	2400      	movs	r4, #0
   18a8a:	f109 0304 	add.w	r3, r9, #4
   18a8e:	e003      	b.n	18a98 <mem_free+0x6c>
   18a90:	885a      	ldrh	r2, [r3, #2]
   18a92:	3304      	adds	r3, #4
   18a94:	4282      	cmp	r2, r0
   18a96:	d815      	bhi.n	18ac4 <mem_free+0x98>
   18a98:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   18a9c:	3401      	adds	r4, #1
   18a9e:	42a7      	cmp	r7, r4
   18aa0:	fb02 5506 	mla	r5, r2, r6, r5
   18aa4:	eba0 0002 	sub.w	r0, r0, r2
   18aa8:	461e      	mov	r6, r3
   18aaa:	d1f1      	bne.n	18a90 <mem_free+0x64>
   18aac:	2000      	movs	r0, #0
   18aae:	4281      	cmp	r1, r0
   18ab0:	d00d      	beq.n	18ace <mem_free+0xa2>
   18ab2:	f10e 0e01 	add.w	lr, lr, #1
   18ab6:	45f0      	cmp	r8, lr
   18ab8:	d1de      	bne.n	18a78 <mem_free+0x4c>
   18aba:	f8dd c004 	ldr.w	ip, [sp, #4]
   18abe:	e7c6      	b.n	18a4e <mem_free+0x22>
   18ac0:	4665      	mov	r5, ip
   18ac2:	464e      	mov	r6, r9
   18ac4:	8833      	ldrh	r3, [r6, #0]
   18ac6:	fb00 5003 	mla	r0, r0, r3, r5
   18aca:	4281      	cmp	r1, r0
   18acc:	d1f1      	bne.n	18ab2 <mem_free+0x86>
   18ace:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   18ad2:	f8dd c004 	ldr.w	ip, [sp, #4]
   18ad6:	d0ba      	beq.n	18a4e <mem_free+0x22>
   18ad8:	2301      	movs	r3, #1
   18ada:	4a08      	ldr	r2, [pc, #32]	; (18afc <mem_free+0xd0>)
   18adc:	ea4f 115e 	mov.w	r1, lr, lsr #5
   18ae0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   18ae4:	f00e 0e1f 	and.w	lr, lr, #31
   18ae8:	fa03 fe0e 	lsl.w	lr, r3, lr
   18aec:	ea4e 0000 	orr.w	r0, lr, r0
   18af0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   18af4:	e7af      	b.n	18a56 <mem_free+0x2a>
   18af6:	4638      	mov	r0, r7
   18af8:	e7d9      	b.n	18aae <mem_free+0x82>
   18afa:	bf00      	nop
   18afc:	20021e6c 	.word	0x20021e6c
   18b00:	20021eb0 	.word	0x20021eb0

00018b04 <mem_alloc.constprop.5>:
   18b04:	2800      	cmp	r0, #0
   18b06:	d050      	beq.n	18baa <mem_alloc.constprop.5+0xa6>
   18b08:	4b6d      	ldr	r3, [pc, #436]	; (18cc0 <mem_alloc.constprop.5+0x1bc>)
   18b0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   18b0e:	4290      	cmp	r0, r2
   18b10:	d84b      	bhi.n	18baa <mem_alloc.constprop.5+0xa6>
   18b12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b16:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   18b1a:	b083      	sub	sp, #12
   18b1c:	f1bb 0f00 	cmp.w	fp, #0
   18b20:	d054      	beq.n	18bcc <mem_alloc.constprop.5+0xc8>
   18b22:	f10b 32ff 	add.w	r2, fp, #4294967295
   18b26:	4691      	mov	r9, r2
   18b28:	2600      	movs	r6, #0
   18b2a:	f04f 0812 	mov.w	r8, #18
   18b2e:	4f65      	ldr	r7, [pc, #404]	; (18cc4 <mem_alloc.constprop.5+0x1c0>)
   18b30:	9201      	str	r2, [sp, #4]
   18b32:	f10b 0e11 	add.w	lr, fp, #17
   18b36:	eb06 0209 	add.w	r2, r6, r9
   18b3a:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   18b3e:	3201      	adds	r2, #1
   18b40:	0852      	lsrs	r2, r2, #1
   18b42:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   18b46:	f102 0112 	add.w	r1, r2, #18
   18b4a:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   18b4e:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   18b52:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   18b56:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   18b5a:	f8dc c004 	ldr.w	ip, [ip, #4]
   18b5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   18b62:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   18b66:	f8da a010 	ldr.w	sl, [sl, #16]
   18b6a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   18b6e:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   18b72:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   18b76:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   18b7a:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   18b7e:	6849      	ldr	r1, [r1, #4]
   18b80:	692d      	ldr	r5, [r5, #16]
   18b82:	6924      	ldr	r4, [r4, #16]
   18b84:	f8dc c004 	ldr.w	ip, [ip, #4]
   18b88:	4550      	cmp	r0, sl
   18b8a:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   18b8e:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   18b92:	d915      	bls.n	18bc0 <mem_alloc.constprop.5+0xbc>
   18b94:	4288      	cmp	r0, r1
   18b96:	d211      	bcs.n	18bbc <mem_alloc.constprop.5+0xb8>
   18b98:	42a8      	cmp	r0, r5
   18b9a:	d908      	bls.n	18bae <mem_alloc.constprop.5+0xaa>
   18b9c:	1c56      	adds	r6, r2, #1
   18b9e:	45b1      	cmp	r9, r6
   18ba0:	f0c0 8087 	bcc.w	18cb2 <mem_alloc.constprop.5+0x1ae>
   18ba4:	f102 0813 	add.w	r8, r2, #19
   18ba8:	e7c5      	b.n	18b36 <mem_alloc.constprop.5+0x32>
   18baa:	2000      	movs	r0, #0
   18bac:	4770      	bx	lr
   18bae:	f102 39ff 	add.w	r9, r2, #4294967295
   18bb2:	454e      	cmp	r6, r9
   18bb4:	d87d      	bhi.n	18cb2 <mem_alloc.constprop.5+0x1ae>
   18bb6:	f102 0e11 	add.w	lr, r2, #17
   18bba:	e7bc      	b.n	18b36 <mem_alloc.constprop.5+0x32>
   18bbc:	f109 0601 	add.w	r6, r9, #1
   18bc0:	45b3      	cmp	fp, r6
   18bc2:	d007      	beq.n	18bd4 <mem_alloc.constprop.5+0xd0>
   18bc4:	2e10      	cmp	r6, #16
   18bc6:	d001      	beq.n	18bcc <mem_alloc.constprop.5+0xc8>
   18bc8:	45b3      	cmp	fp, r6
   18bca:	d808      	bhi.n	18bde <mem_alloc.constprop.5+0xda>
   18bcc:	2000      	movs	r0, #0
   18bce:	b003      	add	sp, #12
   18bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bd4:	9a01      	ldr	r2, [sp, #4]
   18bd6:	2a10      	cmp	r2, #16
   18bd8:	bf18      	it	ne
   18bda:	4616      	movne	r6, r2
   18bdc:	d0f6      	beq.n	18bcc <mem_alloc.constprop.5+0xc8>
   18bde:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 18cc8 <mem_alloc.constprop.5+0x1c4>
   18be2:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   18be6:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   18bea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   18bee:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   18bf2:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   18bf6:	f8d2 e004 	ldr.w	lr, [r2, #4]
   18bfa:	691d      	ldr	r5, [r3, #16]
   18bfc:	2c00      	cmp	r4, #0
   18bfe:	d056      	beq.n	18cae <mem_alloc.constprop.5+0x1aa>
   18c00:	462a      	mov	r2, r5
   18c02:	4670      	mov	r0, lr
   18c04:	00a4      	lsls	r4, r4, #2
   18c06:	eb05 0904 	add.w	r9, r5, r4
   18c0a:	8851      	ldrh	r1, [r2, #2]
   18c0c:	3204      	adds	r2, #4
   18c0e:	4591      	cmp	r9, r2
   18c10:	4408      	add	r0, r1
   18c12:	d1fa      	bne.n	18c0a <mem_alloc.constprop.5+0x106>
   18c14:	1929      	adds	r1, r5, r4
   18c16:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   18c1a:	4482      	add	sl, r0
   18c1c:	4582      	cmp	sl, r0
   18c1e:	d918      	bls.n	18c52 <mem_alloc.constprop.5+0x14e>
   18c20:	0941      	lsrs	r1, r0, #5
   18c22:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   18c26:	f000 041f 	and.w	r4, r0, #31
   18c2a:	fa22 f904 	lsr.w	r9, r2, r4
   18c2e:	f019 0f01 	tst.w	r9, #1
   18c32:	d007      	beq.n	18c44 <mem_alloc.constprop.5+0x140>
   18c34:	e013      	b.n	18c5e <mem_alloc.constprop.5+0x15a>
   18c36:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   18c3a:	fa22 f904 	lsr.w	r9, r2, r4
   18c3e:	f019 0f01 	tst.w	r9, #1
   18c42:	d10c      	bne.n	18c5e <mem_alloc.constprop.5+0x15a>
   18c44:	3001      	adds	r0, #1
   18c46:	4582      	cmp	sl, r0
   18c48:	ea4f 1150 	mov.w	r1, r0, lsr #5
   18c4c:	f000 041f 	and.w	r4, r0, #31
   18c50:	d1f1      	bne.n	18c36 <mem_alloc.constprop.5+0x132>
   18c52:	3601      	adds	r6, #1
   18c54:	455e      	cmp	r6, fp
   18c56:	f108 0808 	add.w	r8, r8, #8
   18c5a:	d3c4      	bcc.n	18be6 <mem_alloc.constprop.5+0xe2>
   18c5c:	e7b6      	b.n	18bcc <mem_alloc.constprop.5+0xc8>
   18c5e:	2601      	movs	r6, #1
   18c60:	fa06 f404 	lsl.w	r4, r6, r4
   18c64:	899e      	ldrh	r6, [r3, #12]
   18c66:	ea22 0204 	bic.w	r2, r2, r4
   18c6a:	eba0 000e 	sub.w	r0, r0, lr
   18c6e:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   18c72:	685c      	ldr	r4, [r3, #4]
   18c74:	2e00      	cmp	r6, #0
   18c76:	d0a9      	beq.n	18bcc <mem_alloc.constprop.5+0xc8>
   18c78:	886a      	ldrh	r2, [r5, #2]
   18c7a:	4282      	cmp	r2, r0
   18c7c:	d811      	bhi.n	18ca2 <mem_alloc.constprop.5+0x19e>
   18c7e:	2100      	movs	r1, #0
   18c80:	1d2b      	adds	r3, r5, #4
   18c82:	e003      	b.n	18c8c <mem_alloc.constprop.5+0x188>
   18c84:	885a      	ldrh	r2, [r3, #2]
   18c86:	3304      	adds	r3, #4
   18c88:	4282      	cmp	r2, r0
   18c8a:	d80a      	bhi.n	18ca2 <mem_alloc.constprop.5+0x19e>
   18c8c:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   18c90:	3101      	adds	r1, #1
   18c92:	428e      	cmp	r6, r1
   18c94:	fb02 4405 	mla	r4, r2, r5, r4
   18c98:	eba0 0002 	sub.w	r0, r0, r2
   18c9c:	461d      	mov	r5, r3
   18c9e:	d1f1      	bne.n	18c84 <mem_alloc.constprop.5+0x180>
   18ca0:	e794      	b.n	18bcc <mem_alloc.constprop.5+0xc8>
   18ca2:	882b      	ldrh	r3, [r5, #0]
   18ca4:	fb00 4003 	mla	r0, r0, r3, r4
   18ca8:	b003      	add	sp, #12
   18caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cae:	4670      	mov	r0, lr
   18cb0:	e7b0      	b.n	18c14 <mem_alloc.constprop.5+0x110>
   18cb2:	f1bb 0f10 	cmp.w	fp, #16
   18cb6:	bf08      	it	eq
   18cb8:	260f      	moveq	r6, #15
   18cba:	d090      	beq.n	18bde <mem_alloc.constprop.5+0xda>
   18cbc:	e786      	b.n	18bcc <mem_alloc.constprop.5+0xc8>
   18cbe:	bf00      	nop
   18cc0:	20021eec 	.word	0x20021eec
   18cc4:	20021eb0 	.word	0x20021eb0
   18cc8:	20021e6c 	.word	0x20021e6c

00018ccc <mem_alloc.constprop.4>:
   18ccc:	2800      	cmp	r0, #0
   18cce:	d04c      	beq.n	18d6a <mem_alloc.constprop.4+0x9e>
   18cd0:	4b6b      	ldr	r3, [pc, #428]	; (18e80 <mem_alloc.constprop.4+0x1b4>)
   18cd2:	681a      	ldr	r2, [r3, #0]
   18cd4:	4290      	cmp	r0, r2
   18cd6:	d848      	bhi.n	18d6a <mem_alloc.constprop.4+0x9e>
   18cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cdc:	685f      	ldr	r7, [r3, #4]
   18cde:	b083      	sub	sp, #12
   18ce0:	9700      	str	r7, [sp, #0]
   18ce2:	2f00      	cmp	r7, #0
   18ce4:	d051      	beq.n	18d8a <mem_alloc.constprop.4+0xbe>
   18ce6:	1e7a      	subs	r2, r7, #1
   18ce8:	4696      	mov	lr, r2
   18cea:	2100      	movs	r1, #0
   18cec:	f04f 0c01 	mov.w	ip, #1
   18cf0:	4c64      	ldr	r4, [pc, #400]	; (18e84 <mem_alloc.constprop.4+0x1b8>)
   18cf2:	9201      	str	r2, [sp, #4]
   18cf4:	eb01 020e 	add.w	r2, r1, lr
   18cf8:	3201      	adds	r2, #1
   18cfa:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   18cfe:	0852      	lsrs	r2, r2, #1
   18d00:	f102 0801 	add.w	r8, r2, #1
   18d04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   18d08:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   18d0c:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   18d10:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   18d14:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   18d18:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   18d1c:	f8d9 9004 	ldr.w	r9, [r9, #4]
   18d20:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   18d24:	f8da a010 	ldr.w	sl, [sl, #16]
   18d28:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   18d2c:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   18d30:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   18d34:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   18d38:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   18d3c:	6936      	ldr	r6, [r6, #16]
   18d3e:	f8db b004 	ldr.w	fp, [fp, #4]
   18d42:	692d      	ldr	r5, [r5, #16]
   18d44:	f8d9 9004 	ldr.w	r9, [r9, #4]
   18d48:	4550      	cmp	r0, sl
   18d4a:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   18d4e:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   18d52:	d913      	bls.n	18d7c <mem_alloc.constprop.4+0xb0>
   18d54:	42a8      	cmp	r0, r5
   18d56:	d210      	bcs.n	18d7a <mem_alloc.constprop.4+0xae>
   18d58:	42b0      	cmp	r0, r6
   18d5a:	d908      	bls.n	18d6e <mem_alloc.constprop.4+0xa2>
   18d5c:	45c6      	cmp	lr, r8
   18d5e:	4641      	mov	r1, r8
   18d60:	f0c0 8087 	bcc.w	18e72 <mem_alloc.constprop.4+0x1a6>
   18d64:	f108 0c01 	add.w	ip, r8, #1
   18d68:	e7c4      	b.n	18cf4 <mem_alloc.constprop.4+0x28>
   18d6a:	2000      	movs	r0, #0
   18d6c:	4770      	bx	lr
   18d6e:	f102 3eff 	add.w	lr, r2, #4294967295
   18d72:	4571      	cmp	r1, lr
   18d74:	d87d      	bhi.n	18e72 <mem_alloc.constprop.4+0x1a6>
   18d76:	4617      	mov	r7, r2
   18d78:	e7bc      	b.n	18cf4 <mem_alloc.constprop.4+0x28>
   18d7a:	4639      	mov	r1, r7
   18d7c:	9a00      	ldr	r2, [sp, #0]
   18d7e:	428a      	cmp	r2, r1
   18d80:	d007      	beq.n	18d92 <mem_alloc.constprop.4+0xc6>
   18d82:	2910      	cmp	r1, #16
   18d84:	d001      	beq.n	18d8a <mem_alloc.constprop.4+0xbe>
   18d86:	428a      	cmp	r2, r1
   18d88:	d808      	bhi.n	18d9c <mem_alloc.constprop.4+0xd0>
   18d8a:	2000      	movs	r0, #0
   18d8c:	b003      	add	sp, #12
   18d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d92:	9a01      	ldr	r2, [sp, #4]
   18d94:	2a10      	cmp	r2, #16
   18d96:	bf18      	it	ne
   18d98:	4611      	movne	r1, r2
   18d9a:	d0f6      	beq.n	18d8a <mem_alloc.constprop.4+0xbe>
   18d9c:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 18e88 <mem_alloc.constprop.4+0x1bc>
   18da0:	f8dd 9000 	ldr.w	r9, [sp]
   18da4:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   18da8:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   18dac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   18db0:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   18db4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   18db8:	f8d2 e004 	ldr.w	lr, [r2, #4]
   18dbc:	691f      	ldr	r7, [r3, #16]
   18dbe:	2e00      	cmp	r6, #0
   18dc0:	d055      	beq.n	18e6e <mem_alloc.constprop.4+0x1a2>
   18dc2:	463a      	mov	r2, r7
   18dc4:	4670      	mov	r0, lr
   18dc6:	00b6      	lsls	r6, r6, #2
   18dc8:	eb07 0a06 	add.w	sl, r7, r6
   18dcc:	8855      	ldrh	r5, [r2, #2]
   18dce:	3204      	adds	r2, #4
   18dd0:	4592      	cmp	sl, r2
   18dd2:	4428      	add	r0, r5
   18dd4:	d1fa      	bne.n	18dcc <mem_alloc.constprop.4+0x100>
   18dd6:	19bd      	adds	r5, r7, r6
   18dd8:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   18ddc:	4483      	add	fp, r0
   18dde:	4583      	cmp	fp, r0
   18de0:	d918      	bls.n	18e14 <mem_alloc.constprop.4+0x148>
   18de2:	0945      	lsrs	r5, r0, #5
   18de4:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   18de8:	f000 061f 	and.w	r6, r0, #31
   18dec:	fa22 fa06 	lsr.w	sl, r2, r6
   18df0:	f01a 0f01 	tst.w	sl, #1
   18df4:	d007      	beq.n	18e06 <mem_alloc.constprop.4+0x13a>
   18df6:	e013      	b.n	18e20 <mem_alloc.constprop.4+0x154>
   18df8:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   18dfc:	fa22 fa06 	lsr.w	sl, r2, r6
   18e00:	f01a 0f01 	tst.w	sl, #1
   18e04:	d10c      	bne.n	18e20 <mem_alloc.constprop.4+0x154>
   18e06:	3001      	adds	r0, #1
   18e08:	4583      	cmp	fp, r0
   18e0a:	ea4f 1550 	mov.w	r5, r0, lsr #5
   18e0e:	f000 061f 	and.w	r6, r0, #31
   18e12:	d1f1      	bne.n	18df8 <mem_alloc.constprop.4+0x12c>
   18e14:	3101      	adds	r1, #1
   18e16:	4549      	cmp	r1, r9
   18e18:	f108 0808 	add.w	r8, r8, #8
   18e1c:	d3c4      	bcc.n	18da8 <mem_alloc.constprop.4+0xdc>
   18e1e:	e7b4      	b.n	18d8a <mem_alloc.constprop.4+0xbe>
   18e20:	2101      	movs	r1, #1
   18e22:	40b1      	lsls	r1, r6
   18e24:	899e      	ldrh	r6, [r3, #12]
   18e26:	ea22 0201 	bic.w	r2, r2, r1
   18e2a:	eba0 000e 	sub.w	r0, r0, lr
   18e2e:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   18e32:	685c      	ldr	r4, [r3, #4]
   18e34:	2e00      	cmp	r6, #0
   18e36:	d0a8      	beq.n	18d8a <mem_alloc.constprop.4+0xbe>
   18e38:	887a      	ldrh	r2, [r7, #2]
   18e3a:	4282      	cmp	r2, r0
   18e3c:	d811      	bhi.n	18e62 <mem_alloc.constprop.4+0x196>
   18e3e:	2100      	movs	r1, #0
   18e40:	1d3b      	adds	r3, r7, #4
   18e42:	e003      	b.n	18e4c <mem_alloc.constprop.4+0x180>
   18e44:	885a      	ldrh	r2, [r3, #2]
   18e46:	3304      	adds	r3, #4
   18e48:	4282      	cmp	r2, r0
   18e4a:	d80a      	bhi.n	18e62 <mem_alloc.constprop.4+0x196>
   18e4c:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   18e50:	3101      	adds	r1, #1
   18e52:	428e      	cmp	r6, r1
   18e54:	eba0 0002 	sub.w	r0, r0, r2
   18e58:	fb02 4405 	mla	r4, r2, r5, r4
   18e5c:	461f      	mov	r7, r3
   18e5e:	d1f1      	bne.n	18e44 <mem_alloc.constprop.4+0x178>
   18e60:	e793      	b.n	18d8a <mem_alloc.constprop.4+0xbe>
   18e62:	883b      	ldrh	r3, [r7, #0]
   18e64:	fb00 4003 	mla	r0, r0, r3, r4
   18e68:	b003      	add	sp, #12
   18e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e6e:	4670      	mov	r0, lr
   18e70:	e7b1      	b.n	18dd6 <mem_alloc.constprop.4+0x10a>
   18e72:	9a00      	ldr	r2, [sp, #0]
   18e74:	2a10      	cmp	r2, #16
   18e76:	bf08      	it	eq
   18e78:	210f      	moveq	r1, #15
   18e7a:	d08f      	beq.n	18d9c <mem_alloc.constprop.4+0xd0>
   18e7c:	e785      	b.n	18d8a <mem_alloc.constprop.4+0xbe>
   18e7e:	bf00      	nop
   18e80:	20021eec 	.word	0x20021eec
   18e84:	20021eb0 	.word	0x20021eb0
   18e88:	20021e6c 	.word	0x20021e6c

00018e8c <nrf_mem_init>:
   18e8c:	b570      	push	{r4, r5, r6, lr}
   18e8e:	2200      	movs	r2, #0
   18e90:	2501      	movs	r5, #1
   18e92:	4833      	ldr	r0, [pc, #204]	; (18f60 <nrf_mem_init+0xd4>)
   18e94:	0951      	lsrs	r1, r2, #5
   18e96:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   18e9a:	f002 031f 	and.w	r3, r2, #31
   18e9e:	fa05 f303 	lsl.w	r3, r5, r3
   18ea2:	3201      	adds	r2, #1
   18ea4:	4323      	orrs	r3, r4
   18ea6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   18eaa:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   18eae:	d1f1      	bne.n	18e94 <nrf_mem_init+0x8>
   18eb0:	2400      	movs	r4, #0
   18eb2:	4b2c      	ldr	r3, [pc, #176]	; (18f64 <nrf_mem_init+0xd8>)
   18eb4:	4621      	mov	r1, r4
   18eb6:	223c      	movs	r2, #60	; 0x3c
   18eb8:	482b      	ldr	r0, [pc, #172]	; (18f68 <nrf_mem_init+0xdc>)
   18eba:	601c      	str	r4, [r3, #0]
   18ebc:	f011 fd12 	bl	2a8e4 <memset>
   18ec0:	2110      	movs	r1, #16
   18ec2:	2205      	movs	r2, #5
   18ec4:	4b29      	ldr	r3, [pc, #164]	; (18f6c <nrf_mem_init+0xe0>)
   18ec6:	4e2a      	ldr	r6, [pc, #168]	; (18f70 <nrf_mem_init+0xe4>)
   18ec8:	e9c3 4400 	strd	r4, r4, [r3]
   18ecc:	60d9      	str	r1, [r3, #12]
   18ece:	6159      	str	r1, [r3, #20]
   18ed0:	61d9      	str	r1, [r3, #28]
   18ed2:	6259      	str	r1, [r3, #36]	; 0x24
   18ed4:	62d9      	str	r1, [r3, #44]	; 0x2c
   18ed6:	6359      	str	r1, [r3, #52]	; 0x34
   18ed8:	63d9      	str	r1, [r3, #60]	; 0x3c
   18eda:	6459      	str	r1, [r3, #68]	; 0x44
   18edc:	64d9      	str	r1, [r3, #76]	; 0x4c
   18ede:	6559      	str	r1, [r3, #84]	; 0x54
   18ee0:	65d9      	str	r1, [r3, #92]	; 0x5c
   18ee2:	6659      	str	r1, [r3, #100]	; 0x64
   18ee4:	66d9      	str	r1, [r3, #108]	; 0x6c
   18ee6:	6759      	str	r1, [r3, #116]	; 0x74
   18ee8:	67d9      	str	r1, [r3, #124]	; 0x7c
   18eea:	609a      	str	r2, [r3, #8]
   18eec:	611a      	str	r2, [r3, #16]
   18eee:	619a      	str	r2, [r3, #24]
   18ef0:	621a      	str	r2, [r3, #32]
   18ef2:	629a      	str	r2, [r3, #40]	; 0x28
   18ef4:	631a      	str	r2, [r3, #48]	; 0x30
   18ef6:	639a      	str	r2, [r3, #56]	; 0x38
   18ef8:	641a      	str	r2, [r3, #64]	; 0x40
   18efa:	649a      	str	r2, [r3, #72]	; 0x48
   18efc:	651a      	str	r2, [r3, #80]	; 0x50
   18efe:	659a      	str	r2, [r3, #88]	; 0x58
   18f00:	661a      	str	r2, [r3, #96]	; 0x60
   18f02:	669a      	str	r2, [r3, #104]	; 0x68
   18f04:	671a      	str	r2, [r3, #112]	; 0x70
   18f06:	679a      	str	r2, [r3, #120]	; 0x78
   18f08:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   18f0c:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   18f10:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   18f14:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   18f18:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   18f1c:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   18f20:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   18f24:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   18f28:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   18f2c:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   18f30:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   18f34:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   18f38:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   18f3c:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   18f40:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   18f44:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   18f48:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   18f4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18f50:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   18f54:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   18f58:	4620      	mov	r0, r4
   18f5a:	7035      	strb	r5, [r6, #0]
   18f5c:	bd70      	pop	{r4, r5, r6, pc}
   18f5e:	bf00      	nop
   18f60:	20021e6c 	.word	0x20021e6c
   18f64:	20021eac 	.word	0x20021eac
   18f68:	20021eb0 	.word	0x20021eb0
   18f6c:	20021eec 	.word	0x20021eec
   18f70:	20027d9d 	.word	0x20027d9d

00018f74 <nrf_mem_register>:
   18f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f78:	4b87      	ldr	r3, [pc, #540]	; (19198 <nrf_mem_register+0x224>)
   18f7a:	b087      	sub	sp, #28
   18f7c:	781b      	ldrb	r3, [r3, #0]
   18f7e:	2b00      	cmp	r3, #0
   18f80:	f000 808c 	beq.w	1909c <nrf_mem_register+0x128>
   18f84:	b328      	cbz	r0, 18fd2 <nrf_mem_register+0x5e>
   18f86:	b321      	cbz	r1, 18fd2 <nrf_mem_register+0x5e>
   18f88:	780b      	ldrb	r3, [r1, #0]
   18f8a:	f8df 8218 	ldr.w	r8, [pc, #536]	; 191a4 <nrf_mem_register+0x230>
   18f8e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   18f92:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   18f96:	685b      	ldr	r3, [r3, #4]
   18f98:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   18f9c:	4463      	add	r3, ip
   18f9e:	2b10      	cmp	r3, #16
   18fa0:	d811      	bhi.n	18fc6 <nrf_mem_register+0x52>
   18fa2:	f04f 0a00 	mov.w	sl, #0
   18fa6:	4689      	mov	r9, r1
   18fa8:	4b7c      	ldr	r3, [pc, #496]	; (1919c <nrf_mem_register+0x228>)
   18faa:	4f7d      	ldr	r7, [pc, #500]	; (191a0 <nrf_mem_register+0x22c>)
   18fac:	681b      	ldr	r3, [r3, #0]
   18fae:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   18fb2:	9300      	str	r3, [sp, #0]
   18fb4:	68b9      	ldr	r1, [r7, #8]
   18fb6:	b191      	cbz	r1, 18fde <nrf_mem_register+0x6a>
   18fb8:	f10a 0a01 	add.w	sl, sl, #1
   18fbc:	f1ba 0f05 	cmp.w	sl, #5
   18fc0:	f107 070c 	add.w	r7, r7, #12
   18fc4:	d1f6      	bne.n	18fb4 <nrf_mem_register+0x40>
   18fc6:	f248 1b07 	movw	fp, #33031	; 0x8107
   18fca:	4658      	mov	r0, fp
   18fcc:	b007      	add	sp, #28
   18fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fd2:	f248 1b0e 	movw	fp, #33038	; 0x810e
   18fd6:	4658      	mov	r0, fp
   18fd8:	b007      	add	sp, #28
   18fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fde:	f1bc 0f00 	cmp.w	ip, #0
   18fe2:	d061      	beq.n	190a8 <nrf_mem_register+0x134>
   18fe4:	460d      	mov	r5, r1
   18fe6:	460c      	mov	r4, r1
   18fe8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   18fec:	eb0e 0b03 	add.w	fp, lr, r3
   18ff0:	885a      	ldrh	r2, [r3, #2]
   18ff2:	f833 6b04 	ldrh.w	r6, [r3], #4
   18ff6:	4415      	add	r5, r2
   18ff8:	459b      	cmp	fp, r3
   18ffa:	fb02 4406 	mla	r4, r2, r6, r4
   18ffe:	d1f7      	bne.n	18ff0 <nrf_mem_register+0x7c>
   19000:	f8d9 3008 	ldr.w	r3, [r9, #8]
   19004:	42a3      	cmp	r3, r4
   19006:	d3d7      	bcc.n	18fb8 <nrf_mem_register+0x44>
   19008:	9b00      	ldr	r3, [sp, #0]
   1900a:	442b      	add	r3, r5
   1900c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   19010:	d2d2      	bcs.n	18fb8 <nrf_mem_register+0x44>
   19012:	4c63      	ldr	r4, [pc, #396]	; (191a0 <nrf_mem_register+0x22c>)
   19014:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   19018:	0092      	lsls	r2, r2, #2
   1901a:	f8c0 a000 	str.w	sl, [r0]
   1901e:	18a0      	adds	r0, r4, r2
   19020:	f844 9002 	str.w	r9, [r4, r2]
   19024:	9a00      	ldr	r2, [sp, #0]
   19026:	468b      	mov	fp, r1
   19028:	e9c0 2501 	strd	r2, r5, [r0, #4]
   1902c:	f899 2001 	ldrb.w	r2, [r9, #1]
   19030:	485a      	ldr	r0, [pc, #360]	; (1919c <nrf_mem_register+0x228>)
   19032:	2a01      	cmp	r2, #1
   19034:	6003      	str	r3, [r0, #0]
   19036:	d0c8      	beq.n	18fca <nrf_mem_register+0x56>
   19038:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   1903c:	2b00      	cmp	r3, #0
   1903e:	d0c4      	beq.n	18fca <nrf_mem_register+0x56>
   19040:	2500      	movs	r5, #0
   19042:	f8cd 9004 	str.w	r9, [sp, #4]
   19046:	f8cd a00c 	str.w	sl, [sp, #12]
   1904a:	f8cd b014 	str.w	fp, [sp, #20]
   1904e:	9b01      	ldr	r3, [sp, #4]
   19050:	781f      	ldrb	r7, [r3, #0]
   19052:	691a      	ldr	r2, [r3, #16]
   19054:	013b      	lsls	r3, r7, #4
   19056:	eb03 0907 	add.w	r9, r3, r7
   1905a:	9300      	str	r3, [sp, #0]
   1905c:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   19060:	6859      	ldr	r1, [r3, #4]
   19062:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   19066:	9102      	str	r1, [sp, #8]
   19068:	bb39      	cbnz	r1, 190ba <nrf_mem_register+0x146>
   1906a:	9a03      	ldr	r2, [sp, #12]
   1906c:	60dd      	str	r5, [r3, #12]
   1906e:	609a      	str	r2, [r3, #8]
   19070:	9b00      	ldr	r3, [sp, #0]
   19072:	443b      	add	r3, r7
   19074:	461f      	mov	r7, r3
   19076:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   1907a:	684b      	ldr	r3, [r1, #4]
   1907c:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   19080:	3301      	adds	r3, #1
   19082:	4294      	cmp	r4, r2
   19084:	604b      	str	r3, [r1, #4]
   19086:	d912      	bls.n	190ae <nrf_mem_register+0x13a>
   19088:	9b01      	ldr	r3, [sp, #4]
   1908a:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   1908e:	899b      	ldrh	r3, [r3, #12]
   19090:	3501      	adds	r5, #1
   19092:	429d      	cmp	r5, r3
   19094:	d3db      	bcc.n	1904e <nrf_mem_register+0xda>
   19096:	f8dd b014 	ldr.w	fp, [sp, #20]
   1909a:	e796      	b.n	18fca <nrf_mem_register+0x56>
   1909c:	f248 1b08 	movw	fp, #33032	; 0x8108
   190a0:	4658      	mov	r0, fp
   190a2:	b007      	add	sp, #28
   190a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190a8:	9b00      	ldr	r3, [sp, #0]
   190aa:	4665      	mov	r5, ip
   190ac:	e7ae      	b.n	1900c <nrf_mem_register+0x98>
   190ae:	9b01      	ldr	r3, [sp, #4]
   190b0:	3501      	adds	r5, #1
   190b2:	899b      	ldrh	r3, [r3, #12]
   190b4:	42ab      	cmp	r3, r5
   190b6:	d8ca      	bhi.n	1904e <nrf_mem_register+0xda>
   190b8:	e7ed      	b.n	19096 <nrf_mem_register+0x122>
   190ba:	2600      	movs	r6, #0
   190bc:	f101 3aff 	add.w	sl, r1, #4294967295
   190c0:	9504      	str	r5, [sp, #16]
   190c2:	eb06 000a 	add.w	r0, r6, sl
   190c6:	eb09 0206 	add.w	r2, r9, r6
   190ca:	3201      	adds	r2, #1
   190cc:	3001      	adds	r0, #1
   190ce:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   190d2:	0840      	lsrs	r0, r0, #1
   190d4:	4d32      	ldr	r5, [pc, #200]	; (191a0 <nrf_mem_register+0x22c>)
   190d6:	eb09 0100 	add.w	r1, r9, r0
   190da:	eb09 030a 	add.w	r3, r9, sl
   190de:	3101      	adds	r1, #1
   190e0:	3301      	adds	r3, #1
   190e2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   190e6:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   190ea:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   190ee:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   190f2:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   190f6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   190fa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   190fe:	f8db b010 	ldr.w	fp, [fp, #16]
   19102:	6852      	ldr	r2, [r2, #4]
   19104:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   19108:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   1910c:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   19110:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   19114:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   19118:	f8de e010 	ldr.w	lr, [lr, #16]
   1911c:	6849      	ldr	r1, [r1, #4]
   1911e:	f8dc c010 	ldr.w	ip, [ip, #16]
   19122:	685b      	ldr	r3, [r3, #4]
   19124:	4294      	cmp	r4, r2
   19126:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   1912a:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   1912e:	d92d      	bls.n	1918c <nrf_mem_register+0x218>
   19130:	429c      	cmp	r4, r3
   19132:	d22d      	bcs.n	19190 <nrf_mem_register+0x21c>
   19134:	428c      	cmp	r4, r1
   19136:	d924      	bls.n	19182 <nrf_mem_register+0x20e>
   19138:	1c46      	adds	r6, r0, #1
   1913a:	45b2      	cmp	sl, r6
   1913c:	d2c1      	bcs.n	190c2 <nrf_mem_register+0x14e>
   1913e:	2610      	movs	r6, #16
   19140:	9d04      	ldr	r5, [sp, #16]
   19142:	9a02      	ldr	r2, [sp, #8]
   19144:	42b2      	cmp	r2, r6
   19146:	d911      	bls.n	1916c <nrf_mem_register+0x1f8>
   19148:	9b00      	ldr	r3, [sp, #0]
   1914a:	443b      	add	r3, r7
   1914c:	441a      	add	r2, r3
   1914e:	4433      	add	r3, r6
   19150:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   19154:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   19158:	2208      	movs	r2, #8
   1915a:	4651      	mov	r1, sl
   1915c:	eb0a 0002 	add.w	r0, sl, r2
   19160:	f1aa 0a08 	sub.w	sl, sl, #8
   19164:	f7f4 fd38 	bl	dbd8 <memcpy>
   19168:	45d1      	cmp	r9, sl
   1916a:	d1f5      	bne.n	19158 <nrf_mem_register+0x1e4>
   1916c:	9b00      	ldr	r3, [sp, #0]
   1916e:	9903      	ldr	r1, [sp, #12]
   19170:	443b      	add	r3, r7
   19172:	4433      	add	r3, r6
   19174:	3301      	adds	r3, #1
   19176:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1917a:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   1917e:	6055      	str	r5, [r2, #4]
   19180:	e776      	b.n	19070 <nrf_mem_register+0xfc>
   19182:	f100 3aff 	add.w	sl, r0, #4294967295
   19186:	4556      	cmp	r6, sl
   19188:	d99b      	bls.n	190c2 <nrf_mem_register+0x14e>
   1918a:	e7d8      	b.n	1913e <nrf_mem_register+0x1ca>
   1918c:	9d04      	ldr	r5, [sp, #16]
   1918e:	e7d8      	b.n	19142 <nrf_mem_register+0x1ce>
   19190:	9d04      	ldr	r5, [sp, #16]
   19192:	f10a 0601 	add.w	r6, sl, #1
   19196:	e7d4      	b.n	19142 <nrf_mem_register+0x1ce>
   19198:	20027d9d 	.word	0x20027d9d
   1919c:	20021eac 	.word	0x20021eac
   191a0:	20021eb0 	.word	0x20021eb0
   191a4:	20021eec 	.word	0x20021eec

000191a8 <nrf_malloc>:
   191a8:	4b03      	ldr	r3, [pc, #12]	; (191b8 <nrf_malloc+0x10>)
   191aa:	781b      	ldrb	r3, [r3, #0]
   191ac:	b10b      	cbz	r3, 191b2 <nrf_malloc+0xa>
   191ae:	f7ff bd8d 	b.w	18ccc <mem_alloc.constprop.4>
   191b2:	4618      	mov	r0, r3
   191b4:	4770      	bx	lr
   191b6:	bf00      	nop
   191b8:	20027d9d 	.word	0x20027d9d

000191bc <nrf_calloc>:
   191bc:	b538      	push	{r3, r4, r5, lr}
   191be:	4b08      	ldr	r3, [pc, #32]	; (191e0 <nrf_calloc+0x24>)
   191c0:	781d      	ldrb	r5, [r3, #0]
   191c2:	b155      	cbz	r5, 191da <nrf_calloc+0x1e>
   191c4:	fb01 f400 	mul.w	r4, r1, r0
   191c8:	4620      	mov	r0, r4
   191ca:	f7ff fd7f 	bl	18ccc <mem_alloc.constprop.4>
   191ce:	4605      	mov	r5, r0
   191d0:	b118      	cbz	r0, 191da <nrf_calloc+0x1e>
   191d2:	4622      	mov	r2, r4
   191d4:	2100      	movs	r1, #0
   191d6:	f011 fb85 	bl	2a8e4 <memset>
   191da:	4628      	mov	r0, r5
   191dc:	bd38      	pop	{r3, r4, r5, pc}
   191de:	bf00      	nop
   191e0:	20027d9d 	.word	0x20027d9d

000191e4 <nrf_free>:
   191e4:	4b04      	ldr	r3, [pc, #16]	; (191f8 <nrf_free+0x14>)
   191e6:	781b      	ldrb	r3, [r3, #0]
   191e8:	b123      	cbz	r3, 191f4 <nrf_free+0x10>
   191ea:	b118      	cbz	r0, 191f4 <nrf_free+0x10>
   191ec:	4601      	mov	r1, r0
   191ee:	2000      	movs	r0, #0
   191f0:	f7ff bc1c 	b.w	18a2c <mem_free>
   191f4:	4770      	bx	lr
   191f6:	bf00      	nop
   191f8:	20027d9d 	.word	0x20027d9d

000191fc <nrf_shared_malloc>:
   191fc:	4b03      	ldr	r3, [pc, #12]	; (1920c <nrf_shared_malloc+0x10>)
   191fe:	781b      	ldrb	r3, [r3, #0]
   19200:	b10b      	cbz	r3, 19206 <nrf_shared_malloc+0xa>
   19202:	f7ff bc7f 	b.w	18b04 <mem_alloc.constprop.5>
   19206:	4618      	mov	r0, r3
   19208:	4770      	bx	lr
   1920a:	bf00      	nop
   1920c:	20027d9d 	.word	0x20027d9d

00019210 <nrf_shared_free>:
   19210:	4b04      	ldr	r3, [pc, #16]	; (19224 <nrf_shared_free+0x14>)
   19212:	781b      	ldrb	r3, [r3, #0]
   19214:	b123      	cbz	r3, 19220 <nrf_shared_free+0x10>
   19216:	b118      	cbz	r0, 19220 <nrf_shared_free+0x10>
   19218:	4601      	mov	r1, r0
   1921a:	2001      	movs	r0, #1
   1921c:	f7ff bc06 	b.w	18a2c <mem_free>
   19220:	4770      	bx	lr
   19222:	bf00      	nop
   19224:	20027d9d 	.word	0x20027d9d

00019228 <mbedtls_aes_init>:
   19228:	f44f 728c 	mov.w	r2, #280	; 0x118
   1922c:	2100      	movs	r1, #0
   1922e:	f011 bb59 	b.w	2a8e4 <memset>
   19232:	bf00      	nop

00019234 <mbedtls_aes_free>:
   19234:	b118      	cbz	r0, 1923e <mbedtls_aes_free+0xa>
   19236:	f44f 718c 	mov.w	r1, #280	; 0x118
   1923a:	f006 bba9 	b.w	1f990 <mbedtls_platform_zeroize>
   1923e:	4770      	bx	lr

00019240 <mbedtls_aes_setkey_enc>:
   19240:	2ac0      	cmp	r2, #192	; 0xc0
   19242:	f000 8184 	beq.w	1954e <mbedtls_aes_setkey_enc+0x30e>
   19246:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   1924a:	f000 817d 	beq.w	19548 <mbedtls_aes_setkey_enc+0x308>
   1924e:	2a80      	cmp	r2, #128	; 0x80
   19250:	d002      	beq.n	19258 <mbedtls_aes_setkey_enc+0x18>
   19252:	f06f 001f 	mvn.w	r0, #31
   19256:	4770      	bx	lr
   19258:	230a      	movs	r3, #10
   1925a:	6003      	str	r3, [r0, #0]
   1925c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19260:	4607      	mov	r7, r0
   19262:	f04f 0c00 	mov.w	ip, #0
   19266:	f100 0408 	add.w	r4, r0, #8
   1926a:	b085      	sub	sp, #20
   1926c:	0952      	lsrs	r2, r2, #5
   1926e:	f847 4f04 	str.w	r4, [r7, #4]!
   19272:	788b      	ldrb	r3, [r1, #2]
   19274:	784d      	ldrb	r5, [r1, #1]
   19276:	780e      	ldrb	r6, [r1, #0]
   19278:	041b      	lsls	r3, r3, #16
   1927a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1927e:	78cd      	ldrb	r5, [r1, #3]
   19280:	4333      	orrs	r3, r6
   19282:	f10c 0c01 	add.w	ip, ip, #1
   19286:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   1928a:	4594      	cmp	ip, r2
   1928c:	f847 3f04 	str.w	r3, [r7, #4]!
   19290:	f101 0104 	add.w	r1, r1, #4
   19294:	d3ed      	bcc.n	19272 <mbedtls_aes_setkey_enc+0x32>
   19296:	6803      	ldr	r3, [r0, #0]
   19298:	2b0c      	cmp	r3, #12
   1929a:	f000 81bf 	beq.w	1961c <mbedtls_aes_setkey_enc+0x3dc>
   1929e:	2b0e      	cmp	r3, #14
   192a0:	f000 8158 	beq.w	19554 <mbedtls_aes_setkey_enc+0x314>
   192a4:	2b0a      	cmp	r3, #10
   192a6:	f040 814b 	bne.w	19540 <mbedtls_aes_setkey_enc+0x300>
   192aa:	6944      	ldr	r4, [r0, #20]
   192ac:	4bd8      	ldr	r3, [pc, #864]	; (19610 <mbedtls_aes_setkey_enc+0x3d0>)
   192ae:	f3c4 2207 	ubfx	r2, r4, #8, #8
   192b2:	6881      	ldr	r1, [r0, #8]
   192b4:	5c9a      	ldrb	r2, [r3, r2]
   192b6:	0e25      	lsrs	r5, r4, #24
   192b8:	5d5e      	ldrb	r6, [r3, r5]
   192ba:	f081 0101 	eor.w	r1, r1, #1
   192be:	b2e5      	uxtb	r5, r4
   192c0:	5d5d      	ldrb	r5, [r3, r5]
   192c2:	404a      	eors	r2, r1
   192c4:	f3c4 4107 	ubfx	r1, r4, #16, #8
   192c8:	ea82 4206 	eor.w	r2, r2, r6, lsl #16
   192cc:	5c5e      	ldrb	r6, [r3, r1]
   192ce:	ea82 6505 	eor.w	r5, r2, r5, lsl #24
   192d2:	68c1      	ldr	r1, [r0, #12]
   192d4:	ea85 2206 	eor.w	r2, r5, r6, lsl #8
   192d8:	6907      	ldr	r7, [r0, #16]
   192da:	4051      	eors	r1, r2
   192dc:	ea81 0907 	eor.w	r9, r1, r7
   192e0:	ea89 0404 	eor.w	r4, r9, r4
   192e4:	f3c4 2507 	ubfx	r5, r4, #8, #8
   192e8:	5d5d      	ldrb	r5, [r3, r5]
   192ea:	0e26      	lsrs	r6, r4, #24
   192ec:	5d9e      	ldrb	r6, [r3, r6]
   192ee:	f082 0c02 	eor.w	ip, r2, #2
   192f2:	ea85 050c 	eor.w	r5, r5, ip
   192f6:	ea85 4506 	eor.w	r5, r5, r6, lsl #16
   192fa:	b2e6      	uxtb	r6, r4
   192fc:	f813 c006 	ldrb.w	ip, [r3, r6]
   19300:	f3c4 4607 	ubfx	r6, r4, #16, #8
   19304:	5d9e      	ldrb	r6, [r3, r6]
   19306:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
   1930a:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
   1930e:	406f      	eors	r7, r5
   19310:	ea87 0c04 	eor.w	ip, r7, r4
   19314:	f3cc 2607 	ubfx	r6, ip, #8, #8
   19318:	5d9e      	ldrb	r6, [r3, r6]
   1931a:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
   1931e:	f813 e00e 	ldrb.w	lr, [r3, lr]
   19322:	f085 0804 	eor.w	r8, r5, #4
   19326:	ea86 0608 	eor.w	r6, r6, r8
   1932a:	ea86 460e 	eor.w	r6, r6, lr, lsl #16
   1932e:	fa5f fe8c 	uxtb.w	lr, ip
   19332:	f813 e00e 	ldrb.w	lr, [r3, lr]
   19336:	6182      	str	r2, [r0, #24]
   19338:	f3cc 4207 	ubfx	r2, ip, #16, #8
   1933c:	ea86 660e 	eor.w	r6, r6, lr, lsl #24
   19340:	f813 e002 	ldrb.w	lr, [r3, r2]
   19344:	ea85 0201 	eor.w	r2, r5, r1
   19348:	ea86 260e 	eor.w	r6, r6, lr, lsl #8
   1934c:	ea86 0802 	eor.w	r8, r6, r2
   19350:	ea88 0e04 	eor.w	lr, r8, r4
   19354:	61c1      	str	r1, [r0, #28]
   19356:	f3ce 2107 	ubfx	r1, lr, #8, #8
   1935a:	5c59      	ldrb	r1, [r3, r1]
   1935c:	ea4f 6a1e 	mov.w	sl, lr, lsr #24
   19360:	f813 a00a 	ldrb.w	sl, [r3, sl]
   19364:	f086 0b08 	eor.w	fp, r6, #8
   19368:	ea81 010b 	eor.w	r1, r1, fp
   1936c:	ea81 410a 	eor.w	r1, r1, sl, lsl #16
   19370:	fa5f fa8e 	uxtb.w	sl, lr
   19374:	f813 a00a 	ldrb.w	sl, [r3, sl]
   19378:	6244      	str	r4, [r0, #36]	; 0x24
   1937a:	f3ce 4407 	ubfx	r4, lr, #16, #8
   1937e:	5d1c      	ldrb	r4, [r3, r4]
   19380:	ea81 610a 	eor.w	r1, r1, sl, lsl #24
   19384:	ea81 2104 	eor.w	r1, r1, r4, lsl #8
   19388:	ea81 0a07 	eor.w	sl, r1, r7
   1938c:	ea8a 040e 	eor.w	r4, sl, lr
   19390:	62c2      	str	r2, [r0, #44]	; 0x2c
   19392:	6307      	str	r7, [r0, #48]	; 0x30
   19394:	f3c4 2207 	ubfx	r2, r4, #8, #8
   19398:	ea88 0707 	eor.w	r7, r8, r7
   1939c:	e9c0 680e 	strd	r6, r8, [r0, #56]	; 0x38
   193a0:	f8c0 9020 	str.w	r9, [r0, #32]
   193a4:	6285      	str	r5, [r0, #40]	; 0x28
   193a6:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
   193aa:	f8c0 e044 	str.w	lr, [r0, #68]	; 0x44
   193ae:	6407      	str	r7, [r0, #64]	; 0x40
   193b0:	6481      	str	r1, [r0, #72]	; 0x48
   193b2:	f813 c002 	ldrb.w	ip, [r3, r2]
   193b6:	0e22      	lsrs	r2, r4, #24
   193b8:	5c9a      	ldrb	r2, [r3, r2]
   193ba:	f081 0510 	eor.w	r5, r1, #16
   193be:	ea8c 0c05 	eor.w	ip, ip, r5
   193c2:	ea8c 4c02 	eor.w	ip, ip, r2, lsl #16
   193c6:	b2e2      	uxtb	r2, r4
   193c8:	5c9d      	ldrb	r5, [r3, r2]
   193ca:	f3c4 4207 	ubfx	r2, r4, #16, #8
   193ce:	5c9a      	ldrb	r2, [r3, r2]
   193d0:	ea8c 6c05 	eor.w	ip, ip, r5, lsl #24
   193d4:	ea8c 2c02 	eor.w	ip, ip, r2, lsl #8
   193d8:	ea81 0108 	eor.w	r1, r1, r8
   193dc:	ea81 090c 	eor.w	r9, r1, ip
   193e0:	ea8e 0209 	eor.w	r2, lr, r9
   193e4:	f3c2 2507 	ubfx	r5, r2, #8, #8
   193e8:	5d5e      	ldrb	r6, [r3, r5]
   193ea:	0e15      	lsrs	r5, r2, #24
   193ec:	5d5d      	ldrb	r5, [r3, r5]
   193ee:	f08c 0720 	eor.w	r7, ip, #32
   193f2:	407e      	eors	r6, r7
   193f4:	ea86 4605 	eor.w	r6, r6, r5, lsl #16
   193f8:	b2d5      	uxtb	r5, r2
   193fa:	5d5d      	ldrb	r5, [r3, r5]
   193fc:	64c1      	str	r1, [r0, #76]	; 0x4c
   193fe:	f3c2 4107 	ubfx	r1, r2, #16, #8
   19402:	5c59      	ldrb	r1, [r3, r1]
   19404:	ea86 6605 	eor.w	r6, r6, r5, lsl #24
   19408:	ea86 2601 	eor.w	r6, r6, r1, lsl #8
   1940c:	ea8a 0e06 	eor.w	lr, sl, r6
   19410:	ea82 080e 	eor.w	r8, r2, lr
   19414:	f3c8 2107 	ubfx	r1, r8, #8, #8
   19418:	5c5f      	ldrb	r7, [r3, r1]
   1941a:	ea4f 6118 	mov.w	r1, r8, lsr #24
   1941e:	5c59      	ldrb	r1, [r3, r1]
   19420:	f086 0540 	eor.w	r5, r6, #64	; 0x40
   19424:	406f      	eors	r7, r5
   19426:	ea87 4701 	eor.w	r7, r7, r1, lsl #16
   1942a:	fa5f f188 	uxtb.w	r1, r8
   1942e:	5c59      	ldrb	r1, [r3, r1]
   19430:	ea8a 0509 	eor.w	r5, sl, r9
   19434:	ea87 6701 	eor.w	r7, r7, r1, lsl #24
   19438:	f3c8 4107 	ubfx	r1, r8, #16, #8
   1943c:	5c59      	ldrb	r1, [r3, r1]
   1943e:	f8c0 a050 	str.w	sl, [r0, #80]	; 0x50
   19442:	ea87 2701 	eor.w	r7, r7, r1, lsl #8
   19446:	ea89 0a06 	eor.w	sl, r9, r6
   1944a:	6605      	str	r5, [r0, #96]	; 0x60
   1944c:	ea8a 0507 	eor.w	r5, sl, r7
   19450:	ea82 0105 	eor.w	r1, r2, r5
   19454:	6544      	str	r4, [r0, #84]	; 0x54
   19456:	f3c1 2407 	ubfx	r4, r1, #8, #8
   1945a:	5d1c      	ldrb	r4, [r3, r4]
   1945c:	ea4f 6b11 	mov.w	fp, r1, lsr #24
   19460:	f813 b00b 	ldrb.w	fp, [r3, fp]
   19464:	6642      	str	r2, [r0, #100]	; 0x64
   19466:	f087 0280 	eor.w	r2, r7, #128	; 0x80
   1946a:	4062      	eors	r2, r4
   1946c:	b2cc      	uxtb	r4, r1
   1946e:	ea82 420b 	eor.w	r2, r2, fp, lsl #16
   19472:	f813 b004 	ldrb.w	fp, [r3, r4]
   19476:	f3c1 4407 	ubfx	r4, r1, #16, #8
   1947a:	5d1c      	ldrb	r4, [r3, r4]
   1947c:	ea82 620b 	eor.w	r2, r2, fp, lsl #24
   19480:	ea82 2204 	eor.w	r2, r2, r4, lsl #8
   19484:	ea8e 0402 	eor.w	r4, lr, r2
   19488:	f8c0 c058 	str.w	ip, [r0, #88]	; 0x58
   1948c:	ea81 0c04 	eor.w	ip, r1, r4
   19490:	6686      	str	r6, [r0, #104]	; 0x68
   19492:	67c5      	str	r5, [r0, #124]	; 0x7c
   19494:	ea8e 0605 	eor.w	r6, lr, r5
   19498:	6787      	str	r7, [r0, #120]	; 0x78
   1949a:	4055      	eors	r5, r2
   1949c:	f3cc 2707 	ubfx	r7, ip, #8, #8
   194a0:	e9c0 ae1b 	strd	sl, lr, [r0, #108]	; 0x6c
   194a4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
   194a8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   194ac:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
   194b0:	f8c0 905c 	str.w	r9, [r0, #92]	; 0x5c
   194b4:	f8c0 8074 	str.w	r8, [r0, #116]	; 0x74
   194b8:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
   194bc:	5dde      	ldrb	r6, [r3, r7]
   194be:	f082 021b 	eor.w	r2, r2, #27
   194c2:	ea4f 671c 	mov.w	r7, ip, lsr #24
   194c6:	f813 e007 	ldrb.w	lr, [r3, r7]
   194ca:	4056      	eors	r6, r2
   194cc:	fa5f f28c 	uxtb.w	r2, ip
   194d0:	5c9f      	ldrb	r7, [r3, r2]
   194d2:	f3cc 4207 	ubfx	r2, ip, #16, #8
   194d6:	5c9a      	ldrb	r2, [r3, r2]
   194d8:	ea86 460e 	eor.w	r6, r6, lr, lsl #16
   194dc:	ea86 6607 	eor.w	r6, r6, r7, lsl #24
   194e0:	ea86 2602 	eor.w	r6, r6, r2, lsl #8
   194e4:	4075      	eors	r5, r6
   194e6:	4069      	eors	r1, r5
   194e8:	f3c1 2207 	ubfx	r2, r1, #8, #8
   194ec:	5c9a      	ldrb	r2, [r3, r2]
   194ee:	0e0f      	lsrs	r7, r1, #24
   194f0:	5ddf      	ldrb	r7, [r3, r7]
   194f2:	f086 0e36 	eor.w	lr, r6, #54	; 0x36
   194f6:	ea82 020e 	eor.w	r2, r2, lr
   194fa:	ea82 4207 	eor.w	r2, r2, r7, lsl #16
   194fe:	b2cf      	uxtb	r7, r1
   19500:	f813 e007 	ldrb.w	lr, [r3, r7]
   19504:	f3c1 4707 	ubfx	r7, r1, #16, #8
   19508:	5ddf      	ldrb	r7, [r3, r7]
   1950a:	ea82 630e 	eor.w	r3, r2, lr, lsl #24
   1950e:	ea83 2307 	eor.w	r3, r3, r7, lsl #8
   19512:	ea83 0204 	eor.w	r2, r3, r4
   19516:	ea82 0e01 	eor.w	lr, r2, r1
   1951a:	e9c0 6526 	strd	r6, r5, [r0, #152]	; 0x98
   1951e:	e9c0 2e2c 	strd	r2, lr, [r0, #176]	; 0xb0
   19522:	f8c0 4090 	str.w	r4, [r0, #144]	; 0x90
   19526:	ea83 0705 	eor.w	r7, r3, r5
   1952a:	406c      	eors	r4, r5
   1952c:	f8c0 c094 	str.w	ip, [r0, #148]	; 0x94
   19530:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
   19534:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
   19538:	f8c0 70ac 	str.w	r7, [r0, #172]	; 0xac
   1953c:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
   19540:	2000      	movs	r0, #0
   19542:	b005      	add	sp, #20
   19544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19548:	230e      	movs	r3, #14
   1954a:	6003      	str	r3, [r0, #0]
   1954c:	e686      	b.n	1925c <mbedtls_aes_setkey_enc+0x1c>
   1954e:	230c      	movs	r3, #12
   19550:	6003      	str	r3, [r0, #0]
   19552:	e683      	b.n	1925c <mbedtls_aes_setkey_enc+0x1c>
   19554:	e9d0 ce03 	ldrd	ip, lr, [r0, #12]
   19558:	e9d0 8907 	ldrd	r8, r9, [r0, #28]
   1955c:	e9d0 7205 	ldrd	r7, r2, [r0, #20]
   19560:	6a46      	ldr	r6, [r0, #36]	; 0x24
   19562:	6883      	ldr	r3, [r0, #8]
   19564:	4670      	mov	r0, lr
   19566:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 19618 <mbedtls_aes_setkey_enc+0x3d8>
   1956a:	4d29      	ldr	r5, [pc, #164]	; (19610 <mbedtls_aes_setkey_enc+0x3d0>)
   1956c:	f8cd c000 	str.w	ip, [sp]
   19570:	f85a bf04 	ldr.w	fp, [sl, #4]!
   19574:	f3c6 2c07 	ubfx	ip, r6, #8, #8
   19578:	f815 e00c 	ldrb.w	lr, [r5, ip]
   1957c:	ea4f 6c16 	mov.w	ip, r6, lsr #24
   19580:	ea83 030b 	eor.w	r3, r3, fp
   19584:	f815 b00c 	ldrb.w	fp, [r5, ip]
   19588:	fa5f fc86 	uxtb.w	ip, r6
   1958c:	ea8e 0303 	eor.w	r3, lr, r3
   19590:	f815 c00c 	ldrb.w	ip, [r5, ip]
   19594:	f3c6 4e07 	ubfx	lr, r6, #16, #8
   19598:	ea83 430b 	eor.w	r3, r3, fp, lsl #16
   1959c:	f815 e00e 	ldrb.w	lr, [r5, lr]
   195a0:	ea83 630c 	eor.w	r3, r3, ip, lsl #24
   195a4:	9900      	ldr	r1, [sp, #0]
   195a6:	ea83 230e 	eor.w	r3, r3, lr, lsl #8
   195aa:	4059      	eors	r1, r3
   195ac:	4048      	eors	r0, r1
   195ae:	4047      	eors	r7, r0
   195b0:	fa5f fc87 	uxtb.w	ip, r7
   195b4:	f815 e00c 	ldrb.w	lr, [r5, ip]
   195b8:	ea4f 6c17 	mov.w	ip, r7, lsr #24
   195bc:	f815 b00c 	ldrb.w	fp, [r5, ip]
   195c0:	f3c7 2c07 	ubfx	ip, r7, #8, #8
   195c4:	ea8e 0202 	eor.w	r2, lr, r2
   195c8:	f815 c00c 	ldrb.w	ip, [r5, ip]
   195cc:	f3c7 4e07 	ubfx	lr, r7, #16, #8
   195d0:	ea82 620b 	eor.w	r2, r2, fp, lsl #24
   195d4:	f815 e00e 	ldrb.w	lr, [r5, lr]
   195d8:	ea82 220c 	eor.w	r2, r2, ip, lsl #8
   195dc:	ea82 420e 	eor.w	r2, r2, lr, lsl #16
   195e0:	ea88 0802 	eor.w	r8, r8, r2
   195e4:	e9c4 3108 	strd	r3, r1, [r4, #32]
   195e8:	9100      	str	r1, [sp, #0]
   195ea:	490a      	ldr	r1, [pc, #40]	; (19614 <mbedtls_aes_setkey_enc+0x3d4>)
   195ec:	ea89 0908 	eor.w	r9, r9, r8
   195f0:	ea86 0609 	eor.w	r6, r6, r9
   195f4:	458a      	cmp	sl, r1
   195f6:	e9c4 070a 	strd	r0, r7, [r4, #40]	; 0x28
   195fa:	e9c4 960e 	strd	r9, r6, [r4, #56]	; 0x38
   195fe:	e9c4 280c 	strd	r2, r8, [r4, #48]	; 0x30
   19602:	f104 0420 	add.w	r4, r4, #32
   19606:	d1b3      	bne.n	19570 <mbedtls_aes_setkey_enc+0x330>
   19608:	2000      	movs	r0, #0
   1960a:	b005      	add	sp, #20
   1960c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19610:	0003139c 	.word	0x0003139c
   19614:	000324b4 	.word	0x000324b4
   19618:	00032498 	.word	0x00032498
   1961c:	69c2      	ldr	r2, [r0, #28]
   1961e:	4bb2      	ldr	r3, [pc, #712]	; (198e8 <mbedtls_aes_setkey_enc+0x6a8>)
   19620:	f3c2 2407 	ubfx	r4, r2, #8, #8
   19624:	6881      	ldr	r1, [r0, #8]
   19626:	5d1d      	ldrb	r5, [r3, r4]
   19628:	0e14      	lsrs	r4, r2, #24
   1962a:	5d1e      	ldrb	r6, [r3, r4]
   1962c:	f081 0101 	eor.w	r1, r1, #1
   19630:	b2d4      	uxtb	r4, r2
   19632:	5d1c      	ldrb	r4, [r3, r4]
   19634:	404d      	eors	r5, r1
   19636:	f3c2 4107 	ubfx	r1, r2, #16, #8
   1963a:	5c59      	ldrb	r1, [r3, r1]
   1963c:	ea85 4506 	eor.w	r5, r5, r6, lsl #16
   19640:	68c7      	ldr	r7, [r0, #12]
   19642:	ea85 6504 	eor.w	r5, r5, r4, lsl #24
   19646:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
   1964a:	6901      	ldr	r1, [r0, #16]
   1964c:	406f      	eors	r7, r5
   1964e:	6946      	ldr	r6, [r0, #20]
   19650:	ea81 0907 	eor.w	r9, r1, r7
   19654:	6984      	ldr	r4, [r0, #24]
   19656:	ea86 0609 	eor.w	r6, r6, r9
   1965a:	ea84 0806 	eor.w	r8, r4, r6
   1965e:	ea82 0208 	eor.w	r2, r2, r8
   19662:	f3c2 2407 	ubfx	r4, r2, #8, #8
   19666:	f813 e004 	ldrb.w	lr, [r3, r4]
   1966a:	ea4f 6c12 	mov.w	ip, r2, lsr #24
   1966e:	f813 a00c 	ldrb.w	sl, [r3, ip]
   19672:	f085 0402 	eor.w	r4, r5, #2
   19676:	fa5f fc82 	uxtb.w	ip, r2
   1967a:	ea8e 0404 	eor.w	r4, lr, r4
   1967e:	f813 e00c 	ldrb.w	lr, [r3, ip]
   19682:	f3c2 4c07 	ubfx	ip, r2, #16, #8
   19686:	f813 c00c 	ldrb.w	ip, [r3, ip]
   1968a:	ea84 440a 	eor.w	r4, r4, sl, lsl #16
   1968e:	ea84 640e 	eor.w	r4, r4, lr, lsl #24
   19692:	ea84 240c 	eor.w	r4, r4, ip, lsl #8
   19696:	4061      	eors	r1, r4
   19698:	9401      	str	r4, [sp, #4]
   1969a:	460c      	mov	r4, r1
   1969c:	6981      	ldr	r1, [r0, #24]
   1969e:	6205      	str	r5, [r0, #32]
   196a0:	4061      	eors	r1, r4
   196a2:	ea82 0c01 	eor.w	ip, r2, r1
   196a6:	9103      	str	r1, [sp, #12]
   196a8:	f3cc 2e07 	ubfx	lr, ip, #8, #8
   196ac:	9901      	ldr	r1, [sp, #4]
   196ae:	f813 e00e 	ldrb.w	lr, [r3, lr]
   196b2:	ea4f 6a1c 	mov.w	sl, ip, lsr #24
   196b6:	f813 a00a 	ldrb.w	sl, [r3, sl]
   196ba:	f081 0b04 	eor.w	fp, r1, #4
   196be:	ea8e 0e0b 	eor.w	lr, lr, fp
   196c2:	ea8e 4a0a 	eor.w	sl, lr, sl, lsl #16
   196c6:	fa5f fe8c 	uxtb.w	lr, ip
   196ca:	f813 e00e 	ldrb.w	lr, [r3, lr]
   196ce:	e9c0 960a 	strd	r9, r6, [r0, #40]	; 0x28
   196d2:	ea8a 650e 	eor.w	r5, sl, lr, lsl #24
   196d6:	f3cc 4e07 	ubfx	lr, ip, #16, #8
   196da:	f813 e00e 	ldrb.w	lr, [r3, lr]
   196de:	ea87 0a01 	eor.w	sl, r7, r1
   196e2:	ea85 250e 	eor.w	r5, r5, lr, lsl #8
   196e6:	ea8a 0e05 	eor.w	lr, sl, r5
   196ea:	ea86 010e 	eor.w	r1, r6, lr
   196ee:	9100      	str	r1, [sp, #0]
   196f0:	4621      	mov	r1, r4
   196f2:	ea86 0904 	eor.w	r9, r6, r4
   196f6:	9c00      	ldr	r4, [sp, #0]
   196f8:	e9c0 820c 	strd	r8, r2, [r0, #48]	; 0x30
   196fc:	ea82 0604 	eor.w	r6, r2, r4
   19700:	6247      	str	r7, [r0, #36]	; 0x24
   19702:	f8c0 a03c 	str.w	sl, [r0, #60]	; 0x3c
   19706:	9102      	str	r1, [sp, #8]
   19708:	6401      	str	r1, [r0, #64]	; 0x40
   1970a:	9f03      	ldr	r7, [sp, #12]
   1970c:	f3c6 2407 	ubfx	r4, r6, #8, #8
   19710:	ea81 080e 	eor.w	r8, r1, lr
   19714:	e9c0 7c12 	strd	r7, ip, [r0, #72]	; 0x48
   19718:	5d1c      	ldrb	r4, [r3, r4]
   1971a:	ea4f 6c16 	mov.w	ip, r6, lsr #24
   1971e:	e9c0 5e14 	strd	r5, lr, [r0, #80]	; 0x50
   19722:	f8c0 8058 	str.w	r8, [r0, #88]	; 0x58
   19726:	f085 0508 	eor.w	r5, r5, #8
   1972a:	f813 800c 	ldrb.w	r8, [r3, ip]
   1972e:	fa5f fc86 	uxtb.w	ip, r6
   19732:	9901      	ldr	r1, [sp, #4]
   19734:	f813 c00c 	ldrb.w	ip, [r3, ip]
   19738:	4065      	eors	r5, r4
   1973a:	f3c6 4407 	ubfx	r4, r6, #16, #8
   1973e:	5d1c      	ldrb	r4, [r3, r4]
   19740:	ea85 4508 	eor.w	r5, r5, r8, lsl #16
   19744:	6381      	str	r1, [r0, #56]	; 0x38
   19746:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
   1974a:	9902      	ldr	r1, [sp, #8]
   1974c:	ea85 2504 	eor.w	r5, r5, r4, lsl #8
   19750:	4069      	eors	r1, r5
   19752:	9101      	str	r1, [sp, #4]
   19754:	4639      	mov	r1, r7
   19756:	6984      	ldr	r4, [r0, #24]
   19758:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
   1975c:	ea84 0805 	eor.w	r8, r4, r5
   19760:	ea86 0908 	eor.w	r9, r6, r8
   19764:	f3c9 2407 	ubfx	r4, r9, #8, #8
   19768:	f813 a004 	ldrb.w	sl, [r3, r4]
   1976c:	ea4f 6419 	mov.w	r4, r9, lsr #24
   19770:	5d1c      	ldrb	r4, [r3, r4]
   19772:	f085 0c10 	eor.w	ip, r5, #16
   19776:	ea8a 0c0c 	eor.w	ip, sl, ip
   1977a:	fa5f fa89 	uxtb.w	sl, r9
   1977e:	f813 a00a 	ldrb.w	sl, [r3, sl]
   19782:	ea8c 4c04 	eor.w	ip, ip, r4, lsl #16
   19786:	f3c9 4407 	ubfx	r4, r9, #16, #8
   1978a:	5d1c      	ldrb	r4, [r3, r4]
   1978c:	ea8c 6c0a 	eor.w	ip, ip, sl, lsl #24
   19790:	ea8e 0e05 	eor.w	lr, lr, r5
   19794:	ea8c 2c04 	eor.w	ip, ip, r4, lsl #8
   19798:	ea8e 040c 	eor.w	r4, lr, ip
   1979c:	4062      	eors	r2, r4
   1979e:	f8c0 e06c 	str.w	lr, [r0, #108]	; 0x6c
   197a2:	f3c2 2e07 	ubfx	lr, r2, #8, #8
   197a6:	f813 e00e 	ldrb.w	lr, [r3, lr]
   197aa:	ea4f 6a12 	mov.w	sl, r2, lsr #24
   197ae:	f813 a00a 	ldrb.w	sl, [r3, sl]
   197b2:	f08c 0b20 	eor.w	fp, ip, #32
   197b6:	ea8e 0e0b 	eor.w	lr, lr, fp
   197ba:	ea8e 4a0a 	eor.w	sl, lr, sl, lsl #16
   197be:	fa5f fe82 	uxtb.w	lr, r2
   197c2:	f813 e00e 	ldrb.w	lr, [r3, lr]
   197c6:	9f00      	ldr	r7, [sp, #0]
   197c8:	ea8a 6a0e 	eor.w	sl, sl, lr, lsl #24
   197cc:	f3c2 4e07 	ubfx	lr, r2, #16, #8
   197d0:	f813 b00e 	ldrb.w	fp, [r3, lr]
   197d4:	ea81 0e07 	eor.w	lr, r1, r7
   197d8:	9901      	ldr	r1, [sp, #4]
   197da:	ea8a 2b0b 	eor.w	fp, sl, fp, lsl #8
   197de:	ea81 0a0b 	eor.w	sl, r1, fp
   197e2:	9f00      	ldr	r7, [sp, #0]
   197e4:	f8c0 e060 	str.w	lr, [r0, #96]	; 0x60
   197e8:	ea88 0e0a 	eor.w	lr, r8, sl
   197ec:	65c7      	str	r7, [r0, #92]	; 0x5c
   197ee:	6646      	str	r6, [r0, #100]	; 0x64
   197f0:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
   197f4:	ea82 060e 	eor.w	r6, r2, lr
   197f8:	6701      	str	r1, [r0, #112]	; 0x70
   197fa:	ea87 0904 	eor.w	r9, r7, r4
   197fe:	404f      	eors	r7, r1
   19800:	4061      	eors	r1, r4
   19802:	6685      	str	r5, [r0, #104]	; 0x68
   19804:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
   19808:	f3c6 2507 	ubfx	r5, r6, #8, #8
   1980c:	ea88 0109 	eor.w	r1, r8, r9
   19810:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
   19814:	5d5d      	ldrb	r5, [r3, r5]
   19816:	0e31      	lsrs	r1, r6, #24
   19818:	5c59      	ldrb	r1, [r3, r1]
   1981a:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
   1981e:	f8c0 b098 	str.w	fp, [r0, #152]	; 0x98
   19822:	ea84 040b 	eor.w	r4, r4, fp
   19826:	6747      	str	r7, [r0, #116]	; 0x74
   19828:	f08b 0b40 	eor.w	fp, fp, #64	; 0x40
   1982c:	b2f7      	uxtb	r7, r6
   1982e:	5ddf      	ldrb	r7, [r3, r7]
   19830:	f8c0 60ac 	str.w	r6, [r0, #172]	; 0xac
   19834:	ea85 050b 	eor.w	r5, r5, fp
   19838:	f3c6 4607 	ubfx	r6, r6, #16, #8
   1983c:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
   19840:	5d99      	ldrb	r1, [r3, r6]
   19842:	ea85 6507 	eor.w	r5, r5, r7, lsl #24
   19846:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
   1984a:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
   1984e:	406c      	eors	r4, r5
   19850:	ea89 0604 	eor.w	r6, r9, r4
   19854:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
   19858:	4072      	eors	r2, r6
   1985a:	f3c2 2107 	ubfx	r1, r2, #8, #8
   1985e:	f8c0 c080 	str.w	ip, [r0, #128]	; 0x80
   19862:	5c59      	ldrb	r1, [r3, r1]
   19864:	ea89 0c0a 	eor.w	ip, r9, sl
   19868:	0e17      	lsrs	r7, r2, #24
   1986a:	f8c0 908c 	str.w	r9, [r0, #140]	; 0x8c
   1986e:	f8c0 c0a4 	str.w	ip, [r0, #164]	; 0xa4
   19872:	f813 9007 	ldrb.w	r9, [r3, r7]
   19876:	f085 0c80 	eor.w	ip, r5, #128	; 0x80
   1987a:	b2d7      	uxtb	r7, r2
   1987c:	ea81 010c 	eor.w	r1, r1, ip
   19880:	f813 c007 	ldrb.w	ip, [r3, r7]
   19884:	f3c2 4707 	ubfx	r7, r2, #16, #8
   19888:	5ddf      	ldrb	r7, [r3, r7]
   1988a:	ea81 4109 	eor.w	r1, r1, r9, lsl #16
   1988e:	ea81 630c 	eor.w	r3, r1, ip, lsl #24
   19892:	ea83 2307 	eor.w	r3, r3, r7, lsl #8
   19896:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
   1989a:	ea83 0c0a 	eor.w	ip, r3, sl
   1989e:	ea83 0808 	eor.w	r8, r3, r8
   198a2:	f8c0 e0a8 	str.w	lr, [r0, #168]	; 0xa8
   198a6:	ea8e 0706 	eor.w	r7, lr, r6
   198aa:	ea88 0b02 	eor.w	fp, r8, r2
   198ae:	ea8c 0906 	eor.w	r9, ip, r6
   198b2:	ea83 0e04 	eor.w	lr, r3, r4
   198b6:	ea8a 0104 	eor.w	r1, sl, r4
   198ba:	f8c0 a0a0 	str.w	sl, [r0, #160]	; 0xa0
   198be:	e9c0 7230 	strd	r7, r2, [r0, #192]	; 0xc0
   198c2:	f8c0 60bc 	str.w	r6, [r0, #188]	; 0xbc
   198c6:	e9c0 542c 	strd	r5, r4, [r0, #176]	; 0xb0
   198ca:	e9c0 8b36 	strd	r8, fp, [r0, #216]	; 0xd8
   198ce:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   198d2:	e9c0 c934 	strd	ip, r9, [r0, #208]	; 0xd0
   198d6:	f8c0 e0cc 	str.w	lr, [r0, #204]	; 0xcc
   198da:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
   198de:	2000      	movs	r0, #0
   198e0:	b005      	add	sp, #20
   198e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198e6:	bf00      	nop
   198e8:	0003139c 	.word	0x0003139c

000198ec <mbedtls_internal_aes_encrypt>:
   198ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198f0:	e9d0 0300 	ldrd	r0, r3, [r0]
   198f4:	1040      	asrs	r0, r0, #1
   198f6:	4605      	mov	r5, r0
   198f8:	b08b      	sub	sp, #44	; 0x2c
   198fa:	681c      	ldr	r4, [r3, #0]
   198fc:	f8d1 a000 	ldr.w	sl, [r1]
   19900:	3d01      	subs	r5, #1
   19902:	9502      	str	r5, [sp, #8]
   19904:	684f      	ldr	r7, [r1, #4]
   19906:	688d      	ldr	r5, [r1, #8]
   19908:	9208      	str	r2, [sp, #32]
   1990a:	ea8a 0a04 	eor.w	sl, sl, r4
   1990e:	9a02      	ldr	r2, [sp, #8]
   19910:	68cc      	ldr	r4, [r1, #12]
   19912:	68d9      	ldr	r1, [r3, #12]
   19914:	9009      	str	r0, [sp, #36]	; 0x24
   19916:	685e      	ldr	r6, [r3, #4]
   19918:	6898      	ldr	r0, [r3, #8]
   1991a:	ea84 0c01 	eor.w	ip, r4, r1
   1991e:	2a00      	cmp	r2, #0
   19920:	f103 0110 	add.w	r1, r3, #16
   19924:	ea86 0607 	eor.w	r6, r6, r7
   19928:	ea85 0500 	eor.w	r5, r5, r0
   1992c:	9106      	str	r1, [sp, #24]
   1992e:	f340 8202 	ble.w	19d36 <mbedtls_internal_aes_encrypt+0x44a>
   19932:	4ad2      	ldr	r2, [pc, #840]	; (19c7c <mbedtls_internal_aes_encrypt+0x390>)
   19934:	49d2      	ldr	r1, [pc, #840]	; (19c80 <mbedtls_internal_aes_encrypt+0x394>)
   19936:	4691      	mov	r9, r2
   19938:	9100      	str	r1, [sp, #0]
   1993a:	49d2      	ldr	r1, [pc, #840]	; (19c84 <mbedtls_internal_aes_encrypt+0x398>)
   1993c:	f8df b34c 	ldr.w	fp, [pc, #844]	; 19c8c <mbedtls_internal_aes_encrypt+0x3a0>
   19940:	9207      	str	r2, [sp, #28]
   19942:	9101      	str	r1, [sp, #4]
   19944:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   19948:	fa5f f38a 	uxtb.w	r3, sl
   1994c:	fa5f f08c 	uxtb.w	r0, ip
   19950:	f859 7023 	ldr.w	r7, [r9, r3, lsl #2]
   19954:	f859 4020 	ldr.w	r4, [r9, r0, lsl #2]
   19958:	b2ea      	uxtb	r2, r5
   1995a:	f85e 0c20 	ldr.w	r0, [lr, #-32]
   1995e:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
   19962:	4047      	eors	r7, r0
   19964:	f85e 0c14 	ldr.w	r0, [lr, #-20]
   19968:	9204      	str	r2, [sp, #16]
   1996a:	ea4f 631c 	mov.w	r3, ip, lsr #24
   1996e:	0e2a      	lsrs	r2, r5, #24
   19970:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
   19974:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
   19978:	4044      	eors	r4, r0
   1997a:	0e30      	lsrs	r0, r6, #24
   1997c:	f85b 8020 	ldr.w	r8, [fp, r0, lsl #2]
   19980:	9800      	ldr	r0, [sp, #0]
   19982:	405f      	eors	r7, r3
   19984:	4054      	eors	r4, r2
   19986:	b2f1      	uxtb	r1, r6
   19988:	f3c6 2307 	ubfx	r3, r6, #8, #8
   1998c:	f3ca 2207 	ubfx	r2, sl, #8, #8
   19990:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   19994:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   19998:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   1999c:	f85e 0c1c 	ldr.w	r0, [lr, #-28]
   199a0:	9703      	str	r7, [sp, #12]
   199a2:	4048      	eors	r0, r1
   199a4:	ea4f 611a 	mov.w	r1, sl, lsr #24
   199a8:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
   199ac:	9f04      	ldr	r7, [sp, #16]
   199ae:	4048      	eors	r0, r1
   199b0:	f85e 1c18 	ldr.w	r1, [lr, #-24]
   199b4:	9405      	str	r4, [sp, #20]
   199b6:	4079      	eors	r1, r7
   199b8:	9f00      	ldr	r7, [sp, #0]
   199ba:	9c01      	ldr	r4, [sp, #4]
   199bc:	ea81 0808 	eor.w	r8, r1, r8
   199c0:	f3c5 2107 	ubfx	r1, r5, #8, #8
   199c4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   199c8:	f3c6 4607 	ubfx	r6, r6, #16, #8
   199cc:	9f03      	ldr	r7, [sp, #12]
   199ce:	f3ca 4a07 	ubfx	sl, sl, #16, #8
   199d2:	f3c5 4507 	ubfx	r5, r5, #16, #8
   199d6:	f854 a02a 	ldr.w	sl, [r4, sl, lsl #2]
   199da:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   199de:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   199e2:	9c00      	ldr	r4, [sp, #0]
   199e4:	407b      	eors	r3, r7
   199e6:	f3cc 2707 	ubfx	r7, ip, #8, #8
   199ea:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
   199ee:	9c01      	ldr	r4, [sp, #4]
   199f0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
   199f4:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
   199f8:	9c05      	ldr	r4, [sp, #20]
   199fa:	406b      	eors	r3, r5
   199fc:	4062      	eors	r2, r4
   199fe:	4056      	eors	r6, r2
   19a00:	4048      	eors	r0, r1
   19a02:	ea80 000c 	eor.w	r0, r0, ip
   19a06:	ea88 0807 	eor.w	r8, r8, r7
   19a0a:	fa5f fc83 	uxtb.w	ip, r3
   19a0e:	0e35      	lsrs	r5, r6, #24
   19a10:	ea88 080a 	eor.w	r8, r8, sl
   19a14:	f859 a02c 	ldr.w	sl, [r9, ip, lsl #2]
   19a18:	f85b 5025 	ldr.w	r5, [fp, r5, lsl #2]
   19a1c:	f3c0 2207 	ubfx	r2, r0, #8, #8
   19a20:	9503      	str	r5, [sp, #12]
   19a22:	9d00      	ldr	r5, [sp, #0]
   19a24:	f3c8 4707 	ubfx	r7, r8, #16, #8
   19a28:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   19a2c:	9d01      	ldr	r5, [sp, #4]
   19a2e:	b2c4      	uxtb	r4, r0
   19a30:	0e19      	lsrs	r1, r3, #24
   19a32:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
   19a36:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
   19a3a:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
   19a3e:	9d00      	ldr	r5, [sp, #0]
   19a40:	f3c8 2c07 	ubfx	ip, r8, #8, #8
   19a44:	f855 502c 	ldr.w	r5, [r5, ip, lsl #2]
   19a48:	ea84 0c01 	eor.w	ip, r4, r1
   19a4c:	9c01      	ldr	r4, [sp, #4]
   19a4e:	f3c6 4107 	ubfx	r1, r6, #16, #8
   19a52:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
   19a56:	9504      	str	r5, [sp, #16]
   19a58:	9d03      	ldr	r5, [sp, #12]
   19a5a:	9103      	str	r1, [sp, #12]
   19a5c:	fa5f f188 	uxtb.w	r1, r8
   19a60:	f859 4021 	ldr.w	r4, [r9, r1, lsl #2]
   19a64:	f85e 1c10 	ldr.w	r1, [lr, #-16]
   19a68:	ea8a 0a05 	eor.w	sl, sl, r5
   19a6c:	ea8a 0a01 	eor.w	sl, sl, r1
   19a70:	0e01      	lsrs	r1, r0, #24
   19a72:	f85b 5021 	ldr.w	r5, [fp, r1, lsl #2]
   19a76:	ea4f 6818 	mov.w	r8, r8, lsr #24
   19a7a:	406c      	eors	r4, r5
   19a7c:	b2f5      	uxtb	r5, r6
   19a7e:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
   19a82:	ea8a 0a02 	eor.w	sl, sl, r2
   19a86:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   19a8a:	f85e 1c0c 	ldr.w	r1, [lr, #-12]
   19a8e:	ea85 0802 	eor.w	r8, r5, r2
   19a92:	f85e 2c08 	ldr.w	r2, [lr, #-8]
   19a96:	9d01      	ldr	r5, [sp, #4]
   19a98:	4062      	eors	r2, r4
   19a9a:	f3c0 4007 	ubfx	r0, r0, #16, #8
   19a9e:	f3c3 2407 	ubfx	r4, r3, #8, #8
   19aa2:	f3c3 4307 	ubfx	r3, r3, #16, #8
   19aa6:	ea8c 0c01 	eor.w	ip, ip, r1
   19aaa:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   19aae:	9900      	ldr	r1, [sp, #0]
   19ab0:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
   19ab4:	9b04      	ldr	r3, [sp, #16]
   19ab6:	f3c6 2607 	ubfx	r6, r6, #8, #8
   19aba:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
   19abe:	ea8a 0a07 	eor.w	sl, sl, r7
   19ac2:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
   19ac6:	f85e 6c04 	ldr.w	r6, [lr, #-4]
   19aca:	ea8c 0103 	eor.w	r1, ip, r3
   19ace:	9b03      	ldr	r3, [sp, #12]
   19ad0:	ea88 0806 	eor.w	r8, r8, r6
   19ad4:	ea81 0603 	eor.w	r6, r1, r3
   19ad8:	9b02      	ldr	r3, [sp, #8]
   19ada:	407a      	eors	r2, r7
   19adc:	ea88 0804 	eor.w	r8, r8, r4
   19ae0:	3b01      	subs	r3, #1
   19ae2:	ea85 0502 	eor.w	r5, r5, r2
   19ae6:	ea88 0c00 	eor.w	ip, r8, r0
   19aea:	f10e 0e20 	add.w	lr, lr, #32
   19aee:	9302      	str	r3, [sp, #8]
   19af0:	f47f af2a 	bne.w	19948 <mbedtls_internal_aes_encrypt+0x5c>
   19af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19af6:	9a06      	ldr	r2, [sp, #24]
   19af8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
   19afc:	3b01      	subs	r3, #1
   19afe:	eb02 1343 	add.w	r3, r2, r3, lsl #5
   19b02:	9306      	str	r3, [sp, #24]
   19b04:	f04f 0e00 	mov.w	lr, #0
   19b08:	9c07      	ldr	r4, [sp, #28]
   19b0a:	fa5f f08a 	uxtb.w	r0, sl
   19b0e:	fa5f f18c 	uxtb.w	r1, ip
   19b12:	0e2b      	lsrs	r3, r5, #24
   19b14:	f854 7020 	ldr.w	r7, [r4, r0, lsl #2]
   19b18:	ea4f 621c 	mov.w	r2, ip, lsr #24
   19b1c:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
   19b20:	f85b 1023 	ldr.w	r1, [fp, r3, lsl #2]
   19b24:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
   19b28:	9b06      	ldr	r3, [sp, #24]
   19b2a:	4041      	eors	r1, r0
   19b2c:	9807      	ldr	r0, [sp, #28]
   19b2e:	9103      	str	r1, [sp, #12]
   19b30:	681b      	ldr	r3, [r3, #0]
   19b32:	b2f1      	uxtb	r1, r6
   19b34:	407a      	eors	r2, r7
   19b36:	9f00      	ldr	r7, [sp, #0]
   19b38:	f3c6 2407 	ubfx	r4, r6, #8, #8
   19b3c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   19b40:	9901      	ldr	r1, [sp, #4]
   19b42:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
   19b46:	405a      	eors	r2, r3
   19b48:	f3c5 4407 	ubfx	r4, r5, #16, #8
   19b4c:	0e33      	lsrs	r3, r6, #24
   19b4e:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   19b52:	f85b 4023 	ldr.w	r4, [fp, r3, lsl #2]
   19b56:	9b01      	ldr	r3, [sp, #4]
   19b58:	f3c6 4607 	ubfx	r6, r6, #16, #8
   19b5c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
   19b60:	ea4f 631a 	mov.w	r3, sl, lsr #24
   19b64:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
   19b68:	407a      	eors	r2, r7
   19b6a:	9604      	str	r6, [sp, #16]
   19b6c:	ea82 0601 	eor.w	r6, r2, r1
   19b70:	9a07      	ldr	r2, [sp, #28]
   19b72:	4058      	eors	r0, r3
   19b74:	b2eb      	uxtb	r3, r5
   19b76:	9f06      	ldr	r7, [sp, #24]
   19b78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   19b7c:	9900      	ldr	r1, [sp, #0]
   19b7e:	f3c5 2507 	ubfx	r5, r5, #8, #8
   19b82:	ea82 0b04 	eor.w	fp, r2, r4
   19b86:	9602      	str	r6, [sp, #8]
   19b88:	9c03      	ldr	r4, [sp, #12]
   19b8a:	f851 6025 	ldr.w	r6, [r1, r5, lsl #2]
   19b8e:	68f9      	ldr	r1, [r7, #12]
   19b90:	9a00      	ldr	r2, [sp, #0]
   19b92:	f3ca 2307 	ubfx	r3, sl, #8, #8
   19b96:	4061      	eors	r1, r4
   19b98:	9c01      	ldr	r4, [sp, #4]
   19b9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   19b9e:	f3ca 4a07 	ubfx	sl, sl, #16, #8
   19ba2:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
   19ba6:	f854 402a 	ldr.w	r4, [r4, sl, lsl #2]
   19baa:	9b04      	ldr	r3, [sp, #16]
   19bac:	4051      	eors	r1, r2
   19bae:	ea81 0203 	eor.w	r2, r1, r3
   19bb2:	687b      	ldr	r3, [r7, #4]
   19bb4:	f89d 1008 	ldrb.w	r1, [sp, #8]
   19bb8:	4043      	eors	r3, r0
   19bba:	4073      	eors	r3, r6
   19bbc:	9e00      	ldr	r6, [sp, #0]
   19bbe:	f3cc 2007 	ubfx	r0, ip, #8, #8
   19bc2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   19bc6:	68be      	ldr	r6, [r7, #8]
   19bc8:	9f01      	ldr	r7, [sp, #4]
   19bca:	9103      	str	r1, [sp, #12]
   19bcc:	f3cc 4107 	ubfx	r1, ip, #16, #8
   19bd0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   19bd4:	ea8b 0606 	eor.w	r6, fp, r6
   19bd8:	4d2b      	ldr	r5, [pc, #172]	; (19c88 <mbedtls_internal_aes_encrypt+0x39c>)
   19bda:	404b      	eors	r3, r1
   19bdc:	4070      	eors	r0, r6
   19bde:	9903      	ldr	r1, [sp, #12]
   19be0:	4044      	eors	r4, r0
   19be2:	b2d8      	uxtb	r0, r3
   19be4:	5c6f      	ldrb	r7, [r5, r1]
   19be6:	5c28      	ldrb	r0, [r5, r0]
   19be8:	9906      	ldr	r1, [sp, #24]
   19bea:	9000      	str	r0, [sp, #0]
   19bec:	ea4f 6b12 	mov.w	fp, r2, lsr #24
   19bf0:	9802      	ldr	r0, [sp, #8]
   19bf2:	6909      	ldr	r1, [r1, #16]
   19bf4:	f815 b00b 	ldrb.w	fp, [r5, fp]
   19bf8:	f3c3 2a07 	ubfx	sl, r3, #8, #8
   19bfc:	f815 a00a 	ldrb.w	sl, [r5, sl]
   19c00:	4079      	eors	r1, r7
   19c02:	f3c4 4607 	ubfx	r6, r4, #16, #8
   19c06:	0e00      	lsrs	r0, r0, #24
   19c08:	f815 c000 	ldrb.w	ip, [r5, r0]
   19c0c:	5dae      	ldrb	r6, [r5, r6]
   19c0e:	f3c4 2007 	ubfx	r0, r4, #8, #8
   19c12:	ea81 6b0b 	eor.w	fp, r1, fp, lsl #24
   19c16:	5c2f      	ldrb	r7, [r5, r0]
   19c18:	ea8b 2b0a 	eor.w	fp, fp, sl, lsl #8
   19c1c:	f3c2 4007 	ubfx	r0, r2, #16, #8
   19c20:	ea8b 4b06 	eor.w	fp, fp, r6, lsl #16
   19c24:	f8cd c004 	str.w	ip, [sp, #4]
   19c28:	9e06      	ldr	r6, [sp, #24]
   19c2a:	f815 c000 	ldrb.w	ip, [r5, r0]
   19c2e:	9703      	str	r7, [sp, #12]
   19c30:	b2e1      	uxtb	r1, r4
   19c32:	0e1f      	lsrs	r7, r3, #24
   19c34:	f3c3 4307 	ubfx	r3, r3, #16, #8
   19c38:	5c68      	ldrb	r0, [r5, r1]
   19c3a:	f8cd c010 	str.w	ip, [sp, #16]
   19c3e:	9305      	str	r3, [sp, #20]
   19c40:	f3c2 2c07 	ubfx	ip, r2, #8, #8
   19c44:	6973      	ldr	r3, [r6, #20]
   19c46:	b2d1      	uxtb	r1, r2
   19c48:	9a00      	ldr	r2, [sp, #0]
   19c4a:	46f0      	mov	r8, lr
   19c4c:	4053      	eors	r3, r2
   19c4e:	9a01      	ldr	r2, [sp, #4]
   19c50:	0e24      	lsrs	r4, r4, #24
   19c52:	ea83 6302 	eor.w	r3, r3, r2, lsl #24
   19c56:	4632      	mov	r2, r6
   19c58:	69b6      	ldr	r6, [r6, #24]
   19c5a:	5def      	ldrb	r7, [r5, r7]
   19c5c:	f8d2 a01c 	ldr.w	sl, [r2, #28]
   19c60:	5c69      	ldrb	r1, [r5, r1]
   19c62:	4070      	eors	r0, r6
   19c64:	ea81 0a0a 	eor.w	sl, r1, sl
   19c68:	9902      	ldr	r1, [sp, #8]
   19c6a:	ea80 6007 	eor.w	r0, r0, r7, lsl #24
   19c6e:	f3c1 2607 	ubfx	r6, r1, #8, #8
   19c72:	f3c1 4707 	ubfx	r7, r1, #16, #8
   19c76:	9905      	ldr	r1, [sp, #20]
   19c78:	e00a      	b.n	19c90 <mbedtls_internal_aes_encrypt+0x3a4>
   19c7a:	bf00      	nop
   19c7c:	0003149c 	.word	0x0003149c
   19c80:	0003189c 	.word	0x0003189c
   19c84:	00031c9c 	.word	0x00031c9c
   19c88:	0003139c 	.word	0x0003139c
   19c8c:	0003209c 	.word	0x0003209c
   19c90:	5d2c      	ldrb	r4, [r5, r4]
   19c92:	f815 200c 	ldrb.w	r2, [r5, ip]
   19c96:	5dae      	ldrb	r6, [r5, r6]
   19c98:	5c69      	ldrb	r1, [r5, r1]
   19c9a:	5ded      	ldrb	r5, [r5, r7]
   19c9c:	9f03      	ldr	r7, [sp, #12]
   19c9e:	ea80 2002 	eor.w	r0, r0, r2, lsl #8
   19ca2:	ea83 2307 	eor.w	r3, r3, r7, lsl #8
   19ca6:	9f04      	ldr	r7, [sp, #16]
   19ca8:	46f1      	mov	r9, lr
   19caa:	ea83 4307 	eor.w	r3, r3, r7, lsl #16
   19cae:	4647      	mov	r7, r8
   19cb0:	ea80 4505 	eor.w	r5, r0, r5, lsl #16
   19cb4:	0a28      	lsrs	r0, r5, #8
   19cb6:	f365 0807 	bfi	r8, r5, #0, #8
   19cba:	f360 280f 	bfi	r8, r0, #8, #8
   19cbe:	0c28      	lsrs	r0, r5, #16
   19cc0:	f360 4817 	bfi	r8, r0, #16, #8
   19cc4:	2000      	movs	r0, #0
   19cc6:	ea8a 6a04 	eor.w	sl, sl, r4, lsl #24
   19cca:	ea8a 2a06 	eor.w	sl, sl, r6, lsl #8
   19cce:	ea8a 4101 	eor.w	r1, sl, r1, lsl #16
   19cd2:	0a1c      	lsrs	r4, r3, #8
   19cd4:	f363 0707 	bfi	r7, r3, #0, #8
   19cd8:	ea4f 261b 	mov.w	r6, fp, lsr #8
   19cdc:	0a0a      	lsrs	r2, r1, #8
   19cde:	f36b 0e07 	bfi	lr, fp, #0, #8
   19ce2:	f361 0907 	bfi	r9, r1, #0, #8
   19ce6:	f364 270f 	bfi	r7, r4, #8, #8
   19cea:	0c1c      	lsrs	r4, r3, #16
   19cec:	f366 2e0f 	bfi	lr, r6, #8, #8
   19cf0:	f362 290f 	bfi	r9, r2, #8, #8
   19cf4:	ea4f 461b 	mov.w	r6, fp, lsr #16
   19cf8:	0c0a      	lsrs	r2, r1, #16
   19cfa:	f364 4717 	bfi	r7, r4, #16, #8
   19cfe:	0e1b      	lsrs	r3, r3, #24
   19d00:	f363 671f 	bfi	r7, r3, #24, #8
   19d04:	f366 4e17 	bfi	lr, r6, #16, #8
   19d08:	9b08      	ldr	r3, [sp, #32]
   19d0a:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
   19d0e:	0e2d      	lsrs	r5, r5, #24
   19d10:	f362 4917 	bfi	r9, r2, #16, #8
   19d14:	0e09      	lsrs	r1, r1, #24
   19d16:	f36b 6e1f 	bfi	lr, fp, #24, #8
   19d1a:	f365 681f 	bfi	r8, r5, #24, #8
   19d1e:	f361 691f 	bfi	r9, r1, #24, #8
   19d22:	f8c3 e000 	str.w	lr, [r3]
   19d26:	605f      	str	r7, [r3, #4]
   19d28:	f8c3 8008 	str.w	r8, [r3, #8]
   19d2c:	f8c3 900c 	str.w	r9, [r3, #12]
   19d30:	b00b      	add	sp, #44	; 0x2c
   19d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d36:	4b04      	ldr	r3, [pc, #16]	; (19d48 <mbedtls_internal_aes_encrypt+0x45c>)
   19d38:	f8df b018 	ldr.w	fp, [pc, #24]	; 19d54 <mbedtls_internal_aes_encrypt+0x468>
   19d3c:	9307      	str	r3, [sp, #28]
   19d3e:	4b03      	ldr	r3, [pc, #12]	; (19d4c <mbedtls_internal_aes_encrypt+0x460>)
   19d40:	9300      	str	r3, [sp, #0]
   19d42:	4b03      	ldr	r3, [pc, #12]	; (19d50 <mbedtls_internal_aes_encrypt+0x464>)
   19d44:	9301      	str	r3, [sp, #4]
   19d46:	e6dd      	b.n	19b04 <mbedtls_internal_aes_encrypt+0x218>
   19d48:	0003149c 	.word	0x0003149c
   19d4c:	0003189c 	.word	0x0003189c
   19d50:	00031c9c 	.word	0x00031c9c
   19d54:	0003209c 	.word	0x0003209c

00019d58 <mbedtls_internal_aes_decrypt>:
   19d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d5c:	e9d0 3400 	ldrd	r3, r4, [r0]
   19d60:	f8d1 9000 	ldr.w	r9, [r1]
   19d64:	6826      	ldr	r6, [r4, #0]
   19d66:	b08b      	sub	sp, #44	; 0x2c
   19d68:	105b      	asrs	r3, r3, #1
   19d6a:	1e58      	subs	r0, r3, #1
   19d6c:	9309      	str	r3, [sp, #36]	; 0x24
   19d6e:	ea89 0306 	eor.w	r3, r9, r6
   19d72:	9304      	str	r3, [sp, #16]
   19d74:	688b      	ldr	r3, [r1, #8]
   19d76:	f8d1 8004 	ldr.w	r8, [r1, #4]
   19d7a:	68cd      	ldr	r5, [r1, #12]
   19d7c:	9208      	str	r2, [sp, #32]
   19d7e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   19d82:	4053      	eors	r3, r2
   19d84:	f104 0210 	add.w	r2, r4, #16
   19d88:	9207      	str	r2, [sp, #28]
   19d8a:	4ad4      	ldr	r2, [pc, #848]	; (1a0dc <mbedtls_internal_aes_decrypt+0x384>)
   19d8c:	6867      	ldr	r7, [r4, #4]
   19d8e:	9201      	str	r2, [sp, #4]
   19d90:	4ad3      	ldr	r2, [pc, #844]	; (1a0e0 <mbedtls_internal_aes_decrypt+0x388>)
   19d92:	2800      	cmp	r0, #0
   19d94:	9003      	str	r0, [sp, #12]
   19d96:	ea88 0807 	eor.w	r8, r8, r7
   19d9a:	ea85 0501 	eor.w	r5, r5, r1
   19d9e:	f8df b348 	ldr.w	fp, [pc, #840]	; 1a0e8 <mbedtls_internal_aes_decrypt+0x390>
   19da2:	9200      	str	r2, [sp, #0]
   19da4:	f8df 9344 	ldr.w	r9, [pc, #836]	; 1a0ec <mbedtls_internal_aes_decrypt+0x394>
   19da8:	f340 80e9 	ble.w	19f7e <mbedtls_internal_aes_decrypt+0x226>
   19dac:	46aa      	mov	sl, r5
   19dae:	9a04      	ldr	r2, [sp, #16]
   19db0:	f104 0c30 	add.w	ip, r4, #48	; 0x30
   19db4:	9302      	str	r3, [sp, #8]
   19db6:	9b01      	ldr	r3, [sp, #4]
   19db8:	f89d 5008 	ldrb.w	r5, [sp, #8]
   19dbc:	b2d1      	uxtb	r1, r2
   19dbe:	fa5f f688 	uxtb.w	r6, r8
   19dc2:	fa5f f48a 	uxtb.w	r4, sl
   19dc6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   19dca:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
   19dce:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   19dd2:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
   19dd6:	f85c 3c20 	ldr.w	r3, [ip, #-32]
   19dda:	f85c 6c1c 	ldr.w	r6, [ip, #-28]
   19dde:	ea80 0e03 	eor.w	lr, r0, r3
   19de2:	9b02      	ldr	r3, [sp, #8]
   19de4:	4077      	eors	r7, r6
   19de6:	f85c 6c14 	ldr.w	r6, [ip, #-20]
   19dea:	0e18      	lsrs	r0, r3, #24
   19dec:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
   19df0:	ea4f 6118 	mov.w	r1, r8, lsr #24
   19df4:	4066      	eors	r6, r4
   19df6:	0e14      	lsrs	r4, r2, #24
   19df8:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
   19dfc:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
   19e00:	9b00      	ldr	r3, [sp, #0]
   19e02:	9505      	str	r5, [sp, #20]
   19e04:	4047      	eors	r7, r0
   19e06:	ea8e 0e01 	eor.w	lr, lr, r1
   19e0a:	9704      	str	r7, [sp, #16]
   19e0c:	ea4f 651a 	mov.w	r5, sl, lsr #24
   19e10:	9f05      	ldr	r7, [sp, #20]
   19e12:	f3ca 2107 	ubfx	r1, sl, #8, #8
   19e16:	f3c2 2007 	ubfx	r0, r2, #8, #8
   19e1a:	4066      	eors	r6, r4
   19e1c:	f85c 4c18 	ldr.w	r4, [ip, #-24]
   19e20:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   19e24:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   19e28:	f85b 5025 	ldr.w	r5, [fp, r5, lsl #2]
   19e2c:	9b02      	ldr	r3, [sp, #8]
   19e2e:	407c      	eors	r4, r7
   19e30:	9f00      	ldr	r7, [sp, #0]
   19e32:	4065      	eors	r5, r4
   19e34:	ea8e 0101 	eor.w	r1, lr, r1
   19e38:	f3c3 2407 	ubfx	r4, r3, #8, #8
   19e3c:	f3c8 2e07 	ubfx	lr, r8, #8, #8
   19e40:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   19e44:	f857 e02e 	ldr.w	lr, [r7, lr, lsl #2]
   19e48:	f3ca 4a07 	ubfx	sl, sl, #16, #8
   19e4c:	9f04      	ldr	r7, [sp, #16]
   19e4e:	f3c3 4307 	ubfx	r3, r3, #16, #8
   19e52:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
   19e56:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   19e5a:	f3c2 4207 	ubfx	r2, r2, #16, #8
   19e5e:	4078      	eors	r0, r7
   19e60:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
   19e64:	4059      	eors	r1, r3
   19e66:	ea85 050e 	eor.w	r5, r5, lr
   19e6a:	ea80 030a 	eor.w	r3, r0, sl
   19e6e:	406a      	eors	r2, r5
   19e70:	461d      	mov	r5, r3
   19e72:	f3c8 4807 	ubfx	r8, r8, #16, #8
   19e76:	f859 8028 	ldr.w	r8, [r9, r8, lsl #2]
   19e7a:	9502      	str	r5, [sp, #8]
   19e7c:	4066      	eors	r6, r4
   19e7e:	f89d 5008 	ldrb.w	r5, [sp, #8]
   19e82:	9801      	ldr	r0, [sp, #4]
   19e84:	ea86 0608 	eor.w	r6, r6, r8
   19e88:	fa5f f881 	uxtb.w	r8, r1
   19e8c:	f850 8028 	ldr.w	r8, [r0, r8, lsl #2]
   19e90:	9800      	ldr	r0, [sp, #0]
   19e92:	f3c6 2707 	ubfx	r7, r6, #8, #8
   19e96:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
   19e9a:	9801      	ldr	r0, [sp, #4]
   19e9c:	0e14      	lsrs	r4, r2, #24
   19e9e:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
   19ea2:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
   19ea6:	9800      	ldr	r0, [sp, #0]
   19ea8:	f3c1 2a07 	ubfx	sl, r1, #8, #8
   19eac:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
   19eb0:	ea85 0a04 	eor.w	sl, r5, r4
   19eb4:	f3c6 4407 	ubfx	r4, r6, #16, #8
   19eb8:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
   19ebc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
   19ec0:	f85b e02e 	ldr.w	lr, [fp, lr, lsl #2]
   19ec4:	f3c2 2507 	ubfx	r5, r2, #8, #8
   19ec8:	f3c2 4307 	ubfx	r3, r2, #16, #8
   19ecc:	9405      	str	r4, [sp, #20]
   19ece:	b2d4      	uxtb	r4, r2
   19ed0:	f85c 2c10 	ldr.w	r2, [ip, #-16]
   19ed4:	ea88 0e0e 	eor.w	lr, r8, lr
   19ed8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   19edc:	ea8e 0202 	eor.w	r2, lr, r2
   19ee0:	407a      	eors	r2, r7
   19ee2:	9004      	str	r0, [sp, #16]
   19ee4:	405a      	eors	r2, r3
   19ee6:	9801      	ldr	r0, [sp, #4]
   19ee8:	f85c 3c08 	ldr.w	r3, [ip, #-8]
   19eec:	ea4f 6811 	mov.w	r8, r1, lsr #24
   19ef0:	ea4f 6e16 	mov.w	lr, r6, lsr #24
   19ef4:	b2f6      	uxtb	r6, r6
   19ef6:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   19efa:	9306      	str	r3, [sp, #24]
   19efc:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
   19f00:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   19f04:	9800      	ldr	r0, [sp, #0]
   19f06:	f85b e02e 	ldr.w	lr, [fp, lr, lsl #2]
   19f0a:	f850 8025 	ldr.w	r8, [r0, r5, lsl #2]
   19f0e:	405e      	eors	r6, r3
   19f10:	9d02      	ldr	r5, [sp, #8]
   19f12:	9b06      	ldr	r3, [sp, #24]
   19f14:	ea84 0e0e 	eor.w	lr, r4, lr
   19f18:	ea8e 0403 	eor.w	r4, lr, r3
   19f1c:	f3c5 2307 	ubfx	r3, r5, #8, #8
   19f20:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   19f24:	f3c1 4107 	ubfx	r1, r1, #16, #8
   19f28:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   19f2c:	f3c5 4007 	ubfx	r0, r5, #16, #8
   19f30:	4063      	eors	r3, r4
   19f32:	f85c 5c04 	ldr.w	r5, [ip, #-4]
   19f36:	f85c 7c0c 	ldr.w	r7, [ip, #-12]
   19f3a:	404b      	eors	r3, r1
   19f3c:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
   19f40:	4075      	eors	r5, r6
   19f42:	9e04      	ldr	r6, [sp, #16]
   19f44:	9c05      	ldr	r4, [sp, #20]
   19f46:	9302      	str	r3, [sp, #8]
   19f48:	9b03      	ldr	r3, [sp, #12]
   19f4a:	ea8a 0707 	eor.w	r7, sl, r7
   19f4e:	ea85 0508 	eor.w	r5, r5, r8
   19f52:	4077      	eors	r7, r6
   19f54:	3b01      	subs	r3, #1
   19f56:	ea87 0804 	eor.w	r8, r7, r4
   19f5a:	ea85 0a00 	eor.w	sl, r5, r0
   19f5e:	f10c 0c20 	add.w	ip, ip, #32
   19f62:	9303      	str	r3, [sp, #12]
   19f64:	f47f af27 	bne.w	19db6 <mbedtls_internal_aes_decrypt+0x5e>
   19f68:	4655      	mov	r5, sl
   19f6a:	9204      	str	r2, [sp, #16]
   19f6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19f6e:	9907      	ldr	r1, [sp, #28]
   19f70:	f102 6200 	add.w	r2, r2, #134217728	; 0x8000000
   19f74:	3a01      	subs	r2, #1
   19f76:	eb01 1242 	add.w	r2, r1, r2, lsl #5
   19f7a:	9b02      	ldr	r3, [sp, #8]
   19f7c:	9207      	str	r2, [sp, #28]
   19f7e:	9e01      	ldr	r6, [sp, #4]
   19f80:	f89d 4010 	ldrb.w	r4, [sp, #16]
   19f84:	ea4f 6118 	mov.w	r1, r8, lsr #24
   19f88:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
   19f8c:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
   19f90:	fa5f f088 	uxtb.w	r0, r8
   19f94:	0e1a      	lsrs	r2, r3, #24
   19f96:	4079      	eors	r1, r7
   19f98:	9f00      	ldr	r7, [sp, #0]
   19f9a:	f856 4020 	ldr.w	r4, [r6, r0, lsl #2]
   19f9e:	f85b 0022 	ldr.w	r0, [fp, r2, lsl #2]
   19fa2:	f3c5 2607 	ubfx	r6, r5, #8, #8
   19fa6:	f857 7026 	ldr.w	r7, [r7, r6, lsl #2]
   19faa:	f3c3 4607 	ubfx	r6, r3, #16, #8
   19fae:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   19fb2:	4060      	eors	r0, r4
   19fb4:	9c01      	ldr	r4, [sp, #4]
   19fb6:	9005      	str	r0, [sp, #20]
   19fb8:	b2e8      	uxtb	r0, r5
   19fba:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   19fbe:	4634      	mov	r4, r6
   19fc0:	9a07      	ldr	r2, [sp, #28]
   19fc2:	f04f 0c00 	mov.w	ip, #0
   19fc6:	6812      	ldr	r2, [r2, #0]
   19fc8:	46e2      	mov	sl, ip
   19fca:	4051      	eors	r1, r2
   19fcc:	4079      	eors	r1, r7
   19fce:	9f04      	ldr	r7, [sp, #16]
   19fd0:	0e2a      	lsrs	r2, r5, #24
   19fd2:	f85b 6022 	ldr.w	r6, [fp, r2, lsl #2]
   19fd6:	0e3a      	lsrs	r2, r7, #24
   19fd8:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
   19fdc:	4061      	eors	r1, r4
   19fde:	9c01      	ldr	r4, [sp, #4]
   19fe0:	9102      	str	r1, [sp, #8]
   19fe2:	b2d9      	uxtb	r1, r3
   19fe4:	4042      	eors	r2, r0
   19fe6:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
   19fea:	9c00      	ldr	r4, [sp, #0]
   19fec:	ea80 0b06 	eor.w	fp, r0, r6
   19ff0:	463e      	mov	r6, r7
   19ff2:	f3c3 2307 	ubfx	r3, r3, #8, #8
   19ff6:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
   19ffa:	9b07      	ldr	r3, [sp, #28]
   19ffc:	f3c5 4507 	ubfx	r5, r5, #16, #8
   1a000:	6858      	ldr	r0, [r3, #4]
   1a002:	9b05      	ldr	r3, [sp, #20]
   1a004:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
   1a008:	4058      	eors	r0, r3
   1a00a:	f3c7 2307 	ubfx	r3, r7, #8, #8
   1a00e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
   1a012:	9506      	str	r5, [sp, #24]
   1a014:	f3c6 4607 	ubfx	r6, r6, #16, #8
   1a018:	4058      	eors	r0, r3
   1a01a:	9b06      	ldr	r3, [sp, #24]
   1a01c:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
   1a020:	9e07      	ldr	r6, [sp, #28]
   1a022:	4058      	eors	r0, r3
   1a024:	9001      	str	r0, [sp, #4]
   1a026:	68f3      	ldr	r3, [r6, #12]
   1a028:	9800      	ldr	r0, [sp, #0]
   1a02a:	4053      	eors	r3, r2
   1a02c:	4059      	eors	r1, r3
   1a02e:	f3c8 4207 	ubfx	r2, r8, #16, #8
   1a032:	f3c8 2307 	ubfx	r3, r8, #8, #8
   1a036:	4d2b      	ldr	r5, [pc, #172]	; (1a0e4 <mbedtls_internal_aes_decrypt+0x38c>)
   1a038:	f89d 4008 	ldrb.w	r4, [sp, #8]
   1a03c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   1a040:	68b6      	ldr	r6, [r6, #8]
   1a042:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
   1a046:	ea8b 0606 	eor.w	r6, fp, r6
   1a04a:	9a01      	ldr	r2, [sp, #4]
   1a04c:	404b      	eors	r3, r1
   1a04e:	5d29      	ldrb	r1, [r5, r4]
   1a050:	9c07      	ldr	r4, [sp, #28]
   1a052:	4070      	eors	r0, r6
   1a054:	4078      	eors	r0, r7
   1a056:	4690      	mov	r8, r2
   1a058:	ea4f 6b12 	mov.w	fp, r2, lsr #24
   1a05c:	b2d7      	uxtb	r7, r2
   1a05e:	6922      	ldr	r2, [r4, #16]
   1a060:	f3c3 2607 	ubfx	r6, r3, #8, #8
   1a064:	404a      	eors	r2, r1
   1a066:	9902      	ldr	r1, [sp, #8]
   1a068:	f815 400b 	ldrb.w	r4, [r5, fp]
   1a06c:	f3c1 2107 	ubfx	r1, r1, #8, #8
   1a070:	f815 b001 	ldrb.w	fp, [r5, r1]
   1a074:	5dae      	ldrb	r6, [r5, r6]
   1a076:	f3c3 4107 	ubfx	r1, r3, #16, #8
   1a07a:	f3c0 4907 	ubfx	r9, r0, #16, #8
   1a07e:	f815 9009 	ldrb.w	r9, [r5, r9]
   1a082:	5def      	ldrb	r7, [r5, r7]
   1a084:	f8cd b010 	str.w	fp, [sp, #16]
   1a088:	f815 b001 	ldrb.w	fp, [r5, r1]
   1a08c:	ea82 6104 	eor.w	r1, r2, r4, lsl #24
   1a090:	b2c2      	uxtb	r2, r0
   1a092:	5cac      	ldrb	r4, [r5, r2]
   1a094:	ea81 2106 	eor.w	r1, r1, r6, lsl #8
   1a098:	9a07      	ldr	r2, [sp, #28]
   1a09a:	9701      	str	r7, [sp, #4]
   1a09c:	ea81 4109 	eor.w	r1, r1, r9, lsl #16
   1a0a0:	6956      	ldr	r6, [r2, #20]
   1a0a2:	9100      	str	r1, [sp, #0]
   1a0a4:	9901      	ldr	r1, [sp, #4]
   1a0a6:	0e07      	lsrs	r7, r0, #24
   1a0a8:	404e      	eors	r6, r1
   1a0aa:	4611      	mov	r1, r2
   1a0ac:	5def      	ldrb	r7, [r5, r7]
   1a0ae:	f8cd b014 	str.w	fp, [sp, #20]
   1a0b2:	6992      	ldr	r2, [r2, #24]
   1a0b4:	ea4f 6b13 	mov.w	fp, r3, lsr #24
   1a0b8:	f8d1 901c 	ldr.w	r9, [r1, #28]
   1a0bc:	ea86 6707 	eor.w	r7, r6, r7, lsl #24
   1a0c0:	9902      	ldr	r1, [sp, #8]
   1a0c2:	f815 600b 	ldrb.w	r6, [r5, fp]
   1a0c6:	b2db      	uxtb	r3, r3
   1a0c8:	5ceb      	ldrb	r3, [r5, r3]
   1a0ca:	f3c0 2007 	ubfx	r0, r0, #8, #8
   1a0ce:	4062      	eors	r2, r4
   1a0d0:	f815 b000 	ldrb.w	fp, [r5, r0]
   1a0d4:	ea82 6206 	eor.w	r2, r2, r6, lsl #24
   1a0d8:	e00a      	b.n	1a0f0 <mbedtls_internal_aes_decrypt+0x398>
   1a0da:	bf00      	nop
   1a0dc:	000325c4 	.word	0x000325c4
   1a0e0:	000329c4 	.word	0x000329c4
   1a0e4:	000324c4 	.word	0x000324c4
   1a0e8:	000331c4 	.word	0x000331c4
   1a0ec:	00032dc4 	.word	0x00032dc4
   1a0f0:	0e08      	lsrs	r0, r1, #24
   1a0f2:	f3c8 2607 	ubfx	r6, r8, #8, #8
   1a0f6:	5c28      	ldrb	r0, [r5, r0]
   1a0f8:	f3c1 4407 	ubfx	r4, r1, #16, #8
   1a0fc:	5dae      	ldrb	r6, [r5, r6]
   1a0fe:	ea83 0309 	eor.w	r3, r3, r9
   1a102:	f3c8 4907 	ubfx	r9, r8, #16, #8
   1a106:	f815 9009 	ldrb.w	r9, [r5, r9]
   1a10a:	5d2d      	ldrb	r5, [r5, r4]
   1a10c:	ea82 2206 	eor.w	r2, r2, r6, lsl #8
   1a110:	ea82 4505 	eor.w	r5, r2, r5, lsl #16
   1a114:	9a00      	ldr	r2, [sp, #0]
   1a116:	46e6      	mov	lr, ip
   1a118:	0a16      	lsrs	r6, r2, #8
   1a11a:	f362 0c07 	bfi	ip, r2, #0, #8
   1a11e:	2200      	movs	r2, #0
   1a120:	9904      	ldr	r1, [sp, #16]
   1a122:	ea83 6300 	eor.w	r3, r3, r0, lsl #24
   1a126:	ea87 2701 	eor.w	r7, r7, r1, lsl #8
   1a12a:	9905      	ldr	r1, [sp, #20]
   1a12c:	ea83 230b 	eor.w	r3, r3, fp, lsl #8
   1a130:	ea87 4701 	eor.w	r7, r7, r1, lsl #16
   1a134:	4611      	mov	r1, r2
   1a136:	ea83 4309 	eor.w	r3, r3, r9, lsl #16
   1a13a:	0a1a      	lsrs	r2, r3, #8
   1a13c:	f363 0107 	bfi	r1, r3, #0, #8
   1a140:	0a28      	lsrs	r0, r5, #8
   1a142:	f362 210f 	bfi	r1, r2, #8, #8
   1a146:	f365 0e07 	bfi	lr, r5, #0, #8
   1a14a:	9103      	str	r1, [sp, #12]
   1a14c:	f360 2e0f 	bfi	lr, r0, #8, #8
   1a150:	0c28      	lsrs	r0, r5, #16
   1a152:	f360 4e17 	bfi	lr, r0, #16, #8
   1a156:	9803      	ldr	r0, [sp, #12]
   1a158:	0c1a      	lsrs	r2, r3, #16
   1a15a:	f362 4017 	bfi	r0, r2, #16, #8
   1a15e:	0e1b      	lsrs	r3, r3, #24
   1a160:	f363 601f 	bfi	r0, r3, #24, #8
   1a164:	9b08      	ldr	r3, [sp, #32]
   1a166:	f366 2c0f 	bfi	ip, r6, #8, #8
   1a16a:	60d8      	str	r0, [r3, #12]
   1a16c:	2000      	movs	r0, #0
   1a16e:	9e00      	ldr	r6, [sp, #0]
   1a170:	0a3c      	lsrs	r4, r7, #8
   1a172:	f367 0a07 	bfi	sl, r7, #0, #8
   1a176:	9900      	ldr	r1, [sp, #0]
   1a178:	0c36      	lsrs	r6, r6, #16
   1a17a:	f364 2a0f 	bfi	sl, r4, #8, #8
   1a17e:	0c3c      	lsrs	r4, r7, #16
   1a180:	f366 4c17 	bfi	ip, r6, #16, #8
   1a184:	0e09      	lsrs	r1, r1, #24
   1a186:	f364 4a17 	bfi	sl, r4, #16, #8
   1a18a:	0e3f      	lsrs	r7, r7, #24
   1a18c:	0e2d      	lsrs	r5, r5, #24
   1a18e:	f361 6c1f 	bfi	ip, r1, #24, #8
   1a192:	f367 6a1f 	bfi	sl, r7, #24, #8
   1a196:	f365 6e1f 	bfi	lr, r5, #24, #8
   1a19a:	f8c3 c000 	str.w	ip, [r3]
   1a19e:	f8c3 a004 	str.w	sl, [r3, #4]
   1a1a2:	f8c3 e008 	str.w	lr, [r3, #8]
   1a1a6:	b00b      	add	sp, #44	; 0x2c
   1a1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a1ac <mbedtls_aes_crypt_ecb>:
   1a1ac:	b410      	push	{r4}
   1a1ae:	4614      	mov	r4, r2
   1a1b0:	2901      	cmp	r1, #1
   1a1b2:	461a      	mov	r2, r3
   1a1b4:	4621      	mov	r1, r4
   1a1b6:	d003      	beq.n	1a1c0 <mbedtls_aes_crypt_ecb+0x14>
   1a1b8:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a1bc:	f7ff bdcc 	b.w	19d58 <mbedtls_internal_aes_decrypt>
   1a1c0:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a1c4:	f7ff bb92 	b.w	198ec <mbedtls_internal_aes_encrypt>

0001a1c8 <mbedtls_asn1_write_len.part.0>:
   1a1c8:	b430      	push	{r4, r5}
   1a1ca:	4603      	mov	r3, r0
   1a1cc:	6800      	ldr	r0, [r0, #0]
   1a1ce:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   1a1d2:	eba0 0101 	sub.w	r1, r0, r1
   1a1d6:	d214      	bcs.n	1a202 <mbedtls_asn1_write_len.part.0+0x3a>
   1a1d8:	2902      	cmp	r1, #2
   1a1da:	dd51      	ble.n	1a280 <mbedtls_asn1_write_len.part.0+0xb8>
   1a1dc:	1e41      	subs	r1, r0, #1
   1a1de:	6019      	str	r1, [r3, #0]
   1a1e0:	f800 2c01 	strb.w	r2, [r0, #-1]
   1a1e4:	6819      	ldr	r1, [r3, #0]
   1a1e6:	2482      	movs	r4, #130	; 0x82
   1a1e8:	1e48      	subs	r0, r1, #1
   1a1ea:	6018      	str	r0, [r3, #0]
   1a1ec:	2003      	movs	r0, #3
   1a1ee:	0a12      	lsrs	r2, r2, #8
   1a1f0:	f801 2c01 	strb.w	r2, [r1, #-1]
   1a1f4:	681a      	ldr	r2, [r3, #0]
   1a1f6:	1e51      	subs	r1, r2, #1
   1a1f8:	6019      	str	r1, [r3, #0]
   1a1fa:	f802 4c01 	strb.w	r4, [r2, #-1]
   1a1fe:	bc30      	pop	{r4, r5}
   1a200:	4770      	bx	lr
   1a202:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1a206:	d21a      	bcs.n	1a23e <mbedtls_asn1_write_len.part.0+0x76>
   1a208:	2903      	cmp	r1, #3
   1a20a:	dd39      	ble.n	1a280 <mbedtls_asn1_write_len.part.0+0xb8>
   1a20c:	2483      	movs	r4, #131	; 0x83
   1a20e:	1e41      	subs	r1, r0, #1
   1a210:	6019      	str	r1, [r3, #0]
   1a212:	f800 2c01 	strb.w	r2, [r0, #-1]
   1a216:	6819      	ldr	r1, [r3, #0]
   1a218:	0a10      	lsrs	r0, r2, #8
   1a21a:	1e4d      	subs	r5, r1, #1
   1a21c:	601d      	str	r5, [r3, #0]
   1a21e:	f801 0c01 	strb.w	r0, [r1, #-1]
   1a222:	6819      	ldr	r1, [r3, #0]
   1a224:	0c12      	lsrs	r2, r2, #16
   1a226:	1e48      	subs	r0, r1, #1
   1a228:	6018      	str	r0, [r3, #0]
   1a22a:	f801 2c01 	strb.w	r2, [r1, #-1]
   1a22e:	681a      	ldr	r2, [r3, #0]
   1a230:	2004      	movs	r0, #4
   1a232:	1e51      	subs	r1, r2, #1
   1a234:	6019      	str	r1, [r3, #0]
   1a236:	f802 4c01 	strb.w	r4, [r2, #-1]
   1a23a:	bc30      	pop	{r4, r5}
   1a23c:	4770      	bx	lr
   1a23e:	2904      	cmp	r1, #4
   1a240:	dd1e      	ble.n	1a280 <mbedtls_asn1_write_len.part.0+0xb8>
   1a242:	2484      	movs	r4, #132	; 0x84
   1a244:	1e41      	subs	r1, r0, #1
   1a246:	6019      	str	r1, [r3, #0]
   1a248:	f800 2c01 	strb.w	r2, [r0, #-1]
   1a24c:	6819      	ldr	r1, [r3, #0]
   1a24e:	0a10      	lsrs	r0, r2, #8
   1a250:	1e4d      	subs	r5, r1, #1
   1a252:	601d      	str	r5, [r3, #0]
   1a254:	f801 0c01 	strb.w	r0, [r1, #-1]
   1a258:	6819      	ldr	r1, [r3, #0]
   1a25a:	0c10      	lsrs	r0, r2, #16
   1a25c:	1e4d      	subs	r5, r1, #1
   1a25e:	601d      	str	r5, [r3, #0]
   1a260:	f801 0c01 	strb.w	r0, [r1, #-1]
   1a264:	6819      	ldr	r1, [r3, #0]
   1a266:	0e12      	lsrs	r2, r2, #24
   1a268:	1e48      	subs	r0, r1, #1
   1a26a:	6018      	str	r0, [r3, #0]
   1a26c:	f801 2c01 	strb.w	r2, [r1, #-1]
   1a270:	681a      	ldr	r2, [r3, #0]
   1a272:	2005      	movs	r0, #5
   1a274:	1e51      	subs	r1, r2, #1
   1a276:	6019      	str	r1, [r3, #0]
   1a278:	f802 4c01 	strb.w	r4, [r2, #-1]
   1a27c:	bc30      	pop	{r4, r5}
   1a27e:	4770      	bx	lr
   1a280:	f06f 006b 	mvn.w	r0, #107	; 0x6b
   1a284:	e7bb      	b.n	1a1fe <mbedtls_asn1_write_len.part.0+0x36>
   1a286:	bf00      	nop

0001a288 <mbedtls_asn1_write_len>:
   1a288:	b430      	push	{r4, r5}
   1a28a:	6804      	ldr	r4, [r0, #0]
   1a28c:	2a7f      	cmp	r2, #127	; 0x7f
   1a28e:	4603      	mov	r3, r0
   1a290:	eba4 0101 	sub.w	r1, r4, r1
   1a294:	d808      	bhi.n	1a2a8 <mbedtls_asn1_write_len+0x20>
   1a296:	2900      	cmp	r1, #0
   1a298:	dd6c      	ble.n	1a374 <mbedtls_asn1_write_len+0xec>
   1a29a:	1e61      	subs	r1, r4, #1
   1a29c:	6001      	str	r1, [r0, #0]
   1a29e:	2001      	movs	r0, #1
   1a2a0:	f804 2c01 	strb.w	r2, [r4, #-1]
   1a2a4:	bc30      	pop	{r4, r5}
   1a2a6:	4770      	bx	lr
   1a2a8:	2aff      	cmp	r2, #255	; 0xff
   1a2aa:	d80e      	bhi.n	1a2ca <mbedtls_asn1_write_len+0x42>
   1a2ac:	2901      	cmp	r1, #1
   1a2ae:	dd61      	ble.n	1a374 <mbedtls_asn1_write_len+0xec>
   1a2b0:	2181      	movs	r1, #129	; 0x81
   1a2b2:	1e60      	subs	r0, r4, #1
   1a2b4:	6018      	str	r0, [r3, #0]
   1a2b6:	f804 2c01 	strb.w	r2, [r4, #-1]
   1a2ba:	681a      	ldr	r2, [r3, #0]
   1a2bc:	2002      	movs	r0, #2
   1a2be:	1e54      	subs	r4, r2, #1
   1a2c0:	601c      	str	r4, [r3, #0]
   1a2c2:	f802 1c01 	strb.w	r1, [r2, #-1]
   1a2c6:	bc30      	pop	{r4, r5}
   1a2c8:	4770      	bx	lr
   1a2ca:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   1a2ce:	d31c      	bcc.n	1a30a <mbedtls_asn1_write_len+0x82>
   1a2d0:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1a2d4:	d22e      	bcs.n	1a334 <mbedtls_asn1_write_len+0xac>
   1a2d6:	2903      	cmp	r1, #3
   1a2d8:	dd4c      	ble.n	1a374 <mbedtls_asn1_write_len+0xec>
   1a2da:	2583      	movs	r5, #131	; 0x83
   1a2dc:	1e61      	subs	r1, r4, #1
   1a2de:	6001      	str	r1, [r0, #0]
   1a2e0:	f804 2c01 	strb.w	r2, [r4, #-1]
   1a2e4:	6801      	ldr	r1, [r0, #0]
   1a2e6:	0a10      	lsrs	r0, r2, #8
   1a2e8:	1e4c      	subs	r4, r1, #1
   1a2ea:	601c      	str	r4, [r3, #0]
   1a2ec:	f801 0c01 	strb.w	r0, [r1, #-1]
   1a2f0:	6819      	ldr	r1, [r3, #0]
   1a2f2:	0c12      	lsrs	r2, r2, #16
   1a2f4:	1e48      	subs	r0, r1, #1
   1a2f6:	6018      	str	r0, [r3, #0]
   1a2f8:	f801 2c01 	strb.w	r2, [r1, #-1]
   1a2fc:	681a      	ldr	r2, [r3, #0]
   1a2fe:	2004      	movs	r0, #4
   1a300:	1e51      	subs	r1, r2, #1
   1a302:	6019      	str	r1, [r3, #0]
   1a304:	f802 5c01 	strb.w	r5, [r2, #-1]
   1a308:	e7cc      	b.n	1a2a4 <mbedtls_asn1_write_len+0x1c>
   1a30a:	2902      	cmp	r1, #2
   1a30c:	dd32      	ble.n	1a374 <mbedtls_asn1_write_len+0xec>
   1a30e:	2582      	movs	r5, #130	; 0x82
   1a310:	1e61      	subs	r1, r4, #1
   1a312:	6001      	str	r1, [r0, #0]
   1a314:	f804 2c01 	strb.w	r2, [r4, #-1]
   1a318:	6801      	ldr	r1, [r0, #0]
   1a31a:	0a12      	lsrs	r2, r2, #8
   1a31c:	1e48      	subs	r0, r1, #1
   1a31e:	6018      	str	r0, [r3, #0]
   1a320:	f801 2c01 	strb.w	r2, [r1, #-1]
   1a324:	681a      	ldr	r2, [r3, #0]
   1a326:	2003      	movs	r0, #3
   1a328:	1e51      	subs	r1, r2, #1
   1a32a:	6019      	str	r1, [r3, #0]
   1a32c:	f802 5c01 	strb.w	r5, [r2, #-1]
   1a330:	bc30      	pop	{r4, r5}
   1a332:	4770      	bx	lr
   1a334:	2904      	cmp	r1, #4
   1a336:	dd1d      	ble.n	1a374 <mbedtls_asn1_write_len+0xec>
   1a338:	2584      	movs	r5, #132	; 0x84
   1a33a:	1e61      	subs	r1, r4, #1
   1a33c:	6001      	str	r1, [r0, #0]
   1a33e:	f804 2c01 	strb.w	r2, [r4, #-1]
   1a342:	6801      	ldr	r1, [r0, #0]
   1a344:	0a10      	lsrs	r0, r2, #8
   1a346:	1e4c      	subs	r4, r1, #1
   1a348:	601c      	str	r4, [r3, #0]
   1a34a:	f801 0c01 	strb.w	r0, [r1, #-1]
   1a34e:	6819      	ldr	r1, [r3, #0]
   1a350:	0c10      	lsrs	r0, r2, #16
   1a352:	1e4c      	subs	r4, r1, #1
   1a354:	601c      	str	r4, [r3, #0]
   1a356:	f801 0c01 	strb.w	r0, [r1, #-1]
   1a35a:	6819      	ldr	r1, [r3, #0]
   1a35c:	0e12      	lsrs	r2, r2, #24
   1a35e:	1e48      	subs	r0, r1, #1
   1a360:	6018      	str	r0, [r3, #0]
   1a362:	f801 2c01 	strb.w	r2, [r1, #-1]
   1a366:	681a      	ldr	r2, [r3, #0]
   1a368:	2005      	movs	r0, #5
   1a36a:	1e51      	subs	r1, r2, #1
   1a36c:	6019      	str	r1, [r3, #0]
   1a36e:	f802 5c01 	strb.w	r5, [r2, #-1]
   1a372:	e797      	b.n	1a2a4 <mbedtls_asn1_write_len+0x1c>
   1a374:	f06f 006b 	mvn.w	r0, #107	; 0x6b
   1a378:	e794      	b.n	1a2a4 <mbedtls_asn1_write_len+0x1c>
   1a37a:	bf00      	nop

0001a37c <mbedtls_asn1_write_tag>:
   1a37c:	6803      	ldr	r3, [r0, #0]
   1a37e:	1a59      	subs	r1, r3, r1
   1a380:	2900      	cmp	r1, #0
   1a382:	dd05      	ble.n	1a390 <mbedtls_asn1_write_tag+0x14>
   1a384:	1e59      	subs	r1, r3, #1
   1a386:	6001      	str	r1, [r0, #0]
   1a388:	2001      	movs	r0, #1
   1a38a:	f803 2c01 	strb.w	r2, [r3, #-1]
   1a38e:	4770      	bx	lr
   1a390:	f06f 006b 	mvn.w	r0, #107	; 0x6b
   1a394:	4770      	bx	lr
   1a396:	bf00      	nop

0001a398 <mbedtls_asn1_write_oid>:
   1a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a39a:	6805      	ldr	r5, [r0, #0]
   1a39c:	42a9      	cmp	r1, r5
   1a39e:	d83f      	bhi.n	1a420 <mbedtls_asn1_write_oid+0x88>
   1a3a0:	460f      	mov	r7, r1
   1a3a2:	1a69      	subs	r1, r5, r1
   1a3a4:	428b      	cmp	r3, r1
   1a3a6:	d83b      	bhi.n	1a420 <mbedtls_asn1_write_oid+0x88>
   1a3a8:	4606      	mov	r6, r0
   1a3aa:	461c      	mov	r4, r3
   1a3ac:	1ae8      	subs	r0, r5, r3
   1a3ae:	4611      	mov	r1, r2
   1a3b0:	6030      	str	r0, [r6, #0]
   1a3b2:	461a      	mov	r2, r3
   1a3b4:	f7f3 fc10 	bl	dbd8 <memcpy>
   1a3b8:	2c00      	cmp	r4, #0
   1a3ba:	4620      	mov	r0, r4
   1a3bc:	db15      	blt.n	1a3ea <mbedtls_asn1_write_oid+0x52>
   1a3be:	2c7f      	cmp	r4, #127	; 0x7f
   1a3c0:	d814      	bhi.n	1a3ec <mbedtls_asn1_write_oid+0x54>
   1a3c2:	6833      	ldr	r3, [r6, #0]
   1a3c4:	1bda      	subs	r2, r3, r7
   1a3c6:	2a00      	cmp	r2, #0
   1a3c8:	dd2a      	ble.n	1a420 <mbedtls_asn1_write_oid+0x88>
   1a3ca:	2001      	movs	r0, #1
   1a3cc:	1e5a      	subs	r2, r3, #1
   1a3ce:	6032      	str	r2, [r6, #0]
   1a3d0:	f803 4c01 	strb.w	r4, [r3, #-1]
   1a3d4:	6833      	ldr	r3, [r6, #0]
   1a3d6:	3401      	adds	r4, #1
   1a3d8:	1bdf      	subs	r7, r3, r7
   1a3da:	2f00      	cmp	r7, #0
   1a3dc:	dd20      	ble.n	1a420 <mbedtls_asn1_write_oid+0x88>
   1a3de:	2206      	movs	r2, #6
   1a3e0:	1e59      	subs	r1, r3, #1
   1a3e2:	6031      	str	r1, [r6, #0]
   1a3e4:	4420      	add	r0, r4
   1a3e6:	f803 2c01 	strb.w	r2, [r3, #-1]
   1a3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a3ec:	2cff      	cmp	r4, #255	; 0xff
   1a3ee:	d80f      	bhi.n	1a410 <mbedtls_asn1_write_oid+0x78>
   1a3f0:	6833      	ldr	r3, [r6, #0]
   1a3f2:	1bda      	subs	r2, r3, r7
   1a3f4:	2a01      	cmp	r2, #1
   1a3f6:	dd13      	ble.n	1a420 <mbedtls_asn1_write_oid+0x88>
   1a3f8:	2281      	movs	r2, #129	; 0x81
   1a3fa:	1e59      	subs	r1, r3, #1
   1a3fc:	6031      	str	r1, [r6, #0]
   1a3fe:	f803 4c01 	strb.w	r4, [r3, #-1]
   1a402:	6833      	ldr	r3, [r6, #0]
   1a404:	2002      	movs	r0, #2
   1a406:	1e59      	subs	r1, r3, #1
   1a408:	6031      	str	r1, [r6, #0]
   1a40a:	f803 2c01 	strb.w	r2, [r3, #-1]
   1a40e:	e7e1      	b.n	1a3d4 <mbedtls_asn1_write_oid+0x3c>
   1a410:	4622      	mov	r2, r4
   1a412:	4639      	mov	r1, r7
   1a414:	4630      	mov	r0, r6
   1a416:	f7ff fed7 	bl	1a1c8 <mbedtls_asn1_write_len.part.0>
   1a41a:	2800      	cmp	r0, #0
   1a41c:	dada      	bge.n	1a3d4 <mbedtls_asn1_write_oid+0x3c>
   1a41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a420:	f06f 006b 	mvn.w	r0, #107	; 0x6b
   1a424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a426:	bf00      	nop

0001a428 <mbedtls_asn1_write_algorithm_identifier>:
   1a428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a42c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1a430:	6805      	ldr	r5, [r0, #0]
   1a432:	f1b8 0f00 	cmp.w	r8, #0
   1a436:	d113      	bne.n	1a460 <mbedtls_asn1_write_algorithm_identifier+0x38>
   1a438:	1a6c      	subs	r4, r5, r1
   1a43a:	2c00      	cmp	r4, #0
   1a43c:	f340 8087 	ble.w	1a54e <mbedtls_asn1_write_algorithm_identifier+0x126>
   1a440:	1e6c      	subs	r4, r5, #1
   1a442:	6004      	str	r4, [r0, #0]
   1a444:	f805 8c01 	strb.w	r8, [r5, #-1]
   1a448:	6804      	ldr	r4, [r0, #0]
   1a44a:	1a65      	subs	r5, r4, r1
   1a44c:	2d00      	cmp	r5, #0
   1a44e:	dd7e      	ble.n	1a54e <mbedtls_asn1_write_algorithm_identifier+0x126>
   1a450:	2505      	movs	r5, #5
   1a452:	f04f 0802 	mov.w	r8, #2
   1a456:	1e66      	subs	r6, r4, #1
   1a458:	6006      	str	r6, [r0, #0]
   1a45a:	f804 5c01 	strb.w	r5, [r4, #-1]
   1a45e:	6805      	ldr	r5, [r0, #0]
   1a460:	42a9      	cmp	r1, r5
   1a462:	d874      	bhi.n	1a54e <mbedtls_asn1_write_algorithm_identifier+0x126>
   1a464:	1a6c      	subs	r4, r5, r1
   1a466:	42a3      	cmp	r3, r4
   1a468:	d871      	bhi.n	1a54e <mbedtls_asn1_write_algorithm_identifier+0x126>
   1a46a:	4606      	mov	r6, r0
   1a46c:	461c      	mov	r4, r3
   1a46e:	1ae8      	subs	r0, r5, r3
   1a470:	460f      	mov	r7, r1
   1a472:	6030      	str	r0, [r6, #0]
   1a474:	4611      	mov	r1, r2
   1a476:	461a      	mov	r2, r3
   1a478:	f7f3 fbae 	bl	dbd8 <memcpy>
   1a47c:	2c00      	cmp	r4, #0
   1a47e:	4620      	mov	r0, r4
   1a480:	db2f      	blt.n	1a4e2 <mbedtls_asn1_write_algorithm_identifier+0xba>
   1a482:	2c7f      	cmp	r4, #127	; 0x7f
   1a484:	d841      	bhi.n	1a50a <mbedtls_asn1_write_algorithm_identifier+0xe2>
   1a486:	6833      	ldr	r3, [r6, #0]
   1a488:	1bda      	subs	r2, r3, r7
   1a48a:	2a00      	cmp	r2, #0
   1a48c:	dd5f      	ble.n	1a54e <mbedtls_asn1_write_algorithm_identifier+0x126>
   1a48e:	2001      	movs	r0, #1
   1a490:	1e5a      	subs	r2, r3, #1
   1a492:	6032      	str	r2, [r6, #0]
   1a494:	f803 4c01 	strb.w	r4, [r3, #-1]
   1a498:	6833      	ldr	r3, [r6, #0]
   1a49a:	3401      	adds	r4, #1
   1a49c:	1bda      	subs	r2, r3, r7
   1a49e:	2a00      	cmp	r2, #0
   1a4a0:	dd55      	ble.n	1a54e <mbedtls_asn1_write_algorithm_identifier+0x126>
   1a4a2:	2206      	movs	r2, #6
   1a4a4:	4404      	add	r4, r0
   1a4a6:	1e59      	subs	r1, r3, #1
   1a4a8:	2c00      	cmp	r4, #0
   1a4aa:	6031      	str	r1, [r6, #0]
   1a4ac:	4620      	mov	r0, r4
   1a4ae:	f803 2c01 	strb.w	r2, [r3, #-1]
   1a4b2:	db16      	blt.n	1a4e2 <mbedtls_asn1_write_algorithm_identifier+0xba>
   1a4b4:	4444      	add	r4, r8
   1a4b6:	2c7f      	cmp	r4, #127	; 0x7f
   1a4b8:	d815      	bhi.n	1a4e6 <mbedtls_asn1_write_algorithm_identifier+0xbe>
   1a4ba:	6833      	ldr	r3, [r6, #0]
   1a4bc:	1bda      	subs	r2, r3, r7
   1a4be:	2a00      	cmp	r2, #0
   1a4c0:	dd45      	ble.n	1a54e <mbedtls_asn1_write_algorithm_identifier+0x126>
   1a4c2:	2001      	movs	r0, #1
   1a4c4:	1e5a      	subs	r2, r3, #1
   1a4c6:	6032      	str	r2, [r6, #0]
   1a4c8:	f803 4c01 	strb.w	r4, [r3, #-1]
   1a4cc:	6833      	ldr	r3, [r6, #0]
   1a4ce:	3401      	adds	r4, #1
   1a4d0:	1bdf      	subs	r7, r3, r7
   1a4d2:	2f00      	cmp	r7, #0
   1a4d4:	dd3b      	ble.n	1a54e <mbedtls_asn1_write_algorithm_identifier+0x126>
   1a4d6:	2230      	movs	r2, #48	; 0x30
   1a4d8:	1e59      	subs	r1, r3, #1
   1a4da:	6031      	str	r1, [r6, #0]
   1a4dc:	4420      	add	r0, r4
   1a4de:	f803 2c01 	strb.w	r2, [r3, #-1]
   1a4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a4e6:	2cff      	cmp	r4, #255	; 0xff
   1a4e8:	d821      	bhi.n	1a52e <mbedtls_asn1_write_algorithm_identifier+0x106>
   1a4ea:	6833      	ldr	r3, [r6, #0]
   1a4ec:	1bda      	subs	r2, r3, r7
   1a4ee:	2a01      	cmp	r2, #1
   1a4f0:	dd2d      	ble.n	1a54e <mbedtls_asn1_write_algorithm_identifier+0x126>
   1a4f2:	2281      	movs	r2, #129	; 0x81
   1a4f4:	1e59      	subs	r1, r3, #1
   1a4f6:	6031      	str	r1, [r6, #0]
   1a4f8:	f803 4c01 	strb.w	r4, [r3, #-1]
   1a4fc:	6833      	ldr	r3, [r6, #0]
   1a4fe:	2002      	movs	r0, #2
   1a500:	1e59      	subs	r1, r3, #1
   1a502:	6031      	str	r1, [r6, #0]
   1a504:	f803 2c01 	strb.w	r2, [r3, #-1]
   1a508:	e7e0      	b.n	1a4cc <mbedtls_asn1_write_algorithm_identifier+0xa4>
   1a50a:	2cff      	cmp	r4, #255	; 0xff
   1a50c:	d817      	bhi.n	1a53e <mbedtls_asn1_write_algorithm_identifier+0x116>
   1a50e:	6833      	ldr	r3, [r6, #0]
   1a510:	1bda      	subs	r2, r3, r7
   1a512:	2a01      	cmp	r2, #1
   1a514:	dd1b      	ble.n	1a54e <mbedtls_asn1_write_algorithm_identifier+0x126>
   1a516:	2281      	movs	r2, #129	; 0x81
   1a518:	1e59      	subs	r1, r3, #1
   1a51a:	6031      	str	r1, [r6, #0]
   1a51c:	f803 4c01 	strb.w	r4, [r3, #-1]
   1a520:	6833      	ldr	r3, [r6, #0]
   1a522:	2002      	movs	r0, #2
   1a524:	1e59      	subs	r1, r3, #1
   1a526:	6031      	str	r1, [r6, #0]
   1a528:	f803 2c01 	strb.w	r2, [r3, #-1]
   1a52c:	e7b4      	b.n	1a498 <mbedtls_asn1_write_algorithm_identifier+0x70>
   1a52e:	4622      	mov	r2, r4
   1a530:	4639      	mov	r1, r7
   1a532:	4630      	mov	r0, r6
   1a534:	f7ff fe48 	bl	1a1c8 <mbedtls_asn1_write_len.part.0>
   1a538:	2800      	cmp	r0, #0
   1a53a:	dbd2      	blt.n	1a4e2 <mbedtls_asn1_write_algorithm_identifier+0xba>
   1a53c:	e7c6      	b.n	1a4cc <mbedtls_asn1_write_algorithm_identifier+0xa4>
   1a53e:	4622      	mov	r2, r4
   1a540:	4639      	mov	r1, r7
   1a542:	4630      	mov	r0, r6
   1a544:	f7ff fe40 	bl	1a1c8 <mbedtls_asn1_write_len.part.0>
   1a548:	2800      	cmp	r0, #0
   1a54a:	daa5      	bge.n	1a498 <mbedtls_asn1_write_algorithm_identifier+0x70>
   1a54c:	e7c9      	b.n	1a4e2 <mbedtls_asn1_write_algorithm_identifier+0xba>
   1a54e:	f06f 006b 	mvn.w	r0, #107	; 0x6b
   1a552:	e7c6      	b.n	1a4e2 <mbedtls_asn1_write_algorithm_identifier+0xba>

0001a554 <mbedtls_base64_encode>:
   1a554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a558:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   1a55c:	f1bc 0f00 	cmp.w	ip, #0
   1a560:	d065      	beq.n	1a62e <mbedtls_base64_encode+0xda>
   1a562:	4c42      	ldr	r4, [pc, #264]	; (1a66c <mbedtls_base64_encode+0x118>)
   1a564:	fba4 540c 	umull	r5, r4, r4, ip
   1a568:	0864      	lsrs	r4, r4, #1
   1a56a:	eb04 0844 	add.w	r8, r4, r4, lsl #1
   1a56e:	45c4      	cmp	ip, r8
   1a570:	bf18      	it	ne
   1a572:	3401      	addne	r4, #1
   1a574:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1a578:	d271      	bcs.n	1a65e <mbedtls_base64_encode+0x10a>
   1a57a:	00a4      	lsls	r4, r4, #2
   1a57c:	3401      	adds	r4, #1
   1a57e:	428c      	cmp	r4, r1
   1a580:	d869      	bhi.n	1a656 <mbedtls_base64_encode+0x102>
   1a582:	2800      	cmp	r0, #0
   1a584:	d067      	beq.n	1a656 <mbedtls_base64_encode+0x102>
   1a586:	f1b8 0f00 	cmp.w	r8, #0
   1a58a:	d061      	beq.n	1a650 <mbedtls_base64_encode+0xfc>
   1a58c:	4686      	mov	lr, r0
   1a58e:	2700      	movs	r7, #0
   1a590:	4e37      	ldr	r6, [pc, #220]	; (1a670 <mbedtls_base64_encode+0x11c>)
   1a592:	1cdc      	adds	r4, r3, #3
   1a594:	2500      	movs	r5, #0
   1a596:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   1a59a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
   1a59e:	f814 bc01 	ldrb.w	fp, [r4, #-1]
   1a5a2:	ea4f 09a1 	mov.w	r9, r1, asr #2
   1a5a6:	0109      	lsls	r1, r1, #4
   1a5a8:	f001 0130 	and.w	r1, r1, #48	; 0x30
   1a5ac:	eb06 1a13 	add.w	sl, r6, r3, lsr #4
   1a5b0:	f816 9009 	ldrb.w	r9, [r6, r9]
   1a5b4:	009b      	lsls	r3, r3, #2
   1a5b6:	f81a a001 	ldrb.w	sl, [sl, r1]
   1a5ba:	f003 013c 	and.w	r1, r3, #60	; 0x3c
   1a5be:	eb06 139b 	add.w	r3, r6, fp, lsr #6
   1a5c2:	5c59      	ldrb	r1, [r3, r1]
   1a5c4:	f369 0507 	bfi	r5, r9, #0, #8
   1a5c8:	f00b 033f 	and.w	r3, fp, #63	; 0x3f
   1a5cc:	5cf3      	ldrb	r3, [r6, r3]
   1a5ce:	f36a 250f 	bfi	r5, sl, #8, #8
   1a5d2:	f361 4517 	bfi	r5, r1, #16, #8
   1a5d6:	3703      	adds	r7, #3
   1a5d8:	f363 651f 	bfi	r5, r3, #24, #8
   1a5dc:	f10e 0104 	add.w	r1, lr, #4
   1a5e0:	45b8      	cmp	r8, r7
   1a5e2:	f8ce 5000 	str.w	r5, [lr]
   1a5e6:	4623      	mov	r3, r4
   1a5e8:	468e      	mov	lr, r1
   1a5ea:	f104 0403 	add.w	r4, r4, #3
   1a5ee:	d8d1      	bhi.n	1a594 <mbedtls_base64_encode+0x40>
   1a5f0:	45bc      	cmp	ip, r7
   1a5f2:	d914      	bls.n	1a61e <mbedtls_base64_encode+0xca>
   1a5f4:	781c      	ldrb	r4, [r3, #0]
   1a5f6:	4d1e      	ldr	r5, [pc, #120]	; (1a670 <mbedtls_base64_encode+0x11c>)
   1a5f8:	3701      	adds	r7, #1
   1a5fa:	10a6      	asrs	r6, r4, #2
   1a5fc:	4567      	cmp	r7, ip
   1a5fe:	ea4f 1404 	mov.w	r4, r4, lsl #4
   1a602:	f004 0430 	and.w	r4, r4, #48	; 0x30
   1a606:	f815 e006 	ldrb.w	lr, [r5, r6]
   1a60a:	d315      	bcc.n	1a638 <mbedtls_base64_encode+0xe4>
   1a60c:	263d      	movs	r6, #61	; 0x3d
   1a60e:	5d2b      	ldrb	r3, [r5, r4]
   1a610:	f881 e000 	strb.w	lr, [r1]
   1a614:	704b      	strb	r3, [r1, #1]
   1a616:	233d      	movs	r3, #61	; 0x3d
   1a618:	708e      	strb	r6, [r1, #2]
   1a61a:	70cb      	strb	r3, [r1, #3]
   1a61c:	3104      	adds	r1, #4
   1a61e:	2300      	movs	r3, #0
   1a620:	469c      	mov	ip, r3
   1a622:	1a08      	subs	r0, r1, r0
   1a624:	6010      	str	r0, [r2, #0]
   1a626:	700b      	strb	r3, [r1, #0]
   1a628:	4660      	mov	r0, ip
   1a62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a62e:	f8c2 c000 	str.w	ip, [r2]
   1a632:	4660      	mov	r0, ip
   1a634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a638:	785b      	ldrb	r3, [r3, #1]
   1a63a:	f881 e000 	strb.w	lr, [r1]
   1a63e:	eb05 1613 	add.w	r6, r5, r3, lsr #4
   1a642:	5d34      	ldrb	r4, [r6, r4]
   1a644:	009b      	lsls	r3, r3, #2
   1a646:	f003 033c 	and.w	r3, r3, #60	; 0x3c
   1a64a:	704c      	strb	r4, [r1, #1]
   1a64c:	5cee      	ldrb	r6, [r5, r3]
   1a64e:	e7e2      	b.n	1a616 <mbedtls_base64_encode+0xc2>
   1a650:	4647      	mov	r7, r8
   1a652:	4601      	mov	r1, r0
   1a654:	e7cc      	b.n	1a5f0 <mbedtls_base64_encode+0x9c>
   1a656:	6014      	str	r4, [r2, #0]
   1a658:	f06f 0c29 	mvn.w	ip, #41	; 0x29
   1a65c:	e7e4      	b.n	1a628 <mbedtls_base64_encode+0xd4>
   1a65e:	f04f 33ff 	mov.w	r3, #4294967295
   1a662:	f06f 0c29 	mvn.w	ip, #41	; 0x29
   1a666:	6013      	str	r3, [r2, #0]
   1a668:	e7de      	b.n	1a628 <mbedtls_base64_encode+0xd4>
   1a66a:	bf00      	nop
   1a66c:	aaaaaaab 	.word	0xaaaaaaab
   1a670:	000335c4 	.word	0x000335c4

0001a674 <mpi_mul_hlp>:
   1a674:	280f      	cmp	r0, #15
   1a676:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a67a:	4686      	mov	lr, r0
   1a67c:	f240 82e0 	bls.w	1ac40 <mpi_mul_hlp+0x5cc>
   1a680:	f04f 0800 	mov.w	r8, #0
   1a684:	4684      	mov	ip, r0
   1a686:	f101 0440 	add.w	r4, r1, #64	; 0x40
   1a68a:	f102 0040 	add.w	r0, r2, #64	; 0x40
   1a68e:	f854 6c40 	ldr.w	r6, [r4, #-64]
   1a692:	f850 5c40 	ldr.w	r5, [r0, #-64]
   1a696:	fba3 6706 	umull	r6, r7, r3, r6
   1a69a:	eb18 0806 	adds.w	r8, r8, r6
   1a69e:	bf2c      	ite	cs
   1a6a0:	f04f 0901 	movcs.w	r9, #1
   1a6a4:	f04f 0900 	movcc.w	r9, #0
   1a6a8:	eb15 0508 	adds.w	r5, r5, r8
   1a6ac:	444f      	add	r7, r9
   1a6ae:	f04f 0900 	mov.w	r9, #0
   1a6b2:	bf28      	it	cs
   1a6b4:	f04f 0901 	movcs.w	r9, #1
   1a6b8:	f840 5c40 	str.w	r5, [r0, #-64]
   1a6bc:	f854 6c3c 	ldr.w	r6, [r4, #-60]
   1a6c0:	44b9      	add	r9, r7
   1a6c2:	fba3 ab06 	umull	sl, fp, r3, r6
   1a6c6:	eb19 090a 	adds.w	r9, r9, sl
   1a6ca:	bf2c      	ite	cs
   1a6cc:	f04f 0801 	movcs.w	r8, #1
   1a6d0:	f04f 0800 	movcc.w	r8, #0
   1a6d4:	f850 6c3c 	ldr.w	r6, [r0, #-60]
   1a6d8:	eb08 050b 	add.w	r5, r8, fp
   1a6dc:	eb16 0609 	adds.w	r6, r6, r9
   1a6e0:	f04f 0800 	mov.w	r8, #0
   1a6e4:	bf28      	it	cs
   1a6e6:	f04f 0801 	movcs.w	r8, #1
   1a6ea:	f840 6c3c 	str.w	r6, [r0, #-60]
   1a6ee:	f854 6c38 	ldr.w	r6, [r4, #-56]
   1a6f2:	44a8      	add	r8, r5
   1a6f4:	fba3 6706 	umull	r6, r7, r3, r6
   1a6f8:	eb18 0806 	adds.w	r8, r8, r6
   1a6fc:	bf2c      	ite	cs
   1a6fe:	f04f 0901 	movcs.w	r9, #1
   1a702:	f04f 0900 	movcc.w	r9, #0
   1a706:	f850 5c38 	ldr.w	r5, [r0, #-56]
   1a70a:	444f      	add	r7, r9
   1a70c:	eb15 0508 	adds.w	r5, r5, r8
   1a710:	f04f 0900 	mov.w	r9, #0
   1a714:	bf28      	it	cs
   1a716:	f04f 0901 	movcs.w	r9, #1
   1a71a:	f840 5c38 	str.w	r5, [r0, #-56]
   1a71e:	f854 6c34 	ldr.w	r6, [r4, #-52]
   1a722:	44b9      	add	r9, r7
   1a724:	fba3 ab06 	umull	sl, fp, r3, r6
   1a728:	eb19 090a 	adds.w	r9, r9, sl
   1a72c:	bf2c      	ite	cs
   1a72e:	f04f 0801 	movcs.w	r8, #1
   1a732:	f04f 0800 	movcc.w	r8, #0
   1a736:	f850 6c34 	ldr.w	r6, [r0, #-52]
   1a73a:	eb08 050b 	add.w	r5, r8, fp
   1a73e:	eb16 0609 	adds.w	r6, r6, r9
   1a742:	f04f 0800 	mov.w	r8, #0
   1a746:	bf28      	it	cs
   1a748:	f04f 0801 	movcs.w	r8, #1
   1a74c:	f840 6c34 	str.w	r6, [r0, #-52]
   1a750:	f854 6c30 	ldr.w	r6, [r4, #-48]
   1a754:	44a8      	add	r8, r5
   1a756:	fba3 6706 	umull	r6, r7, r3, r6
   1a75a:	eb18 0806 	adds.w	r8, r8, r6
   1a75e:	bf2c      	ite	cs
   1a760:	f04f 0901 	movcs.w	r9, #1
   1a764:	f04f 0900 	movcc.w	r9, #0
   1a768:	f850 5c30 	ldr.w	r5, [r0, #-48]
   1a76c:	444f      	add	r7, r9
   1a76e:	eb15 0508 	adds.w	r5, r5, r8
   1a772:	f04f 0900 	mov.w	r9, #0
   1a776:	bf28      	it	cs
   1a778:	f04f 0901 	movcs.w	r9, #1
   1a77c:	f840 5c30 	str.w	r5, [r0, #-48]
   1a780:	f854 6c2c 	ldr.w	r6, [r4, #-44]
   1a784:	44b9      	add	r9, r7
   1a786:	fba3 ab06 	umull	sl, fp, r3, r6
   1a78a:	eb19 090a 	adds.w	r9, r9, sl
   1a78e:	bf2c      	ite	cs
   1a790:	f04f 0801 	movcs.w	r8, #1
   1a794:	f04f 0800 	movcc.w	r8, #0
   1a798:	f850 6c2c 	ldr.w	r6, [r0, #-44]
   1a79c:	eb08 050b 	add.w	r5, r8, fp
   1a7a0:	eb16 0609 	adds.w	r6, r6, r9
   1a7a4:	f04f 0800 	mov.w	r8, #0
   1a7a8:	bf28      	it	cs
   1a7aa:	f04f 0801 	movcs.w	r8, #1
   1a7ae:	f840 6c2c 	str.w	r6, [r0, #-44]
   1a7b2:	f854 6c28 	ldr.w	r6, [r4, #-40]
   1a7b6:	44a8      	add	r8, r5
   1a7b8:	fba3 6706 	umull	r6, r7, r3, r6
   1a7bc:	eb18 0806 	adds.w	r8, r8, r6
   1a7c0:	bf2c      	ite	cs
   1a7c2:	f04f 0901 	movcs.w	r9, #1
   1a7c6:	f04f 0900 	movcc.w	r9, #0
   1a7ca:	f850 5c28 	ldr.w	r5, [r0, #-40]
   1a7ce:	444f      	add	r7, r9
   1a7d0:	eb15 0508 	adds.w	r5, r5, r8
   1a7d4:	f04f 0900 	mov.w	r9, #0
   1a7d8:	bf28      	it	cs
   1a7da:	f04f 0901 	movcs.w	r9, #1
   1a7de:	f840 5c28 	str.w	r5, [r0, #-40]
   1a7e2:	f854 6c24 	ldr.w	r6, [r4, #-36]
   1a7e6:	44b9      	add	r9, r7
   1a7e8:	fba3 ab06 	umull	sl, fp, r3, r6
   1a7ec:	eb19 090a 	adds.w	r9, r9, sl
   1a7f0:	bf2c      	ite	cs
   1a7f2:	f04f 0801 	movcs.w	r8, #1
   1a7f6:	f04f 0800 	movcc.w	r8, #0
   1a7fa:	f850 6c24 	ldr.w	r6, [r0, #-36]
   1a7fe:	eb08 050b 	add.w	r5, r8, fp
   1a802:	eb16 0609 	adds.w	r6, r6, r9
   1a806:	f04f 0800 	mov.w	r8, #0
   1a80a:	bf28      	it	cs
   1a80c:	f04f 0801 	movcs.w	r8, #1
   1a810:	f840 6c24 	str.w	r6, [r0, #-36]
   1a814:	f854 6c20 	ldr.w	r6, [r4, #-32]
   1a818:	44a8      	add	r8, r5
   1a81a:	fba3 6706 	umull	r6, r7, r3, r6
   1a81e:	eb18 0806 	adds.w	r8, r8, r6
   1a822:	bf2c      	ite	cs
   1a824:	f04f 0901 	movcs.w	r9, #1
   1a828:	f04f 0900 	movcc.w	r9, #0
   1a82c:	f850 5c20 	ldr.w	r5, [r0, #-32]
   1a830:	444f      	add	r7, r9
   1a832:	eb15 0508 	adds.w	r5, r5, r8
   1a836:	f04f 0900 	mov.w	r9, #0
   1a83a:	bf28      	it	cs
   1a83c:	f04f 0901 	movcs.w	r9, #1
   1a840:	f840 5c20 	str.w	r5, [r0, #-32]
   1a844:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   1a848:	44b9      	add	r9, r7
   1a84a:	fba3 ab06 	umull	sl, fp, r3, r6
   1a84e:	eb19 090a 	adds.w	r9, r9, sl
   1a852:	bf2c      	ite	cs
   1a854:	f04f 0801 	movcs.w	r8, #1
   1a858:	f04f 0800 	movcc.w	r8, #0
   1a85c:	f850 6c1c 	ldr.w	r6, [r0, #-28]
   1a860:	eb08 050b 	add.w	r5, r8, fp
   1a864:	eb16 0609 	adds.w	r6, r6, r9
   1a868:	f04f 0800 	mov.w	r8, #0
   1a86c:	bf28      	it	cs
   1a86e:	f04f 0801 	movcs.w	r8, #1
   1a872:	f840 6c1c 	str.w	r6, [r0, #-28]
   1a876:	f854 6c18 	ldr.w	r6, [r4, #-24]
   1a87a:	44a8      	add	r8, r5
   1a87c:	fba3 6706 	umull	r6, r7, r3, r6
   1a880:	eb18 0806 	adds.w	r8, r8, r6
   1a884:	bf2c      	ite	cs
   1a886:	f04f 0901 	movcs.w	r9, #1
   1a88a:	f04f 0900 	movcc.w	r9, #0
   1a88e:	f850 5c18 	ldr.w	r5, [r0, #-24]
   1a892:	444f      	add	r7, r9
   1a894:	eb15 0508 	adds.w	r5, r5, r8
   1a898:	f04f 0900 	mov.w	r9, #0
   1a89c:	bf28      	it	cs
   1a89e:	f04f 0901 	movcs.w	r9, #1
   1a8a2:	f840 5c18 	str.w	r5, [r0, #-24]
   1a8a6:	f854 6c14 	ldr.w	r6, [r4, #-20]
   1a8aa:	44b9      	add	r9, r7
   1a8ac:	fba3 ab06 	umull	sl, fp, r3, r6
   1a8b0:	eb19 090a 	adds.w	r9, r9, sl
   1a8b4:	bf2c      	ite	cs
   1a8b6:	f04f 0801 	movcs.w	r8, #1
   1a8ba:	f04f 0800 	movcc.w	r8, #0
   1a8be:	f850 6c14 	ldr.w	r6, [r0, #-20]
   1a8c2:	eb08 050b 	add.w	r5, r8, fp
   1a8c6:	eb16 0609 	adds.w	r6, r6, r9
   1a8ca:	f04f 0800 	mov.w	r8, #0
   1a8ce:	bf28      	it	cs
   1a8d0:	f04f 0801 	movcs.w	r8, #1
   1a8d4:	f840 6c14 	str.w	r6, [r0, #-20]
   1a8d8:	f854 6c10 	ldr.w	r6, [r4, #-16]
   1a8dc:	44a8      	add	r8, r5
   1a8de:	fba3 6706 	umull	r6, r7, r3, r6
   1a8e2:	eb18 0806 	adds.w	r8, r8, r6
   1a8e6:	bf2c      	ite	cs
   1a8e8:	f04f 0901 	movcs.w	r9, #1
   1a8ec:	f04f 0900 	movcc.w	r9, #0
   1a8f0:	f850 5c10 	ldr.w	r5, [r0, #-16]
   1a8f4:	444f      	add	r7, r9
   1a8f6:	eb15 0508 	adds.w	r5, r5, r8
   1a8fa:	f04f 0900 	mov.w	r9, #0
   1a8fe:	bf28      	it	cs
   1a900:	f04f 0901 	movcs.w	r9, #1
   1a904:	f840 5c10 	str.w	r5, [r0, #-16]
   1a908:	f854 6c0c 	ldr.w	r6, [r4, #-12]
   1a90c:	44b9      	add	r9, r7
   1a90e:	fba3 ab06 	umull	sl, fp, r3, r6
   1a912:	eb19 090a 	adds.w	r9, r9, sl
   1a916:	bf2c      	ite	cs
   1a918:	f04f 0801 	movcs.w	r8, #1
   1a91c:	f04f 0800 	movcc.w	r8, #0
   1a920:	f850 6c0c 	ldr.w	r6, [r0, #-12]
   1a924:	eb08 050b 	add.w	r5, r8, fp
   1a928:	eb16 0609 	adds.w	r6, r6, r9
   1a92c:	f04f 0800 	mov.w	r8, #0
   1a930:	bf28      	it	cs
   1a932:	f04f 0801 	movcs.w	r8, #1
   1a936:	f840 6c0c 	str.w	r6, [r0, #-12]
   1a93a:	f854 6c08 	ldr.w	r6, [r4, #-8]
   1a93e:	44a8      	add	r8, r5
   1a940:	fba3 6706 	umull	r6, r7, r3, r6
   1a944:	eb18 0806 	adds.w	r8, r8, r6
   1a948:	bf2c      	ite	cs
   1a94a:	f04f 0901 	movcs.w	r9, #1
   1a94e:	f04f 0900 	movcc.w	r9, #0
   1a952:	f850 5c08 	ldr.w	r5, [r0, #-8]
   1a956:	444f      	add	r7, r9
   1a958:	eb15 0508 	adds.w	r5, r5, r8
   1a95c:	f04f 0900 	mov.w	r9, #0
   1a960:	bf28      	it	cs
   1a962:	f04f 0901 	movcs.w	r9, #1
   1a966:	f840 5c08 	str.w	r5, [r0, #-8]
   1a96a:	f854 6c04 	ldr.w	r6, [r4, #-4]
   1a96e:	44b9      	add	r9, r7
   1a970:	fba3 ab06 	umull	sl, fp, r3, r6
   1a974:	eb19 090a 	adds.w	r9, r9, sl
   1a978:	bf2c      	ite	cs
   1a97a:	f04f 0801 	movcs.w	r8, #1
   1a97e:	f04f 0800 	movcc.w	r8, #0
   1a982:	f850 6c04 	ldr.w	r6, [r0, #-4]
   1a986:	eb08 050b 	add.w	r5, r8, fp
   1a98a:	eb16 0609 	adds.w	r6, r6, r9
   1a98e:	f04f 0800 	mov.w	r8, #0
   1a992:	bf28      	it	cs
   1a994:	f04f 0801 	movcs.w	r8, #1
   1a998:	f1ac 0c10 	sub.w	ip, ip, #16
   1a99c:	f1bc 0f0f 	cmp.w	ip, #15
   1a9a0:	f840 6c04 	str.w	r6, [r0, #-4]
   1a9a4:	44a8      	add	r8, r5
   1a9a6:	f104 0440 	add.w	r4, r4, #64	; 0x40
   1a9aa:	f100 0040 	add.w	r0, r0, #64	; 0x40
   1a9ae:	f63f ae6e 	bhi.w	1a68e <mpi_mul_hlp+0x1a>
   1a9b2:	f1ae 0010 	sub.w	r0, lr, #16
   1a9b6:	0900      	lsrs	r0, r0, #4
   1a9b8:	3001      	adds	r0, #1
   1a9ba:	0180      	lsls	r0, r0, #6
   1a9bc:	4401      	add	r1, r0
   1a9be:	4402      	add	r2, r0
   1a9c0:	f00e 000f 	and.w	r0, lr, #15
   1a9c4:	2807      	cmp	r0, #7
   1a9c6:	6817      	ldr	r7, [r2, #0]
   1a9c8:	f240 8092 	bls.w	1aaf0 <mpi_mul_hlp+0x47c>
   1a9cc:	680c      	ldr	r4, [r1, #0]
   1a9ce:	6856      	ldr	r6, [r2, #4]
   1a9d0:	fba3 9a04 	umull	r9, sl, r3, r4
   1a9d4:	eb18 0809 	adds.w	r8, r8, r9
   1a9d8:	bf2c      	ite	cs
   1a9da:	f04f 0c01 	movcs.w	ip, #1
   1a9de:	f04f 0c00 	movcc.w	ip, #0
   1a9e2:	eb17 0708 	adds.w	r7, r7, r8
   1a9e6:	bf2c      	ite	cs
   1a9e8:	2401      	movcs	r4, #1
   1a9ea:	2400      	movcc	r4, #0
   1a9ec:	6017      	str	r7, [r2, #0]
   1a9ee:	684f      	ldr	r7, [r1, #4]
   1a9f0:	eb0a 050c 	add.w	r5, sl, ip
   1a9f4:	fba3 8907 	umull	r8, r9, r3, r7
   1a9f8:	442c      	add	r4, r5
   1a9fa:	eb14 0408 	adds.w	r4, r4, r8
   1a9fe:	bf2c      	ite	cs
   1aa00:	2501      	movcs	r5, #1
   1aa02:	2500      	movcc	r5, #0
   1aa04:	19a6      	adds	r6, r4, r6
   1aa06:	eb05 0709 	add.w	r7, r5, r9
   1aa0a:	f04f 0500 	mov.w	r5, #0
   1aa0e:	bf28      	it	cs
   1aa10:	2501      	movcs	r5, #1
   1aa12:	6056      	str	r6, [r2, #4]
   1aa14:	688e      	ldr	r6, [r1, #8]
   1aa16:	443d      	add	r5, r7
   1aa18:	fba3 7806 	umull	r7, r8, r3, r6
   1aa1c:	19ed      	adds	r5, r5, r7
   1aa1e:	bf2c      	ite	cs
   1aa20:	2401      	movcs	r4, #1
   1aa22:	2400      	movcc	r4, #0
   1aa24:	6896      	ldr	r6, [r2, #8]
   1aa26:	eb08 0704 	add.w	r7, r8, r4
   1aa2a:	19ad      	adds	r5, r5, r6
   1aa2c:	f04f 0400 	mov.w	r4, #0
   1aa30:	bf28      	it	cs
   1aa32:	2401      	movcs	r4, #1
   1aa34:	6095      	str	r5, [r2, #8]
   1aa36:	68ce      	ldr	r6, [r1, #12]
   1aa38:	443c      	add	r4, r7
   1aa3a:	fba3 7806 	umull	r7, r8, r3, r6
   1aa3e:	19e4      	adds	r4, r4, r7
   1aa40:	bf2c      	ite	cs
   1aa42:	2501      	movcs	r5, #1
   1aa44:	2500      	movcc	r5, #0
   1aa46:	68d6      	ldr	r6, [r2, #12]
   1aa48:	eb08 0705 	add.w	r7, r8, r5
   1aa4c:	19a4      	adds	r4, r4, r6
   1aa4e:	f04f 0500 	mov.w	r5, #0
   1aa52:	bf28      	it	cs
   1aa54:	2501      	movcs	r5, #1
   1aa56:	60d4      	str	r4, [r2, #12]
   1aa58:	690e      	ldr	r6, [r1, #16]
   1aa5a:	443d      	add	r5, r7
   1aa5c:	fba3 7806 	umull	r7, r8, r3, r6
   1aa60:	19ed      	adds	r5, r5, r7
   1aa62:	bf2c      	ite	cs
   1aa64:	2401      	movcs	r4, #1
   1aa66:	2400      	movcc	r4, #0
   1aa68:	6916      	ldr	r6, [r2, #16]
   1aa6a:	eb08 0704 	add.w	r7, r8, r4
   1aa6e:	19ad      	adds	r5, r5, r6
   1aa70:	f04f 0400 	mov.w	r4, #0
   1aa74:	bf28      	it	cs
   1aa76:	2401      	movcs	r4, #1
   1aa78:	6115      	str	r5, [r2, #16]
   1aa7a:	694e      	ldr	r6, [r1, #20]
   1aa7c:	443c      	add	r4, r7
   1aa7e:	fba3 7806 	umull	r7, r8, r3, r6
   1aa82:	19e4      	adds	r4, r4, r7
   1aa84:	bf2c      	ite	cs
   1aa86:	2501      	movcs	r5, #1
   1aa88:	2500      	movcc	r5, #0
   1aa8a:	6956      	ldr	r6, [r2, #20]
   1aa8c:	eb08 0705 	add.w	r7, r8, r5
   1aa90:	19a4      	adds	r4, r4, r6
   1aa92:	f04f 0500 	mov.w	r5, #0
   1aa96:	bf28      	it	cs
   1aa98:	2501      	movcs	r5, #1
   1aa9a:	6154      	str	r4, [r2, #20]
   1aa9c:	698e      	ldr	r6, [r1, #24]
   1aa9e:	443d      	add	r5, r7
   1aaa0:	fba3 7806 	umull	r7, r8, r3, r6
   1aaa4:	19ed      	adds	r5, r5, r7
   1aaa6:	bf2c      	ite	cs
   1aaa8:	2401      	movcs	r4, #1
   1aaaa:	2400      	movcc	r4, #0
   1aaac:	6996      	ldr	r6, [r2, #24]
   1aaae:	eb08 0704 	add.w	r7, r8, r4
   1aab2:	19ad      	adds	r5, r5, r6
   1aab4:	f04f 0400 	mov.w	r4, #0
   1aab8:	bf28      	it	cs
   1aaba:	2401      	movcs	r4, #1
   1aabc:	6195      	str	r5, [r2, #24]
   1aabe:	69ce      	ldr	r6, [r1, #28]
   1aac0:	443c      	add	r4, r7
   1aac2:	fba3 9a06 	umull	r9, sl, r3, r6
   1aac6:	eb14 0409 	adds.w	r4, r4, r9
   1aaca:	bf2c      	ite	cs
   1aacc:	f04f 0801 	movcs.w	r8, #1
   1aad0:	f04f 0800 	movcc.w	r8, #0
   1aad4:	69d6      	ldr	r6, [r2, #28]
   1aad6:	eb08 050a 	add.w	r5, r8, sl
   1aada:	19a4      	adds	r4, r4, r6
   1aadc:	f04f 0800 	mov.w	r8, #0
   1aae0:	bf28      	it	cs
   1aae2:	f04f 0801 	movcs.w	r8, #1
   1aae6:	61d4      	str	r4, [r2, #28]
   1aae8:	3120      	adds	r1, #32
   1aaea:	44a8      	add	r8, r5
   1aaec:	3808      	subs	r0, #8
   1aaee:	3220      	adds	r2, #32
   1aaf0:	2800      	cmp	r0, #0
   1aaf2:	f000 8097 	beq.w	1ac24 <mpi_mul_hlp+0x5b0>
   1aaf6:	680c      	ldr	r4, [r1, #0]
   1aaf8:	6816      	ldr	r6, [r2, #0]
   1aafa:	fba3 9a04 	umull	r9, sl, r3, r4
   1aafe:	eb19 0808 	adds.w	r8, r9, r8
   1ab02:	bf2c      	ite	cs
   1ab04:	2401      	movcs	r4, #1
   1ab06:	2400      	movcc	r4, #0
   1ab08:	eb16 0608 	adds.w	r6, r6, r8
   1ab0c:	f04f 0500 	mov.w	r5, #0
   1ab10:	bf28      	it	cs
   1ab12:	2501      	movcs	r5, #1
   1ab14:	4454      	add	r4, sl
   1ab16:	2801      	cmp	r0, #1
   1ab18:	eb05 0804 	add.w	r8, r5, r4
   1ab1c:	6016      	str	r6, [r2, #0]
   1ab1e:	d07f      	beq.n	1ac20 <mpi_mul_hlp+0x5ac>
   1ab20:	684c      	ldr	r4, [r1, #4]
   1ab22:	6856      	ldr	r6, [r2, #4]
   1ab24:	fba3 9a04 	umull	r9, sl, r3, r4
   1ab28:	eb19 0808 	adds.w	r8, r9, r8
   1ab2c:	bf2c      	ite	cs
   1ab2e:	2401      	movcs	r4, #1
   1ab30:	2400      	movcc	r4, #0
   1ab32:	eb16 0608 	adds.w	r6, r6, r8
   1ab36:	f04f 0500 	mov.w	r5, #0
   1ab3a:	bf28      	it	cs
   1ab3c:	2501      	movcs	r5, #1
   1ab3e:	4454      	add	r4, sl
   1ab40:	2802      	cmp	r0, #2
   1ab42:	eb05 0804 	add.w	r8, r5, r4
   1ab46:	6056      	str	r6, [r2, #4]
   1ab48:	d06a      	beq.n	1ac20 <mpi_mul_hlp+0x5ac>
   1ab4a:	688c      	ldr	r4, [r1, #8]
   1ab4c:	6896      	ldr	r6, [r2, #8]
   1ab4e:	fba3 9a04 	umull	r9, sl, r3, r4
   1ab52:	eb19 0808 	adds.w	r8, r9, r8
   1ab56:	bf2c      	ite	cs
   1ab58:	2401      	movcs	r4, #1
   1ab5a:	2400      	movcc	r4, #0
   1ab5c:	eb16 0608 	adds.w	r6, r6, r8
   1ab60:	f04f 0500 	mov.w	r5, #0
   1ab64:	bf28      	it	cs
   1ab66:	2501      	movcs	r5, #1
   1ab68:	4454      	add	r4, sl
   1ab6a:	2803      	cmp	r0, #3
   1ab6c:	eb05 0804 	add.w	r8, r5, r4
   1ab70:	6096      	str	r6, [r2, #8]
   1ab72:	d055      	beq.n	1ac20 <mpi_mul_hlp+0x5ac>
   1ab74:	68cc      	ldr	r4, [r1, #12]
   1ab76:	68d6      	ldr	r6, [r2, #12]
   1ab78:	fba3 9a04 	umull	r9, sl, r3, r4
   1ab7c:	eb19 0808 	adds.w	r8, r9, r8
   1ab80:	bf2c      	ite	cs
   1ab82:	2401      	movcs	r4, #1
   1ab84:	2400      	movcc	r4, #0
   1ab86:	eb16 0608 	adds.w	r6, r6, r8
   1ab8a:	f04f 0500 	mov.w	r5, #0
   1ab8e:	bf28      	it	cs
   1ab90:	2501      	movcs	r5, #1
   1ab92:	4454      	add	r4, sl
   1ab94:	2804      	cmp	r0, #4
   1ab96:	eb05 0804 	add.w	r8, r5, r4
   1ab9a:	60d6      	str	r6, [r2, #12]
   1ab9c:	d040      	beq.n	1ac20 <mpi_mul_hlp+0x5ac>
   1ab9e:	690c      	ldr	r4, [r1, #16]
   1aba0:	6916      	ldr	r6, [r2, #16]
   1aba2:	fba3 9a04 	umull	r9, sl, r3, r4
   1aba6:	eb19 0408 	adds.w	r4, r9, r8
   1abaa:	bf2c      	ite	cs
   1abac:	f04f 0801 	movcs.w	r8, #1
   1abb0:	f04f 0800 	movcc.w	r8, #0
   1abb4:	19a6      	adds	r6, r4, r6
   1abb6:	eb0a 0508 	add.w	r5, sl, r8
   1abba:	f04f 0800 	mov.w	r8, #0
   1abbe:	bf28      	it	cs
   1abc0:	f04f 0801 	movcs.w	r8, #1
   1abc4:	2805      	cmp	r0, #5
   1abc6:	44a8      	add	r8, r5
   1abc8:	6116      	str	r6, [r2, #16]
   1abca:	d029      	beq.n	1ac20 <mpi_mul_hlp+0x5ac>
   1abcc:	694c      	ldr	r4, [r1, #20]
   1abce:	6956      	ldr	r6, [r2, #20]
   1abd0:	fba3 9a04 	umull	r9, sl, r3, r4
   1abd4:	eb18 0409 	adds.w	r4, r8, r9
   1abd8:	bf2c      	ite	cs
   1abda:	f04f 0801 	movcs.w	r8, #1
   1abde:	f04f 0800 	movcc.w	r8, #0
   1abe2:	19a6      	adds	r6, r4, r6
   1abe4:	eb0a 0508 	add.w	r5, sl, r8
   1abe8:	f04f 0800 	mov.w	r8, #0
   1abec:	bf28      	it	cs
   1abee:	f04f 0801 	movcs.w	r8, #1
   1abf2:	2806      	cmp	r0, #6
   1abf4:	44a8      	add	r8, r5
   1abf6:	6156      	str	r6, [r2, #20]
   1abf8:	d012      	beq.n	1ac20 <mpi_mul_hlp+0x5ac>
   1abfa:	698c      	ldr	r4, [r1, #24]
   1abfc:	6991      	ldr	r1, [r2, #24]
   1abfe:	fba3 4504 	umull	r4, r5, r3, r4
   1ac02:	eb14 0808 	adds.w	r8, r4, r8
   1ac06:	bf2c      	ite	cs
   1ac08:	2301      	movcs	r3, #1
   1ac0a:	2300      	movcc	r3, #0
   1ac0c:	eb11 0108 	adds.w	r1, r1, r8
   1ac10:	f04f 0400 	mov.w	r4, #0
   1ac14:	bf28      	it	cs
   1ac16:	2401      	movcs	r4, #1
   1ac18:	442b      	add	r3, r5
   1ac1a:	eb04 0803 	add.w	r8, r4, r3
   1ac1e:	6191      	str	r1, [r2, #24]
   1ac20:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   1ac24:	6815      	ldr	r5, [r2, #0]
   1ac26:	2300      	movs	r3, #0
   1ac28:	eb15 0508 	adds.w	r5, r5, r8
   1ac2c:	bf28      	it	cs
   1ac2e:	2301      	movcs	r3, #1
   1ac30:	f842 5b04 	str.w	r5, [r2], #4
   1ac34:	f04f 0801 	mov.w	r8, #1
   1ac38:	2b00      	cmp	r3, #0
   1ac3a:	d1f3      	bne.n	1ac24 <mpi_mul_hlp+0x5b0>
   1ac3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac40:	f04f 0800 	mov.w	r8, #0
   1ac44:	e6be      	b.n	1a9c4 <mpi_mul_hlp+0x350>
   1ac46:	bf00      	nop

0001ac48 <mbedtls_mpi_cmp_mpi.constprop.6>:
   1ac48:	6843      	ldr	r3, [r0, #4]
   1ac4a:	2b00      	cmp	r3, #0
   1ac4c:	d033      	beq.n	1acb6 <mbedtls_mpi_cmp_mpi.constprop.6+0x6e>
   1ac4e:	b430      	push	{r4, r5}
   1ac50:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1ac54:	6885      	ldr	r5, [r0, #8]
   1ac56:	3a01      	subs	r2, #1
   1ac58:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
   1ac5c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   1ac60:	b11c      	cbz	r4, 1ac6a <mbedtls_mpi_cmp_mpi.constprop.6+0x22>
   1ac62:	e009      	b.n	1ac78 <mbedtls_mpi_cmp_mpi.constprop.6+0x30>
   1ac64:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   1ac68:	b934      	cbnz	r4, 1ac78 <mbedtls_mpi_cmp_mpi.constprop.6+0x30>
   1ac6a:	3b01      	subs	r3, #1
   1ac6c:	d1fa      	bne.n	1ac64 <mbedtls_mpi_cmp_mpi.constprop.6+0x1c>
   1ac6e:	688b      	ldr	r3, [r1, #8]
   1ac70:	6818      	ldr	r0, [r3, #0]
   1ac72:	b9d0      	cbnz	r0, 1acaa <mbedtls_mpi_cmp_mpi.constprop.6+0x62>
   1ac74:	bc30      	pop	{r4, r5}
   1ac76:	4770      	bx	lr
   1ac78:	688a      	ldr	r2, [r1, #8]
   1ac7a:	6812      	ldr	r2, [r2, #0]
   1ac7c:	b192      	cbz	r2, 1aca4 <mbedtls_mpi_cmp_mpi.constprop.6+0x5c>
   1ac7e:	2b01      	cmp	r3, #1
   1ac80:	d810      	bhi.n	1aca4 <mbedtls_mpi_cmp_mpi.constprop.6+0x5c>
   1ac82:	6800      	ldr	r0, [r0, #0]
   1ac84:	680b      	ldr	r3, [r1, #0]
   1ac86:	2800      	cmp	r0, #0
   1ac88:	dd01      	ble.n	1ac8e <mbedtls_mpi_cmp_mpi.constprop.6+0x46>
   1ac8a:	2b00      	cmp	r3, #0
   1ac8c:	db11      	blt.n	1acb2 <mbedtls_mpi_cmp_mpi.constprop.6+0x6a>
   1ac8e:	2b00      	cmp	r3, #0
   1ac90:	dd01      	ble.n	1ac96 <mbedtls_mpi_cmp_mpi.constprop.6+0x4e>
   1ac92:	2800      	cmp	r0, #0
   1ac94:	db16      	blt.n	1acc4 <mbedtls_mpi_cmp_mpi.constprop.6+0x7c>
   1ac96:	682b      	ldr	r3, [r5, #0]
   1ac98:	4293      	cmp	r3, r2
   1ac9a:	d8eb      	bhi.n	1ac74 <mbedtls_mpi_cmp_mpi.constprop.6+0x2c>
   1ac9c:	d306      	bcc.n	1acac <mbedtls_mpi_cmp_mpi.constprop.6+0x64>
   1ac9e:	bc30      	pop	{r4, r5}
   1aca0:	2000      	movs	r0, #0
   1aca2:	4770      	bx	lr
   1aca4:	6800      	ldr	r0, [r0, #0]
   1aca6:	bc30      	pop	{r4, r5}
   1aca8:	4770      	bx	lr
   1acaa:	6808      	ldr	r0, [r1, #0]
   1acac:	4240      	negs	r0, r0
   1acae:	bc30      	pop	{r4, r5}
   1acb0:	4770      	bx	lr
   1acb2:	2001      	movs	r0, #1
   1acb4:	e7de      	b.n	1ac74 <mbedtls_mpi_cmp_mpi.constprop.6+0x2c>
   1acb6:	688b      	ldr	r3, [r1, #8]
   1acb8:	6818      	ldr	r0, [r3, #0]
   1acba:	b900      	cbnz	r0, 1acbe <mbedtls_mpi_cmp_mpi.constprop.6+0x76>
   1acbc:	4770      	bx	lr
   1acbe:	6808      	ldr	r0, [r1, #0]
   1acc0:	4240      	negs	r0, r0
   1acc2:	e7fb      	b.n	1acbc <mbedtls_mpi_cmp_mpi.constprop.6+0x74>
   1acc4:	f04f 30ff 	mov.w	r0, #4294967295
   1acc8:	e7d4      	b.n	1ac74 <mbedtls_mpi_cmp_mpi.constprop.6+0x2c>
   1acca:	bf00      	nop

0001accc <mbedtls_mpi_init>:
   1accc:	b120      	cbz	r0, 1acd8 <mbedtls_mpi_init+0xc>
   1acce:	2300      	movs	r3, #0
   1acd0:	2201      	movs	r2, #1
   1acd2:	e9c0 2300 	strd	r2, r3, [r0]
   1acd6:	6083      	str	r3, [r0, #8]
   1acd8:	4770      	bx	lr
   1acda:	bf00      	nop

0001acdc <mbedtls_mpi_free>:
   1acdc:	b1b0      	cbz	r0, 1ad0c <mbedtls_mpi_free+0x30>
   1acde:	b510      	push	{r4, lr}
   1ace0:	4604      	mov	r4, r0
   1ace2:	6880      	ldr	r0, [r0, #8]
   1ace4:	b160      	cbz	r0, 1ad00 <mbedtls_mpi_free+0x24>
   1ace6:	6862      	ldr	r2, [r4, #4]
   1ace8:	1e53      	subs	r3, r2, #1
   1acea:	b13a      	cbz	r2, 1acfc <mbedtls_mpi_free+0x20>
   1acec:	2200      	movs	r2, #0
   1acee:	3b01      	subs	r3, #1
   1acf0:	1c59      	adds	r1, r3, #1
   1acf2:	6002      	str	r2, [r0, #0]
   1acf4:	f100 0004 	add.w	r0, r0, #4
   1acf8:	d1f9      	bne.n	1acee <mbedtls_mpi_free+0x12>
   1acfa:	68a0      	ldr	r0, [r4, #8]
   1acfc:	f7fe fa72 	bl	191e4 <nrf_free>
   1ad00:	2300      	movs	r3, #0
   1ad02:	2201      	movs	r2, #1
   1ad04:	e9c4 2300 	strd	r2, r3, [r4]
   1ad08:	60a3      	str	r3, [r4, #8]
   1ad0a:	bd10      	pop	{r4, pc}
   1ad0c:	4770      	bx	lr
   1ad0e:	bf00      	nop

0001ad10 <mbedtls_mpi_shrink>:
   1ad10:	b570      	push	{r4, r5, r6, lr}
   1ad12:	6842      	ldr	r2, [r0, #4]
   1ad14:	4605      	mov	r5, r0
   1ad16:	428a      	cmp	r2, r1
   1ad18:	460c      	mov	r4, r1
   1ad1a:	d807      	bhi.n	1ad2c <mbedtls_mpi_shrink+0x1c>
   1ad1c:	f242 7310 	movw	r3, #10000	; 0x2710
   1ad20:	4299      	cmp	r1, r3
   1ad22:	d851      	bhi.n	1adc8 <mbedtls_mpi_shrink+0xb8>
   1ad24:	428a      	cmp	r2, r1
   1ad26:	d335      	bcc.n	1ad94 <mbedtls_mpi_shrink+0x84>
   1ad28:	2000      	movs	r0, #0
   1ad2a:	bd70      	pop	{r4, r5, r6, pc}
   1ad2c:	1e51      	subs	r1, r2, #1
   1ad2e:	d010      	beq.n	1ad52 <mbedtls_mpi_shrink+0x42>
   1ad30:	6883      	ldr	r3, [r0, #8]
   1ad32:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   1ad36:	2800      	cmp	r0, #0
   1ad38:	d149      	bne.n	1adce <mbedtls_mpi_shrink+0xbe>
   1ad3a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1ad3e:	3a01      	subs	r2, #1
   1ad40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1ad44:	e003      	b.n	1ad4e <mbedtls_mpi_shrink+0x3e>
   1ad46:	f853 0d04 	ldr.w	r0, [r3, #-4]!
   1ad4a:	b918      	cbnz	r0, 1ad54 <mbedtls_mpi_shrink+0x44>
   1ad4c:	4611      	mov	r1, r2
   1ad4e:	1e4a      	subs	r2, r1, #1
   1ad50:	d1f9      	bne.n	1ad46 <mbedtls_mpi_shrink+0x36>
   1ad52:	2101      	movs	r1, #1
   1ad54:	428c      	cmp	r4, r1
   1ad56:	bf38      	it	cc
   1ad58:	460c      	movcc	r4, r1
   1ad5a:	2104      	movs	r1, #4
   1ad5c:	4620      	mov	r0, r4
   1ad5e:	f7fe fa2d 	bl	191bc <nrf_calloc>
   1ad62:	4606      	mov	r6, r0
   1ad64:	b380      	cbz	r0, 1adc8 <mbedtls_mpi_shrink+0xb8>
   1ad66:	68a9      	ldr	r1, [r5, #8]
   1ad68:	b181      	cbz	r1, 1ad8c <mbedtls_mpi_shrink+0x7c>
   1ad6a:	00a2      	lsls	r2, r4, #2
   1ad6c:	f7f2 ff34 	bl	dbd8 <memcpy>
   1ad70:	e9d5 2001 	ldrd	r2, r0, [r5, #4]
   1ad74:	1e53      	subs	r3, r2, #1
   1ad76:	b13a      	cbz	r2, 1ad88 <mbedtls_mpi_shrink+0x78>
   1ad78:	2200      	movs	r2, #0
   1ad7a:	3b01      	subs	r3, #1
   1ad7c:	1c59      	adds	r1, r3, #1
   1ad7e:	6002      	str	r2, [r0, #0]
   1ad80:	f100 0004 	add.w	r0, r0, #4
   1ad84:	d1f9      	bne.n	1ad7a <mbedtls_mpi_shrink+0x6a>
   1ad86:	68a8      	ldr	r0, [r5, #8]
   1ad88:	f7fe fa2c 	bl	191e4 <nrf_free>
   1ad8c:	e9c5 4601 	strd	r4, r6, [r5, #4]
   1ad90:	2000      	movs	r0, #0
   1ad92:	bd70      	pop	{r4, r5, r6, pc}
   1ad94:	2104      	movs	r1, #4
   1ad96:	4620      	mov	r0, r4
   1ad98:	f7fe fa10 	bl	191bc <nrf_calloc>
   1ad9c:	4606      	mov	r6, r0
   1ad9e:	b198      	cbz	r0, 1adc8 <mbedtls_mpi_shrink+0xb8>
   1ada0:	68a9      	ldr	r1, [r5, #8]
   1ada2:	2900      	cmp	r1, #0
   1ada4:	d0f2      	beq.n	1ad8c <mbedtls_mpi_shrink+0x7c>
   1ada6:	686a      	ldr	r2, [r5, #4]
   1ada8:	0092      	lsls	r2, r2, #2
   1adaa:	f7f2 ff15 	bl	dbd8 <memcpy>
   1adae:	e9d5 2001 	ldrd	r2, r0, [r5, #4]
   1adb2:	1e53      	subs	r3, r2, #1
   1adb4:	2a00      	cmp	r2, #0
   1adb6:	d0e7      	beq.n	1ad88 <mbedtls_mpi_shrink+0x78>
   1adb8:	2200      	movs	r2, #0
   1adba:	3b01      	subs	r3, #1
   1adbc:	1c59      	adds	r1, r3, #1
   1adbe:	6002      	str	r2, [r0, #0]
   1adc0:	f100 0004 	add.w	r0, r0, #4
   1adc4:	d1f9      	bne.n	1adba <mbedtls_mpi_shrink+0xaa>
   1adc6:	e7de      	b.n	1ad86 <mbedtls_mpi_shrink+0x76>
   1adc8:	f06f 000f 	mvn.w	r0, #15
   1adcc:	bd70      	pop	{r4, r5, r6, pc}
   1adce:	4611      	mov	r1, r2
   1add0:	e7c0      	b.n	1ad54 <mbedtls_mpi_shrink+0x44>
   1add2:	bf00      	nop

0001add4 <mbedtls_mpi_copy>:
   1add4:	4288      	cmp	r0, r1
   1add6:	d052      	beq.n	1ae7e <mbedtls_mpi_copy+0xaa>
   1add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1adda:	688a      	ldr	r2, [r1, #8]
   1addc:	460e      	mov	r6, r1
   1adde:	4605      	mov	r5, r0
   1ade0:	2a00      	cmp	r2, #0
   1ade2:	d04e      	beq.n	1ae82 <mbedtls_mpi_copy+0xae>
   1ade4:	6849      	ldr	r1, [r1, #4]
   1ade6:	1e4b      	subs	r3, r1, #1
   1ade8:	d00e      	beq.n	1ae08 <mbedtls_mpi_copy+0x34>
   1adea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   1adee:	2800      	cmp	r0, #0
   1adf0:	d13b      	bne.n	1ae6a <mbedtls_mpi_copy+0x96>
   1adf2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1adf6:	3901      	subs	r1, #1
   1adf8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   1adfc:	e002      	b.n	1ae04 <mbedtls_mpi_copy+0x30>
   1adfe:	f852 0d04 	ldr.w	r0, [r2, #-4]!
   1ae02:	bb90      	cbnz	r0, 1ae6a <mbedtls_mpi_copy+0x96>
   1ae04:	3b01      	subs	r3, #1
   1ae06:	d1fa      	bne.n	1adfe <mbedtls_mpi_copy+0x2a>
   1ae08:	2401      	movs	r4, #1
   1ae0a:	6833      	ldr	r3, [r6, #0]
   1ae0c:	602b      	str	r3, [r5, #0]
   1ae0e:	686a      	ldr	r2, [r5, #4]
   1ae10:	42a2      	cmp	r2, r4
   1ae12:	d30c      	bcc.n	1ae2e <mbedtls_mpi_copy+0x5a>
   1ae14:	68af      	ldr	r7, [r5, #8]
   1ae16:	0092      	lsls	r2, r2, #2
   1ae18:	2100      	movs	r1, #0
   1ae1a:	4638      	mov	r0, r7
   1ae1c:	f00f fd62 	bl	2a8e4 <memset>
   1ae20:	00a2      	lsls	r2, r4, #2
   1ae22:	68b1      	ldr	r1, [r6, #8]
   1ae24:	68a8      	ldr	r0, [r5, #8]
   1ae26:	f7f2 fed7 	bl	dbd8 <memcpy>
   1ae2a:	2000      	movs	r0, #0
   1ae2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ae2e:	2104      	movs	r1, #4
   1ae30:	4620      	mov	r0, r4
   1ae32:	f7fe f9c3 	bl	191bc <nrf_calloc>
   1ae36:	4607      	mov	r7, r0
   1ae38:	b1f0      	cbz	r0, 1ae78 <mbedtls_mpi_copy+0xa4>
   1ae3a:	68a9      	ldr	r1, [r5, #8]
   1ae3c:	b189      	cbz	r1, 1ae62 <mbedtls_mpi_copy+0x8e>
   1ae3e:	686a      	ldr	r2, [r5, #4]
   1ae40:	0092      	lsls	r2, r2, #2
   1ae42:	f7f2 fec9 	bl	dbd8 <memcpy>
   1ae46:	e9d5 2001 	ldrd	r2, r0, [r5, #4]
   1ae4a:	1e53      	subs	r3, r2, #1
   1ae4c:	b13a      	cbz	r2, 1ae5e <mbedtls_mpi_copy+0x8a>
   1ae4e:	2200      	movs	r2, #0
   1ae50:	3b01      	subs	r3, #1
   1ae52:	1c59      	adds	r1, r3, #1
   1ae54:	6002      	str	r2, [r0, #0]
   1ae56:	f100 0004 	add.w	r0, r0, #4
   1ae5a:	d1f9      	bne.n	1ae50 <mbedtls_mpi_copy+0x7c>
   1ae5c:	68a8      	ldr	r0, [r5, #8]
   1ae5e:	f7fe f9c1 	bl	191e4 <nrf_free>
   1ae62:	4622      	mov	r2, r4
   1ae64:	e9c5 4701 	strd	r4, r7, [r5, #4]
   1ae68:	e7d5      	b.n	1ae16 <mbedtls_mpi_copy+0x42>
   1ae6a:	f242 7210 	movw	r2, #10000	; 0x2710
   1ae6e:	6831      	ldr	r1, [r6, #0]
   1ae70:	1c5c      	adds	r4, r3, #1
   1ae72:	4294      	cmp	r4, r2
   1ae74:	6029      	str	r1, [r5, #0]
   1ae76:	d9ca      	bls.n	1ae0e <mbedtls_mpi_copy+0x3a>
   1ae78:	f06f 000f 	mvn.w	r0, #15
   1ae7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ae7e:	2000      	movs	r0, #0
   1ae80:	4770      	bx	lr
   1ae82:	2800      	cmp	r0, #0
   1ae84:	d0d1      	beq.n	1ae2a <mbedtls_mpi_copy+0x56>
   1ae86:	6880      	ldr	r0, [r0, #8]
   1ae88:	b158      	cbz	r0, 1aea2 <mbedtls_mpi_copy+0xce>
   1ae8a:	6869      	ldr	r1, [r5, #4]
   1ae8c:	1e4b      	subs	r3, r1, #1
   1ae8e:	b131      	cbz	r1, 1ae9e <mbedtls_mpi_copy+0xca>
   1ae90:	3b01      	subs	r3, #1
   1ae92:	1c5c      	adds	r4, r3, #1
   1ae94:	6002      	str	r2, [r0, #0]
   1ae96:	f100 0004 	add.w	r0, r0, #4
   1ae9a:	d1f9      	bne.n	1ae90 <mbedtls_mpi_copy+0xbc>
   1ae9c:	68a8      	ldr	r0, [r5, #8]
   1ae9e:	f7fe f9a1 	bl	191e4 <nrf_free>
   1aea2:	2000      	movs	r0, #0
   1aea4:	2301      	movs	r3, #1
   1aea6:	e9c5 3000 	strd	r3, r0, [r5]
   1aeaa:	60a8      	str	r0, [r5, #8]
   1aeac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aeae:	bf00      	nop

0001aeb0 <mbedtls_mpi_sub_abs.constprop.8>:
   1aeb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aeb2:	684b      	ldr	r3, [r1, #4]
   1aeb4:	460d      	mov	r5, r1
   1aeb6:	b085      	sub	sp, #20
   1aeb8:	4614      	mov	r4, r2
   1aeba:	4606      	mov	r6, r0
   1aebc:	6851      	ldr	r1, [r2, #4]
   1aebe:	b17b      	cbz	r3, 1aee0 <mbedtls_mpi_sub_abs.constprop.8+0x30>
   1aec0:	68a8      	ldr	r0, [r5, #8]
   1aec2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1aec6:	3a01      	subs	r2, #1
   1aec8:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   1aecc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   1aed0:	b127      	cbz	r7, 1aedc <mbedtls_mpi_sub_abs.constprop.8+0x2c>
   1aed2:	e04f      	b.n	1af74 <mbedtls_mpi_sub_abs.constprop.8+0xc4>
   1aed4:	f850 2d04 	ldr.w	r2, [r0, #-4]!
   1aed8:	2a00      	cmp	r2, #0
   1aeda:	d14b      	bne.n	1af74 <mbedtls_mpi_sub_abs.constprop.8+0xc4>
   1aedc:	3b01      	subs	r3, #1
   1aede:	d1f9      	bne.n	1aed4 <mbedtls_mpi_sub_abs.constprop.8+0x24>
   1aee0:	b189      	cbz	r1, 1af06 <mbedtls_mpi_sub_abs.constprop.8+0x56>
   1aee2:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
   1aee6:	68a7      	ldr	r7, [r4, #8]
   1aee8:	3801      	subs	r0, #1
   1aeea:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   1aeee:	2a00      	cmp	r2, #0
   1aef0:	f040 8099 	bne.w	1b026 <mbedtls_mpi_sub_abs.constprop.8+0x176>
   1aef4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1aef8:	e003      	b.n	1af02 <mbedtls_mpi_sub_abs.constprop.8+0x52>
   1aefa:	f850 2d04 	ldr.w	r2, [r0, #-4]!
   1aefe:	2a00      	cmp	r2, #0
   1af00:	d142      	bne.n	1af88 <mbedtls_mpi_sub_abs.constprop.8+0xd8>
   1af02:	3901      	subs	r1, #1
   1af04:	d1f9      	bne.n	1aefa <mbedtls_mpi_sub_abs.constprop.8+0x4a>
   1af06:	2300      	movs	r3, #0
   1af08:	2201      	movs	r2, #1
   1af0a:	42b4      	cmp	r4, r6
   1af0c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1af10:	9303      	str	r3, [sp, #12]
   1af12:	d07f      	beq.n	1b014 <mbedtls_mpi_sub_abs.constprop.8+0x164>
   1af14:	42b5      	cmp	r5, r6
   1af16:	d005      	beq.n	1af24 <mbedtls_mpi_sub_abs.constprop.8+0x74>
   1af18:	4629      	mov	r1, r5
   1af1a:	4630      	mov	r0, r6
   1af1c:	f7ff ff5a 	bl	1add4 <mbedtls_mpi_copy>
   1af20:	4607      	mov	r7, r0
   1af22:	b9a8      	cbnz	r0, 1af50 <mbedtls_mpi_sub_abs.constprop.8+0xa0>
   1af24:	2301      	movs	r3, #1
   1af26:	6033      	str	r3, [r6, #0]
   1af28:	6860      	ldr	r0, [r4, #4]
   1af2a:	b180      	cbz	r0, 1af4e <mbedtls_mpi_sub_abs.constprop.8+0x9e>
   1af2c:	f8d4 c008 	ldr.w	ip, [r4, #8]
   1af30:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1af34:	3b01      	subs	r3, #1
   1af36:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
   1af3a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
   1af3e:	b122      	cbz	r2, 1af4a <mbedtls_mpi_sub_abs.constprop.8+0x9a>
   1af40:	e042      	b.n	1afc8 <mbedtls_mpi_sub_abs.constprop.8+0x118>
   1af42:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1af46:	2a00      	cmp	r2, #0
   1af48:	d13e      	bne.n	1afc8 <mbedtls_mpi_sub_abs.constprop.8+0x118>
   1af4a:	3801      	subs	r0, #1
   1af4c:	d1f9      	bne.n	1af42 <mbedtls_mpi_sub_abs.constprop.8+0x92>
   1af4e:	2700      	movs	r7, #0
   1af50:	9803      	ldr	r0, [sp, #12]
   1af52:	b160      	cbz	r0, 1af6e <mbedtls_mpi_sub_abs.constprop.8+0xbe>
   1af54:	9a02      	ldr	r2, [sp, #8]
   1af56:	1e53      	subs	r3, r2, #1
   1af58:	b13a      	cbz	r2, 1af6a <mbedtls_mpi_sub_abs.constprop.8+0xba>
   1af5a:	2200      	movs	r2, #0
   1af5c:	3b01      	subs	r3, #1
   1af5e:	1c59      	adds	r1, r3, #1
   1af60:	6002      	str	r2, [r0, #0]
   1af62:	f100 0004 	add.w	r0, r0, #4
   1af66:	d1f9      	bne.n	1af5c <mbedtls_mpi_sub_abs.constprop.8+0xac>
   1af68:	9803      	ldr	r0, [sp, #12]
   1af6a:	f7fe f93b 	bl	191e4 <nrf_free>
   1af6e:	4638      	mov	r0, r7
   1af70:	b005      	add	sp, #20
   1af72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1af74:	2900      	cmp	r1, #0
   1af76:	d0c6      	beq.n	1af06 <mbedtls_mpi_sub_abs.constprop.8+0x56>
   1af78:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
   1af7c:	68a7      	ldr	r7, [r4, #8]
   1af7e:	3801      	subs	r0, #1
   1af80:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   1af84:	2a00      	cmp	r2, #0
   1af86:	d0b5      	beq.n	1aef4 <mbedtls_mpi_sub_abs.constprop.8+0x44>
   1af88:	428b      	cmp	r3, r1
   1af8a:	d8bc      	bhi.n	1af06 <mbedtls_mpi_sub_abs.constprop.8+0x56>
   1af8c:	d34b      	bcc.n	1b026 <mbedtls_mpi_sub_abs.constprop.8+0x176>
   1af8e:	2b00      	cmp	r3, #0
   1af90:	d0b9      	beq.n	1af06 <mbedtls_mpi_sub_abs.constprop.8+0x56>
   1af92:	68a8      	ldr	r0, [r5, #8]
   1af94:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   1af98:	3901      	subs	r1, #1
   1af9a:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
   1af9e:	f857 e021 	ldr.w	lr, [r7, r1, lsl #2]
   1afa2:	0089      	lsls	r1, r1, #2
   1afa4:	45e6      	cmp	lr, ip
   1afa6:	4408      	add	r0, r1
   1afa8:	eb07 0201 	add.w	r2, r7, r1
   1afac:	d3ab      	bcc.n	1af06 <mbedtls_mpi_sub_abs.constprop.8+0x56>
   1afae:	d83a      	bhi.n	1b026 <mbedtls_mpi_sub_abs.constprop.8+0x176>
   1afb0:	4601      	mov	r1, r0
   1afb2:	e006      	b.n	1afc2 <mbedtls_mpi_sub_abs.constprop.8+0x112>
   1afb4:	f851 7d04 	ldr.w	r7, [r1, #-4]!
   1afb8:	f852 0d04 	ldr.w	r0, [r2, #-4]!
   1afbc:	4287      	cmp	r7, r0
   1afbe:	d8a2      	bhi.n	1af06 <mbedtls_mpi_sub_abs.constprop.8+0x56>
   1afc0:	d331      	bcc.n	1b026 <mbedtls_mpi_sub_abs.constprop.8+0x176>
   1afc2:	3b01      	subs	r3, #1
   1afc4:	d1f6      	bne.n	1afb4 <mbedtls_mpi_sub_abs.constprop.8+0x104>
   1afc6:	e79e      	b.n	1af06 <mbedtls_mpi_sub_abs.constprop.8+0x56>
   1afc8:	2500      	movs	r5, #0
   1afca:	462b      	mov	r3, r5
   1afcc:	68b1      	ldr	r1, [r6, #8]
   1afce:	f851 6b04 	ldr.w	r6, [r1], #4
   1afd2:	3501      	adds	r5, #1
   1afd4:	1af2      	subs	r2, r6, r3
   1afd6:	f841 2c04 	str.w	r2, [r1, #-4]
   1afda:	f85c 7b04 	ldr.w	r7, [ip], #4
   1afde:	460c      	mov	r4, r1
   1afe0:	42ba      	cmp	r2, r7
   1afe2:	bf2c      	ite	cs
   1afe4:	f04f 0e00 	movcs.w	lr, #0
   1afe8:	f04f 0e01 	movcc.w	lr, #1
   1afec:	1bd2      	subs	r2, r2, r7
   1afee:	429e      	cmp	r6, r3
   1aff0:	bf2c      	ite	cs
   1aff2:	4673      	movcs	r3, lr
   1aff4:	f10e 0301 	addcc.w	r3, lr, #1
   1aff8:	4285      	cmp	r5, r0
   1affa:	f841 2c04 	str.w	r2, [r1, #-4]
   1affe:	d3e6      	bcc.n	1afce <mbedtls_mpi_sub_abs.constprop.8+0x11e>
   1b000:	b90b      	cbnz	r3, 1b006 <mbedtls_mpi_sub_abs.constprop.8+0x156>
   1b002:	e7a4      	b.n	1af4e <mbedtls_mpi_sub_abs.constprop.8+0x9e>
   1b004:	2301      	movs	r3, #1
   1b006:	6822      	ldr	r2, [r4, #0]
   1b008:	1ad1      	subs	r1, r2, r3
   1b00a:	429a      	cmp	r2, r3
   1b00c:	f844 1b04 	str.w	r1, [r4], #4
   1b010:	d3f8      	bcc.n	1b004 <mbedtls_mpi_sub_abs.constprop.8+0x154>
   1b012:	e79c      	b.n	1af4e <mbedtls_mpi_sub_abs.constprop.8+0x9e>
   1b014:	4621      	mov	r1, r4
   1b016:	a801      	add	r0, sp, #4
   1b018:	f7ff fedc 	bl	1add4 <mbedtls_mpi_copy>
   1b01c:	4607      	mov	r7, r0
   1b01e:	2800      	cmp	r0, #0
   1b020:	d196      	bne.n	1af50 <mbedtls_mpi_sub_abs.constprop.8+0xa0>
   1b022:	ac01      	add	r4, sp, #4
   1b024:	e776      	b.n	1af14 <mbedtls_mpi_sub_abs.constprop.8+0x64>
   1b026:	f06f 0709 	mvn.w	r7, #9
   1b02a:	4638      	mov	r0, r7
   1b02c:	b005      	add	sp, #20
   1b02e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b030 <mbedtls_mpi_safe_cond_assign>:
   1b030:	f242 7310 	movw	r3, #10000	; 0x2710
   1b034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b038:	684f      	ldr	r7, [r1, #4]
   1b03a:	4256      	negs	r6, r2
   1b03c:	4316      	orrs	r6, r2
   1b03e:	429f      	cmp	r7, r3
   1b040:	f3c6 16c0 	ubfx	r6, r6, #7, #1
   1b044:	d84f      	bhi.n	1b0e6 <mbedtls_mpi_safe_cond_assign+0xb6>
   1b046:	6842      	ldr	r2, [r0, #4]
   1b048:	4604      	mov	r4, r0
   1b04a:	4297      	cmp	r7, r2
   1b04c:	460d      	mov	r5, r1
   1b04e:	d82c      	bhi.n	1b0aa <mbedtls_mpi_safe_cond_assign+0x7a>
   1b050:	6829      	ldr	r1, [r5, #0]
   1b052:	6823      	ldr	r3, [r4, #0]
   1b054:	fb01 f106 	mul.w	r1, r1, r6
   1b058:	f1c6 0701 	rsb	r7, r6, #1
   1b05c:	fb03 1307 	mla	r3, r3, r7, r1
   1b060:	6023      	str	r3, [r4, #0]
   1b062:	686b      	ldr	r3, [r5, #4]
   1b064:	b18b      	cbz	r3, 1b08a <mbedtls_mpi_safe_cond_assign+0x5a>
   1b066:	2300      	movs	r3, #0
   1b068:	68a1      	ldr	r1, [r4, #8]
   1b06a:	68aa      	ldr	r2, [r5, #8]
   1b06c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
   1b070:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1b074:	fb00 f007 	mul.w	r0, r0, r7
   1b078:	fb02 0206 	mla	r2, r2, r6, r0
   1b07c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1b080:	686a      	ldr	r2, [r5, #4]
   1b082:	3301      	adds	r3, #1
   1b084:	429a      	cmp	r2, r3
   1b086:	d8ef      	bhi.n	1b068 <mbedtls_mpi_safe_cond_assign+0x38>
   1b088:	6862      	ldr	r2, [r4, #4]
   1b08a:	4293      	cmp	r3, r2
   1b08c:	d20a      	bcs.n	1b0a4 <mbedtls_mpi_safe_cond_assign+0x74>
   1b08e:	009a      	lsls	r2, r3, #2
   1b090:	68a0      	ldr	r0, [r4, #8]
   1b092:	3301      	adds	r3, #1
   1b094:	5881      	ldr	r1, [r0, r2]
   1b096:	fb07 f101 	mul.w	r1, r7, r1
   1b09a:	5081      	str	r1, [r0, r2]
   1b09c:	6861      	ldr	r1, [r4, #4]
   1b09e:	3204      	adds	r2, #4
   1b0a0:	4299      	cmp	r1, r3
   1b0a2:	d8f5      	bhi.n	1b090 <mbedtls_mpi_safe_cond_assign+0x60>
   1b0a4:	2000      	movs	r0, #0
   1b0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b0aa:	2104      	movs	r1, #4
   1b0ac:	4638      	mov	r0, r7
   1b0ae:	f7fe f885 	bl	191bc <nrf_calloc>
   1b0b2:	4680      	mov	r8, r0
   1b0b4:	b1b8      	cbz	r0, 1b0e6 <mbedtls_mpi_safe_cond_assign+0xb6>
   1b0b6:	68a1      	ldr	r1, [r4, #8]
   1b0b8:	b189      	cbz	r1, 1b0de <mbedtls_mpi_safe_cond_assign+0xae>
   1b0ba:	6862      	ldr	r2, [r4, #4]
   1b0bc:	0092      	lsls	r2, r2, #2
   1b0be:	f7f2 fd8b 	bl	dbd8 <memcpy>
   1b0c2:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
   1b0c6:	1e53      	subs	r3, r2, #1
   1b0c8:	b13a      	cbz	r2, 1b0da <mbedtls_mpi_safe_cond_assign+0xaa>
   1b0ca:	2200      	movs	r2, #0
   1b0cc:	3b01      	subs	r3, #1
   1b0ce:	1c59      	adds	r1, r3, #1
   1b0d0:	6002      	str	r2, [r0, #0]
   1b0d2:	f100 0004 	add.w	r0, r0, #4
   1b0d6:	d1f9      	bne.n	1b0cc <mbedtls_mpi_safe_cond_assign+0x9c>
   1b0d8:	68a0      	ldr	r0, [r4, #8]
   1b0da:	f7fe f883 	bl	191e4 <nrf_free>
   1b0de:	463a      	mov	r2, r7
   1b0e0:	e9c4 7801 	strd	r7, r8, [r4, #4]
   1b0e4:	e7b4      	b.n	1b050 <mbedtls_mpi_safe_cond_assign+0x20>
   1b0e6:	f06f 000f 	mvn.w	r0, #15
   1b0ea:	e7dc      	b.n	1b0a6 <mbedtls_mpi_safe_cond_assign+0x76>

0001b0ec <mbedtls_mpi_lset>:
   1b0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b0ee:	6845      	ldr	r5, [r0, #4]
   1b0f0:	4604      	mov	r4, r0
   1b0f2:	460e      	mov	r6, r1
   1b0f4:	b19d      	cbz	r5, 1b11e <mbedtls_mpi_lset+0x32>
   1b0f6:	6887      	ldr	r7, [r0, #8]
   1b0f8:	00aa      	lsls	r2, r5, #2
   1b0fa:	4638      	mov	r0, r7
   1b0fc:	2100      	movs	r1, #0
   1b0fe:	f00f fbf1 	bl	2a8e4 <memset>
   1b102:	2e00      	cmp	r6, #0
   1b104:	bfac      	ite	ge
   1b106:	2301      	movge	r3, #1
   1b108:	f04f 33ff 	movlt.w	r3, #4294967295
   1b10c:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
   1b110:	68a2      	ldr	r2, [r4, #8]
   1b112:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
   1b116:	6011      	str	r1, [r2, #0]
   1b118:	6023      	str	r3, [r4, #0]
   1b11a:	2000      	movs	r0, #0
   1b11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b11e:	2104      	movs	r1, #4
   1b120:	2001      	movs	r0, #1
   1b122:	f7fe f84b 	bl	191bc <nrf_calloc>
   1b126:	4607      	mov	r7, r0
   1b128:	b1b8      	cbz	r0, 1b15a <mbedtls_mpi_lset+0x6e>
   1b12a:	68a1      	ldr	r1, [r4, #8]
   1b12c:	b181      	cbz	r1, 1b150 <mbedtls_mpi_lset+0x64>
   1b12e:	6862      	ldr	r2, [r4, #4]
   1b130:	0092      	lsls	r2, r2, #2
   1b132:	f7f2 fd51 	bl	dbd8 <memcpy>
   1b136:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
   1b13a:	1e53      	subs	r3, r2, #1
   1b13c:	b132      	cbz	r2, 1b14c <mbedtls_mpi_lset+0x60>
   1b13e:	3b01      	subs	r3, #1
   1b140:	1c5a      	adds	r2, r3, #1
   1b142:	6005      	str	r5, [r0, #0]
   1b144:	f100 0004 	add.w	r0, r0, #4
   1b148:	d1f9      	bne.n	1b13e <mbedtls_mpi_lset+0x52>
   1b14a:	68a0      	ldr	r0, [r4, #8]
   1b14c:	f7fe f84a 	bl	191e4 <nrf_free>
   1b150:	2301      	movs	r3, #1
   1b152:	2204      	movs	r2, #4
   1b154:	e9c4 3701 	strd	r3, r7, [r4, #4]
   1b158:	e7cf      	b.n	1b0fa <mbedtls_mpi_lset+0xe>
   1b15a:	f06f 000f 	mvn.w	r0, #15
   1b15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b160 <mbedtls_mpi_get_bit>:
   1b160:	6843      	ldr	r3, [r0, #4]
   1b162:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
   1b166:	d209      	bcs.n	1b17c <mbedtls_mpi_get_bit+0x1c>
   1b168:	6883      	ldr	r3, [r0, #8]
   1b16a:	094a      	lsrs	r2, r1, #5
   1b16c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1b170:	f001 011f 	and.w	r1, r1, #31
   1b174:	40c8      	lsrs	r0, r1
   1b176:	f000 0001 	and.w	r0, r0, #1
   1b17a:	4770      	bx	lr
   1b17c:	2000      	movs	r0, #0
   1b17e:	4770      	bx	lr

0001b180 <mbedtls_mpi_bitlen>:
   1b180:	6843      	ldr	r3, [r0, #4]
   1b182:	b313      	cbz	r3, 1b1ca <mbedtls_mpi_bitlen+0x4a>
   1b184:	b410      	push	{r4}
   1b186:	6882      	ldr	r2, [r0, #8]
   1b188:	1e58      	subs	r0, r3, #1
   1b18a:	d024      	beq.n	1b1d6 <mbedtls_mpi_bitlen+0x56>
   1b18c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
   1b190:	b9e9      	cbnz	r1, 1b1ce <mbedtls_mpi_bitlen+0x4e>
   1b192:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b196:	3b01      	subs	r3, #1
   1b198:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1b19c:	e002      	b.n	1b1a4 <mbedtls_mpi_bitlen+0x24>
   1b19e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   1b1a2:	b9a1      	cbnz	r1, 1b1ce <mbedtls_mpi_bitlen+0x4e>
   1b1a4:	3801      	subs	r0, #1
   1b1a6:	d1fa      	bne.n	1b19e <mbedtls_mpi_bitlen+0x1e>
   1b1a8:	2420      	movs	r4, #32
   1b1aa:	6811      	ldr	r1, [r2, #0]
   1b1ac:	2200      	movs	r2, #0
   1b1ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1b1b2:	e002      	b.n	1b1ba <mbedtls_mpi_bitlen+0x3a>
   1b1b4:	3201      	adds	r2, #1
   1b1b6:	2a20      	cmp	r2, #32
   1b1b8:	d004      	beq.n	1b1c4 <mbedtls_mpi_bitlen+0x44>
   1b1ba:	420b      	tst	r3, r1
   1b1bc:	ea4f 0353 	mov.w	r3, r3, lsr #1
   1b1c0:	d0f8      	beq.n	1b1b4 <mbedtls_mpi_bitlen+0x34>
   1b1c2:	1aa0      	subs	r0, r4, r2
   1b1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b1c8:	4770      	bx	lr
   1b1ca:	4618      	mov	r0, r3
   1b1cc:	4770      	bx	lr
   1b1ce:	0140      	lsls	r0, r0, #5
   1b1d0:	f100 0420 	add.w	r4, r0, #32
   1b1d4:	e7ea      	b.n	1b1ac <mbedtls_mpi_bitlen+0x2c>
   1b1d6:	6811      	ldr	r1, [r2, #0]
   1b1d8:	2420      	movs	r4, #32
   1b1da:	e7e7      	b.n	1b1ac <mbedtls_mpi_bitlen+0x2c>

0001b1dc <mbedtls_mpi_size>:
   1b1dc:	6843      	ldr	r3, [r0, #4]
   1b1de:	b323      	cbz	r3, 1b22a <mbedtls_mpi_size+0x4e>
   1b1e0:	b410      	push	{r4}
   1b1e2:	6882      	ldr	r2, [r0, #8]
   1b1e4:	1e58      	subs	r0, r3, #1
   1b1e6:	d026      	beq.n	1b236 <mbedtls_mpi_size+0x5a>
   1b1e8:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
   1b1ec:	b9f9      	cbnz	r1, 1b22e <mbedtls_mpi_size+0x52>
   1b1ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b1f2:	3b01      	subs	r3, #1
   1b1f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1b1f8:	e002      	b.n	1b200 <mbedtls_mpi_size+0x24>
   1b1fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   1b1fe:	b9b1      	cbnz	r1, 1b22e <mbedtls_mpi_size+0x52>
   1b200:	3801      	subs	r0, #1
   1b202:	d1fa      	bne.n	1b1fa <mbedtls_mpi_size+0x1e>
   1b204:	2420      	movs	r4, #32
   1b206:	6811      	ldr	r1, [r2, #0]
   1b208:	2200      	movs	r2, #0
   1b20a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1b20e:	e002      	b.n	1b216 <mbedtls_mpi_size+0x3a>
   1b210:	3201      	adds	r2, #1
   1b212:	2a20      	cmp	r2, #32
   1b214:	d004      	beq.n	1b220 <mbedtls_mpi_size+0x44>
   1b216:	420b      	tst	r3, r1
   1b218:	ea4f 0353 	mov.w	r3, r3, lsr #1
   1b21c:	d0f8      	beq.n	1b210 <mbedtls_mpi_size+0x34>
   1b21e:	1aa0      	subs	r0, r4, r2
   1b220:	3007      	adds	r0, #7
   1b222:	08c0      	lsrs	r0, r0, #3
   1b224:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b228:	4770      	bx	lr
   1b22a:	4618      	mov	r0, r3
   1b22c:	4770      	bx	lr
   1b22e:	0140      	lsls	r0, r0, #5
   1b230:	f100 0420 	add.w	r4, r0, #32
   1b234:	e7e8      	b.n	1b208 <mbedtls_mpi_size+0x2c>
   1b236:	6811      	ldr	r1, [r2, #0]
   1b238:	2420      	movs	r4, #32
   1b23a:	e7e5      	b.n	1b208 <mbedtls_mpi_size+0x2c>

0001b23c <mbedtls_mpi_read_binary>:
   1b23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b240:	4605      	mov	r5, r0
   1b242:	460f      	mov	r7, r1
   1b244:	4616      	mov	r6, r2
   1b246:	2a00      	cmp	r2, #0
   1b248:	d07e      	beq.n	1b348 <mbedtls_mpi_read_binary+0x10c>
   1b24a:	780c      	ldrb	r4, [r1, #0]
   1b24c:	460b      	mov	r3, r1
   1b24e:	b124      	cbz	r4, 1b25a <mbedtls_mpi_read_binary+0x1e>
   1b250:	e07e      	b.n	1b350 <mbedtls_mpi_read_binary+0x114>
   1b252:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b256:	2a00      	cmp	r2, #0
   1b258:	d146      	bne.n	1b2e8 <mbedtls_mpi_read_binary+0xac>
   1b25a:	3401      	adds	r4, #1
   1b25c:	42a6      	cmp	r6, r4
   1b25e:	d1f8      	bne.n	1b252 <mbedtls_mpi_read_binary+0x16>
   1b260:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1b264:	f1b8 0f00 	cmp.w	r8, #0
   1b268:	d169      	bne.n	1b33e <mbedtls_mpi_read_binary+0x102>
   1b26a:	2104      	movs	r1, #4
   1b26c:	2001      	movs	r0, #1
   1b26e:	f7fd ffa5 	bl	191bc <nrf_calloc>
   1b272:	4681      	mov	r9, r0
   1b274:	2800      	cmp	r0, #0
   1b276:	d06d      	beq.n	1b354 <mbedtls_mpi_read_binary+0x118>
   1b278:	68a9      	ldr	r1, [r5, #8]
   1b27a:	b189      	cbz	r1, 1b2a0 <mbedtls_mpi_read_binary+0x64>
   1b27c:	686a      	ldr	r2, [r5, #4]
   1b27e:	0092      	lsls	r2, r2, #2
   1b280:	f7f2 fcaa 	bl	dbd8 <memcpy>
   1b284:	e9d5 2001 	ldrd	r2, r0, [r5, #4]
   1b288:	1e53      	subs	r3, r2, #1
   1b28a:	b13a      	cbz	r2, 1b29c <mbedtls_mpi_read_binary+0x60>
   1b28c:	4642      	mov	r2, r8
   1b28e:	3b01      	subs	r3, #1
   1b290:	1c59      	adds	r1, r3, #1
   1b292:	6002      	str	r2, [r0, #0]
   1b294:	f100 0004 	add.w	r0, r0, #4
   1b298:	d1f9      	bne.n	1b28e <mbedtls_mpi_read_binary+0x52>
   1b29a:	68a8      	ldr	r0, [r5, #8]
   1b29c:	f7fd ffa2 	bl	191e4 <nrf_free>
   1b2a0:	2301      	movs	r3, #1
   1b2a2:	2204      	movs	r2, #4
   1b2a4:	e9c5 3901 	strd	r3, r9, [r5, #4]
   1b2a8:	2100      	movs	r1, #0
   1b2aa:	4648      	mov	r0, r9
   1b2ac:	f00f fb1a 	bl	2a8e4 <memset>
   1b2b0:	2300      	movs	r3, #0
   1b2b2:	2201      	movs	r2, #1
   1b2b4:	68a9      	ldr	r1, [r5, #8]
   1b2b6:	42a6      	cmp	r6, r4
   1b2b8:	600b      	str	r3, [r1, #0]
   1b2ba:	602a      	str	r2, [r5, #0]
   1b2bc:	d911      	bls.n	1b2e2 <mbedtls_mpi_read_binary+0xa6>
   1b2be:	eb07 0c06 	add.w	ip, r7, r6
   1b2c2:	1b34      	subs	r4, r6, r4
   1b2c4:	68ae      	ldr	r6, [r5, #8]
   1b2c6:	f023 0103 	bic.w	r1, r3, #3
   1b2ca:	00df      	lsls	r7, r3, #3
   1b2cc:	f81c 0d01 	ldrb.w	r0, [ip, #-1]!
   1b2d0:	5872      	ldr	r2, [r6, r1]
   1b2d2:	f007 0718 	and.w	r7, r7, #24
   1b2d6:	40b8      	lsls	r0, r7
   1b2d8:	3301      	adds	r3, #1
   1b2da:	4302      	orrs	r2, r0
   1b2dc:	42a3      	cmp	r3, r4
   1b2de:	5072      	str	r2, [r6, r1]
   1b2e0:	d1f0      	bne.n	1b2c4 <mbedtls_mpi_read_binary+0x88>
   1b2e2:	2000      	movs	r0, #0
   1b2e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b2e8:	1b32      	subs	r2, r6, r4
   1b2ea:	f012 0803 	ands.w	r8, r2, #3
   1b2ee:	bf18      	it	ne
   1b2f0:	f04f 0801 	movne.w	r8, #1
   1b2f4:	f242 7310 	movw	r3, #10000	; 0x2710
   1b2f8:	eb08 0892 	add.w	r8, r8, r2, lsr #2
   1b2fc:	4598      	cmp	r8, r3
   1b2fe:	d829      	bhi.n	1b354 <mbedtls_mpi_read_binary+0x118>
   1b300:	686b      	ldr	r3, [r5, #4]
   1b302:	4598      	cmp	r8, r3
   1b304:	d929      	bls.n	1b35a <mbedtls_mpi_read_binary+0x11e>
   1b306:	2104      	movs	r1, #4
   1b308:	4640      	mov	r0, r8
   1b30a:	f7fd ff57 	bl	191bc <nrf_calloc>
   1b30e:	4681      	mov	r9, r0
   1b310:	b300      	cbz	r0, 1b354 <mbedtls_mpi_read_binary+0x118>
   1b312:	68a9      	ldr	r1, [r5, #8]
   1b314:	b189      	cbz	r1, 1b33a <mbedtls_mpi_read_binary+0xfe>
   1b316:	686a      	ldr	r2, [r5, #4]
   1b318:	0092      	lsls	r2, r2, #2
   1b31a:	f7f2 fc5d 	bl	dbd8 <memcpy>
   1b31e:	e9d5 2001 	ldrd	r2, r0, [r5, #4]
   1b322:	1e53      	subs	r3, r2, #1
   1b324:	b13a      	cbz	r2, 1b336 <mbedtls_mpi_read_binary+0xfa>
   1b326:	2200      	movs	r2, #0
   1b328:	3b01      	subs	r3, #1
   1b32a:	1c59      	adds	r1, r3, #1
   1b32c:	6002      	str	r2, [r0, #0]
   1b32e:	f100 0004 	add.w	r0, r0, #4
   1b332:	d1f9      	bne.n	1b328 <mbedtls_mpi_read_binary+0xec>
   1b334:	68a8      	ldr	r0, [r5, #8]
   1b336:	f7fd ff55 	bl	191e4 <nrf_free>
   1b33a:	e9c5 8901 	strd	r8, r9, [r5, #4]
   1b33e:	ea4f 0288 	mov.w	r2, r8, lsl #2
   1b342:	f8d5 9008 	ldr.w	r9, [r5, #8]
   1b346:	e7af      	b.n	1b2a8 <mbedtls_mpi_read_binary+0x6c>
   1b348:	f8d0 8004 	ldr.w	r8, [r0, #4]
   1b34c:	4614      	mov	r4, r2
   1b34e:	e789      	b.n	1b264 <mbedtls_mpi_read_binary+0x28>
   1b350:	2400      	movs	r4, #0
   1b352:	e7ca      	b.n	1b2ea <mbedtls_mpi_read_binary+0xae>
   1b354:	f06f 000f 	mvn.w	r0, #15
   1b358:	e7c4      	b.n	1b2e4 <mbedtls_mpi_read_binary+0xa8>
   1b35a:	4698      	mov	r8, r3
   1b35c:	e782      	b.n	1b264 <mbedtls_mpi_read_binary+0x28>
   1b35e:	bf00      	nop

0001b360 <mbedtls_mpi_write_binary>:
   1b360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b364:	6844      	ldr	r4, [r0, #4]
   1b366:	4688      	mov	r8, r1
   1b368:	2c00      	cmp	r4, #0
   1b36a:	d03e      	beq.n	1b3ea <mbedtls_mpi_write_binary+0x8a>
   1b36c:	4615      	mov	r5, r2
   1b36e:	1e62      	subs	r2, r4, #1
   1b370:	4607      	mov	r7, r0
   1b372:	6880      	ldr	r0, [r0, #8]
   1b374:	d040      	beq.n	1b3f8 <mbedtls_mpi_write_binary+0x98>
   1b376:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
   1b37a:	bb99      	cbnz	r1, 1b3e4 <mbedtls_mpi_write_binary+0x84>
   1b37c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   1b380:	3b01      	subs	r3, #1
   1b382:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1b386:	e002      	b.n	1b38e <mbedtls_mpi_write_binary+0x2e>
   1b388:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   1b38c:	bb51      	cbnz	r1, 1b3e4 <mbedtls_mpi_write_binary+0x84>
   1b38e:	3a01      	subs	r2, #1
   1b390:	d1fa      	bne.n	1b388 <mbedtls_mpi_write_binary+0x28>
   1b392:	2627      	movs	r6, #39	; 0x27
   1b394:	6801      	ldr	r1, [r0, #0]
   1b396:	2200      	movs	r2, #0
   1b398:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1b39c:	e002      	b.n	1b3a4 <mbedtls_mpi_write_binary+0x44>
   1b39e:	3201      	adds	r2, #1
   1b3a0:	2a20      	cmp	r2, #32
   1b3a2:	d003      	beq.n	1b3ac <mbedtls_mpi_write_binary+0x4c>
   1b3a4:	420b      	tst	r3, r1
   1b3a6:	ea4f 0353 	mov.w	r3, r3, lsr #1
   1b3aa:	d0f8      	beq.n	1b39e <mbedtls_mpi_write_binary+0x3e>
   1b3ac:	1ab6      	subs	r6, r6, r2
   1b3ae:	08f6      	lsrs	r6, r6, #3
   1b3b0:	42b5      	cmp	r5, r6
   1b3b2:	d324      	bcc.n	1b3fe <mbedtls_mpi_write_binary+0x9e>
   1b3b4:	462a      	mov	r2, r5
   1b3b6:	2100      	movs	r1, #0
   1b3b8:	4640      	mov	r0, r8
   1b3ba:	f00f fa93 	bl	2a8e4 <memset>
   1b3be:	b176      	cbz	r6, 1b3de <mbedtls_mpi_write_binary+0x7e>
   1b3c0:	2300      	movs	r3, #0
   1b3c2:	44a8      	add	r8, r5
   1b3c4:	68b9      	ldr	r1, [r7, #8]
   1b3c6:	f023 0203 	bic.w	r2, r3, #3
   1b3ca:	588c      	ldr	r4, [r1, r2]
   1b3cc:	00dd      	lsls	r5, r3, #3
   1b3ce:	f005 0518 	and.w	r5, r5, #24
   1b3d2:	3301      	adds	r3, #1
   1b3d4:	40ec      	lsrs	r4, r5
   1b3d6:	42b3      	cmp	r3, r6
   1b3d8:	f808 4d01 	strb.w	r4, [r8, #-1]!
   1b3dc:	d1f2      	bne.n	1b3c4 <mbedtls_mpi_write_binary+0x64>
   1b3de:	2000      	movs	r0, #0
   1b3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b3e4:	0156      	lsls	r6, r2, #5
   1b3e6:	3627      	adds	r6, #39	; 0x27
   1b3e8:	e7d5      	b.n	1b396 <mbedtls_mpi_write_binary+0x36>
   1b3ea:	4608      	mov	r0, r1
   1b3ec:	4621      	mov	r1, r4
   1b3ee:	f00f fa79 	bl	2a8e4 <memset>
   1b3f2:	4620      	mov	r0, r4
   1b3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b3f8:	6801      	ldr	r1, [r0, #0]
   1b3fa:	2627      	movs	r6, #39	; 0x27
   1b3fc:	e7cb      	b.n	1b396 <mbedtls_mpi_write_binary+0x36>
   1b3fe:	f06f 0007 	mvn.w	r0, #7
   1b402:	e7ed      	b.n	1b3e0 <mbedtls_mpi_write_binary+0x80>

0001b404 <mbedtls_mpi_shift_l>:
   1b404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b408:	6843      	ldr	r3, [r0, #4]
   1b40a:	4604      	mov	r4, r0
   1b40c:	094d      	lsrs	r5, r1, #5
   1b40e:	f001 061f 	and.w	r6, r1, #31
   1b412:	b343      	cbz	r3, 1b466 <mbedtls_mpi_shift_l+0x62>
   1b414:	1e5a      	subs	r2, r3, #1
   1b416:	f8d0 e008 	ldr.w	lr, [r0, #8]
   1b41a:	f000 8099 	beq.w	1b550 <mbedtls_mpi_shift_l+0x14c>
   1b41e:	f85e c022 	ldr.w	ip, [lr, r2, lsl #2]
   1b422:	f1bc 0f00 	cmp.w	ip, #0
   1b426:	f040 809c 	bne.w	1b562 <mbedtls_mpi_shift_l+0x15e>
   1b42a:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
   1b42e:	3801      	subs	r0, #1
   1b430:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   1b434:	e003      	b.n	1b43e <mbedtls_mpi_shift_l+0x3a>
   1b436:	f850 7d04 	ldr.w	r7, [r0, #-4]!
   1b43a:	2f00      	cmp	r7, #0
   1b43c:	d15e      	bne.n	1b4fc <mbedtls_mpi_shift_l+0xf8>
   1b43e:	3a01      	subs	r2, #1
   1b440:	d1f9      	bne.n	1b436 <mbedtls_mpi_shift_l+0x32>
   1b442:	f04f 0820 	mov.w	r8, #32
   1b446:	f8de 7000 	ldr.w	r7, [lr]
   1b44a:	2000      	movs	r0, #0
   1b44c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1b450:	e002      	b.n	1b458 <mbedtls_mpi_shift_l+0x54>
   1b452:	3001      	adds	r0, #1
   1b454:	2820      	cmp	r0, #32
   1b456:	d005      	beq.n	1b464 <mbedtls_mpi_shift_l+0x60>
   1b458:	423a      	tst	r2, r7
   1b45a:	ea4f 0252 	mov.w	r2, r2, lsr #1
   1b45e:	d0f8      	beq.n	1b452 <mbedtls_mpi_shift_l+0x4e>
   1b460:	eba8 0c00 	sub.w	ip, r8, r0
   1b464:	4461      	add	r1, ip
   1b466:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
   1b46a:	d90b      	bls.n	1b484 <mbedtls_mpi_shift_l+0x80>
   1b46c:	f011 021f 	ands.w	r2, r1, #31
   1b470:	bf18      	it	ne
   1b472:	2201      	movne	r2, #1
   1b474:	f242 7010 	movw	r0, #10000	; 0x2710
   1b478:	eb02 1751 	add.w	r7, r2, r1, lsr #5
   1b47c:	4287      	cmp	r7, r0
   1b47e:	d86d      	bhi.n	1b55c <mbedtls_mpi_shift_l+0x158>
   1b480:	429f      	cmp	r7, r3
   1b482:	d840      	bhi.n	1b506 <mbedtls_mpi_shift_l+0x102>
   1b484:	b1f5      	cbz	r5, 1b4c4 <mbedtls_mpi_shift_l+0xc0>
   1b486:	429d      	cmp	r5, r3
   1b488:	d25d      	bcs.n	1b546 <mbedtls_mpi_shift_l+0x142>
   1b48a:	f06f 4740 	mvn.w	r7, #3221225472	; 0xc0000000
   1b48e:	1b7f      	subs	r7, r7, r5
   1b490:	19da      	adds	r2, r3, r7
   1b492:	ebc7 7787 	rsb	r7, r7, r7, lsl #30
   1b496:	0092      	lsls	r2, r2, #2
   1b498:	00bf      	lsls	r7, r7, #2
   1b49a:	68a0      	ldr	r0, [r4, #8]
   1b49c:	3b01      	subs	r3, #1
   1b49e:	19c1      	adds	r1, r0, r7
   1b4a0:	5880      	ldr	r0, [r0, r2]
   1b4a2:	4411      	add	r1, r2
   1b4a4:	429d      	cmp	r5, r3
   1b4a6:	f841 0c04 	str.w	r0, [r1, #-4]
   1b4aa:	f1a2 0204 	sub.w	r2, r2, #4
   1b4ae:	d1f4      	bne.n	1b49a <mbedtls_mpi_shift_l+0x96>
   1b4b0:	2100      	movs	r1, #0
   1b4b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b4b6:	3b01      	subs	r3, #1
   1b4b8:	009b      	lsls	r3, r3, #2
   1b4ba:	68a2      	ldr	r2, [r4, #8]
   1b4bc:	50d1      	str	r1, [r2, r3]
   1b4be:	3b04      	subs	r3, #4
   1b4c0:	1d1a      	adds	r2, r3, #4
   1b4c2:	d1fa      	bne.n	1b4ba <mbedtls_mpi_shift_l+0xb6>
   1b4c4:	b1be      	cbz	r6, 1b4f6 <mbedtls_mpi_shift_l+0xf2>
   1b4c6:	6863      	ldr	r3, [r4, #4]
   1b4c8:	429d      	cmp	r5, r3
   1b4ca:	d214      	bcs.n	1b4f6 <mbedtls_mpi_shift_l+0xf2>
   1b4cc:	2700      	movs	r7, #0
   1b4ce:	f1c6 0c20 	rsb	ip, r6, #32
   1b4d2:	00ab      	lsls	r3, r5, #2
   1b4d4:	68a0      	ldr	r0, [r4, #8]
   1b4d6:	3501      	adds	r5, #1
   1b4d8:	58c1      	ldr	r1, [r0, r3]
   1b4da:	fa01 f206 	lsl.w	r2, r1, r6
   1b4de:	50c2      	str	r2, [r0, r3]
   1b4e0:	68a0      	ldr	r0, [r4, #8]
   1b4e2:	58c2      	ldr	r2, [r0, r3]
   1b4e4:	433a      	orrs	r2, r7
   1b4e6:	50c2      	str	r2, [r0, r3]
   1b4e8:	6862      	ldr	r2, [r4, #4]
   1b4ea:	fa21 f70c 	lsr.w	r7, r1, ip
   1b4ee:	42aa      	cmp	r2, r5
   1b4f0:	f103 0304 	add.w	r3, r3, #4
   1b4f4:	d8ee      	bhi.n	1b4d4 <mbedtls_mpi_shift_l+0xd0>
   1b4f6:	2000      	movs	r0, #0
   1b4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b4fc:	ea4f 1c42 	mov.w	ip, r2, lsl #5
   1b500:	f10c 0820 	add.w	r8, ip, #32
   1b504:	e7a1      	b.n	1b44a <mbedtls_mpi_shift_l+0x46>
   1b506:	2104      	movs	r1, #4
   1b508:	4638      	mov	r0, r7
   1b50a:	f7fd fe57 	bl	191bc <nrf_calloc>
   1b50e:	4680      	mov	r8, r0
   1b510:	b320      	cbz	r0, 1b55c <mbedtls_mpi_shift_l+0x158>
   1b512:	68a1      	ldr	r1, [r4, #8]
   1b514:	b189      	cbz	r1, 1b53a <mbedtls_mpi_shift_l+0x136>
   1b516:	6862      	ldr	r2, [r4, #4]
   1b518:	0092      	lsls	r2, r2, #2
   1b51a:	f7f2 fb5d 	bl	dbd8 <memcpy>
   1b51e:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
   1b522:	1e53      	subs	r3, r2, #1
   1b524:	b13a      	cbz	r2, 1b536 <mbedtls_mpi_shift_l+0x132>
   1b526:	2200      	movs	r2, #0
   1b528:	3b01      	subs	r3, #1
   1b52a:	1c59      	adds	r1, r3, #1
   1b52c:	6002      	str	r2, [r0, #0]
   1b52e:	f100 0004 	add.w	r0, r0, #4
   1b532:	d1f9      	bne.n	1b528 <mbedtls_mpi_shift_l+0x124>
   1b534:	68a0      	ldr	r0, [r4, #8]
   1b536:	f7fd fe55 	bl	191e4 <nrf_free>
   1b53a:	463b      	mov	r3, r7
   1b53c:	e9c4 7801 	strd	r7, r8, [r4, #4]
   1b540:	2d00      	cmp	r5, #0
   1b542:	d0bf      	beq.n	1b4c4 <mbedtls_mpi_shift_l+0xc0>
   1b544:	e79f      	b.n	1b486 <mbedtls_mpi_shift_l+0x82>
   1b546:	2b00      	cmp	r3, #0
   1b548:	d1b2      	bne.n	1b4b0 <mbedtls_mpi_shift_l+0xac>
   1b54a:	2e00      	cmp	r6, #0
   1b54c:	d1bb      	bne.n	1b4c6 <mbedtls_mpi_shift_l+0xc2>
   1b54e:	e7d2      	b.n	1b4f6 <mbedtls_mpi_shift_l+0xf2>
   1b550:	f8de 7000 	ldr.w	r7, [lr]
   1b554:	4694      	mov	ip, r2
   1b556:	f04f 0820 	mov.w	r8, #32
   1b55a:	e776      	b.n	1b44a <mbedtls_mpi_shift_l+0x46>
   1b55c:	f06f 000f 	mvn.w	r0, #15
   1b560:	e7ca      	b.n	1b4f8 <mbedtls_mpi_shift_l+0xf4>
   1b562:	0152      	lsls	r2, r2, #5
   1b564:	4667      	mov	r7, ip
   1b566:	f102 0820 	add.w	r8, r2, #32
   1b56a:	4694      	mov	ip, r2
   1b56c:	e76d      	b.n	1b44a <mbedtls_mpi_shift_l+0x46>
   1b56e:	bf00      	nop

0001b570 <mbedtls_mpi_shift_r>:
   1b570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b572:	6844      	ldr	r4, [r0, #4]
   1b574:	094d      	lsrs	r5, r1, #5
   1b576:	42ac      	cmp	r4, r5
   1b578:	d33a      	bcc.n	1b5f0 <mbedtls_mpi_shift_r+0x80>
   1b57a:	f001 011f 	and.w	r1, r1, #31
   1b57e:	d032      	beq.n	1b5e6 <mbedtls_mpi_shift_r+0x76>
   1b580:	b1b5      	cbz	r5, 1b5b0 <mbedtls_mpi_shift_r+0x40>
   1b582:	2300      	movs	r3, #0
   1b584:	00aa      	lsls	r2, r5, #2
   1b586:	6884      	ldr	r4, [r0, #8]
   1b588:	58a6      	ldr	r6, [r4, r2]
   1b58a:	3204      	adds	r2, #4
   1b58c:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
   1b590:	6844      	ldr	r4, [r0, #4]
   1b592:	3301      	adds	r3, #1
   1b594:	1b66      	subs	r6, r4, r5
   1b596:	429e      	cmp	r6, r3
   1b598:	d8f5      	bhi.n	1b586 <mbedtls_mpi_shift_r+0x16>
   1b59a:	429c      	cmp	r4, r3
   1b59c:	d908      	bls.n	1b5b0 <mbedtls_mpi_shift_r+0x40>
   1b59e:	2500      	movs	r5, #0
   1b5a0:	009a      	lsls	r2, r3, #2
   1b5a2:	6884      	ldr	r4, [r0, #8]
   1b5a4:	3301      	adds	r3, #1
   1b5a6:	50a5      	str	r5, [r4, r2]
   1b5a8:	6844      	ldr	r4, [r0, #4]
   1b5aa:	3204      	adds	r2, #4
   1b5ac:	429c      	cmp	r4, r3
   1b5ae:	d8f8      	bhi.n	1b5a2 <mbedtls_mpi_shift_r+0x32>
   1b5b0:	b1b9      	cbz	r1, 1b5e2 <mbedtls_mpi_shift_r+0x72>
   1b5b2:	b1b4      	cbz	r4, 1b5e2 <mbedtls_mpi_shift_r+0x72>
   1b5b4:	2700      	movs	r7, #0
   1b5b6:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   1b5ba:	3b01      	subs	r3, #1
   1b5bc:	009b      	lsls	r3, r3, #2
   1b5be:	f1c1 0c20 	rsb	ip, r1, #32
   1b5c2:	6886      	ldr	r6, [r0, #8]
   1b5c4:	3c01      	subs	r4, #1
   1b5c6:	58f5      	ldr	r5, [r6, r3]
   1b5c8:	fa25 f201 	lsr.w	r2, r5, r1
   1b5cc:	50f2      	str	r2, [r6, r3]
   1b5ce:	6886      	ldr	r6, [r0, #8]
   1b5d0:	58f2      	ldr	r2, [r6, r3]
   1b5d2:	ea42 0207 	orr.w	r2, r2, r7
   1b5d6:	50f2      	str	r2, [r6, r3]
   1b5d8:	fa05 f70c 	lsl.w	r7, r5, ip
   1b5dc:	f1a3 0304 	sub.w	r3, r3, #4
   1b5e0:	d1ef      	bne.n	1b5c2 <mbedtls_mpi_shift_r+0x52>
   1b5e2:	2000      	movs	r0, #0
   1b5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b5e6:	b919      	cbnz	r1, 1b5f0 <mbedtls_mpi_shift_r+0x80>
   1b5e8:	2c00      	cmp	r4, #0
   1b5ea:	d0fa      	beq.n	1b5e2 <mbedtls_mpi_shift_r+0x72>
   1b5ec:	460b      	mov	r3, r1
   1b5ee:	e7d6      	b.n	1b59e <mbedtls_mpi_shift_r+0x2e>
   1b5f0:	4605      	mov	r5, r0
   1b5f2:	b164      	cbz	r4, 1b60e <mbedtls_mpi_shift_r+0x9e>
   1b5f4:	6886      	ldr	r6, [r0, #8]
   1b5f6:	00a2      	lsls	r2, r4, #2
   1b5f8:	4630      	mov	r0, r6
   1b5fa:	2100      	movs	r1, #0
   1b5fc:	f00f f972 	bl	2a8e4 <memset>
   1b600:	2300      	movs	r3, #0
   1b602:	2201      	movs	r2, #1
   1b604:	68a9      	ldr	r1, [r5, #8]
   1b606:	4618      	mov	r0, r3
   1b608:	600b      	str	r3, [r1, #0]
   1b60a:	602a      	str	r2, [r5, #0]
   1b60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b60e:	2104      	movs	r1, #4
   1b610:	2001      	movs	r0, #1
   1b612:	f7fd fdd3 	bl	191bc <nrf_calloc>
   1b616:	4606      	mov	r6, r0
   1b618:	b1b8      	cbz	r0, 1b64a <mbedtls_mpi_shift_r+0xda>
   1b61a:	68a9      	ldr	r1, [r5, #8]
   1b61c:	b181      	cbz	r1, 1b640 <mbedtls_mpi_shift_r+0xd0>
   1b61e:	686a      	ldr	r2, [r5, #4]
   1b620:	0092      	lsls	r2, r2, #2
   1b622:	f7f2 fad9 	bl	dbd8 <memcpy>
   1b626:	e9d5 2001 	ldrd	r2, r0, [r5, #4]
   1b62a:	1e53      	subs	r3, r2, #1
   1b62c:	b132      	cbz	r2, 1b63c <mbedtls_mpi_shift_r+0xcc>
   1b62e:	3b01      	subs	r3, #1
   1b630:	1c5a      	adds	r2, r3, #1
   1b632:	6004      	str	r4, [r0, #0]
   1b634:	f100 0004 	add.w	r0, r0, #4
   1b638:	d1f9      	bne.n	1b62e <mbedtls_mpi_shift_r+0xbe>
   1b63a:	68a8      	ldr	r0, [r5, #8]
   1b63c:	f7fd fdd2 	bl	191e4 <nrf_free>
   1b640:	2301      	movs	r3, #1
   1b642:	2204      	movs	r2, #4
   1b644:	e9c5 3601 	strd	r3, r6, [r5, #4]
   1b648:	e7d6      	b.n	1b5f8 <mbedtls_mpi_shift_r+0x88>
   1b64a:	f06f 000f 	mvn.w	r0, #15
   1b64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b650 <mbedtls_mpi_cmp_mpi>:
   1b650:	b470      	push	{r4, r5, r6}
   1b652:	6843      	ldr	r3, [r0, #4]
   1b654:	684a      	ldr	r2, [r1, #4]
   1b656:	b173      	cbz	r3, 1b676 <mbedtls_mpi_cmp_mpi+0x26>
   1b658:	6884      	ldr	r4, [r0, #8]
   1b65a:	f103 4580 	add.w	r5, r3, #1073741824	; 0x40000000
   1b65e:	3d01      	subs	r5, #1
   1b660:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
   1b664:	eb04 0485 	add.w	r4, r4, r5, lsl #2
   1b668:	b11e      	cbz	r6, 1b672 <mbedtls_mpi_cmp_mpi+0x22>
   1b66a:	e01a      	b.n	1b6a2 <mbedtls_mpi_cmp_mpi+0x52>
   1b66c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   1b670:	b9bd      	cbnz	r5, 1b6a2 <mbedtls_mpi_cmp_mpi+0x52>
   1b672:	3b01      	subs	r3, #1
   1b674:	d1fa      	bne.n	1b66c <mbedtls_mpi_cmp_mpi+0x1c>
   1b676:	b18a      	cbz	r2, 1b69c <mbedtls_mpi_cmp_mpi+0x4c>
   1b678:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
   1b67c:	688e      	ldr	r6, [r1, #8]
   1b67e:	3c01      	subs	r4, #1
   1b680:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
   1b684:	b9cd      	cbnz	r5, 1b6ba <mbedtls_mpi_cmp_mpi+0x6a>
   1b686:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   1b68a:	e002      	b.n	1b692 <mbedtls_mpi_cmp_mpi+0x42>
   1b68c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   1b690:	b98d      	cbnz	r5, 1b6b6 <mbedtls_mpi_cmp_mpi+0x66>
   1b692:	3a01      	subs	r2, #1
   1b694:	d1fa      	bne.n	1b68c <mbedtls_mpi_cmp_mpi+0x3c>
   1b696:	2b00      	cmp	r3, #0
   1b698:	d037      	beq.n	1b70a <mbedtls_mpi_cmp_mpi+0xba>
   1b69a:	6802      	ldr	r2, [r0, #0]
   1b69c:	4610      	mov	r0, r2
   1b69e:	bc70      	pop	{r4, r5, r6}
   1b6a0:	4770      	bx	lr
   1b6a2:	2a00      	cmp	r2, #0
   1b6a4:	d0f9      	beq.n	1b69a <mbedtls_mpi_cmp_mpi+0x4a>
   1b6a6:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
   1b6aa:	688e      	ldr	r6, [r1, #8]
   1b6ac:	3c01      	subs	r4, #1
   1b6ae:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
   1b6b2:	2d00      	cmp	r5, #0
   1b6b4:	d0e7      	beq.n	1b686 <mbedtls_mpi_cmp_mpi+0x36>
   1b6b6:	4293      	cmp	r3, r2
   1b6b8:	d8ef      	bhi.n	1b69a <mbedtls_mpi_cmp_mpi+0x4a>
   1b6ba:	4293      	cmp	r3, r2
   1b6bc:	6809      	ldr	r1, [r1, #0]
   1b6be:	d203      	bcs.n	1b6c8 <mbedtls_mpi_cmp_mpi+0x78>
   1b6c0:	bc70      	pop	{r4, r5, r6}
   1b6c2:	424a      	negs	r2, r1
   1b6c4:	4610      	mov	r0, r2
   1b6c6:	4770      	bx	lr
   1b6c8:	6802      	ldr	r2, [r0, #0]
   1b6ca:	2a00      	cmp	r2, #0
   1b6cc:	dd01      	ble.n	1b6d2 <mbedtls_mpi_cmp_mpi+0x82>
   1b6ce:	2900      	cmp	r1, #0
   1b6d0:	db24      	blt.n	1b71c <mbedtls_mpi_cmp_mpi+0xcc>
   1b6d2:	2900      	cmp	r1, #0
   1b6d4:	dd01      	ble.n	1b6da <mbedtls_mpi_cmp_mpi+0x8a>
   1b6d6:	2a00      	cmp	r2, #0
   1b6d8:	db1d      	blt.n	1b716 <mbedtls_mpi_cmp_mpi+0xc6>
   1b6da:	b1b3      	cbz	r3, 1b70a <mbedtls_mpi_cmp_mpi+0xba>
   1b6dc:	6884      	ldr	r4, [r0, #8]
   1b6de:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   1b6e2:	3901      	subs	r1, #1
   1b6e4:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
   1b6e8:	f856 0021 	ldr.w	r0, [r6, r1, lsl #2]
   1b6ec:	0089      	lsls	r1, r1, #2
   1b6ee:	4285      	cmp	r5, r0
   1b6f0:	440c      	add	r4, r1
   1b6f2:	4431      	add	r1, r6
   1b6f4:	d8d2      	bhi.n	1b69c <mbedtls_mpi_cmp_mpi+0x4c>
   1b6f6:	d30c      	bcc.n	1b712 <mbedtls_mpi_cmp_mpi+0xc2>
   1b6f8:	3b01      	subs	r3, #1
   1b6fa:	d006      	beq.n	1b70a <mbedtls_mpi_cmp_mpi+0xba>
   1b6fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   1b700:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   1b704:	4285      	cmp	r5, r0
   1b706:	d9f6      	bls.n	1b6f6 <mbedtls_mpi_cmp_mpi+0xa6>
   1b708:	e7c8      	b.n	1b69c <mbedtls_mpi_cmp_mpi+0x4c>
   1b70a:	461a      	mov	r2, r3
   1b70c:	bc70      	pop	{r4, r5, r6}
   1b70e:	4610      	mov	r0, r2
   1b710:	4770      	bx	lr
   1b712:	4252      	negs	r2, r2
   1b714:	e7c2      	b.n	1b69c <mbedtls_mpi_cmp_mpi+0x4c>
   1b716:	f04f 32ff 	mov.w	r2, #4294967295
   1b71a:	e7bf      	b.n	1b69c <mbedtls_mpi_cmp_mpi+0x4c>
   1b71c:	2201      	movs	r2, #1
   1b71e:	e7bd      	b.n	1b69c <mbedtls_mpi_cmp_mpi+0x4c>

0001b720 <mbedtls_mpi_cmp_int>:
   1b720:	b4f0      	push	{r4, r5, r6, r7}
   1b722:	2900      	cmp	r1, #0
   1b724:	4605      	mov	r5, r0
   1b726:	6843      	ldr	r3, [r0, #4]
   1b728:	db32      	blt.n	1b790 <mbedtls_mpi_cmp_int+0x70>
   1b72a:	2b00      	cmp	r3, #0
   1b72c:	d042      	beq.n	1b7b4 <mbedtls_mpi_cmp_int+0x94>
   1b72e:	6886      	ldr	r6, [r0, #8]
   1b730:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1b734:	3a01      	subs	r2, #1
   1b736:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
   1b73a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   1b73e:	b968      	cbnz	r0, 1b75c <mbedtls_mpi_cmp_int+0x3c>
   1b740:	f04f 30ff 	mov.w	r0, #4294967295
   1b744:	2701      	movs	r7, #1
   1b746:	e002      	b.n	1b74e <mbedtls_mpi_cmp_int+0x2e>
   1b748:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   1b74c:	b93c      	cbnz	r4, 1b75e <mbedtls_mpi_cmp_int+0x3e>
   1b74e:	3b01      	subs	r3, #1
   1b750:	d1fa      	bne.n	1b748 <mbedtls_mpi_cmp_int+0x28>
   1b752:	2900      	cmp	r1, #0
   1b754:	bf08      	it	eq
   1b756:	2000      	moveq	r0, #0
   1b758:	bcf0      	pop	{r4, r5, r6, r7}
   1b75a:	4770      	bx	lr
   1b75c:	2701      	movs	r7, #1
   1b75e:	b1a1      	cbz	r1, 1b78a <mbedtls_mpi_cmp_int+0x6a>
   1b760:	2b01      	cmp	r3, #1
   1b762:	d812      	bhi.n	1b78a <mbedtls_mpi_cmp_int+0x6a>
   1b764:	6828      	ldr	r0, [r5, #0]
   1b766:	2800      	cmp	r0, #0
   1b768:	dd01      	ble.n	1b76e <mbedtls_mpi_cmp_int+0x4e>
   1b76a:	1c7b      	adds	r3, r7, #1
   1b76c:	d01e      	beq.n	1b7ac <mbedtls_mpi_cmp_int+0x8c>
   1b76e:	2f01      	cmp	r7, #1
   1b770:	d101      	bne.n	1b776 <mbedtls_mpi_cmp_int+0x56>
   1b772:	2800      	cmp	r0, #0
   1b774:	db24      	blt.n	1b7c0 <mbedtls_mpi_cmp_int+0xa0>
   1b776:	2900      	cmp	r1, #0
   1b778:	6833      	ldr	r3, [r6, #0]
   1b77a:	bfb8      	it	lt
   1b77c:	4249      	neglt	r1, r1
   1b77e:	4299      	cmp	r1, r3
   1b780:	d3ea      	bcc.n	1b758 <mbedtls_mpi_cmp_int+0x38>
   1b782:	d815      	bhi.n	1b7b0 <mbedtls_mpi_cmp_int+0x90>
   1b784:	bcf0      	pop	{r4, r5, r6, r7}
   1b786:	2000      	movs	r0, #0
   1b788:	4770      	bx	lr
   1b78a:	6828      	ldr	r0, [r5, #0]
   1b78c:	bcf0      	pop	{r4, r5, r6, r7}
   1b78e:	4770      	bx	lr
   1b790:	b163      	cbz	r3, 1b7ac <mbedtls_mpi_cmp_int+0x8c>
   1b792:	6886      	ldr	r6, [r0, #8]
   1b794:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1b798:	3a01      	subs	r2, #1
   1b79a:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
   1b79e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   1b7a2:	b950      	cbnz	r0, 1b7ba <mbedtls_mpi_cmp_int+0x9a>
   1b7a4:	2001      	movs	r0, #1
   1b7a6:	f04f 37ff 	mov.w	r7, #4294967295
   1b7aa:	e7d0      	b.n	1b74e <mbedtls_mpi_cmp_int+0x2e>
   1b7ac:	2001      	movs	r0, #1
   1b7ae:	e7d3      	b.n	1b758 <mbedtls_mpi_cmp_int+0x38>
   1b7b0:	4240      	negs	r0, r0
   1b7b2:	e7d1      	b.n	1b758 <mbedtls_mpi_cmp_int+0x38>
   1b7b4:	f04f 30ff 	mov.w	r0, #4294967295
   1b7b8:	e7cb      	b.n	1b752 <mbedtls_mpi_cmp_int+0x32>
   1b7ba:	f04f 37ff 	mov.w	r7, #4294967295
   1b7be:	e7cf      	b.n	1b760 <mbedtls_mpi_cmp_int+0x40>
   1b7c0:	f04f 30ff 	mov.w	r0, #4294967295
   1b7c4:	e7c8      	b.n	1b758 <mbedtls_mpi_cmp_int+0x38>
   1b7c6:	bf00      	nop

0001b7c8 <mbedtls_mpi_add_abs>:
   1b7c8:	4290      	cmp	r0, r2
   1b7ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b7ce:	4607      	mov	r7, r0
   1b7d0:	460c      	mov	r4, r1
   1b7d2:	d006      	beq.n	1b7e2 <mbedtls_mpi_add_abs+0x1a>
   1b7d4:	4288      	cmp	r0, r1
   1b7d6:	4615      	mov	r5, r2
   1b7d8:	d002      	beq.n	1b7e0 <mbedtls_mpi_add_abs+0x18>
   1b7da:	f7ff fafb 	bl	1add4 <mbedtls_mpi_copy>
   1b7de:	b9a0      	cbnz	r0, 1b80a <mbedtls_mpi_add_abs+0x42>
   1b7e0:	462c      	mov	r4, r5
   1b7e2:	2301      	movs	r3, #1
   1b7e4:	603b      	str	r3, [r7, #0]
   1b7e6:	6865      	ldr	r5, [r4, #4]
   1b7e8:	b175      	cbz	r5, 1b808 <mbedtls_mpi_add_abs+0x40>
   1b7ea:	68a3      	ldr	r3, [r4, #8]
   1b7ec:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
   1b7f0:	3a01      	subs	r2, #1
   1b7f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1b7f6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1b7fa:	b119      	cbz	r1, 1b804 <mbedtls_mpi_add_abs+0x3c>
   1b7fc:	e007      	b.n	1b80e <mbedtls_mpi_add_abs+0x46>
   1b7fe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   1b802:	b921      	cbnz	r1, 1b80e <mbedtls_mpi_add_abs+0x46>
   1b804:	3d01      	subs	r5, #1
   1b806:	d1fa      	bne.n	1b7fe <mbedtls_mpi_add_abs+0x36>
   1b808:	2000      	movs	r0, #0
   1b80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b80e:	f242 7210 	movw	r2, #10000	; 0x2710
   1b812:	4295      	cmp	r5, r2
   1b814:	d875      	bhi.n	1b902 <mbedtls_mpi_add_abs+0x13a>
   1b816:	687a      	ldr	r2, [r7, #4]
   1b818:	42aa      	cmp	r2, r5
   1b81a:	d276      	bcs.n	1b90a <mbedtls_mpi_add_abs+0x142>
   1b81c:	2104      	movs	r1, #4
   1b81e:	4628      	mov	r0, r5
   1b820:	f7fd fccc 	bl	191bc <nrf_calloc>
   1b824:	4606      	mov	r6, r0
   1b826:	2800      	cmp	r0, #0
   1b828:	d06b      	beq.n	1b902 <mbedtls_mpi_add_abs+0x13a>
   1b82a:	68b9      	ldr	r1, [r7, #8]
   1b82c:	b189      	cbz	r1, 1b852 <mbedtls_mpi_add_abs+0x8a>
   1b82e:	687a      	ldr	r2, [r7, #4]
   1b830:	0092      	lsls	r2, r2, #2
   1b832:	f7f2 f9d1 	bl	dbd8 <memcpy>
   1b836:	e9d7 2001 	ldrd	r2, r0, [r7, #4]
   1b83a:	1e53      	subs	r3, r2, #1
   1b83c:	b13a      	cbz	r2, 1b84e <mbedtls_mpi_add_abs+0x86>
   1b83e:	2200      	movs	r2, #0
   1b840:	3b01      	subs	r3, #1
   1b842:	1c59      	adds	r1, r3, #1
   1b844:	6002      	str	r2, [r0, #0]
   1b846:	f100 0004 	add.w	r0, r0, #4
   1b84a:	d1f9      	bne.n	1b840 <mbedtls_mpi_add_abs+0x78>
   1b84c:	68b8      	ldr	r0, [r7, #8]
   1b84e:	f7fd fcc9 	bl	191e4 <nrf_free>
   1b852:	e9c7 5601 	strd	r5, r6, [r7, #4]
   1b856:	68a3      	ldr	r3, [r4, #8]
   1b858:	2400      	movs	r4, #0
   1b85a:	ea4f 0a85 	mov.w	sl, r5, lsl #2
   1b85e:	f1a3 0c04 	sub.w	ip, r3, #4
   1b862:	eb06 000a 	add.w	r0, r6, sl
   1b866:	2200      	movs	r2, #0
   1b868:	6833      	ldr	r3, [r6, #0]
   1b86a:	f10c 0c04 	add.w	ip, ip, #4
   1b86e:	f8dc 1000 	ldr.w	r1, [ip]
   1b872:	191b      	adds	r3, r3, r4
   1b874:	4614      	mov	r4, r2
   1b876:	bf28      	it	cs
   1b878:	2201      	movcs	r2, #1
   1b87a:	185b      	adds	r3, r3, r1
   1b87c:	bf28      	it	cs
   1b87e:	2401      	movcs	r4, #1
   1b880:	f846 3b04 	str.w	r3, [r6], #4
   1b884:	4286      	cmp	r6, r0
   1b886:	4414      	add	r4, r2
   1b888:	d1ed      	bne.n	1b866 <mbedtls_mpi_add_abs+0x9e>
   1b88a:	2c00      	cmp	r4, #0
   1b88c:	d0bc      	beq.n	1b808 <mbedtls_mpi_add_abs+0x40>
   1b88e:	f242 7810 	movw	r8, #10000	; 0x2710
   1b892:	f04f 0900 	mov.w	r9, #0
   1b896:	e00f      	b.n	1b8b8 <mbedtls_mpi_add_abs+0xf0>
   1b898:	68bd      	ldr	r5, [r7, #8]
   1b89a:	eb05 000a 	add.w	r0, r5, sl
   1b89e:	6803      	ldr	r3, [r0, #0]
   1b8a0:	2200      	movs	r2, #0
   1b8a2:	191c      	adds	r4, r3, r4
   1b8a4:	bf28      	it	cs
   1b8a6:	2201      	movcs	r2, #1
   1b8a8:	f840 4b04 	str.w	r4, [r0], #4
   1b8ac:	f10a 0a04 	add.w	sl, sl, #4
   1b8b0:	4635      	mov	r5, r6
   1b8b2:	2401      	movs	r4, #1
   1b8b4:	2a00      	cmp	r2, #0
   1b8b6:	d0a7      	beq.n	1b808 <mbedtls_mpi_add_abs+0x40>
   1b8b8:	687b      	ldr	r3, [r7, #4]
   1b8ba:	1c6e      	adds	r6, r5, #1
   1b8bc:	42ab      	cmp	r3, r5
   1b8be:	d8ee      	bhi.n	1b89e <mbedtls_mpi_add_abs+0xd6>
   1b8c0:	4546      	cmp	r6, r8
   1b8c2:	d81e      	bhi.n	1b902 <mbedtls_mpi_add_abs+0x13a>
   1b8c4:	42b3      	cmp	r3, r6
   1b8c6:	d2e7      	bcs.n	1b898 <mbedtls_mpi_add_abs+0xd0>
   1b8c8:	2104      	movs	r1, #4
   1b8ca:	4630      	mov	r0, r6
   1b8cc:	f7fd fc76 	bl	191bc <nrf_calloc>
   1b8d0:	4605      	mov	r5, r0
   1b8d2:	b1b0      	cbz	r0, 1b902 <mbedtls_mpi_add_abs+0x13a>
   1b8d4:	68b9      	ldr	r1, [r7, #8]
   1b8d6:	b189      	cbz	r1, 1b8fc <mbedtls_mpi_add_abs+0x134>
   1b8d8:	687a      	ldr	r2, [r7, #4]
   1b8da:	0092      	lsls	r2, r2, #2
   1b8dc:	f7f2 f97c 	bl	dbd8 <memcpy>
   1b8e0:	e9d7 2001 	ldrd	r2, r0, [r7, #4]
   1b8e4:	1e53      	subs	r3, r2, #1
   1b8e6:	b13a      	cbz	r2, 1b8f8 <mbedtls_mpi_add_abs+0x130>
   1b8e8:	3b01      	subs	r3, #1
   1b8ea:	1c5a      	adds	r2, r3, #1
   1b8ec:	f8c0 9000 	str.w	r9, [r0]
   1b8f0:	f100 0004 	add.w	r0, r0, #4
   1b8f4:	d1f8      	bne.n	1b8e8 <mbedtls_mpi_add_abs+0x120>
   1b8f6:	68b8      	ldr	r0, [r7, #8]
   1b8f8:	f7fd fc74 	bl	191e4 <nrf_free>
   1b8fc:	e9c7 6501 	strd	r6, r5, [r7, #4]
   1b900:	e7cb      	b.n	1b89a <mbedtls_mpi_add_abs+0xd2>
   1b902:	f06f 000f 	mvn.w	r0, #15
   1b906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b90a:	68be      	ldr	r6, [r7, #8]
   1b90c:	e7a4      	b.n	1b858 <mbedtls_mpi_add_abs+0x90>
   1b90e:	bf00      	nop

0001b910 <mbedtls_mpi_sub_abs>:
   1b910:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b912:	684b      	ldr	r3, [r1, #4]
   1b914:	460d      	mov	r5, r1
   1b916:	b085      	sub	sp, #20
   1b918:	4614      	mov	r4, r2
   1b91a:	4606      	mov	r6, r0
   1b91c:	6851      	ldr	r1, [r2, #4]
   1b91e:	b17b      	cbz	r3, 1b940 <mbedtls_mpi_sub_abs+0x30>
   1b920:	68a8      	ldr	r0, [r5, #8]
   1b922:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1b926:	3a01      	subs	r2, #1
   1b928:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   1b92c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   1b930:	b127      	cbz	r7, 1b93c <mbedtls_mpi_sub_abs+0x2c>
   1b932:	e04f      	b.n	1b9d4 <mbedtls_mpi_sub_abs+0xc4>
   1b934:	f850 2d04 	ldr.w	r2, [r0, #-4]!
   1b938:	2a00      	cmp	r2, #0
   1b93a:	d14b      	bne.n	1b9d4 <mbedtls_mpi_sub_abs+0xc4>
   1b93c:	3b01      	subs	r3, #1
   1b93e:	d1f9      	bne.n	1b934 <mbedtls_mpi_sub_abs+0x24>
   1b940:	b189      	cbz	r1, 1b966 <mbedtls_mpi_sub_abs+0x56>
   1b942:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
   1b946:	68a7      	ldr	r7, [r4, #8]
   1b948:	3801      	subs	r0, #1
   1b94a:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   1b94e:	2a00      	cmp	r2, #0
   1b950:	f040 8099 	bne.w	1ba86 <mbedtls_mpi_sub_abs+0x176>
   1b954:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1b958:	e003      	b.n	1b962 <mbedtls_mpi_sub_abs+0x52>
   1b95a:	f850 2d04 	ldr.w	r2, [r0, #-4]!
   1b95e:	2a00      	cmp	r2, #0
   1b960:	d142      	bne.n	1b9e8 <mbedtls_mpi_sub_abs+0xd8>
   1b962:	3901      	subs	r1, #1
   1b964:	d1f9      	bne.n	1b95a <mbedtls_mpi_sub_abs+0x4a>
   1b966:	2300      	movs	r3, #0
   1b968:	2201      	movs	r2, #1
   1b96a:	42b4      	cmp	r4, r6
   1b96c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1b970:	9303      	str	r3, [sp, #12]
   1b972:	d07f      	beq.n	1ba74 <mbedtls_mpi_sub_abs+0x164>
   1b974:	42b5      	cmp	r5, r6
   1b976:	d005      	beq.n	1b984 <mbedtls_mpi_sub_abs+0x74>
   1b978:	4629      	mov	r1, r5
   1b97a:	4630      	mov	r0, r6
   1b97c:	f7ff fa2a 	bl	1add4 <mbedtls_mpi_copy>
   1b980:	4607      	mov	r7, r0
   1b982:	b9a8      	cbnz	r0, 1b9b0 <mbedtls_mpi_sub_abs+0xa0>
   1b984:	2301      	movs	r3, #1
   1b986:	6033      	str	r3, [r6, #0]
   1b988:	6860      	ldr	r0, [r4, #4]
   1b98a:	b180      	cbz	r0, 1b9ae <mbedtls_mpi_sub_abs+0x9e>
   1b98c:	f8d4 c008 	ldr.w	ip, [r4, #8]
   1b990:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1b994:	3b01      	subs	r3, #1
   1b996:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
   1b99a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
   1b99e:	b122      	cbz	r2, 1b9aa <mbedtls_mpi_sub_abs+0x9a>
   1b9a0:	e042      	b.n	1ba28 <mbedtls_mpi_sub_abs+0x118>
   1b9a2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1b9a6:	2a00      	cmp	r2, #0
   1b9a8:	d13e      	bne.n	1ba28 <mbedtls_mpi_sub_abs+0x118>
   1b9aa:	3801      	subs	r0, #1
   1b9ac:	d1f9      	bne.n	1b9a2 <mbedtls_mpi_sub_abs+0x92>
   1b9ae:	2700      	movs	r7, #0
   1b9b0:	9803      	ldr	r0, [sp, #12]
   1b9b2:	b160      	cbz	r0, 1b9ce <mbedtls_mpi_sub_abs+0xbe>
   1b9b4:	9a02      	ldr	r2, [sp, #8]
   1b9b6:	1e53      	subs	r3, r2, #1
   1b9b8:	b13a      	cbz	r2, 1b9ca <mbedtls_mpi_sub_abs+0xba>
   1b9ba:	2200      	movs	r2, #0
   1b9bc:	3b01      	subs	r3, #1
   1b9be:	1c59      	adds	r1, r3, #1
   1b9c0:	6002      	str	r2, [r0, #0]
   1b9c2:	f100 0004 	add.w	r0, r0, #4
   1b9c6:	d1f9      	bne.n	1b9bc <mbedtls_mpi_sub_abs+0xac>
   1b9c8:	9803      	ldr	r0, [sp, #12]
   1b9ca:	f7fd fc0b 	bl	191e4 <nrf_free>
   1b9ce:	4638      	mov	r0, r7
   1b9d0:	b005      	add	sp, #20
   1b9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b9d4:	2900      	cmp	r1, #0
   1b9d6:	d0c6      	beq.n	1b966 <mbedtls_mpi_sub_abs+0x56>
   1b9d8:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
   1b9dc:	68a7      	ldr	r7, [r4, #8]
   1b9de:	3801      	subs	r0, #1
   1b9e0:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   1b9e4:	2a00      	cmp	r2, #0
   1b9e6:	d0b5      	beq.n	1b954 <mbedtls_mpi_sub_abs+0x44>
   1b9e8:	428b      	cmp	r3, r1
   1b9ea:	d8bc      	bhi.n	1b966 <mbedtls_mpi_sub_abs+0x56>
   1b9ec:	d34b      	bcc.n	1ba86 <mbedtls_mpi_sub_abs+0x176>
   1b9ee:	2b00      	cmp	r3, #0
   1b9f0:	d0b9      	beq.n	1b966 <mbedtls_mpi_sub_abs+0x56>
   1b9f2:	68a8      	ldr	r0, [r5, #8]
   1b9f4:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   1b9f8:	3901      	subs	r1, #1
   1b9fa:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
   1b9fe:	f857 e021 	ldr.w	lr, [r7, r1, lsl #2]
   1ba02:	0089      	lsls	r1, r1, #2
   1ba04:	45e6      	cmp	lr, ip
   1ba06:	4408      	add	r0, r1
   1ba08:	eb07 0201 	add.w	r2, r7, r1
   1ba0c:	d3ab      	bcc.n	1b966 <mbedtls_mpi_sub_abs+0x56>
   1ba0e:	d83a      	bhi.n	1ba86 <mbedtls_mpi_sub_abs+0x176>
   1ba10:	4601      	mov	r1, r0
   1ba12:	e006      	b.n	1ba22 <mbedtls_mpi_sub_abs+0x112>
   1ba14:	f851 7d04 	ldr.w	r7, [r1, #-4]!
   1ba18:	f852 0d04 	ldr.w	r0, [r2, #-4]!
   1ba1c:	4287      	cmp	r7, r0
   1ba1e:	d8a2      	bhi.n	1b966 <mbedtls_mpi_sub_abs+0x56>
   1ba20:	d331      	bcc.n	1ba86 <mbedtls_mpi_sub_abs+0x176>
   1ba22:	3b01      	subs	r3, #1
   1ba24:	d1f6      	bne.n	1ba14 <mbedtls_mpi_sub_abs+0x104>
   1ba26:	e79e      	b.n	1b966 <mbedtls_mpi_sub_abs+0x56>
   1ba28:	2500      	movs	r5, #0
   1ba2a:	462b      	mov	r3, r5
   1ba2c:	68b1      	ldr	r1, [r6, #8]
   1ba2e:	f851 6b04 	ldr.w	r6, [r1], #4
   1ba32:	3501      	adds	r5, #1
   1ba34:	1af2      	subs	r2, r6, r3
   1ba36:	f841 2c04 	str.w	r2, [r1, #-4]
   1ba3a:	f85c 7b04 	ldr.w	r7, [ip], #4
   1ba3e:	460c      	mov	r4, r1
   1ba40:	42ba      	cmp	r2, r7
   1ba42:	bf2c      	ite	cs
   1ba44:	f04f 0e00 	movcs.w	lr, #0
   1ba48:	f04f 0e01 	movcc.w	lr, #1
   1ba4c:	1bd2      	subs	r2, r2, r7
   1ba4e:	429e      	cmp	r6, r3
   1ba50:	bf2c      	ite	cs
   1ba52:	4673      	movcs	r3, lr
   1ba54:	f10e 0301 	addcc.w	r3, lr, #1
   1ba58:	4285      	cmp	r5, r0
   1ba5a:	f841 2c04 	str.w	r2, [r1, #-4]
   1ba5e:	d3e6      	bcc.n	1ba2e <mbedtls_mpi_sub_abs+0x11e>
   1ba60:	b90b      	cbnz	r3, 1ba66 <mbedtls_mpi_sub_abs+0x156>
   1ba62:	e7a4      	b.n	1b9ae <mbedtls_mpi_sub_abs+0x9e>
   1ba64:	2301      	movs	r3, #1
   1ba66:	6822      	ldr	r2, [r4, #0]
   1ba68:	1ad1      	subs	r1, r2, r3
   1ba6a:	429a      	cmp	r2, r3
   1ba6c:	f844 1b04 	str.w	r1, [r4], #4
   1ba70:	d3f8      	bcc.n	1ba64 <mbedtls_mpi_sub_abs+0x154>
   1ba72:	e79c      	b.n	1b9ae <mbedtls_mpi_sub_abs+0x9e>
   1ba74:	4621      	mov	r1, r4
   1ba76:	a801      	add	r0, sp, #4
   1ba78:	f7ff f9ac 	bl	1add4 <mbedtls_mpi_copy>
   1ba7c:	4607      	mov	r7, r0
   1ba7e:	2800      	cmp	r0, #0
   1ba80:	d196      	bne.n	1b9b0 <mbedtls_mpi_sub_abs+0xa0>
   1ba82:	ac01      	add	r4, sp, #4
   1ba84:	e776      	b.n	1b974 <mbedtls_mpi_sub_abs+0x64>
   1ba86:	f06f 0709 	mvn.w	r7, #9
   1ba8a:	4638      	mov	r0, r7
   1ba8c:	b005      	add	sp, #20
   1ba8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ba90 <mbedtls_mpi_add_mpi>:
   1ba90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba94:	680c      	ldr	r4, [r1, #0]
   1ba96:	6813      	ldr	r3, [r2, #0]
   1ba98:	4605      	mov	r5, r0
   1ba9a:	fb03 f304 	mul.w	r3, r3, r4
   1ba9e:	2b00      	cmp	r3, #0
   1baa0:	da39      	bge.n	1bb16 <mbedtls_mpi_add_mpi+0x86>
   1baa2:	684b      	ldr	r3, [r1, #4]
   1baa4:	4617      	mov	r7, r2
   1baa6:	460e      	mov	r6, r1
   1baa8:	6852      	ldr	r2, [r2, #4]
   1baaa:	b183      	cbz	r3, 1bace <mbedtls_mpi_add_mpi+0x3e>
   1baac:	6889      	ldr	r1, [r1, #8]
   1baae:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
   1bab2:	3801      	subs	r0, #1
   1bab4:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
   1bab8:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   1babc:	f1bc 0f00 	cmp.w	ip, #0
   1bac0:	d003      	beq.n	1baca <mbedtls_mpi_add_mpi+0x3a>
   1bac2:	e02e      	b.n	1bb22 <mbedtls_mpi_add_mpi+0x92>
   1bac4:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   1bac8:	bb58      	cbnz	r0, 1bb22 <mbedtls_mpi_add_mpi+0x92>
   1baca:	3b01      	subs	r3, #1
   1bacc:	d1fa      	bne.n	1bac4 <mbedtls_mpi_add_mpi+0x34>
   1bace:	b17a      	cbz	r2, 1baf0 <mbedtls_mpi_add_mpi+0x60>
   1bad0:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
   1bad4:	f8d7 c008 	ldr.w	ip, [r7, #8]
   1bad8:	3901      	subs	r1, #1
   1bada:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
   1bade:	b978      	cbnz	r0, 1bb00 <mbedtls_mpi_add_mpi+0x70>
   1bae0:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
   1bae4:	e002      	b.n	1baec <mbedtls_mpi_add_mpi+0x5c>
   1bae6:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   1baea:	bb28      	cbnz	r0, 1bb38 <mbedtls_mpi_add_mpi+0xa8>
   1baec:	3a01      	subs	r2, #1
   1baee:	d1fa      	bne.n	1bae6 <mbedtls_mpi_add_mpi+0x56>
   1baf0:	463a      	mov	r2, r7
   1baf2:	4631      	mov	r1, r6
   1baf4:	4628      	mov	r0, r5
   1baf6:	f7ff ff0b 	bl	1b910 <mbedtls_mpi_sub_abs>
   1bafa:	b148      	cbz	r0, 1bb10 <mbedtls_mpi_add_mpi+0x80>
   1bafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bb00:	4632      	mov	r2, r6
   1bb02:	4639      	mov	r1, r7
   1bb04:	4628      	mov	r0, r5
   1bb06:	f7ff ff03 	bl	1b910 <mbedtls_mpi_sub_abs>
   1bb0a:	2800      	cmp	r0, #0
   1bb0c:	d1f6      	bne.n	1bafc <mbedtls_mpi_add_mpi+0x6c>
   1bb0e:	4264      	negs	r4, r4
   1bb10:	602c      	str	r4, [r5, #0]
   1bb12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bb16:	f7ff fe57 	bl	1b7c8 <mbedtls_mpi_add_abs>
   1bb1a:	2800      	cmp	r0, #0
   1bb1c:	d1ee      	bne.n	1bafc <mbedtls_mpi_add_mpi+0x6c>
   1bb1e:	602c      	str	r4, [r5, #0]
   1bb20:	e7f7      	b.n	1bb12 <mbedtls_mpi_add_mpi+0x82>
   1bb22:	2a00      	cmp	r2, #0
   1bb24:	d0e4      	beq.n	1baf0 <mbedtls_mpi_add_mpi+0x60>
   1bb26:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
   1bb2a:	f8d7 c008 	ldr.w	ip, [r7, #8]
   1bb2e:	3901      	subs	r1, #1
   1bb30:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
   1bb34:	2800      	cmp	r0, #0
   1bb36:	d0d3      	beq.n	1bae0 <mbedtls_mpi_add_mpi+0x50>
   1bb38:	4293      	cmp	r3, r2
   1bb3a:	d8d9      	bhi.n	1baf0 <mbedtls_mpi_add_mpi+0x60>
   1bb3c:	d3e0      	bcc.n	1bb00 <mbedtls_mpi_add_mpi+0x70>
   1bb3e:	2b00      	cmp	r3, #0
   1bb40:	d0d6      	beq.n	1baf0 <mbedtls_mpi_add_mpi+0x60>
   1bb42:	68b0      	ldr	r0, [r6, #8]
   1bb44:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   1bb48:	3901      	subs	r1, #1
   1bb4a:	f850 8021 	ldr.w	r8, [r0, r1, lsl #2]
   1bb4e:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
   1bb52:	0089      	lsls	r1, r1, #2
   1bb54:	45f0      	cmp	r8, lr
   1bb56:	4408      	add	r0, r1
   1bb58:	eb0c 0201 	add.w	r2, ip, r1
   1bb5c:	d8c8      	bhi.n	1baf0 <mbedtls_mpi_add_mpi+0x60>
   1bb5e:	d3cf      	bcc.n	1bb00 <mbedtls_mpi_add_mpi+0x70>
   1bb60:	4601      	mov	r1, r0
   1bb62:	e006      	b.n	1bb72 <mbedtls_mpi_add_mpi+0xe2>
   1bb64:	f851 cd04 	ldr.w	ip, [r1, #-4]!
   1bb68:	f852 0d04 	ldr.w	r0, [r2, #-4]!
   1bb6c:	4584      	cmp	ip, r0
   1bb6e:	d8bf      	bhi.n	1baf0 <mbedtls_mpi_add_mpi+0x60>
   1bb70:	d3c6      	bcc.n	1bb00 <mbedtls_mpi_add_mpi+0x70>
   1bb72:	3b01      	subs	r3, #1
   1bb74:	d1f6      	bne.n	1bb64 <mbedtls_mpi_add_mpi+0xd4>
   1bb76:	e7bb      	b.n	1baf0 <mbedtls_mpi_add_mpi+0x60>

0001bb78 <mbedtls_mpi_sub_mpi>:
   1bb78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb7c:	680c      	ldr	r4, [r1, #0]
   1bb7e:	6813      	ldr	r3, [r2, #0]
   1bb80:	4605      	mov	r5, r0
   1bb82:	fb03 f304 	mul.w	r3, r3, r4
   1bb86:	2b00      	cmp	r3, #0
   1bb88:	dd64      	ble.n	1bc54 <mbedtls_mpi_sub_mpi+0xdc>
   1bb8a:	684b      	ldr	r3, [r1, #4]
   1bb8c:	4617      	mov	r7, r2
   1bb8e:	460e      	mov	r6, r1
   1bb90:	6852      	ldr	r2, [r2, #4]
   1bb92:	b183      	cbz	r3, 1bbb6 <mbedtls_mpi_sub_mpi+0x3e>
   1bb94:	6889      	ldr	r1, [r1, #8]
   1bb96:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
   1bb9a:	3801      	subs	r0, #1
   1bb9c:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
   1bba0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   1bba4:	f1bc 0f00 	cmp.w	ip, #0
   1bba8:	d003      	beq.n	1bbb2 <mbedtls_mpi_sub_mpi+0x3a>
   1bbaa:	e01f      	b.n	1bbec <mbedtls_mpi_sub_mpi+0x74>
   1bbac:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   1bbb0:	b9e0      	cbnz	r0, 1bbec <mbedtls_mpi_sub_mpi+0x74>
   1bbb2:	3b01      	subs	r3, #1
   1bbb4:	d1fa      	bne.n	1bbac <mbedtls_mpi_sub_mpi+0x34>
   1bbb6:	b182      	cbz	r2, 1bbda <mbedtls_mpi_sub_mpi+0x62>
   1bbb8:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
   1bbbc:	f8d7 c008 	ldr.w	ip, [r7, #8]
   1bbc0:	3901      	subs	r1, #1
   1bbc2:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
   1bbc6:	2800      	cmp	r0, #0
   1bbc8:	d13b      	bne.n	1bc42 <mbedtls_mpi_sub_mpi+0xca>
   1bbca:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
   1bbce:	e002      	b.n	1bbd6 <mbedtls_mpi_sub_mpi+0x5e>
   1bbd0:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   1bbd4:	b9a8      	cbnz	r0, 1bc02 <mbedtls_mpi_sub_mpi+0x8a>
   1bbd6:	3a01      	subs	r2, #1
   1bbd8:	d1fa      	bne.n	1bbd0 <mbedtls_mpi_sub_mpi+0x58>
   1bbda:	463a      	mov	r2, r7
   1bbdc:	4631      	mov	r1, r6
   1bbde:	4628      	mov	r0, r5
   1bbe0:	f7ff fe96 	bl	1b910 <mbedtls_mpi_sub_abs>
   1bbe4:	b900      	cbnz	r0, 1bbe8 <mbedtls_mpi_sub_mpi+0x70>
   1bbe6:	602c      	str	r4, [r5, #0]
   1bbe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bbec:	2a00      	cmp	r2, #0
   1bbee:	d0f4      	beq.n	1bbda <mbedtls_mpi_sub_mpi+0x62>
   1bbf0:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
   1bbf4:	f8d7 c008 	ldr.w	ip, [r7, #8]
   1bbf8:	3901      	subs	r1, #1
   1bbfa:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
   1bbfe:	2800      	cmp	r0, #0
   1bc00:	d0e3      	beq.n	1bbca <mbedtls_mpi_sub_mpi+0x52>
   1bc02:	4293      	cmp	r3, r2
   1bc04:	d8e9      	bhi.n	1bbda <mbedtls_mpi_sub_mpi+0x62>
   1bc06:	d31c      	bcc.n	1bc42 <mbedtls_mpi_sub_mpi+0xca>
   1bc08:	2b00      	cmp	r3, #0
   1bc0a:	d0e6      	beq.n	1bbda <mbedtls_mpi_sub_mpi+0x62>
   1bc0c:	68b0      	ldr	r0, [r6, #8]
   1bc0e:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   1bc12:	3901      	subs	r1, #1
   1bc14:	f850 8021 	ldr.w	r8, [r0, r1, lsl #2]
   1bc18:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
   1bc1c:	0089      	lsls	r1, r1, #2
   1bc1e:	45f0      	cmp	r8, lr
   1bc20:	4408      	add	r0, r1
   1bc22:	eb0c 0201 	add.w	r2, ip, r1
   1bc26:	d8d8      	bhi.n	1bbda <mbedtls_mpi_sub_mpi+0x62>
   1bc28:	d30b      	bcc.n	1bc42 <mbedtls_mpi_sub_mpi+0xca>
   1bc2a:	4601      	mov	r1, r0
   1bc2c:	e006      	b.n	1bc3c <mbedtls_mpi_sub_mpi+0xc4>
   1bc2e:	f851 cd04 	ldr.w	ip, [r1, #-4]!
   1bc32:	f852 0d04 	ldr.w	r0, [r2, #-4]!
   1bc36:	4584      	cmp	ip, r0
   1bc38:	d8cf      	bhi.n	1bbda <mbedtls_mpi_sub_mpi+0x62>
   1bc3a:	d302      	bcc.n	1bc42 <mbedtls_mpi_sub_mpi+0xca>
   1bc3c:	3b01      	subs	r3, #1
   1bc3e:	d1f6      	bne.n	1bc2e <mbedtls_mpi_sub_mpi+0xb6>
   1bc40:	e7cb      	b.n	1bbda <mbedtls_mpi_sub_mpi+0x62>
   1bc42:	4632      	mov	r2, r6
   1bc44:	4639      	mov	r1, r7
   1bc46:	4628      	mov	r0, r5
   1bc48:	f7ff fe62 	bl	1b910 <mbedtls_mpi_sub_abs>
   1bc4c:	2800      	cmp	r0, #0
   1bc4e:	d1cb      	bne.n	1bbe8 <mbedtls_mpi_sub_mpi+0x70>
   1bc50:	4264      	negs	r4, r4
   1bc52:	e7c8      	b.n	1bbe6 <mbedtls_mpi_sub_mpi+0x6e>
   1bc54:	f7ff fdb8 	bl	1b7c8 <mbedtls_mpi_add_abs>
   1bc58:	2800      	cmp	r0, #0
   1bc5a:	d0c4      	beq.n	1bbe6 <mbedtls_mpi_sub_mpi+0x6e>
   1bc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001bc60 <mbedtls_mpi_sub_int>:
   1bc60:	2a00      	cmp	r2, #0
   1bc62:	bfac      	ite	ge
   1bc64:	2301      	movge	r3, #1
   1bc66:	f04f 33ff 	movlt.w	r3, #4294967295
   1bc6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc6c:	2601      	movs	r6, #1
   1bc6e:	680d      	ldr	r5, [r1, #0]
   1bc70:	ea82 7ce2 	eor.w	ip, r2, r2, asr #31
   1bc74:	fb05 f703 	mul.w	r7, r5, r3
   1bc78:	b085      	sub	sp, #20
   1bc7a:	ebac 7ce2 	sub.w	ip, ip, r2, asr #31
   1bc7e:	2f00      	cmp	r7, #0
   1bc80:	9602      	str	r6, [sp, #8]
   1bc82:	e9cd c300 	strd	ip, r3, [sp]
   1bc86:	f8cd d00c 	str.w	sp, [sp, #12]
   1bc8a:	4606      	mov	r6, r0
   1bc8c:	dd2c      	ble.n	1bce8 <mbedtls_mpi_sub_int+0x88>
   1bc8e:	684b      	ldr	r3, [r1, #4]
   1bc90:	460c      	mov	r4, r1
   1bc92:	b173      	cbz	r3, 1bcb2 <mbedtls_mpi_sub_int+0x52>
   1bc94:	68a7      	ldr	r7, [r4, #8]
   1bc96:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   1bc9a:	3901      	subs	r1, #1
   1bc9c:	f857 0021 	ldr.w	r0, [r7, r1, lsl #2]
   1bca0:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   1bca4:	b118      	cbz	r0, 1bcae <mbedtls_mpi_sub_int+0x4e>
   1bca6:	e00e      	b.n	1bcc6 <mbedtls_mpi_sub_int+0x66>
   1bca8:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   1bcac:	b958      	cbnz	r0, 1bcc6 <mbedtls_mpi_sub_int+0x66>
   1bcae:	3b01      	subs	r3, #1
   1bcb0:	d1fa      	bne.n	1bca8 <mbedtls_mpi_sub_int+0x48>
   1bcb2:	b982      	cbnz	r2, 1bcd6 <mbedtls_mpi_sub_int+0x76>
   1bcb4:	4621      	mov	r1, r4
   1bcb6:	aa01      	add	r2, sp, #4
   1bcb8:	4630      	mov	r0, r6
   1bcba:	f7ff f8f9 	bl	1aeb0 <mbedtls_mpi_sub_abs.constprop.8>
   1bcbe:	b900      	cbnz	r0, 1bcc2 <mbedtls_mpi_sub_int+0x62>
   1bcc0:	6035      	str	r5, [r6, #0]
   1bcc2:	b005      	add	sp, #20
   1bcc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bcc6:	2a00      	cmp	r2, #0
   1bcc8:	d0f4      	beq.n	1bcb4 <mbedtls_mpi_sub_int+0x54>
   1bcca:	2b01      	cmp	r3, #1
   1bccc:	d8f2      	bhi.n	1bcb4 <mbedtls_mpi_sub_int+0x54>
   1bcce:	683b      	ldr	r3, [r7, #0]
   1bcd0:	459c      	cmp	ip, r3
   1bcd2:	d3ef      	bcc.n	1bcb4 <mbedtls_mpi_sub_int+0x54>
   1bcd4:	d9ee      	bls.n	1bcb4 <mbedtls_mpi_sub_int+0x54>
   1bcd6:	4622      	mov	r2, r4
   1bcd8:	a901      	add	r1, sp, #4
   1bcda:	4630      	mov	r0, r6
   1bcdc:	f7ff fe18 	bl	1b910 <mbedtls_mpi_sub_abs>
   1bce0:	2800      	cmp	r0, #0
   1bce2:	d1ee      	bne.n	1bcc2 <mbedtls_mpi_sub_int+0x62>
   1bce4:	426d      	negs	r5, r5
   1bce6:	e7eb      	b.n	1bcc0 <mbedtls_mpi_sub_int+0x60>
   1bce8:	aa01      	add	r2, sp, #4
   1bcea:	f7ff fd6d 	bl	1b7c8 <mbedtls_mpi_add_abs>
   1bcee:	2800      	cmp	r0, #0
   1bcf0:	d0e6      	beq.n	1bcc0 <mbedtls_mpi_sub_int+0x60>
   1bcf2:	b005      	add	sp, #20
   1bcf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bcf6:	bf00      	nop

0001bcf8 <mbedtls_mpi_mul_mpi>:
   1bcf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bcfc:	4606      	mov	r6, r0
   1bcfe:	2300      	movs	r3, #0
   1bd00:	2001      	movs	r0, #1
   1bd02:	b086      	sub	sp, #24
   1bd04:	428e      	cmp	r6, r1
   1bd06:	4690      	mov	r8, r2
   1bd08:	9000      	str	r0, [sp, #0]
   1bd0a:	9003      	str	r0, [sp, #12]
   1bd0c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1bd10:	e9cd 3304 	strd	r3, r3, [sp, #16]
   1bd14:	f000 80d1 	beq.w	1beba <mbedtls_mpi_mul_mpi+0x1c2>
   1bd18:	460f      	mov	r7, r1
   1bd1a:	4546      	cmp	r6, r8
   1bd1c:	f000 80d5 	beq.w	1beca <mbedtls_mpi_mul_mpi+0x1d2>
   1bd20:	687d      	ldr	r5, [r7, #4]
   1bd22:	b185      	cbz	r5, 1bd46 <mbedtls_mpi_mul_mpi+0x4e>
   1bd24:	68bb      	ldr	r3, [r7, #8]
   1bd26:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
   1bd2a:	3a01      	subs	r2, #1
   1bd2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1bd30:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1bd34:	b129      	cbz	r1, 1bd42 <mbedtls_mpi_mul_mpi+0x4a>
   1bd36:	e0ba      	b.n	1beae <mbedtls_mpi_mul_mpi+0x1b6>
   1bd38:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1bd3c:	2a00      	cmp	r2, #0
   1bd3e:	f040 80b6 	bne.w	1beae <mbedtls_mpi_mul_mpi+0x1b6>
   1bd42:	3d01      	subs	r5, #1
   1bd44:	d1f8      	bne.n	1bd38 <mbedtls_mpi_mul_mpi+0x40>
   1bd46:	f8d8 4004 	ldr.w	r4, [r8, #4]
   1bd4a:	2500      	movs	r5, #0
   1bd4c:	2c00      	cmp	r4, #0
   1bd4e:	d03d      	beq.n	1bdcc <mbedtls_mpi_mul_mpi+0xd4>
   1bd50:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1bd54:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   1bd58:	3a01      	subs	r2, #1
   1bd5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1bd5e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1bd62:	b119      	cbz	r1, 1bd6c <mbedtls_mpi_mul_mpi+0x74>
   1bd64:	e004      	b.n	1bd70 <mbedtls_mpi_mul_mpi+0x78>
   1bd66:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1bd6a:	b90a      	cbnz	r2, 1bd70 <mbedtls_mpi_mul_mpi+0x78>
   1bd6c:	3c01      	subs	r4, #1
   1bd6e:	d1fa      	bne.n	1bd66 <mbedtls_mpi_mul_mpi+0x6e>
   1bd70:	f242 7310 	movw	r3, #10000	; 0x2710
   1bd74:	eb04 0905 	add.w	r9, r4, r5
   1bd78:	4599      	cmp	r9, r3
   1bd7a:	f200 80b0 	bhi.w	1bede <mbedtls_mpi_mul_mpi+0x1e6>
   1bd7e:	f8d6 a004 	ldr.w	sl, [r6, #4]
   1bd82:	45d1      	cmp	r9, sl
   1bd84:	d925      	bls.n	1bdd2 <mbedtls_mpi_mul_mpi+0xda>
   1bd86:	2104      	movs	r1, #4
   1bd88:	4648      	mov	r0, r9
   1bd8a:	f7fd fa17 	bl	191bc <nrf_calloc>
   1bd8e:	4682      	mov	sl, r0
   1bd90:	2800      	cmp	r0, #0
   1bd92:	f000 80a4 	beq.w	1bede <mbedtls_mpi_mul_mpi+0x1e6>
   1bd96:	68b1      	ldr	r1, [r6, #8]
   1bd98:	b189      	cbz	r1, 1bdbe <mbedtls_mpi_mul_mpi+0xc6>
   1bd9a:	6872      	ldr	r2, [r6, #4]
   1bd9c:	0092      	lsls	r2, r2, #2
   1bd9e:	f7f1 ff1b 	bl	dbd8 <memcpy>
   1bda2:	e9d6 2001 	ldrd	r2, r0, [r6, #4]
   1bda6:	1e53      	subs	r3, r2, #1
   1bda8:	b13a      	cbz	r2, 1bdba <mbedtls_mpi_mul_mpi+0xc2>
   1bdaa:	2200      	movs	r2, #0
   1bdac:	3b01      	subs	r3, #1
   1bdae:	1c59      	adds	r1, r3, #1
   1bdb0:	6002      	str	r2, [r0, #0]
   1bdb2:	f100 0004 	add.w	r0, r0, #4
   1bdb6:	d1f9      	bne.n	1bdac <mbedtls_mpi_mul_mpi+0xb4>
   1bdb8:	68b0      	ldr	r0, [r6, #8]
   1bdba:	f7fd fa13 	bl	191e4 <nrf_free>
   1bdbe:	e9c6 9a01 	strd	r9, sl, [r6, #4]
   1bdc2:	ea4f 0289 	mov.w	r2, r9, lsl #2
   1bdc6:	f8d6 9008 	ldr.w	r9, [r6, #8]
   1bdca:	e025      	b.n	1be18 <mbedtls_mpi_mul_mpi+0x120>
   1bdcc:	4625      	mov	r5, r4
   1bdce:	f8d6 a004 	ldr.w	sl, [r6, #4]
   1bdd2:	f1ba 0f00 	cmp.w	sl, #0
   1bdd6:	f040 8085 	bne.w	1bee4 <mbedtls_mpi_mul_mpi+0x1ec>
   1bdda:	2104      	movs	r1, #4
   1bddc:	2001      	movs	r0, #1
   1bdde:	f7fd f9ed 	bl	191bc <nrf_calloc>
   1bde2:	4681      	mov	r9, r0
   1bde4:	2800      	cmp	r0, #0
   1bde6:	d07a      	beq.n	1bede <mbedtls_mpi_mul_mpi+0x1e6>
   1bde8:	68b1      	ldr	r1, [r6, #8]
   1bdea:	b189      	cbz	r1, 1be10 <mbedtls_mpi_mul_mpi+0x118>
   1bdec:	6872      	ldr	r2, [r6, #4]
   1bdee:	0092      	lsls	r2, r2, #2
   1bdf0:	f7f1 fef2 	bl	dbd8 <memcpy>
   1bdf4:	e9d6 2001 	ldrd	r2, r0, [r6, #4]
   1bdf8:	1e53      	subs	r3, r2, #1
   1bdfa:	b13a      	cbz	r2, 1be0c <mbedtls_mpi_mul_mpi+0x114>
   1bdfc:	4652      	mov	r2, sl
   1bdfe:	3b01      	subs	r3, #1
   1be00:	1c59      	adds	r1, r3, #1
   1be02:	6002      	str	r2, [r0, #0]
   1be04:	f100 0004 	add.w	r0, r0, #4
   1be08:	d1f9      	bne.n	1bdfe <mbedtls_mpi_mul_mpi+0x106>
   1be0a:	68b0      	ldr	r0, [r6, #8]
   1be0c:	f7fd f9ea 	bl	191e4 <nrf_free>
   1be10:	2301      	movs	r3, #1
   1be12:	2204      	movs	r2, #4
   1be14:	e9c6 3901 	strd	r3, r9, [r6, #4]
   1be18:	2100      	movs	r1, #0
   1be1a:	4648      	mov	r0, r9
   1be1c:	f00e fd62 	bl	2a8e4 <memset>
   1be20:	2100      	movs	r1, #0
   1be22:	2301      	movs	r3, #1
   1be24:	68b2      	ldr	r2, [r6, #8]
   1be26:	6011      	str	r1, [r2, #0]
   1be28:	6033      	str	r3, [r6, #0]
   1be2a:	b19c      	cbz	r4, 1be54 <mbedtls_mpi_mul_mpi+0x15c>
   1be2c:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
   1be30:	f109 39ff 	add.w	r9, r9, #4294967295
   1be34:	ea4f 0989 	mov.w	r9, r9, lsl #2
   1be38:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1be3c:	68b2      	ldr	r2, [r6, #8]
   1be3e:	f853 3009 	ldr.w	r3, [r3, r9]
   1be42:	444a      	add	r2, r9
   1be44:	68b9      	ldr	r1, [r7, #8]
   1be46:	4628      	mov	r0, r5
   1be48:	f7fe fc14 	bl	1a674 <mpi_mul_hlp>
   1be4c:	3c01      	subs	r4, #1
   1be4e:	f1a9 0904 	sub.w	r9, r9, #4
   1be52:	d1f1      	bne.n	1be38 <mbedtls_mpi_mul_mpi+0x140>
   1be54:	2400      	movs	r4, #0
   1be56:	683a      	ldr	r2, [r7, #0]
   1be58:	f8d8 3000 	ldr.w	r3, [r8]
   1be5c:	fb03 f302 	mul.w	r3, r3, r2
   1be60:	6033      	str	r3, [r6, #0]
   1be62:	9805      	ldr	r0, [sp, #20]
   1be64:	b160      	cbz	r0, 1be80 <mbedtls_mpi_mul_mpi+0x188>
   1be66:	9a04      	ldr	r2, [sp, #16]
   1be68:	1e53      	subs	r3, r2, #1
   1be6a:	b13a      	cbz	r2, 1be7c <mbedtls_mpi_mul_mpi+0x184>
   1be6c:	2200      	movs	r2, #0
   1be6e:	3b01      	subs	r3, #1
   1be70:	1c5d      	adds	r5, r3, #1
   1be72:	6002      	str	r2, [r0, #0]
   1be74:	f100 0004 	add.w	r0, r0, #4
   1be78:	d1f9      	bne.n	1be6e <mbedtls_mpi_mul_mpi+0x176>
   1be7a:	9805      	ldr	r0, [sp, #20]
   1be7c:	f7fd f9b2 	bl	191e4 <nrf_free>
   1be80:	2200      	movs	r2, #0
   1be82:	2301      	movs	r3, #1
   1be84:	9802      	ldr	r0, [sp, #8]
   1be86:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1be8a:	9205      	str	r2, [sp, #20]
   1be8c:	b158      	cbz	r0, 1bea6 <mbedtls_mpi_mul_mpi+0x1ae>
   1be8e:	9901      	ldr	r1, [sp, #4]
   1be90:	1e4b      	subs	r3, r1, #1
   1be92:	b131      	cbz	r1, 1bea2 <mbedtls_mpi_mul_mpi+0x1aa>
   1be94:	3b01      	subs	r3, #1
   1be96:	1c59      	adds	r1, r3, #1
   1be98:	6002      	str	r2, [r0, #0]
   1be9a:	f100 0004 	add.w	r0, r0, #4
   1be9e:	d1f9      	bne.n	1be94 <mbedtls_mpi_mul_mpi+0x19c>
   1bea0:	9802      	ldr	r0, [sp, #8]
   1bea2:	f7fd f99f 	bl	191e4 <nrf_free>
   1bea6:	4620      	mov	r0, r4
   1bea8:	b006      	add	sp, #24
   1beaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1beae:	f8d8 4004 	ldr.w	r4, [r8, #4]
   1beb2:	2c00      	cmp	r4, #0
   1beb4:	f47f af4c 	bne.w	1bd50 <mbedtls_mpi_mul_mpi+0x58>
   1beb8:	e75a      	b.n	1bd70 <mbedtls_mpi_mul_mpi+0x78>
   1beba:	4668      	mov	r0, sp
   1bebc:	f7fe ff8a 	bl	1add4 <mbedtls_mpi_copy>
   1bec0:	4604      	mov	r4, r0
   1bec2:	2800      	cmp	r0, #0
   1bec4:	d1cd      	bne.n	1be62 <mbedtls_mpi_mul_mpi+0x16a>
   1bec6:	466f      	mov	r7, sp
   1bec8:	e727      	b.n	1bd1a <mbedtls_mpi_mul_mpi+0x22>
   1beca:	a803      	add	r0, sp, #12
   1becc:	4631      	mov	r1, r6
   1bece:	f7fe ff81 	bl	1add4 <mbedtls_mpi_copy>
   1bed2:	4604      	mov	r4, r0
   1bed4:	2800      	cmp	r0, #0
   1bed6:	d1c4      	bne.n	1be62 <mbedtls_mpi_mul_mpi+0x16a>
   1bed8:	f10d 080c 	add.w	r8, sp, #12
   1bedc:	e720      	b.n	1bd20 <mbedtls_mpi_mul_mpi+0x28>
   1bede:	f06f 040f 	mvn.w	r4, #15
   1bee2:	e7be      	b.n	1be62 <mbedtls_mpi_mul_mpi+0x16a>
   1bee4:	46d1      	mov	r9, sl
   1bee6:	e76c      	b.n	1bdc2 <mbedtls_mpi_mul_mpi+0xca>

0001bee8 <mbedtls_mpi_mul_int>:
   1bee8:	2301      	movs	r3, #1
   1beea:	b500      	push	{lr}
   1beec:	b085      	sub	sp, #20
   1beee:	9200      	str	r2, [sp, #0]
   1bef0:	aa01      	add	r2, sp, #4
   1bef2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1bef6:	f8cd d00c 	str.w	sp, [sp, #12]
   1befa:	f7ff fefd 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1befe:	b005      	add	sp, #20
   1bf00:	f85d fb04 	ldr.w	pc, [sp], #4

0001bf04 <mbedtls_mpi_div_mpi>:
   1bf04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf08:	685e      	ldr	r6, [r3, #4]
   1bf0a:	b0a3      	sub	sp, #140	; 0x8c
   1bf0c:	b196      	cbz	r6, 1bf34 <mbedtls_mpi_div_mpi+0x30>
   1bf0e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1bf12:	f106 4980 	add.w	r9, r6, #1073741824	; 0x40000000
   1bf16:	f109 39ff 	add.w	r9, r9, #4294967295
   1bf1a:	f858 5029 	ldr.w	r5, [r8, r9, lsl #2]
   1bf1e:	eb08 0e89 	add.w	lr, r8, r9, lsl #2
   1bf22:	b96d      	cbnz	r5, 1bf40 <mbedtls_mpi_div_mpi+0x3c>
   1bf24:	46f4      	mov	ip, lr
   1bf26:	4637      	mov	r7, r6
   1bf28:	e002      	b.n	1bf30 <mbedtls_mpi_div_mpi+0x2c>
   1bf2a:	f85c 4d04 	ldr.w	r4, [ip, #-4]!
   1bf2e:	b93c      	cbnz	r4, 1bf40 <mbedtls_mpi_div_mpi+0x3c>
   1bf30:	3f01      	subs	r7, #1
   1bf32:	d1fa      	bne.n	1bf2a <mbedtls_mpi_div_mpi+0x26>
   1bf34:	f06f 060b 	mvn.w	r6, #11
   1bf38:	4630      	mov	r0, r6
   1bf3a:	b023      	add	sp, #140	; 0x8c
   1bf3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf40:	681d      	ldr	r5, [r3, #0]
   1bf42:	2d00      	cmp	r5, #0
   1bf44:	d0f6      	beq.n	1bf34 <mbedtls_mpi_div_mpi+0x30>
   1bf46:	4614      	mov	r4, r2
   1bf48:	468a      	mov	sl, r1
   1bf4a:	2200      	movs	r2, #0
   1bf4c:	2101      	movs	r1, #1
   1bf4e:	469b      	mov	fp, r3
   1bf50:	6863      	ldr	r3, [r4, #4]
   1bf52:	4605      	mov	r5, r0
   1bf54:	9110      	str	r1, [sp, #64]	; 0x40
   1bf56:	9113      	str	r1, [sp, #76]	; 0x4c
   1bf58:	9116      	str	r1, [sp, #88]	; 0x58
   1bf5a:	9119      	str	r1, [sp, #100]	; 0x64
   1bf5c:	911c      	str	r1, [sp, #112]	; 0x70
   1bf5e:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
   1bf62:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
   1bf66:	e9cd 2217 	strd	r2, r2, [sp, #92]	; 0x5c
   1bf6a:	e9cd 221a 	strd	r2, r2, [sp, #104]	; 0x68
   1bf6e:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
   1bf72:	2b00      	cmp	r3, #0
   1bf74:	f000 821a 	beq.w	1c3ac <mbedtls_mpi_div_mpi+0x4a8>
   1bf78:	68a2      	ldr	r2, [r4, #8]
   1bf7a:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   1bf7e:	3901      	subs	r1, #1
   1bf80:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1bf84:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   1bf88:	b120      	cbz	r0, 1bf94 <mbedtls_mpi_div_mpi+0x90>
   1bf8a:	e07b      	b.n	1c084 <mbedtls_mpi_div_mpi+0x180>
   1bf8c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   1bf90:	2900      	cmp	r1, #0
   1bf92:	d177      	bne.n	1c084 <mbedtls_mpi_div_mpi+0x180>
   1bf94:	3b01      	subs	r3, #1
   1bf96:	d1f9      	bne.n	1bf8c <mbedtls_mpi_div_mpi+0x88>
   1bf98:	f858 2029 	ldr.w	r2, [r8, r9, lsl #2]
   1bf9c:	2a00      	cmp	r2, #0
   1bf9e:	d177      	bne.n	1c090 <mbedtls_mpi_div_mpi+0x18c>
   1bfa0:	4672      	mov	r2, lr
   1bfa2:	e003      	b.n	1bfac <mbedtls_mpi_div_mpi+0xa8>
   1bfa4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   1bfa8:	2900      	cmp	r1, #0
   1bfaa:	d16f      	bne.n	1c08c <mbedtls_mpi_div_mpi+0x188>
   1bfac:	3e01      	subs	r6, #1
   1bfae:	d1f9      	bne.n	1bfa4 <mbedtls_mpi_div_mpi+0xa0>
   1bfb0:	a810      	add	r0, sp, #64	; 0x40
   1bfb2:	4621      	mov	r1, r4
   1bfb4:	f7fe ff0e 	bl	1add4 <mbedtls_mpi_copy>
   1bfb8:	4606      	mov	r6, r0
   1bfba:	2800      	cmp	r0, #0
   1bfbc:	f000 8092 	beq.w	1c0e4 <mbedtls_mpi_div_mpi+0x1e0>
   1bfc0:	2700      	movs	r7, #0
   1bfc2:	9812      	ldr	r0, [sp, #72]	; 0x48
   1bfc4:	b160      	cbz	r0, 1bfe0 <mbedtls_mpi_div_mpi+0xdc>
   1bfc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1bfc8:	1e53      	subs	r3, r2, #1
   1bfca:	b13a      	cbz	r2, 1bfdc <mbedtls_mpi_div_mpi+0xd8>
   1bfcc:	2200      	movs	r2, #0
   1bfce:	3b01      	subs	r3, #1
   1bfd0:	1c5c      	adds	r4, r3, #1
   1bfd2:	6002      	str	r2, [r0, #0]
   1bfd4:	f100 0004 	add.w	r0, r0, #4
   1bfd8:	d1f9      	bne.n	1bfce <mbedtls_mpi_div_mpi+0xca>
   1bfda:	9812      	ldr	r0, [sp, #72]	; 0x48
   1bfdc:	f7fd f902 	bl	191e4 <nrf_free>
   1bfe0:	2200      	movs	r2, #0
   1bfe2:	2301      	movs	r3, #1
   1bfe4:	9815      	ldr	r0, [sp, #84]	; 0x54
   1bfe6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
   1bfea:	9212      	str	r2, [sp, #72]	; 0x48
   1bfec:	b158      	cbz	r0, 1c006 <mbedtls_mpi_div_mpi+0x102>
   1bfee:	9914      	ldr	r1, [sp, #80]	; 0x50
   1bff0:	1e4b      	subs	r3, r1, #1
   1bff2:	b131      	cbz	r1, 1c002 <mbedtls_mpi_div_mpi+0xfe>
   1bff4:	3b01      	subs	r3, #1
   1bff6:	1c59      	adds	r1, r3, #1
   1bff8:	6002      	str	r2, [r0, #0]
   1bffa:	f100 0004 	add.w	r0, r0, #4
   1bffe:	d1f9      	bne.n	1bff4 <mbedtls_mpi_div_mpi+0xf0>
   1c000:	9815      	ldr	r0, [sp, #84]	; 0x54
   1c002:	f7fd f8ef 	bl	191e4 <nrf_free>
   1c006:	2200      	movs	r2, #0
   1c008:	2301      	movs	r3, #1
   1c00a:	9818      	ldr	r0, [sp, #96]	; 0x60
   1c00c:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
   1c010:	9215      	str	r2, [sp, #84]	; 0x54
   1c012:	b158      	cbz	r0, 1c02c <mbedtls_mpi_div_mpi+0x128>
   1c014:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1c016:	1e4b      	subs	r3, r1, #1
   1c018:	b131      	cbz	r1, 1c028 <mbedtls_mpi_div_mpi+0x124>
   1c01a:	3b01      	subs	r3, #1
   1c01c:	1c5d      	adds	r5, r3, #1
   1c01e:	6002      	str	r2, [r0, #0]
   1c020:	f100 0004 	add.w	r0, r0, #4
   1c024:	d1f9      	bne.n	1c01a <mbedtls_mpi_div_mpi+0x116>
   1c026:	9818      	ldr	r0, [sp, #96]	; 0x60
   1c028:	f7fd f8dc 	bl	191e4 <nrf_free>
   1c02c:	2200      	movs	r2, #0
   1c02e:	2301      	movs	r3, #1
   1c030:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1c032:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   1c036:	9218      	str	r2, [sp, #96]	; 0x60
   1c038:	b158      	cbz	r0, 1c052 <mbedtls_mpi_div_mpi+0x14e>
   1c03a:	991a      	ldr	r1, [sp, #104]	; 0x68
   1c03c:	1e4b      	subs	r3, r1, #1
   1c03e:	b131      	cbz	r1, 1c04e <mbedtls_mpi_div_mpi+0x14a>
   1c040:	3b01      	subs	r3, #1
   1c042:	1c5c      	adds	r4, r3, #1
   1c044:	6002      	str	r2, [r0, #0]
   1c046:	f100 0004 	add.w	r0, r0, #4
   1c04a:	d1f9      	bne.n	1c040 <mbedtls_mpi_div_mpi+0x13c>
   1c04c:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1c04e:	f7fd f8c9 	bl	191e4 <nrf_free>
   1c052:	2100      	movs	r1, #0
   1c054:	2301      	movs	r3, #1
   1c056:	911b      	str	r1, [sp, #108]	; 0x6c
   1c058:	e9cd 3119 	strd	r3, r1, [sp, #100]	; 0x64
   1c05c:	2f00      	cmp	r7, #0
   1c05e:	f43f af6b 	beq.w	1bf38 <mbedtls_mpi_div_mpi+0x34>
   1c062:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1c064:	1e53      	subs	r3, r2, #1
   1c066:	b132      	cbz	r2, 1c076 <mbedtls_mpi_div_mpi+0x172>
   1c068:	463a      	mov	r2, r7
   1c06a:	3b01      	subs	r3, #1
   1c06c:	1c58      	adds	r0, r3, #1
   1c06e:	6011      	str	r1, [r2, #0]
   1c070:	f102 0204 	add.w	r2, r2, #4
   1c074:	d1f9      	bne.n	1c06a <mbedtls_mpi_div_mpi+0x166>
   1c076:	4638      	mov	r0, r7
   1c078:	f7fd f8b4 	bl	191e4 <nrf_free>
   1c07c:	4630      	mov	r0, r6
   1c07e:	b023      	add	sp, #140	; 0x8c
   1c080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c084:	f858 2029 	ldr.w	r2, [r8, r9, lsl #2]
   1c088:	2a00      	cmp	r2, #0
   1c08a:	d089      	beq.n	1bfa0 <mbedtls_mpi_div_mpi+0x9c>
   1c08c:	429e      	cmp	r6, r3
   1c08e:	d38f      	bcc.n	1bfb0 <mbedtls_mpi_div_mpi+0xac>
   1c090:	429e      	cmp	r6, r3
   1c092:	f200 8190 	bhi.w	1c3b6 <mbedtls_mpi_div_mpi+0x4b2>
   1c096:	2b00      	cmp	r3, #0
   1c098:	d08a      	beq.n	1bfb0 <mbedtls_mpi_div_mpi+0xac>
   1c09a:	68a1      	ldr	r1, [r4, #8]
   1c09c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1c0a0:	3a01      	subs	r2, #1
   1c0a2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
   1c0a6:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
   1c0aa:	0092      	lsls	r2, r2, #2
   1c0ac:	4286      	cmp	r6, r0
   1c0ae:	4411      	add	r1, r2
   1c0b0:	4490      	add	r8, r2
   1c0b2:	f4ff af7d 	bcc.w	1bfb0 <mbedtls_mpi_div_mpi+0xac>
   1c0b6:	f200 817e 	bhi.w	1c3b6 <mbedtls_mpi_div_mpi+0x4b2>
   1c0ba:	460a      	mov	r2, r1
   1c0bc:	e008      	b.n	1c0d0 <mbedtls_mpi_div_mpi+0x1cc>
   1c0be:	f852 0d04 	ldr.w	r0, [r2, #-4]!
   1c0c2:	f858 1d04 	ldr.w	r1, [r8, #-4]!
   1c0c6:	4288      	cmp	r0, r1
   1c0c8:	f63f af72 	bhi.w	1bfb0 <mbedtls_mpi_div_mpi+0xac>
   1c0cc:	f0c0 8173 	bcc.w	1c3b6 <mbedtls_mpi_div_mpi+0x4b2>
   1c0d0:	3b01      	subs	r3, #1
   1c0d2:	d1f4      	bne.n	1c0be <mbedtls_mpi_div_mpi+0x1ba>
   1c0d4:	a810      	add	r0, sp, #64	; 0x40
   1c0d6:	4621      	mov	r1, r4
   1c0d8:	f7fe fe7c 	bl	1add4 <mbedtls_mpi_copy>
   1c0dc:	4606      	mov	r6, r0
   1c0de:	2800      	cmp	r0, #0
   1c0e0:	f47f af6e 	bne.w	1bfc0 <mbedtls_mpi_div_mpi+0xbc>
   1c0e4:	a813      	add	r0, sp, #76	; 0x4c
   1c0e6:	4659      	mov	r1, fp
   1c0e8:	f7fe fe74 	bl	1add4 <mbedtls_mpi_copy>
   1c0ec:	4606      	mov	r6, r0
   1c0ee:	2800      	cmp	r0, #0
   1c0f0:	f47f af66 	bne.w	1bfc0 <mbedtls_mpi_div_mpi+0xbc>
   1c0f4:	f242 7210 	movw	r2, #10000	; 0x2710
   1c0f8:	2301      	movs	r3, #1
   1c0fa:	6867      	ldr	r7, [r4, #4]
   1c0fc:	9313      	str	r3, [sp, #76]	; 0x4c
   1c0fe:	3702      	adds	r7, #2
   1c100:	4297      	cmp	r7, r2
   1c102:	9310      	str	r3, [sp, #64]	; 0x40
   1c104:	f200 8193 	bhi.w	1c42e <mbedtls_mpi_div_mpi+0x52a>
   1c108:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   1c10c:	4547      	cmp	r7, r8
   1c10e:	d91d      	bls.n	1c14c <mbedtls_mpi_div_mpi+0x248>
   1c110:	2104      	movs	r1, #4
   1c112:	4638      	mov	r0, r7
   1c114:	f7fd f852 	bl	191bc <nrf_calloc>
   1c118:	4681      	mov	r9, r0
   1c11a:	2800      	cmp	r0, #0
   1c11c:	f000 8187 	beq.w	1c42e <mbedtls_mpi_div_mpi+0x52a>
   1c120:	9918      	ldr	r1, [sp, #96]	; 0x60
   1c122:	b181      	cbz	r1, 1c146 <mbedtls_mpi_div_mpi+0x242>
   1c124:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1c126:	0092      	lsls	r2, r2, #2
   1c128:	f7f1 fd56 	bl	dbd8 <memcpy>
   1c12c:	e9dd 2017 	ldrd	r2, r0, [sp, #92]	; 0x5c
   1c130:	1e53      	subs	r3, r2, #1
   1c132:	b132      	cbz	r2, 1c142 <mbedtls_mpi_div_mpi+0x23e>
   1c134:	3b01      	subs	r3, #1
   1c136:	1c5a      	adds	r2, r3, #1
   1c138:	6006      	str	r6, [r0, #0]
   1c13a:	f100 0004 	add.w	r0, r0, #4
   1c13e:	d1f9      	bne.n	1c134 <mbedtls_mpi_div_mpi+0x230>
   1c140:	9818      	ldr	r0, [sp, #96]	; 0x60
   1c142:	f7fd f84f 	bl	191e4 <nrf_free>
   1c146:	46b8      	mov	r8, r7
   1c148:	e9cd 7917 	strd	r7, r9, [sp, #92]	; 0x5c
   1c14c:	f1b8 0f00 	cmp.w	r8, #0
   1c150:	f000 8171 	beq.w	1c436 <mbedtls_mpi_div_mpi+0x532>
   1c154:	9e18      	ldr	r6, [sp, #96]	; 0x60
   1c156:	ea4f 0288 	mov.w	r2, r8, lsl #2
   1c15a:	2700      	movs	r7, #0
   1c15c:	4630      	mov	r0, r6
   1c15e:	4639      	mov	r1, r7
   1c160:	f00e fbc0 	bl	2a8e4 <memset>
   1c164:	2201      	movs	r2, #1
   1c166:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1c168:	601f      	str	r7, [r3, #0]
   1c16a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1c16c:	9216      	str	r2, [sp, #88]	; 0x58
   1c16e:	4293      	cmp	r3, r2
   1c170:	f240 81b2 	bls.w	1c4d8 <mbedtls_mpi_div_mpi+0x5d4>
   1c174:	2104      	movs	r1, #4
   1c176:	2003      	movs	r0, #3
   1c178:	f7fd f820 	bl	191bc <nrf_calloc>
   1c17c:	4607      	mov	r7, r0
   1c17e:	2800      	cmp	r0, #0
   1c180:	f000 8155 	beq.w	1c42e <mbedtls_mpi_div_mpi+0x52a>
   1c184:	2303      	movs	r3, #3
   1c186:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1c188:	e9cd 301d 	strd	r3, r0, [sp, #116]	; 0x74
   1c18c:	9203      	str	r2, [sp, #12]
   1c18e:	2a00      	cmp	r2, #0
   1c190:	f000 8171 	beq.w	1c476 <mbedtls_mpi_div_mpi+0x572>
   1c194:	f1b2 0901 	subs.w	r9, r2, #1
   1c198:	9915      	ldr	r1, [sp, #84]	; 0x54
   1c19a:	f000 81cf 	beq.w	1c53c <mbedtls_mpi_div_mpi+0x638>
   1c19e:	f851 0029 	ldr.w	r0, [r1, r9, lsl #2]
   1c1a2:	2800      	cmp	r0, #0
   1c1a4:	f040 81c5 	bne.w	1c532 <mbedtls_mpi_div_mpi+0x62e>
   1c1a8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1c1ac:	3a01      	subs	r2, #1
   1c1ae:	464b      	mov	r3, r9
   1c1b0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1c1b4:	e004      	b.n	1c1c0 <mbedtls_mpi_div_mpi+0x2bc>
   1c1b6:	f852 0d04 	ldr.w	r0, [r2, #-4]!
   1c1ba:	2800      	cmp	r0, #0
   1c1bc:	f040 81ae 	bne.w	1c51c <mbedtls_mpi_div_mpi+0x618>
   1c1c0:	3b01      	subs	r3, #1
   1c1c2:	d1f8      	bne.n	1c1b6 <mbedtls_mpi_div_mpi+0x2b2>
   1c1c4:	2620      	movs	r6, #32
   1c1c6:	6808      	ldr	r0, [r1, #0]
   1c1c8:	2200      	movs	r2, #0
   1c1ca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1c1ce:	e002      	b.n	1c1d6 <mbedtls_mpi_div_mpi+0x2d2>
   1c1d0:	3201      	adds	r2, #1
   1c1d2:	2a20      	cmp	r2, #32
   1c1d4:	d004      	beq.n	1c1e0 <mbedtls_mpi_div_mpi+0x2dc>
   1c1d6:	4201      	tst	r1, r0
   1c1d8:	ea4f 0151 	mov.w	r1, r1, lsr #1
   1c1dc:	d0f8      	beq.n	1c1d0 <mbedtls_mpi_div_mpi+0x2cc>
   1c1de:	1ab3      	subs	r3, r6, r2
   1c1e0:	f003 031f 	and.w	r3, r3, #31
   1c1e4:	2b1f      	cmp	r3, #31
   1c1e6:	f040 819f 	bne.w	1c528 <mbedtls_mpi_div_mpi+0x624>
   1c1ea:	2300      	movs	r3, #0
   1c1ec:	9302      	str	r3, [sp, #8]
   1c1ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1c1f0:	a813      	add	r0, sp, #76	; 0x4c
   1c1f2:	9304      	str	r3, [sp, #16]
   1c1f4:	3b01      	subs	r3, #1
   1c1f6:	eba3 0809 	sub.w	r8, r3, r9
   1c1fa:	9301      	str	r3, [sp, #4]
   1c1fc:	ea4f 1348 	mov.w	r3, r8, lsl #5
   1c200:	4619      	mov	r1, r3
   1c202:	9305      	str	r3, [sp, #20]
   1c204:	f7ff f8fe 	bl	1b404 <mbedtls_mpi_shift_l>
   1c208:	4606      	mov	r6, r0
   1c20a:	2800      	cmp	r0, #0
   1c20c:	f47f aed9 	bne.w	1bfc2 <mbedtls_mpi_div_mpi+0xbe>
   1c210:	ea4f 0888 	mov.w	r8, r8, lsl #2
   1c214:	e00d      	b.n	1c232 <mbedtls_mpi_div_mpi+0x32e>
   1c216:	9818      	ldr	r0, [sp, #96]	; 0x60
   1c218:	a910      	add	r1, sp, #64	; 0x40
   1c21a:	f850 3008 	ldr.w	r3, [r0, r8]
   1c21e:	aa13      	add	r2, sp, #76	; 0x4c
   1c220:	3301      	adds	r3, #1
   1c222:	f840 3008 	str.w	r3, [r0, r8]
   1c226:	4608      	mov	r0, r1
   1c228:	f7ff fca6 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1c22c:	2800      	cmp	r0, #0
   1c22e:	f040 8179 	bne.w	1c524 <mbedtls_mpi_div_mpi+0x620>
   1c232:	a913      	add	r1, sp, #76	; 0x4c
   1c234:	a810      	add	r0, sp, #64	; 0x40
   1c236:	f7ff fa0b 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1c23a:	2800      	cmp	r0, #0
   1c23c:	daeb      	bge.n	1c216 <mbedtls_mpi_div_mpi+0x312>
   1c23e:	9905      	ldr	r1, [sp, #20]
   1c240:	a813      	add	r0, sp, #76	; 0x4c
   1c242:	f7ff f995 	bl	1b570 <mbedtls_mpi_shift_r>
   1c246:	4606      	mov	r6, r0
   1c248:	2800      	cmp	r0, #0
   1c24a:	f47f aeba 	bne.w	1bfc2 <mbedtls_mpi_div_mpi+0xbe>
   1c24e:	f06f 0303 	mvn.w	r3, #3
   1c252:	9a03      	ldr	r2, [sp, #12]
   1c254:	e9cd b508 	strd	fp, r5, [sp, #32]
   1c258:	f102 4780 	add.w	r7, r2, #1073741824	; 0x40000000
   1c25c:	9a04      	ldr	r2, [sp, #16]
   1c25e:	fb03 f309 	mul.w	r3, r3, r9
   1c262:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1c266:	3a02      	subs	r2, #2
   1c268:	0092      	lsls	r2, r2, #2
   1c26a:	4615      	mov	r5, r2
   1c26c:	9305      	str	r3, [sp, #20]
   1c26e:	ea4f 0389 	mov.w	r3, r9, lsl #2
   1c272:	9303      	str	r3, [sp, #12]
   1c274:	ebc9 63c9 	rsb	r3, r9, r9, lsl #27
   1c278:	3f02      	subs	r7, #2
   1c27a:	e9cd 3006 	strd	r3, r0, [sp, #24]
   1c27e:	e9cd a40a 	strd	sl, r4, [sp, #40]	; 0x28
   1c282:	00b9      	lsls	r1, r7, #2
   1c284:	9104      	str	r1, [sp, #16]
   1c286:	9b01      	ldr	r3, [sp, #4]
   1c288:	454b      	cmp	r3, r9
   1c28a:	f240 8173 	bls.w	1c574 <mbedtls_mpi_div_mpi+0x670>
   1c28e:	9803      	ldr	r0, [sp, #12]
   1c290:	9912      	ldr	r1, [sp, #72]	; 0x48
   1c292:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1c294:	f105 0a04 	add.w	sl, r5, #4
   1c298:	5812      	ldr	r2, [r2, r0]
   1c29a:	f851 300a 	ldr.w	r3, [r1, sl]
   1c29e:	9805      	ldr	r0, [sp, #20]
   1c2a0:	4293      	cmp	r3, r2
   1c2a2:	eb00 0405 	add.w	r4, r0, r5
   1c2a6:	9e18      	ldr	r6, [sp, #96]	; 0x60
   1c2a8:	f0c0 814c 	bcc.w	1c544 <mbedtls_mpi_div_mpi+0x640>
   1c2ac:	f04f 33ff 	mov.w	r3, #4294967295
   1c2b0:	5133      	str	r3, [r6, r4]
   1c2b2:	2601      	movs	r6, #1
   1c2b4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1c2b6:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   1c2b8:	5913      	ldr	r3, [r2, r4]
   1c2ba:	f1a5 0b04 	sub.w	fp, r5, #4
   1c2be:	4433      	add	r3, r6
   1c2c0:	5113      	str	r3, [r2, r4]
   1c2c2:	e04b      	b.n	1c35c <mbedtls_mpi_div_mpi+0x458>
   1c2c4:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
   1c2c8:	0092      	lsls	r2, r2, #2
   1c2ca:	4640      	mov	r0, r8
   1c2cc:	2100      	movs	r1, #0
   1c2ce:	f00e fb09 	bl	2a8e4 <memset>
   1c2d2:	2200      	movs	r2, #0
   1c2d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1c2d6:	601a      	str	r2, [r3, #0]
   1c2d8:	9619      	str	r6, [sp, #100]	; 0x64
   1c2da:	f1b9 0f00 	cmp.w	r9, #0
   1c2de:	f000 80f9 	beq.w	1c4d4 <mbedtls_mpi_div_mpi+0x5d0>
   1c2e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1c2e4:	9a04      	ldr	r2, [sp, #16]
   1c2e6:	589b      	ldr	r3, [r3, r2]
   1c2e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1c2ea:	9903      	ldr	r1, [sp, #12]
   1c2ec:	6013      	str	r3, [r2, #0]
   1c2ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1c2f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1c2f2:	5852      	ldr	r2, [r2, r1]
   1c2f4:	a919      	add	r1, sp, #100	; 0x64
   1c2f6:	605a      	str	r2, [r3, #4]
   1c2f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1c2fa:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
   1c2fe:	591b      	ldr	r3, [r3, r4]
   1c300:	aa1f      	add	r2, sp, #124	; 0x7c
   1c302:	4608      	mov	r0, r1
   1c304:	930f      	str	r3, [sp, #60]	; 0x3c
   1c306:	e9cd 661f 	strd	r6, r6, [sp, #124]	; 0x7c
   1c30a:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
   1c30e:	f7ff fcf3 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1c312:	2800      	cmp	r0, #0
   1c314:	f040 8106 	bne.w	1c524 <mbedtls_mpi_div_mpi+0x620>
   1c318:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1c31a:	2a00      	cmp	r2, #0
   1c31c:	f000 80c2 	beq.w	1c4a4 <mbedtls_mpi_div_mpi+0x5a0>
   1c320:	0092      	lsls	r2, r2, #2
   1c322:	2100      	movs	r1, #0
   1c324:	4638      	mov	r0, r7
   1c326:	f00e fadd 	bl	2a8e4 <memset>
   1c32a:	2300      	movs	r3, #0
   1c32c:	603b      	str	r3, [r7, #0]
   1c32e:	9b01      	ldr	r3, [sp, #4]
   1c330:	961c      	str	r6, [sp, #112]	; 0x70
   1c332:	2b01      	cmp	r3, #1
   1c334:	a91c      	add	r1, sp, #112	; 0x70
   1c336:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c338:	f000 80ed 	beq.w	1c516 <mbedtls_mpi_div_mpi+0x612>
   1c33c:	f853 300b 	ldr.w	r3, [r3, fp]
   1c340:	a819      	add	r0, sp, #100	; 0x64
   1c342:	603b      	str	r3, [r7, #0]
   1c344:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c346:	595b      	ldr	r3, [r3, r5]
   1c348:	607b      	str	r3, [r7, #4]
   1c34a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c34c:	f853 300a 	ldr.w	r3, [r3, sl]
   1c350:	60bb      	str	r3, [r7, #8]
   1c352:	f7ff f97d 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1c356:	2800      	cmp	r0, #0
   1c358:	f340 811c 	ble.w	1c594 <mbedtls_mpi_div_mpi+0x690>
   1c35c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1c35e:	5913      	ldr	r3, [r2, r4]
   1c360:	3b01      	subs	r3, #1
   1c362:	5113      	str	r3, [r2, r4]
   1c364:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1c366:	2a00      	cmp	r2, #0
   1c368:	d1ac      	bne.n	1c2c4 <mbedtls_mpi_div_mpi+0x3c0>
   1c36a:	2104      	movs	r1, #4
   1c36c:	2001      	movs	r0, #1
   1c36e:	f7fc ff25 	bl	191bc <nrf_calloc>
   1c372:	4680      	mov	r8, r0
   1c374:	2800      	cmp	r0, #0
   1c376:	f000 8140 	beq.w	1c5fa <mbedtls_mpi_div_mpi+0x6f6>
   1c37a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1c37c:	b191      	cbz	r1, 1c3a4 <mbedtls_mpi_div_mpi+0x4a0>
   1c37e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1c380:	0092      	lsls	r2, r2, #2
   1c382:	f7f1 fc29 	bl	dbd8 <memcpy>
   1c386:	e9dd 101a 	ldrd	r1, r0, [sp, #104]	; 0x68
   1c38a:	4602      	mov	r2, r0
   1c38c:	1e4b      	subs	r3, r1, #1
   1c38e:	b139      	cbz	r1, 1c3a0 <mbedtls_mpi_div_mpi+0x49c>
   1c390:	2100      	movs	r1, #0
   1c392:	3b01      	subs	r3, #1
   1c394:	6011      	str	r1, [r2, #0]
   1c396:	1c59      	adds	r1, r3, #1
   1c398:	f102 0204 	add.w	r2, r2, #4
   1c39c:	d1f8      	bne.n	1c390 <mbedtls_mpi_div_mpi+0x48c>
   1c39e:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1c3a0:	f7fc ff20 	bl	191e4 <nrf_free>
   1c3a4:	2204      	movs	r2, #4
   1c3a6:	e9cd 681a 	strd	r6, r8, [sp, #104]	; 0x68
   1c3aa:	e78e      	b.n	1c2ca <mbedtls_mpi_div_mpi+0x3c6>
   1c3ac:	f858 2029 	ldr.w	r2, [r8, r9, lsl #2]
   1c3b0:	2a00      	cmp	r2, #0
   1c3b2:	f43f adf5 	beq.w	1bfa0 <mbedtls_mpi_div_mpi+0x9c>
   1c3b6:	b355      	cbz	r5, 1c40e <mbedtls_mpi_div_mpi+0x50a>
   1c3b8:	686e      	ldr	r6, [r5, #4]
   1c3ba:	b9ee      	cbnz	r6, 1c3f8 <mbedtls_mpi_div_mpi+0x4f4>
   1c3bc:	2104      	movs	r1, #4
   1c3be:	2001      	movs	r0, #1
   1c3c0:	f7fc fefc 	bl	191bc <nrf_calloc>
   1c3c4:	4607      	mov	r7, r0
   1c3c6:	b390      	cbz	r0, 1c42e <mbedtls_mpi_div_mpi+0x52a>
   1c3c8:	68a9      	ldr	r1, [r5, #8]
   1c3ca:	b181      	cbz	r1, 1c3ee <mbedtls_mpi_div_mpi+0x4ea>
   1c3cc:	686a      	ldr	r2, [r5, #4]
   1c3ce:	0092      	lsls	r2, r2, #2
   1c3d0:	f7f1 fc02 	bl	dbd8 <memcpy>
   1c3d4:	e9d5 2001 	ldrd	r2, r0, [r5, #4]
   1c3d8:	1e53      	subs	r3, r2, #1
   1c3da:	b132      	cbz	r2, 1c3ea <mbedtls_mpi_div_mpi+0x4e6>
   1c3dc:	3b01      	subs	r3, #1
   1c3de:	1c59      	adds	r1, r3, #1
   1c3e0:	6006      	str	r6, [r0, #0]
   1c3e2:	f100 0004 	add.w	r0, r0, #4
   1c3e6:	d1f9      	bne.n	1c3dc <mbedtls_mpi_div_mpi+0x4d8>
   1c3e8:	68a8      	ldr	r0, [r5, #8]
   1c3ea:	f7fc fefb 	bl	191e4 <nrf_free>
   1c3ee:	2301      	movs	r3, #1
   1c3f0:	2204      	movs	r2, #4
   1c3f2:	e9c5 3701 	strd	r3, r7, [r5, #4]
   1c3f6:	e001      	b.n	1c3fc <mbedtls_mpi_div_mpi+0x4f8>
   1c3f8:	68af      	ldr	r7, [r5, #8]
   1c3fa:	00b2      	lsls	r2, r6, #2
   1c3fc:	2100      	movs	r1, #0
   1c3fe:	4638      	mov	r0, r7
   1c400:	f00e fa70 	bl	2a8e4 <memset>
   1c404:	2100      	movs	r1, #0
   1c406:	2301      	movs	r3, #1
   1c408:	68aa      	ldr	r2, [r5, #8]
   1c40a:	6011      	str	r1, [r2, #0]
   1c40c:	602b      	str	r3, [r5, #0]
   1c40e:	f1ba 0f00 	cmp.w	sl, #0
   1c412:	d007      	beq.n	1c424 <mbedtls_mpi_div_mpi+0x520>
   1c414:	4621      	mov	r1, r4
   1c416:	4650      	mov	r0, sl
   1c418:	f7fe fcdc 	bl	1add4 <mbedtls_mpi_copy>
   1c41c:	4606      	mov	r6, r0
   1c41e:	2800      	cmp	r0, #0
   1c420:	f47f adce 	bne.w	1bfc0 <mbedtls_mpi_div_mpi+0xbc>
   1c424:	2600      	movs	r6, #0
   1c426:	4630      	mov	r0, r6
   1c428:	b023      	add	sp, #140	; 0x8c
   1c42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c42e:	2700      	movs	r7, #0
   1c430:	f06f 060f 	mvn.w	r6, #15
   1c434:	e5c5      	b.n	1bfc2 <mbedtls_mpi_div_mpi+0xbe>
   1c436:	2104      	movs	r1, #4
   1c438:	2001      	movs	r0, #1
   1c43a:	f7fc febf 	bl	191bc <nrf_calloc>
   1c43e:	4606      	mov	r6, r0
   1c440:	2800      	cmp	r0, #0
   1c442:	d0f4      	beq.n	1c42e <mbedtls_mpi_div_mpi+0x52a>
   1c444:	9918      	ldr	r1, [sp, #96]	; 0x60
   1c446:	b189      	cbz	r1, 1c46c <mbedtls_mpi_div_mpi+0x568>
   1c448:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1c44a:	0092      	lsls	r2, r2, #2
   1c44c:	f7f1 fbc4 	bl	dbd8 <memcpy>
   1c450:	e9dd 3017 	ldrd	r3, r0, [sp, #92]	; 0x5c
   1c454:	1e5a      	subs	r2, r3, #1
   1c456:	b13b      	cbz	r3, 1c468 <mbedtls_mpi_div_mpi+0x564>
   1c458:	4643      	mov	r3, r8
   1c45a:	3a01      	subs	r2, #1
   1c45c:	1c57      	adds	r7, r2, #1
   1c45e:	6003      	str	r3, [r0, #0]
   1c460:	f100 0004 	add.w	r0, r0, #4
   1c464:	d1f9      	bne.n	1c45a <mbedtls_mpi_div_mpi+0x556>
   1c466:	9818      	ldr	r0, [sp, #96]	; 0x60
   1c468:	f7fc febc 	bl	191e4 <nrf_free>
   1c46c:	2301      	movs	r3, #1
   1c46e:	2204      	movs	r2, #4
   1c470:	e9cd 3617 	strd	r3, r6, [sp, #92]	; 0x5c
   1c474:	e671      	b.n	1c15a <mbedtls_mpi_div_mpi+0x256>
   1c476:	231f      	movs	r3, #31
   1c478:	4619      	mov	r1, r3
   1c47a:	9302      	str	r3, [sp, #8]
   1c47c:	a810      	add	r0, sp, #64	; 0x40
   1c47e:	f7fe ffc1 	bl	1b404 <mbedtls_mpi_shift_l>
   1c482:	4606      	mov	r6, r0
   1c484:	2800      	cmp	r0, #0
   1c486:	f47f ad9c 	bne.w	1bfc2 <mbedtls_mpi_div_mpi+0xbe>
   1c48a:	9902      	ldr	r1, [sp, #8]
   1c48c:	a813      	add	r0, sp, #76	; 0x4c
   1c48e:	f7fe ffb9 	bl	1b404 <mbedtls_mpi_shift_l>
   1c492:	4606      	mov	r6, r0
   1c494:	2800      	cmp	r0, #0
   1c496:	f47f ad94 	bne.w	1bfc2 <mbedtls_mpi_div_mpi+0xbe>
   1c49a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1c49c:	9303      	str	r3, [sp, #12]
   1c49e:	f103 39ff 	add.w	r9, r3, #4294967295
   1c4a2:	e6a4      	b.n	1c1ee <mbedtls_mpi_div_mpi+0x2ea>
   1c4a4:	2104      	movs	r1, #4
   1c4a6:	2001      	movs	r0, #1
   1c4a8:	920d      	str	r2, [sp, #52]	; 0x34
   1c4aa:	f7fc fe87 	bl	191bc <nrf_calloc>
   1c4ae:	4603      	mov	r3, r0
   1c4b0:	2800      	cmp	r0, #0
   1c4b2:	f000 80a2 	beq.w	1c5fa <mbedtls_mpi_div_mpi+0x6f6>
   1c4b6:	b147      	cbz	r7, 1c4ca <mbedtls_mpi_div_mpi+0x5c6>
   1c4b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1c4ba:	4639      	mov	r1, r7
   1c4bc:	900c      	str	r0, [sp, #48]	; 0x30
   1c4be:	f7f1 fb8b 	bl	dbd8 <memcpy>
   1c4c2:	4638      	mov	r0, r7
   1c4c4:	f7fc fe8e 	bl	191e4 <nrf_free>
   1c4c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c4ca:	461f      	mov	r7, r3
   1c4cc:	2204      	movs	r2, #4
   1c4ce:	e9cd 631d 	strd	r6, r3, [sp, #116]	; 0x74
   1c4d2:	e726      	b.n	1c322 <mbedtls_mpi_div_mpi+0x41e>
   1c4d4:	464b      	mov	r3, r9
   1c4d6:	e707      	b.n	1c2e8 <mbedtls_mpi_div_mpi+0x3e4>
   1c4d8:	2104      	movs	r1, #4
   1c4da:	2002      	movs	r0, #2
   1c4dc:	f7fc fe6e 	bl	191bc <nrf_calloc>
   1c4e0:	4606      	mov	r6, r0
   1c4e2:	2800      	cmp	r0, #0
   1c4e4:	d0a3      	beq.n	1c42e <mbedtls_mpi_div_mpi+0x52a>
   1c4e6:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1c4e8:	b189      	cbz	r1, 1c50e <mbedtls_mpi_div_mpi+0x60a>
   1c4ea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1c4ec:	0092      	lsls	r2, r2, #2
   1c4ee:	f7f1 fb73 	bl	dbd8 <memcpy>
   1c4f2:	e9dd 131a 	ldrd	r1, r3, [sp, #104]	; 0x68
   1c4f6:	4618      	mov	r0, r3
   1c4f8:	1e4a      	subs	r2, r1, #1
   1c4fa:	b131      	cbz	r1, 1c50a <mbedtls_mpi_div_mpi+0x606>
   1c4fc:	3a01      	subs	r2, #1
   1c4fe:	1c50      	adds	r0, r2, #1
   1c500:	601f      	str	r7, [r3, #0]
   1c502:	f103 0304 	add.w	r3, r3, #4
   1c506:	d1f9      	bne.n	1c4fc <mbedtls_mpi_div_mpi+0x5f8>
   1c508:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1c50a:	f7fc fe6b 	bl	191e4 <nrf_free>
   1c50e:	2302      	movs	r3, #2
   1c510:	e9cd 361a 	strd	r3, r6, [sp, #104]	; 0x68
   1c514:	e62e      	b.n	1c174 <mbedtls_mpi_div_mpi+0x270>
   1c516:	595b      	ldr	r3, [r3, r5]
   1c518:	a819      	add	r0, sp, #100	; 0x64
   1c51a:	e715      	b.n	1c348 <mbedtls_mpi_div_mpi+0x444>
   1c51c:	015b      	lsls	r3, r3, #5
   1c51e:	f103 0620 	add.w	r6, r3, #32
   1c522:	e651      	b.n	1c1c8 <mbedtls_mpi_div_mpi+0x2c4>
   1c524:	4606      	mov	r6, r0
   1c526:	e54c      	b.n	1bfc2 <mbedtls_mpi_div_mpi+0xbe>
   1c528:	f1c3 031f 	rsb	r3, r3, #31
   1c52c:	9302      	str	r3, [sp, #8]
   1c52e:	4619      	mov	r1, r3
   1c530:	e7a4      	b.n	1c47c <mbedtls_mpi_div_mpi+0x578>
   1c532:	ea4f 1349 	mov.w	r3, r9, lsl #5
   1c536:	f103 0620 	add.w	r6, r3, #32
   1c53a:	e645      	b.n	1c1c8 <mbedtls_mpi_div_mpi+0x2c4>
   1c53c:	6808      	ldr	r0, [r1, #0]
   1c53e:	2620      	movs	r6, #32
   1c540:	464b      	mov	r3, r9
   1c542:	e641      	b.n	1c1c8 <mbedtls_mpi_div_mpi+0x2c4>
   1c544:	594f      	ldr	r7, [r1, r5]
   1c546:	b192      	cbz	r2, 1c56e <mbedtls_mpi_div_mpi+0x66a>
   1c548:	469c      	mov	ip, r3
   1c54a:	f04f 0b00 	mov.w	fp, #0
   1c54e:	4661      	mov	r1, ip
   1c550:	465b      	mov	r3, fp
   1c552:	ea4b 0007 	orr.w	r0, fp, r7
   1c556:	f7f0 fac5 	bl	cae4 <__aeabi_uldivmod>
   1c55a:	2300      	movs	r3, #0
   1c55c:	f04f 32ff 	mov.w	r2, #4294967295
   1c560:	428b      	cmp	r3, r1
   1c562:	bf08      	it	eq
   1c564:	4282      	cmpeq	r2, r0
   1c566:	d200      	bcs.n	1c56a <mbedtls_mpi_div_mpi+0x666>
   1c568:	4610      	mov	r0, r2
   1c56a:	5130      	str	r0, [r6, r4]
   1c56c:	e6a1      	b.n	1c2b2 <mbedtls_mpi_div_mpi+0x3ae>
   1c56e:	f04f 30ff 	mov.w	r0, #4294967295
   1c572:	e7fa      	b.n	1c56a <mbedtls_mpi_div_mpi+0x666>
   1c574:	e9dd 6b07 	ldrd	r6, fp, [sp, #28]
   1c578:	e9dd 5a09 	ldrd	r5, sl, [sp, #36]	; 0x24
   1c57c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1c57e:	2d00      	cmp	r5, #0
   1c580:	d05f      	beq.n	1c642 <mbedtls_mpi_div_mpi+0x73e>
   1c582:	a916      	add	r1, sp, #88	; 0x58
   1c584:	4628      	mov	r0, r5
   1c586:	f7fe fc25 	bl	1add4 <mbedtls_mpi_copy>
   1c58a:	2800      	cmp	r0, #0
   1c58c:	d053      	beq.n	1c636 <mbedtls_mpi_div_mpi+0x732>
   1c58e:	4606      	mov	r6, r0
   1c590:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   1c592:	e516      	b.n	1bfc2 <mbedtls_mpi_div_mpi+0xbe>
   1c594:	2501      	movs	r5, #1
   1c596:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1c598:	aa1f      	add	r2, sp, #124	; 0x7c
   1c59a:	591b      	ldr	r3, [r3, r4]
   1c59c:	a913      	add	r1, sp, #76	; 0x4c
   1c59e:	a819      	add	r0, sp, #100	; 0x64
   1c5a0:	930f      	str	r3, [sp, #60]	; 0x3c
   1c5a2:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
   1c5a6:	e9cd 551f 	strd	r5, r5, [sp, #124]	; 0x7c
   1c5aa:	f7ff fba5 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1c5ae:	2800      	cmp	r0, #0
   1c5b0:	d1b8      	bne.n	1c524 <mbedtls_mpi_div_mpi+0x620>
   1c5b2:	9b06      	ldr	r3, [sp, #24]
   1c5b4:	9a01      	ldr	r2, [sp, #4]
   1c5b6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
   1c5ba:	3b01      	subs	r3, #1
   1c5bc:	4413      	add	r3, r2
   1c5be:	015e      	lsls	r6, r3, #5
   1c5c0:	4631      	mov	r1, r6
   1c5c2:	a819      	add	r0, sp, #100	; 0x64
   1c5c4:	f7fe ff1e 	bl	1b404 <mbedtls_mpi_shift_l>
   1c5c8:	2800      	cmp	r0, #0
   1c5ca:	d1ab      	bne.n	1c524 <mbedtls_mpi_div_mpi+0x620>
   1c5cc:	a910      	add	r1, sp, #64	; 0x40
   1c5ce:	aa19      	add	r2, sp, #100	; 0x64
   1c5d0:	4608      	mov	r0, r1
   1c5d2:	f7ff fad1 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1c5d6:	4603      	mov	r3, r0
   1c5d8:	bb58      	cbnz	r0, 1c632 <mbedtls_mpi_div_mpi+0x72e>
   1c5da:	a91f      	add	r1, sp, #124	; 0x7c
   1c5dc:	a810      	add	r0, sp, #64	; 0x40
   1c5de:	930f      	str	r3, [sp, #60]	; 0x3c
   1c5e0:	e9cd 551f 	strd	r5, r5, [sp, #124]	; 0x7c
   1c5e4:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
   1c5e8:	f7fe fb2e 	bl	1ac48 <mbedtls_mpi_cmp_mpi.constprop.6>
   1c5ec:	2800      	cmp	r0, #0
   1c5ee:	db07      	blt.n	1c600 <mbedtls_mpi_div_mpi+0x6fc>
   1c5f0:	9b01      	ldr	r3, [sp, #4]
   1c5f2:	465d      	mov	r5, fp
   1c5f4:	3b01      	subs	r3, #1
   1c5f6:	9301      	str	r3, [sp, #4]
   1c5f8:	e645      	b.n	1c286 <mbedtls_mpi_div_mpi+0x382>
   1c5fa:	f06f 060f 	mvn.w	r6, #15
   1c5fe:	e4e0      	b.n	1bfc2 <mbedtls_mpi_div_mpi+0xbe>
   1c600:	a913      	add	r1, sp, #76	; 0x4c
   1c602:	a819      	add	r0, sp, #100	; 0x64
   1c604:	f7fe fbe6 	bl	1add4 <mbedtls_mpi_copy>
   1c608:	2800      	cmp	r0, #0
   1c60a:	d18b      	bne.n	1c524 <mbedtls_mpi_div_mpi+0x620>
   1c60c:	4631      	mov	r1, r6
   1c60e:	a819      	add	r0, sp, #100	; 0x64
   1c610:	f7fe fef8 	bl	1b404 <mbedtls_mpi_shift_l>
   1c614:	2800      	cmp	r0, #0
   1c616:	d185      	bne.n	1c524 <mbedtls_mpi_div_mpi+0x620>
   1c618:	a910      	add	r1, sp, #64	; 0x40
   1c61a:	aa19      	add	r2, sp, #100	; 0x64
   1c61c:	4608      	mov	r0, r1
   1c61e:	f7ff fa37 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1c622:	2800      	cmp	r0, #0
   1c624:	f47f af7e 	bne.w	1c524 <mbedtls_mpi_div_mpi+0x620>
   1c628:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1c62a:	5913      	ldr	r3, [r2, r4]
   1c62c:	3b01      	subs	r3, #1
   1c62e:	5113      	str	r3, [r2, r4]
   1c630:	e7de      	b.n	1c5f0 <mbedtls_mpi_div_mpi+0x6ec>
   1c632:	4606      	mov	r6, r0
   1c634:	e4c5      	b.n	1bfc2 <mbedtls_mpi_div_mpi+0xbe>
   1c636:	f8db 3000 	ldr.w	r3, [fp]
   1c63a:	6822      	ldr	r2, [r4, #0]
   1c63c:	fb03 f302 	mul.w	r3, r3, r2
   1c640:	602b      	str	r3, [r5, #0]
   1c642:	f1ba 0f00 	cmp.w	sl, #0
   1c646:	d005      	beq.n	1c654 <mbedtls_mpi_div_mpi+0x750>
   1c648:	9902      	ldr	r1, [sp, #8]
   1c64a:	a810      	add	r0, sp, #64	; 0x40
   1c64c:	f7fe ff90 	bl	1b570 <mbedtls_mpi_shift_r>
   1c650:	4606      	mov	r6, r0
   1c652:	b108      	cbz	r0, 1c658 <mbedtls_mpi_div_mpi+0x754>
   1c654:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   1c656:	e4b4      	b.n	1bfc2 <mbedtls_mpi_div_mpi+0xbe>
   1c658:	6823      	ldr	r3, [r4, #0]
   1c65a:	a910      	add	r1, sp, #64	; 0x40
   1c65c:	4650      	mov	r0, sl
   1c65e:	9310      	str	r3, [sp, #64]	; 0x40
   1c660:	f7fe fbb8 	bl	1add4 <mbedtls_mpi_copy>
   1c664:	4606      	mov	r6, r0
   1c666:	2800      	cmp	r0, #0
   1c668:	d1f4      	bne.n	1c654 <mbedtls_mpi_div_mpi+0x750>
   1c66a:	2401      	movs	r4, #1
   1c66c:	ab0f      	add	r3, sp, #60	; 0x3c
   1c66e:	a91f      	add	r1, sp, #124	; 0x7c
   1c670:	4650      	mov	r0, sl
   1c672:	960f      	str	r6, [sp, #60]	; 0x3c
   1c674:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
   1c678:	9321      	str	r3, [sp, #132]	; 0x84
   1c67a:	f7fe fae5 	bl	1ac48 <mbedtls_mpi_cmp_mpi.constprop.6>
   1c67e:	2800      	cmp	r0, #0
   1c680:	d1e8      	bne.n	1c654 <mbedtls_mpi_div_mpi+0x750>
   1c682:	f8ca 4000 	str.w	r4, [sl]
   1c686:	e7e5      	b.n	1c654 <mbedtls_mpi_div_mpi+0x750>

0001c688 <mbedtls_mpi_mod_mpi>:
   1c688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c68c:	6853      	ldr	r3, [r2, #4]
   1c68e:	4617      	mov	r7, r2
   1c690:	b183      	cbz	r3, 1c6b4 <mbedtls_mpi_mod_mpi+0x2c>
   1c692:	6894      	ldr	r4, [r2, #8]
   1c694:	f103 4580 	add.w	r5, r3, #1073741824	; 0x40000000
   1c698:	3d01      	subs	r5, #1
   1c69a:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   1c69e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
   1c6a2:	b12a      	cbz	r2, 1c6b0 <mbedtls_mpi_mod_mpi+0x28>
   1c6a4:	e11a      	b.n	1c8dc <mbedtls_mpi_mod_mpi+0x254>
   1c6a6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   1c6aa:	2d00      	cmp	r5, #0
   1c6ac:	f040 8116 	bne.w	1c8dc <mbedtls_mpi_mod_mpi+0x254>
   1c6b0:	3b01      	subs	r3, #1
   1c6b2:	d1f8      	bne.n	1c6a6 <mbedtls_mpi_mod_mpi+0x1e>
   1c6b4:	460a      	mov	r2, r1
   1c6b6:	4606      	mov	r6, r0
   1c6b8:	4601      	mov	r1, r0
   1c6ba:	463b      	mov	r3, r7
   1c6bc:	2000      	movs	r0, #0
   1c6be:	f7ff fc21 	bl	1bf04 <mbedtls_mpi_div_mpi>
   1c6c2:	2800      	cmp	r0, #0
   1c6c4:	d151      	bne.n	1c76a <mbedtls_mpi_mod_mpi+0xe2>
   1c6c6:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
   1c6ca:	6871      	ldr	r1, [r6, #4]
   1c6cc:	b191      	cbz	r1, 1c6f4 <mbedtls_mpi_mod_mpi+0x6c>
   1c6ce:	68b0      	ldr	r0, [r6, #8]
   1c6d0:	eb01 0308 	add.w	r3, r1, r8
   1c6d4:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
   1c6d8:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   1c6dc:	f1bc 0f00 	cmp.w	ip, #0
   1c6e0:	d156      	bne.n	1c790 <mbedtls_mpi_mod_mpi+0x108>
   1c6e2:	4614      	mov	r4, r2
   1c6e4:	460b      	mov	r3, r1
   1c6e6:	e003      	b.n	1c6f0 <mbedtls_mpi_mod_mpi+0x68>
   1c6e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   1c6ec:	2d00      	cmp	r5, #0
   1c6ee:	d14f      	bne.n	1c790 <mbedtls_mpi_mod_mpi+0x108>
   1c6f0:	3b01      	subs	r3, #1
   1c6f2:	d1f9      	bne.n	1c6e8 <mbedtls_mpi_mod_mpi+0x60>
   1c6f4:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
   1c6f8:	4639      	mov	r1, r7
   1c6fa:	4630      	mov	r0, r6
   1c6fc:	f7fe ffa8 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1c700:	2800      	cmp	r0, #0
   1c702:	db42      	blt.n	1c78a <mbedtls_mpi_mod_mpi+0x102>
   1c704:	6835      	ldr	r5, [r6, #0]
   1c706:	683b      	ldr	r3, [r7, #0]
   1c708:	fb03 f305 	mul.w	r3, r3, r5
   1c70c:	2b00      	cmp	r3, #0
   1c70e:	dd2e      	ble.n	1c76e <mbedtls_mpi_mod_mpi+0xe6>
   1c710:	6873      	ldr	r3, [r6, #4]
   1c712:	687a      	ldr	r2, [r7, #4]
   1c714:	b183      	cbz	r3, 1c738 <mbedtls_mpi_mod_mpi+0xb0>
   1c716:	68b1      	ldr	r1, [r6, #8]
   1c718:	1918      	adds	r0, r3, r4
   1c71a:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
   1c71e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   1c722:	f1bc 0f00 	cmp.w	ip, #0
   1c726:	d005      	beq.n	1c734 <mbedtls_mpi_mod_mpi+0xac>
   1c728:	e090      	b.n	1c84c <mbedtls_mpi_mod_mpi+0x1c4>
   1c72a:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   1c72e:	2800      	cmp	r0, #0
   1c730:	f040 808c 	bne.w	1c84c <mbedtls_mpi_mod_mpi+0x1c4>
   1c734:	3b01      	subs	r3, #1
   1c736:	d1f8      	bne.n	1c72a <mbedtls_mpi_mod_mpi+0xa2>
   1c738:	b18a      	cbz	r2, 1c75e <mbedtls_mpi_mod_mpi+0xd6>
   1c73a:	f8d7 c008 	ldr.w	ip, [r7, #8]
   1c73e:	1911      	adds	r1, r2, r4
   1c740:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
   1c744:	2800      	cmp	r0, #0
   1c746:	f040 80be 	bne.w	1c8c6 <mbedtls_mpi_mod_mpi+0x23e>
   1c74a:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
   1c74e:	e004      	b.n	1c75a <mbedtls_mpi_mod_mpi+0xd2>
   1c750:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   1c754:	2800      	cmp	r0, #0
   1c756:	f040 8083 	bne.w	1c860 <mbedtls_mpi_mod_mpi+0x1d8>
   1c75a:	3a01      	subs	r2, #1
   1c75c:	d1f8      	bne.n	1c750 <mbedtls_mpi_mod_mpi+0xc8>
   1c75e:	463a      	mov	r2, r7
   1c760:	4631      	mov	r1, r6
   1c762:	4630      	mov	r0, r6
   1c764:	f7ff f8d4 	bl	1b910 <mbedtls_mpi_sub_abs>
   1c768:	b140      	cbz	r0, 1c77c <mbedtls_mpi_mod_mpi+0xf4>
   1c76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c76e:	463a      	mov	r2, r7
   1c770:	4631      	mov	r1, r6
   1c772:	4630      	mov	r0, r6
   1c774:	f7ff f828 	bl	1b7c8 <mbedtls_mpi_add_abs>
   1c778:	2800      	cmp	r0, #0
   1c77a:	d1f6      	bne.n	1c76a <mbedtls_mpi_mod_mpi+0xe2>
   1c77c:	6035      	str	r5, [r6, #0]
   1c77e:	4639      	mov	r1, r7
   1c780:	4630      	mov	r0, r6
   1c782:	f7fe ff65 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1c786:	2800      	cmp	r0, #0
   1c788:	dabc      	bge.n	1c704 <mbedtls_mpi_mod_mpi+0x7c>
   1c78a:	2000      	movs	r0, #0
   1c78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c790:	6834      	ldr	r4, [r6, #0]
   1c792:	2c00      	cmp	r4, #0
   1c794:	daae      	bge.n	1c6f4 <mbedtls_mpi_mod_mpi+0x6c>
   1c796:	683b      	ldr	r3, [r7, #0]
   1c798:	fb03 f304 	mul.w	r3, r3, r4
   1c79c:	2b00      	cmp	r3, #0
   1c79e:	da23      	bge.n	1c7e8 <mbedtls_mpi_mod_mpi+0x160>
   1c7a0:	f1bc 0f00 	cmp.w	ip, #0
   1c7a4:	d129      	bne.n	1c7fa <mbedtls_mpi_mod_mpi+0x172>
   1c7a6:	4613      	mov	r3, r2
   1c7a8:	e002      	b.n	1c7b0 <mbedtls_mpi_mod_mpi+0x128>
   1c7aa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1c7ae:	bb22      	cbnz	r2, 1c7fa <mbedtls_mpi_mod_mpi+0x172>
   1c7b0:	3901      	subs	r1, #1
   1c7b2:	d1fa      	bne.n	1c7aa <mbedtls_mpi_mod_mpi+0x122>
   1c7b4:	687b      	ldr	r3, [r7, #4]
   1c7b6:	b173      	cbz	r3, 1c7d6 <mbedtls_mpi_mod_mpi+0x14e>
   1c7b8:	f8d7 c008 	ldr.w	ip, [r7, #8]
   1c7bc:	eb03 0208 	add.w	r2, r3, r8
   1c7c0:	f85c 5022 	ldr.w	r5, [ip, r2, lsl #2]
   1c7c4:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
   1c7c8:	b11d      	cbz	r5, 1c7d2 <mbedtls_mpi_mod_mpi+0x14a>
   1c7ca:	e071      	b.n	1c8b0 <mbedtls_mpi_mod_mpi+0x228>
   1c7cc:	f852 5d04 	ldr.w	r5, [r2, #-4]!
   1c7d0:	bb05      	cbnz	r5, 1c814 <mbedtls_mpi_mod_mpi+0x18c>
   1c7d2:	3b01      	subs	r3, #1
   1c7d4:	d1fa      	bne.n	1c7cc <mbedtls_mpi_mod_mpi+0x144>
   1c7d6:	463a      	mov	r2, r7
   1c7d8:	4631      	mov	r1, r6
   1c7da:	4630      	mov	r0, r6
   1c7dc:	f7ff f898 	bl	1b910 <mbedtls_mpi_sub_abs>
   1c7e0:	2800      	cmp	r0, #0
   1c7e2:	d1c2      	bne.n	1c76a <mbedtls_mpi_mod_mpi+0xe2>
   1c7e4:	6034      	str	r4, [r6, #0]
   1c7e6:	e770      	b.n	1c6ca <mbedtls_mpi_mod_mpi+0x42>
   1c7e8:	463a      	mov	r2, r7
   1c7ea:	4631      	mov	r1, r6
   1c7ec:	4630      	mov	r0, r6
   1c7ee:	f7fe ffeb 	bl	1b7c8 <mbedtls_mpi_add_abs>
   1c7f2:	2800      	cmp	r0, #0
   1c7f4:	d0f6      	beq.n	1c7e4 <mbedtls_mpi_mod_mpi+0x15c>
   1c7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c7fa:	687b      	ldr	r3, [r7, #4]
   1c7fc:	2b00      	cmp	r3, #0
   1c7fe:	d0ea      	beq.n	1c7d6 <mbedtls_mpi_mod_mpi+0x14e>
   1c800:	f8d7 c008 	ldr.w	ip, [r7, #8]
   1c804:	eb03 0208 	add.w	r2, r3, r8
   1c808:	f85c 5022 	ldr.w	r5, [ip, r2, lsl #2]
   1c80c:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
   1c810:	2d00      	cmp	r5, #0
   1c812:	d0de      	beq.n	1c7d2 <mbedtls_mpi_mod_mpi+0x14a>
   1c814:	4299      	cmp	r1, r3
   1c816:	d8de      	bhi.n	1c7d6 <mbedtls_mpi_mod_mpi+0x14e>
   1c818:	d34a      	bcc.n	1c8b0 <mbedtls_mpi_mod_mpi+0x228>
   1c81a:	2900      	cmp	r1, #0
   1c81c:	d0db      	beq.n	1c7d6 <mbedtls_mpi_mod_mpi+0x14e>
   1c81e:	eb01 0308 	add.w	r3, r1, r8
   1c822:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
   1c826:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
   1c82a:	009b      	lsls	r3, r3, #2
   1c82c:	4295      	cmp	r5, r2
   1c82e:	4418      	add	r0, r3
   1c830:	4463      	add	r3, ip
   1c832:	d3d0      	bcc.n	1c7d6 <mbedtls_mpi_mod_mpi+0x14e>
   1c834:	d907      	bls.n	1c846 <mbedtls_mpi_mod_mpi+0x1be>
   1c836:	e03b      	b.n	1c8b0 <mbedtls_mpi_mod_mpi+0x228>
   1c838:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   1c83c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1c840:	4295      	cmp	r5, r2
   1c842:	d8c8      	bhi.n	1c7d6 <mbedtls_mpi_mod_mpi+0x14e>
   1c844:	d334      	bcc.n	1c8b0 <mbedtls_mpi_mod_mpi+0x228>
   1c846:	3901      	subs	r1, #1
   1c848:	d1f6      	bne.n	1c838 <mbedtls_mpi_mod_mpi+0x1b0>
   1c84a:	e7c4      	b.n	1c7d6 <mbedtls_mpi_mod_mpi+0x14e>
   1c84c:	2a00      	cmp	r2, #0
   1c84e:	d086      	beq.n	1c75e <mbedtls_mpi_mod_mpi+0xd6>
   1c850:	f8d7 c008 	ldr.w	ip, [r7, #8]
   1c854:	1911      	adds	r1, r2, r4
   1c856:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
   1c85a:	2800      	cmp	r0, #0
   1c85c:	f43f af75 	beq.w	1c74a <mbedtls_mpi_mod_mpi+0xc2>
   1c860:	4293      	cmp	r3, r2
   1c862:	f63f af7c 	bhi.w	1c75e <mbedtls_mpi_mod_mpi+0xd6>
   1c866:	d32e      	bcc.n	1c8c6 <mbedtls_mpi_mod_mpi+0x23e>
   1c868:	2b00      	cmp	r3, #0
   1c86a:	f43f af78 	beq.w	1c75e <mbedtls_mpi_mod_mpi+0xd6>
   1c86e:	68b1      	ldr	r1, [r6, #8]
   1c870:	191a      	adds	r2, r3, r4
   1c872:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
   1c876:	f85c e022 	ldr.w	lr, [ip, r2, lsl #2]
   1c87a:	0092      	lsls	r2, r2, #2
   1c87c:	4586      	cmp	lr, r0
   1c87e:	4411      	add	r1, r2
   1c880:	4462      	add	r2, ip
   1c882:	f4ff af6c 	bcc.w	1c75e <mbedtls_mpi_mod_mpi+0xd6>
   1c886:	d908      	bls.n	1c89a <mbedtls_mpi_mod_mpi+0x212>
   1c888:	e01d      	b.n	1c8c6 <mbedtls_mpi_mod_mpi+0x23e>
   1c88a:	f851 cd04 	ldr.w	ip, [r1, #-4]!
   1c88e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
   1c892:	4584      	cmp	ip, r0
   1c894:	f63f af63 	bhi.w	1c75e <mbedtls_mpi_mod_mpi+0xd6>
   1c898:	d315      	bcc.n	1c8c6 <mbedtls_mpi_mod_mpi+0x23e>
   1c89a:	3b01      	subs	r3, #1
   1c89c:	d1f5      	bne.n	1c88a <mbedtls_mpi_mod_mpi+0x202>
   1c89e:	463a      	mov	r2, r7
   1c8a0:	4631      	mov	r1, r6
   1c8a2:	4630      	mov	r0, r6
   1c8a4:	f7ff f834 	bl	1b910 <mbedtls_mpi_sub_abs>
   1c8a8:	2800      	cmp	r0, #0
   1c8aa:	f47f af5e 	bne.w	1c76a <mbedtls_mpi_mod_mpi+0xe2>
   1c8ae:	e765      	b.n	1c77c <mbedtls_mpi_mod_mpi+0xf4>
   1c8b0:	4632      	mov	r2, r6
   1c8b2:	4639      	mov	r1, r7
   1c8b4:	4630      	mov	r0, r6
   1c8b6:	f7ff f82b 	bl	1b910 <mbedtls_mpi_sub_abs>
   1c8ba:	2800      	cmp	r0, #0
   1c8bc:	f47f af55 	bne.w	1c76a <mbedtls_mpi_mod_mpi+0xe2>
   1c8c0:	4264      	negs	r4, r4
   1c8c2:	6034      	str	r4, [r6, #0]
   1c8c4:	e701      	b.n	1c6ca <mbedtls_mpi_mod_mpi+0x42>
   1c8c6:	4632      	mov	r2, r6
   1c8c8:	4639      	mov	r1, r7
   1c8ca:	4630      	mov	r0, r6
   1c8cc:	f7ff f820 	bl	1b910 <mbedtls_mpi_sub_abs>
   1c8d0:	2800      	cmp	r0, #0
   1c8d2:	f47f af4a 	bne.w	1c76a <mbedtls_mpi_mod_mpi+0xe2>
   1c8d6:	426d      	negs	r5, r5
   1c8d8:	6035      	str	r5, [r6, #0]
   1c8da:	e70d      	b.n	1c6f8 <mbedtls_mpi_mod_mpi+0x70>
   1c8dc:	683b      	ldr	r3, [r7, #0]
   1c8de:	2b00      	cmp	r3, #0
   1c8e0:	f6bf aee8 	bge.w	1c6b4 <mbedtls_mpi_mod_mpi+0x2c>
   1c8e4:	f06f 0009 	mvn.w	r0, #9
   1c8e8:	e73f      	b.n	1c76a <mbedtls_mpi_mod_mpi+0xe2>
   1c8ea:	bf00      	nop

0001c8ec <mbedtls_mpi_gcd>:
   1c8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c8f0:	460f      	mov	r7, r1
   1c8f2:	2501      	movs	r5, #1
   1c8f4:	2100      	movs	r1, #0
   1c8f6:	68bb      	ldr	r3, [r7, #8]
   1c8f8:	b086      	sub	sp, #24
   1c8fa:	4604      	mov	r4, r0
   1c8fc:	4616      	mov	r6, r2
   1c8fe:	9500      	str	r5, [sp, #0]
   1c900:	9503      	str	r5, [sp, #12]
   1c902:	e9cd 1101 	strd	r1, r1, [sp, #4]
   1c906:	e9cd 1104 	strd	r1, r1, [sp, #16]
   1c90a:	2b00      	cmp	r3, #0
   1c90c:	d040      	beq.n	1c990 <mbedtls_mpi_gcd+0xa4>
   1c90e:	6879      	ldr	r1, [r7, #4]
   1c910:	1e4a      	subs	r2, r1, #1
   1c912:	d011      	beq.n	1c938 <mbedtls_mpi_gcd+0x4c>
   1c914:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1c918:	2800      	cmp	r0, #0
   1c91a:	f040 80c4 	bne.w	1caa6 <mbedtls_mpi_gcd+0x1ba>
   1c91e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1c922:	3901      	subs	r1, #1
   1c924:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1c928:	e004      	b.n	1c934 <mbedtls_mpi_gcd+0x48>
   1c92a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   1c92e:	2900      	cmp	r1, #0
   1c930:	f040 80b9 	bne.w	1caa6 <mbedtls_mpi_gcd+0x1ba>
   1c934:	3a01      	subs	r2, #1
   1c936:	d1f8      	bne.n	1c92a <mbedtls_mpi_gcd+0x3e>
   1c938:	2501      	movs	r5, #1
   1c93a:	683b      	ldr	r3, [r7, #0]
   1c93c:	9300      	str	r3, [sp, #0]
   1c93e:	2104      	movs	r1, #4
   1c940:	4628      	mov	r0, r5
   1c942:	f7fc fc3b 	bl	191bc <nrf_calloc>
   1c946:	4680      	mov	r8, r0
   1c948:	2800      	cmp	r0, #0
   1c94a:	f000 813c 	beq.w	1cbc6 <mbedtls_mpi_gcd+0x2da>
   1c94e:	9902      	ldr	r1, [sp, #8]
   1c950:	b189      	cbz	r1, 1c976 <mbedtls_mpi_gcd+0x8a>
   1c952:	9a01      	ldr	r2, [sp, #4]
   1c954:	0092      	lsls	r2, r2, #2
   1c956:	f7f1 f93f 	bl	dbd8 <memcpy>
   1c95a:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
   1c95e:	1e53      	subs	r3, r2, #1
   1c960:	b13a      	cbz	r2, 1c972 <mbedtls_mpi_gcd+0x86>
   1c962:	2200      	movs	r2, #0
   1c964:	3b01      	subs	r3, #1
   1c966:	1c59      	adds	r1, r3, #1
   1c968:	6002      	str	r2, [r0, #0]
   1c96a:	f100 0004 	add.w	r0, r0, #4
   1c96e:	d1f9      	bne.n	1c964 <mbedtls_mpi_gcd+0x78>
   1c970:	9802      	ldr	r0, [sp, #8]
   1c972:	f7fc fc37 	bl	191e4 <nrf_free>
   1c976:	e9cd 5801 	strd	r5, r8, [sp, #4]
   1c97a:	00ad      	lsls	r5, r5, #2
   1c97c:	462a      	mov	r2, r5
   1c97e:	2100      	movs	r1, #0
   1c980:	4640      	mov	r0, r8
   1c982:	f00d ffaf 	bl	2a8e4 <memset>
   1c986:	462a      	mov	r2, r5
   1c988:	68b9      	ldr	r1, [r7, #8]
   1c98a:	9802      	ldr	r0, [sp, #8]
   1c98c:	f7f1 f924 	bl	dbd8 <memcpy>
   1c990:	4631      	mov	r1, r6
   1c992:	a803      	add	r0, sp, #12
   1c994:	f7fe fa1e 	bl	1add4 <mbedtls_mpi_copy>
   1c998:	4607      	mov	r7, r0
   1c99a:	2800      	cmp	r0, #0
   1c99c:	d15d      	bne.n	1ca5a <mbedtls_mpi_gcd+0x16e>
   1c99e:	9e01      	ldr	r6, [sp, #4]
   1c9a0:	2e00      	cmp	r6, #0
   1c9a2:	f000 810e 	beq.w	1cbc2 <mbedtls_mpi_gcd+0x2d6>
   1c9a6:	4601      	mov	r1, r0
   1c9a8:	9d02      	ldr	r5, [sp, #8]
   1c9aa:	3d04      	subs	r5, #4
   1c9ac:	2200      	movs	r2, #0
   1c9ae:	f855 0f04 	ldr.w	r0, [r5, #4]!
   1c9b2:	e004      	b.n	1c9be <mbedtls_mpi_gcd+0xd2>
   1c9b4:	2a20      	cmp	r2, #32
   1c9b6:	f101 0101 	add.w	r1, r1, #1
   1c9ba:	f000 8081 	beq.w	1cac0 <mbedtls_mpi_gcd+0x1d4>
   1c9be:	fa20 f302 	lsr.w	r3, r0, r2
   1c9c2:	f013 0301 	ands.w	r3, r3, #1
   1c9c6:	f102 0201 	add.w	r2, r2, #1
   1c9ca:	d0f3      	beq.n	1c9b4 <mbedtls_mpi_gcd+0xc8>
   1c9cc:	9d04      	ldr	r5, [sp, #16]
   1c9ce:	b1b5      	cbz	r5, 1c9fe <mbedtls_mpi_gcd+0x112>
   1c9d0:	2000      	movs	r0, #0
   1c9d2:	4684      	mov	ip, r0
   1c9d4:	9f05      	ldr	r7, [sp, #20]
   1c9d6:	3f04      	subs	r7, #4
   1c9d8:	2200      	movs	r2, #0
   1c9da:	f857 6f04 	ldr.w	r6, [r7, #4]!
   1c9de:	e003      	b.n	1c9e8 <mbedtls_mpi_gcd+0xfc>
   1c9e0:	2a20      	cmp	r2, #32
   1c9e2:	f100 0001 	add.w	r0, r0, #1
   1c9e6:	d071      	beq.n	1cacc <mbedtls_mpi_gcd+0x1e0>
   1c9e8:	fa26 f302 	lsr.w	r3, r6, r2
   1c9ec:	f013 0301 	ands.w	r3, r3, #1
   1c9f0:	f102 0201 	add.w	r2, r2, #1
   1c9f4:	d0f4      	beq.n	1c9e0 <mbedtls_mpi_gcd+0xf4>
   1c9f6:	4281      	cmp	r1, r0
   1c9f8:	bf28      	it	cs
   1c9fa:	4601      	movcs	r1, r0
   1c9fc:	460d      	mov	r5, r1
   1c9fe:	4668      	mov	r0, sp
   1ca00:	4629      	mov	r1, r5
   1ca02:	f7fe fdb5 	bl	1b570 <mbedtls_mpi_shift_r>
   1ca06:	4607      	mov	r7, r0
   1ca08:	bb38      	cbnz	r0, 1ca5a <mbedtls_mpi_gcd+0x16e>
   1ca0a:	4629      	mov	r1, r5
   1ca0c:	a803      	add	r0, sp, #12
   1ca0e:	f7fe fdaf 	bl	1b570 <mbedtls_mpi_shift_r>
   1ca12:	4607      	mov	r7, r0
   1ca14:	bb08      	cbnz	r0, 1ca5a <mbedtls_mpi_gcd+0x16e>
   1ca16:	2301      	movs	r3, #1
   1ca18:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
   1ca1c:	9303      	str	r3, [sp, #12]
   1ca1e:	9300      	str	r3, [sp, #0]
   1ca20:	9f01      	ldr	r7, [sp, #4]
   1ca22:	b17f      	cbz	r7, 1ca44 <mbedtls_mpi_gcd+0x158>
   1ca24:	9802      	ldr	r0, [sp, #8]
   1ca26:	19ba      	adds	r2, r7, r6
   1ca28:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   1ca2c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1ca30:	2b00      	cmp	r3, #0
   1ca32:	d151      	bne.n	1cad8 <mbedtls_mpi_gcd+0x1ec>
   1ca34:	463b      	mov	r3, r7
   1ca36:	e003      	b.n	1ca40 <mbedtls_mpi_gcd+0x154>
   1ca38:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   1ca3c:	2900      	cmp	r1, #0
   1ca3e:	d14b      	bne.n	1cad8 <mbedtls_mpi_gcd+0x1ec>
   1ca40:	3b01      	subs	r3, #1
   1ca42:	d1f9      	bne.n	1ca38 <mbedtls_mpi_gcd+0x14c>
   1ca44:	4629      	mov	r1, r5
   1ca46:	a803      	add	r0, sp, #12
   1ca48:	f7fe fcdc 	bl	1b404 <mbedtls_mpi_shift_l>
   1ca4c:	4607      	mov	r7, r0
   1ca4e:	b920      	cbnz	r0, 1ca5a <mbedtls_mpi_gcd+0x16e>
   1ca50:	a903      	add	r1, sp, #12
   1ca52:	4620      	mov	r0, r4
   1ca54:	f7fe f9be 	bl	1add4 <mbedtls_mpi_copy>
   1ca58:	4607      	mov	r7, r0
   1ca5a:	9802      	ldr	r0, [sp, #8]
   1ca5c:	b160      	cbz	r0, 1ca78 <mbedtls_mpi_gcd+0x18c>
   1ca5e:	9a01      	ldr	r2, [sp, #4]
   1ca60:	1e53      	subs	r3, r2, #1
   1ca62:	b13a      	cbz	r2, 1ca74 <mbedtls_mpi_gcd+0x188>
   1ca64:	2200      	movs	r2, #0
   1ca66:	3b01      	subs	r3, #1
   1ca68:	1c5c      	adds	r4, r3, #1
   1ca6a:	6002      	str	r2, [r0, #0]
   1ca6c:	f100 0004 	add.w	r0, r0, #4
   1ca70:	d1f9      	bne.n	1ca66 <mbedtls_mpi_gcd+0x17a>
   1ca72:	9802      	ldr	r0, [sp, #8]
   1ca74:	f7fc fbb6 	bl	191e4 <nrf_free>
   1ca78:	2200      	movs	r2, #0
   1ca7a:	2301      	movs	r3, #1
   1ca7c:	9805      	ldr	r0, [sp, #20]
   1ca7e:	e9cd 3200 	strd	r3, r2, [sp]
   1ca82:	9202      	str	r2, [sp, #8]
   1ca84:	b158      	cbz	r0, 1ca9e <mbedtls_mpi_gcd+0x1b2>
   1ca86:	9904      	ldr	r1, [sp, #16]
   1ca88:	1e4b      	subs	r3, r1, #1
   1ca8a:	b131      	cbz	r1, 1ca9a <mbedtls_mpi_gcd+0x1ae>
   1ca8c:	3b01      	subs	r3, #1
   1ca8e:	1c59      	adds	r1, r3, #1
   1ca90:	6002      	str	r2, [r0, #0]
   1ca92:	f100 0004 	add.w	r0, r0, #4
   1ca96:	d1f9      	bne.n	1ca8c <mbedtls_mpi_gcd+0x1a0>
   1ca98:	9805      	ldr	r0, [sp, #20]
   1ca9a:	f7fc fba3 	bl	191e4 <nrf_free>
   1ca9e:	4638      	mov	r0, r7
   1caa0:	b006      	add	sp, #24
   1caa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1caa6:	f242 7310 	movw	r3, #10000	; 0x2710
   1caaa:	6839      	ldr	r1, [r7, #0]
   1caac:	1c55      	adds	r5, r2, #1
   1caae:	429d      	cmp	r5, r3
   1cab0:	9100      	str	r1, [sp, #0]
   1cab2:	f200 8083 	bhi.w	1cbbc <mbedtls_mpi_gcd+0x2d0>
   1cab6:	2d00      	cmp	r5, #0
   1cab8:	f47f af41 	bne.w	1c93e <mbedtls_mpi_gcd+0x52>
   1cabc:	46a8      	mov	r8, r5
   1cabe:	e75d      	b.n	1c97c <mbedtls_mpi_gcd+0x90>
   1cac0:	3701      	adds	r7, #1
   1cac2:	42be      	cmp	r6, r7
   1cac4:	f47f af72 	bne.w	1c9ac <mbedtls_mpi_gcd+0xc0>
   1cac8:	4619      	mov	r1, r3
   1caca:	e77f      	b.n	1c9cc <mbedtls_mpi_gcd+0xe0>
   1cacc:	f10c 0c01 	add.w	ip, ip, #1
   1cad0:	45ac      	cmp	ip, r5
   1cad2:	d181      	bne.n	1c9d8 <mbedtls_mpi_gcd+0xec>
   1cad4:	461d      	mov	r5, r3
   1cad6:	e792      	b.n	1c9fe <mbedtls_mpi_gcd+0x112>
   1cad8:	9b00      	ldr	r3, [sp, #0]
   1cada:	2b00      	cmp	r3, #0
   1cadc:	d0b2      	beq.n	1ca44 <mbedtls_mpi_gcd+0x158>
   1cade:	2100      	movs	r1, #0
   1cae0:	468e      	mov	lr, r1
   1cae2:	f1a0 0c04 	sub.w	ip, r0, #4
   1cae6:	2200      	movs	r2, #0
   1cae8:	f85c 0f04 	ldr.w	r0, [ip, #4]!
   1caec:	e003      	b.n	1caf6 <mbedtls_mpi_gcd+0x20a>
   1caee:	2a20      	cmp	r2, #32
   1caf0:	f101 0101 	add.w	r1, r1, #1
   1caf4:	d042      	beq.n	1cb7c <mbedtls_mpi_gcd+0x290>
   1caf6:	fa20 f302 	lsr.w	r3, r0, r2
   1cafa:	f013 0301 	ands.w	r3, r3, #1
   1cafe:	f102 0201 	add.w	r2, r2, #1
   1cb02:	d0f4      	beq.n	1caee <mbedtls_mpi_gcd+0x202>
   1cb04:	4668      	mov	r0, sp
   1cb06:	f7fe fd33 	bl	1b570 <mbedtls_mpi_shift_r>
   1cb0a:	4607      	mov	r7, r0
   1cb0c:	2800      	cmp	r0, #0
   1cb0e:	d1a4      	bne.n	1ca5a <mbedtls_mpi_gcd+0x16e>
   1cb10:	f8dd c010 	ldr.w	ip, [sp, #16]
   1cb14:	f1bc 0f00 	cmp.w	ip, #0
   1cb18:	d04e      	beq.n	1cbb8 <mbedtls_mpi_gcd+0x2cc>
   1cb1a:	4601      	mov	r1, r0
   1cb1c:	4686      	mov	lr, r0
   1cb1e:	9f05      	ldr	r7, [sp, #20]
   1cb20:	3f04      	subs	r7, #4
   1cb22:	2200      	movs	r2, #0
   1cb24:	f857 0f04 	ldr.w	r0, [r7, #4]!
   1cb28:	e003      	b.n	1cb32 <mbedtls_mpi_gcd+0x246>
   1cb2a:	2a20      	cmp	r2, #32
   1cb2c:	f101 0101 	add.w	r1, r1, #1
   1cb30:	d02a      	beq.n	1cb88 <mbedtls_mpi_gcd+0x29c>
   1cb32:	fa20 f302 	lsr.w	r3, r0, r2
   1cb36:	f013 0301 	ands.w	r3, r3, #1
   1cb3a:	f102 0201 	add.w	r2, r2, #1
   1cb3e:	d0f4      	beq.n	1cb2a <mbedtls_mpi_gcd+0x23e>
   1cb40:	a803      	add	r0, sp, #12
   1cb42:	f7fe fd15 	bl	1b570 <mbedtls_mpi_shift_r>
   1cb46:	4607      	mov	r7, r0
   1cb48:	2800      	cmp	r0, #0
   1cb4a:	d186      	bne.n	1ca5a <mbedtls_mpi_gcd+0x16e>
   1cb4c:	a903      	add	r1, sp, #12
   1cb4e:	4668      	mov	r0, sp
   1cb50:	f7fe fd7e 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1cb54:	2800      	cmp	r0, #0
   1cb56:	db1d      	blt.n	1cb94 <mbedtls_mpi_gcd+0x2a8>
   1cb58:	aa03      	add	r2, sp, #12
   1cb5a:	4669      	mov	r1, sp
   1cb5c:	4668      	mov	r0, sp
   1cb5e:	f7fe fed7 	bl	1b910 <mbedtls_mpi_sub_abs>
   1cb62:	4607      	mov	r7, r0
   1cb64:	2800      	cmp	r0, #0
   1cb66:	f47f af78 	bne.w	1ca5a <mbedtls_mpi_gcd+0x16e>
   1cb6a:	2101      	movs	r1, #1
   1cb6c:	4668      	mov	r0, sp
   1cb6e:	f7fe fcff 	bl	1b570 <mbedtls_mpi_shift_r>
   1cb72:	4607      	mov	r7, r0
   1cb74:	2800      	cmp	r0, #0
   1cb76:	f43f af53 	beq.w	1ca20 <mbedtls_mpi_gcd+0x134>
   1cb7a:	e76e      	b.n	1ca5a <mbedtls_mpi_gcd+0x16e>
   1cb7c:	f10e 0e01 	add.w	lr, lr, #1
   1cb80:	45be      	cmp	lr, r7
   1cb82:	d1b0      	bne.n	1cae6 <mbedtls_mpi_gcd+0x1fa>
   1cb84:	4619      	mov	r1, r3
   1cb86:	e7bd      	b.n	1cb04 <mbedtls_mpi_gcd+0x218>
   1cb88:	f10e 0e01 	add.w	lr, lr, #1
   1cb8c:	45e6      	cmp	lr, ip
   1cb8e:	d1c8      	bne.n	1cb22 <mbedtls_mpi_gcd+0x236>
   1cb90:	4619      	mov	r1, r3
   1cb92:	e7d5      	b.n	1cb40 <mbedtls_mpi_gcd+0x254>
   1cb94:	a903      	add	r1, sp, #12
   1cb96:	466a      	mov	r2, sp
   1cb98:	4608      	mov	r0, r1
   1cb9a:	f7fe feb9 	bl	1b910 <mbedtls_mpi_sub_abs>
   1cb9e:	4607      	mov	r7, r0
   1cba0:	2800      	cmp	r0, #0
   1cba2:	f47f af5a 	bne.w	1ca5a <mbedtls_mpi_gcd+0x16e>
   1cba6:	2101      	movs	r1, #1
   1cba8:	a803      	add	r0, sp, #12
   1cbaa:	f7fe fce1 	bl	1b570 <mbedtls_mpi_shift_r>
   1cbae:	4607      	mov	r7, r0
   1cbb0:	2800      	cmp	r0, #0
   1cbb2:	f43f af35 	beq.w	1ca20 <mbedtls_mpi_gcd+0x134>
   1cbb6:	e750      	b.n	1ca5a <mbedtls_mpi_gcd+0x16e>
   1cbb8:	4661      	mov	r1, ip
   1cbba:	e7c1      	b.n	1cb40 <mbedtls_mpi_gcd+0x254>
   1cbbc:	f06f 070f 	mvn.w	r7, #15
   1cbc0:	e75a      	b.n	1ca78 <mbedtls_mpi_gcd+0x18c>
   1cbc2:	4631      	mov	r1, r6
   1cbc4:	e702      	b.n	1c9cc <mbedtls_mpi_gcd+0xe0>
   1cbc6:	9802      	ldr	r0, [sp, #8]
   1cbc8:	f06f 070f 	mvn.w	r7, #15
   1cbcc:	e746      	b.n	1ca5c <mbedtls_mpi_gcd+0x170>
   1cbce:	bf00      	nop

0001cbd0 <mbedtls_mpi_fill_random>:
   1cbd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cbd4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   1cbd8:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
   1cbdc:	f200 80a5 	bhi.w	1cd2a <mbedtls_mpi_fill_random+0x15a>
   1cbe0:	460d      	mov	r5, r1
   1cbe2:	4617      	mov	r7, r2
   1cbe4:	4606      	mov	r6, r0
   1cbe6:	4669      	mov	r1, sp
   1cbe8:	4618      	mov	r0, r3
   1cbea:	462a      	mov	r2, r5
   1cbec:	47b8      	blx	r7
   1cbee:	4607      	mov	r7, r0
   1cbf0:	b120      	cbz	r0, 1cbfc <mbedtls_mpi_fill_random+0x2c>
   1cbf2:	4638      	mov	r0, r7
   1cbf4:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
   1cbf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cbfc:	2d00      	cmp	r5, #0
   1cbfe:	f000 808a 	beq.w	1cd16 <mbedtls_mpi_fill_random+0x146>
   1cc02:	f89d 3000 	ldrb.w	r3, [sp]
   1cc06:	2b00      	cmp	r3, #0
   1cc08:	f040 8089 	bne.w	1cd1e <mbedtls_mpi_fill_random+0x14e>
   1cc0c:	466b      	mov	r3, sp
   1cc0e:	4604      	mov	r4, r0
   1cc10:	e003      	b.n	1cc1a <mbedtls_mpi_fill_random+0x4a>
   1cc12:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1cc16:	2a00      	cmp	r2, #0
   1cc18:	d14d      	bne.n	1ccb6 <mbedtls_mpi_fill_random+0xe6>
   1cc1a:	3401      	adds	r4, #1
   1cc1c:	42a5      	cmp	r5, r4
   1cc1e:	d1f8      	bne.n	1cc12 <mbedtls_mpi_fill_random+0x42>
   1cc20:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1cc24:	f1b8 0f00 	cmp.w	r8, #0
   1cc28:	d170      	bne.n	1cd0c <mbedtls_mpi_fill_random+0x13c>
   1cc2a:	2104      	movs	r1, #4
   1cc2c:	2001      	movs	r0, #1
   1cc2e:	f7fc fac5 	bl	191bc <nrf_calloc>
   1cc32:	4681      	mov	r9, r0
   1cc34:	2800      	cmp	r0, #0
   1cc36:	d075      	beq.n	1cd24 <mbedtls_mpi_fill_random+0x154>
   1cc38:	68b1      	ldr	r1, [r6, #8]
   1cc3a:	b189      	cbz	r1, 1cc60 <mbedtls_mpi_fill_random+0x90>
   1cc3c:	6872      	ldr	r2, [r6, #4]
   1cc3e:	0092      	lsls	r2, r2, #2
   1cc40:	f7f0 ffca 	bl	dbd8 <memcpy>
   1cc44:	e9d6 2001 	ldrd	r2, r0, [r6, #4]
   1cc48:	1e53      	subs	r3, r2, #1
   1cc4a:	b13a      	cbz	r2, 1cc5c <mbedtls_mpi_fill_random+0x8c>
   1cc4c:	4642      	mov	r2, r8
   1cc4e:	3b01      	subs	r3, #1
   1cc50:	1c59      	adds	r1, r3, #1
   1cc52:	6002      	str	r2, [r0, #0]
   1cc54:	f100 0004 	add.w	r0, r0, #4
   1cc58:	d1f9      	bne.n	1cc4e <mbedtls_mpi_fill_random+0x7e>
   1cc5a:	68b0      	ldr	r0, [r6, #8]
   1cc5c:	f7fc fac2 	bl	191e4 <nrf_free>
   1cc60:	2301      	movs	r3, #1
   1cc62:	2204      	movs	r2, #4
   1cc64:	e9c6 3901 	strd	r3, r9, [r6, #4]
   1cc68:	2100      	movs	r1, #0
   1cc6a:	4648      	mov	r0, r9
   1cc6c:	f00d fe3a 	bl	2a8e4 <memset>
   1cc70:	2300      	movs	r3, #0
   1cc72:	2201      	movs	r2, #1
   1cc74:	68b1      	ldr	r1, [r6, #8]
   1cc76:	42a5      	cmp	r5, r4
   1cc78:	600b      	str	r3, [r1, #0]
   1cc7a:	6032      	str	r2, [r6, #0]
   1cc7c:	d9b9      	bls.n	1cbf2 <mbedtls_mpi_fill_random+0x22>
   1cc7e:	eb0d 0205 	add.w	r2, sp, r5
   1cc82:	1b2c      	subs	r4, r5, r4
   1cc84:	68b1      	ldr	r1, [r6, #8]
   1cc86:	f023 0803 	bic.w	r8, r3, #3
   1cc8a:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
   1cc8e:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
   1cc92:	f851 0008 	ldr.w	r0, [r1, r8]
   1cc96:	f00e 0e18 	and.w	lr, lr, #24
   1cc9a:	fa0c fc0e 	lsl.w	ip, ip, lr
   1cc9e:	3301      	adds	r3, #1
   1cca0:	ea40 000c 	orr.w	r0, r0, ip
   1cca4:	42a3      	cmp	r3, r4
   1cca6:	f841 0008 	str.w	r0, [r1, r8]
   1ccaa:	d1eb      	bne.n	1cc84 <mbedtls_mpi_fill_random+0xb4>
   1ccac:	4638      	mov	r0, r7
   1ccae:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
   1ccb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ccb6:	1b2a      	subs	r2, r5, r4
   1ccb8:	f012 0803 	ands.w	r8, r2, #3
   1ccbc:	bf18      	it	ne
   1ccbe:	f04f 0801 	movne.w	r8, #1
   1ccc2:	f242 7310 	movw	r3, #10000	; 0x2710
   1ccc6:	eb08 0892 	add.w	r8, r8, r2, lsr #2
   1ccca:	4598      	cmp	r8, r3
   1cccc:	d82a      	bhi.n	1cd24 <mbedtls_mpi_fill_random+0x154>
   1ccce:	6873      	ldr	r3, [r6, #4]
   1ccd0:	4598      	cmp	r8, r3
   1ccd2:	d92d      	bls.n	1cd30 <mbedtls_mpi_fill_random+0x160>
   1ccd4:	2104      	movs	r1, #4
   1ccd6:	4640      	mov	r0, r8
   1ccd8:	f7fc fa70 	bl	191bc <nrf_calloc>
   1ccdc:	4681      	mov	r9, r0
   1ccde:	b308      	cbz	r0, 1cd24 <mbedtls_mpi_fill_random+0x154>
   1cce0:	68b1      	ldr	r1, [r6, #8]
   1cce2:	b189      	cbz	r1, 1cd08 <mbedtls_mpi_fill_random+0x138>
   1cce4:	6872      	ldr	r2, [r6, #4]
   1cce6:	0092      	lsls	r2, r2, #2
   1cce8:	f7f0 ff76 	bl	dbd8 <memcpy>
   1ccec:	e9d6 2001 	ldrd	r2, r0, [r6, #4]
   1ccf0:	1e53      	subs	r3, r2, #1
   1ccf2:	b13a      	cbz	r2, 1cd04 <mbedtls_mpi_fill_random+0x134>
   1ccf4:	2200      	movs	r2, #0
   1ccf6:	3b01      	subs	r3, #1
   1ccf8:	1c59      	adds	r1, r3, #1
   1ccfa:	6002      	str	r2, [r0, #0]
   1ccfc:	f100 0004 	add.w	r0, r0, #4
   1cd00:	d1f9      	bne.n	1ccf6 <mbedtls_mpi_fill_random+0x126>
   1cd02:	68b0      	ldr	r0, [r6, #8]
   1cd04:	f7fc fa6e 	bl	191e4 <nrf_free>
   1cd08:	e9c6 8901 	strd	r8, r9, [r6, #4]
   1cd0c:	ea4f 0288 	mov.w	r2, r8, lsl #2
   1cd10:	f8d6 9008 	ldr.w	r9, [r6, #8]
   1cd14:	e7a8      	b.n	1cc68 <mbedtls_mpi_fill_random+0x98>
   1cd16:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1cd1a:	462c      	mov	r4, r5
   1cd1c:	e782      	b.n	1cc24 <mbedtls_mpi_fill_random+0x54>
   1cd1e:	462a      	mov	r2, r5
   1cd20:	4604      	mov	r4, r0
   1cd22:	e7c9      	b.n	1ccb8 <mbedtls_mpi_fill_random+0xe8>
   1cd24:	f06f 070f 	mvn.w	r7, #15
   1cd28:	e763      	b.n	1cbf2 <mbedtls_mpi_fill_random+0x22>
   1cd2a:	f06f 0703 	mvn.w	r7, #3
   1cd2e:	e760      	b.n	1cbf2 <mbedtls_mpi_fill_random+0x22>
   1cd30:	4698      	mov	r8, r3
   1cd32:	e777      	b.n	1cc24 <mbedtls_mpi_fill_random+0x54>

0001cd34 <mbedtls_mpi_inv_mod>:
   1cd34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cd38:	6853      	ldr	r3, [r2, #4]
   1cd3a:	b0a1      	sub	sp, #132	; 0x84
   1cd3c:	b17b      	cbz	r3, 1cd5e <mbedtls_mpi_inv_mod+0x2a>
   1cd3e:	6894      	ldr	r4, [r2, #8]
   1cd40:	f103 4c80 	add.w	ip, r3, #1073741824	; 0x40000000
   1cd44:	f10c 3cff 	add.w	ip, ip, #4294967295
   1cd48:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
   1cd4c:	eb04 048c 	add.w	r4, r4, ip, lsl #2
   1cd50:	b11d      	cbz	r5, 1cd5a <mbedtls_mpi_inv_mod+0x26>
   1cd52:	e00a      	b.n	1cd6a <mbedtls_mpi_inv_mod+0x36>
   1cd54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   1cd58:	b93d      	cbnz	r5, 1cd6a <mbedtls_mpi_inv_mod+0x36>
   1cd5a:	3b01      	subs	r3, #1
   1cd5c:	d1fa      	bne.n	1cd54 <mbedtls_mpi_inv_mod+0x20>
   1cd5e:	f06f 0403 	mvn.w	r4, #3
   1cd62:	4620      	mov	r0, r4
   1cd64:	b021      	add	sp, #132	; 0x84
   1cd66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cd6a:	6813      	ldr	r3, [r2, #0]
   1cd6c:	2b00      	cmp	r3, #0
   1cd6e:	ddf6      	ble.n	1cd5e <mbedtls_mpi_inv_mod+0x2a>
   1cd70:	2401      	movs	r4, #1
   1cd72:	2300      	movs	r3, #0
   1cd74:	4606      	mov	r6, r0
   1cd76:	a802      	add	r0, sp, #8
   1cd78:	9405      	str	r4, [sp, #20]
   1cd7a:	9408      	str	r4, [sp, #32]
   1cd7c:	940b      	str	r4, [sp, #44]	; 0x2c
   1cd7e:	940e      	str	r4, [sp, #56]	; 0x38
   1cd80:	9402      	str	r4, [sp, #8]
   1cd82:	9411      	str	r4, [sp, #68]	; 0x44
   1cd84:	9414      	str	r4, [sp, #80]	; 0x50
   1cd86:	9417      	str	r4, [sp, #92]	; 0x5c
   1cd88:	941a      	str	r4, [sp, #104]	; 0x68
   1cd8a:	460f      	mov	r7, r1
   1cd8c:	4615      	mov	r5, r2
   1cd8e:	e9cd 3306 	strd	r3, r3, [sp, #24]
   1cd92:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   1cd96:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   1cd9a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   1cd9e:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1cda2:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
   1cda6:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   1cdaa:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
   1cdae:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
   1cdb2:	f7ff fd9b 	bl	1c8ec <mbedtls_mpi_gcd>
   1cdb6:	4604      	mov	r4, r0
   1cdb8:	b9a0      	cbnz	r0, 1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1cdba:	9b03      	ldr	r3, [sp, #12]
   1cdbc:	b183      	cbz	r3, 1cde0 <mbedtls_mpi_inv_mod+0xac>
   1cdbe:	9904      	ldr	r1, [sp, #16]
   1cdc0:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   1cdc4:	3c01      	subs	r4, #1
   1cdc6:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   1cdca:	eb01 0484 	add.w	r4, r1, r4, lsl #2
   1cdce:	b12a      	cbz	r2, 1cddc <mbedtls_mpi_inv_mod+0xa8>
   1cdd0:	e0b5      	b.n	1cf3e <mbedtls_mpi_inv_mod+0x20a>
   1cdd2:	f854 2d04 	ldr.w	r2, [r4, #-4]!
   1cdd6:	2a00      	cmp	r2, #0
   1cdd8:	f040 80b1 	bne.w	1cf3e <mbedtls_mpi_inv_mod+0x20a>
   1cddc:	3b01      	subs	r3, #1
   1cdde:	d1f8      	bne.n	1cdd2 <mbedtls_mpi_inv_mod+0x9e>
   1cde0:	f06f 040d 	mvn.w	r4, #13
   1cde4:	9807      	ldr	r0, [sp, #28]
   1cde6:	b160      	cbz	r0, 1ce02 <mbedtls_mpi_inv_mod+0xce>
   1cde8:	9a06      	ldr	r2, [sp, #24]
   1cdea:	1e53      	subs	r3, r2, #1
   1cdec:	b13a      	cbz	r2, 1cdfe <mbedtls_mpi_inv_mod+0xca>
   1cdee:	2200      	movs	r2, #0
   1cdf0:	3b01      	subs	r3, #1
   1cdf2:	1c59      	adds	r1, r3, #1
   1cdf4:	6002      	str	r2, [r0, #0]
   1cdf6:	f100 0004 	add.w	r0, r0, #4
   1cdfa:	d1f9      	bne.n	1cdf0 <mbedtls_mpi_inv_mod+0xbc>
   1cdfc:	9807      	ldr	r0, [sp, #28]
   1cdfe:	f7fc f9f1 	bl	191e4 <nrf_free>
   1ce02:	2200      	movs	r2, #0
   1ce04:	2301      	movs	r3, #1
   1ce06:	980a      	ldr	r0, [sp, #40]	; 0x28
   1ce08:	e9cd 3205 	strd	r3, r2, [sp, #20]
   1ce0c:	9207      	str	r2, [sp, #28]
   1ce0e:	b158      	cbz	r0, 1ce28 <mbedtls_mpi_inv_mod+0xf4>
   1ce10:	9909      	ldr	r1, [sp, #36]	; 0x24
   1ce12:	1e4b      	subs	r3, r1, #1
   1ce14:	b131      	cbz	r1, 1ce24 <mbedtls_mpi_inv_mod+0xf0>
   1ce16:	3b01      	subs	r3, #1
   1ce18:	1c5f      	adds	r7, r3, #1
   1ce1a:	6002      	str	r2, [r0, #0]
   1ce1c:	f100 0004 	add.w	r0, r0, #4
   1ce20:	d1f9      	bne.n	1ce16 <mbedtls_mpi_inv_mod+0xe2>
   1ce22:	980a      	ldr	r0, [sp, #40]	; 0x28
   1ce24:	f7fc f9de 	bl	191e4 <nrf_free>
   1ce28:	2200      	movs	r2, #0
   1ce2a:	2301      	movs	r3, #1
   1ce2c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1ce2e:	e9cd 3208 	strd	r3, r2, [sp, #32]
   1ce32:	920a      	str	r2, [sp, #40]	; 0x28
   1ce34:	b158      	cbz	r0, 1ce4e <mbedtls_mpi_inv_mod+0x11a>
   1ce36:	990c      	ldr	r1, [sp, #48]	; 0x30
   1ce38:	1e4b      	subs	r3, r1, #1
   1ce3a:	b131      	cbz	r1, 1ce4a <mbedtls_mpi_inv_mod+0x116>
   1ce3c:	3b01      	subs	r3, #1
   1ce3e:	1c5e      	adds	r6, r3, #1
   1ce40:	6002      	str	r2, [r0, #0]
   1ce42:	f100 0004 	add.w	r0, r0, #4
   1ce46:	d1f9      	bne.n	1ce3c <mbedtls_mpi_inv_mod+0x108>
   1ce48:	980d      	ldr	r0, [sp, #52]	; 0x34
   1ce4a:	f7fc f9cb 	bl	191e4 <nrf_free>
   1ce4e:	2200      	movs	r2, #0
   1ce50:	2301      	movs	r3, #1
   1ce52:	9810      	ldr	r0, [sp, #64]	; 0x40
   1ce54:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
   1ce58:	920d      	str	r2, [sp, #52]	; 0x34
   1ce5a:	b158      	cbz	r0, 1ce74 <mbedtls_mpi_inv_mod+0x140>
   1ce5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1ce5e:	1e4b      	subs	r3, r1, #1
   1ce60:	b131      	cbz	r1, 1ce70 <mbedtls_mpi_inv_mod+0x13c>
   1ce62:	3b01      	subs	r3, #1
   1ce64:	1c5d      	adds	r5, r3, #1
   1ce66:	6002      	str	r2, [r0, #0]
   1ce68:	f100 0004 	add.w	r0, r0, #4
   1ce6c:	d1f9      	bne.n	1ce62 <mbedtls_mpi_inv_mod+0x12e>
   1ce6e:	9810      	ldr	r0, [sp, #64]	; 0x40
   1ce70:	f7fc f9b8 	bl	191e4 <nrf_free>
   1ce74:	2200      	movs	r2, #0
   1ce76:	2301      	movs	r3, #1
   1ce78:	9804      	ldr	r0, [sp, #16]
   1ce7a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   1ce7e:	9210      	str	r2, [sp, #64]	; 0x40
   1ce80:	b158      	cbz	r0, 1ce9a <mbedtls_mpi_inv_mod+0x166>
   1ce82:	9903      	ldr	r1, [sp, #12]
   1ce84:	1e4b      	subs	r3, r1, #1
   1ce86:	b131      	cbz	r1, 1ce96 <mbedtls_mpi_inv_mod+0x162>
   1ce88:	3b01      	subs	r3, #1
   1ce8a:	1c59      	adds	r1, r3, #1
   1ce8c:	6002      	str	r2, [r0, #0]
   1ce8e:	f100 0004 	add.w	r0, r0, #4
   1ce92:	d1f9      	bne.n	1ce88 <mbedtls_mpi_inv_mod+0x154>
   1ce94:	9804      	ldr	r0, [sp, #16]
   1ce96:	f7fc f9a5 	bl	191e4 <nrf_free>
   1ce9a:	2200      	movs	r2, #0
   1ce9c:	2301      	movs	r3, #1
   1ce9e:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1cea0:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1cea4:	9204      	str	r2, [sp, #16]
   1cea6:	b158      	cbz	r0, 1cec0 <mbedtls_mpi_inv_mod+0x18c>
   1cea8:	9912      	ldr	r1, [sp, #72]	; 0x48
   1ceaa:	1e4b      	subs	r3, r1, #1
   1ceac:	b131      	cbz	r1, 1cebc <mbedtls_mpi_inv_mod+0x188>
   1ceae:	3b01      	subs	r3, #1
   1ceb0:	1c5f      	adds	r7, r3, #1
   1ceb2:	6002      	str	r2, [r0, #0]
   1ceb4:	f100 0004 	add.w	r0, r0, #4
   1ceb8:	d1f9      	bne.n	1ceae <mbedtls_mpi_inv_mod+0x17a>
   1ceba:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1cebc:	f7fc f992 	bl	191e4 <nrf_free>
   1cec0:	2200      	movs	r2, #0
   1cec2:	2301      	movs	r3, #1
   1cec4:	9816      	ldr	r0, [sp, #88]	; 0x58
   1cec6:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   1ceca:	9213      	str	r2, [sp, #76]	; 0x4c
   1cecc:	b158      	cbz	r0, 1cee6 <mbedtls_mpi_inv_mod+0x1b2>
   1cece:	9915      	ldr	r1, [sp, #84]	; 0x54
   1ced0:	1e4b      	subs	r3, r1, #1
   1ced2:	b131      	cbz	r1, 1cee2 <mbedtls_mpi_inv_mod+0x1ae>
   1ced4:	3b01      	subs	r3, #1
   1ced6:	1c5e      	adds	r6, r3, #1
   1ced8:	6002      	str	r2, [r0, #0]
   1ceda:	f100 0004 	add.w	r0, r0, #4
   1cede:	d1f9      	bne.n	1ced4 <mbedtls_mpi_inv_mod+0x1a0>
   1cee0:	9816      	ldr	r0, [sp, #88]	; 0x58
   1cee2:	f7fc f97f 	bl	191e4 <nrf_free>
   1cee6:	2200      	movs	r2, #0
   1cee8:	2301      	movs	r3, #1
   1ceea:	9819      	ldr	r0, [sp, #100]	; 0x64
   1ceec:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
   1cef0:	9216      	str	r2, [sp, #88]	; 0x58
   1cef2:	b158      	cbz	r0, 1cf0c <mbedtls_mpi_inv_mod+0x1d8>
   1cef4:	9918      	ldr	r1, [sp, #96]	; 0x60
   1cef6:	1e4b      	subs	r3, r1, #1
   1cef8:	b131      	cbz	r1, 1cf08 <mbedtls_mpi_inv_mod+0x1d4>
   1cefa:	3b01      	subs	r3, #1
   1cefc:	1c5d      	adds	r5, r3, #1
   1cefe:	6002      	str	r2, [r0, #0]
   1cf00:	f100 0004 	add.w	r0, r0, #4
   1cf04:	d1f9      	bne.n	1cefa <mbedtls_mpi_inv_mod+0x1c6>
   1cf06:	9819      	ldr	r0, [sp, #100]	; 0x64
   1cf08:	f7fc f96c 	bl	191e4 <nrf_free>
   1cf0c:	2200      	movs	r2, #0
   1cf0e:	2301      	movs	r3, #1
   1cf10:	981c      	ldr	r0, [sp, #112]	; 0x70
   1cf12:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
   1cf16:	9219      	str	r2, [sp, #100]	; 0x64
   1cf18:	2800      	cmp	r0, #0
   1cf1a:	f43f af22 	beq.w	1cd62 <mbedtls_mpi_inv_mod+0x2e>
   1cf1e:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1cf20:	1e4b      	subs	r3, r1, #1
   1cf22:	b131      	cbz	r1, 1cf32 <mbedtls_mpi_inv_mod+0x1fe>
   1cf24:	3b01      	subs	r3, #1
   1cf26:	1c59      	adds	r1, r3, #1
   1cf28:	6002      	str	r2, [r0, #0]
   1cf2a:	f100 0004 	add.w	r0, r0, #4
   1cf2e:	d1f9      	bne.n	1cf24 <mbedtls_mpi_inv_mod+0x1f0>
   1cf30:	981c      	ldr	r0, [sp, #112]	; 0x70
   1cf32:	f7fc f957 	bl	191e4 <nrf_free>
   1cf36:	4620      	mov	r0, r4
   1cf38:	b021      	add	sp, #132	; 0x84
   1cf3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cf3e:	2b01      	cmp	r3, #1
   1cf40:	9a02      	ldr	r2, [sp, #8]
   1cf42:	d96b      	bls.n	1d01c <mbedtls_mpi_inv_mod+0x2e8>
   1cf44:	2a00      	cmp	r2, #0
   1cf46:	f47f af4b 	bne.w	1cde0 <mbedtls_mpi_inv_mod+0xac>
   1cf4a:	4639      	mov	r1, r7
   1cf4c:	a805      	add	r0, sp, #20
   1cf4e:	462a      	mov	r2, r5
   1cf50:	f7ff fb9a 	bl	1c688 <mbedtls_mpi_mod_mpi>
   1cf54:	4604      	mov	r4, r0
   1cf56:	2800      	cmp	r0, #0
   1cf58:	f47f af44 	bne.w	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1cf5c:	a808      	add	r0, sp, #32
   1cf5e:	a905      	add	r1, sp, #20
   1cf60:	f7fd ff38 	bl	1add4 <mbedtls_mpi_copy>
   1cf64:	4604      	mov	r4, r0
   1cf66:	2800      	cmp	r0, #0
   1cf68:	f47f af3c 	bne.w	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1cf6c:	a811      	add	r0, sp, #68	; 0x44
   1cf6e:	4629      	mov	r1, r5
   1cf70:	f7fd ff30 	bl	1add4 <mbedtls_mpi_copy>
   1cf74:	4604      	mov	r4, r0
   1cf76:	2800      	cmp	r0, #0
   1cf78:	f47f af34 	bne.w	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1cf7c:	a814      	add	r0, sp, #80	; 0x50
   1cf7e:	4629      	mov	r1, r5
   1cf80:	f7fd ff28 	bl	1add4 <mbedtls_mpi_copy>
   1cf84:	4604      	mov	r4, r0
   1cf86:	2800      	cmp	r0, #0
   1cf88:	f47f af2c 	bne.w	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1cf8c:	a80b      	add	r0, sp, #44	; 0x2c
   1cf8e:	2101      	movs	r1, #1
   1cf90:	f7fe f8ac 	bl	1b0ec <mbedtls_mpi_lset>
   1cf94:	4604      	mov	r4, r0
   1cf96:	2800      	cmp	r0, #0
   1cf98:	f47f af24 	bne.w	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1cf9c:	4601      	mov	r1, r0
   1cf9e:	a80e      	add	r0, sp, #56	; 0x38
   1cfa0:	f7fe f8a4 	bl	1b0ec <mbedtls_mpi_lset>
   1cfa4:	4604      	mov	r4, r0
   1cfa6:	2800      	cmp	r0, #0
   1cfa8:	f47f af1c 	bne.w	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1cfac:	4601      	mov	r1, r0
   1cfae:	a817      	add	r0, sp, #92	; 0x5c
   1cfb0:	f7fe f89c 	bl	1b0ec <mbedtls_mpi_lset>
   1cfb4:	4604      	mov	r4, r0
   1cfb6:	2800      	cmp	r0, #0
   1cfb8:	f47f af14 	bne.w	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1cfbc:	a81a      	add	r0, sp, #104	; 0x68
   1cfbe:	2101      	movs	r1, #1
   1cfc0:	f7fe f894 	bl	1b0ec <mbedtls_mpi_lset>
   1cfc4:	4604      	mov	r4, r0
   1cfc6:	2800      	cmp	r0, #0
   1cfc8:	f47f af0c 	bne.w	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1cfcc:	4681      	mov	r9, r0
   1cfce:	f04f 0801 	mov.w	r8, #1
   1cfd2:	af01      	add	r7, sp, #4
   1cfd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cfd6:	681b      	ldr	r3, [r3, #0]
   1cfd8:	07da      	lsls	r2, r3, #31
   1cfda:	d42c      	bmi.n	1d036 <mbedtls_mpi_inv_mod+0x302>
   1cfdc:	2101      	movs	r1, #1
   1cfde:	a808      	add	r0, sp, #32
   1cfe0:	f7fe fac6 	bl	1b570 <mbedtls_mpi_shift_r>
   1cfe4:	4604      	mov	r4, r0
   1cfe6:	2800      	cmp	r0, #0
   1cfe8:	f47f aefc 	bne.w	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1cfec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1cfee:	681b      	ldr	r3, [r3, #0]
   1cff0:	07d8      	lsls	r0, r3, #31
   1cff2:	d444      	bmi.n	1d07e <mbedtls_mpi_inv_mod+0x34a>
   1cff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1cff6:	681b      	ldr	r3, [r3, #0]
   1cff8:	07d9      	lsls	r1, r3, #31
   1cffa:	d440      	bmi.n	1d07e <mbedtls_mpi_inv_mod+0x34a>
   1cffc:	2101      	movs	r1, #1
   1cffe:	a80b      	add	r0, sp, #44	; 0x2c
   1d000:	f7fe fab6 	bl	1b570 <mbedtls_mpi_shift_r>
   1d004:	4604      	mov	r4, r0
   1d006:	2800      	cmp	r0, #0
   1d008:	f47f aeec 	bne.w	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1d00c:	2101      	movs	r1, #1
   1d00e:	a80e      	add	r0, sp, #56	; 0x38
   1d010:	f7fe faae 	bl	1b570 <mbedtls_mpi_shift_r>
   1d014:	4604      	mov	r4, r0
   1d016:	2800      	cmp	r0, #0
   1d018:	d0dc      	beq.n	1cfd4 <mbedtls_mpi_inv_mod+0x2a0>
   1d01a:	e6e3      	b.n	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1d01c:	2a00      	cmp	r2, #0
   1d01e:	f6ff aedf 	blt.w	1cde0 <mbedtls_mpi_inv_mod+0xac>
   1d022:	680b      	ldr	r3, [r1, #0]
   1d024:	2b01      	cmp	r3, #1
   1d026:	d88d      	bhi.n	1cf44 <mbedtls_mpi_inv_mod+0x210>
   1d028:	2b00      	cmp	r3, #0
   1d02a:	d18e      	bne.n	1cf4a <mbedtls_mpi_inv_mod+0x216>
   1d02c:	4252      	negs	r2, r2
   1d02e:	2a00      	cmp	r2, #0
   1d030:	f47f aed6 	bne.w	1cde0 <mbedtls_mpi_inv_mod+0xac>
   1d034:	e789      	b.n	1cf4a <mbedtls_mpi_inv_mod+0x216>
   1d036:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d038:	681b      	ldr	r3, [r3, #0]
   1d03a:	07d8      	lsls	r0, r3, #31
   1d03c:	d443      	bmi.n	1d0c6 <mbedtls_mpi_inv_mod+0x392>
   1d03e:	2101      	movs	r1, #1
   1d040:	a814      	add	r0, sp, #80	; 0x50
   1d042:	f7fe fa95 	bl	1b570 <mbedtls_mpi_shift_r>
   1d046:	4604      	mov	r4, r0
   1d048:	2800      	cmp	r0, #0
   1d04a:	f47f aecb 	bne.w	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1d04e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1d050:	681b      	ldr	r3, [r3, #0]
   1d052:	07db      	lsls	r3, r3, #31
   1d054:	d425      	bmi.n	1d0a2 <mbedtls_mpi_inv_mod+0x36e>
   1d056:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1d058:	681b      	ldr	r3, [r3, #0]
   1d05a:	07dc      	lsls	r4, r3, #31
   1d05c:	d421      	bmi.n	1d0a2 <mbedtls_mpi_inv_mod+0x36e>
   1d05e:	2101      	movs	r1, #1
   1d060:	a817      	add	r0, sp, #92	; 0x5c
   1d062:	f7fe fa85 	bl	1b570 <mbedtls_mpi_shift_r>
   1d066:	4604      	mov	r4, r0
   1d068:	2800      	cmp	r0, #0
   1d06a:	f47f aebb 	bne.w	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1d06e:	2101      	movs	r1, #1
   1d070:	a81a      	add	r0, sp, #104	; 0x68
   1d072:	f7fe fa7d 	bl	1b570 <mbedtls_mpi_shift_r>
   1d076:	4604      	mov	r4, r0
   1d078:	2800      	cmp	r0, #0
   1d07a:	d0dc      	beq.n	1d036 <mbedtls_mpi_inv_mod+0x302>
   1d07c:	e6b2      	b.n	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1d07e:	a90b      	add	r1, sp, #44	; 0x2c
   1d080:	aa11      	add	r2, sp, #68	; 0x44
   1d082:	4608      	mov	r0, r1
   1d084:	f7fe fd04 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1d088:	4604      	mov	r4, r0
   1d08a:	2800      	cmp	r0, #0
   1d08c:	f47f aeaa 	bne.w	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1d090:	a90e      	add	r1, sp, #56	; 0x38
   1d092:	aa05      	add	r2, sp, #20
   1d094:	4608      	mov	r0, r1
   1d096:	f7fe fd6f 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1d09a:	4604      	mov	r4, r0
   1d09c:	2800      	cmp	r0, #0
   1d09e:	d0ad      	beq.n	1cffc <mbedtls_mpi_inv_mod+0x2c8>
   1d0a0:	e6a0      	b.n	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1d0a2:	a917      	add	r1, sp, #92	; 0x5c
   1d0a4:	aa11      	add	r2, sp, #68	; 0x44
   1d0a6:	4608      	mov	r0, r1
   1d0a8:	f7fe fcf2 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1d0ac:	4604      	mov	r4, r0
   1d0ae:	2800      	cmp	r0, #0
   1d0b0:	f47f ae98 	bne.w	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1d0b4:	a91a      	add	r1, sp, #104	; 0x68
   1d0b6:	aa05      	add	r2, sp, #20
   1d0b8:	4608      	mov	r0, r1
   1d0ba:	f7fe fd5d 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1d0be:	4604      	mov	r4, r0
   1d0c0:	2800      	cmp	r0, #0
   1d0c2:	d0cc      	beq.n	1d05e <mbedtls_mpi_inv_mod+0x32a>
   1d0c4:	e68e      	b.n	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1d0c6:	a914      	add	r1, sp, #80	; 0x50
   1d0c8:	a808      	add	r0, sp, #32
   1d0ca:	f7fe fac1 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1d0ce:	2800      	cmp	r0, #0
   1d0d0:	db3d      	blt.n	1d14e <mbedtls_mpi_inv_mod+0x41a>
   1d0d2:	a908      	add	r1, sp, #32
   1d0d4:	aa14      	add	r2, sp, #80	; 0x50
   1d0d6:	4608      	mov	r0, r1
   1d0d8:	f7fe fd4e 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1d0dc:	4604      	mov	r4, r0
   1d0de:	2800      	cmp	r0, #0
   1d0e0:	f47f ae80 	bne.w	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1d0e4:	a90b      	add	r1, sp, #44	; 0x2c
   1d0e6:	aa17      	add	r2, sp, #92	; 0x5c
   1d0e8:	4608      	mov	r0, r1
   1d0ea:	f7fe fd45 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1d0ee:	4604      	mov	r4, r0
   1d0f0:	2800      	cmp	r0, #0
   1d0f2:	f47f ae77 	bne.w	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1d0f6:	a90e      	add	r1, sp, #56	; 0x38
   1d0f8:	aa1a      	add	r2, sp, #104	; 0x68
   1d0fa:	4608      	mov	r0, r1
   1d0fc:	f7fe fd3c 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1d100:	4604      	mov	r4, r0
   1d102:	2800      	cmp	r0, #0
   1d104:	f47f ae6e 	bne.w	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1d108:	a91d      	add	r1, sp, #116	; 0x74
   1d10a:	a808      	add	r0, sp, #32
   1d10c:	f8cd 9004 	str.w	r9, [sp, #4]
   1d110:	e9cd 881d 	strd	r8, r8, [sp, #116]	; 0x74
   1d114:	971f      	str	r7, [sp, #124]	; 0x7c
   1d116:	f7fd fd97 	bl	1ac48 <mbedtls_mpi_cmp_mpi.constprop.6>
   1d11a:	2800      	cmp	r0, #0
   1d11c:	f47f af5a 	bne.w	1cfd4 <mbedtls_mpi_inv_mod+0x2a0>
   1d120:	4680      	mov	r8, r0
   1d122:	f04f 0901 	mov.w	r9, #1
   1d126:	a91d      	add	r1, sp, #116	; 0x74
   1d128:	a817      	add	r0, sp, #92	; 0x5c
   1d12a:	f8cd 8004 	str.w	r8, [sp, #4]
   1d12e:	e9cd 991d 	strd	r9, r9, [sp, #116]	; 0x74
   1d132:	971f      	str	r7, [sp, #124]	; 0x7c
   1d134:	f7fd fd88 	bl	1ac48 <mbedtls_mpi_cmp_mpi.constprop.6>
   1d138:	2800      	cmp	r0, #0
   1d13a:	da23      	bge.n	1d184 <mbedtls_mpi_inv_mod+0x450>
   1d13c:	a917      	add	r1, sp, #92	; 0x5c
   1d13e:	462a      	mov	r2, r5
   1d140:	4608      	mov	r0, r1
   1d142:	f7fe fca5 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1d146:	4604      	mov	r4, r0
   1d148:	2800      	cmp	r0, #0
   1d14a:	d0ec      	beq.n	1d126 <mbedtls_mpi_inv_mod+0x3f2>
   1d14c:	e64a      	b.n	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1d14e:	a914      	add	r1, sp, #80	; 0x50
   1d150:	aa08      	add	r2, sp, #32
   1d152:	4608      	mov	r0, r1
   1d154:	f7fe fd10 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1d158:	4604      	mov	r4, r0
   1d15a:	2800      	cmp	r0, #0
   1d15c:	f47f ae42 	bne.w	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1d160:	a917      	add	r1, sp, #92	; 0x5c
   1d162:	aa0b      	add	r2, sp, #44	; 0x2c
   1d164:	4608      	mov	r0, r1
   1d166:	f7fe fd07 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1d16a:	4604      	mov	r4, r0
   1d16c:	2800      	cmp	r0, #0
   1d16e:	f47f ae39 	bne.w	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1d172:	a91a      	add	r1, sp, #104	; 0x68
   1d174:	aa0e      	add	r2, sp, #56	; 0x38
   1d176:	4608      	mov	r0, r1
   1d178:	f7fe fcfe 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1d17c:	4604      	mov	r4, r0
   1d17e:	2800      	cmp	r0, #0
   1d180:	d0c2      	beq.n	1d108 <mbedtls_mpi_inv_mod+0x3d4>
   1d182:	e62f      	b.n	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1d184:	4629      	mov	r1, r5
   1d186:	a817      	add	r0, sp, #92	; 0x5c
   1d188:	f7fe fa62 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1d18c:	2800      	cmp	r0, #0
   1d18e:	db08      	blt.n	1d1a2 <mbedtls_mpi_inv_mod+0x46e>
   1d190:	a917      	add	r1, sp, #92	; 0x5c
   1d192:	462a      	mov	r2, r5
   1d194:	4608      	mov	r0, r1
   1d196:	f7fe fcef 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1d19a:	4604      	mov	r4, r0
   1d19c:	2800      	cmp	r0, #0
   1d19e:	d0f1      	beq.n	1d184 <mbedtls_mpi_inv_mod+0x450>
   1d1a0:	e620      	b.n	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1d1a2:	a917      	add	r1, sp, #92	; 0x5c
   1d1a4:	4630      	mov	r0, r6
   1d1a6:	f7fd fe15 	bl	1add4 <mbedtls_mpi_copy>
   1d1aa:	4604      	mov	r4, r0
   1d1ac:	e61a      	b.n	1cde4 <mbedtls_mpi_inv_mod+0xb0>
   1d1ae:	bf00      	nop

0001d1b0 <block_cipher_df>:
   1d1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1b4:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1d1b8:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
   1d1bc:	f200 8119 	bhi.w	1d3f2 <block_cipher_df+0x242>
   1d1c0:	4692      	mov	sl, r2
   1d1c2:	460c      	mov	r4, r1
   1d1c4:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1d1c8:	2100      	movs	r1, #0
   1d1ca:	4681      	mov	r9, r0
   1d1cc:	a860      	add	r0, sp, #384	; 0x180
   1d1ce:	f00d fb89 	bl	2a8e4 <memset>
   1d1d2:	a81a      	add	r0, sp, #104	; 0x68
   1d1d4:	f7fc f828 	bl	19228 <mbedtls_aes_init>
   1d1d8:	2000      	movs	r0, #0
   1d1da:	2330      	movs	r3, #48	; 0x30
   1d1dc:	ad66      	add	r5, sp, #408	; 0x198
   1d1de:	ea4f 221a 	mov.w	r2, sl, lsr #8
   1d1e2:	f8ad 0190 	strh.w	r0, [sp, #400]	; 0x190
   1d1e6:	f88d 2192 	strb.w	r2, [sp, #402]	; 0x192
   1d1ea:	4621      	mov	r1, r4
   1d1ec:	4652      	mov	r2, sl
   1d1ee:	4628      	mov	r0, r5
   1d1f0:	f88d 3197 	strb.w	r3, [sp, #407]	; 0x197
   1d1f4:	f88d a193 	strb.w	sl, [sp, #403]	; 0x193
   1d1f8:	ae06      	add	r6, sp, #24
   1d1fa:	f7f0 fced 	bl	dbd8 <memcpy>
   1d1fe:	2280      	movs	r2, #128	; 0x80
   1d200:	4633      	mov	r3, r6
   1d202:	f805 200a 	strb.w	r2, [r5, sl]
   1d206:	af0e      	add	r7, sp, #56	; 0x38
   1d208:	1b99      	subs	r1, r3, r6
   1d20a:	f803 1b01 	strb.w	r1, [r3], #1
   1d20e:	429f      	cmp	r7, r3
   1d210:	d1fa      	bne.n	1d208 <block_cipher_df+0x58>
   1d212:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d216:	4631      	mov	r1, r6
   1d218:	a81a      	add	r0, sp, #104	; 0x68
   1d21a:	f7fc f811 	bl	19240 <mbedtls_aes_setkey_enc>
   1d21e:	4683      	mov	fp, r0
   1d220:	2800      	cmp	r0, #0
   1d222:	f040 80c8 	bne.w	1d3b6 <block_cipher_df+0x206>
   1d226:	9001      	str	r0, [sp, #4]
   1d228:	f10a 0a19 	add.w	sl, sl, #25
   1d22c:	ac02      	add	r4, sp, #8
   1d22e:	2210      	movs	r2, #16
   1d230:	2100      	movs	r1, #0
   1d232:	4620      	mov	r0, r4
   1d234:	f00d fb56 	bl	2a8e4 <memset>
   1d238:	46d0      	mov	r8, sl
   1d23a:	ad64      	add	r5, sp, #400	; 0x190
   1d23c:	7822      	ldrb	r2, [r4, #0]
   1d23e:	f815 3c10 	ldrb.w	r3, [r5, #-16]
   1d242:	f894 c001 	ldrb.w	ip, [r4, #1]
   1d246:	f815 1c0f 	ldrb.w	r1, [r5, #-15]
   1d24a:	78a0      	ldrb	r0, [r4, #2]
   1d24c:	4053      	eors	r3, r2
   1d24e:	f815 2c0e 	ldrb.w	r2, [r5, #-14]
   1d252:	ea8c 0c01 	eor.w	ip, ip, r1
   1d256:	4050      	eors	r0, r2
   1d258:	78e1      	ldrb	r1, [r4, #3]
   1d25a:	f815 2c0d 	ldrb.w	r2, [r5, #-13]
   1d25e:	f894 e004 	ldrb.w	lr, [r4, #4]
   1d262:	4051      	eors	r1, r2
   1d264:	f815 2c0c 	ldrb.w	r2, [r5, #-12]
   1d268:	7023      	strb	r3, [r4, #0]
   1d26a:	ea8e 0202 	eor.w	r2, lr, r2
   1d26e:	f815 3c0b 	ldrb.w	r3, [r5, #-11]
   1d272:	f894 e005 	ldrb.w	lr, [r4, #5]
   1d276:	f884 c001 	strb.w	ip, [r4, #1]
   1d27a:	ea8e 0303 	eor.w	r3, lr, r3
   1d27e:	f815 cc0a 	ldrb.w	ip, [r5, #-10]
   1d282:	f894 e006 	ldrb.w	lr, [r4, #6]
   1d286:	70a0      	strb	r0, [r4, #2]
   1d288:	ea8e 0c0c 	eor.w	ip, lr, ip
   1d28c:	f815 0c09 	ldrb.w	r0, [r5, #-9]
   1d290:	f894 e007 	ldrb.w	lr, [r4, #7]
   1d294:	70e1      	strb	r1, [r4, #3]
   1d296:	ea8e 0000 	eor.w	r0, lr, r0
   1d29a:	f815 1c08 	ldrb.w	r1, [r5, #-8]
   1d29e:	f894 e008 	ldrb.w	lr, [r4, #8]
   1d2a2:	7122      	strb	r2, [r4, #4]
   1d2a4:	ea8e 0101 	eor.w	r1, lr, r1
   1d2a8:	f815 2c07 	ldrb.w	r2, [r5, #-7]
   1d2ac:	f894 e009 	ldrb.w	lr, [r4, #9]
   1d2b0:	7163      	strb	r3, [r4, #5]
   1d2b2:	ea8e 0202 	eor.w	r2, lr, r2
   1d2b6:	7aa3      	ldrb	r3, [r4, #10]
   1d2b8:	f815 ec06 	ldrb.w	lr, [r5, #-6]
   1d2bc:	f884 c006 	strb.w	ip, [r4, #6]
   1d2c0:	ea83 030e 	eor.w	r3, r3, lr
   1d2c4:	71e0      	strb	r0, [r4, #7]
   1d2c6:	7221      	strb	r1, [r4, #8]
   1d2c8:	7262      	strb	r2, [r4, #9]
   1d2ca:	72a3      	strb	r3, [r4, #10]
   1d2cc:	7ae1      	ldrb	r1, [r4, #11]
   1d2ce:	f815 3c05 	ldrb.w	r3, [r5, #-5]
   1d2d2:	f894 c00c 	ldrb.w	ip, [r4, #12]
   1d2d6:	7b60      	ldrb	r0, [r4, #13]
   1d2d8:	404b      	eors	r3, r1
   1d2da:	f815 2c04 	ldrb.w	r2, [r5, #-4]
   1d2de:	f815 1c03 	ldrb.w	r1, [r5, #-3]
   1d2e2:	ea8c 0202 	eor.w	r2, ip, r2
   1d2e6:	4041      	eors	r1, r0
   1d2e8:	f894 c00e 	ldrb.w	ip, [r4, #14]
   1d2ec:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   1d2f0:	f894 e00f 	ldrb.w	lr, [r4, #15]
   1d2f4:	ea8c 0000 	eor.w	r0, ip, r0
   1d2f8:	f815 cc01 	ldrb.w	ip, [r5, #-1]
   1d2fc:	72e3      	strb	r3, [r4, #11]
   1d2fe:	ea8e 0c0c 	eor.w	ip, lr, ip
   1d302:	7322      	strb	r2, [r4, #12]
   1d304:	7361      	strb	r1, [r4, #13]
   1d306:	73a0      	strb	r0, [r4, #14]
   1d308:	4623      	mov	r3, r4
   1d30a:	4622      	mov	r2, r4
   1d30c:	2101      	movs	r1, #1
   1d30e:	a81a      	add	r0, sp, #104	; 0x68
   1d310:	f884 c00f 	strb.w	ip, [r4, #15]
   1d314:	f7fc ff4a 	bl	1a1ac <mbedtls_aes_crypt_ecb>
   1d318:	f1b8 0f10 	cmp.w	r8, #16
   1d31c:	4683      	mov	fp, r0
   1d31e:	bf94      	ite	ls
   1d320:	eba8 0808 	subls.w	r8, r8, r8
   1d324:	f1a8 0810 	subhi.w	r8, r8, #16
   1d328:	2800      	cmp	r0, #0
   1d32a:	d145      	bne.n	1d3b8 <block_cipher_df+0x208>
   1d32c:	3510      	adds	r5, #16
   1d32e:	f1b8 0f00 	cmp.w	r8, #0
   1d332:	d183      	bne.n	1d23c <block_cipher_df+0x8c>
   1d334:	9d01      	ldr	r5, [sp, #4]
   1d336:	2210      	movs	r2, #16
   1d338:	4621      	mov	r1, r4
   1d33a:	1978      	adds	r0, r7, r5
   1d33c:	f7f0 fc4c 	bl	dbd8 <memcpy>
   1d340:	f89d 3183 	ldrb.w	r3, [sp, #387]	; 0x183
   1d344:	f105 0210 	add.w	r2, r5, #16
   1d348:	3301      	adds	r3, #1
   1d34a:	2a30      	cmp	r2, #48	; 0x30
   1d34c:	9201      	str	r2, [sp, #4]
   1d34e:	f88d 3183 	strb.w	r3, [sp, #387]	; 0x183
   1d352:	f47f af6c 	bne.w	1d22e <block_cipher_df+0x7e>
   1d356:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d35a:	4639      	mov	r1, r7
   1d35c:	a81a      	add	r0, sp, #104	; 0x68
   1d35e:	f7fb ff6f 	bl	19240 <mbedtls_aes_setkey_enc>
   1d362:	4683      	mov	fp, r0
   1d364:	bb40      	cbnz	r0, 1d3b8 <block_cipher_df+0x208>
   1d366:	464d      	mov	r5, r9
   1d368:	f109 0830 	add.w	r8, r9, #48	; 0x30
   1d36c:	ab16      	add	r3, sp, #88	; 0x58
   1d36e:	461a      	mov	r2, r3
   1d370:	2101      	movs	r1, #1
   1d372:	a81a      	add	r0, sp, #104	; 0x68
   1d374:	f7fc ff1a 	bl	1a1ac <mbedtls_aes_crypt_ecb>
   1d378:	4683      	mov	fp, r0
   1d37a:	b9e8      	cbnz	r0, 1d3b8 <block_cipher_df+0x208>
   1d37c:	2210      	movs	r2, #16
   1d37e:	4628      	mov	r0, r5
   1d380:	a916      	add	r1, sp, #88	; 0x58
   1d382:	4415      	add	r5, r2
   1d384:	f7f0 fc28 	bl	dbd8 <memcpy>
   1d388:	4545      	cmp	r5, r8
   1d38a:	d1ef      	bne.n	1d36c <block_cipher_df+0x1bc>
   1d38c:	a81a      	add	r0, sp, #104	; 0x68
   1d38e:	f7fb ff51 	bl	19234 <mbedtls_aes_free>
   1d392:	a860      	add	r0, sp, #384	; 0x180
   1d394:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1d398:	f002 fafa 	bl	1f990 <mbedtls_platform_zeroize>
   1d39c:	4638      	mov	r0, r7
   1d39e:	2130      	movs	r1, #48	; 0x30
   1d3a0:	f002 faf6 	bl	1f990 <mbedtls_platform_zeroize>
   1d3a4:	4630      	mov	r0, r6
   1d3a6:	2120      	movs	r1, #32
   1d3a8:	f002 faf2 	bl	1f990 <mbedtls_platform_zeroize>
   1d3ac:	4620      	mov	r0, r4
   1d3ae:	2110      	movs	r1, #16
   1d3b0:	f002 faee 	bl	1f990 <mbedtls_platform_zeroize>
   1d3b4:	e018      	b.n	1d3e8 <block_cipher_df+0x238>
   1d3b6:	ac02      	add	r4, sp, #8
   1d3b8:	a81a      	add	r0, sp, #104	; 0x68
   1d3ba:	f7fb ff3b 	bl	19234 <mbedtls_aes_free>
   1d3be:	a860      	add	r0, sp, #384	; 0x180
   1d3c0:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1d3c4:	f002 fae4 	bl	1f990 <mbedtls_platform_zeroize>
   1d3c8:	4638      	mov	r0, r7
   1d3ca:	2130      	movs	r1, #48	; 0x30
   1d3cc:	f002 fae0 	bl	1f990 <mbedtls_platform_zeroize>
   1d3d0:	4630      	mov	r0, r6
   1d3d2:	2120      	movs	r1, #32
   1d3d4:	f002 fadc 	bl	1f990 <mbedtls_platform_zeroize>
   1d3d8:	4620      	mov	r0, r4
   1d3da:	2110      	movs	r1, #16
   1d3dc:	f002 fad8 	bl	1f990 <mbedtls_platform_zeroize>
   1d3e0:	4648      	mov	r0, r9
   1d3e2:	2130      	movs	r1, #48	; 0x30
   1d3e4:	f002 fad4 	bl	1f990 <mbedtls_platform_zeroize>
   1d3e8:	4658      	mov	r0, fp
   1d3ea:	f50d 7d49 	add.w	sp, sp, #804	; 0x324
   1d3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3f2:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1d3f6:	e7f7      	b.n	1d3e8 <block_cipher_df+0x238>

0001d3f8 <mbedtls_ctr_drbg_init>:
   1d3f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1d3fc:	2100      	movs	r1, #0
   1d3fe:	f00d ba71 	b.w	2a8e4 <memset>
   1d402:	bf00      	nop

0001d404 <mbedtls_ctr_drbg_free>:
   1d404:	b158      	cbz	r0, 1d41e <mbedtls_ctr_drbg_free+0x1a>
   1d406:	b510      	push	{r4, lr}
   1d408:	4604      	mov	r4, r0
   1d40a:	3020      	adds	r0, #32
   1d40c:	f7fb ff12 	bl	19234 <mbedtls_aes_free>
   1d410:	4620      	mov	r0, r4
   1d412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d416:	f44f 71a0 	mov.w	r1, #320	; 0x140
   1d41a:	f002 bab9 	b.w	1f990 <mbedtls_platform_zeroize>
   1d41e:	4770      	bx	lr

0001d420 <mbedtls_ctr_drbg_reseed>:
   1d420:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d422:	6983      	ldr	r3, [r0, #24]
   1d424:	b0ed      	sub	sp, #436	; 0x1b4
   1d426:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   1d42a:	f200 80e1 	bhi.w	1d5f0 <mbedtls_ctr_drbg_reseed+0x1d0>
   1d42e:	f5c3 73c0 	rsb	r3, r3, #384	; 0x180
   1d432:	4293      	cmp	r3, r2
   1d434:	f0c0 80dc 	bcc.w	1d5f0 <mbedtls_ctr_drbg_reseed+0x1d0>
   1d438:	4604      	mov	r4, r0
   1d43a:	4615      	mov	r5, r2
   1d43c:	460e      	mov	r6, r1
   1d43e:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1d442:	2100      	movs	r1, #0
   1d444:	a80c      	add	r0, sp, #48	; 0x30
   1d446:	f00d fa4d 	bl	2a8e4 <memset>
   1d44a:	a90c      	add	r1, sp, #48	; 0x30
   1d44c:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1d450:	69a2      	ldr	r2, [r4, #24]
   1d452:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   1d456:	4798      	blx	r3
   1d458:	2800      	cmp	r0, #0
   1d45a:	f040 80cc 	bne.w	1d5f6 <mbedtls_ctr_drbg_reseed+0x1d6>
   1d45e:	69a7      	ldr	r7, [r4, #24]
   1d460:	b106      	cbz	r6, 1d464 <mbedtls_ctr_drbg_reseed+0x44>
   1d462:	b94d      	cbnz	r5, 1d478 <mbedtls_ctr_drbg_reseed+0x58>
   1d464:	a90c      	add	r1, sp, #48	; 0x30
   1d466:	463a      	mov	r2, r7
   1d468:	4608      	mov	r0, r1
   1d46a:	f7ff fea1 	bl	1d1b0 <block_cipher_df>
   1d46e:	4605      	mov	r5, r0
   1d470:	b188      	cbz	r0, 1d496 <mbedtls_ctr_drbg_reseed+0x76>
   1d472:	4628      	mov	r0, r5
   1d474:	b06d      	add	sp, #436	; 0x1b4
   1d476:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d478:	ab0c      	add	r3, sp, #48	; 0x30
   1d47a:	462a      	mov	r2, r5
   1d47c:	19d8      	adds	r0, r3, r7
   1d47e:	4631      	mov	r1, r6
   1d480:	f7f0 fbaa 	bl	dbd8 <memcpy>
   1d484:	442f      	add	r7, r5
   1d486:	a90c      	add	r1, sp, #48	; 0x30
   1d488:	463a      	mov	r2, r7
   1d48a:	4608      	mov	r0, r1
   1d48c:	f7ff fe90 	bl	1d1b0 <block_cipher_df>
   1d490:	4605      	mov	r5, r0
   1d492:	2800      	cmp	r0, #0
   1d494:	d1ed      	bne.n	1d472 <mbedtls_ctr_drbg_reseed+0x52>
   1d496:	4668      	mov	r0, sp
   1d498:	2230      	movs	r2, #48	; 0x30
   1d49a:	4629      	mov	r1, r5
   1d49c:	f00d fa22 	bl	2a8e4 <memset>
   1d4a0:	462e      	mov	r6, r5
   1d4a2:	f104 0720 	add.w	r7, r4, #32
   1d4a6:	7be2      	ldrb	r2, [r4, #15]
   1d4a8:	eb0d 0306 	add.w	r3, sp, r6
   1d4ac:	3201      	adds	r2, #1
   1d4ae:	b2d2      	uxtb	r2, r2
   1d4b0:	73e2      	strb	r2, [r4, #15]
   1d4b2:	2a00      	cmp	r2, #0
   1d4b4:	d14d      	bne.n	1d552 <mbedtls_ctr_drbg_reseed+0x132>
   1d4b6:	7ba2      	ldrb	r2, [r4, #14]
   1d4b8:	3201      	adds	r2, #1
   1d4ba:	b2d2      	uxtb	r2, r2
   1d4bc:	73a2      	strb	r2, [r4, #14]
   1d4be:	2a00      	cmp	r2, #0
   1d4c0:	d147      	bne.n	1d552 <mbedtls_ctr_drbg_reseed+0x132>
   1d4c2:	7b62      	ldrb	r2, [r4, #13]
   1d4c4:	3201      	adds	r2, #1
   1d4c6:	b2d2      	uxtb	r2, r2
   1d4c8:	7362      	strb	r2, [r4, #13]
   1d4ca:	2a00      	cmp	r2, #0
   1d4cc:	d141      	bne.n	1d552 <mbedtls_ctr_drbg_reseed+0x132>
   1d4ce:	7b22      	ldrb	r2, [r4, #12]
   1d4d0:	3201      	adds	r2, #1
   1d4d2:	b2d2      	uxtb	r2, r2
   1d4d4:	7322      	strb	r2, [r4, #12]
   1d4d6:	2a00      	cmp	r2, #0
   1d4d8:	d13b      	bne.n	1d552 <mbedtls_ctr_drbg_reseed+0x132>
   1d4da:	7ae2      	ldrb	r2, [r4, #11]
   1d4dc:	3201      	adds	r2, #1
   1d4de:	b2d2      	uxtb	r2, r2
   1d4e0:	72e2      	strb	r2, [r4, #11]
   1d4e2:	2a00      	cmp	r2, #0
   1d4e4:	d135      	bne.n	1d552 <mbedtls_ctr_drbg_reseed+0x132>
   1d4e6:	7aa2      	ldrb	r2, [r4, #10]
   1d4e8:	3201      	adds	r2, #1
   1d4ea:	b2d2      	uxtb	r2, r2
   1d4ec:	72a2      	strb	r2, [r4, #10]
   1d4ee:	2a00      	cmp	r2, #0
   1d4f0:	d12f      	bne.n	1d552 <mbedtls_ctr_drbg_reseed+0x132>
   1d4f2:	7a62      	ldrb	r2, [r4, #9]
   1d4f4:	3201      	adds	r2, #1
   1d4f6:	b2d2      	uxtb	r2, r2
   1d4f8:	7262      	strb	r2, [r4, #9]
   1d4fa:	bb52      	cbnz	r2, 1d552 <mbedtls_ctr_drbg_reseed+0x132>
   1d4fc:	7a22      	ldrb	r2, [r4, #8]
   1d4fe:	3201      	adds	r2, #1
   1d500:	b2d2      	uxtb	r2, r2
   1d502:	7222      	strb	r2, [r4, #8]
   1d504:	bb2a      	cbnz	r2, 1d552 <mbedtls_ctr_drbg_reseed+0x132>
   1d506:	79e2      	ldrb	r2, [r4, #7]
   1d508:	3201      	adds	r2, #1
   1d50a:	b2d2      	uxtb	r2, r2
   1d50c:	71e2      	strb	r2, [r4, #7]
   1d50e:	bb02      	cbnz	r2, 1d552 <mbedtls_ctr_drbg_reseed+0x132>
   1d510:	79a2      	ldrb	r2, [r4, #6]
   1d512:	3201      	adds	r2, #1
   1d514:	b2d2      	uxtb	r2, r2
   1d516:	71a2      	strb	r2, [r4, #6]
   1d518:	b9da      	cbnz	r2, 1d552 <mbedtls_ctr_drbg_reseed+0x132>
   1d51a:	7962      	ldrb	r2, [r4, #5]
   1d51c:	3201      	adds	r2, #1
   1d51e:	b2d2      	uxtb	r2, r2
   1d520:	7162      	strb	r2, [r4, #5]
   1d522:	b9b2      	cbnz	r2, 1d552 <mbedtls_ctr_drbg_reseed+0x132>
   1d524:	7922      	ldrb	r2, [r4, #4]
   1d526:	3201      	adds	r2, #1
   1d528:	b2d2      	uxtb	r2, r2
   1d52a:	7122      	strb	r2, [r4, #4]
   1d52c:	b98a      	cbnz	r2, 1d552 <mbedtls_ctr_drbg_reseed+0x132>
   1d52e:	78e2      	ldrb	r2, [r4, #3]
   1d530:	3201      	adds	r2, #1
   1d532:	b2d2      	uxtb	r2, r2
   1d534:	70e2      	strb	r2, [r4, #3]
   1d536:	b962      	cbnz	r2, 1d552 <mbedtls_ctr_drbg_reseed+0x132>
   1d538:	78a2      	ldrb	r2, [r4, #2]
   1d53a:	3201      	adds	r2, #1
   1d53c:	b2d2      	uxtb	r2, r2
   1d53e:	70a2      	strb	r2, [r4, #2]
   1d540:	b93a      	cbnz	r2, 1d552 <mbedtls_ctr_drbg_reseed+0x132>
   1d542:	7862      	ldrb	r2, [r4, #1]
   1d544:	3201      	adds	r2, #1
   1d546:	b2d2      	uxtb	r2, r2
   1d548:	7062      	strb	r2, [r4, #1]
   1d54a:	b912      	cbnz	r2, 1d552 <mbedtls_ctr_drbg_reseed+0x132>
   1d54c:	7822      	ldrb	r2, [r4, #0]
   1d54e:	3201      	adds	r2, #1
   1d550:	7022      	strb	r2, [r4, #0]
   1d552:	4622      	mov	r2, r4
   1d554:	2101      	movs	r1, #1
   1d556:	4638      	mov	r0, r7
   1d558:	f7fc fe28 	bl	1a1ac <mbedtls_aes_crypt_ecb>
   1d55c:	4605      	mov	r5, r0
   1d55e:	2800      	cmp	r0, #0
   1d560:	d187      	bne.n	1d472 <mbedtls_ctr_drbg_reseed+0x52>
   1d562:	3610      	adds	r6, #16
   1d564:	2e30      	cmp	r6, #48	; 0x30
   1d566:	d19e      	bne.n	1d4a6 <mbedtls_ctr_drbg_reseed+0x86>
   1d568:	9901      	ldr	r1, [sp, #4]
   1d56a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d56c:	9800      	ldr	r0, [sp, #0]
   1d56e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1d570:	4058      	eors	r0, r3
   1d572:	404a      	eors	r2, r1
   1d574:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d576:	9902      	ldr	r1, [sp, #8]
   1d578:	9000      	str	r0, [sp, #0]
   1d57a:	4059      	eors	r1, r3
   1d57c:	9803      	ldr	r0, [sp, #12]
   1d57e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d580:	9201      	str	r2, [sp, #4]
   1d582:	4043      	eors	r3, r0
   1d584:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1d586:	9804      	ldr	r0, [sp, #16]
   1d588:	9102      	str	r1, [sp, #8]
   1d58a:	4050      	eors	r0, r2
   1d58c:	9905      	ldr	r1, [sp, #20]
   1d58e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1d590:	9303      	str	r3, [sp, #12]
   1d592:	4051      	eors	r1, r2
   1d594:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1d596:	9a06      	ldr	r2, [sp, #24]
   1d598:	9004      	str	r0, [sp, #16]
   1d59a:	405a      	eors	r2, r3
   1d59c:	9807      	ldr	r0, [sp, #28]
   1d59e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1d5a0:	9105      	str	r1, [sp, #20]
   1d5a2:	4058      	eors	r0, r3
   1d5a4:	9908      	ldr	r1, [sp, #32]
   1d5a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1d5a8:	9206      	str	r2, [sp, #24]
   1d5aa:	4059      	eors	r1, r3
   1d5ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d5ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1d5b0:	9007      	str	r0, [sp, #28]
   1d5b2:	405a      	eors	r2, r3
   1d5b4:	980a      	ldr	r0, [sp, #40]	; 0x28
   1d5b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d5b8:	9108      	str	r1, [sp, #32]
   1d5ba:	4043      	eors	r3, r0
   1d5bc:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   1d5c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d5c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1d5c4:	4638      	mov	r0, r7
   1d5c6:	4053      	eors	r3, r2
   1d5c8:	4669      	mov	r1, sp
   1d5ca:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d5ce:	930b      	str	r3, [sp, #44]	; 0x2c
   1d5d0:	f7fb fe36 	bl	19240 <mbedtls_aes_setkey_enc>
   1d5d4:	4605      	mov	r5, r0
   1d5d6:	2800      	cmp	r0, #0
   1d5d8:	f47f af4b 	bne.w	1d472 <mbedtls_ctr_drbg_reseed+0x52>
   1d5dc:	2210      	movs	r2, #16
   1d5de:	a908      	add	r1, sp, #32
   1d5e0:	4620      	mov	r0, r4
   1d5e2:	f7f0 faf9 	bl	dbd8 <memcpy>
   1d5e6:	2301      	movs	r3, #1
   1d5e8:	4628      	mov	r0, r5
   1d5ea:	6123      	str	r3, [r4, #16]
   1d5ec:	b06d      	add	sp, #436	; 0x1b4
   1d5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d5f0:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1d5f4:	e73d      	b.n	1d472 <mbedtls_ctr_drbg_reseed+0x52>
   1d5f6:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1d5fa:	e73a      	b.n	1d472 <mbedtls_ctr_drbg_reseed+0x52>

0001d5fc <mbedtls_ctr_drbg_seed>:
   1d5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d600:	4604      	mov	r4, r0
   1d602:	4616      	mov	r6, r2
   1d604:	2220      	movs	r2, #32
   1d606:	b088      	sub	sp, #32
   1d608:	18a5      	adds	r5, r4, r2
   1d60a:	460f      	mov	r7, r1
   1d60c:	4668      	mov	r0, sp
   1d60e:	2100      	movs	r1, #0
   1d610:	4698      	mov	r8, r3
   1d612:	f00d f967 	bl	2a8e4 <memset>
   1d616:	4628      	mov	r0, r5
   1d618:	f7fb fe06 	bl	19228 <mbedtls_aes_init>
   1d61c:	2220      	movs	r2, #32
   1d61e:	f242 7310 	movw	r3, #10000	; 0x2710
   1d622:	f8c4 7138 	str.w	r7, [r4, #312]	; 0x138
   1d626:	e9c4 2306 	strd	r2, r3, [r4, #24]
   1d62a:	4628      	mov	r0, r5
   1d62c:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
   1d630:	4669      	mov	r1, sp
   1d632:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d636:	f7fb fe03 	bl	19240 <mbedtls_aes_setkey_enc>
   1d63a:	b920      	cbnz	r0, 1d646 <mbedtls_ctr_drbg_seed+0x4a>
   1d63c:	4641      	mov	r1, r8
   1d63e:	4620      	mov	r0, r4
   1d640:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1d642:	f7ff feed 	bl	1d420 <mbedtls_ctr_drbg_reseed>
   1d646:	b008      	add	sp, #32
   1d648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d64c <mbedtls_ctr_drbg_random>:
   1d64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d650:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1d654:	b0f9      	sub	sp, #484	; 0x1e4
   1d656:	f200 8226 	bhi.w	1daa6 <mbedtls_ctr_drbg_random+0x45a>
   1d65a:	4604      	mov	r4, r0
   1d65c:	4615      	mov	r5, r2
   1d65e:	460f      	mov	r7, r1
   1d660:	2230      	movs	r2, #48	; 0x30
   1d662:	4668      	mov	r0, sp
   1d664:	2100      	movs	r1, #0
   1d666:	f00d f93d 	bl	2a8e4 <memset>
   1d66a:	6922      	ldr	r2, [r4, #16]
   1d66c:	69e3      	ldr	r3, [r4, #28]
   1d66e:	429a      	cmp	r2, r3
   1d670:	dc01      	bgt.n	1d676 <mbedtls_ctr_drbg_random+0x2a>
   1d672:	6963      	ldr	r3, [r4, #20]
   1d674:	b313      	cbz	r3, 1d6bc <mbedtls_ctr_drbg_random+0x70>
   1d676:	69a3      	ldr	r3, [r4, #24]
   1d678:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   1d67c:	f200 8216 	bhi.w	1daac <mbedtls_ctr_drbg_random+0x460>
   1d680:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   1d684:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1d688:	2100      	movs	r1, #0
   1d68a:	4650      	mov	r0, sl
   1d68c:	f00d f92a 	bl	2a8e4 <memset>
   1d690:	4651      	mov	r1, sl
   1d692:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1d696:	69a2      	ldr	r2, [r4, #24]
   1d698:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   1d69c:	4798      	blx	r3
   1d69e:	f06f 0933 	mvn.w	r9, #51	; 0x33
   1d6a2:	b938      	cbnz	r0, 1d6b4 <mbedtls_ctr_drbg_random+0x68>
   1d6a4:	69a2      	ldr	r2, [r4, #24]
   1d6a6:	4651      	mov	r1, sl
   1d6a8:	4650      	mov	r0, sl
   1d6aa:	f7ff fd81 	bl	1d1b0 <block_cipher_df>
   1d6ae:	4681      	mov	r9, r0
   1d6b0:	2800      	cmp	r0, #0
   1d6b2:	d077      	beq.n	1d7a4 <mbedtls_ctr_drbg_random+0x158>
   1d6b4:	4648      	mov	r0, r9
   1d6b6:	b079      	add	sp, #484	; 0x1e4
   1d6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d6bc:	f104 0820 	add.w	r8, r4, #32
   1d6c0:	2d00      	cmp	r5, #0
   1d6c2:	f000 812b 	beq.w	1d91c <mbedtls_ctr_drbg_random+0x2d0>
   1d6c6:	ae0c      	add	r6, sp, #48	; 0x30
   1d6c8:	e00e      	b.n	1d6e8 <mbedtls_ctr_drbg_random+0x9c>
   1d6ca:	2d10      	cmp	r5, #16
   1d6cc:	46a9      	mov	r9, r5
   1d6ce:	bf28      	it	cs
   1d6d0:	f04f 0910 	movcs.w	r9, #16
   1d6d4:	4638      	mov	r0, r7
   1d6d6:	4631      	mov	r1, r6
   1d6d8:	464a      	mov	r2, r9
   1d6da:	f7f0 fa7d 	bl	dbd8 <memcpy>
   1d6de:	ebb5 0509 	subs.w	r5, r5, r9
   1d6e2:	444f      	add	r7, r9
   1d6e4:	f000 811a 	beq.w	1d91c <mbedtls_ctr_drbg_random+0x2d0>
   1d6e8:	7be3      	ldrb	r3, [r4, #15]
   1d6ea:	3301      	adds	r3, #1
   1d6ec:	b2db      	uxtb	r3, r3
   1d6ee:	73e3      	strb	r3, [r4, #15]
   1d6f0:	2b00      	cmp	r3, #0
   1d6f2:	d14d      	bne.n	1d790 <mbedtls_ctr_drbg_random+0x144>
   1d6f4:	7ba3      	ldrb	r3, [r4, #14]
   1d6f6:	3301      	adds	r3, #1
   1d6f8:	b2db      	uxtb	r3, r3
   1d6fa:	73a3      	strb	r3, [r4, #14]
   1d6fc:	2b00      	cmp	r3, #0
   1d6fe:	d147      	bne.n	1d790 <mbedtls_ctr_drbg_random+0x144>
   1d700:	7b63      	ldrb	r3, [r4, #13]
   1d702:	3301      	adds	r3, #1
   1d704:	b2db      	uxtb	r3, r3
   1d706:	7363      	strb	r3, [r4, #13]
   1d708:	2b00      	cmp	r3, #0
   1d70a:	d141      	bne.n	1d790 <mbedtls_ctr_drbg_random+0x144>
   1d70c:	7b23      	ldrb	r3, [r4, #12]
   1d70e:	3301      	adds	r3, #1
   1d710:	b2db      	uxtb	r3, r3
   1d712:	7323      	strb	r3, [r4, #12]
   1d714:	2b00      	cmp	r3, #0
   1d716:	d13b      	bne.n	1d790 <mbedtls_ctr_drbg_random+0x144>
   1d718:	7ae3      	ldrb	r3, [r4, #11]
   1d71a:	3301      	adds	r3, #1
   1d71c:	b2db      	uxtb	r3, r3
   1d71e:	72e3      	strb	r3, [r4, #11]
   1d720:	2b00      	cmp	r3, #0
   1d722:	d135      	bne.n	1d790 <mbedtls_ctr_drbg_random+0x144>
   1d724:	7aa3      	ldrb	r3, [r4, #10]
   1d726:	3301      	adds	r3, #1
   1d728:	b2db      	uxtb	r3, r3
   1d72a:	72a3      	strb	r3, [r4, #10]
   1d72c:	2b00      	cmp	r3, #0
   1d72e:	d12f      	bne.n	1d790 <mbedtls_ctr_drbg_random+0x144>
   1d730:	7a63      	ldrb	r3, [r4, #9]
   1d732:	3301      	adds	r3, #1
   1d734:	b2db      	uxtb	r3, r3
   1d736:	7263      	strb	r3, [r4, #9]
   1d738:	bb53      	cbnz	r3, 1d790 <mbedtls_ctr_drbg_random+0x144>
   1d73a:	7a23      	ldrb	r3, [r4, #8]
   1d73c:	3301      	adds	r3, #1
   1d73e:	b2db      	uxtb	r3, r3
   1d740:	7223      	strb	r3, [r4, #8]
   1d742:	bb2b      	cbnz	r3, 1d790 <mbedtls_ctr_drbg_random+0x144>
   1d744:	79e3      	ldrb	r3, [r4, #7]
   1d746:	3301      	adds	r3, #1
   1d748:	b2db      	uxtb	r3, r3
   1d74a:	71e3      	strb	r3, [r4, #7]
   1d74c:	bb03      	cbnz	r3, 1d790 <mbedtls_ctr_drbg_random+0x144>
   1d74e:	79a3      	ldrb	r3, [r4, #6]
   1d750:	3301      	adds	r3, #1
   1d752:	b2db      	uxtb	r3, r3
   1d754:	71a3      	strb	r3, [r4, #6]
   1d756:	b9db      	cbnz	r3, 1d790 <mbedtls_ctr_drbg_random+0x144>
   1d758:	7963      	ldrb	r3, [r4, #5]
   1d75a:	3301      	adds	r3, #1
   1d75c:	b2db      	uxtb	r3, r3
   1d75e:	7163      	strb	r3, [r4, #5]
   1d760:	b9b3      	cbnz	r3, 1d790 <mbedtls_ctr_drbg_random+0x144>
   1d762:	7923      	ldrb	r3, [r4, #4]
   1d764:	3301      	adds	r3, #1
   1d766:	b2db      	uxtb	r3, r3
   1d768:	7123      	strb	r3, [r4, #4]
   1d76a:	b98b      	cbnz	r3, 1d790 <mbedtls_ctr_drbg_random+0x144>
   1d76c:	78e3      	ldrb	r3, [r4, #3]
   1d76e:	3301      	adds	r3, #1
   1d770:	b2db      	uxtb	r3, r3
   1d772:	70e3      	strb	r3, [r4, #3]
   1d774:	b963      	cbnz	r3, 1d790 <mbedtls_ctr_drbg_random+0x144>
   1d776:	78a3      	ldrb	r3, [r4, #2]
   1d778:	3301      	adds	r3, #1
   1d77a:	b2db      	uxtb	r3, r3
   1d77c:	70a3      	strb	r3, [r4, #2]
   1d77e:	b93b      	cbnz	r3, 1d790 <mbedtls_ctr_drbg_random+0x144>
   1d780:	7863      	ldrb	r3, [r4, #1]
   1d782:	3301      	adds	r3, #1
   1d784:	b2db      	uxtb	r3, r3
   1d786:	7063      	strb	r3, [r4, #1]
   1d788:	b913      	cbnz	r3, 1d790 <mbedtls_ctr_drbg_random+0x144>
   1d78a:	7823      	ldrb	r3, [r4, #0]
   1d78c:	3301      	adds	r3, #1
   1d78e:	7023      	strb	r3, [r4, #0]
   1d790:	4633      	mov	r3, r6
   1d792:	4622      	mov	r2, r4
   1d794:	2101      	movs	r1, #1
   1d796:	4640      	mov	r0, r8
   1d798:	f7fc fd08 	bl	1a1ac <mbedtls_aes_crypt_ecb>
   1d79c:	4681      	mov	r9, r0
   1d79e:	2800      	cmp	r0, #0
   1d7a0:	d093      	beq.n	1d6ca <mbedtls_ctr_drbg_random+0x7e>
   1d7a2:	e787      	b.n	1d6b4 <mbedtls_ctr_drbg_random+0x68>
   1d7a4:	ae0c      	add	r6, sp, #48	; 0x30
   1d7a6:	4630      	mov	r0, r6
   1d7a8:	2230      	movs	r2, #48	; 0x30
   1d7aa:	4649      	mov	r1, r9
   1d7ac:	f00d f89a 	bl	2a8e4 <memset>
   1d7b0:	46cb      	mov	fp, r9
   1d7b2:	f104 0820 	add.w	r8, r4, #32
   1d7b6:	7be2      	ldrb	r2, [r4, #15]
   1d7b8:	eb06 030b 	add.w	r3, r6, fp
   1d7bc:	3201      	adds	r2, #1
   1d7be:	b2d2      	uxtb	r2, r2
   1d7c0:	73e2      	strb	r2, [r4, #15]
   1d7c2:	2a00      	cmp	r2, #0
   1d7c4:	d14d      	bne.n	1d862 <mbedtls_ctr_drbg_random+0x216>
   1d7c6:	7ba2      	ldrb	r2, [r4, #14]
   1d7c8:	3201      	adds	r2, #1
   1d7ca:	b2d2      	uxtb	r2, r2
   1d7cc:	73a2      	strb	r2, [r4, #14]
   1d7ce:	2a00      	cmp	r2, #0
   1d7d0:	d147      	bne.n	1d862 <mbedtls_ctr_drbg_random+0x216>
   1d7d2:	7b62      	ldrb	r2, [r4, #13]
   1d7d4:	3201      	adds	r2, #1
   1d7d6:	b2d2      	uxtb	r2, r2
   1d7d8:	7362      	strb	r2, [r4, #13]
   1d7da:	2a00      	cmp	r2, #0
   1d7dc:	d141      	bne.n	1d862 <mbedtls_ctr_drbg_random+0x216>
   1d7de:	7b22      	ldrb	r2, [r4, #12]
   1d7e0:	3201      	adds	r2, #1
   1d7e2:	b2d2      	uxtb	r2, r2
   1d7e4:	7322      	strb	r2, [r4, #12]
   1d7e6:	2a00      	cmp	r2, #0
   1d7e8:	d13b      	bne.n	1d862 <mbedtls_ctr_drbg_random+0x216>
   1d7ea:	7ae2      	ldrb	r2, [r4, #11]
   1d7ec:	3201      	adds	r2, #1
   1d7ee:	b2d2      	uxtb	r2, r2
   1d7f0:	72e2      	strb	r2, [r4, #11]
   1d7f2:	2a00      	cmp	r2, #0
   1d7f4:	d135      	bne.n	1d862 <mbedtls_ctr_drbg_random+0x216>
   1d7f6:	7aa2      	ldrb	r2, [r4, #10]
   1d7f8:	3201      	adds	r2, #1
   1d7fa:	b2d2      	uxtb	r2, r2
   1d7fc:	72a2      	strb	r2, [r4, #10]
   1d7fe:	2a00      	cmp	r2, #0
   1d800:	d12f      	bne.n	1d862 <mbedtls_ctr_drbg_random+0x216>
   1d802:	7a62      	ldrb	r2, [r4, #9]
   1d804:	3201      	adds	r2, #1
   1d806:	b2d2      	uxtb	r2, r2
   1d808:	7262      	strb	r2, [r4, #9]
   1d80a:	bb52      	cbnz	r2, 1d862 <mbedtls_ctr_drbg_random+0x216>
   1d80c:	7a22      	ldrb	r2, [r4, #8]
   1d80e:	3201      	adds	r2, #1
   1d810:	b2d2      	uxtb	r2, r2
   1d812:	7222      	strb	r2, [r4, #8]
   1d814:	bb2a      	cbnz	r2, 1d862 <mbedtls_ctr_drbg_random+0x216>
   1d816:	79e2      	ldrb	r2, [r4, #7]
   1d818:	3201      	adds	r2, #1
   1d81a:	b2d2      	uxtb	r2, r2
   1d81c:	71e2      	strb	r2, [r4, #7]
   1d81e:	bb02      	cbnz	r2, 1d862 <mbedtls_ctr_drbg_random+0x216>
   1d820:	79a2      	ldrb	r2, [r4, #6]
   1d822:	3201      	adds	r2, #1
   1d824:	b2d2      	uxtb	r2, r2
   1d826:	71a2      	strb	r2, [r4, #6]
   1d828:	b9da      	cbnz	r2, 1d862 <mbedtls_ctr_drbg_random+0x216>
   1d82a:	7962      	ldrb	r2, [r4, #5]
   1d82c:	3201      	adds	r2, #1
   1d82e:	b2d2      	uxtb	r2, r2
   1d830:	7162      	strb	r2, [r4, #5]
   1d832:	b9b2      	cbnz	r2, 1d862 <mbedtls_ctr_drbg_random+0x216>
   1d834:	7922      	ldrb	r2, [r4, #4]
   1d836:	3201      	adds	r2, #1
   1d838:	b2d2      	uxtb	r2, r2
   1d83a:	7122      	strb	r2, [r4, #4]
   1d83c:	b98a      	cbnz	r2, 1d862 <mbedtls_ctr_drbg_random+0x216>
   1d83e:	78e2      	ldrb	r2, [r4, #3]
   1d840:	3201      	adds	r2, #1
   1d842:	b2d2      	uxtb	r2, r2
   1d844:	70e2      	strb	r2, [r4, #3]
   1d846:	b962      	cbnz	r2, 1d862 <mbedtls_ctr_drbg_random+0x216>
   1d848:	78a2      	ldrb	r2, [r4, #2]
   1d84a:	3201      	adds	r2, #1
   1d84c:	b2d2      	uxtb	r2, r2
   1d84e:	70a2      	strb	r2, [r4, #2]
   1d850:	b93a      	cbnz	r2, 1d862 <mbedtls_ctr_drbg_random+0x216>
   1d852:	7862      	ldrb	r2, [r4, #1]
   1d854:	3201      	adds	r2, #1
   1d856:	b2d2      	uxtb	r2, r2
   1d858:	7062      	strb	r2, [r4, #1]
   1d85a:	b912      	cbnz	r2, 1d862 <mbedtls_ctr_drbg_random+0x216>
   1d85c:	7822      	ldrb	r2, [r4, #0]
   1d85e:	3201      	adds	r2, #1
   1d860:	7022      	strb	r2, [r4, #0]
   1d862:	4622      	mov	r2, r4
   1d864:	2101      	movs	r1, #1
   1d866:	4640      	mov	r0, r8
   1d868:	f7fc fca0 	bl	1a1ac <mbedtls_aes_crypt_ecb>
   1d86c:	4681      	mov	r9, r0
   1d86e:	2800      	cmp	r0, #0
   1d870:	f47f af20 	bne.w	1d6b4 <mbedtls_ctr_drbg_random+0x68>
   1d874:	f10b 0b10 	add.w	fp, fp, #16
   1d878:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1d87c:	d19b      	bne.n	1d7b6 <mbedtls_ctr_drbg_random+0x16a>
   1d87e:	6870      	ldr	r0, [r6, #4]
   1d880:	f8da 3000 	ldr.w	r3, [sl]
   1d884:	6831      	ldr	r1, [r6, #0]
   1d886:	f8da 2004 	ldr.w	r2, [sl, #4]
   1d88a:	4059      	eors	r1, r3
   1d88c:	4042      	eors	r2, r0
   1d88e:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d892:	68b0      	ldr	r0, [r6, #8]
   1d894:	6031      	str	r1, [r6, #0]
   1d896:	ea83 0100 	eor.w	r1, r3, r0
   1d89a:	f8da 300c 	ldr.w	r3, [sl, #12]
   1d89e:	68f0      	ldr	r0, [r6, #12]
   1d8a0:	6072      	str	r2, [r6, #4]
   1d8a2:	4058      	eors	r0, r3
   1d8a4:	6932      	ldr	r2, [r6, #16]
   1d8a6:	f8da 3010 	ldr.w	r3, [sl, #16]
   1d8aa:	60b1      	str	r1, [r6, #8]
   1d8ac:	4053      	eors	r3, r2
   1d8ae:	f8da 1014 	ldr.w	r1, [sl, #20]
   1d8b2:	6972      	ldr	r2, [r6, #20]
   1d8b4:	60f0      	str	r0, [r6, #12]
   1d8b6:	404a      	eors	r2, r1
   1d8b8:	69b0      	ldr	r0, [r6, #24]
   1d8ba:	f8da 1018 	ldr.w	r1, [sl, #24]
   1d8be:	6133      	str	r3, [r6, #16]
   1d8c0:	4048      	eors	r0, r1
   1d8c2:	f8da 301c 	ldr.w	r3, [sl, #28]
   1d8c6:	69f1      	ldr	r1, [r6, #28]
   1d8c8:	6172      	str	r2, [r6, #20]
   1d8ca:	404b      	eors	r3, r1
   1d8cc:	6a32      	ldr	r2, [r6, #32]
   1d8ce:	f8da 1020 	ldr.w	r1, [sl, #32]
   1d8d2:	61b0      	str	r0, [r6, #24]
   1d8d4:	4051      	eors	r1, r2
   1d8d6:	6a70      	ldr	r0, [r6, #36]	; 0x24
   1d8d8:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
   1d8dc:	61f3      	str	r3, [r6, #28]
   1d8de:	4050      	eors	r0, r2
   1d8e0:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   1d8e4:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   1d8e6:	6231      	str	r1, [r6, #32]
   1d8e8:	4053      	eors	r3, r2
   1d8ea:	e9c6 0309 	strd	r0, r3, [r6, #36]	; 0x24
   1d8ee:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   1d8f0:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
   1d8f4:	4631      	mov	r1, r6
   1d8f6:	4053      	eors	r3, r2
   1d8f8:	4640      	mov	r0, r8
   1d8fa:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d8fe:	62f3      	str	r3, [r6, #44]	; 0x2c
   1d900:	f7fb fc9e 	bl	19240 <mbedtls_aes_setkey_enc>
   1d904:	4681      	mov	r9, r0
   1d906:	2800      	cmp	r0, #0
   1d908:	f47f aed4 	bne.w	1d6b4 <mbedtls_ctr_drbg_random+0x68>
   1d90c:	2210      	movs	r2, #16
   1d90e:	a914      	add	r1, sp, #80	; 0x50
   1d910:	4620      	mov	r0, r4
   1d912:	f7f0 f961 	bl	dbd8 <memcpy>
   1d916:	2301      	movs	r3, #1
   1d918:	6123      	str	r3, [r4, #16]
   1d91a:	e6d1      	b.n	1d6c0 <mbedtls_ctr_drbg_random+0x74>
   1d91c:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   1d920:	4650      	mov	r0, sl
   1d922:	2230      	movs	r2, #48	; 0x30
   1d924:	2100      	movs	r1, #0
   1d926:	f00c ffdd 	bl	2a8e4 <memset>
   1d92a:	2500      	movs	r5, #0
   1d92c:	7be2      	ldrb	r2, [r4, #15]
   1d92e:	eb0a 0305 	add.w	r3, sl, r5
   1d932:	3201      	adds	r2, #1
   1d934:	b2d2      	uxtb	r2, r2
   1d936:	73e2      	strb	r2, [r4, #15]
   1d938:	2a00      	cmp	r2, #0
   1d93a:	d14d      	bne.n	1d9d8 <mbedtls_ctr_drbg_random+0x38c>
   1d93c:	7ba2      	ldrb	r2, [r4, #14]
   1d93e:	3201      	adds	r2, #1
   1d940:	b2d2      	uxtb	r2, r2
   1d942:	73a2      	strb	r2, [r4, #14]
   1d944:	2a00      	cmp	r2, #0
   1d946:	d147      	bne.n	1d9d8 <mbedtls_ctr_drbg_random+0x38c>
   1d948:	7b62      	ldrb	r2, [r4, #13]
   1d94a:	3201      	adds	r2, #1
   1d94c:	b2d2      	uxtb	r2, r2
   1d94e:	7362      	strb	r2, [r4, #13]
   1d950:	2a00      	cmp	r2, #0
   1d952:	d141      	bne.n	1d9d8 <mbedtls_ctr_drbg_random+0x38c>
   1d954:	7b22      	ldrb	r2, [r4, #12]
   1d956:	3201      	adds	r2, #1
   1d958:	b2d2      	uxtb	r2, r2
   1d95a:	7322      	strb	r2, [r4, #12]
   1d95c:	2a00      	cmp	r2, #0
   1d95e:	d13b      	bne.n	1d9d8 <mbedtls_ctr_drbg_random+0x38c>
   1d960:	7ae2      	ldrb	r2, [r4, #11]
   1d962:	3201      	adds	r2, #1
   1d964:	b2d2      	uxtb	r2, r2
   1d966:	72e2      	strb	r2, [r4, #11]
   1d968:	2a00      	cmp	r2, #0
   1d96a:	d135      	bne.n	1d9d8 <mbedtls_ctr_drbg_random+0x38c>
   1d96c:	7aa2      	ldrb	r2, [r4, #10]
   1d96e:	3201      	adds	r2, #1
   1d970:	b2d2      	uxtb	r2, r2
   1d972:	72a2      	strb	r2, [r4, #10]
   1d974:	2a00      	cmp	r2, #0
   1d976:	d12f      	bne.n	1d9d8 <mbedtls_ctr_drbg_random+0x38c>
   1d978:	7a62      	ldrb	r2, [r4, #9]
   1d97a:	3201      	adds	r2, #1
   1d97c:	b2d2      	uxtb	r2, r2
   1d97e:	7262      	strb	r2, [r4, #9]
   1d980:	bb52      	cbnz	r2, 1d9d8 <mbedtls_ctr_drbg_random+0x38c>
   1d982:	7a22      	ldrb	r2, [r4, #8]
   1d984:	3201      	adds	r2, #1
   1d986:	b2d2      	uxtb	r2, r2
   1d988:	7222      	strb	r2, [r4, #8]
   1d98a:	bb2a      	cbnz	r2, 1d9d8 <mbedtls_ctr_drbg_random+0x38c>
   1d98c:	79e2      	ldrb	r2, [r4, #7]
   1d98e:	3201      	adds	r2, #1
   1d990:	b2d2      	uxtb	r2, r2
   1d992:	71e2      	strb	r2, [r4, #7]
   1d994:	bb02      	cbnz	r2, 1d9d8 <mbedtls_ctr_drbg_random+0x38c>
   1d996:	79a2      	ldrb	r2, [r4, #6]
   1d998:	3201      	adds	r2, #1
   1d99a:	b2d2      	uxtb	r2, r2
   1d99c:	71a2      	strb	r2, [r4, #6]
   1d99e:	b9da      	cbnz	r2, 1d9d8 <mbedtls_ctr_drbg_random+0x38c>
   1d9a0:	7962      	ldrb	r2, [r4, #5]
   1d9a2:	3201      	adds	r2, #1
   1d9a4:	b2d2      	uxtb	r2, r2
   1d9a6:	7162      	strb	r2, [r4, #5]
   1d9a8:	b9b2      	cbnz	r2, 1d9d8 <mbedtls_ctr_drbg_random+0x38c>
   1d9aa:	7922      	ldrb	r2, [r4, #4]
   1d9ac:	3201      	adds	r2, #1
   1d9ae:	b2d2      	uxtb	r2, r2
   1d9b0:	7122      	strb	r2, [r4, #4]
   1d9b2:	b98a      	cbnz	r2, 1d9d8 <mbedtls_ctr_drbg_random+0x38c>
   1d9b4:	78e2      	ldrb	r2, [r4, #3]
   1d9b6:	3201      	adds	r2, #1
   1d9b8:	b2d2      	uxtb	r2, r2
   1d9ba:	70e2      	strb	r2, [r4, #3]
   1d9bc:	b962      	cbnz	r2, 1d9d8 <mbedtls_ctr_drbg_random+0x38c>
   1d9be:	78a2      	ldrb	r2, [r4, #2]
   1d9c0:	3201      	adds	r2, #1
   1d9c2:	b2d2      	uxtb	r2, r2
   1d9c4:	70a2      	strb	r2, [r4, #2]
   1d9c6:	b93a      	cbnz	r2, 1d9d8 <mbedtls_ctr_drbg_random+0x38c>
   1d9c8:	7862      	ldrb	r2, [r4, #1]
   1d9ca:	3201      	adds	r2, #1
   1d9cc:	b2d2      	uxtb	r2, r2
   1d9ce:	7062      	strb	r2, [r4, #1]
   1d9d0:	b912      	cbnz	r2, 1d9d8 <mbedtls_ctr_drbg_random+0x38c>
   1d9d2:	7822      	ldrb	r2, [r4, #0]
   1d9d4:	3201      	adds	r2, #1
   1d9d6:	7022      	strb	r2, [r4, #0]
   1d9d8:	4622      	mov	r2, r4
   1d9da:	2101      	movs	r1, #1
   1d9dc:	4640      	mov	r0, r8
   1d9de:	f7fc fbe5 	bl	1a1ac <mbedtls_aes_crypt_ecb>
   1d9e2:	4681      	mov	r9, r0
   1d9e4:	2800      	cmp	r0, #0
   1d9e6:	f47f ae65 	bne.w	1d6b4 <mbedtls_ctr_drbg_random+0x68>
   1d9ea:	3510      	adds	r5, #16
   1d9ec:	2d30      	cmp	r5, #48	; 0x30
   1d9ee:	d19d      	bne.n	1d92c <mbedtls_ctr_drbg_random+0x2e0>
   1d9f0:	e9da 1200 	ldrd	r1, r2, [sl]
   1d9f4:	9b00      	ldr	r3, [sp, #0]
   1d9f6:	9801      	ldr	r0, [sp, #4]
   1d9f8:	4059      	eors	r1, r3
   1d9fa:	4042      	eors	r2, r0
   1d9fc:	f8da 3008 	ldr.w	r3, [sl, #8]
   1da00:	9802      	ldr	r0, [sp, #8]
   1da02:	f8ca 1000 	str.w	r1, [sl]
   1da06:	ea83 0100 	eor.w	r1, r3, r0
   1da0a:	f8da 300c 	ldr.w	r3, [sl, #12]
   1da0e:	9803      	ldr	r0, [sp, #12]
   1da10:	f8ca 2004 	str.w	r2, [sl, #4]
   1da14:	4058      	eors	r0, r3
   1da16:	9a04      	ldr	r2, [sp, #16]
   1da18:	f8da 3010 	ldr.w	r3, [sl, #16]
   1da1c:	f8ca 1008 	str.w	r1, [sl, #8]
   1da20:	4053      	eors	r3, r2
   1da22:	9905      	ldr	r1, [sp, #20]
   1da24:	f8da 2014 	ldr.w	r2, [sl, #20]
   1da28:	f8ca 000c 	str.w	r0, [sl, #12]
   1da2c:	404a      	eors	r2, r1
   1da2e:	9806      	ldr	r0, [sp, #24]
   1da30:	f8da 1018 	ldr.w	r1, [sl, #24]
   1da34:	f8ca 3010 	str.w	r3, [sl, #16]
   1da38:	4048      	eors	r0, r1
   1da3a:	9b07      	ldr	r3, [sp, #28]
   1da3c:	f8da 101c 	ldr.w	r1, [sl, #28]
   1da40:	f8ca 2014 	str.w	r2, [sl, #20]
   1da44:	404b      	eors	r3, r1
   1da46:	f8da 2020 	ldr.w	r2, [sl, #32]
   1da4a:	9908      	ldr	r1, [sp, #32]
   1da4c:	f8ca 0018 	str.w	r0, [sl, #24]
   1da50:	4051      	eors	r1, r2
   1da52:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
   1da56:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1da58:	f8ca 301c 	str.w	r3, [sl, #28]
   1da5c:	4050      	eors	r0, r2
   1da5e:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   1da62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1da64:	f8ca 1020 	str.w	r1, [sl, #32]
   1da68:	4053      	eors	r3, r2
   1da6a:	e9ca 0309 	strd	r0, r3, [sl, #36]	; 0x24
   1da6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1da70:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
   1da74:	4640      	mov	r0, r8
   1da76:	4053      	eors	r3, r2
   1da78:	4651      	mov	r1, sl
   1da7a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1da7e:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
   1da82:	f7fb fbdd 	bl	19240 <mbedtls_aes_setkey_enc>
   1da86:	4681      	mov	r9, r0
   1da88:	2800      	cmp	r0, #0
   1da8a:	f47f ae13 	bne.w	1d6b4 <mbedtls_ctr_drbg_random+0x68>
   1da8e:	2210      	movs	r2, #16
   1da90:	a920      	add	r1, sp, #128	; 0x80
   1da92:	4620      	mov	r0, r4
   1da94:	f7f0 f8a0 	bl	dbd8 <memcpy>
   1da98:	4648      	mov	r0, r9
   1da9a:	6923      	ldr	r3, [r4, #16]
   1da9c:	3301      	adds	r3, #1
   1da9e:	6123      	str	r3, [r4, #16]
   1daa0:	b079      	add	sp, #484	; 0x1e4
   1daa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1daa6:	f06f 0935 	mvn.w	r9, #53	; 0x35
   1daaa:	e603      	b.n	1d6b4 <mbedtls_ctr_drbg_random+0x68>
   1daac:	f06f 0937 	mvn.w	r9, #55	; 0x37
   1dab0:	e600      	b.n	1d6b4 <mbedtls_ctr_drbg_random+0x68>
   1dab2:	bf00      	nop

0001dab4 <ecp_modp>:
   1dab4:	b570      	push	{r4, r5, r6, lr}
   1dab6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1dab8:	4604      	mov	r4, r0
   1daba:	2b00      	cmp	r3, #0
   1dabc:	d03d      	beq.n	1db3a <ecp_modp+0x86>
   1dabe:	6803      	ldr	r3, [r0, #0]
   1dac0:	460d      	mov	r5, r1
   1dac2:	2b00      	cmp	r3, #0
   1dac4:	db2f      	blt.n	1db26 <ecp_modp+0x72>
   1dac6:	4620      	mov	r0, r4
   1dac8:	f7fd fb5a 	bl	1b180 <mbedtls_mpi_bitlen>
   1dacc:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1dace:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   1dad2:	d82d      	bhi.n	1db30 <ecp_modp+0x7c>
   1dad4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1dad6:	4620      	mov	r0, r4
   1dad8:	4798      	blx	r3
   1dada:	4606      	mov	r6, r0
   1dadc:	bb08      	cbnz	r0, 1db22 <ecp_modp+0x6e>
   1dade:	3504      	adds	r5, #4
   1dae0:	e00a      	b.n	1daf8 <ecp_modp+0x44>
   1dae2:	2100      	movs	r1, #0
   1dae4:	4620      	mov	r0, r4
   1dae6:	f7fd fe1b 	bl	1b720 <mbedtls_mpi_cmp_int>
   1daea:	b1a0      	cbz	r0, 1db16 <ecp_modp+0x62>
   1daec:	462a      	mov	r2, r5
   1daee:	4621      	mov	r1, r4
   1daf0:	4620      	mov	r0, r4
   1daf2:	f7fd ffcd 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1daf6:	b9e8      	cbnz	r0, 1db34 <ecp_modp+0x80>
   1daf8:	6823      	ldr	r3, [r4, #0]
   1dafa:	2b00      	cmp	r3, #0
   1dafc:	dbf1      	blt.n	1dae2 <ecp_modp+0x2e>
   1dafe:	4629      	mov	r1, r5
   1db00:	4620      	mov	r0, r4
   1db02:	f7fd fda5 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1db06:	2800      	cmp	r0, #0
   1db08:	db0b      	blt.n	1db22 <ecp_modp+0x6e>
   1db0a:	462a      	mov	r2, r5
   1db0c:	4621      	mov	r1, r4
   1db0e:	4620      	mov	r0, r4
   1db10:	f7fd fefe 	bl	1b910 <mbedtls_mpi_sub_abs>
   1db14:	b970      	cbnz	r0, 1db34 <ecp_modp+0x80>
   1db16:	4629      	mov	r1, r5
   1db18:	4620      	mov	r0, r4
   1db1a:	f7fd fd99 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1db1e:	2800      	cmp	r0, #0
   1db20:	daf3      	bge.n	1db0a <ecp_modp+0x56>
   1db22:	4630      	mov	r0, r6
   1db24:	bd70      	pop	{r4, r5, r6, pc}
   1db26:	2100      	movs	r1, #0
   1db28:	f7fd fdfa 	bl	1b720 <mbedtls_mpi_cmp_int>
   1db2c:	2800      	cmp	r0, #0
   1db2e:	d0ca      	beq.n	1dac6 <ecp_modp+0x12>
   1db30:	4e05      	ldr	r6, [pc, #20]	; (1db48 <ecp_modp+0x94>)
   1db32:	e7f6      	b.n	1db22 <ecp_modp+0x6e>
   1db34:	4606      	mov	r6, r0
   1db36:	4630      	mov	r0, r6
   1db38:	bd70      	pop	{r4, r5, r6, pc}
   1db3a:	1d0a      	adds	r2, r1, #4
   1db3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1db40:	4601      	mov	r1, r0
   1db42:	f7fe bda1 	b.w	1c688 <mbedtls_mpi_mod_mpi>
   1db46:	bf00      	nop
   1db48:	ffffb080 	.word	0xffffb080

0001db4c <ecp_double_jac>:
   1db4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1db50:	4606      	mov	r6, r0
   1db52:	b08d      	sub	sp, #52	; 0x34
   1db54:	4668      	mov	r0, sp
   1db56:	4688      	mov	r8, r1
   1db58:	4615      	mov	r5, r2
   1db5a:	f7fd f8b7 	bl	1accc <mbedtls_mpi_init>
   1db5e:	a803      	add	r0, sp, #12
   1db60:	f7fd f8b4 	bl	1accc <mbedtls_mpi_init>
   1db64:	a806      	add	r0, sp, #24
   1db66:	f7fd f8b1 	bl	1accc <mbedtls_mpi_init>
   1db6a:	a809      	add	r0, sp, #36	; 0x24
   1db6c:	f7fd f8ae 	bl	1accc <mbedtls_mpi_init>
   1db70:	69b3      	ldr	r3, [r6, #24]
   1db72:	2b00      	cmp	r3, #0
   1db74:	f000 80b2 	beq.w	1dcdc <ecp_double_jac+0x190>
   1db78:	462a      	mov	r2, r5
   1db7a:	4629      	mov	r1, r5
   1db7c:	a803      	add	r0, sp, #12
   1db7e:	f7fe f8bb 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1db82:	4604      	mov	r4, r0
   1db84:	b178      	cbz	r0, 1dba6 <ecp_double_jac+0x5a>
   1db86:	4668      	mov	r0, sp
   1db88:	f7fd f8a8 	bl	1acdc <mbedtls_mpi_free>
   1db8c:	a803      	add	r0, sp, #12
   1db8e:	f7fd f8a5 	bl	1acdc <mbedtls_mpi_free>
   1db92:	a806      	add	r0, sp, #24
   1db94:	f7fd f8a2 	bl	1acdc <mbedtls_mpi_free>
   1db98:	a809      	add	r0, sp, #36	; 0x24
   1db9a:	f7fd f89f 	bl	1acdc <mbedtls_mpi_free>
   1db9e:	4620      	mov	r0, r4
   1dba0:	b00d      	add	sp, #52	; 0x34
   1dba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1dba6:	4631      	mov	r1, r6
   1dba8:	a803      	add	r0, sp, #12
   1dbaa:	f7ff ff83 	bl	1dab4 <ecp_modp>
   1dbae:	4604      	mov	r4, r0
   1dbb0:	2800      	cmp	r0, #0
   1dbb2:	d1e8      	bne.n	1db86 <ecp_double_jac+0x3a>
   1dbb4:	2203      	movs	r2, #3
   1dbb6:	a903      	add	r1, sp, #12
   1dbb8:	4668      	mov	r0, sp
   1dbba:	f7fe f995 	bl	1bee8 <mbedtls_mpi_mul_int>
   1dbbe:	4604      	mov	r4, r0
   1dbc0:	2800      	cmp	r0, #0
   1dbc2:	d1e0      	bne.n	1db86 <ecp_double_jac+0x3a>
   1dbc4:	1d37      	adds	r7, r6, #4
   1dbc6:	e007      	b.n	1dbd8 <ecp_double_jac+0x8c>
   1dbc8:	463a      	mov	r2, r7
   1dbca:	4669      	mov	r1, sp
   1dbcc:	4668      	mov	r0, sp
   1dbce:	f7fd fe9f 	bl	1b910 <mbedtls_mpi_sub_abs>
   1dbd2:	4604      	mov	r4, r0
   1dbd4:	2800      	cmp	r0, #0
   1dbd6:	d1d6      	bne.n	1db86 <ecp_double_jac+0x3a>
   1dbd8:	4639      	mov	r1, r7
   1dbda:	4668      	mov	r0, sp
   1dbdc:	f7fd fd38 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1dbe0:	2800      	cmp	r0, #0
   1dbe2:	daf1      	bge.n	1dbc8 <ecp_double_jac+0x7c>
   1dbe4:	f106 0910 	add.w	r9, r6, #16
   1dbe8:	4648      	mov	r0, r9
   1dbea:	2100      	movs	r1, #0
   1dbec:	f7fd fd98 	bl	1b720 <mbedtls_mpi_cmp_int>
   1dbf0:	2800      	cmp	r0, #0
   1dbf2:	f040 80e2 	bne.w	1ddba <ecp_double_jac+0x26e>
   1dbf6:	f105 090c 	add.w	r9, r5, #12
   1dbfa:	464a      	mov	r2, r9
   1dbfc:	4649      	mov	r1, r9
   1dbfe:	a806      	add	r0, sp, #24
   1dc00:	f7fe f87a 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1dc04:	4604      	mov	r4, r0
   1dc06:	2800      	cmp	r0, #0
   1dc08:	d1bd      	bne.n	1db86 <ecp_double_jac+0x3a>
   1dc0a:	4631      	mov	r1, r6
   1dc0c:	a806      	add	r0, sp, #24
   1dc0e:	f7ff ff51 	bl	1dab4 <ecp_modp>
   1dc12:	4604      	mov	r4, r0
   1dc14:	2800      	cmp	r0, #0
   1dc16:	d1b6      	bne.n	1db86 <ecp_double_jac+0x3a>
   1dc18:	2101      	movs	r1, #1
   1dc1a:	a806      	add	r0, sp, #24
   1dc1c:	f7fd fbf2 	bl	1b404 <mbedtls_mpi_shift_l>
   1dc20:	4604      	mov	r4, r0
   1dc22:	b140      	cbz	r0, 1dc36 <ecp_double_jac+0xea>
   1dc24:	e7af      	b.n	1db86 <ecp_double_jac+0x3a>
   1dc26:	a906      	add	r1, sp, #24
   1dc28:	463a      	mov	r2, r7
   1dc2a:	4608      	mov	r0, r1
   1dc2c:	f7fd fe70 	bl	1b910 <mbedtls_mpi_sub_abs>
   1dc30:	4604      	mov	r4, r0
   1dc32:	2800      	cmp	r0, #0
   1dc34:	d1a7      	bne.n	1db86 <ecp_double_jac+0x3a>
   1dc36:	4639      	mov	r1, r7
   1dc38:	a806      	add	r0, sp, #24
   1dc3a:	f7fd fd09 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1dc3e:	2800      	cmp	r0, #0
   1dc40:	daf1      	bge.n	1dc26 <ecp_double_jac+0xda>
   1dc42:	aa06      	add	r2, sp, #24
   1dc44:	4629      	mov	r1, r5
   1dc46:	a803      	add	r0, sp, #12
   1dc48:	f7fe f856 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1dc4c:	4604      	mov	r4, r0
   1dc4e:	2800      	cmp	r0, #0
   1dc50:	d199      	bne.n	1db86 <ecp_double_jac+0x3a>
   1dc52:	4631      	mov	r1, r6
   1dc54:	a803      	add	r0, sp, #12
   1dc56:	f7ff ff2d 	bl	1dab4 <ecp_modp>
   1dc5a:	4604      	mov	r4, r0
   1dc5c:	2800      	cmp	r0, #0
   1dc5e:	d192      	bne.n	1db86 <ecp_double_jac+0x3a>
   1dc60:	2101      	movs	r1, #1
   1dc62:	a803      	add	r0, sp, #12
   1dc64:	f7fd fbce 	bl	1b404 <mbedtls_mpi_shift_l>
   1dc68:	4604      	mov	r4, r0
   1dc6a:	b140      	cbz	r0, 1dc7e <ecp_double_jac+0x132>
   1dc6c:	e78b      	b.n	1db86 <ecp_double_jac+0x3a>
   1dc6e:	a903      	add	r1, sp, #12
   1dc70:	463a      	mov	r2, r7
   1dc72:	4608      	mov	r0, r1
   1dc74:	f7fd fe4c 	bl	1b910 <mbedtls_mpi_sub_abs>
   1dc78:	4604      	mov	r4, r0
   1dc7a:	2800      	cmp	r0, #0
   1dc7c:	d183      	bne.n	1db86 <ecp_double_jac+0x3a>
   1dc7e:	4639      	mov	r1, r7
   1dc80:	a803      	add	r0, sp, #12
   1dc82:	f7fd fce5 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1dc86:	2800      	cmp	r0, #0
   1dc88:	daf1      	bge.n	1dc6e <ecp_double_jac+0x122>
   1dc8a:	aa06      	add	r2, sp, #24
   1dc8c:	4611      	mov	r1, r2
   1dc8e:	a809      	add	r0, sp, #36	; 0x24
   1dc90:	f7fe f832 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1dc94:	4604      	mov	r4, r0
   1dc96:	2800      	cmp	r0, #0
   1dc98:	f47f af75 	bne.w	1db86 <ecp_double_jac+0x3a>
   1dc9c:	4631      	mov	r1, r6
   1dc9e:	a809      	add	r0, sp, #36	; 0x24
   1dca0:	f7ff ff08 	bl	1dab4 <ecp_modp>
   1dca4:	4604      	mov	r4, r0
   1dca6:	2800      	cmp	r0, #0
   1dca8:	f47f af6d 	bne.w	1db86 <ecp_double_jac+0x3a>
   1dcac:	2101      	movs	r1, #1
   1dcae:	a809      	add	r0, sp, #36	; 0x24
   1dcb0:	f7fd fba8 	bl	1b404 <mbedtls_mpi_shift_l>
   1dcb4:	4604      	mov	r4, r0
   1dcb6:	2800      	cmp	r0, #0
   1dcb8:	f47f af65 	bne.w	1db86 <ecp_double_jac+0x3a>
   1dcbc:	4639      	mov	r1, r7
   1dcbe:	a809      	add	r0, sp, #36	; 0x24
   1dcc0:	f7fd fcc6 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1dcc4:	2800      	cmp	r0, #0
   1dcc6:	f2c0 80c5 	blt.w	1de54 <ecp_double_jac+0x308>
   1dcca:	a909      	add	r1, sp, #36	; 0x24
   1dccc:	463a      	mov	r2, r7
   1dcce:	4608      	mov	r0, r1
   1dcd0:	f7fd fe1e 	bl	1b910 <mbedtls_mpi_sub_abs>
   1dcd4:	4604      	mov	r4, r0
   1dcd6:	2800      	cmp	r0, #0
   1dcd8:	d0f0      	beq.n	1dcbc <ecp_double_jac+0x170>
   1dcda:	e754      	b.n	1db86 <ecp_double_jac+0x3a>
   1dcdc:	f105 0218 	add.w	r2, r5, #24
   1dce0:	4611      	mov	r1, r2
   1dce2:	a803      	add	r0, sp, #12
   1dce4:	f7fe f808 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1dce8:	4604      	mov	r4, r0
   1dcea:	2800      	cmp	r0, #0
   1dcec:	f47f af4b 	bne.w	1db86 <ecp_double_jac+0x3a>
   1dcf0:	4631      	mov	r1, r6
   1dcf2:	a803      	add	r0, sp, #12
   1dcf4:	f7ff fede 	bl	1dab4 <ecp_modp>
   1dcf8:	4604      	mov	r4, r0
   1dcfa:	2800      	cmp	r0, #0
   1dcfc:	f47f af43 	bne.w	1db86 <ecp_double_jac+0x3a>
   1dd00:	aa03      	add	r2, sp, #12
   1dd02:	4629      	mov	r1, r5
   1dd04:	a806      	add	r0, sp, #24
   1dd06:	f7fd fec3 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1dd0a:	4604      	mov	r4, r0
   1dd0c:	2800      	cmp	r0, #0
   1dd0e:	f47f af3a 	bne.w	1db86 <ecp_double_jac+0x3a>
   1dd12:	1d37      	adds	r7, r6, #4
   1dd14:	e008      	b.n	1dd28 <ecp_double_jac+0x1dc>
   1dd16:	a906      	add	r1, sp, #24
   1dd18:	463a      	mov	r2, r7
   1dd1a:	4608      	mov	r0, r1
   1dd1c:	f7fd fdf8 	bl	1b910 <mbedtls_mpi_sub_abs>
   1dd20:	4604      	mov	r4, r0
   1dd22:	2800      	cmp	r0, #0
   1dd24:	f47f af2f 	bne.w	1db86 <ecp_double_jac+0x3a>
   1dd28:	4639      	mov	r1, r7
   1dd2a:	a806      	add	r0, sp, #24
   1dd2c:	f7fd fc90 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1dd30:	2800      	cmp	r0, #0
   1dd32:	daf0      	bge.n	1dd16 <ecp_double_jac+0x1ca>
   1dd34:	aa03      	add	r2, sp, #12
   1dd36:	4629      	mov	r1, r5
   1dd38:	a809      	add	r0, sp, #36	; 0x24
   1dd3a:	f7fd ff1d 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1dd3e:	4604      	mov	r4, r0
   1dd40:	b170      	cbz	r0, 1dd60 <ecp_double_jac+0x214>
   1dd42:	e720      	b.n	1db86 <ecp_double_jac+0x3a>
   1dd44:	2100      	movs	r1, #0
   1dd46:	a809      	add	r0, sp, #36	; 0x24
   1dd48:	f7fd fcea 	bl	1b720 <mbedtls_mpi_cmp_int>
   1dd4c:	b158      	cbz	r0, 1dd66 <ecp_double_jac+0x21a>
   1dd4e:	a909      	add	r1, sp, #36	; 0x24
   1dd50:	463a      	mov	r2, r7
   1dd52:	4608      	mov	r0, r1
   1dd54:	f7fd fe9c 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1dd58:	4604      	mov	r4, r0
   1dd5a:	2800      	cmp	r0, #0
   1dd5c:	f47f af13 	bne.w	1db86 <ecp_double_jac+0x3a>
   1dd60:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1dd62:	2b00      	cmp	r3, #0
   1dd64:	dbee      	blt.n	1dd44 <ecp_double_jac+0x1f8>
   1dd66:	aa09      	add	r2, sp, #36	; 0x24
   1dd68:	a906      	add	r1, sp, #24
   1dd6a:	a803      	add	r0, sp, #12
   1dd6c:	f7fd ffc4 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1dd70:	4604      	mov	r4, r0
   1dd72:	2800      	cmp	r0, #0
   1dd74:	f47f af07 	bne.w	1db86 <ecp_double_jac+0x3a>
   1dd78:	4631      	mov	r1, r6
   1dd7a:	a803      	add	r0, sp, #12
   1dd7c:	f7ff fe9a 	bl	1dab4 <ecp_modp>
   1dd80:	4604      	mov	r4, r0
   1dd82:	2800      	cmp	r0, #0
   1dd84:	f47f aeff 	bne.w	1db86 <ecp_double_jac+0x3a>
   1dd88:	2203      	movs	r2, #3
   1dd8a:	a903      	add	r1, sp, #12
   1dd8c:	4668      	mov	r0, sp
   1dd8e:	f7fe f8ab 	bl	1bee8 <mbedtls_mpi_mul_int>
   1dd92:	4604      	mov	r4, r0
   1dd94:	2800      	cmp	r0, #0
   1dd96:	f47f aef6 	bne.w	1db86 <ecp_double_jac+0x3a>
   1dd9a:	4639      	mov	r1, r7
   1dd9c:	4668      	mov	r0, sp
   1dd9e:	f7fd fc57 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1dda2:	2800      	cmp	r0, #0
   1dda4:	f6ff af27 	blt.w	1dbf6 <ecp_double_jac+0xaa>
   1dda8:	463a      	mov	r2, r7
   1ddaa:	4669      	mov	r1, sp
   1ddac:	4668      	mov	r0, sp
   1ddae:	f7fd fdaf 	bl	1b910 <mbedtls_mpi_sub_abs>
   1ddb2:	4604      	mov	r4, r0
   1ddb4:	2800      	cmp	r0, #0
   1ddb6:	d0f0      	beq.n	1dd9a <ecp_double_jac+0x24e>
   1ddb8:	e6e5      	b.n	1db86 <ecp_double_jac+0x3a>
   1ddba:	f105 0218 	add.w	r2, r5, #24
   1ddbe:	4611      	mov	r1, r2
   1ddc0:	a803      	add	r0, sp, #12
   1ddc2:	f7fd ff99 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1ddc6:	4604      	mov	r4, r0
   1ddc8:	2800      	cmp	r0, #0
   1ddca:	f47f aedc 	bne.w	1db86 <ecp_double_jac+0x3a>
   1ddce:	4631      	mov	r1, r6
   1ddd0:	a803      	add	r0, sp, #12
   1ddd2:	f7ff fe6f 	bl	1dab4 <ecp_modp>
   1ddd6:	4604      	mov	r4, r0
   1ddd8:	2800      	cmp	r0, #0
   1ddda:	f47f aed4 	bne.w	1db86 <ecp_double_jac+0x3a>
   1ddde:	aa03      	add	r2, sp, #12
   1dde0:	4611      	mov	r1, r2
   1dde2:	a806      	add	r0, sp, #24
   1dde4:	f7fd ff88 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1dde8:	4604      	mov	r4, r0
   1ddea:	2800      	cmp	r0, #0
   1ddec:	f47f aecb 	bne.w	1db86 <ecp_double_jac+0x3a>
   1ddf0:	4631      	mov	r1, r6
   1ddf2:	a806      	add	r0, sp, #24
   1ddf4:	f7ff fe5e 	bl	1dab4 <ecp_modp>
   1ddf8:	4604      	mov	r4, r0
   1ddfa:	2800      	cmp	r0, #0
   1ddfc:	f47f aec3 	bne.w	1db86 <ecp_double_jac+0x3a>
   1de00:	464a      	mov	r2, r9
   1de02:	a906      	add	r1, sp, #24
   1de04:	a803      	add	r0, sp, #12
   1de06:	f7fd ff77 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1de0a:	4604      	mov	r4, r0
   1de0c:	2800      	cmp	r0, #0
   1de0e:	f47f aeba 	bne.w	1db86 <ecp_double_jac+0x3a>
   1de12:	4631      	mov	r1, r6
   1de14:	a803      	add	r0, sp, #12
   1de16:	f7ff fe4d 	bl	1dab4 <ecp_modp>
   1de1a:	4604      	mov	r4, r0
   1de1c:	2800      	cmp	r0, #0
   1de1e:	f47f aeb2 	bne.w	1db86 <ecp_double_jac+0x3a>
   1de22:	aa03      	add	r2, sp, #12
   1de24:	4669      	mov	r1, sp
   1de26:	4668      	mov	r0, sp
   1de28:	f7fd fe32 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1de2c:	4604      	mov	r4, r0
   1de2e:	2800      	cmp	r0, #0
   1de30:	f47f aea9 	bne.w	1db86 <ecp_double_jac+0x3a>
   1de34:	4639      	mov	r1, r7
   1de36:	4668      	mov	r0, sp
   1de38:	f7fd fc0a 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1de3c:	2800      	cmp	r0, #0
   1de3e:	f6ff aeda 	blt.w	1dbf6 <ecp_double_jac+0xaa>
   1de42:	463a      	mov	r2, r7
   1de44:	4669      	mov	r1, sp
   1de46:	4668      	mov	r0, sp
   1de48:	f7fd fd62 	bl	1b910 <mbedtls_mpi_sub_abs>
   1de4c:	4604      	mov	r4, r0
   1de4e:	2800      	cmp	r0, #0
   1de50:	d0f0      	beq.n	1de34 <ecp_double_jac+0x2e8>
   1de52:	e698      	b.n	1db86 <ecp_double_jac+0x3a>
   1de54:	466a      	mov	r2, sp
   1de56:	4669      	mov	r1, sp
   1de58:	a806      	add	r0, sp, #24
   1de5a:	f7fd ff4d 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1de5e:	4604      	mov	r4, r0
   1de60:	2800      	cmp	r0, #0
   1de62:	f47f ae90 	bne.w	1db86 <ecp_double_jac+0x3a>
   1de66:	4631      	mov	r1, r6
   1de68:	a806      	add	r0, sp, #24
   1de6a:	f7ff fe23 	bl	1dab4 <ecp_modp>
   1de6e:	4604      	mov	r4, r0
   1de70:	2800      	cmp	r0, #0
   1de72:	f47f ae88 	bne.w	1db86 <ecp_double_jac+0x3a>
   1de76:	a906      	add	r1, sp, #24
   1de78:	aa03      	add	r2, sp, #12
   1de7a:	4608      	mov	r0, r1
   1de7c:	f7fd fe7c 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1de80:	4604      	mov	r4, r0
   1de82:	2800      	cmp	r0, #0
   1de84:	f47f ae7f 	bne.w	1db86 <ecp_double_jac+0x3a>
   1de88:	9b06      	ldr	r3, [sp, #24]
   1de8a:	2b00      	cmp	r3, #0
   1de8c:	da0d      	bge.n	1deaa <ecp_double_jac+0x35e>
   1de8e:	2100      	movs	r1, #0
   1de90:	a806      	add	r0, sp, #24
   1de92:	f7fd fc45 	bl	1b720 <mbedtls_mpi_cmp_int>
   1de96:	b140      	cbz	r0, 1deaa <ecp_double_jac+0x35e>
   1de98:	a906      	add	r1, sp, #24
   1de9a:	463a      	mov	r2, r7
   1de9c:	4608      	mov	r0, r1
   1de9e:	f7fd fdf7 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1dea2:	4604      	mov	r4, r0
   1dea4:	2800      	cmp	r0, #0
   1dea6:	d0ef      	beq.n	1de88 <ecp_double_jac+0x33c>
   1dea8:	e66d      	b.n	1db86 <ecp_double_jac+0x3a>
   1deaa:	a906      	add	r1, sp, #24
   1deac:	aa03      	add	r2, sp, #12
   1deae:	4608      	mov	r0, r1
   1deb0:	f7fd fe62 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1deb4:	4604      	mov	r4, r0
   1deb6:	2800      	cmp	r0, #0
   1deb8:	f47f ae65 	bne.w	1db86 <ecp_double_jac+0x3a>
   1debc:	9b06      	ldr	r3, [sp, #24]
   1debe:	2b00      	cmp	r3, #0
   1dec0:	da0d      	bge.n	1dede <ecp_double_jac+0x392>
   1dec2:	2100      	movs	r1, #0
   1dec4:	a806      	add	r0, sp, #24
   1dec6:	f7fd fc2b 	bl	1b720 <mbedtls_mpi_cmp_int>
   1deca:	b140      	cbz	r0, 1dede <ecp_double_jac+0x392>
   1decc:	a906      	add	r1, sp, #24
   1dece:	463a      	mov	r2, r7
   1ded0:	4608      	mov	r0, r1
   1ded2:	f7fd fddd 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1ded6:	4604      	mov	r4, r0
   1ded8:	2800      	cmp	r0, #0
   1deda:	d0ef      	beq.n	1debc <ecp_double_jac+0x370>
   1dedc:	e653      	b.n	1db86 <ecp_double_jac+0x3a>
   1dede:	a903      	add	r1, sp, #12
   1dee0:	aa06      	add	r2, sp, #24
   1dee2:	4608      	mov	r0, r1
   1dee4:	f7fd fe48 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1dee8:	4604      	mov	r4, r0
   1deea:	2800      	cmp	r0, #0
   1deec:	f47f ae4b 	bne.w	1db86 <ecp_double_jac+0x3a>
   1def0:	9b03      	ldr	r3, [sp, #12]
   1def2:	2b00      	cmp	r3, #0
   1def4:	da0d      	bge.n	1df12 <ecp_double_jac+0x3c6>
   1def6:	2100      	movs	r1, #0
   1def8:	a803      	add	r0, sp, #12
   1defa:	f7fd fc11 	bl	1b720 <mbedtls_mpi_cmp_int>
   1defe:	b140      	cbz	r0, 1df12 <ecp_double_jac+0x3c6>
   1df00:	a903      	add	r1, sp, #12
   1df02:	463a      	mov	r2, r7
   1df04:	4608      	mov	r0, r1
   1df06:	f7fd fdc3 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1df0a:	4604      	mov	r4, r0
   1df0c:	2800      	cmp	r0, #0
   1df0e:	d0ef      	beq.n	1def0 <ecp_double_jac+0x3a4>
   1df10:	e639      	b.n	1db86 <ecp_double_jac+0x3a>
   1df12:	a903      	add	r1, sp, #12
   1df14:	466a      	mov	r2, sp
   1df16:	4608      	mov	r0, r1
   1df18:	f7fd feee 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1df1c:	4604      	mov	r4, r0
   1df1e:	2800      	cmp	r0, #0
   1df20:	f47f ae31 	bne.w	1db86 <ecp_double_jac+0x3a>
   1df24:	4631      	mov	r1, r6
   1df26:	a803      	add	r0, sp, #12
   1df28:	f7ff fdc4 	bl	1dab4 <ecp_modp>
   1df2c:	4604      	mov	r4, r0
   1df2e:	2800      	cmp	r0, #0
   1df30:	f47f ae29 	bne.w	1db86 <ecp_double_jac+0x3a>
   1df34:	a903      	add	r1, sp, #12
   1df36:	aa09      	add	r2, sp, #36	; 0x24
   1df38:	4608      	mov	r0, r1
   1df3a:	f7fd fe1d 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1df3e:	4604      	mov	r4, r0
   1df40:	2800      	cmp	r0, #0
   1df42:	f47f ae20 	bne.w	1db86 <ecp_double_jac+0x3a>
   1df46:	9b03      	ldr	r3, [sp, #12]
   1df48:	2b00      	cmp	r3, #0
   1df4a:	da0d      	bge.n	1df68 <ecp_double_jac+0x41c>
   1df4c:	2100      	movs	r1, #0
   1df4e:	a803      	add	r0, sp, #12
   1df50:	f7fd fbe6 	bl	1b720 <mbedtls_mpi_cmp_int>
   1df54:	b140      	cbz	r0, 1df68 <ecp_double_jac+0x41c>
   1df56:	a903      	add	r1, sp, #12
   1df58:	463a      	mov	r2, r7
   1df5a:	4608      	mov	r0, r1
   1df5c:	f7fd fd98 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1df60:	4604      	mov	r4, r0
   1df62:	2800      	cmp	r0, #0
   1df64:	d0ef      	beq.n	1df46 <ecp_double_jac+0x3fa>
   1df66:	e60e      	b.n	1db86 <ecp_double_jac+0x3a>
   1df68:	f105 0218 	add.w	r2, r5, #24
   1df6c:	4649      	mov	r1, r9
   1df6e:	a809      	add	r0, sp, #36	; 0x24
   1df70:	f7fd fec2 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1df74:	4604      	mov	r4, r0
   1df76:	2800      	cmp	r0, #0
   1df78:	f47f ae05 	bne.w	1db86 <ecp_double_jac+0x3a>
   1df7c:	4631      	mov	r1, r6
   1df7e:	a809      	add	r0, sp, #36	; 0x24
   1df80:	f7ff fd98 	bl	1dab4 <ecp_modp>
   1df84:	4604      	mov	r4, r0
   1df86:	2800      	cmp	r0, #0
   1df88:	f47f adfd 	bne.w	1db86 <ecp_double_jac+0x3a>
   1df8c:	2101      	movs	r1, #1
   1df8e:	a809      	add	r0, sp, #36	; 0x24
   1df90:	f7fd fa38 	bl	1b404 <mbedtls_mpi_shift_l>
   1df94:	4604      	mov	r4, r0
   1df96:	2800      	cmp	r0, #0
   1df98:	f47f adf5 	bne.w	1db86 <ecp_double_jac+0x3a>
   1df9c:	4639      	mov	r1, r7
   1df9e:	a809      	add	r0, sp, #36	; 0x24
   1dfa0:	f7fd fb56 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1dfa4:	2800      	cmp	r0, #0
   1dfa6:	db08      	blt.n	1dfba <ecp_double_jac+0x46e>
   1dfa8:	a909      	add	r1, sp, #36	; 0x24
   1dfaa:	463a      	mov	r2, r7
   1dfac:	4608      	mov	r0, r1
   1dfae:	f7fd fcaf 	bl	1b910 <mbedtls_mpi_sub_abs>
   1dfb2:	4604      	mov	r4, r0
   1dfb4:	2800      	cmp	r0, #0
   1dfb6:	d0f1      	beq.n	1df9c <ecp_double_jac+0x450>
   1dfb8:	e5e5      	b.n	1db86 <ecp_double_jac+0x3a>
   1dfba:	a906      	add	r1, sp, #24
   1dfbc:	4640      	mov	r0, r8
   1dfbe:	f7fc ff09 	bl	1add4 <mbedtls_mpi_copy>
   1dfc2:	4604      	mov	r4, r0
   1dfc4:	2800      	cmp	r0, #0
   1dfc6:	f47f adde 	bne.w	1db86 <ecp_double_jac+0x3a>
   1dfca:	a903      	add	r1, sp, #12
   1dfcc:	f108 000c 	add.w	r0, r8, #12
   1dfd0:	f7fc ff00 	bl	1add4 <mbedtls_mpi_copy>
   1dfd4:	4604      	mov	r4, r0
   1dfd6:	2800      	cmp	r0, #0
   1dfd8:	f47f add5 	bne.w	1db86 <ecp_double_jac+0x3a>
   1dfdc:	f108 0018 	add.w	r0, r8, #24
   1dfe0:	a909      	add	r1, sp, #36	; 0x24
   1dfe2:	f7fc fef7 	bl	1add4 <mbedtls_mpi_copy>
   1dfe6:	4604      	mov	r4, r0
   1dfe8:	e5cd      	b.n	1db86 <ecp_double_jac+0x3a>
   1dfea:	bf00      	nop

0001dfec <ecp_normalize_jac>:
   1dfec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dfee:	f101 0518 	add.w	r5, r1, #24
   1dff2:	b087      	sub	sp, #28
   1dff4:	460e      	mov	r6, r1
   1dff6:	4607      	mov	r7, r0
   1dff8:	2100      	movs	r1, #0
   1dffa:	4628      	mov	r0, r5
   1dffc:	f7fd fb90 	bl	1b720 <mbedtls_mpi_cmp_int>
   1e000:	b918      	cbnz	r0, 1e00a <ecp_normalize_jac+0x1e>
   1e002:	4604      	mov	r4, r0
   1e004:	4620      	mov	r0, r4
   1e006:	b007      	add	sp, #28
   1e008:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e00a:	4668      	mov	r0, sp
   1e00c:	f7fc fe5e 	bl	1accc <mbedtls_mpi_init>
   1e010:	a803      	add	r0, sp, #12
   1e012:	f7fc fe5b 	bl	1accc <mbedtls_mpi_init>
   1e016:	4668      	mov	r0, sp
   1e018:	1d3a      	adds	r2, r7, #4
   1e01a:	4629      	mov	r1, r5
   1e01c:	f7fe fe8a 	bl	1cd34 <mbedtls_mpi_inv_mod>
   1e020:	4604      	mov	r4, r0
   1e022:	b140      	cbz	r0, 1e036 <ecp_normalize_jac+0x4a>
   1e024:	4668      	mov	r0, sp
   1e026:	f7fc fe59 	bl	1acdc <mbedtls_mpi_free>
   1e02a:	a803      	add	r0, sp, #12
   1e02c:	f7fc fe56 	bl	1acdc <mbedtls_mpi_free>
   1e030:	4620      	mov	r0, r4
   1e032:	b007      	add	sp, #28
   1e034:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e036:	466a      	mov	r2, sp
   1e038:	4669      	mov	r1, sp
   1e03a:	a803      	add	r0, sp, #12
   1e03c:	f7fd fe5c 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e040:	4604      	mov	r4, r0
   1e042:	2800      	cmp	r0, #0
   1e044:	d1ee      	bne.n	1e024 <ecp_normalize_jac+0x38>
   1e046:	4639      	mov	r1, r7
   1e048:	a803      	add	r0, sp, #12
   1e04a:	f7ff fd33 	bl	1dab4 <ecp_modp>
   1e04e:	4604      	mov	r4, r0
   1e050:	2800      	cmp	r0, #0
   1e052:	d1e7      	bne.n	1e024 <ecp_normalize_jac+0x38>
   1e054:	aa03      	add	r2, sp, #12
   1e056:	4631      	mov	r1, r6
   1e058:	4630      	mov	r0, r6
   1e05a:	f7fd fe4d 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e05e:	4604      	mov	r4, r0
   1e060:	2800      	cmp	r0, #0
   1e062:	d1df      	bne.n	1e024 <ecp_normalize_jac+0x38>
   1e064:	4639      	mov	r1, r7
   1e066:	4630      	mov	r0, r6
   1e068:	f7ff fd24 	bl	1dab4 <ecp_modp>
   1e06c:	4604      	mov	r4, r0
   1e06e:	2800      	cmp	r0, #0
   1e070:	d1d8      	bne.n	1e024 <ecp_normalize_jac+0x38>
   1e072:	360c      	adds	r6, #12
   1e074:	4631      	mov	r1, r6
   1e076:	4630      	mov	r0, r6
   1e078:	aa03      	add	r2, sp, #12
   1e07a:	f7fd fe3d 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e07e:	4604      	mov	r4, r0
   1e080:	2800      	cmp	r0, #0
   1e082:	d1cf      	bne.n	1e024 <ecp_normalize_jac+0x38>
   1e084:	4639      	mov	r1, r7
   1e086:	4630      	mov	r0, r6
   1e088:	f7ff fd14 	bl	1dab4 <ecp_modp>
   1e08c:	4604      	mov	r4, r0
   1e08e:	2800      	cmp	r0, #0
   1e090:	d1c8      	bne.n	1e024 <ecp_normalize_jac+0x38>
   1e092:	466a      	mov	r2, sp
   1e094:	4631      	mov	r1, r6
   1e096:	4630      	mov	r0, r6
   1e098:	f7fd fe2e 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e09c:	4604      	mov	r4, r0
   1e09e:	2800      	cmp	r0, #0
   1e0a0:	d1c0      	bne.n	1e024 <ecp_normalize_jac+0x38>
   1e0a2:	4639      	mov	r1, r7
   1e0a4:	4630      	mov	r0, r6
   1e0a6:	f7ff fd05 	bl	1dab4 <ecp_modp>
   1e0aa:	4604      	mov	r4, r0
   1e0ac:	2800      	cmp	r0, #0
   1e0ae:	d1b9      	bne.n	1e024 <ecp_normalize_jac+0x38>
   1e0b0:	4628      	mov	r0, r5
   1e0b2:	2101      	movs	r1, #1
   1e0b4:	f7fd f81a 	bl	1b0ec <mbedtls_mpi_lset>
   1e0b8:	4604      	mov	r4, r0
   1e0ba:	e7b3      	b.n	1e024 <ecp_normalize_jac+0x38>

0001e0bc <ecp_normalize_jac_many.part.3>:
   1e0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e0c0:	4682      	mov	sl, r0
   1e0c2:	b08b      	sub	sp, #44	; 0x2c
   1e0c4:	468b      	mov	fp, r1
   1e0c6:	4610      	mov	r0, r2
   1e0c8:	210c      	movs	r1, #12
   1e0ca:	4616      	mov	r6, r2
   1e0cc:	f7fb f876 	bl	191bc <nrf_calloc>
   1e0d0:	2800      	cmp	r0, #0
   1e0d2:	f000 80fe 	beq.w	1e2d2 <ecp_normalize_jac_many.part.3+0x216>
   1e0d6:	4680      	mov	r8, r0
   1e0d8:	a801      	add	r0, sp, #4
   1e0da:	f7fc fdf7 	bl	1accc <mbedtls_mpi_init>
   1e0de:	a804      	add	r0, sp, #16
   1e0e0:	f7fc fdf4 	bl	1accc <mbedtls_mpi_init>
   1e0e4:	a807      	add	r0, sp, #28
   1e0e6:	f7fc fdf1 	bl	1accc <mbedtls_mpi_init>
   1e0ea:	f8db 1000 	ldr.w	r1, [fp]
   1e0ee:	4640      	mov	r0, r8
   1e0f0:	3118      	adds	r1, #24
   1e0f2:	f7fc fe6f 	bl	1add4 <mbedtls_mpi_copy>
   1e0f6:	4604      	mov	r4, r0
   1e0f8:	bb60      	cbnz	r0, 1e154 <ecp_normalize_jac_many.part.3+0x98>
   1e0fa:	2e01      	cmp	r6, #1
   1e0fc:	d946      	bls.n	1e18c <ecp_normalize_jac_many.part.3+0xd0>
   1e0fe:	46d9      	mov	r9, fp
   1e100:	2701      	movs	r7, #1
   1e102:	f108 050c 	add.w	r5, r8, #12
   1e106:	e008      	b.n	1e11a <ecp_normalize_jac_many.part.3+0x5e>
   1e108:	4628      	mov	r0, r5
   1e10a:	4651      	mov	r1, sl
   1e10c:	f7ff fcd2 	bl	1dab4 <ecp_modp>
   1e110:	350c      	adds	r5, #12
   1e112:	4604      	mov	r4, r0
   1e114:	b968      	cbnz	r0, 1e132 <ecp_normalize_jac_many.part.3+0x76>
   1e116:	42be      	cmp	r6, r7
   1e118:	d038      	beq.n	1e18c <ecp_normalize_jac_many.part.3+0xd0>
   1e11a:	f859 2f04 	ldr.w	r2, [r9, #4]!
   1e11e:	f1a5 010c 	sub.w	r1, r5, #12
   1e122:	3218      	adds	r2, #24
   1e124:	4628      	mov	r0, r5
   1e126:	f7fd fde7 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e12a:	3701      	adds	r7, #1
   1e12c:	4604      	mov	r4, r0
   1e12e:	2800      	cmp	r0, #0
   1e130:	d0ea      	beq.n	1e108 <ecp_normalize_jac_many.part.3+0x4c>
   1e132:	a801      	add	r0, sp, #4
   1e134:	f7fc fdd2 	bl	1acdc <mbedtls_mpi_free>
   1e138:	a804      	add	r0, sp, #16
   1e13a:	f7fc fdcf 	bl	1acdc <mbedtls_mpi_free>
   1e13e:	a807      	add	r0, sp, #28
   1e140:	f7fc fdcc 	bl	1acdc <mbedtls_mpi_free>
   1e144:	e010      	b.n	1e168 <ecp_normalize_jac_many.part.3+0xac>
   1e146:	a901      	add	r1, sp, #4
   1e148:	a804      	add	r0, sp, #16
   1e14a:	f7fc fe43 	bl	1add4 <mbedtls_mpi_copy>
   1e14e:	4604      	mov	r4, r0
   1e150:	2800      	cmp	r0, #0
   1e152:	d053      	beq.n	1e1fc <ecp_normalize_jac_many.part.3+0x140>
   1e154:	a801      	add	r0, sp, #4
   1e156:	f7fc fdc1 	bl	1acdc <mbedtls_mpi_free>
   1e15a:	a804      	add	r0, sp, #16
   1e15c:	f7fc fdbe 	bl	1acdc <mbedtls_mpi_free>
   1e160:	a807      	add	r0, sp, #28
   1e162:	f7fc fdbb 	bl	1acdc <mbedtls_mpi_free>
   1e166:	b156      	cbz	r6, 1e17e <ecp_normalize_jac_many.part.3+0xc2>
   1e168:	4645      	mov	r5, r8
   1e16a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   1e16e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
   1e172:	4628      	mov	r0, r5
   1e174:	350c      	adds	r5, #12
   1e176:	f7fc fdb1 	bl	1acdc <mbedtls_mpi_free>
   1e17a:	42b5      	cmp	r5, r6
   1e17c:	d1f9      	bne.n	1e172 <ecp_normalize_jac_many.part.3+0xb6>
   1e17e:	4640      	mov	r0, r8
   1e180:	f7fb f830 	bl	191e4 <nrf_free>
   1e184:	4620      	mov	r0, r4
   1e186:	b00b      	add	sp, #44	; 0x2c
   1e188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e18c:	eb06 0546 	add.w	r5, r6, r6, lsl #1
   1e190:	00ad      	lsls	r5, r5, #2
   1e192:	f1a5 010c 	sub.w	r1, r5, #12
   1e196:	4441      	add	r1, r8
   1e198:	f10a 0204 	add.w	r2, sl, #4
   1e19c:	a801      	add	r0, sp, #4
   1e19e:	f7fe fdc9 	bl	1cd34 <mbedtls_mpi_inv_mod>
   1e1a2:	4604      	mov	r4, r0
   1e1a4:	2800      	cmp	r0, #0
   1e1a6:	d1d5      	bne.n	1e154 <ecp_normalize_jac_many.part.3+0x98>
   1e1a8:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   1e1ac:	3d18      	subs	r5, #24
   1e1ae:	3b01      	subs	r3, #1
   1e1b0:	4445      	add	r5, r8
   1e1b2:	eb0b 0b83 	add.w	fp, fp, r3, lsl #2
   1e1b6:	1e77      	subs	r7, r6, #1
   1e1b8:	2f00      	cmp	r7, #0
   1e1ba:	d0c4      	beq.n	1e146 <ecp_normalize_jac_many.part.3+0x8a>
   1e1bc:	462a      	mov	r2, r5
   1e1be:	a901      	add	r1, sp, #4
   1e1c0:	a804      	add	r0, sp, #16
   1e1c2:	f7fd fd99 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e1c6:	4604      	mov	r4, r0
   1e1c8:	2800      	cmp	r0, #0
   1e1ca:	d1c3      	bne.n	1e154 <ecp_normalize_jac_many.part.3+0x98>
   1e1cc:	4651      	mov	r1, sl
   1e1ce:	a804      	add	r0, sp, #16
   1e1d0:	f7ff fc70 	bl	1dab4 <ecp_modp>
   1e1d4:	4604      	mov	r4, r0
   1e1d6:	2800      	cmp	r0, #0
   1e1d8:	d1bc      	bne.n	1e154 <ecp_normalize_jac_many.part.3+0x98>
   1e1da:	f8db 2000 	ldr.w	r2, [fp]
   1e1de:	a901      	add	r1, sp, #4
   1e1e0:	3218      	adds	r2, #24
   1e1e2:	4608      	mov	r0, r1
   1e1e4:	f7fd fd88 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e1e8:	4604      	mov	r4, r0
   1e1ea:	2800      	cmp	r0, #0
   1e1ec:	d1b2      	bne.n	1e154 <ecp_normalize_jac_many.part.3+0x98>
   1e1ee:	4651      	mov	r1, sl
   1e1f0:	a801      	add	r0, sp, #4
   1e1f2:	f7ff fc5f 	bl	1dab4 <ecp_modp>
   1e1f6:	4604      	mov	r4, r0
   1e1f8:	2800      	cmp	r0, #0
   1e1fa:	d1ab      	bne.n	1e154 <ecp_normalize_jac_many.part.3+0x98>
   1e1fc:	aa04      	add	r2, sp, #16
   1e1fe:	4611      	mov	r1, r2
   1e200:	a807      	add	r0, sp, #28
   1e202:	f7fd fd79 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e206:	4604      	mov	r4, r0
   1e208:	2800      	cmp	r0, #0
   1e20a:	d1a3      	bne.n	1e154 <ecp_normalize_jac_many.part.3+0x98>
   1e20c:	4651      	mov	r1, sl
   1e20e:	a807      	add	r0, sp, #28
   1e210:	f7ff fc50 	bl	1dab4 <ecp_modp>
   1e214:	4604      	mov	r4, r0
   1e216:	2800      	cmp	r0, #0
   1e218:	d19c      	bne.n	1e154 <ecp_normalize_jac_many.part.3+0x98>
   1e21a:	f8db 1000 	ldr.w	r1, [fp]
   1e21e:	aa07      	add	r2, sp, #28
   1e220:	4608      	mov	r0, r1
   1e222:	f7fd fd69 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e226:	4604      	mov	r4, r0
   1e228:	2800      	cmp	r0, #0
   1e22a:	d193      	bne.n	1e154 <ecp_normalize_jac_many.part.3+0x98>
   1e22c:	4651      	mov	r1, sl
   1e22e:	f8db 0000 	ldr.w	r0, [fp]
   1e232:	f7ff fc3f 	bl	1dab4 <ecp_modp>
   1e236:	4604      	mov	r4, r0
   1e238:	2800      	cmp	r0, #0
   1e23a:	d18b      	bne.n	1e154 <ecp_normalize_jac_many.part.3+0x98>
   1e23c:	f8db 1000 	ldr.w	r1, [fp]
   1e240:	aa07      	add	r2, sp, #28
   1e242:	310c      	adds	r1, #12
   1e244:	4608      	mov	r0, r1
   1e246:	f7fd fd57 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e24a:	4604      	mov	r4, r0
   1e24c:	2800      	cmp	r0, #0
   1e24e:	d181      	bne.n	1e154 <ecp_normalize_jac_many.part.3+0x98>
   1e250:	f8db 0000 	ldr.w	r0, [fp]
   1e254:	4651      	mov	r1, sl
   1e256:	300c      	adds	r0, #12
   1e258:	f7ff fc2c 	bl	1dab4 <ecp_modp>
   1e25c:	4604      	mov	r4, r0
   1e25e:	2800      	cmp	r0, #0
   1e260:	f47f af78 	bne.w	1e154 <ecp_normalize_jac_many.part.3+0x98>
   1e264:	f8db 1000 	ldr.w	r1, [fp]
   1e268:	aa04      	add	r2, sp, #16
   1e26a:	310c      	adds	r1, #12
   1e26c:	4608      	mov	r0, r1
   1e26e:	f7fd fd43 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e272:	4604      	mov	r4, r0
   1e274:	2800      	cmp	r0, #0
   1e276:	f47f af6d 	bne.w	1e154 <ecp_normalize_jac_many.part.3+0x98>
   1e27a:	f8db 0000 	ldr.w	r0, [fp]
   1e27e:	4651      	mov	r1, sl
   1e280:	300c      	adds	r0, #12
   1e282:	f7ff fc17 	bl	1dab4 <ecp_modp>
   1e286:	4604      	mov	r4, r0
   1e288:	2800      	cmp	r0, #0
   1e28a:	f47f af63 	bne.w	1e154 <ecp_normalize_jac_many.part.3+0x98>
   1e28e:	f8da 1008 	ldr.w	r1, [sl, #8]
   1e292:	f8db 0000 	ldr.w	r0, [fp]
   1e296:	f7fc fd3b 	bl	1ad10 <mbedtls_mpi_shrink>
   1e29a:	4604      	mov	r4, r0
   1e29c:	2800      	cmp	r0, #0
   1e29e:	f47f af59 	bne.w	1e154 <ecp_normalize_jac_many.part.3+0x98>
   1e2a2:	f8db 0000 	ldr.w	r0, [fp]
   1e2a6:	f8da 1008 	ldr.w	r1, [sl, #8]
   1e2aa:	300c      	adds	r0, #12
   1e2ac:	f7fc fd30 	bl	1ad10 <mbedtls_mpi_shrink>
   1e2b0:	4604      	mov	r4, r0
   1e2b2:	2800      	cmp	r0, #0
   1e2b4:	f47f af4e 	bne.w	1e154 <ecp_normalize_jac_many.part.3+0x98>
   1e2b8:	f8db 0000 	ldr.w	r0, [fp]
   1e2bc:	3d0c      	subs	r5, #12
   1e2be:	3018      	adds	r0, #24
   1e2c0:	f1ab 0b04 	sub.w	fp, fp, #4
   1e2c4:	f7fc fd0a 	bl	1acdc <mbedtls_mpi_free>
   1e2c8:	2f00      	cmp	r7, #0
   1e2ca:	f43f af43 	beq.w	1e154 <ecp_normalize_jac_many.part.3+0x98>
   1e2ce:	3f01      	subs	r7, #1
   1e2d0:	e772      	b.n	1e1b8 <ecp_normalize_jac_many.part.3+0xfc>
   1e2d2:	4c01      	ldr	r4, [pc, #4]	; (1e2d8 <ecp_normalize_jac_many.part.3+0x21c>)
   1e2d4:	e756      	b.n	1e184 <ecp_normalize_jac_many.part.3+0xc8>
   1e2d6:	bf00      	nop
   1e2d8:	ffffb280 	.word	0xffffb280

0001e2dc <mbedtls_ecp_keypair_init>:
   1e2dc:	b1b8      	cbz	r0, 1e30e <mbedtls_ecp_keypair_init+0x32>
   1e2de:	b510      	push	{r4, lr}
   1e2e0:	4604      	mov	r4, r0
   1e2e2:	227c      	movs	r2, #124	; 0x7c
   1e2e4:	2100      	movs	r1, #0
   1e2e6:	f00c fafd 	bl	2a8e4 <memset>
   1e2ea:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   1e2ee:	f7fc fced 	bl	1accc <mbedtls_mpi_init>
   1e2f2:	f104 0088 	add.w	r0, r4, #136	; 0x88
   1e2f6:	f7fc fce9 	bl	1accc <mbedtls_mpi_init>
   1e2fa:	f104 0094 	add.w	r0, r4, #148	; 0x94
   1e2fe:	f7fc fce5 	bl	1accc <mbedtls_mpi_init>
   1e302:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   1e306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e30a:	f7fc bcdf 	b.w	1accc <mbedtls_mpi_init>
   1e30e:	4770      	bx	lr

0001e310 <mbedtls_ecp_group_free>:
   1e310:	2800      	cmp	r0, #0
   1e312:	d048      	beq.n	1e3a6 <mbedtls_ecp_group_free+0x96>
   1e314:	b570      	push	{r4, r5, r6, lr}
   1e316:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1e318:	4604      	mov	r4, r0
   1e31a:	2b01      	cmp	r3, #1
   1e31c:	d123      	bne.n	1e366 <mbedtls_ecp_group_free+0x56>
   1e31e:	6f60      	ldr	r0, [r4, #116]	; 0x74
   1e320:	b1c8      	cbz	r0, 1e356 <mbedtls_ecp_group_free+0x46>
   1e322:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   1e324:	b1aa      	cbz	r2, 1e352 <mbedtls_ecp_group_free+0x42>
   1e326:	2600      	movs	r6, #0
   1e328:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
   1e32c:	eb10 0583 	adds.w	r5, r0, r3, lsl #2
   1e330:	d035      	beq.n	1e39e <mbedtls_ecp_group_free+0x8e>
   1e332:	4628      	mov	r0, r5
   1e334:	f7fc fcd2 	bl	1acdc <mbedtls_mpi_free>
   1e338:	f105 000c 	add.w	r0, r5, #12
   1e33c:	f7fc fcce 	bl	1acdc <mbedtls_mpi_free>
   1e340:	f105 0018 	add.w	r0, r5, #24
   1e344:	f7fc fcca 	bl	1acdc <mbedtls_mpi_free>
   1e348:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   1e34a:	3601      	adds	r6, #1
   1e34c:	4296      	cmp	r6, r2
   1e34e:	6f60      	ldr	r0, [r4, #116]	; 0x74
   1e350:	d3ea      	bcc.n	1e328 <mbedtls_ecp_group_free+0x18>
   1e352:	f7fa ff47 	bl	191e4 <nrf_free>
   1e356:	2200      	movs	r2, #0
   1e358:	f104 037c 	add.w	r3, r4, #124	; 0x7c
   1e35c:	7022      	strb	r2, [r4, #0]
   1e35e:	3401      	adds	r4, #1
   1e360:	429c      	cmp	r4, r3
   1e362:	d1fb      	bne.n	1e35c <mbedtls_ecp_group_free+0x4c>
   1e364:	bd70      	pop	{r4, r5, r6, pc}
   1e366:	3004      	adds	r0, #4
   1e368:	f7fc fcb8 	bl	1acdc <mbedtls_mpi_free>
   1e36c:	f104 0010 	add.w	r0, r4, #16
   1e370:	f7fc fcb4 	bl	1acdc <mbedtls_mpi_free>
   1e374:	f104 001c 	add.w	r0, r4, #28
   1e378:	f7fc fcb0 	bl	1acdc <mbedtls_mpi_free>
   1e37c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1e380:	f7fc fcac 	bl	1acdc <mbedtls_mpi_free>
   1e384:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1e388:	f7fc fca8 	bl	1acdc <mbedtls_mpi_free>
   1e38c:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1e390:	f7fc fca4 	bl	1acdc <mbedtls_mpi_free>
   1e394:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1e398:	f7fc fca0 	bl	1acdc <mbedtls_mpi_free>
   1e39c:	e7bf      	b.n	1e31e <mbedtls_ecp_group_free+0xe>
   1e39e:	3601      	adds	r6, #1
   1e3a0:	4296      	cmp	r6, r2
   1e3a2:	d3c1      	bcc.n	1e328 <mbedtls_ecp_group_free+0x18>
   1e3a4:	e7d5      	b.n	1e352 <mbedtls_ecp_group_free+0x42>
   1e3a6:	4770      	bx	lr

0001e3a8 <mbedtls_ecp_keypair_free>:
   1e3a8:	b1a8      	cbz	r0, 1e3d6 <mbedtls_ecp_keypair_free+0x2e>
   1e3aa:	b510      	push	{r4, lr}
   1e3ac:	4604      	mov	r4, r0
   1e3ae:	f7ff ffaf 	bl	1e310 <mbedtls_ecp_group_free>
   1e3b2:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   1e3b6:	f7fc fc91 	bl	1acdc <mbedtls_mpi_free>
   1e3ba:	f104 0088 	add.w	r0, r4, #136	; 0x88
   1e3be:	f7fc fc8d 	bl	1acdc <mbedtls_mpi_free>
   1e3c2:	f104 0094 	add.w	r0, r4, #148	; 0x94
   1e3c6:	f7fc fc89 	bl	1acdc <mbedtls_mpi_free>
   1e3ca:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   1e3ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e3d2:	f7fc bc83 	b.w	1acdc <mbedtls_mpi_free>
   1e3d6:	4770      	bx	lr

0001e3d8 <mbedtls_ecp_set_zero>:
   1e3d8:	b510      	push	{r4, lr}
   1e3da:	2101      	movs	r1, #1
   1e3dc:	4604      	mov	r4, r0
   1e3de:	f7fc fe85 	bl	1b0ec <mbedtls_mpi_lset>
   1e3e2:	b100      	cbz	r0, 1e3e6 <mbedtls_ecp_set_zero+0xe>
   1e3e4:	bd10      	pop	{r4, pc}
   1e3e6:	2101      	movs	r1, #1
   1e3e8:	f104 000c 	add.w	r0, r4, #12
   1e3ec:	f7fc fe7e 	bl	1b0ec <mbedtls_mpi_lset>
   1e3f0:	2800      	cmp	r0, #0
   1e3f2:	d1f7      	bne.n	1e3e4 <mbedtls_ecp_set_zero+0xc>
   1e3f4:	4601      	mov	r1, r0
   1e3f6:	f104 0018 	add.w	r0, r4, #24
   1e3fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e3fe:	f7fc be75 	b.w	1b0ec <mbedtls_mpi_lset>
   1e402:	bf00      	nop

0001e404 <ecp_add_mixed>:
   1e404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e408:	f102 0518 	add.w	r5, r2, #24
   1e40c:	b096      	sub	sp, #88	; 0x58
   1e40e:	4681      	mov	r9, r0
   1e410:	4688      	mov	r8, r1
   1e412:	4628      	mov	r0, r5
   1e414:	2100      	movs	r1, #0
   1e416:	4617      	mov	r7, r2
   1e418:	461e      	mov	r6, r3
   1e41a:	f7fd f981 	bl	1b720 <mbedtls_mpi_cmp_int>
   1e41e:	2800      	cmp	r0, #0
   1e420:	d048      	beq.n	1e4b4 <ecp_add_mixed+0xb0>
   1e422:	6a33      	ldr	r3, [r6, #32]
   1e424:	b18b      	cbz	r3, 1e44a <ecp_add_mixed+0x46>
   1e426:	f106 0418 	add.w	r4, r6, #24
   1e42a:	4620      	mov	r0, r4
   1e42c:	2100      	movs	r1, #0
   1e42e:	f7fd f977 	bl	1b720 <mbedtls_mpi_cmp_int>
   1e432:	2800      	cmp	r0, #0
   1e434:	f000 80d7 	beq.w	1e5e6 <ecp_add_mixed+0x1e2>
   1e438:	6a33      	ldr	r3, [r6, #32]
   1e43a:	b133      	cbz	r3, 1e44a <ecp_add_mixed+0x46>
   1e43c:	4620      	mov	r0, r4
   1e43e:	2101      	movs	r1, #1
   1e440:	f7fd f96e 	bl	1b720 <mbedtls_mpi_cmp_int>
   1e444:	2800      	cmp	r0, #0
   1e446:	f040 80e7 	bne.w	1e618 <ecp_add_mixed+0x214>
   1e44a:	a801      	add	r0, sp, #4
   1e44c:	f7fc fc3e 	bl	1accc <mbedtls_mpi_init>
   1e450:	a804      	add	r0, sp, #16
   1e452:	f7fc fc3b 	bl	1accc <mbedtls_mpi_init>
   1e456:	a807      	add	r0, sp, #28
   1e458:	f7fc fc38 	bl	1accc <mbedtls_mpi_init>
   1e45c:	a80a      	add	r0, sp, #40	; 0x28
   1e45e:	f7fc fc35 	bl	1accc <mbedtls_mpi_init>
   1e462:	a80d      	add	r0, sp, #52	; 0x34
   1e464:	f7fc fc32 	bl	1accc <mbedtls_mpi_init>
   1e468:	a810      	add	r0, sp, #64	; 0x40
   1e46a:	f7fc fc2f 	bl	1accc <mbedtls_mpi_init>
   1e46e:	a813      	add	r0, sp, #76	; 0x4c
   1e470:	f7fc fc2c 	bl	1accc <mbedtls_mpi_init>
   1e474:	462a      	mov	r2, r5
   1e476:	4629      	mov	r1, r5
   1e478:	a801      	add	r0, sp, #4
   1e47a:	f7fd fc3d 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e47e:	4604      	mov	r4, r0
   1e480:	b380      	cbz	r0, 1e4e4 <ecp_add_mixed+0xe0>
   1e482:	a801      	add	r0, sp, #4
   1e484:	f7fc fc2a 	bl	1acdc <mbedtls_mpi_free>
   1e488:	a804      	add	r0, sp, #16
   1e48a:	f7fc fc27 	bl	1acdc <mbedtls_mpi_free>
   1e48e:	a807      	add	r0, sp, #28
   1e490:	f7fc fc24 	bl	1acdc <mbedtls_mpi_free>
   1e494:	a80a      	add	r0, sp, #40	; 0x28
   1e496:	f7fc fc21 	bl	1acdc <mbedtls_mpi_free>
   1e49a:	a80d      	add	r0, sp, #52	; 0x34
   1e49c:	f7fc fc1e 	bl	1acdc <mbedtls_mpi_free>
   1e4a0:	a810      	add	r0, sp, #64	; 0x40
   1e4a2:	f7fc fc1b 	bl	1acdc <mbedtls_mpi_free>
   1e4a6:	a813      	add	r0, sp, #76	; 0x4c
   1e4a8:	f7fc fc18 	bl	1acdc <mbedtls_mpi_free>
   1e4ac:	4620      	mov	r0, r4
   1e4ae:	b016      	add	sp, #88	; 0x58
   1e4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e4b4:	4631      	mov	r1, r6
   1e4b6:	4640      	mov	r0, r8
   1e4b8:	f7fc fc8c 	bl	1add4 <mbedtls_mpi_copy>
   1e4bc:	4604      	mov	r4, r0
   1e4be:	2800      	cmp	r0, #0
   1e4c0:	d1f4      	bne.n	1e4ac <ecp_add_mixed+0xa8>
   1e4c2:	f106 010c 	add.w	r1, r6, #12
   1e4c6:	f108 000c 	add.w	r0, r8, #12
   1e4ca:	f7fc fc83 	bl	1add4 <mbedtls_mpi_copy>
   1e4ce:	4604      	mov	r4, r0
   1e4d0:	2800      	cmp	r0, #0
   1e4d2:	d1eb      	bne.n	1e4ac <ecp_add_mixed+0xa8>
   1e4d4:	f106 0118 	add.w	r1, r6, #24
   1e4d8:	f108 0018 	add.w	r0, r8, #24
   1e4dc:	f7fc fc7a 	bl	1add4 <mbedtls_mpi_copy>
   1e4e0:	4604      	mov	r4, r0
   1e4e2:	e7e3      	b.n	1e4ac <ecp_add_mixed+0xa8>
   1e4e4:	4649      	mov	r1, r9
   1e4e6:	a801      	add	r0, sp, #4
   1e4e8:	f7ff fae4 	bl	1dab4 <ecp_modp>
   1e4ec:	4604      	mov	r4, r0
   1e4ee:	2800      	cmp	r0, #0
   1e4f0:	d1c7      	bne.n	1e482 <ecp_add_mixed+0x7e>
   1e4f2:	462a      	mov	r2, r5
   1e4f4:	a901      	add	r1, sp, #4
   1e4f6:	a804      	add	r0, sp, #16
   1e4f8:	f7fd fbfe 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e4fc:	4604      	mov	r4, r0
   1e4fe:	2800      	cmp	r0, #0
   1e500:	d1bf      	bne.n	1e482 <ecp_add_mixed+0x7e>
   1e502:	4649      	mov	r1, r9
   1e504:	a804      	add	r0, sp, #16
   1e506:	f7ff fad5 	bl	1dab4 <ecp_modp>
   1e50a:	4604      	mov	r4, r0
   1e50c:	2800      	cmp	r0, #0
   1e50e:	d1b8      	bne.n	1e482 <ecp_add_mixed+0x7e>
   1e510:	a901      	add	r1, sp, #4
   1e512:	4632      	mov	r2, r6
   1e514:	4608      	mov	r0, r1
   1e516:	f7fd fbef 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e51a:	4604      	mov	r4, r0
   1e51c:	2800      	cmp	r0, #0
   1e51e:	d1b0      	bne.n	1e482 <ecp_add_mixed+0x7e>
   1e520:	4649      	mov	r1, r9
   1e522:	a801      	add	r0, sp, #4
   1e524:	f7ff fac6 	bl	1dab4 <ecp_modp>
   1e528:	4604      	mov	r4, r0
   1e52a:	2800      	cmp	r0, #0
   1e52c:	d1a9      	bne.n	1e482 <ecp_add_mixed+0x7e>
   1e52e:	a904      	add	r1, sp, #16
   1e530:	f106 020c 	add.w	r2, r6, #12
   1e534:	4608      	mov	r0, r1
   1e536:	f7fd fbdf 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e53a:	4604      	mov	r4, r0
   1e53c:	2800      	cmp	r0, #0
   1e53e:	d1a0      	bne.n	1e482 <ecp_add_mixed+0x7e>
   1e540:	4649      	mov	r1, r9
   1e542:	a804      	add	r0, sp, #16
   1e544:	f7ff fab6 	bl	1dab4 <ecp_modp>
   1e548:	4604      	mov	r4, r0
   1e54a:	2800      	cmp	r0, #0
   1e54c:	d199      	bne.n	1e482 <ecp_add_mixed+0x7e>
   1e54e:	a901      	add	r1, sp, #4
   1e550:	463a      	mov	r2, r7
   1e552:	4608      	mov	r0, r1
   1e554:	f7fd fb10 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1e558:	4604      	mov	r4, r0
   1e55a:	2800      	cmp	r0, #0
   1e55c:	d191      	bne.n	1e482 <ecp_add_mixed+0x7e>
   1e55e:	f109 0604 	add.w	r6, r9, #4
   1e562:	e00c      	b.n	1e57e <ecp_add_mixed+0x17a>
   1e564:	2100      	movs	r1, #0
   1e566:	a801      	add	r0, sp, #4
   1e568:	f7fd f8da 	bl	1b720 <mbedtls_mpi_cmp_int>
   1e56c:	b150      	cbz	r0, 1e584 <ecp_add_mixed+0x180>
   1e56e:	a901      	add	r1, sp, #4
   1e570:	4632      	mov	r2, r6
   1e572:	4608      	mov	r0, r1
   1e574:	f7fd fa8c 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1e578:	4604      	mov	r4, r0
   1e57a:	2800      	cmp	r0, #0
   1e57c:	d181      	bne.n	1e482 <ecp_add_mixed+0x7e>
   1e57e:	9b01      	ldr	r3, [sp, #4]
   1e580:	2b00      	cmp	r3, #0
   1e582:	dbef      	blt.n	1e564 <ecp_add_mixed+0x160>
   1e584:	a904      	add	r1, sp, #16
   1e586:	f107 060c 	add.w	r6, r7, #12
   1e58a:	4632      	mov	r2, r6
   1e58c:	4608      	mov	r0, r1
   1e58e:	f7fd faf3 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1e592:	4604      	mov	r4, r0
   1e594:	2800      	cmp	r0, #0
   1e596:	f47f af74 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e59a:	f109 0a04 	add.w	sl, r9, #4
   1e59e:	e00d      	b.n	1e5bc <ecp_add_mixed+0x1b8>
   1e5a0:	2100      	movs	r1, #0
   1e5a2:	a804      	add	r0, sp, #16
   1e5a4:	f7fd f8bc 	bl	1b720 <mbedtls_mpi_cmp_int>
   1e5a8:	b158      	cbz	r0, 1e5c2 <ecp_add_mixed+0x1be>
   1e5aa:	a904      	add	r1, sp, #16
   1e5ac:	4652      	mov	r2, sl
   1e5ae:	4608      	mov	r0, r1
   1e5b0:	f7fd fa6e 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1e5b4:	4604      	mov	r4, r0
   1e5b6:	2800      	cmp	r0, #0
   1e5b8:	f47f af63 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e5bc:	9b04      	ldr	r3, [sp, #16]
   1e5be:	2b00      	cmp	r3, #0
   1e5c0:	dbee      	blt.n	1e5a0 <ecp_add_mixed+0x19c>
   1e5c2:	2100      	movs	r1, #0
   1e5c4:	a801      	add	r0, sp, #4
   1e5c6:	f7fd f8ab 	bl	1b720 <mbedtls_mpi_cmp_int>
   1e5ca:	4601      	mov	r1, r0
   1e5cc:	bb30      	cbnz	r0, 1e61c <ecp_add_mixed+0x218>
   1e5ce:	a804      	add	r0, sp, #16
   1e5d0:	f7fd f8a6 	bl	1b720 <mbedtls_mpi_cmp_int>
   1e5d4:	2800      	cmp	r0, #0
   1e5d6:	d17f      	bne.n	1e6d8 <ecp_add_mixed+0x2d4>
   1e5d8:	463a      	mov	r2, r7
   1e5da:	4641      	mov	r1, r8
   1e5dc:	4648      	mov	r0, r9
   1e5de:	f7ff fab5 	bl	1db4c <ecp_double_jac>
   1e5e2:	4604      	mov	r4, r0
   1e5e4:	e74d      	b.n	1e482 <ecp_add_mixed+0x7e>
   1e5e6:	4639      	mov	r1, r7
   1e5e8:	4640      	mov	r0, r8
   1e5ea:	f7fc fbf3 	bl	1add4 <mbedtls_mpi_copy>
   1e5ee:	4604      	mov	r4, r0
   1e5f0:	2800      	cmp	r0, #0
   1e5f2:	f47f af5b 	bne.w	1e4ac <ecp_add_mixed+0xa8>
   1e5f6:	f107 010c 	add.w	r1, r7, #12
   1e5fa:	f108 000c 	add.w	r0, r8, #12
   1e5fe:	f7fc fbe9 	bl	1add4 <mbedtls_mpi_copy>
   1e602:	4604      	mov	r4, r0
   1e604:	2800      	cmp	r0, #0
   1e606:	f47f af51 	bne.w	1e4ac <ecp_add_mixed+0xa8>
   1e60a:	4629      	mov	r1, r5
   1e60c:	f108 0018 	add.w	r0, r8, #24
   1e610:	f7fc fbe0 	bl	1add4 <mbedtls_mpi_copy>
   1e614:	4604      	mov	r4, r0
   1e616:	e749      	b.n	1e4ac <ecp_add_mixed+0xa8>
   1e618:	4c8b      	ldr	r4, [pc, #556]	; (1e848 <ecp_add_mixed+0x444>)
   1e61a:	e747      	b.n	1e4ac <ecp_add_mixed+0xa8>
   1e61c:	4629      	mov	r1, r5
   1e61e:	aa01      	add	r2, sp, #4
   1e620:	a813      	add	r0, sp, #76	; 0x4c
   1e622:	f7fd fb69 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e626:	4604      	mov	r4, r0
   1e628:	2800      	cmp	r0, #0
   1e62a:	f47f af2a 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e62e:	4649      	mov	r1, r9
   1e630:	a813      	add	r0, sp, #76	; 0x4c
   1e632:	f7ff fa3f 	bl	1dab4 <ecp_modp>
   1e636:	4604      	mov	r4, r0
   1e638:	2800      	cmp	r0, #0
   1e63a:	f47f af22 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e63e:	aa01      	add	r2, sp, #4
   1e640:	4611      	mov	r1, r2
   1e642:	a807      	add	r0, sp, #28
   1e644:	f7fd fb58 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e648:	4604      	mov	r4, r0
   1e64a:	2800      	cmp	r0, #0
   1e64c:	f47f af19 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e650:	4649      	mov	r1, r9
   1e652:	a807      	add	r0, sp, #28
   1e654:	f7ff fa2e 	bl	1dab4 <ecp_modp>
   1e658:	4604      	mov	r4, r0
   1e65a:	2800      	cmp	r0, #0
   1e65c:	f47f af11 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e660:	aa01      	add	r2, sp, #4
   1e662:	a907      	add	r1, sp, #28
   1e664:	a80a      	add	r0, sp, #40	; 0x28
   1e666:	f7fd fb47 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e66a:	4604      	mov	r4, r0
   1e66c:	2800      	cmp	r0, #0
   1e66e:	f47f af08 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e672:	4649      	mov	r1, r9
   1e674:	a80a      	add	r0, sp, #40	; 0x28
   1e676:	f7ff fa1d 	bl	1dab4 <ecp_modp>
   1e67a:	4604      	mov	r4, r0
   1e67c:	2800      	cmp	r0, #0
   1e67e:	f47f af00 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e682:	a907      	add	r1, sp, #28
   1e684:	463a      	mov	r2, r7
   1e686:	4608      	mov	r0, r1
   1e688:	f7fd fb36 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e68c:	4604      	mov	r4, r0
   1e68e:	2800      	cmp	r0, #0
   1e690:	f47f aef7 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e694:	4649      	mov	r1, r9
   1e696:	a807      	add	r0, sp, #28
   1e698:	f7ff fa0c 	bl	1dab4 <ecp_modp>
   1e69c:	4604      	mov	r4, r0
   1e69e:	2800      	cmp	r0, #0
   1e6a0:	f47f aeef 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e6a4:	2202      	movs	r2, #2
   1e6a6:	a907      	add	r1, sp, #28
   1e6a8:	a801      	add	r0, sp, #4
   1e6aa:	f7fd fc1d 	bl	1bee8 <mbedtls_mpi_mul_int>
   1e6ae:	4604      	mov	r4, r0
   1e6b0:	2800      	cmp	r0, #0
   1e6b2:	f47f aee6 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e6b6:	f109 0504 	add.w	r5, r9, #4
   1e6ba:	4629      	mov	r1, r5
   1e6bc:	a801      	add	r0, sp, #4
   1e6be:	f7fc ffc7 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1e6c2:	2800      	cmp	r0, #0
   1e6c4:	db0d      	blt.n	1e6e2 <ecp_add_mixed+0x2de>
   1e6c6:	a901      	add	r1, sp, #4
   1e6c8:	462a      	mov	r2, r5
   1e6ca:	4608      	mov	r0, r1
   1e6cc:	f7fd f920 	bl	1b910 <mbedtls_mpi_sub_abs>
   1e6d0:	4604      	mov	r4, r0
   1e6d2:	2800      	cmp	r0, #0
   1e6d4:	d0f1      	beq.n	1e6ba <ecp_add_mixed+0x2b6>
   1e6d6:	e6d4      	b.n	1e482 <ecp_add_mixed+0x7e>
   1e6d8:	4640      	mov	r0, r8
   1e6da:	f7ff fe7d 	bl	1e3d8 <mbedtls_ecp_set_zero>
   1e6de:	4604      	mov	r4, r0
   1e6e0:	e6cf      	b.n	1e482 <ecp_add_mixed+0x7e>
   1e6e2:	aa04      	add	r2, sp, #16
   1e6e4:	4611      	mov	r1, r2
   1e6e6:	a80d      	add	r0, sp, #52	; 0x34
   1e6e8:	f7fd fb06 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e6ec:	4604      	mov	r4, r0
   1e6ee:	2800      	cmp	r0, #0
   1e6f0:	f47f aec7 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e6f4:	4649      	mov	r1, r9
   1e6f6:	a80d      	add	r0, sp, #52	; 0x34
   1e6f8:	f7ff f9dc 	bl	1dab4 <ecp_modp>
   1e6fc:	4604      	mov	r4, r0
   1e6fe:	2800      	cmp	r0, #0
   1e700:	f47f aebf 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e704:	a90d      	add	r1, sp, #52	; 0x34
   1e706:	aa01      	add	r2, sp, #4
   1e708:	4608      	mov	r0, r1
   1e70a:	f7fd fa35 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1e70e:	4604      	mov	r4, r0
   1e710:	2800      	cmp	r0, #0
   1e712:	f47f aeb6 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1e718:	2b00      	cmp	r3, #0
   1e71a:	da0d      	bge.n	1e738 <ecp_add_mixed+0x334>
   1e71c:	2100      	movs	r1, #0
   1e71e:	a80d      	add	r0, sp, #52	; 0x34
   1e720:	f7fc fffe 	bl	1b720 <mbedtls_mpi_cmp_int>
   1e724:	b140      	cbz	r0, 1e738 <ecp_add_mixed+0x334>
   1e726:	a90d      	add	r1, sp, #52	; 0x34
   1e728:	462a      	mov	r2, r5
   1e72a:	4608      	mov	r0, r1
   1e72c:	f7fd f9b0 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1e730:	4604      	mov	r4, r0
   1e732:	2800      	cmp	r0, #0
   1e734:	d0ef      	beq.n	1e716 <ecp_add_mixed+0x312>
   1e736:	e6a4      	b.n	1e482 <ecp_add_mixed+0x7e>
   1e738:	a90d      	add	r1, sp, #52	; 0x34
   1e73a:	aa0a      	add	r2, sp, #40	; 0x28
   1e73c:	4608      	mov	r0, r1
   1e73e:	f7fd fa1b 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1e742:	4604      	mov	r4, r0
   1e744:	2800      	cmp	r0, #0
   1e746:	f47f ae9c 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e74a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1e74c:	2b00      	cmp	r3, #0
   1e74e:	da0d      	bge.n	1e76c <ecp_add_mixed+0x368>
   1e750:	2100      	movs	r1, #0
   1e752:	a80d      	add	r0, sp, #52	; 0x34
   1e754:	f7fc ffe4 	bl	1b720 <mbedtls_mpi_cmp_int>
   1e758:	b140      	cbz	r0, 1e76c <ecp_add_mixed+0x368>
   1e75a:	a90d      	add	r1, sp, #52	; 0x34
   1e75c:	462a      	mov	r2, r5
   1e75e:	4608      	mov	r0, r1
   1e760:	f7fd f996 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1e764:	4604      	mov	r4, r0
   1e766:	2800      	cmp	r0, #0
   1e768:	d0ef      	beq.n	1e74a <ecp_add_mixed+0x346>
   1e76a:	e68a      	b.n	1e482 <ecp_add_mixed+0x7e>
   1e76c:	a907      	add	r1, sp, #28
   1e76e:	aa0d      	add	r2, sp, #52	; 0x34
   1e770:	4608      	mov	r0, r1
   1e772:	f7fd fa01 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1e776:	4604      	mov	r4, r0
   1e778:	2800      	cmp	r0, #0
   1e77a:	f47f ae82 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e77e:	9b07      	ldr	r3, [sp, #28]
   1e780:	2b00      	cmp	r3, #0
   1e782:	da0d      	bge.n	1e7a0 <ecp_add_mixed+0x39c>
   1e784:	2100      	movs	r1, #0
   1e786:	a807      	add	r0, sp, #28
   1e788:	f7fc ffca 	bl	1b720 <mbedtls_mpi_cmp_int>
   1e78c:	b140      	cbz	r0, 1e7a0 <ecp_add_mixed+0x39c>
   1e78e:	a907      	add	r1, sp, #28
   1e790:	462a      	mov	r2, r5
   1e792:	4608      	mov	r0, r1
   1e794:	f7fd f97c 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1e798:	4604      	mov	r4, r0
   1e79a:	2800      	cmp	r0, #0
   1e79c:	d0ef      	beq.n	1e77e <ecp_add_mixed+0x37a>
   1e79e:	e670      	b.n	1e482 <ecp_add_mixed+0x7e>
   1e7a0:	a907      	add	r1, sp, #28
   1e7a2:	aa04      	add	r2, sp, #16
   1e7a4:	4608      	mov	r0, r1
   1e7a6:	f7fd faa7 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e7aa:	4604      	mov	r4, r0
   1e7ac:	2800      	cmp	r0, #0
   1e7ae:	f47f ae68 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e7b2:	4649      	mov	r1, r9
   1e7b4:	a807      	add	r0, sp, #28
   1e7b6:	f7ff f97d 	bl	1dab4 <ecp_modp>
   1e7ba:	4604      	mov	r4, r0
   1e7bc:	2800      	cmp	r0, #0
   1e7be:	f47f ae60 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e7c2:	a90a      	add	r1, sp, #40	; 0x28
   1e7c4:	4632      	mov	r2, r6
   1e7c6:	4608      	mov	r0, r1
   1e7c8:	f7fd fa96 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1e7cc:	4604      	mov	r4, r0
   1e7ce:	2800      	cmp	r0, #0
   1e7d0:	f47f ae57 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e7d4:	4649      	mov	r1, r9
   1e7d6:	a80a      	add	r0, sp, #40	; 0x28
   1e7d8:	f7ff f96c 	bl	1dab4 <ecp_modp>
   1e7dc:	4604      	mov	r4, r0
   1e7de:	2800      	cmp	r0, #0
   1e7e0:	f47f ae4f 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e7e4:	aa0a      	add	r2, sp, #40	; 0x28
   1e7e6:	a907      	add	r1, sp, #28
   1e7e8:	a810      	add	r0, sp, #64	; 0x40
   1e7ea:	f7fd f9c5 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1e7ee:	4604      	mov	r4, r0
   1e7f0:	2800      	cmp	r0, #0
   1e7f2:	f47f ae46 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e7f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e7f8:	2b00      	cmp	r3, #0
   1e7fa:	da0d      	bge.n	1e818 <ecp_add_mixed+0x414>
   1e7fc:	2100      	movs	r1, #0
   1e7fe:	a810      	add	r0, sp, #64	; 0x40
   1e800:	f7fc ff8e 	bl	1b720 <mbedtls_mpi_cmp_int>
   1e804:	b140      	cbz	r0, 1e818 <ecp_add_mixed+0x414>
   1e806:	a910      	add	r1, sp, #64	; 0x40
   1e808:	462a      	mov	r2, r5
   1e80a:	4608      	mov	r0, r1
   1e80c:	f7fd f940 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1e810:	4604      	mov	r4, r0
   1e812:	2800      	cmp	r0, #0
   1e814:	d0ef      	beq.n	1e7f6 <ecp_add_mixed+0x3f2>
   1e816:	e634      	b.n	1e482 <ecp_add_mixed+0x7e>
   1e818:	a90d      	add	r1, sp, #52	; 0x34
   1e81a:	4640      	mov	r0, r8
   1e81c:	f7fc fada 	bl	1add4 <mbedtls_mpi_copy>
   1e820:	4604      	mov	r4, r0
   1e822:	2800      	cmp	r0, #0
   1e824:	f47f ae2d 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e828:	a910      	add	r1, sp, #64	; 0x40
   1e82a:	f108 000c 	add.w	r0, r8, #12
   1e82e:	f7fc fad1 	bl	1add4 <mbedtls_mpi_copy>
   1e832:	4604      	mov	r4, r0
   1e834:	2800      	cmp	r0, #0
   1e836:	f47f ae24 	bne.w	1e482 <ecp_add_mixed+0x7e>
   1e83a:	f108 0018 	add.w	r0, r8, #24
   1e83e:	a913      	add	r1, sp, #76	; 0x4c
   1e840:	f7fc fac8 	bl	1add4 <mbedtls_mpi_copy>
   1e844:	4604      	mov	r4, r0
   1e846:	e61c      	b.n	1e482 <ecp_add_mixed+0x7e>
   1e848:	ffffb080 	.word	0xffffb080

0001e84c <ecp_mul_comb>:
   1e84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e850:	4605      	mov	r5, r0
   1e852:	4698      	mov	r8, r3
   1e854:	f105 034c 	add.w	r3, r5, #76	; 0x4c
   1e858:	461c      	mov	r4, r3
   1e85a:	b0e5      	sub	sp, #404	; 0x194
   1e85c:	a80d      	add	r0, sp, #52	; 0x34
   1e85e:	9104      	str	r1, [sp, #16]
   1e860:	4617      	mov	r7, r2
   1e862:	9308      	str	r3, [sp, #32]
   1e864:	f7fc fa32 	bl	1accc <mbedtls_mpi_init>
   1e868:	a810      	add	r0, sp, #64	; 0x40
   1e86a:	f7fc fa2f 	bl	1accc <mbedtls_mpi_init>
   1e86e:	4620      	mov	r0, r4
   1e870:	2100      	movs	r1, #0
   1e872:	f7fc fc75 	bl	1b160 <mbedtls_mpi_get_bit>
   1e876:	2801      	cmp	r0, #1
   1e878:	9007      	str	r0, [sp, #28]
   1e87a:	f040 81c9 	bne.w	1ec10 <ecp_mul_comb+0x3c4>
   1e87e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e880:	f108 090c 	add.w	r9, r8, #12
   1e884:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   1e888:	bf2c      	ite	cs
   1e88a:	2605      	movcs	r6, #5
   1e88c:	2604      	movcc	r6, #4
   1e88e:	4648      	mov	r0, r9
   1e890:	f105 0134 	add.w	r1, r5, #52	; 0x34
   1e894:	bf2c      	ite	cs
   1e896:	f04f 0a06 	movcs.w	sl, #6
   1e89a:	f04f 0a05 	movcc.w	sl, #5
   1e89e:	46b3      	mov	fp, r6
   1e8a0:	f7fc fed6 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1e8a4:	2800      	cmp	r0, #0
   1e8a6:	d072      	beq.n	1e98e <ecp_mul_comb+0x142>
   1e8a8:	6dec      	ldr	r4, [r5, #92]	; 0x5c
   1e8aa:	42a6      	cmp	r6, r4
   1e8ac:	d245      	bcs.n	1e93a <ecp_mul_comb+0xee>
   1e8ae:	2301      	movs	r3, #1
   1e8b0:	f10b 32ff 	add.w	r2, fp, #4294967295
   1e8b4:	4093      	lsls	r3, r2
   1e8b6:	9302      	str	r3, [sp, #8]
   1e8b8:	4434      	add	r4, r6
   1e8ba:	b2db      	uxtb	r3, r3
   1e8bc:	3c01      	subs	r4, #1
   1e8be:	9303      	str	r3, [sp, #12]
   1e8c0:	2300      	movs	r3, #0
   1e8c2:	fbb4 f4f6 	udiv	r4, r4, r6
   1e8c6:	9802      	ldr	r0, [sp, #8]
   1e8c8:	9206      	str	r2, [sp, #24]
   1e8ca:	9305      	str	r3, [sp, #20]
   1e8cc:	2124      	movs	r1, #36	; 0x24
   1e8ce:	f7fa fc75 	bl	191bc <nrf_calloc>
   1e8d2:	9001      	str	r0, [sp, #4]
   1e8d4:	2800      	cmp	r0, #0
   1e8d6:	d040      	beq.n	1e95a <ecp_mul_comb+0x10e>
   1e8d8:	4641      	mov	r1, r8
   1e8da:	f7fc fa7b 	bl	1add4 <mbedtls_mpi_copy>
   1e8de:	f8dd a004 	ldr.w	sl, [sp, #4]
   1e8e2:	4683      	mov	fp, r0
   1e8e4:	2800      	cmp	r0, #0
   1e8e6:	f000 8086 	beq.w	1e9f6 <ecp_mul_comb+0x1aa>
   1e8ea:	9b05      	ldr	r3, [sp, #20]
   1e8ec:	2b00      	cmp	r3, #0
   1e8ee:	d17b      	bne.n	1e9e8 <ecp_mul_comb+0x19c>
   1e8f0:	2500      	movs	r5, #0
   1e8f2:	9c01      	ldr	r4, [sp, #4]
   1e8f4:	9e03      	ldr	r6, [sp, #12]
   1e8f6:	3501      	adds	r5, #1
   1e8f8:	b154      	cbz	r4, 1e910 <ecp_mul_comb+0xc4>
   1e8fa:	4620      	mov	r0, r4
   1e8fc:	f7fc f9ee 	bl	1acdc <mbedtls_mpi_free>
   1e900:	f104 000c 	add.w	r0, r4, #12
   1e904:	f7fc f9ea 	bl	1acdc <mbedtls_mpi_free>
   1e908:	f104 0018 	add.w	r0, r4, #24
   1e90c:	f7fc f9e6 	bl	1acdc <mbedtls_mpi_free>
   1e910:	b2eb      	uxtb	r3, r5
   1e912:	429e      	cmp	r6, r3
   1e914:	f104 0424 	add.w	r4, r4, #36	; 0x24
   1e918:	d8ed      	bhi.n	1e8f6 <ecp_mul_comb+0xaa>
   1e91a:	9801      	ldr	r0, [sp, #4]
   1e91c:	f7fa fc62 	bl	191e4 <nrf_free>
   1e920:	a80d      	add	r0, sp, #52	; 0x34
   1e922:	f7fc f9db 	bl	1acdc <mbedtls_mpi_free>
   1e926:	a810      	add	r0, sp, #64	; 0x40
   1e928:	f7fc f9d8 	bl	1acdc <mbedtls_mpi_free>
   1e92c:	f1bb 0f00 	cmp.w	fp, #0
   1e930:	d11b      	bne.n	1e96a <ecp_mul_comb+0x11e>
   1e932:	4658      	mov	r0, fp
   1e934:	b065      	add	sp, #404	; 0x194
   1e936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e93a:	2602      	movs	r6, #2
   1e93c:	2300      	movs	r3, #0
   1e93e:	2201      	movs	r2, #1
   1e940:	4630      	mov	r0, r6
   1e942:	2124      	movs	r1, #36	; 0x24
   1e944:	e9cd 6602 	strd	r6, r6, [sp, #8]
   1e948:	e9cd 3205 	strd	r3, r2, [sp, #20]
   1e94c:	f7fa fc36 	bl	191bc <nrf_calloc>
   1e950:	3401      	adds	r4, #1
   1e952:	0864      	lsrs	r4, r4, #1
   1e954:	9001      	str	r0, [sp, #4]
   1e956:	2800      	cmp	r0, #0
   1e958:	d1be      	bne.n	1e8d8 <ecp_mul_comb+0x8c>
   1e95a:	a80d      	add	r0, sp, #52	; 0x34
   1e95c:	f7fc f9be 	bl	1acdc <mbedtls_mpi_free>
   1e960:	a810      	add	r0, sp, #64	; 0x40
   1e962:	f7fc f9bb 	bl	1acdc <mbedtls_mpi_free>
   1e966:	f8df b644 	ldr.w	fp, [pc, #1604]	; 1efac <ecp_mul_comb+0x760>
   1e96a:	9c04      	ldr	r4, [sp, #16]
   1e96c:	2c00      	cmp	r4, #0
   1e96e:	d0e0      	beq.n	1e932 <ecp_mul_comb+0xe6>
   1e970:	4620      	mov	r0, r4
   1e972:	f7fc f9b3 	bl	1acdc <mbedtls_mpi_free>
   1e976:	f104 000c 	add.w	r0, r4, #12
   1e97a:	f7fc f9af 	bl	1acdc <mbedtls_mpi_free>
   1e97e:	f104 0018 	add.w	r0, r4, #24
   1e982:	f7fc f9ab 	bl	1acdc <mbedtls_mpi_free>
   1e986:	4658      	mov	r0, fp
   1e988:	b065      	add	sp, #404	; 0x194
   1e98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e98e:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1e992:	4640      	mov	r0, r8
   1e994:	f7fc fe5c 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1e998:	2800      	cmp	r0, #0
   1e99a:	d185      	bne.n	1e8a8 <ecp_mul_comb+0x5c>
   1e99c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e99e:	459a      	cmp	sl, r3
   1e9a0:	f0c0 82f4 	bcc.w	1ef8c <ecp_mul_comb+0x740>
   1e9a4:	2602      	movs	r6, #2
   1e9a6:	1c5c      	adds	r4, r3, #1
   1e9a8:	2301      	movs	r3, #1
   1e9aa:	e9cd 6602 	strd	r6, r6, [sp, #8]
   1e9ae:	0864      	lsrs	r4, r4, #1
   1e9b0:	9306      	str	r3, [sp, #24]
   1e9b2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   1e9b4:	9301      	str	r3, [sp, #4]
   1e9b6:	2b00      	cmp	r3, #0
   1e9b8:	f000 80ea 	beq.w	1eb90 <ecp_mul_comb+0x344>
   1e9bc:	2100      	movs	r1, #0
   1e9be:	4638      	mov	r0, r7
   1e9c0:	f7fc fbce 	bl	1b160 <mbedtls_mpi_get_bit>
   1e9c4:	4639      	mov	r1, r7
   1e9c6:	4680      	mov	r8, r0
   1e9c8:	a80d      	add	r0, sp, #52	; 0x34
   1e9ca:	f7fc fa03 	bl	1add4 <mbedtls_mpi_copy>
   1e9ce:	4683      	mov	fp, r0
   1e9d0:	b950      	cbnz	r0, 1e9e8 <ecp_mul_comb+0x19c>
   1e9d2:	463a      	mov	r2, r7
   1e9d4:	9908      	ldr	r1, [sp, #32]
   1e9d6:	a810      	add	r0, sp, #64	; 0x40
   1e9d8:	f7fd f8ce 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1e9dc:	4683      	mov	fp, r0
   1e9de:	2800      	cmp	r0, #0
   1e9e0:	d036      	beq.n	1ea50 <ecp_mul_comb+0x204>
   1e9e2:	9b07      	ldr	r3, [sp, #28]
   1e9e4:	2b00      	cmp	r3, #0
   1e9e6:	d083      	beq.n	1e8f0 <ecp_mul_comb+0xa4>
   1e9e8:	a80d      	add	r0, sp, #52	; 0x34
   1e9ea:	f7fc f977 	bl	1acdc <mbedtls_mpi_free>
   1e9ee:	a810      	add	r0, sp, #64	; 0x40
   1e9f0:	f7fc f974 	bl	1acdc <mbedtls_mpi_free>
   1e9f4:	e7b9      	b.n	1e96a <ecp_mul_comb+0x11e>
   1e9f6:	4649      	mov	r1, r9
   1e9f8:	f10a 000c 	add.w	r0, sl, #12
   1e9fc:	f7fc f9ea 	bl	1add4 <mbedtls_mpi_copy>
   1ea00:	4683      	mov	fp, r0
   1ea02:	2800      	cmp	r0, #0
   1ea04:	f47f af71 	bne.w	1e8ea <ecp_mul_comb+0x9e>
   1ea08:	9b01      	ldr	r3, [sp, #4]
   1ea0a:	f108 0118 	add.w	r1, r8, #24
   1ea0e:	f103 0018 	add.w	r0, r3, #24
   1ea12:	f7fc f9df 	bl	1add4 <mbedtls_mpi_copy>
   1ea16:	4683      	mov	fp, r0
   1ea18:	2800      	cmp	r0, #0
   1ea1a:	f47f af66 	bne.w	1e8ea <ecp_mul_comb+0x9e>
   1ea1e:	462a      	mov	r2, r5
   1ea20:	f04f 0901 	mov.w	r9, #1
   1ea24:	4651      	mov	r1, sl
   1ea26:	4625      	mov	r5, r4
   1ea28:	4682      	mov	sl, r0
   1ea2a:	464c      	mov	r4, r9
   1ea2c:	4690      	mov	r8, r2
   1ea2e:	9609      	str	r6, [sp, #36]	; 0x24
   1ea30:	970a      	str	r7, [sp, #40]	; 0x28
   1ea32:	9e06      	ldr	r6, [sp, #24]
   1ea34:	9f01      	ldr	r7, [sp, #4]
   1ea36:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1ea3a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
   1ea3e:	4620      	mov	r0, r4
   1ea40:	f7fc f9c8 	bl	1add4 <mbedtls_mpi_copy>
   1ea44:	2800      	cmp	r0, #0
   1ea46:	f000 80a7 	beq.w	1eb98 <ecp_mul_comb+0x34c>
   1ea4a:	4683      	mov	fp, r0
   1ea4c:	9b05      	ldr	r3, [sp, #20]
   1ea4e:	e74d      	b.n	1e8ec <ecp_mul_comb+0xa0>
   1ea50:	f118 33ff 	adds.w	r3, r8, #4294967295
   1ea54:	bf18      	it	ne
   1ea56:	2301      	movne	r3, #1
   1ea58:	a910      	add	r1, sp, #64	; 0x40
   1ea5a:	461a      	mov	r2, r3
   1ea5c:	a80d      	add	r0, sp, #52	; 0x34
   1ea5e:	9302      	str	r3, [sp, #8]
   1ea60:	f7fc fae6 	bl	1b030 <mbedtls_mpi_safe_cond_assign>
   1ea64:	4683      	mov	fp, r0
   1ea66:	2800      	cmp	r0, #0
   1ea68:	d1bb      	bne.n	1e9e2 <ecp_mul_comb+0x196>
   1ea6a:	a822      	add	r0, sp, #136	; 0x88
   1ea6c:	1c62      	adds	r2, r4, #1
   1ea6e:	4659      	mov	r1, fp
   1ea70:	f00b ff38 	bl	2a8e4 <memset>
   1ea74:	b3d4      	cbz	r4, 1eaec <ecp_mul_comb+0x2a0>
   1ea76:	f10d 0988 	add.w	r9, sp, #136	; 0x88
   1ea7a:	46d8      	mov	r8, fp
   1ea7c:	46cb      	mov	fp, r9
   1ea7e:	46c2      	mov	sl, r8
   1ea80:	2700      	movs	r7, #0
   1ea82:	4651      	mov	r1, sl
   1ea84:	a80d      	add	r0, sp, #52	; 0x34
   1ea86:	f7fc fb6b 	bl	1b160 <mbedtls_mpi_get_bit>
   1ea8a:	f89b 3000 	ldrb.w	r3, [fp]
   1ea8e:	40b8      	lsls	r0, r7
   1ea90:	3701      	adds	r7, #1
   1ea92:	4303      	orrs	r3, r0
   1ea94:	42b7      	cmp	r7, r6
   1ea96:	44a2      	add	sl, r4
   1ea98:	f88b 3000 	strb.w	r3, [fp]
   1ea9c:	d1f1      	bne.n	1ea82 <ecp_mul_comb+0x236>
   1ea9e:	f108 0801 	add.w	r8, r8, #1
   1eaa2:	45a0      	cmp	r8, r4
   1eaa4:	f10b 0b01 	add.w	fp, fp, #1
   1eaa8:	d1e9      	bne.n	1ea7e <ecp_mul_comb+0x232>
   1eaaa:	2300      	movs	r3, #0
   1eaac:	f04f 0c01 	mov.w	ip, #1
   1eab0:	f89d 1088 	ldrb.w	r1, [sp, #136]	; 0x88
   1eab4:	f819 6f01 	ldrb.w	r6, [r9, #1]!
   1eab8:	f10c 0c01 	add.w	ip, ip, #1
   1eabc:	ea86 0203 	eor.w	r2, r6, r3
   1eac0:	43d0      	mvns	r0, r2
   1eac2:	f000 0001 	and.w	r0, r0, #1
   1eac6:	fb00 f701 	mul.w	r7, r0, r1
   1eaca:	b252      	sxtb	r2, r2
   1eacc:	b27f      	sxtb	r7, r7
   1eace:	4033      	ands	r3, r6
   1ead0:	ea02 0607 	and.w	r6, r2, r7
   1ead4:	407a      	eors	r2, r7
   1ead6:	ea41 10c0 	orr.w	r0, r1, r0, lsl #7
   1eada:	4333      	orrs	r3, r6
   1eadc:	b2d1      	uxtb	r1, r2
   1eade:	45e0      	cmp	r8, ip
   1eae0:	f809 0c01 	strb.w	r0, [r9, #-1]
   1eae4:	b2db      	uxtb	r3, r3
   1eae6:	f889 1000 	strb.w	r1, [r9]
   1eaea:	d2e3      	bcs.n	1eab4 <ecp_mul_comb+0x268>
   1eaec:	2600      	movs	r6, #0
   1eaee:	a819      	add	r0, sp, #100	; 0x64
   1eaf0:	f7fc f8ec 	bl	1accc <mbedtls_mpi_init>
   1eaf4:	a81c      	add	r0, sp, #112	; 0x70
   1eaf6:	f7fc f8e9 	bl	1accc <mbedtls_mpi_init>
   1eafa:	a81f      	add	r0, sp, #124	; 0x7c
   1eafc:	f7fc f8e6 	bl	1accc <mbedtls_mpi_init>
   1eb00:	ab22      	add	r3, sp, #136	; 0x88
   1eb02:	f813 9004 	ldrb.w	r9, [r3, r4]
   1eb06:	4423      	add	r3, r4
   1eb08:	9306      	str	r3, [sp, #24]
   1eb0a:	9b04      	ldr	r3, [sp, #16]
   1eb0c:	4632      	mov	r2, r6
   1eb0e:	469b      	mov	fp, r3
   1eb10:	9f01      	ldr	r7, [sp, #4]
   1eb12:	9505      	str	r5, [sp, #20]
   1eb14:	463d      	mov	r5, r7
   1eb16:	9f03      	ldr	r7, [sp, #12]
   1eb18:	f3c9 0845 	ubfx	r8, r9, #1, #6
   1eb1c:	f103 0a0c 	add.w	sl, r3, #12
   1eb20:	eba2 0408 	sub.w	r4, r2, r8
   1eb24:	fab4 f484 	clz	r4, r4
   1eb28:	0964      	lsrs	r4, r4, #5
   1eb2a:	4629      	mov	r1, r5
   1eb2c:	4622      	mov	r2, r4
   1eb2e:	4658      	mov	r0, fp
   1eb30:	f7fc fa7e 	bl	1b030 <mbedtls_mpi_safe_cond_assign>
   1eb34:	3601      	adds	r6, #1
   1eb36:	f105 010c 	add.w	r1, r5, #12
   1eb3a:	3524      	adds	r5, #36	; 0x24
   1eb3c:	2800      	cmp	r0, #0
   1eb3e:	d16a      	bne.n	1ec16 <ecp_mul_comb+0x3ca>
   1eb40:	4622      	mov	r2, r4
   1eb42:	4650      	mov	r0, sl
   1eb44:	f7fc fa74 	bl	1b030 <mbedtls_mpi_safe_cond_assign>
   1eb48:	b2f2      	uxtb	r2, r6
   1eb4a:	2800      	cmp	r0, #0
   1eb4c:	d163      	bne.n	1ec16 <ecp_mul_comb+0x3ca>
   1eb4e:	42ba      	cmp	r2, r7
   1eb50:	d3e6      	bcc.n	1eb20 <ecp_mul_comb+0x2d4>
   1eb52:	9d05      	ldr	r5, [sp, #20]
   1eb54:	a816      	add	r0, sp, #88	; 0x58
   1eb56:	1d2b      	adds	r3, r5, #4
   1eb58:	461c      	mov	r4, r3
   1eb5a:	9308      	str	r3, [sp, #32]
   1eb5c:	f7fc f8b6 	bl	1accc <mbedtls_mpi_init>
   1eb60:	a816      	add	r0, sp, #88	; 0x58
   1eb62:	4621      	mov	r1, r4
   1eb64:	4652      	mov	r2, sl
   1eb66:	f7fd f807 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1eb6a:	4683      	mov	fp, r0
   1eb6c:	2800      	cmp	r0, #0
   1eb6e:	f000 80c3 	beq.w	1ecf8 <ecp_mul_comb+0x4ac>
   1eb72:	a816      	add	r0, sp, #88	; 0x58
   1eb74:	f7fc f8b2 	bl	1acdc <mbedtls_mpi_free>
   1eb78:	a819      	add	r0, sp, #100	; 0x64
   1eb7a:	f7fc f8af 	bl	1acdc <mbedtls_mpi_free>
   1eb7e:	a81c      	add	r0, sp, #112	; 0x70
   1eb80:	f7fc f8ac 	bl	1acdc <mbedtls_mpi_free>
   1eb84:	a81f      	add	r0, sp, #124	; 0x7c
   1eb86:	f7fc f8a9 	bl	1acdc <mbedtls_mpi_free>
   1eb8a:	9b07      	ldr	r3, [sp, #28]
   1eb8c:	9305      	str	r3, [sp, #20]
   1eb8e:	e6ac      	b.n	1e8ea <ecp_mul_comb+0x9e>
   1eb90:	2301      	movs	r3, #1
   1eb92:	9802      	ldr	r0, [sp, #8]
   1eb94:	9305      	str	r3, [sp, #20]
   1eb96:	e699      	b.n	1e8cc <ecp_mul_comb+0x80>
   1eb98:	ea4f 0b59 	mov.w	fp, r9, lsr #1
   1eb9c:	eb0b 0bcb 	add.w	fp, fp, fp, lsl #3
   1eba0:	eb07 0b8b 	add.w	fp, r7, fp, lsl #2
   1eba4:	f10b 010c 	add.w	r1, fp, #12
   1eba8:	f104 000c 	add.w	r0, r4, #12
   1ebac:	f7fc f912 	bl	1add4 <mbedtls_mpi_copy>
   1ebb0:	2800      	cmp	r0, #0
   1ebb2:	f47f af4a 	bne.w	1ea4a <ecp_mul_comb+0x1fe>
   1ebb6:	f10b 0118 	add.w	r1, fp, #24
   1ebba:	f104 0018 	add.w	r0, r4, #24
   1ebbe:	f7fc f909 	bl	1add4 <mbedtls_mpi_copy>
   1ebc2:	2800      	cmp	r0, #0
   1ebc4:	f47f af41 	bne.w	1ea4a <ecp_mul_comb+0x1fe>
   1ebc8:	b165      	cbz	r5, 1ebe4 <ecp_mul_comb+0x398>
   1ebca:	4683      	mov	fp, r0
   1ebcc:	4622      	mov	r2, r4
   1ebce:	4621      	mov	r1, r4
   1ebd0:	4640      	mov	r0, r8
   1ebd2:	f7fe ffbb 	bl	1db4c <ecp_double_jac>
   1ebd6:	f10b 0b01 	add.w	fp, fp, #1
   1ebda:	2800      	cmp	r0, #0
   1ebdc:	f47f af35 	bne.w	1ea4a <ecp_mul_comb+0x1fe>
   1ebe0:	45ab      	cmp	fp, r5
   1ebe2:	d1f3      	bne.n	1ebcc <ecp_mul_comb+0x380>
   1ebe4:	ea4f 0949 	mov.w	r9, r9, lsl #1
   1ebe8:	fa5f f989 	uxtb.w	r9, r9
   1ebec:	f10a 0301 	add.w	r3, sl, #1
   1ebf0:	aa22      	add	r2, sp, #136	; 0x88
   1ebf2:	f842 402a 	str.w	r4, [r2, sl, lsl #2]
   1ebf6:	fa5f fa83 	uxtb.w	sl, r3
   1ebfa:	fa39 f306 	lsrs.w	r3, r9, r6
   1ebfe:	464c      	mov	r4, r9
   1ec00:	d10b      	bne.n	1ec1a <ecp_mul_comb+0x3ce>
   1ec02:	ea4f 0159 	mov.w	r1, r9, lsr #1
   1ec06:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
   1ec0a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   1ec0e:	e712      	b.n	1ea36 <ecp_mul_comb+0x1ea>
   1ec10:	f8df b39c 	ldr.w	fp, [pc, #924]	; 1efb0 <ecp_mul_comb+0x764>
   1ec14:	e68d      	b.n	1e932 <ecp_mul_comb+0xe6>
   1ec16:	4683      	mov	fp, r0
   1ec18:	e7ae      	b.n	1eb78 <ecp_mul_comb+0x32c>
   1ec1a:	4652      	mov	r2, sl
   1ec1c:	2a01      	cmp	r2, #1
   1ec1e:	462c      	mov	r4, r5
   1ec20:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1ec22:	4645      	mov	r5, r8
   1ec24:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1ec26:	d961      	bls.n	1ecec <ecp_mul_comb+0x4a0>
   1ec28:	a922      	add	r1, sp, #136	; 0x88
   1ec2a:	4640      	mov	r0, r8
   1ec2c:	f7ff fa46 	bl	1e0bc <ecp_normalize_jac_many.part.3>
   1ec30:	4683      	mov	fp, r0
   1ec32:	f1bb 0f00 	cmp.w	fp, #0
   1ec36:	f47f ae58 	bne.w	1e8ea <ecp_mul_comb+0x9e>
   1ec3a:	2301      	movs	r3, #1
   1ec3c:	9a01      	ldr	r2, [sp, #4]
   1ec3e:	46da      	mov	sl, fp
   1ec40:	3a24      	subs	r2, #36	; 0x24
   1ec42:	970b      	str	r7, [sp, #44]	; 0x2c
   1ec44:	4693      	mov	fp, r2
   1ec46:	461f      	mov	r7, r3
   1ec48:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
   1ec4c:	b303      	cbz	r3, 1ec90 <ecp_mul_comb+0x444>
   1ec4e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1ec52:	ea4f 0883 	mov.w	r8, r3, lsl #2
   1ec56:	9b01      	ldr	r3, [sp, #4]
   1ec58:	f1a8 0424 	sub.w	r4, r8, #36	; 0x24
   1ec5c:	441c      	add	r4, r3
   1ec5e:	eb03 0908 	add.w	r9, r3, r8
   1ec62:	e005      	b.n	1ec70 <ecp_mul_comb+0x424>
   1ec64:	aa22      	add	r2, sp, #136	; 0x88
   1ec66:	45a3      	cmp	fp, r4
   1ec68:	f842 602a 	str.w	r6, [r2, sl, lsl #2]
   1ec6c:	469a      	mov	sl, r3
   1ec6e:	d00f      	beq.n	1ec90 <ecp_mul_comb+0x444>
   1ec70:	eb08 0604 	add.w	r6, r8, r4
   1ec74:	464b      	mov	r3, r9
   1ec76:	4622      	mov	r2, r4
   1ec78:	4631      	mov	r1, r6
   1ec7a:	4628      	mov	r0, r5
   1ec7c:	f7ff fbc2 	bl	1e404 <ecp_add_mixed>
   1ec80:	f10a 0301 	add.w	r3, sl, #1
   1ec84:	3c24      	subs	r4, #36	; 0x24
   1ec86:	b2db      	uxtb	r3, r3
   1ec88:	2800      	cmp	r0, #0
   1ec8a:	d0eb      	beq.n	1ec64 <ecp_mul_comb+0x418>
   1ec8c:	4683      	mov	fp, r0
   1ec8e:	e6dd      	b.n	1ea4c <ecp_mul_comb+0x200>
   1ec90:	007b      	lsls	r3, r7, #1
   1ec92:	9a06      	ldr	r2, [sp, #24]
   1ec94:	b2df      	uxtb	r7, r3
   1ec96:	fa37 f202 	lsrs.w	r2, r7, r2
   1ec9a:	463b      	mov	r3, r7
   1ec9c:	d0d6      	beq.n	1ec4c <ecp_mul_comb+0x400>
   1ec9e:	f1ba 0f01 	cmp.w	sl, #1
   1eca2:	e9dd 4609 	ldrd	r4, r6, [sp, #36]	; 0x24
   1eca6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1eca8:	f240 8167 	bls.w	1ef7a <ecp_mul_comb+0x72e>
   1ecac:	4652      	mov	r2, sl
   1ecae:	a922      	add	r1, sp, #136	; 0x88
   1ecb0:	4628      	mov	r0, r5
   1ecb2:	f7ff fa03 	bl	1e0bc <ecp_normalize_jac_many.part.3>
   1ecb6:	4683      	mov	fp, r0
   1ecb8:	9b05      	ldr	r3, [sp, #20]
   1ecba:	f1bb 0f00 	cmp.w	fp, #0
   1ecbe:	f47f ae15 	bne.w	1e8ec <ecp_mul_comb+0xa0>
   1ecc2:	b123      	cbz	r3, 1ecce <ecp_mul_comb+0x482>
   1ecc4:	9b01      	ldr	r3, [sp, #4]
   1ecc6:	676b      	str	r3, [r5, #116]	; 0x74
   1ecc8:	9b02      	ldr	r3, [sp, #8]
   1ecca:	67ab      	str	r3, [r5, #120]	; 0x78
   1eccc:	e676      	b.n	1e9bc <ecp_mul_comb+0x170>
   1ecce:	4619      	mov	r1, r3
   1ecd0:	4638      	mov	r0, r7
   1ecd2:	f7fc fa45 	bl	1b160 <mbedtls_mpi_get_bit>
   1ecd6:	4639      	mov	r1, r7
   1ecd8:	4680      	mov	r8, r0
   1ecda:	a80d      	add	r0, sp, #52	; 0x34
   1ecdc:	f7fc f87a 	bl	1add4 <mbedtls_mpi_copy>
   1ece0:	4683      	mov	fp, r0
   1ece2:	2800      	cmp	r0, #0
   1ece4:	f47f ae04 	bne.w	1e8f0 <ecp_mul_comb+0xa4>
   1ece8:	9007      	str	r0, [sp, #28]
   1ecea:	e672      	b.n	1e9d2 <ecp_mul_comb+0x186>
   1ecec:	9922      	ldr	r1, [sp, #136]	; 0x88
   1ecee:	4628      	mov	r0, r5
   1ecf0:	f7ff f97c 	bl	1dfec <ecp_normalize_jac>
   1ecf4:	4683      	mov	fp, r0
   1ecf6:	e79c      	b.n	1ec32 <ecp_mul_comb+0x3e6>
   1ecf8:	4601      	mov	r1, r0
   1ecfa:	4650      	mov	r0, sl
   1ecfc:	f7fc fd10 	bl	1b720 <mbedtls_mpi_cmp_int>
   1ed00:	1c02      	adds	r2, r0, #0
   1ed02:	bf18      	it	ne
   1ed04:	2201      	movne	r2, #1
   1ed06:	a916      	add	r1, sp, #88	; 0x58
   1ed08:	ea02 12d9 	and.w	r2, r2, r9, lsr #7
   1ed0c:	4650      	mov	r0, sl
   1ed0e:	f7fc f98f 	bl	1b030 <mbedtls_mpi_safe_cond_assign>
   1ed12:	4683      	mov	fp, r0
   1ed14:	a816      	add	r0, sp, #88	; 0x58
   1ed16:	f7fb ffe1 	bl	1acdc <mbedtls_mpi_free>
   1ed1a:	f1bb 0f00 	cmp.w	fp, #0
   1ed1e:	f47f af2b 	bne.w	1eb78 <ecp_mul_comb+0x32c>
   1ed22:	9b04      	ldr	r3, [sp, #16]
   1ed24:	2101      	movs	r1, #1
   1ed26:	f103 0418 	add.w	r4, r3, #24
   1ed2a:	4620      	mov	r0, r4
   1ed2c:	f7fc f9de 	bl	1b0ec <mbedtls_mpi_lset>
   1ed30:	4683      	mov	fp, r0
   1ed32:	2800      	cmp	r0, #0
   1ed34:	f47f af20 	bne.w	1eb78 <ecp_mul_comb+0x32c>
   1ed38:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
   1ed3a:	2b00      	cmp	r3, #0
   1ed3c:	f000 8082 	beq.w	1ee44 <ecp_mul_comb+0x5f8>
   1ed40:	260c      	movs	r6, #12
   1ed42:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1ed44:	a813      	add	r0, sp, #76	; 0x4c
   1ed46:	3307      	adds	r3, #7
   1ed48:	08df      	lsrs	r7, r3, #3
   1ed4a:	f7fb ffbf 	bl	1accc <mbedtls_mpi_init>
   1ed4e:	a816      	add	r0, sp, #88	; 0x58
   1ed50:	f7fb ffbc 	bl	1accc <mbedtls_mpi_init>
   1ed54:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1ed58:	9b6f      	ldr	r3, [sp, #444]	; 0x1bc
   1ed5a:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
   1ed5c:	4639      	mov	r1, r7
   1ed5e:	a813      	add	r0, sp, #76	; 0x4c
   1ed60:	f7fd ff36 	bl	1cbd0 <mbedtls_mpi_fill_random>
   1ed64:	e006      	b.n	1ed74 <ecp_mul_comb+0x528>
   1ed66:	2101      	movs	r1, #1
   1ed68:	a813      	add	r0, sp, #76	; 0x4c
   1ed6a:	f7fc fc01 	bl	1b570 <mbedtls_mpi_shift_r>
   1ed6e:	2800      	cmp	r0, #0
   1ed70:	f040 80c8 	bne.w	1ef04 <ecp_mul_comb+0x6b8>
   1ed74:	4641      	mov	r1, r8
   1ed76:	a813      	add	r0, sp, #76	; 0x4c
   1ed78:	f7fc fc6a 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1ed7c:	2800      	cmp	r0, #0
   1ed7e:	daf2      	bge.n	1ed66 <ecp_mul_comb+0x51a>
   1ed80:	3e01      	subs	r6, #1
   1ed82:	f000 8100 	beq.w	1ef86 <ecp_mul_comb+0x73a>
   1ed86:	2101      	movs	r1, #1
   1ed88:	a813      	add	r0, sp, #76	; 0x4c
   1ed8a:	f7fc fcc9 	bl	1b720 <mbedtls_mpi_cmp_int>
   1ed8e:	2800      	cmp	r0, #0
   1ed90:	dde2      	ble.n	1ed58 <ecp_mul_comb+0x50c>
   1ed92:	aa13      	add	r2, sp, #76	; 0x4c
   1ed94:	4621      	mov	r1, r4
   1ed96:	4620      	mov	r0, r4
   1ed98:	f7fc ffae 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1ed9c:	4683      	mov	fp, r0
   1ed9e:	b130      	cbz	r0, 1edae <ecp_mul_comb+0x562>
   1eda0:	a813      	add	r0, sp, #76	; 0x4c
   1eda2:	f7fb ff9b 	bl	1acdc <mbedtls_mpi_free>
   1eda6:	a816      	add	r0, sp, #88	; 0x58
   1eda8:	f7fb ff98 	bl	1acdc <mbedtls_mpi_free>
   1edac:	e6e4      	b.n	1eb78 <ecp_mul_comb+0x32c>
   1edae:	4620      	mov	r0, r4
   1edb0:	4629      	mov	r1, r5
   1edb2:	f7fe fe7f 	bl	1dab4 <ecp_modp>
   1edb6:	4683      	mov	fp, r0
   1edb8:	2800      	cmp	r0, #0
   1edba:	d1f1      	bne.n	1eda0 <ecp_mul_comb+0x554>
   1edbc:	aa13      	add	r2, sp, #76	; 0x4c
   1edbe:	4611      	mov	r1, r2
   1edc0:	a816      	add	r0, sp, #88	; 0x58
   1edc2:	f7fc ff99 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1edc6:	4683      	mov	fp, r0
   1edc8:	2800      	cmp	r0, #0
   1edca:	d1e9      	bne.n	1eda0 <ecp_mul_comb+0x554>
   1edcc:	4629      	mov	r1, r5
   1edce:	a816      	add	r0, sp, #88	; 0x58
   1edd0:	f7fe fe70 	bl	1dab4 <ecp_modp>
   1edd4:	4683      	mov	fp, r0
   1edd6:	2800      	cmp	r0, #0
   1edd8:	d1e2      	bne.n	1eda0 <ecp_mul_comb+0x554>
   1edda:	9804      	ldr	r0, [sp, #16]
   1eddc:	aa16      	add	r2, sp, #88	; 0x58
   1edde:	4601      	mov	r1, r0
   1ede0:	f7fc ff8a 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1ede4:	4683      	mov	fp, r0
   1ede6:	2800      	cmp	r0, #0
   1ede8:	d1da      	bne.n	1eda0 <ecp_mul_comb+0x554>
   1edea:	4629      	mov	r1, r5
   1edec:	9804      	ldr	r0, [sp, #16]
   1edee:	f7fe fe61 	bl	1dab4 <ecp_modp>
   1edf2:	4683      	mov	fp, r0
   1edf4:	2800      	cmp	r0, #0
   1edf6:	d1d3      	bne.n	1eda0 <ecp_mul_comb+0x554>
   1edf8:	a916      	add	r1, sp, #88	; 0x58
   1edfa:	aa13      	add	r2, sp, #76	; 0x4c
   1edfc:	4608      	mov	r0, r1
   1edfe:	f7fc ff7b 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1ee02:	4683      	mov	fp, r0
   1ee04:	2800      	cmp	r0, #0
   1ee06:	d1cb      	bne.n	1eda0 <ecp_mul_comb+0x554>
   1ee08:	4629      	mov	r1, r5
   1ee0a:	a816      	add	r0, sp, #88	; 0x58
   1ee0c:	f7fe fe52 	bl	1dab4 <ecp_modp>
   1ee10:	4683      	mov	fp, r0
   1ee12:	2800      	cmp	r0, #0
   1ee14:	d1c4      	bne.n	1eda0 <ecp_mul_comb+0x554>
   1ee16:	aa16      	add	r2, sp, #88	; 0x58
   1ee18:	4651      	mov	r1, sl
   1ee1a:	4650      	mov	r0, sl
   1ee1c:	f7fc ff6c 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1ee20:	4683      	mov	fp, r0
   1ee22:	2800      	cmp	r0, #0
   1ee24:	d1bc      	bne.n	1eda0 <ecp_mul_comb+0x554>
   1ee26:	4629      	mov	r1, r5
   1ee28:	4650      	mov	r0, sl
   1ee2a:	f7fe fe43 	bl	1dab4 <ecp_modp>
   1ee2e:	4683      	mov	fp, r0
   1ee30:	a813      	add	r0, sp, #76	; 0x4c
   1ee32:	f7fb ff53 	bl	1acdc <mbedtls_mpi_free>
   1ee36:	a816      	add	r0, sp, #88	; 0x58
   1ee38:	f7fb ff50 	bl	1acdc <mbedtls_mpi_free>
   1ee3c:	f1bb 0f00 	cmp.w	fp, #0
   1ee40:	f47f ae9a 	bne.w	1eb78 <ecp_mul_comb+0x32c>
   1ee44:	46ab      	mov	fp, r5
   1ee46:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1ee4a:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1ee4e:	f8cd a018 	str.w	sl, [sp, #24]
   1ee52:	f8dd a010 	ldr.w	sl, [sp, #16]
   1ee56:	ab22      	add	r3, sp, #136	; 0x88
   1ee58:	4543      	cmp	r3, r8
   1ee5a:	d055      	beq.n	1ef08 <ecp_mul_comb+0x6bc>
   1ee5c:	4652      	mov	r2, sl
   1ee5e:	4651      	mov	r1, sl
   1ee60:	4658      	mov	r0, fp
   1ee62:	f7fe fe73 	bl	1db4c <ecp_double_jac>
   1ee66:	4602      	mov	r2, r0
   1ee68:	2800      	cmp	r0, #0
   1ee6a:	d149      	bne.n	1ef00 <ecp_mul_comb+0x6b4>
   1ee6c:	4606      	mov	r6, r0
   1ee6e:	4604      	mov	r4, r0
   1ee70:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
   1ee74:	9d01      	ldr	r5, [sp, #4]
   1ee76:	9305      	str	r3, [sp, #20]
   1ee78:	f3c3 0745 	ubfx	r7, r3, #1, #6
   1ee7c:	1be4      	subs	r4, r4, r7
   1ee7e:	fab4 f484 	clz	r4, r4
   1ee82:	0964      	lsrs	r4, r4, #5
   1ee84:	4629      	mov	r1, r5
   1ee86:	4622      	mov	r2, r4
   1ee88:	a819      	add	r0, sp, #100	; 0x64
   1ee8a:	f7fc f8d1 	bl	1b030 <mbedtls_mpi_safe_cond_assign>
   1ee8e:	3601      	adds	r6, #1
   1ee90:	f105 010c 	add.w	r1, r5, #12
   1ee94:	3524      	adds	r5, #36	; 0x24
   1ee96:	2800      	cmp	r0, #0
   1ee98:	f47f aebd 	bne.w	1ec16 <ecp_mul_comb+0x3ca>
   1ee9c:	4622      	mov	r2, r4
   1ee9e:	a81c      	add	r0, sp, #112	; 0x70
   1eea0:	f7fc f8c6 	bl	1b030 <mbedtls_mpi_safe_cond_assign>
   1eea4:	b2f4      	uxtb	r4, r6
   1eea6:	2800      	cmp	r0, #0
   1eea8:	f47f aeb5 	bne.w	1ec16 <ecp_mul_comb+0x3ca>
   1eeac:	45a1      	cmp	r9, r4
   1eeae:	d8e5      	bhi.n	1ee7c <ecp_mul_comb+0x630>
   1eeb0:	a816      	add	r0, sp, #88	; 0x58
   1eeb2:	f7fb ff0b 	bl	1accc <mbedtls_mpi_init>
   1eeb6:	aa1c      	add	r2, sp, #112	; 0x70
   1eeb8:	9908      	ldr	r1, [sp, #32]
   1eeba:	a816      	add	r0, sp, #88	; 0x58
   1eebc:	f7fc fe5c 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1eec0:	b108      	cbz	r0, 1eec6 <ecp_mul_comb+0x67a>
   1eec2:	4683      	mov	fp, r0
   1eec4:	e655      	b.n	1eb72 <ecp_mul_comb+0x326>
   1eec6:	4601      	mov	r1, r0
   1eec8:	a81c      	add	r0, sp, #112	; 0x70
   1eeca:	f7fc fc29 	bl	1b720 <mbedtls_mpi_cmp_int>
   1eece:	1c02      	adds	r2, r0, #0
   1eed0:	bf18      	it	ne
   1eed2:	2201      	movne	r2, #1
   1eed4:	9b05      	ldr	r3, [sp, #20]
   1eed6:	a916      	add	r1, sp, #88	; 0x58
   1eed8:	ea02 12d3 	and.w	r2, r2, r3, lsr #7
   1eedc:	a81c      	add	r0, sp, #112	; 0x70
   1eede:	f7fc f8a7 	bl	1b030 <mbedtls_mpi_safe_cond_assign>
   1eee2:	9005      	str	r0, [sp, #20]
   1eee4:	a816      	add	r0, sp, #88	; 0x58
   1eee6:	f7fb fef9 	bl	1acdc <mbedtls_mpi_free>
   1eeea:	9a05      	ldr	r2, [sp, #20]
   1eeec:	b942      	cbnz	r2, 1ef00 <ecp_mul_comb+0x6b4>
   1eeee:	4652      	mov	r2, sl
   1eef0:	ab19      	add	r3, sp, #100	; 0x64
   1eef2:	4651      	mov	r1, sl
   1eef4:	4658      	mov	r0, fp
   1eef6:	f7ff fa85 	bl	1e404 <ecp_add_mixed>
   1eefa:	4602      	mov	r2, r0
   1eefc:	2800      	cmp	r0, #0
   1eefe:	d0aa      	beq.n	1ee56 <ecp_mul_comb+0x60a>
   1ef00:	4693      	mov	fp, r2
   1ef02:	e639      	b.n	1eb78 <ecp_mul_comb+0x32c>
   1ef04:	4683      	mov	fp, r0
   1ef06:	e74b      	b.n	1eda0 <ecp_mul_comb+0x554>
   1ef08:	a819      	add	r0, sp, #100	; 0x64
   1ef0a:	f8dd a018 	ldr.w	sl, [sp, #24]
   1ef0e:	f7fb fee5 	bl	1acdc <mbedtls_mpi_free>
   1ef12:	a81c      	add	r0, sp, #112	; 0x70
   1ef14:	f7fb fee2 	bl	1acdc <mbedtls_mpi_free>
   1ef18:	a81f      	add	r0, sp, #124	; 0x7c
   1ef1a:	f7fb fedf 	bl	1acdc <mbedtls_mpi_free>
   1ef1e:	a819      	add	r0, sp, #100	; 0x64
   1ef20:	f7fb fed4 	bl	1accc <mbedtls_mpi_init>
   1ef24:	4652      	mov	r2, sl
   1ef26:	9908      	ldr	r1, [sp, #32]
   1ef28:	a819      	add	r0, sp, #100	; 0x64
   1ef2a:	f7fc fe25 	bl	1bb78 <mbedtls_mpi_sub_mpi>
   1ef2e:	465d      	mov	r5, fp
   1ef30:	4683      	mov	fp, r0
   1ef32:	b118      	cbz	r0, 1ef3c <ecp_mul_comb+0x6f0>
   1ef34:	a819      	add	r0, sp, #100	; 0x64
   1ef36:	f7fb fed1 	bl	1acdc <mbedtls_mpi_free>
   1ef3a:	e552      	b.n	1e9e2 <ecp_mul_comb+0x196>
   1ef3c:	4659      	mov	r1, fp
   1ef3e:	4650      	mov	r0, sl
   1ef40:	f7fc fbee 	bl	1b720 <mbedtls_mpi_cmp_int>
   1ef44:	9b02      	ldr	r3, [sp, #8]
   1ef46:	a919      	add	r1, sp, #100	; 0x64
   1ef48:	2800      	cmp	r0, #0
   1ef4a:	bf08      	it	eq
   1ef4c:	2300      	moveq	r3, #0
   1ef4e:	4650      	mov	r0, sl
   1ef50:	461a      	mov	r2, r3
   1ef52:	f7fc f86d 	bl	1b030 <mbedtls_mpi_safe_cond_assign>
   1ef56:	4683      	mov	fp, r0
   1ef58:	a819      	add	r0, sp, #100	; 0x64
   1ef5a:	f7fb febf 	bl	1acdc <mbedtls_mpi_free>
   1ef5e:	f1bb 0f00 	cmp.w	fp, #0
   1ef62:	f47f ad3e 	bne.w	1e9e2 <ecp_mul_comb+0x196>
   1ef66:	4628      	mov	r0, r5
   1ef68:	9904      	ldr	r1, [sp, #16]
   1ef6a:	f7ff f83f 	bl	1dfec <ecp_normalize_jac>
   1ef6e:	9b07      	ldr	r3, [sp, #28]
   1ef70:	4683      	mov	fp, r0
   1ef72:	2b00      	cmp	r3, #0
   1ef74:	f47f acd4 	bne.w	1e920 <ecp_mul_comb+0xd4>
   1ef78:	e4ba      	b.n	1e8f0 <ecp_mul_comb+0xa4>
   1ef7a:	9922      	ldr	r1, [sp, #136]	; 0x88
   1ef7c:	4628      	mov	r0, r5
   1ef7e:	f7ff f835 	bl	1dfec <ecp_normalize_jac>
   1ef82:	4683      	mov	fp, r0
   1ef84:	e698      	b.n	1ecb8 <ecp_mul_comb+0x46c>
   1ef86:	f8df b02c 	ldr.w	fp, [pc, #44]	; 1efb4 <ecp_mul_comb+0x768>
   1ef8a:	e5f5      	b.n	1eb78 <ecp_mul_comb+0x32c>
   1ef8c:	2201      	movs	r2, #1
   1ef8e:	f10a 31ff 	add.w	r1, sl, #4294967295
   1ef92:	eb0a 0403 	add.w	r4, sl, r3
   1ef96:	fa02 f301 	lsl.w	r3, r2, r1
   1ef9a:	3c01      	subs	r4, #1
   1ef9c:	9302      	str	r3, [sp, #8]
   1ef9e:	b2db      	uxtb	r3, r3
   1efa0:	9106      	str	r1, [sp, #24]
   1efa2:	fbb4 f4fa 	udiv	r4, r4, sl
   1efa6:	4656      	mov	r6, sl
   1efa8:	9303      	str	r3, [sp, #12]
   1efaa:	e502      	b.n	1e9b2 <ecp_mul_comb+0x166>
   1efac:	ffffb280 	.word	0xffffb280
   1efb0:	ffffb080 	.word	0xffffb080
   1efb4:	ffffb300 	.word	0xffffb300

0001efb8 <mbedtls_ecp_point_write_binary>:
   1efb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1efbc:	2a01      	cmp	r2, #1
   1efbe:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
   1efc2:	d843      	bhi.n	1f04c <mbedtls_ecp_point_write_binary+0x94>
   1efc4:	460d      	mov	r5, r1
   1efc6:	4681      	mov	r9, r0
   1efc8:	2100      	movs	r1, #0
   1efca:	f105 0018 	add.w	r0, r5, #24
   1efce:	461e      	mov	r6, r3
   1efd0:	4614      	mov	r4, r2
   1efd2:	f7fc fba5 	bl	1b720 <mbedtls_mpi_cmp_int>
   1efd6:	b938      	cbnz	r0, 1efe8 <mbedtls_ecp_point_write_binary+0x30>
   1efd8:	f1b8 0f00 	cmp.w	r8, #0
   1efdc:	d038      	beq.n	1f050 <mbedtls_ecp_point_write_binary+0x98>
   1efde:	2301      	movs	r3, #1
   1efe0:	7038      	strb	r0, [r7, #0]
   1efe2:	6033      	str	r3, [r6, #0]
   1efe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1efe8:	f109 0004 	add.w	r0, r9, #4
   1efec:	f7fc f8f6 	bl	1b1dc <mbedtls_mpi_size>
   1eff0:	4681      	mov	r9, r0
   1eff2:	b9c4      	cbnz	r4, 1f026 <mbedtls_ecp_point_write_binary+0x6e>
   1eff4:	0043      	lsls	r3, r0, #1
   1eff6:	3301      	adds	r3, #1
   1eff8:	4598      	cmp	r8, r3
   1effa:	6033      	str	r3, [r6, #0]
   1effc:	d328      	bcc.n	1f050 <mbedtls_ecp_point_write_binary+0x98>
   1effe:	2304      	movs	r3, #4
   1f000:	4639      	mov	r1, r7
   1f002:	4602      	mov	r2, r0
   1f004:	f801 3b01 	strb.w	r3, [r1], #1
   1f008:	4628      	mov	r0, r5
   1f00a:	f7fc f9a9 	bl	1b360 <mbedtls_mpi_write_binary>
   1f00e:	2800      	cmp	r0, #0
   1f010:	d1e8      	bne.n	1efe4 <mbedtls_ecp_point_write_binary+0x2c>
   1f012:	f109 0101 	add.w	r1, r9, #1
   1f016:	f105 000c 	add.w	r0, r5, #12
   1f01a:	4439      	add	r1, r7
   1f01c:	464a      	mov	r2, r9
   1f01e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f022:	f7fc b99d 	b.w	1b360 <mbedtls_mpi_write_binary>
   1f026:	1c43      	adds	r3, r0, #1
   1f028:	4598      	cmp	r8, r3
   1f02a:	6033      	str	r3, [r6, #0]
   1f02c:	d310      	bcc.n	1f050 <mbedtls_ecp_point_write_binary+0x98>
   1f02e:	2100      	movs	r1, #0
   1f030:	f105 000c 	add.w	r0, r5, #12
   1f034:	f7fc f894 	bl	1b160 <mbedtls_mpi_get_bit>
   1f038:	4639      	mov	r1, r7
   1f03a:	3002      	adds	r0, #2
   1f03c:	f801 0b01 	strb.w	r0, [r1], #1
   1f040:	464a      	mov	r2, r9
   1f042:	4628      	mov	r0, r5
   1f044:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f048:	f7fc b98a 	b.w	1b360 <mbedtls_mpi_write_binary>
   1f04c:	4801      	ldr	r0, [pc, #4]	; (1f054 <mbedtls_ecp_point_write_binary+0x9c>)
   1f04e:	e7c9      	b.n	1efe4 <mbedtls_ecp_point_write_binary+0x2c>
   1f050:	4801      	ldr	r0, [pc, #4]	; (1f058 <mbedtls_ecp_point_write_binary+0xa0>)
   1f052:	e7c7      	b.n	1efe4 <mbedtls_ecp_point_write_binary+0x2c>
   1f054:	ffffb080 	.word	0xffffb080
   1f058:	ffffb100 	.word	0xffffb100

0001f05c <mbedtls_ecp_point_read_binary>:
   1f05c:	2b00      	cmp	r3, #0
   1f05e:	d041      	beq.n	1f0e4 <mbedtls_ecp_point_read_binary+0x88>
   1f060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f062:	461e      	mov	r6, r3
   1f064:	7813      	ldrb	r3, [r2, #0]
   1f066:	4614      	mov	r4, r2
   1f068:	460d      	mov	r5, r1
   1f06a:	b9ab      	cbnz	r3, 1f098 <mbedtls_ecp_point_read_binary+0x3c>
   1f06c:	2e01      	cmp	r6, #1
   1f06e:	d135      	bne.n	1f0dc <mbedtls_ecp_point_read_binary+0x80>
   1f070:	4631      	mov	r1, r6
   1f072:	4628      	mov	r0, r5
   1f074:	f7fc f83a 	bl	1b0ec <mbedtls_mpi_lset>
   1f078:	b100      	cbz	r0, 1f07c <mbedtls_ecp_point_read_binary+0x20>
   1f07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f07c:	4631      	mov	r1, r6
   1f07e:	f105 000c 	add.w	r0, r5, #12
   1f082:	f7fc f833 	bl	1b0ec <mbedtls_mpi_lset>
   1f086:	2800      	cmp	r0, #0
   1f088:	d1f7      	bne.n	1f07a <mbedtls_ecp_point_read_binary+0x1e>
   1f08a:	4601      	mov	r1, r0
   1f08c:	f105 0018 	add.w	r0, r5, #24
   1f090:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1f094:	f7fc b82a 	b.w	1b0ec <mbedtls_mpi_lset>
   1f098:	3004      	adds	r0, #4
   1f09a:	f7fc f89f 	bl	1b1dc <mbedtls_mpi_size>
   1f09e:	7823      	ldrb	r3, [r4, #0]
   1f0a0:	4607      	mov	r7, r0
   1f0a2:	2b04      	cmp	r3, #4
   1f0a4:	d11c      	bne.n	1f0e0 <mbedtls_ecp_point_read_binary+0x84>
   1f0a6:	0043      	lsls	r3, r0, #1
   1f0a8:	3301      	adds	r3, #1
   1f0aa:	429e      	cmp	r6, r3
   1f0ac:	d116      	bne.n	1f0dc <mbedtls_ecp_point_read_binary+0x80>
   1f0ae:	4602      	mov	r2, r0
   1f0b0:	1c61      	adds	r1, r4, #1
   1f0b2:	4628      	mov	r0, r5
   1f0b4:	f7fc f8c2 	bl	1b23c <mbedtls_mpi_read_binary>
   1f0b8:	2800      	cmp	r0, #0
   1f0ba:	d1de      	bne.n	1f07a <mbedtls_ecp_point_read_binary+0x1e>
   1f0bc:	1c79      	adds	r1, r7, #1
   1f0be:	4421      	add	r1, r4
   1f0c0:	463a      	mov	r2, r7
   1f0c2:	f105 000c 	add.w	r0, r5, #12
   1f0c6:	f7fc f8b9 	bl	1b23c <mbedtls_mpi_read_binary>
   1f0ca:	2800      	cmp	r0, #0
   1f0cc:	d1d5      	bne.n	1f07a <mbedtls_ecp_point_read_binary+0x1e>
   1f0ce:	f105 0018 	add.w	r0, r5, #24
   1f0d2:	2101      	movs	r1, #1
   1f0d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1f0d8:	f7fc b808 	b.w	1b0ec <mbedtls_mpi_lset>
   1f0dc:	4802      	ldr	r0, [pc, #8]	; (1f0e8 <mbedtls_ecp_point_read_binary+0x8c>)
   1f0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f0e0:	4802      	ldr	r0, [pc, #8]	; (1f0ec <mbedtls_ecp_point_read_binary+0x90>)
   1f0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f0e4:	4800      	ldr	r0, [pc, #0]	; (1f0e8 <mbedtls_ecp_point_read_binary+0x8c>)
   1f0e6:	4770      	bx	lr
   1f0e8:	ffffb080 	.word	0xffffb080
   1f0ec:	ffffb180 	.word	0xffffb180

0001f0f0 <mbedtls_ecp_check_pubkey>:
   1f0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f0f4:	460c      	mov	r4, r1
   1f0f6:	b086      	sub	sp, #24
   1f0f8:	4605      	mov	r5, r0
   1f0fa:	2101      	movs	r1, #1
   1f0fc:	f104 0018 	add.w	r0, r4, #24
   1f100:	f7fc fb0e 	bl	1b720 <mbedtls_mpi_cmp_int>
   1f104:	2800      	cmp	r0, #0
   1f106:	f040 809f 	bne.w	1f248 <mbedtls_ecp_check_pubkey+0x158>
   1f10a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1f10c:	2b00      	cmp	r3, #0
   1f10e:	f000 80a0 	beq.w	1f252 <mbedtls_ecp_check_pubkey+0x162>
   1f112:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1f114:	2b00      	cmp	r3, #0
   1f116:	f000 809c 	beq.w	1f252 <mbedtls_ecp_check_pubkey+0x162>
   1f11a:	4601      	mov	r1, r0
   1f11c:	4606      	mov	r6, r0
   1f11e:	4620      	mov	r0, r4
   1f120:	f7fc fafe 	bl	1b720 <mbedtls_mpi_cmp_int>
   1f124:	2800      	cmp	r0, #0
   1f126:	f2c0 808f 	blt.w	1f248 <mbedtls_ecp_check_pubkey+0x158>
   1f12a:	f104 070c 	add.w	r7, r4, #12
   1f12e:	4631      	mov	r1, r6
   1f130:	4638      	mov	r0, r7
   1f132:	f7fc faf5 	bl	1b720 <mbedtls_mpi_cmp_int>
   1f136:	2800      	cmp	r0, #0
   1f138:	f2c0 8086 	blt.w	1f248 <mbedtls_ecp_check_pubkey+0x158>
   1f13c:	f105 0804 	add.w	r8, r5, #4
   1f140:	4641      	mov	r1, r8
   1f142:	4620      	mov	r0, r4
   1f144:	f7fc fa84 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1f148:	2800      	cmp	r0, #0
   1f14a:	da7d      	bge.n	1f248 <mbedtls_ecp_check_pubkey+0x158>
   1f14c:	4641      	mov	r1, r8
   1f14e:	4638      	mov	r0, r7
   1f150:	f7fc fa7e 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1f154:	2800      	cmp	r0, #0
   1f156:	da77      	bge.n	1f248 <mbedtls_ecp_check_pubkey+0x158>
   1f158:	4668      	mov	r0, sp
   1f15a:	f7fb fdb7 	bl	1accc <mbedtls_mpi_init>
   1f15e:	a803      	add	r0, sp, #12
   1f160:	f7fb fdb4 	bl	1accc <mbedtls_mpi_init>
   1f164:	463a      	mov	r2, r7
   1f166:	4639      	mov	r1, r7
   1f168:	4668      	mov	r0, sp
   1f16a:	f7fc fdc5 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1f16e:	4606      	mov	r6, r0
   1f170:	b148      	cbz	r0, 1f186 <mbedtls_ecp_check_pubkey+0x96>
   1f172:	4668      	mov	r0, sp
   1f174:	f7fb fdb2 	bl	1acdc <mbedtls_mpi_free>
   1f178:	a803      	add	r0, sp, #12
   1f17a:	f7fb fdaf 	bl	1acdc <mbedtls_mpi_free>
   1f17e:	4630      	mov	r0, r6
   1f180:	b006      	add	sp, #24
   1f182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f186:	4629      	mov	r1, r5
   1f188:	4668      	mov	r0, sp
   1f18a:	f7fe fc93 	bl	1dab4 <ecp_modp>
   1f18e:	4606      	mov	r6, r0
   1f190:	2800      	cmp	r0, #0
   1f192:	d1ee      	bne.n	1f172 <mbedtls_ecp_check_pubkey+0x82>
   1f194:	4622      	mov	r2, r4
   1f196:	4621      	mov	r1, r4
   1f198:	a803      	add	r0, sp, #12
   1f19a:	f7fc fdad 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1f19e:	4606      	mov	r6, r0
   1f1a0:	2800      	cmp	r0, #0
   1f1a2:	d1e6      	bne.n	1f172 <mbedtls_ecp_check_pubkey+0x82>
   1f1a4:	4629      	mov	r1, r5
   1f1a6:	a803      	add	r0, sp, #12
   1f1a8:	f7fe fc84 	bl	1dab4 <ecp_modp>
   1f1ac:	4606      	mov	r6, r0
   1f1ae:	2800      	cmp	r0, #0
   1f1b0:	d1df      	bne.n	1f172 <mbedtls_ecp_check_pubkey+0x82>
   1f1b2:	69ab      	ldr	r3, [r5, #24]
   1f1b4:	2b00      	cmp	r3, #0
   1f1b6:	d04e      	beq.n	1f256 <mbedtls_ecp_check_pubkey+0x166>
   1f1b8:	a903      	add	r1, sp, #12
   1f1ba:	f105 0210 	add.w	r2, r5, #16
   1f1be:	4608      	mov	r0, r1
   1f1c0:	f7fc fc66 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1f1c4:	4606      	mov	r6, r0
   1f1c6:	2800      	cmp	r0, #0
   1f1c8:	d1d3      	bne.n	1f172 <mbedtls_ecp_check_pubkey+0x82>
   1f1ca:	e007      	b.n	1f1dc <mbedtls_ecp_check_pubkey+0xec>
   1f1cc:	a903      	add	r1, sp, #12
   1f1ce:	4642      	mov	r2, r8
   1f1d0:	4608      	mov	r0, r1
   1f1d2:	f7fc fb9d 	bl	1b910 <mbedtls_mpi_sub_abs>
   1f1d6:	4606      	mov	r6, r0
   1f1d8:	2800      	cmp	r0, #0
   1f1da:	d1ca      	bne.n	1f172 <mbedtls_ecp_check_pubkey+0x82>
   1f1dc:	4641      	mov	r1, r8
   1f1de:	a803      	add	r0, sp, #12
   1f1e0:	f7fc fa36 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1f1e4:	2800      	cmp	r0, #0
   1f1e6:	daf1      	bge.n	1f1cc <mbedtls_ecp_check_pubkey+0xdc>
   1f1e8:	a903      	add	r1, sp, #12
   1f1ea:	4622      	mov	r2, r4
   1f1ec:	4608      	mov	r0, r1
   1f1ee:	f7fc fd83 	bl	1bcf8 <mbedtls_mpi_mul_mpi>
   1f1f2:	4606      	mov	r6, r0
   1f1f4:	2800      	cmp	r0, #0
   1f1f6:	d1bc      	bne.n	1f172 <mbedtls_ecp_check_pubkey+0x82>
   1f1f8:	4629      	mov	r1, r5
   1f1fa:	a803      	add	r0, sp, #12
   1f1fc:	f7fe fc5a 	bl	1dab4 <ecp_modp>
   1f200:	4606      	mov	r6, r0
   1f202:	2800      	cmp	r0, #0
   1f204:	d1b5      	bne.n	1f172 <mbedtls_ecp_check_pubkey+0x82>
   1f206:	a903      	add	r1, sp, #12
   1f208:	f105 021c 	add.w	r2, r5, #28
   1f20c:	4608      	mov	r0, r1
   1f20e:	f7fc fc3f 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1f212:	4606      	mov	r6, r0
   1f214:	2800      	cmp	r0, #0
   1f216:	d1ac      	bne.n	1f172 <mbedtls_ecp_check_pubkey+0x82>
   1f218:	e007      	b.n	1f22a <mbedtls_ecp_check_pubkey+0x13a>
   1f21a:	a903      	add	r1, sp, #12
   1f21c:	4642      	mov	r2, r8
   1f21e:	4608      	mov	r0, r1
   1f220:	f7fc fb76 	bl	1b910 <mbedtls_mpi_sub_abs>
   1f224:	4606      	mov	r6, r0
   1f226:	2800      	cmp	r0, #0
   1f228:	d1a3      	bne.n	1f172 <mbedtls_ecp_check_pubkey+0x82>
   1f22a:	4641      	mov	r1, r8
   1f22c:	a803      	add	r0, sp, #12
   1f22e:	f7fc fa0f 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1f232:	2800      	cmp	r0, #0
   1f234:	daf1      	bge.n	1f21a <mbedtls_ecp_check_pubkey+0x12a>
   1f236:	a903      	add	r1, sp, #12
   1f238:	4668      	mov	r0, sp
   1f23a:	f7fc fa09 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1f23e:	4e14      	ldr	r6, [pc, #80]	; (1f290 <mbedtls_ecp_check_pubkey+0x1a0>)
   1f240:	2800      	cmp	r0, #0
   1f242:	bf08      	it	eq
   1f244:	2600      	moveq	r6, #0
   1f246:	e794      	b.n	1f172 <mbedtls_ecp_check_pubkey+0x82>
   1f248:	4e11      	ldr	r6, [pc, #68]	; (1f290 <mbedtls_ecp_check_pubkey+0x1a0>)
   1f24a:	4630      	mov	r0, r6
   1f24c:	b006      	add	sp, #24
   1f24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f252:	4e10      	ldr	r6, [pc, #64]	; (1f294 <mbedtls_ecp_check_pubkey+0x1a4>)
   1f254:	e793      	b.n	1f17e <mbedtls_ecp_check_pubkey+0x8e>
   1f256:	a903      	add	r1, sp, #12
   1f258:	2203      	movs	r2, #3
   1f25a:	4608      	mov	r0, r1
   1f25c:	f7fc fd00 	bl	1bc60 <mbedtls_mpi_sub_int>
   1f260:	4606      	mov	r6, r0
   1f262:	2800      	cmp	r0, #0
   1f264:	d185      	bne.n	1f172 <mbedtls_ecp_check_pubkey+0x82>
   1f266:	e00e      	b.n	1f286 <mbedtls_ecp_check_pubkey+0x196>
   1f268:	2100      	movs	r1, #0
   1f26a:	a803      	add	r0, sp, #12
   1f26c:	f7fc fa58 	bl	1b720 <mbedtls_mpi_cmp_int>
   1f270:	2800      	cmp	r0, #0
   1f272:	d0b9      	beq.n	1f1e8 <mbedtls_ecp_check_pubkey+0xf8>
   1f274:	a903      	add	r1, sp, #12
   1f276:	4642      	mov	r2, r8
   1f278:	4608      	mov	r0, r1
   1f27a:	f7fc fc09 	bl	1ba90 <mbedtls_mpi_add_mpi>
   1f27e:	4606      	mov	r6, r0
   1f280:	2800      	cmp	r0, #0
   1f282:	f47f af76 	bne.w	1f172 <mbedtls_ecp_check_pubkey+0x82>
   1f286:	9b03      	ldr	r3, [sp, #12]
   1f288:	2b00      	cmp	r3, #0
   1f28a:	dbed      	blt.n	1f268 <mbedtls_ecp_check_pubkey+0x178>
   1f28c:	e7ac      	b.n	1f1e8 <mbedtls_ecp_check_pubkey+0xf8>
   1f28e:	bf00      	nop
   1f290:	ffffb380 	.word	0xffffb380
   1f294:	ffffb080 	.word	0xffffb080

0001f298 <mbedtls_ecp_check_pub_priv>:
   1f298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f29c:	7803      	ldrb	r3, [r0, #0]
   1f29e:	b0ab      	sub	sp, #172	; 0xac
   1f2a0:	2b00      	cmp	r3, #0
   1f2a2:	f000 80c4 	beq.w	1f42e <mbedtls_ecp_check_pub_priv+0x196>
   1f2a6:	780a      	ldrb	r2, [r1, #0]
   1f2a8:	429a      	cmp	r2, r3
   1f2aa:	f040 80c0 	bne.w	1f42e <mbedtls_ecp_check_pub_priv+0x196>
   1f2ae:	f101 0788 	add.w	r7, r1, #136	; 0x88
   1f2b2:	460c      	mov	r4, r1
   1f2b4:	4605      	mov	r5, r0
   1f2b6:	4639      	mov	r1, r7
   1f2b8:	3088      	adds	r0, #136	; 0x88
   1f2ba:	f7fc f9c9 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1f2be:	2800      	cmp	r0, #0
   1f2c0:	f040 80b5 	bne.w	1f42e <mbedtls_ecp_check_pub_priv+0x196>
   1f2c4:	f104 0994 	add.w	r9, r4, #148	; 0x94
   1f2c8:	4649      	mov	r1, r9
   1f2ca:	f105 0094 	add.w	r0, r5, #148	; 0x94
   1f2ce:	f7fc f9bf 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1f2d2:	2800      	cmp	r0, #0
   1f2d4:	f040 80ab 	bne.w	1f42e <mbedtls_ecp_check_pub_priv+0x196>
   1f2d8:	f104 08a0 	add.w	r8, r4, #160	; 0xa0
   1f2dc:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
   1f2e0:	4641      	mov	r1, r8
   1f2e2:	f7fc f9b5 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1f2e6:	4606      	mov	r6, r0
   1f2e8:	2800      	cmp	r0, #0
   1f2ea:	f040 80a0 	bne.w	1f42e <mbedtls_ecp_check_pub_priv+0x196>
   1f2ee:	4625      	mov	r5, r4
   1f2f0:	a802      	add	r0, sp, #8
   1f2f2:	f7fb fceb 	bl	1accc <mbedtls_mpi_init>
   1f2f6:	a805      	add	r0, sp, #20
   1f2f8:	f7fb fce8 	bl	1accc <mbedtls_mpi_init>
   1f2fc:	a808      	add	r0, sp, #32
   1f2fe:	f7fb fce5 	bl	1accc <mbedtls_mpi_init>
   1f302:	4631      	mov	r1, r6
   1f304:	227c      	movs	r2, #124	; 0x7c
   1f306:	a80b      	add	r0, sp, #44	; 0x2c
   1f308:	f00b faec 	bl	2a8e4 <memset>
   1f30c:	f815 1b7c 	ldrb.w	r1, [r5], #124
   1f310:	a80b      	add	r0, sp, #44	; 0x2c
   1f312:	f000 f89f 	bl	1f454 <mbedtls_ecp_group_load>
   1f316:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1f31a:	2101      	movs	r1, #1
   1f31c:	3428      	adds	r4, #40	; 0x28
   1f31e:	f7fc f9ff 	bl	1b720 <mbedtls_mpi_cmp_int>
   1f322:	2800      	cmp	r0, #0
   1f324:	f040 8081 	bne.w	1f42a <mbedtls_ecp_check_pub_priv+0x192>
   1f328:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1f32a:	2b00      	cmp	r3, #0
   1f32c:	d07d      	beq.n	1f42a <mbedtls_ecp_check_pub_priv+0x192>
   1f32e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1f330:	2b00      	cmp	r3, #0
   1f332:	d07a      	beq.n	1f42a <mbedtls_ecp_check_pub_priv+0x192>
   1f334:	2101      	movs	r1, #1
   1f336:	4628      	mov	r0, r5
   1f338:	f7fc f9f2 	bl	1b720 <mbedtls_mpi_cmp_int>
   1f33c:	2800      	cmp	r0, #0
   1f33e:	f2c0 8083 	blt.w	1f448 <mbedtls_ecp_check_pub_priv+0x1b0>
   1f342:	a91e      	add	r1, sp, #120	; 0x78
   1f344:	4628      	mov	r0, r5
   1f346:	f7fc f983 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1f34a:	2800      	cmp	r0, #0
   1f34c:	da7c      	bge.n	1f448 <mbedtls_ecp_check_pub_priv+0x1b0>
   1f34e:	4621      	mov	r1, r4
   1f350:	a80b      	add	r0, sp, #44	; 0x2c
   1f352:	f7ff fecd 	bl	1f0f0 <mbedtls_ecp_check_pubkey>
   1f356:	4606      	mov	r6, r0
   1f358:	b980      	cbnz	r0, 1f37c <mbedtls_ecp_check_pub_priv+0xe4>
   1f35a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1f35c:	2b00      	cmp	r3, #0
   1f35e:	d064      	beq.n	1f42a <mbedtls_ecp_check_pub_priv+0x192>
   1f360:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1f362:	2b00      	cmp	r3, #0
   1f364:	d061      	beq.n	1f42a <mbedtls_ecp_check_pub_priv+0x192>
   1f366:	e9cd 0000 	strd	r0, r0, [sp]
   1f36a:	4623      	mov	r3, r4
   1f36c:	462a      	mov	r2, r5
   1f36e:	a902      	add	r1, sp, #8
   1f370:	a80b      	add	r0, sp, #44	; 0x2c
   1f372:	f7ff fa6b 	bl	1e84c <ecp_mul_comb>
   1f376:	4606      	mov	r6, r0
   1f378:	2800      	cmp	r0, #0
   1f37a:	d04c      	beq.n	1f416 <mbedtls_ecp_check_pub_priv+0x17e>
   1f37c:	a802      	add	r0, sp, #8
   1f37e:	f7fb fcad 	bl	1acdc <mbedtls_mpi_free>
   1f382:	a805      	add	r0, sp, #20
   1f384:	f7fb fcaa 	bl	1acdc <mbedtls_mpi_free>
   1f388:	a808      	add	r0, sp, #32
   1f38a:	f7fb fca7 	bl	1acdc <mbedtls_mpi_free>
   1f38e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1f390:	2b01      	cmp	r3, #1
   1f392:	d126      	bne.n	1f3e2 <mbedtls_ecp_check_pub_priv+0x14a>
   1f394:	9828      	ldr	r0, [sp, #160]	; 0xa0
   1f396:	b1c8      	cbz	r0, 1f3cc <mbedtls_ecp_check_pub_priv+0x134>
   1f398:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1f39a:	b1aa      	cbz	r2, 1f3c8 <mbedtls_ecp_check_pub_priv+0x130>
   1f39c:	2500      	movs	r5, #0
   1f39e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   1f3a2:	eb10 0483 	adds.w	r4, r0, r3, lsl #2
   1f3a6:	d032      	beq.n	1f40e <mbedtls_ecp_check_pub_priv+0x176>
   1f3a8:	4620      	mov	r0, r4
   1f3aa:	f7fb fc97 	bl	1acdc <mbedtls_mpi_free>
   1f3ae:	f104 000c 	add.w	r0, r4, #12
   1f3b2:	f7fb fc93 	bl	1acdc <mbedtls_mpi_free>
   1f3b6:	f104 0018 	add.w	r0, r4, #24
   1f3ba:	f7fb fc8f 	bl	1acdc <mbedtls_mpi_free>
   1f3be:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1f3c0:	3501      	adds	r5, #1
   1f3c2:	4295      	cmp	r5, r2
   1f3c4:	9828      	ldr	r0, [sp, #160]	; 0xa0
   1f3c6:	d3ea      	bcc.n	1f39e <mbedtls_ecp_check_pub_priv+0x106>
   1f3c8:	f7f9 ff0c 	bl	191e4 <nrf_free>
   1f3cc:	2200      	movs	r2, #0
   1f3ce:	ab0b      	add	r3, sp, #44	; 0x2c
   1f3d0:	701a      	strb	r2, [r3, #0]
   1f3d2:	a92a      	add	r1, sp, #168	; 0xa8
   1f3d4:	3301      	adds	r3, #1
   1f3d6:	428b      	cmp	r3, r1
   1f3d8:	d1fa      	bne.n	1f3d0 <mbedtls_ecp_check_pub_priv+0x138>
   1f3da:	4630      	mov	r0, r6
   1f3dc:	b02b      	add	sp, #172	; 0xac
   1f3de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f3e2:	a80c      	add	r0, sp, #48	; 0x30
   1f3e4:	f7fb fc7a 	bl	1acdc <mbedtls_mpi_free>
   1f3e8:	a80f      	add	r0, sp, #60	; 0x3c
   1f3ea:	f7fb fc77 	bl	1acdc <mbedtls_mpi_free>
   1f3ee:	a812      	add	r0, sp, #72	; 0x48
   1f3f0:	f7fb fc74 	bl	1acdc <mbedtls_mpi_free>
   1f3f4:	a815      	add	r0, sp, #84	; 0x54
   1f3f6:	f7fb fc71 	bl	1acdc <mbedtls_mpi_free>
   1f3fa:	a818      	add	r0, sp, #96	; 0x60
   1f3fc:	f7fb fc6e 	bl	1acdc <mbedtls_mpi_free>
   1f400:	a81b      	add	r0, sp, #108	; 0x6c
   1f402:	f7fb fc6b 	bl	1acdc <mbedtls_mpi_free>
   1f406:	a81e      	add	r0, sp, #120	; 0x78
   1f408:	f7fb fc68 	bl	1acdc <mbedtls_mpi_free>
   1f40c:	e7c2      	b.n	1f394 <mbedtls_ecp_check_pub_priv+0xfc>
   1f40e:	3501      	adds	r5, #1
   1f410:	4295      	cmp	r5, r2
   1f412:	d3c4      	bcc.n	1f39e <mbedtls_ecp_check_pub_priv+0x106>
   1f414:	e7d8      	b.n	1f3c8 <mbedtls_ecp_check_pub_priv+0x130>
   1f416:	4639      	mov	r1, r7
   1f418:	a802      	add	r0, sp, #8
   1f41a:	f7fc f919 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1f41e:	b920      	cbnz	r0, 1f42a <mbedtls_ecp_check_pub_priv+0x192>
   1f420:	4649      	mov	r1, r9
   1f422:	a805      	add	r0, sp, #20
   1f424:	f7fc f914 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1f428:	b130      	cbz	r0, 1f438 <mbedtls_ecp_check_pub_priv+0x1a0>
   1f42a:	4e08      	ldr	r6, [pc, #32]	; (1f44c <mbedtls_ecp_check_pub_priv+0x1b4>)
   1f42c:	e7a6      	b.n	1f37c <mbedtls_ecp_check_pub_priv+0xe4>
   1f42e:	4e07      	ldr	r6, [pc, #28]	; (1f44c <mbedtls_ecp_check_pub_priv+0x1b4>)
   1f430:	4630      	mov	r0, r6
   1f432:	b02b      	add	sp, #172	; 0xac
   1f434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f438:	4641      	mov	r1, r8
   1f43a:	a808      	add	r0, sp, #32
   1f43c:	f7fc f908 	bl	1b650 <mbedtls_mpi_cmp_mpi>
   1f440:	4606      	mov	r6, r0
   1f442:	2800      	cmp	r0, #0
   1f444:	d09a      	beq.n	1f37c <mbedtls_ecp_check_pub_priv+0xe4>
   1f446:	e7f0      	b.n	1f42a <mbedtls_ecp_check_pub_priv+0x192>
   1f448:	4e01      	ldr	r6, [pc, #4]	; (1f450 <mbedtls_ecp_check_pub_priv+0x1b8>)
   1f44a:	e797      	b.n	1f37c <mbedtls_ecp_check_pub_priv+0xe4>
   1f44c:	ffffb080 	.word	0xffffb080
   1f450:	ffffb380 	.word	0xffffb380

0001f454 <mbedtls_ecp_group_load>:
   1f454:	b570      	push	{r4, r5, r6, lr}
   1f456:	460d      	mov	r5, r1
   1f458:	4604      	mov	r4, r0
   1f45a:	f7fe ff59 	bl	1e310 <mbedtls_ecp_group_free>
   1f45e:	2d03      	cmp	r5, #3
   1f460:	7025      	strb	r5, [r4, #0]
   1f462:	d125      	bne.n	1f4b0 <mbedtls_ecp_group_load+0x5c>
   1f464:	2308      	movs	r3, #8
   1f466:	2501      	movs	r5, #1
   1f468:	4a14      	ldr	r2, [pc, #80]	; (1f4bc <mbedtls_ecp_group_load+0x68>)
   1f46a:	4915      	ldr	r1, [pc, #84]	; (1f4c0 <mbedtls_ecp_group_load+0x6c>)
   1f46c:	60a3      	str	r3, [r4, #8]
   1f46e:	6223      	str	r3, [r4, #32]
   1f470:	6523      	str	r3, [r4, #80]	; 0x50
   1f472:	62e3      	str	r3, [r4, #44]	; 0x2c
   1f474:	63a3      	str	r3, [r4, #56]	; 0x38
   1f476:	60e2      	str	r2, [r4, #12]
   1f478:	4b12      	ldr	r3, [pc, #72]	; (1f4c4 <mbedtls_ecp_group_load+0x70>)
   1f47a:	4a13      	ldr	r2, [pc, #76]	; (1f4c8 <mbedtls_ecp_group_load+0x74>)
   1f47c:	4e13      	ldr	r6, [pc, #76]	; (1f4cc <mbedtls_ecp_group_load+0x78>)
   1f47e:	4814      	ldr	r0, [pc, #80]	; (1f4d0 <mbedtls_ecp_group_load+0x7c>)
   1f480:	6321      	str	r1, [r4, #48]	; 0x30
   1f482:	6560      	str	r0, [r4, #84]	; 0x54
   1f484:	63e2      	str	r2, [r4, #60]	; 0x3c
   1f486:	64a3      	str	r3, [r4, #72]	; 0x48
   1f488:	6065      	str	r5, [r4, #4]
   1f48a:	61e5      	str	r5, [r4, #28]
   1f48c:	64e5      	str	r5, [r4, #76]	; 0x4c
   1f48e:	62a5      	str	r5, [r4, #40]	; 0x28
   1f490:	6365      	str	r5, [r4, #52]	; 0x34
   1f492:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
   1f496:	6266      	str	r6, [r4, #36]	; 0x24
   1f498:	1d20      	adds	r0, r4, #4
   1f49a:	f7fb fe71 	bl	1b180 <mbedtls_mpi_bitlen>
   1f49e:	65a0      	str	r0, [r4, #88]	; 0x58
   1f4a0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1f4a4:	f7fb fe6c 	bl	1b180 <mbedtls_mpi_bitlen>
   1f4a8:	e9c4 0517 	strd	r0, r5, [r4, #92]	; 0x5c
   1f4ac:	2000      	movs	r0, #0
   1f4ae:	bd70      	pop	{r4, r5, r6, pc}
   1f4b0:	4620      	mov	r0, r4
   1f4b2:	f7fe ff2d 	bl	1e310 <mbedtls_ecp_group_free>
   1f4b6:	4807      	ldr	r0, [pc, #28]	; (1f4d4 <mbedtls_ecp_group_load+0x80>)
   1f4b8:	bd70      	pop	{r4, r5, r6, pc}
   1f4ba:	bf00      	nop
   1f4bc:	00033684 	.word	0x00033684
   1f4c0:	00033624 	.word	0x00033624
   1f4c4:	2002d85c 	.word	0x2002d85c
   1f4c8:	00033644 	.word	0x00033644
   1f4cc:	00033604 	.word	0x00033604
   1f4d0:	00033664 	.word	0x00033664
   1f4d4:	ffffb180 	.word	0xffffb180

0001f4d8 <entropy_callback>:
   1f4d8:	b538      	push	{r3, r4, r5, lr}
   1f4da:	4c0a      	ldr	r4, [pc, #40]	; (1f504 <entropy_callback+0x2c>)
   1f4dc:	4b0a      	ldr	r3, [pc, #40]	; (1f508 <entropy_callback+0x30>)
   1f4de:	7825      	ldrb	r5, [r4, #0]
   1f4e0:	2a07      	cmp	r2, #7
   1f4e2:	bf28      	it	cs
   1f4e4:	2207      	movcs	r2, #7
   1f4e6:	4608      	mov	r0, r1
   1f4e8:	eb03 1145 	add.w	r1, r3, r5, lsl #5
   1f4ec:	f7ee fb74 	bl	dbd8 <memcpy>
   1f4f0:	7823      	ldrb	r3, [r4, #0]
   1f4f2:	2000      	movs	r0, #0
   1f4f4:	3301      	adds	r3, #1
   1f4f6:	b2db      	uxtb	r3, r3
   1f4f8:	2b07      	cmp	r3, #7
   1f4fa:	bf08      	it	eq
   1f4fc:	2300      	moveq	r3, #0
   1f4fe:	7023      	strb	r3, [r4, #0]
   1f500:	bd38      	pop	{r3, r4, r5, pc}
   1f502:	bf00      	nop
   1f504:	20027d9e 	.word	0x20027d9e
   1f508:	000336a4 	.word	0x000336a4

0001f50c <es256_key_generate>:
   1f50c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f50e:	b0e5      	sub	sp, #404	; 0x194
   1f510:	f89d 71a8 	ldrb.w	r7, [sp, #424]	; 0x1a8
   1f514:	b158      	cbz	r0, 1f52e <es256_key_generate+0x22>
   1f516:	b152      	cbz	r2, 1f52e <es256_key_generate+0x22>
   1f518:	b14b      	cbz	r3, 1f52e <es256_key_generate+0x22>
   1f51a:	291f      	cmp	r1, #31
   1f51c:	d907      	bls.n	1f52e <es256_key_generate+0x22>
   1f51e:	6819      	ldr	r1, [r3, #0]
   1f520:	293f      	cmp	r1, #63	; 0x3f
   1f522:	d904      	bls.n	1f52e <es256_key_generate+0x22>
   1f524:	b13f      	cbz	r7, 1f536 <es256_key_generate+0x2a>
   1f526:	2955      	cmp	r1, #85	; 0x55
   1f528:	d805      	bhi.n	1f536 <es256_key_generate+0x2a>
   1f52a:	240c      	movs	r4, #12
   1f52c:	e000      	b.n	1f530 <es256_key_generate+0x24>
   1f52e:	2416      	movs	r4, #22
   1f530:	4620      	mov	r0, r4
   1f532:	b065      	add	sp, #404	; 0x194
   1f534:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f536:	461d      	mov	r5, r3
   1f538:	2304      	movs	r3, #4
   1f53a:	2100      	movs	r1, #0
   1f53c:	4604      	mov	r4, r0
   1f53e:	4616      	mov	r6, r2
   1f540:	a814      	add	r0, sp, #80	; 0x50
   1f542:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1f546:	f88d 300c 	strb.w	r3, [sp, #12]
   1f54a:	f00b f9cb 	bl	2a8e4 <memset>
   1f54e:	a814      	add	r0, sp, #80	; 0x50
   1f550:	f7fd ff52 	bl	1d3f8 <mbedtls_ctr_drbg_init>
   1f554:	2300      	movs	r3, #0
   1f556:	4929      	ldr	r1, [pc, #164]	; (1f5fc <es256_key_generate+0xf0>)
   1f558:	461a      	mov	r2, r3
   1f55a:	a814      	add	r0, sp, #80	; 0x50
   1f55c:	9300      	str	r3, [sp, #0]
   1f55e:	f7fe f84d 	bl	1d5fc <mbedtls_ctr_drbg_seed>
   1f562:	a814      	add	r0, sp, #80	; 0x50
   1f564:	2220      	movs	r2, #32
   1f566:	4621      	mov	r1, r4
   1f568:	f7fe f870 	bl	1d64c <mbedtls_ctr_drbg_random>
   1f56c:	b9b8      	cbnz	r0, 1f59e <es256_key_generate+0x92>
   1f56e:	a814      	add	r0, sp, #80	; 0x50
   1f570:	f7fd ff48 	bl	1d404 <mbedtls_ctr_drbg_free>
   1f574:	4621      	mov	r1, r4
   1f576:	f10d 000d 	add.w	r0, sp, #13
   1f57a:	f00a fb03 	bl	29b84 <ocrypto_ecdsa_p256_public_key>
   1f57e:	4604      	mov	r4, r0
   1f580:	b9b8      	cbnz	r0, 1f5b2 <es256_key_generate+0xa6>
   1f582:	b1c7      	cbz	r7, 1f5b6 <es256_key_generate+0xaa>
   1f584:	a814      	add	r0, sp, #80	; 0x50
   1f586:	f000 f8f5 	bl	1f774 <mbedtls_pk_init>
   1f58a:	2002      	movs	r0, #2
   1f58c:	f000 f8f8 	bl	1f780 <mbedtls_pk_info_from_type>
   1f590:	4601      	mov	r1, r0
   1f592:	a814      	add	r0, sp, #80	; 0x50
   1f594:	f000 f902 	bl	1f79c <mbedtls_pk_setup>
   1f598:	b1a8      	cbz	r0, 1f5c6 <es256_key_generate+0xba>
   1f59a:	240e      	movs	r4, #14
   1f59c:	e7c8      	b.n	1f530 <es256_key_generate+0x24>
   1f59e:	4a18      	ldr	r2, [pc, #96]	; (1f600 <es256_key_generate+0xf4>)
   1f5a0:	4b18      	ldr	r3, [pc, #96]	; (1f604 <es256_key_generate+0xf8>)
   1f5a2:	7811      	ldrb	r1, [r2, #0]
   1f5a4:	4620      	mov	r0, r4
   1f5a6:	2207      	movs	r2, #7
   1f5a8:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   1f5ac:	f7ee fb14 	bl	dbd8 <memcpy>
   1f5b0:	e7dd      	b.n	1f56e <es256_key_generate+0x62>
   1f5b2:	2423      	movs	r4, #35	; 0x23
   1f5b4:	e7bc      	b.n	1f530 <es256_key_generate+0x24>
   1f5b6:	a903      	add	r1, sp, #12
   1f5b8:	1c70      	adds	r0, r6, #1
   1f5ba:	2240      	movs	r2, #64	; 0x40
   1f5bc:	f7ee fb0c 	bl	dbd8 <memcpy>
   1f5c0:	2341      	movs	r3, #65	; 0x41
   1f5c2:	602b      	str	r3, [r5, #0]
   1f5c4:	e7b4      	b.n	1f530 <es256_key_generate+0x24>
   1f5c6:	2103      	movs	r1, #3
   1f5c8:	9815      	ldr	r0, [sp, #84]	; 0x54
   1f5ca:	f7ff ff43 	bl	1f454 <mbedtls_ecp_group_load>
   1f5ce:	2800      	cmp	r0, #0
   1f5d0:	d1e3      	bne.n	1f59a <es256_key_generate+0x8e>
   1f5d2:	9815      	ldr	r0, [sp, #84]	; 0x54
   1f5d4:	aa03      	add	r2, sp, #12
   1f5d6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1f5da:	2341      	movs	r3, #65	; 0x41
   1f5dc:	f7ff fd3e 	bl	1f05c <mbedtls_ecp_point_read_binary>
   1f5e0:	2800      	cmp	r0, #0
   1f5e2:	d1da      	bne.n	1f59a <es256_key_generate+0x8e>
   1f5e4:	4631      	mov	r1, r6
   1f5e6:	a814      	add	r0, sp, #80	; 0x50
   1f5e8:	682a      	ldr	r2, [r5, #0]
   1f5ea:	f000 f925 	bl	1f838 <mbedtls_pk_write_pubkey_pem>
   1f5ee:	23b2      	movs	r3, #178	; 0xb2
   1f5f0:	4604      	mov	r4, r0
   1f5f2:	602b      	str	r3, [r5, #0]
   1f5f4:	2800      	cmp	r0, #0
   1f5f6:	d09b      	beq.n	1f530 <es256_key_generate+0x24>
   1f5f8:	e7cf      	b.n	1f59a <es256_key_generate+0x8e>
   1f5fa:	bf00      	nop
   1f5fc:	0001f4d9 	.word	0x0001f4d9
   1f600:	20027d9e 	.word	0x20027d9e
   1f604:	000336a4 	.word	0x000336a4

0001f608 <mbedtls_oid_get_oid_by_pk_alg>:
   1f608:	2801      	cmp	r0, #1
   1f60a:	b430      	push	{r4, r5}
   1f60c:	4b0a      	ldr	r3, [pc, #40]	; (1f638 <mbedtls_oid_get_oid_by_pk_alg+0x30>)
   1f60e:	d103      	bne.n	1f618 <mbedtls_oid_get_oid_by_pk_alg+0x10>
   1f610:	e00a      	b.n	1f628 <mbedtls_oid_get_oid_by_pk_alg+0x20>
   1f612:	7c1d      	ldrb	r5, [r3, #16]
   1f614:	4285      	cmp	r5, r0
   1f616:	d008      	beq.n	1f62a <mbedtls_oid_get_oid_by_pk_alg+0x22>
   1f618:	f853 4f14 	ldr.w	r4, [r3, #20]!
   1f61c:	2c00      	cmp	r4, #0
   1f61e:	d1f8      	bne.n	1f612 <mbedtls_oid_get_oid_by_pk_alg+0xa>
   1f620:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   1f624:	bc30      	pop	{r4, r5}
   1f626:	4770      	bx	lr
   1f628:	4c04      	ldr	r4, [pc, #16]	; (1f63c <mbedtls_oid_get_oid_by_pk_alg+0x34>)
   1f62a:	600c      	str	r4, [r1, #0]
   1f62c:	685b      	ldr	r3, [r3, #4]
   1f62e:	2000      	movs	r0, #0
   1f630:	bc30      	pop	{r4, r5}
   1f632:	6013      	str	r3, [r2, #0]
   1f634:	4770      	bx	lr
   1f636:	bf00      	nop
   1f638:	000337c4 	.word	0x000337c4
   1f63c:	00033790 	.word	0x00033790

0001f640 <mbedtls_oid_get_oid_by_ec_grp>:
   1f640:	2803      	cmp	r0, #3
   1f642:	b430      	push	{r4, r5}
   1f644:	4b0a      	ldr	r3, [pc, #40]	; (1f670 <mbedtls_oid_get_oid_by_ec_grp+0x30>)
   1f646:	d103      	bne.n	1f650 <mbedtls_oid_get_oid_by_ec_grp+0x10>
   1f648:	e00a      	b.n	1f660 <mbedtls_oid_get_oid_by_ec_grp+0x20>
   1f64a:	7c1d      	ldrb	r5, [r3, #16]
   1f64c:	4285      	cmp	r5, r0
   1f64e:	d008      	beq.n	1f662 <mbedtls_oid_get_oid_by_ec_grp+0x22>
   1f650:	f853 4f14 	ldr.w	r4, [r3, #20]!
   1f654:	2c00      	cmp	r4, #0
   1f656:	d1f8      	bne.n	1f64a <mbedtls_oid_get_oid_by_ec_grp+0xa>
   1f658:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   1f65c:	bc30      	pop	{r4, r5}
   1f65e:	4770      	bx	lr
   1f660:	4c04      	ldr	r4, [pc, #16]	; (1f674 <mbedtls_oid_get_oid_by_ec_grp+0x34>)
   1f662:	600c      	str	r4, [r1, #0]
   1f664:	685b      	ldr	r3, [r3, #4]
   1f666:	2000      	movs	r0, #0
   1f668:	bc30      	pop	{r4, r5}
   1f66a:	6013      	str	r3, [r2, #0]
   1f66c:	4770      	bx	lr
   1f66e:	bf00      	nop
   1f670:	0003379c 	.word	0x0003379c
   1f674:	00033784 	.word	0x00033784

0001f678 <mbedtls_pem_write_buffer>:
   1f678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f67c:	460e      	mov	r6, r1
   1f67e:	2100      	movs	r1, #0
   1f680:	4605      	mov	r5, r0
   1f682:	b085      	sub	sp, #20
   1f684:	4608      	mov	r0, r1
   1f686:	9300      	str	r3, [sp, #0]
   1f688:	4617      	mov	r7, r2
   1f68a:	461c      	mov	r4, r3
   1f68c:	4613      	mov	r3, r2
   1f68e:	aa03      	add	r2, sp, #12
   1f690:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   1f694:	f7fa ff5e 	bl	1a554 <mbedtls_base64_encode>
   1f698:	4628      	mov	r0, r5
   1f69a:	f00b fb0f 	bl	2acbc <strlen>
   1f69e:	4682      	mov	sl, r0
   1f6a0:	4630      	mov	r0, r6
   1f6a2:	f00b fb0b 	bl	2acbc <strlen>
   1f6a6:	9903      	ldr	r1, [sp, #12]
   1f6a8:	1c4b      	adds	r3, r1, #1
   1f6aa:	eb03 1391 	add.w	r3, r3, r1, lsr #6
   1f6ae:	4453      	add	r3, sl
   1f6b0:	4418      	add	r0, r3
   1f6b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f6b4:	4298      	cmp	r0, r3
   1f6b6:	d853      	bhi.n	1f760 <mbedtls_pem_write_buffer+0xe8>
   1f6b8:	2001      	movs	r0, #1
   1f6ba:	f7f9 fd7f 	bl	191bc <nrf_calloc>
   1f6be:	4682      	mov	sl, r0
   1f6c0:	2800      	cmp	r0, #0
   1f6c2:	d052      	beq.n	1f76a <mbedtls_pem_write_buffer+0xf2>
   1f6c4:	9903      	ldr	r1, [sp, #12]
   1f6c6:	9400      	str	r4, [sp, #0]
   1f6c8:	463b      	mov	r3, r7
   1f6ca:	aa03      	add	r2, sp, #12
   1f6cc:	f7fa ff42 	bl	1a554 <mbedtls_base64_encode>
   1f6d0:	4680      	mov	r8, r0
   1f6d2:	2800      	cmp	r0, #0
   1f6d4:	d13d      	bne.n	1f752 <mbedtls_pem_write_buffer+0xda>
   1f6d6:	4628      	mov	r0, r5
   1f6d8:	f00b faf0 	bl	2acbc <strlen>
   1f6dc:	4629      	mov	r1, r5
   1f6de:	4602      	mov	r2, r0
   1f6e0:	4648      	mov	r0, r9
   1f6e2:	f7ee fa79 	bl	dbd8 <memcpy>
   1f6e6:	4628      	mov	r0, r5
   1f6e8:	f00b fae8 	bl	2acbc <strlen>
   1f6ec:	9b03      	ldr	r3, [sp, #12]
   1f6ee:	eb09 0400 	add.w	r4, r9, r0
   1f6f2:	b19b      	cbz	r3, 1f71c <mbedtls_pem_write_buffer+0xa4>
   1f6f4:	46d3      	mov	fp, sl
   1f6f6:	270a      	movs	r7, #10
   1f6f8:	2b40      	cmp	r3, #64	; 0x40
   1f6fa:	bf28      	it	cs
   1f6fc:	2340      	movcs	r3, #64	; 0x40
   1f6fe:	461d      	mov	r5, r3
   1f700:	4659      	mov	r1, fp
   1f702:	461a      	mov	r2, r3
   1f704:	4620      	mov	r0, r4
   1f706:	f7ee fa67 	bl	dbd8 <memcpy>
   1f70a:	9b03      	ldr	r3, [sp, #12]
   1f70c:	442c      	add	r4, r5
   1f70e:	1b5b      	subs	r3, r3, r5
   1f710:	7027      	strb	r7, [r4, #0]
   1f712:	44ab      	add	fp, r5
   1f714:	3401      	adds	r4, #1
   1f716:	9303      	str	r3, [sp, #12]
   1f718:	2b00      	cmp	r3, #0
   1f71a:	d1ed      	bne.n	1f6f8 <mbedtls_pem_write_buffer+0x80>
   1f71c:	4630      	mov	r0, r6
   1f71e:	f00b facd 	bl	2acbc <strlen>
   1f722:	4631      	mov	r1, r6
   1f724:	4602      	mov	r2, r0
   1f726:	4620      	mov	r0, r4
   1f728:	f7ee fa56 	bl	dbd8 <memcpy>
   1f72c:	4630      	mov	r0, r6
   1f72e:	f00b fac5 	bl	2acbc <strlen>
   1f732:	2100      	movs	r1, #0
   1f734:	4602      	mov	r2, r0
   1f736:	1823      	adds	r3, r4, r0
   1f738:	54a1      	strb	r1, [r4, r2]
   1f73a:	3301      	adds	r3, #1
   1f73c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1f73e:	eba3 0309 	sub.w	r3, r3, r9
   1f742:	4650      	mov	r0, sl
   1f744:	6013      	str	r3, [r2, #0]
   1f746:	f7f9 fd4d 	bl	191e4 <nrf_free>
   1f74a:	4640      	mov	r0, r8
   1f74c:	b005      	add	sp, #20
   1f74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f752:	4650      	mov	r0, sl
   1f754:	f7f9 fd46 	bl	191e4 <nrf_free>
   1f758:	4640      	mov	r0, r8
   1f75a:	b005      	add	sp, #20
   1f75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f760:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f762:	f06f 0829 	mvn.w	r8, #41	; 0x29
   1f766:	6018      	str	r0, [r3, #0]
   1f768:	e7ef      	b.n	1f74a <mbedtls_pem_write_buffer+0xd2>
   1f76a:	f8df 8004 	ldr.w	r8, [pc, #4]	; 1f770 <mbedtls_pem_write_buffer+0xf8>
   1f76e:	e7ec      	b.n	1f74a <mbedtls_pem_write_buffer+0xd2>
   1f770:	ffffee80 	.word	0xffffee80

0001f774 <mbedtls_pk_init>:
   1f774:	b110      	cbz	r0, 1f77c <mbedtls_pk_init+0x8>
   1f776:	2300      	movs	r3, #0
   1f778:	e9c0 3300 	strd	r3, r3, [r0]
   1f77c:	4770      	bx	lr
   1f77e:	bf00      	nop

0001f780 <mbedtls_pk_info_from_type>:
   1f780:	2802      	cmp	r0, #2
   1f782:	d005      	beq.n	1f790 <mbedtls_pk_info_from_type+0x10>
   1f784:	4b03      	ldr	r3, [pc, #12]	; (1f794 <mbedtls_pk_info_from_type+0x14>)
   1f786:	2803      	cmp	r0, #3
   1f788:	bf0c      	ite	eq
   1f78a:	4618      	moveq	r0, r3
   1f78c:	2000      	movne	r0, #0
   1f78e:	4770      	bx	lr
   1f790:	4801      	ldr	r0, [pc, #4]	; (1f798 <mbedtls_pk_info_from_type+0x18>)
   1f792:	4770      	bx	lr
   1f794:	000338b4 	.word	0x000338b4
   1f798:	00033884 	.word	0x00033884

0001f79c <mbedtls_pk_setup>:
   1f79c:	b160      	cbz	r0, 1f7b8 <mbedtls_pk_setup+0x1c>
   1f79e:	b159      	cbz	r1, 1f7b8 <mbedtls_pk_setup+0x1c>
   1f7a0:	b570      	push	{r4, r5, r6, lr}
   1f7a2:	6806      	ldr	r6, [r0, #0]
   1f7a4:	b966      	cbnz	r6, 1f7c0 <mbedtls_pk_setup+0x24>
   1f7a6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1f7a8:	4604      	mov	r4, r0
   1f7aa:	460d      	mov	r5, r1
   1f7ac:	4798      	blx	r3
   1f7ae:	6060      	str	r0, [r4, #4]
   1f7b0:	b120      	cbz	r0, 1f7bc <mbedtls_pk_setup+0x20>
   1f7b2:	6025      	str	r5, [r4, #0]
   1f7b4:	4630      	mov	r0, r6
   1f7b6:	bd70      	pop	{r4, r5, r6, pc}
   1f7b8:	4802      	ldr	r0, [pc, #8]	; (1f7c4 <mbedtls_pk_setup+0x28>)
   1f7ba:	4770      	bx	lr
   1f7bc:	4802      	ldr	r0, [pc, #8]	; (1f7c8 <mbedtls_pk_setup+0x2c>)
   1f7be:	bd70      	pop	{r4, r5, r6, pc}
   1f7c0:	4800      	ldr	r0, [pc, #0]	; (1f7c4 <mbedtls_pk_setup+0x28>)
   1f7c2:	bd70      	pop	{r4, r5, r6, pc}
   1f7c4:	ffffc180 	.word	0xffffc180
   1f7c8:	ffffc080 	.word	0xffffc080

0001f7cc <mbedtls_pk_get_type>:
   1f7cc:	b110      	cbz	r0, 1f7d4 <mbedtls_pk_get_type+0x8>
   1f7ce:	6800      	ldr	r0, [r0, #0]
   1f7d0:	b100      	cbz	r0, 1f7d4 <mbedtls_pk_get_type+0x8>
   1f7d2:	7800      	ldrb	r0, [r0, #0]
   1f7d4:	4770      	bx	lr
   1f7d6:	bf00      	nop

0001f7d8 <eckey_can_do>:
   1f7d8:	3802      	subs	r0, #2
   1f7da:	2802      	cmp	r0, #2
   1f7dc:	bf8c      	ite	hi
   1f7de:	2000      	movhi	r0, #0
   1f7e0:	2001      	movls	r0, #1
   1f7e2:	4770      	bx	lr

0001f7e4 <eckey_get_bitlen>:
   1f7e4:	6d80      	ldr	r0, [r0, #88]	; 0x58
   1f7e6:	4770      	bx	lr

0001f7e8 <eckey_debug>:
   1f7e8:	2202      	movs	r2, #2
   1f7ea:	4b03      	ldr	r3, [pc, #12]	; (1f7f8 <eckey_debug+0x10>)
   1f7ec:	3088      	adds	r0, #136	; 0x88
   1f7ee:	6088      	str	r0, [r1, #8]
   1f7f0:	700a      	strb	r2, [r1, #0]
   1f7f2:	604b      	str	r3, [r1, #4]
   1f7f4:	4770      	bx	lr
   1f7f6:	bf00      	nop
   1f7f8:	0003387c 	.word	0x0003387c

0001f7fc <eckeydh_can_do>:
   1f7fc:	3802      	subs	r0, #2
   1f7fe:	2801      	cmp	r0, #1
   1f800:	bf8c      	ite	hi
   1f802:	2000      	movhi	r0, #0
   1f804:	2001      	movls	r0, #1
   1f806:	4770      	bx	lr

0001f808 <eckey_free_wrap>:
   1f808:	b510      	push	{r4, lr}
   1f80a:	4604      	mov	r4, r0
   1f80c:	f7fe fdcc 	bl	1e3a8 <mbedtls_ecp_keypair_free>
   1f810:	4620      	mov	r0, r4
   1f812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f816:	f7f9 bce5 	b.w	191e4 <nrf_free>
   1f81a:	bf00      	nop

0001f81c <eckey_alloc_wrap>:
   1f81c:	b510      	push	{r4, lr}
   1f81e:	21ac      	movs	r1, #172	; 0xac
   1f820:	2001      	movs	r0, #1
   1f822:	f7f9 fccb 	bl	191bc <nrf_calloc>
   1f826:	4604      	mov	r4, r0
   1f828:	b108      	cbz	r0, 1f82e <eckey_alloc_wrap+0x12>
   1f82a:	f7fe fd57 	bl	1e2dc <mbedtls_ecp_keypair_init>
   1f82e:	4620      	mov	r0, r4
   1f830:	bd10      	pop	{r4, pc}
   1f832:	bf00      	nop

0001f834 <eckey_check_pair>:
   1f834:	f7ff bd30 	b.w	1f298 <mbedtls_ecp_check_pub_priv>

0001f838 <mbedtls_pk_write_pubkey_pem>:
   1f838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f83c:	2400      	movs	r4, #0
   1f83e:	b0d7      	sub	sp, #348	; 0x15c
   1f840:	f50d 73ab 	add.w	r3, sp, #342	; 0x156
   1f844:	4688      	mov	r8, r1
   1f846:	4691      	mov	r9, r2
   1f848:	e9cd 4306 	strd	r4, r3, [sp, #24]
   1f84c:	4607      	mov	r7, r0
   1f84e:	f7ff ffbd 	bl	1f7cc <mbedtls_pk_get_type>
   1f852:	2802      	cmp	r0, #2
   1f854:	d159      	bne.n	1f90a <mbedtls_pk_write_pubkey_pem+0xd2>
   1f856:	2385      	movs	r3, #133	; 0x85
   1f858:	6878      	ldr	r0, [r7, #4]
   1f85a:	ae0b      	add	r6, sp, #44	; 0x2c
   1f85c:	9301      	str	r3, [sp, #4]
   1f85e:	4622      	mov	r2, r4
   1f860:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1f864:	9600      	str	r6, [sp, #0]
   1f866:	ab0a      	add	r3, sp, #40	; 0x28
   1f868:	940a      	str	r4, [sp, #40]	; 0x28
   1f86a:	f7ff fba5 	bl	1efb8 <mbedtls_ecp_point_write_binary>
   1f86e:	ad2d      	add	r5, sp, #180	; 0xb4
   1f870:	4604      	mov	r4, r0
   1f872:	b968      	cbnz	r0, 1f890 <mbedtls_pk_write_pubkey_pem+0x58>
   1f874:	9807      	ldr	r0, [sp, #28]
   1f876:	42a8      	cmp	r0, r5
   1f878:	d37f      	bcc.n	1f97a <mbedtls_pk_write_pubkey_pem+0x142>
   1f87a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f87c:	1b43      	subs	r3, r0, r5
   1f87e:	4293      	cmp	r3, r2
   1f880:	d37b      	bcc.n	1f97a <mbedtls_pk_write_pubkey_pem+0x142>
   1f882:	1a83      	subs	r3, r0, r2
   1f884:	4618      	mov	r0, r3
   1f886:	4631      	mov	r1, r6
   1f888:	9307      	str	r3, [sp, #28]
   1f88a:	f7ee f9a5 	bl	dbd8 <memcpy>
   1f88e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1f890:	2c00      	cmp	r4, #0
   1f892:	db31      	blt.n	1f8f8 <mbedtls_pk_write_pubkey_pem+0xc0>
   1f894:	9b07      	ldr	r3, [sp, #28]
   1f896:	1b5a      	subs	r2, r3, r5
   1f898:	2a00      	cmp	r2, #0
   1f89a:	dd6e      	ble.n	1f97a <mbedtls_pk_write_pubkey_pem+0x142>
   1f89c:	2100      	movs	r1, #0
   1f89e:	1e5a      	subs	r2, r3, #1
   1f8a0:	f104 0a01 	add.w	sl, r4, #1
   1f8a4:	9207      	str	r2, [sp, #28]
   1f8a6:	a807      	add	r0, sp, #28
   1f8a8:	f803 1c01 	strb.w	r1, [r3, #-1]
   1f8ac:	4652      	mov	r2, sl
   1f8ae:	4629      	mov	r1, r5
   1f8b0:	f7fa fcea 	bl	1a288 <mbedtls_asn1_write_len>
   1f8b4:	1e04      	subs	r4, r0, #0
   1f8b6:	db1f      	blt.n	1f8f8 <mbedtls_pk_write_pubkey_pem+0xc0>
   1f8b8:	2203      	movs	r2, #3
   1f8ba:	4629      	mov	r1, r5
   1f8bc:	a807      	add	r0, sp, #28
   1f8be:	f7fa fd5d 	bl	1a37c <mbedtls_asn1_write_tag>
   1f8c2:	f1b0 0b00 	subs.w	fp, r0, #0
   1f8c6:	db1b      	blt.n	1f900 <mbedtls_pk_write_pubkey_pem+0xc8>
   1f8c8:	4638      	mov	r0, r7
   1f8ca:	f7ff ff7f 	bl	1f7cc <mbedtls_pk_get_type>
   1f8ce:	aa08      	add	r2, sp, #32
   1f8d0:	a909      	add	r1, sp, #36	; 0x24
   1f8d2:	f7ff fe99 	bl	1f608 <mbedtls_oid_get_oid_by_pk_alg>
   1f8d6:	4603      	mov	r3, r0
   1f8d8:	b1c8      	cbz	r0, 1f90e <mbedtls_pk_write_pubkey_pem+0xd6>
   1f8da:	2b00      	cmp	r3, #0
   1f8dc:	db50      	blt.n	1f980 <mbedtls_pk_write_pubkey_pem+0x148>
   1f8de:	f1c3 02a2 	rsb	r2, r3, #162	; 0xa2
   1f8e2:	a906      	add	r1, sp, #24
   1f8e4:	e9cd 9101 	strd	r9, r1, [sp, #4]
   1f8e8:	f8cd 8000 	str.w	r8, [sp]
   1f8ec:	442a      	add	r2, r5
   1f8ee:	4925      	ldr	r1, [pc, #148]	; (1f984 <mbedtls_pk_write_pubkey_pem+0x14c>)
   1f8f0:	4825      	ldr	r0, [pc, #148]	; (1f988 <mbedtls_pk_write_pubkey_pem+0x150>)
   1f8f2:	f7ff fec1 	bl	1f678 <mbedtls_pem_write_buffer>
   1f8f6:	4604      	mov	r4, r0
   1f8f8:	4620      	mov	r0, r4
   1f8fa:	b057      	add	sp, #348	; 0x15c
   1f8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f900:	465c      	mov	r4, fp
   1f902:	4620      	mov	r0, r4
   1f904:	b057      	add	sp, #348	; 0x15c
   1f906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f90a:	4c20      	ldr	r4, [pc, #128]	; (1f98c <mbedtls_pk_write_pubkey_pem+0x154>)
   1f90c:	e7f4      	b.n	1f8f8 <mbedtls_pk_write_pubkey_pem+0xc0>
   1f90e:	9005      	str	r0, [sp, #20]
   1f910:	4638      	mov	r0, r7
   1f912:	f7ff ff5b 	bl	1f7cc <mbedtls_pk_get_type>
   1f916:	2802      	cmp	r0, #2
   1f918:	9b05      	ldr	r3, [sp, #20]
   1f91a:	d01d      	beq.n	1f958 <mbedtls_pk_write_pubkey_pem+0x120>
   1f91c:	4618      	mov	r0, r3
   1f91e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   1f922:	9000      	str	r0, [sp, #0]
   1f924:	4629      	mov	r1, r5
   1f926:	a807      	add	r0, sp, #28
   1f928:	f7fa fd7e 	bl	1a428 <mbedtls_asn1_write_algorithm_identifier>
   1f92c:	2800      	cmp	r0, #0
   1f92e:	db22      	blt.n	1f976 <mbedtls_pk_write_pubkey_pem+0x13e>
   1f930:	4454      	add	r4, sl
   1f932:	44a3      	add	fp, r4
   1f934:	4483      	add	fp, r0
   1f936:	465a      	mov	r2, fp
   1f938:	4629      	mov	r1, r5
   1f93a:	a807      	add	r0, sp, #28
   1f93c:	f7fa fca4 	bl	1a288 <mbedtls_asn1_write_len>
   1f940:	1e04      	subs	r4, r0, #0
   1f942:	dbd9      	blt.n	1f8f8 <mbedtls_pk_write_pubkey_pem+0xc0>
   1f944:	a807      	add	r0, sp, #28
   1f946:	2230      	movs	r2, #48	; 0x30
   1f948:	4629      	mov	r1, r5
   1f94a:	f7fa fd17 	bl	1a37c <mbedtls_asn1_write_tag>
   1f94e:	1e03      	subs	r3, r0, #0
   1f950:	db16      	blt.n	1f980 <mbedtls_pk_write_pubkey_pem+0x148>
   1f952:	44a3      	add	fp, r4
   1f954:	445b      	add	r3, fp
   1f956:	e7c0      	b.n	1f8da <mbedtls_pk_write_pubkey_pem+0xa2>
   1f958:	687b      	ldr	r3, [r7, #4]
   1f95a:	4632      	mov	r2, r6
   1f95c:	7818      	ldrb	r0, [r3, #0]
   1f95e:	a90a      	add	r1, sp, #40	; 0x28
   1f960:	f7ff fe6e 	bl	1f640 <mbedtls_oid_get_oid_by_ec_grp>
   1f964:	b928      	cbnz	r0, 1f972 <mbedtls_pk_write_pubkey_pem+0x13a>
   1f966:	6833      	ldr	r3, [r6, #0]
   1f968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f96a:	4629      	mov	r1, r5
   1f96c:	a807      	add	r0, sp, #28
   1f96e:	f7fa fd13 	bl	1a398 <mbedtls_asn1_write_oid>
   1f972:	2800      	cmp	r0, #0
   1f974:	dad3      	bge.n	1f91e <mbedtls_pk_write_pubkey_pem+0xe6>
   1f976:	4604      	mov	r4, r0
   1f978:	e7be      	b.n	1f8f8 <mbedtls_pk_write_pubkey_pem+0xc0>
   1f97a:	f06f 046b 	mvn.w	r4, #107	; 0x6b
   1f97e:	e7bb      	b.n	1f8f8 <mbedtls_pk_write_pubkey_pem+0xc0>
   1f980:	461c      	mov	r4, r3
   1f982:	e7b9      	b.n	1f8f8 <mbedtls_pk_write_pubkey_pem+0xc0>
   1f984:	000338f0 	.word	0x000338f0
   1f988:	0003390c 	.word	0x0003390c
   1f98c:	ffffc680 	.word	0xffffc680

0001f990 <mbedtls_platform_zeroize>:
   1f990:	4b02      	ldr	r3, [pc, #8]	; (1f99c <mbedtls_platform_zeroize+0xc>)
   1f992:	460a      	mov	r2, r1
   1f994:	681b      	ldr	r3, [r3, #0]
   1f996:	2100      	movs	r1, #0
   1f998:	4718      	bx	r3
   1f99a:	bf00      	nop
   1f99c:	2002d860 	.word	0x2002d860

0001f9a0 <datagram_handler_init>:
   1f9a0:	b510      	push	{r4, lr}
   1f9a2:	4604      	mov	r4, r0
   1f9a4:	200c      	movs	r0, #12
   1f9a6:	f7f9 fbff 	bl	191a8 <nrf_malloc>
   1f9aa:	60e0      	str	r0, [r4, #12]
   1f9ac:	b118      	cbz	r0, 1f9b6 <datagram_handler_init+0x16>
   1f9ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f9b2:	f006 bd8b 	b.w	264cc <linked_list_init>
   1f9b6:	2004      	movs	r0, #4
   1f9b8:	bd10      	pop	{r4, pc}
   1f9ba:	bf00      	nop

0001f9bc <datagram_handler_put>:
   1f9bc:	b570      	push	{r4, r5, r6, lr}
   1f9be:	4606      	mov	r6, r0
   1f9c0:	2014      	movs	r0, #20
   1f9c2:	460d      	mov	r5, r1
   1f9c4:	f7f9 fbf0 	bl	191a8 <nrf_malloc>
   1f9c8:	b178      	cbz	r0, 1f9ea <datagram_handler_put+0x2e>
   1f9ca:	682b      	ldr	r3, [r5, #0]
   1f9cc:	4604      	mov	r4, r0
   1f9ce:	6043      	str	r3, [r0, #4]
   1f9d0:	686b      	ldr	r3, [r5, #4]
   1f9d2:	4601      	mov	r1, r0
   1f9d4:	6083      	str	r3, [r0, #8]
   1f9d6:	68eb      	ldr	r3, [r5, #12]
   1f9d8:	60c3      	str	r3, [r0, #12]
   1f9da:	68ab      	ldr	r3, [r5, #8]
   1f9dc:	6103      	str	r3, [r0, #16]
   1f9de:	68f0      	ldr	r0, [r6, #12]
   1f9e0:	f006 fd7e 	bl	264e0 <linked_list_push>
   1f9e4:	b920      	cbnz	r0, 1f9f0 <datagram_handler_put+0x34>
   1f9e6:	6868      	ldr	r0, [r5, #4]
   1f9e8:	bd70      	pop	{r4, r5, r6, pc}
   1f9ea:	f04f 30ff 	mov.w	r0, #4294967295
   1f9ee:	bd70      	pop	{r4, r5, r6, pc}
   1f9f0:	4620      	mov	r0, r4
   1f9f2:	f7f9 fbf7 	bl	191e4 <nrf_free>
   1f9f6:	f04f 30ff 	mov.w	r0, #4294967295
   1f9fa:	bd70      	pop	{r4, r5, r6, pc}

0001f9fc <datagram_handler_get>:
   1f9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f9fe:	4606      	mov	r6, r0
   1fa00:	b085      	sub	sp, #20
   1fa02:	68c0      	ldr	r0, [r0, #12]
   1fa04:	460c      	mov	r4, r1
   1fa06:	4617      	mov	r7, r2
   1fa08:	f006 fd8a 	bl	26520 <linked_list_peek>
   1fa0c:	2800      	cmp	r0, #0
   1fa0e:	d037      	beq.n	1fa80 <datagram_handler_get+0x84>
   1fa10:	6882      	ldr	r2, [r0, #8]
   1fa12:	4605      	mov	r5, r0
   1fa14:	e9d4 0300 	ldrd	r0, r3, [r4]
   1fa18:	429a      	cmp	r2, r3
   1fa1a:	bf28      	it	cs
   1fa1c:	461a      	movcs	r2, r3
   1fa1e:	6062      	str	r2, [r4, #4]
   1fa20:	b110      	cbz	r0, 1fa28 <datagram_handler_get+0x2c>
   1fa22:	6869      	ldr	r1, [r5, #4]
   1fa24:	f7ee f8d8 	bl	dbd8 <memcpy>
   1fa28:	68a0      	ldr	r0, [r4, #8]
   1fa2a:	b118      	cbz	r0, 1fa34 <datagram_handler_get+0x38>
   1fa2c:	692b      	ldr	r3, [r5, #16]
   1fa2e:	b10b      	cbz	r3, 1fa34 <datagram_handler_get+0x38>
   1fa30:	68ea      	ldr	r2, [r5, #12]
   1fa32:	b9e2      	cbnz	r2, 1fa6e <datagram_handler_get+0x72>
   1fa34:	2300      	movs	r3, #0
   1fa36:	60e3      	str	r3, [r4, #12]
   1fa38:	073b      	lsls	r3, r7, #28
   1fa3a:	d502      	bpl.n	1fa42 <datagram_handler_get+0x46>
   1fa3c:	6860      	ldr	r0, [r4, #4]
   1fa3e:	b005      	add	sp, #20
   1fa40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fa42:	68f0      	ldr	r0, [r6, #12]
   1fa44:	f006 fd62 	bl	2650c <linked_list_pop>
   1fa48:	4605      	mov	r5, r0
   1fa4a:	2800      	cmp	r0, #0
   1fa4c:	d0f6      	beq.n	1fa3c <datagram_handler_get+0x40>
   1fa4e:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1fa52:	6902      	ldr	r2, [r0, #16]
   1fa54:	9300      	str	r3, [sp, #0]
   1fa56:	68c3      	ldr	r3, [r0, #12]
   1fa58:	e9cd 1201 	strd	r1, r2, [sp, #4]
   1fa5c:	9303      	str	r3, [sp, #12]
   1fa5e:	4668      	mov	r0, sp
   1fa60:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   1fa64:	4798      	blx	r3
   1fa66:	4628      	mov	r0, r5
   1fa68:	f7f9 fbbc 	bl	191e4 <nrf_free>
   1fa6c:	e7e6      	b.n	1fa3c <datagram_handler_get+0x40>
   1fa6e:	68e3      	ldr	r3, [r4, #12]
   1fa70:	429a      	cmp	r2, r3
   1fa72:	bf28      	it	cs
   1fa74:	461a      	movcs	r2, r3
   1fa76:	60e2      	str	r2, [r4, #12]
   1fa78:	6929      	ldr	r1, [r5, #16]
   1fa7a:	f7ee f8ad 	bl	dbd8 <memcpy>
   1fa7e:	e7db      	b.n	1fa38 <datagram_handler_get+0x3c>
   1fa80:	f04f 30ff 	mov.w	r0, #4294967295
   1fa84:	e7db      	b.n	1fa3e <datagram_handler_get+0x42>
   1fa86:	bf00      	nop

0001fa88 <datagram_handler_available>:
   1fa88:	b508      	push	{r3, lr}
   1fa8a:	68c0      	ldr	r0, [r0, #12]
   1fa8c:	f006 fd48 	bl	26520 <linked_list_peek>
   1fa90:	b108      	cbz	r0, 1fa96 <datagram_handler_available+0xe>
   1fa92:	6880      	ldr	r0, [r0, #8]
   1fa94:	bd08      	pop	{r3, pc}
   1fa96:	f04f 30ff 	mov.w	r0, #4294967295
   1fa9a:	bd08      	pop	{r3, pc}

0001fa9c <datagram_handler_flush>:
   1fa9c:	b530      	push	{r4, r5, lr}
   1fa9e:	4605      	mov	r5, r0
   1faa0:	68c0      	ldr	r0, [r0, #12]
   1faa2:	b085      	sub	sp, #20
   1faa4:	b9a8      	cbnz	r0, 1fad2 <datagram_handler_flush+0x36>
   1faa6:	e01a      	b.n	1fade <datagram_handler_flush+0x42>
   1faa8:	68e8      	ldr	r0, [r5, #12]
   1faaa:	f006 fd2f 	bl	2650c <linked_list_pop>
   1faae:	4604      	mov	r4, r0
   1fab0:	b170      	cbz	r0, 1fad0 <datagram_handler_flush+0x34>
   1fab2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1fab6:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1faba:	e9cd 0100 	strd	r0, r1, [sp]
   1fabe:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1fac2:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1fac6:	4668      	mov	r0, sp
   1fac8:	4798      	blx	r3
   1faca:	4620      	mov	r0, r4
   1facc:	f7f9 fb8a 	bl	191e4 <nrf_free>
   1fad0:	68e8      	ldr	r0, [r5, #12]
   1fad2:	f006 fd2b 	bl	2652c <linked_list_size_get>
   1fad6:	2800      	cmp	r0, #0
   1fad8:	d1e6      	bne.n	1faa8 <datagram_handler_flush+0xc>
   1fada:	b005      	add	sp, #20
   1fadc:	bd30      	pop	{r4, r5, pc}
   1fade:	2008      	movs	r0, #8
   1fae0:	b005      	add	sp, #20
   1fae2:	bd30      	pop	{r4, r5, pc}

0001fae4 <datagram_handler_free>:
   1fae4:	b530      	push	{r4, r5, lr}
   1fae6:	4605      	mov	r5, r0
   1fae8:	68c0      	ldr	r0, [r0, #12]
   1faea:	b085      	sub	sp, #20
   1faec:	b9a0      	cbnz	r0, 1fb18 <datagram_handler_free+0x34>
   1faee:	e01c      	b.n	1fb2a <datagram_handler_free+0x46>
   1faf0:	f006 fd0c 	bl	2650c <linked_list_pop>
   1faf4:	4604      	mov	r4, r0
   1faf6:	b170      	cbz	r0, 1fb16 <datagram_handler_free+0x32>
   1faf8:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1fafc:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1fb00:	e9cd 0100 	strd	r0, r1, [sp]
   1fb04:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1fb08:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1fb0c:	4668      	mov	r0, sp
   1fb0e:	4798      	blx	r3
   1fb10:	4620      	mov	r0, r4
   1fb12:	f7f9 fb67 	bl	191e4 <nrf_free>
   1fb16:	68e8      	ldr	r0, [r5, #12]
   1fb18:	f006 fd08 	bl	2652c <linked_list_size_get>
   1fb1c:	4604      	mov	r4, r0
   1fb1e:	68e8      	ldr	r0, [r5, #12]
   1fb20:	2c00      	cmp	r4, #0
   1fb22:	d1e5      	bne.n	1faf0 <datagram_handler_free+0xc>
   1fb24:	f7f9 fb5e 	bl	191e4 <nrf_free>
   1fb28:	60ec      	str	r4, [r5, #12]
   1fb2a:	b005      	add	sp, #20
   1fb2c:	bd30      	pop	{r4, r5, pc}
   1fb2e:	bf00      	nop

0001fb30 <null_handler_init>:
   1fb30:	2000      	movs	r0, #0
   1fb32:	4770      	bx	lr

0001fb34 <null_handler_put>:
   1fb34:	b510      	push	{r4, lr}
   1fb36:	460c      	mov	r4, r1
   1fb38:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1fb3c:	4620      	mov	r0, r4
   1fb3e:	4798      	blx	r3
   1fb40:	6860      	ldr	r0, [r4, #4]
   1fb42:	bd10      	pop	{r4, pc}

0001fb44 <null_handler_get>:
   1fb44:	f04f 30ff 	mov.w	r0, #4294967295
   1fb48:	4770      	bx	lr
   1fb4a:	bf00      	nop

0001fb4c <null_handler_available>:
   1fb4c:	f04f 30ff 	mov.w	r0, #4294967295
   1fb50:	4770      	bx	lr
   1fb52:	bf00      	nop

0001fb54 <null_handler_flush>:
   1fb54:	2000      	movs	r0, #0
   1fb56:	4770      	bx	lr

0001fb58 <null_handler_free>:
   1fb58:	4770      	bx	lr
   1fb5a:	bf00      	nop

0001fb5c <packet_handler_create>:
   1fb5c:	2801      	cmp	r0, #1
   1fb5e:	b538      	push	{r3, r4, r5, lr}
   1fb60:	460d      	mov	r5, r1
   1fb62:	4614      	mov	r4, r2
   1fb64:	d011      	beq.n	1fb8a <packet_handler_create+0x2e>
   1fb66:	2802      	cmp	r0, #2
   1fb68:	d10a      	bne.n	1fb80 <packet_handler_create+0x24>
   1fb6a:	2010      	movs	r0, #16
   1fb6c:	f7f9 fb1c 	bl	191a8 <nrf_malloc>
   1fb70:	2218      	movs	r2, #24
   1fb72:	b120      	cbz	r0, 1fb7e <packet_handler_create+0x22>
   1fb74:	4b07      	ldr	r3, [pc, #28]	; (1fb94 <packet_handler_create+0x38>)
   1fb76:	6045      	str	r5, [r0, #4]
   1fb78:	4413      	add	r3, r2
   1fb7a:	6084      	str	r4, [r0, #8]
   1fb7c:	6003      	str	r3, [r0, #0]
   1fb7e:	bd38      	pop	{r3, r4, r5, pc}
   1fb80:	200c      	movs	r0, #12
   1fb82:	f7f9 fb11 	bl	191a8 <nrf_malloc>
   1fb86:	2200      	movs	r2, #0
   1fb88:	e7f3      	b.n	1fb72 <packet_handler_create+0x16>
   1fb8a:	2014      	movs	r0, #20
   1fb8c:	f7f9 fb0c 	bl	191a8 <nrf_malloc>
   1fb90:	2230      	movs	r2, #48	; 0x30
   1fb92:	e7ee      	b.n	1fb72 <packet_handler_create+0x16>
   1fb94:	00033928 	.word	0x00033928

0001fb98 <packet_handler_delete>:
   1fb98:	b510      	push	{r4, lr}
   1fb9a:	4604      	mov	r4, r0
   1fb9c:	6803      	ldr	r3, [r0, #0]
   1fb9e:	691b      	ldr	r3, [r3, #16]
   1fba0:	4798      	blx	r3
   1fba2:	6823      	ldr	r3, [r4, #0]
   1fba4:	4620      	mov	r0, r4
   1fba6:	695b      	ldr	r3, [r3, #20]
   1fba8:	4798      	blx	r3
   1fbaa:	4620      	mov	r0, r4
   1fbac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fbb0:	f7f9 bb18 	b.w	191e4 <nrf_free>

0001fbb4 <stream_handler_init>:
   1fbb4:	b510      	push	{r4, lr}
   1fbb6:	4604      	mov	r4, r0
   1fbb8:	200c      	movs	r0, #12
   1fbba:	f7f9 faf5 	bl	191a8 <nrf_malloc>
   1fbbe:	60e0      	str	r0, [r4, #12]
   1fbc0:	b128      	cbz	r0, 1fbce <stream_handler_init+0x1a>
   1fbc2:	2300      	movs	r3, #0
   1fbc4:	6123      	str	r3, [r4, #16]
   1fbc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fbca:	f006 bc7f 	b.w	264cc <linked_list_init>
   1fbce:	2004      	movs	r0, #4
   1fbd0:	bd10      	pop	{r4, pc}
   1fbd2:	bf00      	nop

0001fbd4 <stream_handler_put>:
   1fbd4:	b570      	push	{r4, r5, r6, lr}
   1fbd6:	4606      	mov	r6, r0
   1fbd8:	2014      	movs	r0, #20
   1fbda:	460d      	mov	r5, r1
   1fbdc:	f7f9 fae4 	bl	191a8 <nrf_malloc>
   1fbe0:	b178      	cbz	r0, 1fc02 <stream_handler_put+0x2e>
   1fbe2:	682b      	ldr	r3, [r5, #0]
   1fbe4:	4604      	mov	r4, r0
   1fbe6:	6043      	str	r3, [r0, #4]
   1fbe8:	686b      	ldr	r3, [r5, #4]
   1fbea:	4601      	mov	r1, r0
   1fbec:	6083      	str	r3, [r0, #8]
   1fbee:	68eb      	ldr	r3, [r5, #12]
   1fbf0:	60c3      	str	r3, [r0, #12]
   1fbf2:	68ab      	ldr	r3, [r5, #8]
   1fbf4:	6103      	str	r3, [r0, #16]
   1fbf6:	68f0      	ldr	r0, [r6, #12]
   1fbf8:	f006 fc72 	bl	264e0 <linked_list_push>
   1fbfc:	b920      	cbnz	r0, 1fc08 <stream_handler_put+0x34>
   1fbfe:	6868      	ldr	r0, [r5, #4]
   1fc00:	bd70      	pop	{r4, r5, r6, pc}
   1fc02:	f04f 30ff 	mov.w	r0, #4294967295
   1fc06:	bd70      	pop	{r4, r5, r6, pc}
   1fc08:	4620      	mov	r0, r4
   1fc0a:	f7f9 faeb 	bl	191e4 <nrf_free>
   1fc0e:	f04f 30ff 	mov.w	r0, #4294967295
   1fc12:	bd70      	pop	{r4, r5, r6, pc}

0001fc14 <stream_handler_get>:
   1fc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc18:	4682      	mov	sl, r0
   1fc1a:	b087      	sub	sp, #28
   1fc1c:	68c0      	ldr	r0, [r0, #12]
   1fc1e:	4689      	mov	r9, r1
   1fc20:	4693      	mov	fp, r2
   1fc22:	f006 fc7d 	bl	26520 <linked_list_peek>
   1fc26:	2800      	cmp	r0, #0
   1fc28:	d072      	beq.n	1fd10 <stream_handler_get+0xfc>
   1fc2a:	4605      	mov	r5, r0
   1fc2c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1fc30:	b120      	cbz	r0, 1fc3c <stream_handler_get+0x28>
   1fc32:	692b      	ldr	r3, [r5, #16]
   1fc34:	b113      	cbz	r3, 1fc3c <stream_handler_get+0x28>
   1fc36:	68ea      	ldr	r2, [r5, #12]
   1fc38:	2a00      	cmp	r2, #0
   1fc3a:	d15c      	bne.n	1fcf6 <stream_handler_get+0xe2>
   1fc3c:	2300      	movs	r3, #0
   1fc3e:	f8c9 300c 	str.w	r3, [r9, #12]
   1fc42:	f8d9 2000 	ldr.w	r2, [r9]
   1fc46:	f8d9 8004 	ldr.w	r8, [r9, #4]
   1fc4a:	f8da 1010 	ldr.w	r1, [sl, #16]
   1fc4e:	9201      	str	r2, [sp, #4]
   1fc50:	f1b8 0f00 	cmp.w	r8, #0
   1fc54:	d05a      	beq.n	1fd0c <stream_handler_get+0xf8>
   1fc56:	f00b 0308 	and.w	r3, fp, #8
   1fc5a:	2400      	movs	r4, #0
   1fc5c:	9300      	str	r3, [sp, #0]
   1fc5e:	e010      	b.n	1fc82 <stream_handler_get+0x6e>
   1fc60:	f8da 3010 	ldr.w	r3, [sl, #16]
   1fc64:	443b      	add	r3, r7
   1fc66:	f8ca 3010 	str.w	r3, [sl, #16]
   1fc6a:	4628      	mov	r0, r5
   1fc6c:	f006 fc60 	bl	26530 <linked_list_get_next>
   1fc70:	443c      	add	r4, r7
   1fc72:	4605      	mov	r5, r0
   1fc74:	2800      	cmp	r0, #0
   1fc76:	d038      	beq.n	1fcea <stream_handler_get+0xd6>
   1fc78:	45a0      	cmp	r8, r4
   1fc7a:	d936      	bls.n	1fcea <stream_handler_get+0xd6>
   1fc7c:	2100      	movs	r1, #0
   1fc7e:	f8d9 2000 	ldr.w	r2, [r9]
   1fc82:	68ae      	ldr	r6, [r5, #8]
   1fc84:	eba8 0b04 	sub.w	fp, r8, r4
   1fc88:	1a76      	subs	r6, r6, r1
   1fc8a:	455e      	cmp	r6, fp
   1fc8c:	4637      	mov	r7, r6
   1fc8e:	bf28      	it	cs
   1fc90:	465f      	movcs	r7, fp
   1fc92:	b132      	cbz	r2, 1fca2 <stream_handler_get+0x8e>
   1fc94:	6868      	ldr	r0, [r5, #4]
   1fc96:	9b01      	ldr	r3, [sp, #4]
   1fc98:	4401      	add	r1, r0
   1fc9a:	463a      	mov	r2, r7
   1fc9c:	1918      	adds	r0, r3, r4
   1fc9e:	f7ed ff9b 	bl	dbd8 <memcpy>
   1fca2:	9b00      	ldr	r3, [sp, #0]
   1fca4:	2b00      	cmp	r3, #0
   1fca6:	d1e0      	bne.n	1fc6a <stream_handler_get+0x56>
   1fca8:	455e      	cmp	r6, fp
   1fcaa:	d8d9      	bhi.n	1fc60 <stream_handler_get+0x4c>
   1fcac:	f8da 000c 	ldr.w	r0, [sl, #12]
   1fcb0:	f006 fc2c 	bl	2650c <linked_list_pop>
   1fcb4:	4606      	mov	r6, r0
   1fcb6:	b170      	cbz	r0, 1fcd6 <stream_handler_get+0xc2>
   1fcb8:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1fcbc:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   1fcc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1fcc4:	e9cd 1004 	strd	r1, r0, [sp, #16]
   1fcc8:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   1fccc:	a802      	add	r0, sp, #8
   1fcce:	4798      	blx	r3
   1fcd0:	4630      	mov	r0, r6
   1fcd2:	f7f9 fa87 	bl	191e4 <nrf_free>
   1fcd6:	2300      	movs	r3, #0
   1fcd8:	4628      	mov	r0, r5
   1fcda:	f8ca 3010 	str.w	r3, [sl, #16]
   1fcde:	f006 fc27 	bl	26530 <linked_list_get_next>
   1fce2:	443c      	add	r4, r7
   1fce4:	4605      	mov	r5, r0
   1fce6:	2800      	cmp	r0, #0
   1fce8:	d1c6      	bne.n	1fc78 <stream_handler_get+0x64>
   1fcea:	4620      	mov	r0, r4
   1fcec:	f8c9 4004 	str.w	r4, [r9, #4]
   1fcf0:	b007      	add	sp, #28
   1fcf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fcf6:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1fcfa:	429a      	cmp	r2, r3
   1fcfc:	bf28      	it	cs
   1fcfe:	461a      	movcs	r2, r3
   1fd00:	f8c9 200c 	str.w	r2, [r9, #12]
   1fd04:	6929      	ldr	r1, [r5, #16]
   1fd06:	f7ed ff67 	bl	dbd8 <memcpy>
   1fd0a:	e79a      	b.n	1fc42 <stream_handler_get+0x2e>
   1fd0c:	4644      	mov	r4, r8
   1fd0e:	e7ec      	b.n	1fcea <stream_handler_get+0xd6>
   1fd10:	f04f 30ff 	mov.w	r0, #4294967295
   1fd14:	e7ec      	b.n	1fcf0 <stream_handler_get+0xdc>
   1fd16:	bf00      	nop

0001fd18 <stream_handler_available>:
   1fd18:	b510      	push	{r4, lr}
   1fd1a:	4604      	mov	r4, r0
   1fd1c:	68c0      	ldr	r0, [r0, #12]
   1fd1e:	f006 fbff 	bl	26520 <linked_list_peek>
   1fd22:	b150      	cbz	r0, 1fd3a <stream_handler_available+0x22>
   1fd24:	6924      	ldr	r4, [r4, #16]
   1fd26:	4264      	negs	r4, r4
   1fd28:	6883      	ldr	r3, [r0, #8]
   1fd2a:	441c      	add	r4, r3
   1fd2c:	f006 fc00 	bl	26530 <linked_list_get_next>
   1fd30:	2800      	cmp	r0, #0
   1fd32:	d1f9      	bne.n	1fd28 <stream_handler_available+0x10>
   1fd34:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   1fd38:	bd10      	pop	{r4, pc}
   1fd3a:	f04f 30ff 	mov.w	r0, #4294967295
   1fd3e:	bd10      	pop	{r4, pc}

0001fd40 <stream_handler_flush>:
   1fd40:	b530      	push	{r4, r5, lr}
   1fd42:	4605      	mov	r5, r0
   1fd44:	68c0      	ldr	r0, [r0, #12]
   1fd46:	b085      	sub	sp, #20
   1fd48:	b9a8      	cbnz	r0, 1fd76 <stream_handler_flush+0x36>
   1fd4a:	e01a      	b.n	1fd82 <stream_handler_flush+0x42>
   1fd4c:	68e8      	ldr	r0, [r5, #12]
   1fd4e:	f006 fbdd 	bl	2650c <linked_list_pop>
   1fd52:	4604      	mov	r4, r0
   1fd54:	b170      	cbz	r0, 1fd74 <stream_handler_flush+0x34>
   1fd56:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1fd5a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1fd5e:	e9cd 0100 	strd	r0, r1, [sp]
   1fd62:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1fd66:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1fd6a:	4668      	mov	r0, sp
   1fd6c:	4798      	blx	r3
   1fd6e:	4620      	mov	r0, r4
   1fd70:	f7f9 fa38 	bl	191e4 <nrf_free>
   1fd74:	68e8      	ldr	r0, [r5, #12]
   1fd76:	f006 fbd9 	bl	2652c <linked_list_size_get>
   1fd7a:	2800      	cmp	r0, #0
   1fd7c:	d1e6      	bne.n	1fd4c <stream_handler_flush+0xc>
   1fd7e:	b005      	add	sp, #20
   1fd80:	bd30      	pop	{r4, r5, pc}
   1fd82:	2008      	movs	r0, #8
   1fd84:	b005      	add	sp, #20
   1fd86:	bd30      	pop	{r4, r5, pc}

0001fd88 <stream_handler_free>:
   1fd88:	b530      	push	{r4, r5, lr}
   1fd8a:	4605      	mov	r5, r0
   1fd8c:	68c0      	ldr	r0, [r0, #12]
   1fd8e:	b085      	sub	sp, #20
   1fd90:	b9a0      	cbnz	r0, 1fdbc <stream_handler_free+0x34>
   1fd92:	e01c      	b.n	1fdce <stream_handler_free+0x46>
   1fd94:	f006 fbba 	bl	2650c <linked_list_pop>
   1fd98:	4604      	mov	r4, r0
   1fd9a:	b170      	cbz	r0, 1fdba <stream_handler_free+0x32>
   1fd9c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1fda0:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1fda4:	e9cd 0100 	strd	r0, r1, [sp]
   1fda8:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1fdac:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1fdb0:	4668      	mov	r0, sp
   1fdb2:	4798      	blx	r3
   1fdb4:	4620      	mov	r0, r4
   1fdb6:	f7f9 fa15 	bl	191e4 <nrf_free>
   1fdba:	68e8      	ldr	r0, [r5, #12]
   1fdbc:	f006 fbb6 	bl	2652c <linked_list_size_get>
   1fdc0:	4604      	mov	r4, r0
   1fdc2:	68e8      	ldr	r0, [r5, #12]
   1fdc4:	2c00      	cmp	r4, #0
   1fdc6:	d1e5      	bne.n	1fd94 <stream_handler_free+0xc>
   1fdc8:	f7f9 fa0c 	bl	191e4 <nrf_free>
   1fdcc:	60ec      	str	r4, [r5, #12]
   1fdce:	b005      	add	sp, #20
   1fdd0:	bd30      	pop	{r4, r5, pc}
   1fdd2:	bf00      	nop

0001fdd4 <packet_free_cb>:
   1fdd4:	6800      	ldr	r0, [r0, #0]
   1fdd6:	f006 bb71 	b.w	264bc <rpc_at_client_data_free>
   1fdda:	bf00      	nop

0001fddc <at_interface_write>:
   1fddc:	b570      	push	{r4, r5, r6, lr}
   1fdde:	b082      	sub	sp, #8
   1fde0:	460e      	mov	r6, r1
   1fde2:	4614      	mov	r4, r2
   1fde4:	4605      	mov	r5, r0
   1fde6:	f004 fff9 	bl	24ddc <interface_socket_from_handle_get>
   1fdea:	2800      	cmp	r0, #0
   1fdec:	d042      	beq.n	1fe74 <at_interface_write+0x98>
   1fdee:	6803      	ldr	r3, [r0, #0]
   1fdf0:	039b      	lsls	r3, r3, #14
   1fdf2:	d53f      	bpl.n	1fe74 <at_interface_write+0x98>
   1fdf4:	6803      	ldr	r3, [r0, #0]
   1fdf6:	4621      	mov	r1, r4
   1fdf8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1fdfc:	6003      	str	r3, [r0, #0]
   1fdfe:	6803      	ldr	r3, [r0, #0]
   1fe00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1fe04:	6003      	str	r3, [r0, #0]
   1fe06:	a801      	add	r0, sp, #4
   1fe08:	f006 fb2e 	bl	26468 <rpc_at_client_request_alloc>
   1fe0c:	bb80      	cbnz	r0, 1fe70 <at_interface_write+0x94>
   1fe0e:	2204      	movs	r2, #4
   1fe10:	9b01      	ldr	r3, [sp, #4]
   1fe12:	721a      	strb	r2, [r3, #8]
   1fe14:	7258      	strb	r0, [r3, #9]
   1fe16:	7298      	strb	r0, [r3, #10]
   1fe18:	72d8      	strb	r0, [r3, #11]
   1fe1a:	60dd      	str	r5, [r3, #12]
   1fe1c:	b984      	cbnz	r4, 1fe40 <at_interface_write+0x64>
   1fe1e:	4618      	mov	r0, r3
   1fe20:	2101      	movs	r1, #1
   1fe22:	f006 fb35 	bl	26490 <rpc_at_client_request_send>
   1fe26:	b9d0      	cbnz	r0, 1fe5e <at_interface_write+0x82>
   1fe28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1fe2c:	4628      	mov	r0, r5
   1fe2e:	4611      	mov	r1, r2
   1fe30:	f04f 33ff 	mov.w	r3, #4294967295
   1fe34:	f004 ff62 	bl	24cfc <interface_socket_wait>
   1fe38:	b9a8      	cbnz	r0, 1fe66 <at_interface_write+0x8a>
   1fe3a:	4620      	mov	r0, r4
   1fe3c:	b002      	add	sp, #8
   1fe3e:	bd70      	pop	{r4, r5, r6, pc}
   1fe40:	4631      	mov	r1, r6
   1fe42:	6818      	ldr	r0, [r3, #0]
   1fe44:	4622      	mov	r2, r4
   1fe46:	f7ed fec7 	bl	dbd8 <memcpy>
   1fe4a:	2101      	movs	r1, #1
   1fe4c:	9801      	ldr	r0, [sp, #4]
   1fe4e:	f006 fb1f 	bl	26490 <rpc_at_client_request_send>
   1fe52:	2800      	cmp	r0, #0
   1fe54:	d0e8      	beq.n	1fe28 <at_interface_write+0x4c>
   1fe56:	9b01      	ldr	r3, [sp, #4]
   1fe58:	6818      	ldr	r0, [r3, #0]
   1fe5a:	f006 fb2f 	bl	264bc <rpc_at_client_data_free>
   1fe5e:	9801      	ldr	r0, [sp, #4]
   1fe60:	f006 fb24 	bl	264ac <rpc_at_client_message_free>
   1fe64:	2023      	movs	r0, #35	; 0x23
   1fe66:	f00e ff56 	bl	2ed16 <bsd_os_errno_set>
   1fe6a:	f04f 30ff 	mov.w	r0, #4294967295
   1fe6e:	e7e5      	b.n	1fe3c <at_interface_write+0x60>
   1fe70:	200c      	movs	r0, #12
   1fe72:	e7f8      	b.n	1fe66 <at_interface_write+0x8a>
   1fe74:	2016      	movs	r0, #22
   1fe76:	e7f6      	b.n	1fe66 <at_interface_write+0x8a>

0001fe78 <at_interface_init>:
   1fe78:	f006 baf0 	b.w	2645c <rpc_at_client_init>

0001fe7c <at_interface_open>:
   1fe7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe80:	2500      	movs	r5, #0
   1fe82:	b082      	sub	sp, #8
   1fe84:	ab02      	add	r3, sp, #8
   1fe86:	f843 5d08 	str.w	r5, [r3, #-8]!
   1fe8a:	4680      	mov	r8, r0
   1fe8c:	460f      	mov	r7, r1
   1fe8e:	4618      	mov	r0, r3
   1fe90:	4616      	mov	r6, r2
   1fe92:	2102      	movs	r1, #2
   1fe94:	4a1d      	ldr	r2, [pc, #116]	; (1ff0c <at_interface_open+0x90>)
   1fe96:	f004 fe9b 	bl	24bd0 <interface_socket_allocate>
   1fe9a:	9b00      	ldr	r3, [sp, #0]
   1fe9c:	4604      	mov	r4, r0
   1fe9e:	b30b      	cbz	r3, 1fee4 <at_interface_open+0x68>
   1fea0:	e9c3 8702 	strd	r8, r7, [r3, #8]
   1fea4:	611e      	str	r6, [r3, #16]
   1fea6:	4629      	mov	r1, r5
   1fea8:	a801      	add	r0, sp, #4
   1feaa:	f006 fadd 	bl	26468 <rpc_at_client_request_alloc>
   1feae:	b9e8      	cbnz	r0, 1feec <at_interface_open+0x70>
   1feb0:	2204      	movs	r2, #4
   1feb2:	9b01      	ldr	r3, [sp, #4]
   1feb4:	2105      	movs	r1, #5
   1feb6:	7258      	strb	r0, [r3, #9]
   1feb8:	7298      	strb	r0, [r3, #10]
   1feba:	72d8      	strb	r0, [r3, #11]
   1febc:	721a      	strb	r2, [r3, #8]
   1febe:	60dc      	str	r4, [r3, #12]
   1fec0:	4618      	mov	r0, r3
   1fec2:	f006 fae5 	bl	26490 <rpc_at_client_request_send>
   1fec6:	b9d8      	cbnz	r0, 1ff00 <at_interface_open+0x84>
   1fec8:	2202      	movs	r2, #2
   1feca:	f04f 33ff 	mov.w	r3, #4294967295
   1fece:	4611      	mov	r1, r2
   1fed0:	4620      	mov	r0, r4
   1fed2:	f004 ff13 	bl	24cfc <interface_socket_wait>
   1fed6:	4605      	mov	r5, r0
   1fed8:	b948      	cbnz	r0, 1feee <at_interface_open+0x72>
   1feda:	9a00      	ldr	r2, [sp, #0]
   1fedc:	6813      	ldr	r3, [r2, #0]
   1fede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1fee2:	6013      	str	r3, [r2, #0]
   1fee4:	4620      	mov	r0, r4
   1fee6:	b002      	add	sp, #8
   1fee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1feec:	250c      	movs	r5, #12
   1feee:	4620      	mov	r0, r4
   1fef0:	f004 fec2 	bl	24c78 <interface_socket_free>
   1fef4:	4628      	mov	r0, r5
   1fef6:	f00e ff0e 	bl	2ed16 <bsd_os_errno_set>
   1fefa:	f04f 34ff 	mov.w	r4, #4294967295
   1fefe:	e7f1      	b.n	1fee4 <at_interface_open+0x68>
   1ff00:	9801      	ldr	r0, [sp, #4]
   1ff02:	f006 fad3 	bl	264ac <rpc_at_client_message_free>
   1ff06:	2523      	movs	r5, #35	; 0x23
   1ff08:	e7f1      	b.n	1feee <at_interface_open+0x72>
   1ff0a:	bf00      	nop
   1ff0c:	0001fdd5 	.word	0x0001fdd5

0001ff10 <at_interface_close>:
   1ff10:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ff12:	b083      	sub	sp, #12
   1ff14:	4606      	mov	r6, r0
   1ff16:	f004 ff61 	bl	24ddc <interface_socket_from_handle_get>
   1ff1a:	2800      	cmp	r0, #0
   1ff1c:	d03d      	beq.n	1ff9a <at_interface_close+0x8a>
   1ff1e:	230d      	movs	r3, #13
   1ff20:	6807      	ldr	r7, [r0, #0]
   1ff22:	6003      	str	r3, [r0, #0]
   1ff24:	6803      	ldr	r3, [r0, #0]
   1ff26:	4604      	mov	r4, r0
   1ff28:	039b      	lsls	r3, r3, #14
   1ff2a:	d41f      	bmi.n	1ff6c <at_interface_close+0x5c>
   1ff2c:	2100      	movs	r1, #0
   1ff2e:	a801      	add	r0, sp, #4
   1ff30:	f006 fa9a 	bl	26468 <rpc_at_client_request_alloc>
   1ff34:	bb20      	cbnz	r0, 1ff80 <at_interface_close+0x70>
   1ff36:	2204      	movs	r2, #4
   1ff38:	9b01      	ldr	r3, [sp, #4]
   1ff3a:	2106      	movs	r1, #6
   1ff3c:	7258      	strb	r0, [r3, #9]
   1ff3e:	7298      	strb	r0, [r3, #10]
   1ff40:	72d8      	strb	r0, [r3, #11]
   1ff42:	721a      	strb	r2, [r3, #8]
   1ff44:	60de      	str	r6, [r3, #12]
   1ff46:	4618      	mov	r0, r3
   1ff48:	f006 faa2 	bl	26490 <rpc_at_client_request_send>
   1ff4c:	b9d0      	cbnz	r0, 1ff84 <at_interface_close+0x74>
   1ff4e:	220e      	movs	r2, #14
   1ff50:	f04f 33ff 	mov.w	r3, #4294967295
   1ff54:	4611      	mov	r1, r2
   1ff56:	4630      	mov	r0, r6
   1ff58:	f004 fed0 	bl	24cfc <interface_socket_wait>
   1ff5c:	4605      	mov	r5, r0
   1ff5e:	b9a8      	cbnz	r0, 1ff8c <at_interface_close+0x7c>
   1ff60:	4630      	mov	r0, r6
   1ff62:	f004 fe89 	bl	24c78 <interface_socket_free>
   1ff66:	4628      	mov	r0, r5
   1ff68:	b003      	add	sp, #12
   1ff6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ff6c:	6803      	ldr	r3, [r0, #0]
   1ff6e:	2100      	movs	r1, #0
   1ff70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1ff74:	6003      	str	r3, [r0, #0]
   1ff76:	a801      	add	r0, sp, #4
   1ff78:	f006 fa76 	bl	26468 <rpc_at_client_request_alloc>
   1ff7c:	2800      	cmp	r0, #0
   1ff7e:	d0da      	beq.n	1ff36 <at_interface_close+0x26>
   1ff80:	250c      	movs	r5, #12
   1ff82:	e003      	b.n	1ff8c <at_interface_close+0x7c>
   1ff84:	9801      	ldr	r0, [sp, #4]
   1ff86:	f006 fa91 	bl	264ac <rpc_at_client_message_free>
   1ff8a:	2523      	movs	r5, #35	; 0x23
   1ff8c:	6027      	str	r7, [r4, #0]
   1ff8e:	4628      	mov	r0, r5
   1ff90:	f00e fec1 	bl	2ed16 <bsd_os_errno_set>
   1ff94:	f04f 35ff 	mov.w	r5, #4294967295
   1ff98:	e7e5      	b.n	1ff66 <at_interface_close+0x56>
   1ff9a:	2516      	movs	r5, #22
   1ff9c:	e7f7      	b.n	1ff8e <at_interface_close+0x7e>
   1ff9e:	bf00      	nop

0001ffa0 <at_interface_read>:
   1ffa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ffa4:	b084      	sub	sp, #16
   1ffa6:	4688      	mov	r8, r1
   1ffa8:	4615      	mov	r5, r2
   1ffaa:	461e      	mov	r6, r3
   1ffac:	4607      	mov	r7, r0
   1ffae:	f004 ff15 	bl	24ddc <interface_socket_from_handle_get>
   1ffb2:	2800      	cmp	r0, #0
   1ffb4:	d049      	beq.n	2004a <__kernel_ram_size+0x4a>
   1ffb6:	2300      	movs	r3, #0
   1ffb8:	e9cd 8500 	strd	r8, r5, [sp]
   1ffbc:	f016 0502 	ands.w	r5, r6, #2
   1ffc0:	4604      	mov	r4, r0
   1ffc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1ffc6:	d00e      	beq.n	1ffe6 <at_interface_read+0x46>
   1ffc8:	e01e      	b.n	20008 <__kernel_ram_size+0x8>
   1ffca:	2d00      	cmp	r5, #0
   1ffcc:	d133      	bne.n	20036 <__kernel_ram_size+0x36>
   1ffce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ffd2:	69e3      	ldr	r3, [r4, #28]
   1ffd4:	4611      	mov	r1, r2
   1ffd6:	2b00      	cmp	r3, #0
   1ffd8:	bf08      	it	eq
   1ffda:	f04f 33ff 	moveq.w	r3, #4294967295
   1ffde:	4638      	mov	r0, r7
   1ffe0:	f004 fe8c 	bl	24cfc <interface_socket_wait>
   1ffe4:	4605      	mov	r5, r0
   1ffe6:	6823      	ldr	r3, [r4, #0]
   1ffe8:	69a0      	ldr	r0, [r4, #24]
   1ffea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1ffee:	6023      	str	r3, [r4, #0]
   1fff0:	6803      	ldr	r3, [r0, #0]
   1fff2:	4632      	mov	r2, r6
   1fff4:	689b      	ldr	r3, [r3, #8]
   1fff6:	4669      	mov	r1, sp
   1fff8:	4798      	blx	r3
   1fffa:	f1b0 0800 	subs.w	r8, r0, #0
   1fffe:	dbe4      	blt.n	1ffca <at_interface_read+0x2a>
   20000:	4640      	mov	r0, r8
   20002:	b004      	add	sp, #16
   20004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20008:	6803      	ldr	r3, [r0, #0]
   2000a:	6980      	ldr	r0, [r0, #24]
   2000c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   20010:	6023      	str	r3, [r4, #0]
   20012:	6803      	ldr	r3, [r0, #0]
   20014:	4632      	mov	r2, r6
   20016:	689b      	ldr	r3, [r3, #8]
   20018:	4669      	mov	r1, sp
   2001a:	4798      	blx	r3
   2001c:	f1b0 0800 	subs.w	r8, r0, #0
   20020:	daee      	bge.n	20000 <__kernel_ram_size>
   20022:	f1b8 3fff 	cmp.w	r8, #4294967295
   20026:	d1eb      	bne.n	20000 <__kernel_ram_size>
   20028:	2023      	movs	r0, #35	; 0x23
   2002a:	f00e fe74 	bl	2ed16 <bsd_os_errno_set>
   2002e:	4640      	mov	r0, r8
   20030:	b004      	add	sp, #16
   20032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20036:	f1b8 3fff 	cmp.w	r8, #4294967295
   2003a:	d1e1      	bne.n	20000 <__kernel_ram_size>
   2003c:	4628      	mov	r0, r5
   2003e:	f00e fe6a 	bl	2ed16 <bsd_os_errno_set>
   20042:	4640      	mov	r0, r8
   20044:	b004      	add	sp, #16
   20046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2004a:	2016      	movs	r0, #22
   2004c:	f00e fe63 	bl	2ed16 <bsd_os_errno_set>
   20050:	f04f 38ff 	mov.w	r8, #4294967295
   20054:	e7d4      	b.n	20000 <__kernel_ram_size>
   20056:	bf00      	nop

00020058 <at_interface_getopt>:
   20058:	f004 bee6 	b.w	24e28 <interface_socket_getopt>

0002005c <at_interface_setopt>:
   2005c:	2901      	cmp	r1, #1
   2005e:	d001      	beq.n	20064 <at_interface_setopt+0x8>
   20060:	202a      	movs	r0, #42	; 0x2a
   20062:	4770      	bx	lr
   20064:	b538      	push	{r3, r4, r5, lr}
   20066:	461c      	mov	r4, r3
   20068:	4615      	mov	r5, r2
   2006a:	f004 feb7 	bl	24ddc <interface_socket_from_handle_get>
   2006e:	4603      	mov	r3, r0
   20070:	b1b0      	cbz	r0, 200a0 <at_interface_setopt+0x44>
   20072:	2d14      	cmp	r5, #20
   20074:	d110      	bne.n	20098 <at_interface_setopt+0x3c>
   20076:	b1ac      	cbz	r4, 200a4 <at_interface_setopt+0x48>
   20078:	9a04      	ldr	r2, [sp, #16]
   2007a:	2a08      	cmp	r2, #8
   2007c:	d10e      	bne.n	2009c <at_interface_setopt+0x40>
   2007e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   20082:	6862      	ldr	r2, [r4, #4]
   20084:	4d08      	ldr	r5, [pc, #32]	; (200a8 <at_interface_setopt+0x4c>)
   20086:	6821      	ldr	r1, [r4, #0]
   20088:	fba5 4202 	umull	r4, r2, r5, r2
   2008c:	0992      	lsrs	r2, r2, #6
   2008e:	fb00 2201 	mla	r2, r0, r1, r2
   20092:	61da      	str	r2, [r3, #28]
   20094:	2000      	movs	r0, #0
   20096:	bd38      	pop	{r3, r4, r5, pc}
   20098:	202a      	movs	r0, #42	; 0x2a
   2009a:	bd38      	pop	{r3, r4, r5, pc}
   2009c:	2016      	movs	r0, #22
   2009e:	bd38      	pop	{r3, r4, r5, pc}
   200a0:	2009      	movs	r0, #9
   200a2:	bd38      	pop	{r3, r4, r5, pc}
   200a4:	200e      	movs	r0, #14
   200a6:	bd38      	pop	{r3, r4, r5, pc}
   200a8:	10624dd3 	.word	0x10624dd3

000200ac <rpc_at_event_handler>:
   200ac:	b570      	push	{r4, r5, r6, lr}
   200ae:	4605      	mov	r5, r0
   200b0:	b084      	sub	sp, #16
   200b2:	68c0      	ldr	r0, [r0, #12]
   200b4:	460e      	mov	r6, r1
   200b6:	f004 fe91 	bl	24ddc <interface_socket_from_handle_get>
   200ba:	b340      	cbz	r0, 2010e <rpc_at_event_handler+0x62>
   200bc:	6803      	ldr	r3, [r0, #0]
   200be:	4604      	mov	r4, r0
   200c0:	b29b      	uxth	r3, r3
   200c2:	2b01      	cmp	r3, #1
   200c4:	d01f      	beq.n	20106 <rpc_at_event_handler+0x5a>
   200c6:	6803      	ldr	r3, [r0, #0]
   200c8:	b29b      	uxth	r3, r3
   200ca:	2b0d      	cmp	r3, #13
   200cc:	d027      	beq.n	2011e <rpc_at_event_handler+0x72>
   200ce:	6803      	ldr	r3, [r0, #0]
   200d0:	b29b      	uxth	r3, r3
   200d2:	2b02      	cmp	r3, #2
   200d4:	d02e      	beq.n	20134 <rpc_at_event_handler+0x88>
   200d6:	3e03      	subs	r6, #3
   200d8:	2e01      	cmp	r6, #1
   200da:	d811      	bhi.n	20100 <rpc_at_event_handler+0x54>
   200dc:	2300      	movs	r3, #0
   200de:	6829      	ldr	r1, [r5, #0]
   200e0:	686a      	ldr	r2, [r5, #4]
   200e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
   200e6:	e9cd 1200 	strd	r1, r2, [sp]
   200ea:	69a0      	ldr	r0, [r4, #24]
   200ec:	4669      	mov	r1, sp
   200ee:	6803      	ldr	r3, [r0, #0]
   200f0:	685b      	ldr	r3, [r3, #4]
   200f2:	4798      	blx	r3
   200f4:	3001      	adds	r0, #1
   200f6:	d017      	beq.n	20128 <rpc_at_event_handler+0x7c>
   200f8:	6823      	ldr	r3, [r4, #0]
   200fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   200fe:	6023      	str	r3, [r4, #0]
   20100:	2000      	movs	r0, #0
   20102:	b004      	add	sp, #16
   20104:	bd70      	pop	{r4, r5, r6, pc}
   20106:	2e02      	cmp	r6, #2
   20108:	d1e5      	bne.n	200d6 <rpc_at_event_handler+0x2a>
   2010a:	6006      	str	r6, [r0, #0]
   2010c:	e7f8      	b.n	20100 <rpc_at_event_handler+0x54>
   2010e:	6828      	ldr	r0, [r5, #0]
   20110:	2800      	cmp	r0, #0
   20112:	d0f5      	beq.n	20100 <rpc_at_event_handler+0x54>
   20114:	f006 f9d2 	bl	264bc <rpc_at_client_data_free>
   20118:	2000      	movs	r0, #0
   2011a:	b004      	add	sp, #16
   2011c:	bd70      	pop	{r4, r5, r6, pc}
   2011e:	2e02      	cmp	r6, #2
   20120:	d1d9      	bne.n	200d6 <rpc_at_event_handler+0x2a>
   20122:	230e      	movs	r3, #14
   20124:	6003      	str	r3, [r0, #0]
   20126:	e7eb      	b.n	20100 <rpc_at_event_handler+0x54>
   20128:	6828      	ldr	r0, [r5, #0]
   2012a:	f006 f9c7 	bl	264bc <rpc_at_client_data_free>
   2012e:	2000      	movs	r0, #0
   20130:	b004      	add	sp, #16
   20132:	bd70      	pop	{r4, r5, r6, pc}
   20134:	6803      	ldr	r3, [r0, #0]
   20136:	029b      	lsls	r3, r3, #10
   20138:	d5cd      	bpl.n	200d6 <rpc_at_event_handler+0x2a>
   2013a:	2e02      	cmp	r6, #2
   2013c:	d1cb      	bne.n	200d6 <rpc_at_event_handler+0x2a>
   2013e:	6803      	ldr	r3, [r0, #0]
   20140:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   20144:	6003      	str	r3, [r0, #0]
   20146:	6803      	ldr	r3, [r0, #0]
   20148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2014c:	6003      	str	r3, [r0, #0]
   2014e:	e7d7      	b.n	20100 <rpc_at_event_handler+0x54>

00020150 <ip_client_event_handler>:
   20150:	f850 1b08 	ldr.w	r1, [r0], #8
   20154:	0c09      	lsrs	r1, r1, #16
   20156:	f004 bab3 	b.w	246c0 <rpc_ip_event_handler>
   2015a:	bf00      	nop

0002015c <rpc_ip_client_init>:
   2015c:	4801      	ldr	r0, [pc, #4]	; (20164 <rpc_ip_client_init+0x8>)
   2015e:	f004 bf55 	b.w	2500c <rpc_client_register>
   20162:	bf00      	nop
   20164:	00033970 	.word	0x00033970

00020168 <rpc_ip_client_request_alloc>:
   20168:	2300      	movs	r3, #0
   2016a:	b510      	push	{r4, lr}
   2016c:	b082      	sub	sp, #8
   2016e:	9301      	str	r3, [sp, #4]
   20170:	b158      	cbz	r0, 2018a <rpc_ip_client_request_alloc+0x22>
   20172:	4604      	mov	r4, r0
   20174:	aa01      	add	r2, sp, #4
   20176:	2004      	movs	r0, #4
   20178:	f005 f988 	bl	2548c <rpc_message_alloc>
   2017c:	b918      	cbnz	r0, 20186 <rpc_ip_client_request_alloc+0x1e>
   2017e:	9b01      	ldr	r3, [sp, #4]
   20180:	b10b      	cbz	r3, 20186 <rpc_ip_client_request_alloc+0x1e>
   20182:	3308      	adds	r3, #8
   20184:	6023      	str	r3, [r4, #0]
   20186:	b002      	add	sp, #8
   20188:	bd10      	pop	{r4, pc}
   2018a:	2007      	movs	r0, #7
   2018c:	b002      	add	sp, #8
   2018e:	bd10      	pop	{r4, pc}

00020190 <rpc_ip_client_request_send>:
   20190:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   20194:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   20198:	d10b      	bne.n	201b2 <rpc_ip_client_request_send+0x22>
   2019a:	b160      	cbz	r0, 201b6 <rpc_ip_client_request_send+0x26>
   2019c:	4603      	mov	r3, r0
   2019e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   201a2:	2004      	movs	r0, #4
   201a4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   201a8:	f843 1d08 	str.w	r1, [r3, #-8]!
   201ac:	4619      	mov	r1, r3
   201ae:	f005 b955 	b.w	2545c <rpc_message_send>
   201b2:	200f      	movs	r0, #15
   201b4:	4770      	bx	lr
   201b6:	2007      	movs	r0, #7
   201b8:	4770      	bx	lr
   201ba:	bf00      	nop

000201bc <rpc_ip_client_message_free>:
   201bc:	b120      	cbz	r0, 201c8 <rpc_ip_client_message_free+0xc>
   201be:	f1a0 0108 	sub.w	r1, r0, #8
   201c2:	2004      	movs	r0, #4
   201c4:	f005 b996 	b.w	254f4 <rpc_message_free>
   201c8:	2007      	movs	r0, #7
   201ca:	4770      	bx	lr

000201cc <rpc_ip_client_data_free>:
   201cc:	b118      	cbz	r0, 201d6 <rpc_ip_client_data_free+0xa>
   201ce:	4601      	mov	r1, r0
   201d0:	2004      	movs	r0, #4
   201d2:	f005 ba3f 	b.w	25654 <rpc_message_data_free>
   201d6:	2007      	movs	r0, #7
   201d8:	4770      	bx	lr
   201da:	bf00      	nop

000201dc <secure_client_socket>:
   201dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   201e0:	460c      	mov	r4, r1
   201e2:	680b      	ldr	r3, [r1, #0]
   201e4:	6949      	ldr	r1, [r1, #20]
   201e6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   201ea:	6023      	str	r3, [r4, #0]
   201ec:	6822      	ldr	r2, [r4, #0]
   201ee:	2300      	movs	r3, #0
   201f0:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
   201f4:	6022      	str	r2, [r4, #0]
   201f6:	f247 0281 	movw	r2, #28801	; 0x7081
   201fa:	6827      	ldr	r7, [r4, #0]
   201fc:	4606      	mov	r6, r0
   201fe:	f003 fa6f 	bl	236e0 <ip_interface_request_create>
   20202:	2800      	cmp	r0, #0
   20204:	d03b      	beq.n	2027e <secure_client_socket+0xa2>
   20206:	4605      	mov	r5, r0
   20208:	4b28      	ldr	r3, [pc, #160]	; (202ac <secure_client_socket+0xd0>)
   2020a:	eb06 01c6 	add.w	r1, r6, r6, lsl #3
   2020e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   20212:	2224      	movs	r2, #36	; 0x24
   20214:	3014      	adds	r0, #20
   20216:	f7ed fcdf 	bl	dbd8 <memcpy>
   2021a:	68ab      	ldr	r3, [r5, #8]
   2021c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 202b0 <secure_client_socket+0xd4>
   20220:	3324      	adds	r3, #36	; 0x24
   20222:	60ab      	str	r3, [r5, #8]
   20224:	6823      	ldr	r3, [r4, #0]
   20226:	4629      	mov	r1, r5
   20228:	ea03 0308 	and.w	r3, r3, r8
   2022c:	f043 030a 	orr.w	r3, r3, #10
   20230:	6023      	str	r3, [r4, #0]
   20232:	f247 0281 	movw	r2, #28801	; 0x7081
   20236:	463b      	mov	r3, r7
   20238:	4620      	mov	r0, r4
   2023a:	f003 fa71 	bl	23720 <ip_interface_request_send>
   2023e:	b960      	cbnz	r0, 2025a <secure_client_socket+0x7e>
   20240:	6823      	ldr	r3, [r4, #0]
   20242:	00db      	lsls	r3, r3, #3
   20244:	d40b      	bmi.n	2025e <secure_client_socket+0x82>
   20246:	f04f 33ff 	mov.w	r3, #4294967295
   2024a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2024e:	210b      	movs	r1, #11
   20250:	4630      	mov	r0, r6
   20252:	f003 fa79 	bl	23748 <ip_interface_wait>
   20256:	b128      	cbz	r0, 20264 <secure_client_socket+0x88>
   20258:	6027      	str	r7, [r4, #0]
   2025a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2025e:	2073      	movs	r0, #115	; 0x73
   20260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20264:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   20268:	4630      	mov	r0, r6
   2026a:	4611      	mov	r1, r2
   2026c:	f04f 33ff 	mov.w	r3, #4294967295
   20270:	f003 fa6a 	bl	23748 <ip_interface_wait>
   20274:	b130      	cbz	r0, 20284 <secure_client_socket+0xa8>
   20276:	2873      	cmp	r0, #115	; 0x73
   20278:	d0ef      	beq.n	2025a <secure_client_socket+0x7e>
   2027a:	6027      	str	r7, [r4, #0]
   2027c:	e7ed      	b.n	2025a <secure_client_socket+0x7e>
   2027e:	200c      	movs	r0, #12
   20280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20284:	6823      	ldr	r3, [r4, #0]
   20286:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   2028a:	6023      	str	r3, [r4, #0]
   2028c:	6823      	ldr	r3, [r4, #0]
   2028e:	ea03 0808 	and.w	r8, r3, r8
   20292:	f048 030c 	orr.w	r3, r8, #12
   20296:	6023      	str	r3, [r4, #0]
   20298:	6823      	ldr	r3, [r4, #0]
   2029a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2029e:	6023      	str	r3, [r4, #0]
   202a0:	6823      	ldr	r3, [r4, #0]
   202a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   202a6:	6023      	str	r3, [r4, #0]
   202a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   202ac:	20021ffc 	.word	0x20021ffc
   202b0:	ffff0000 	.word	0xffff0000

000202b4 <tls_interface_init>:
   202b4:	2000      	movs	r0, #0
   202b6:	4770      	bx	lr

000202b8 <tls_interface_open>:
   202b8:	b538      	push	{r3, r4, r5, lr}
   202ba:	f020 0308 	bic.w	r3, r0, #8
   202be:	2b02      	cmp	r3, #2
   202c0:	d006      	beq.n	202d0 <tls_interface_open+0x18>
   202c2:	202f      	movs	r0, #47	; 0x2f
   202c4:	f00e fd27 	bl	2ed16 <bsd_os_errno_set>
   202c8:	f04f 35ff 	mov.w	r5, #4294967295
   202cc:	4628      	mov	r0, r5
   202ce:	bd38      	pop	{r3, r4, r5, pc}
   202d0:	4614      	mov	r4, r2
   202d2:	1e4a      	subs	r2, r1, #1
   202d4:	2a01      	cmp	r2, #1
   202d6:	d828      	bhi.n	2032a <tls_interface_open+0x72>
   202d8:	bb14      	cbnz	r4, 20320 <tls_interface_open+0x68>
   202da:	2901      	cmp	r1, #1
   202dc:	bf06      	itte	eq
   202de:	2301      	moveq	r3, #1
   202e0:	f44f 7482 	moveq.w	r4, #260	; 0x104
   202e4:	f44f 7487 	movne.w	r4, #270	; 0x10e
   202e8:	461a      	mov	r2, r3
   202ea:	f003 fa59 	bl	237a0 <ip_interface_open>
   202ee:	1e05      	subs	r5, r0, #0
   202f0:	db26      	blt.n	20340 <tls_interface_open+0x88>
   202f2:	4b15      	ldr	r3, [pc, #84]	; (20348 <tls_interface_open+0x90>)
   202f4:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   202f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   202fc:	2224      	movs	r2, #36	; 0x24
   202fe:	4913      	ldr	r1, [pc, #76]	; (2034c <tls_interface_open+0x94>)
   20300:	f7ed fc6a 	bl	dbd8 <memcpy>
   20304:	4628      	mov	r0, r5
   20306:	f004 fd69 	bl	24ddc <interface_socket_from_handle_get>
   2030a:	6803      	ldr	r3, [r0, #0]
   2030c:	6104      	str	r4, [r0, #16]
   2030e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   20312:	6003      	str	r3, [r0, #0]
   20314:	6803      	ldr	r3, [r0, #0]
   20316:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2031a:	6003      	str	r3, [r0, #0]
   2031c:	4628      	mov	r0, r5
   2031e:	bd38      	pop	{r3, r4, r5, pc}
   20320:	2901      	cmp	r1, #1
   20322:	d008      	beq.n	20336 <tls_interface_open+0x7e>
   20324:	f5b4 7f87 	cmp.w	r4, #270	; 0x10e
   20328:	d0de      	beq.n	202e8 <tls_interface_open+0x30>
   2032a:	2016      	movs	r0, #22
   2032c:	f00e fcf3 	bl	2ed16 <bsd_os_errno_set>
   20330:	f04f 35ff 	mov.w	r5, #4294967295
   20334:	e7ca      	b.n	202cc <tls_interface_open+0x14>
   20336:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
   2033a:	d1f6      	bne.n	2032a <tls_interface_open+0x72>
   2033c:	460b      	mov	r3, r1
   2033e:	e7d3      	b.n	202e8 <tls_interface_open+0x30>
   20340:	f04f 35ff 	mov.w	r5, #4294967295
   20344:	e7c2      	b.n	202cc <tls_interface_open+0x14>
   20346:	bf00      	nop
   20348:	20021ffc 	.word	0x20021ffc
   2034c:	00033980 	.word	0x00033980

00020350 <tls_interface_close>:
   20350:	b510      	push	{r4, lr}
   20352:	4604      	mov	r4, r0
   20354:	f004 fd42 	bl	24ddc <interface_socket_from_handle_get>
   20358:	b120      	cbz	r0, 20364 <tls_interface_close+0x14>
   2035a:	4620      	mov	r0, r4
   2035c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20360:	f003 bab8 	b.w	238d4 <ip_interface_close>
   20364:	2009      	movs	r0, #9
   20366:	f00e fcd6 	bl	2ed16 <bsd_os_errno_set>
   2036a:	f04f 30ff 	mov.w	r0, #4294967295
   2036e:	bd10      	pop	{r4, pc}

00020370 <tls_interface_sendto>:
   20370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20374:	460d      	mov	r5, r1
   20376:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2037a:	4616      	mov	r6, r2
   2037c:	461f      	mov	r7, r3
   2037e:	4604      	mov	r4, r0
   20380:	f004 fd2c 	bl	24ddc <interface_socket_from_handle_get>
   20384:	2800      	cmp	r0, #0
   20386:	d03b      	beq.n	20400 <tls_interface_sendto+0x90>
   20388:	6803      	ldr	r3, [r0, #0]
   2038a:	b29b      	uxth	r3, r3
   2038c:	2b0c      	cmp	r3, #12
   2038e:	d039      	beq.n	20404 <tls_interface_sendto+0x94>
   20390:	6803      	ldr	r3, [r0, #0]
   20392:	b29b      	uxth	r3, r3
   20394:	2b0b      	cmp	r3, #11
   20396:	d111      	bne.n	203bc <tls_interface_sendto+0x4c>
   20398:	4b20      	ldr	r3, [pc, #128]	; (2041c <tls_interface_sendto+0xac>)
   2039a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   2039e:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   203a2:	2b02      	cmp	r3, #2
   203a4:	d038      	beq.n	20418 <tls_interface_sendto+0xa8>
   203a6:	68c3      	ldr	r3, [r0, #12]
   203a8:	2b01      	cmp	r3, #1
   203aa:	bf14      	ite	ne
   203ac:	2039      	movne	r0, #57	; 0x39
   203ae:	202a      	moveq	r0, #42	; 0x2a
   203b0:	f00e fcb1 	bl	2ed16 <bsd_os_errno_set>
   203b4:	f04f 30ff 	mov.w	r0, #4294967295
   203b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   203bc:	68c3      	ldr	r3, [r0, #12]
   203be:	2b01      	cmp	r3, #1
   203c0:	d00b      	beq.n	203da <tls_interface_sendto+0x6a>
   203c2:	2b02      	cmp	r3, #2
   203c4:	d001      	beq.n	203ca <tls_interface_sendto+0x5a>
   203c6:	2039      	movs	r0, #57	; 0x39
   203c8:	e7f2      	b.n	203b0 <tls_interface_sendto+0x40>
   203ca:	6803      	ldr	r3, [r0, #0]
   203cc:	b29b      	uxth	r3, r3
   203ce:	2b02      	cmp	r3, #2
   203d0:	d007      	beq.n	203e2 <tls_interface_sendto+0x72>
   203d2:	6803      	ldr	r3, [r0, #0]
   203d4:	b29b      	uxth	r3, r3
   203d6:	2b04      	cmp	r3, #4
   203d8:	d003      	beq.n	203e2 <tls_interface_sendto+0x72>
   203da:	6803      	ldr	r3, [r0, #0]
   203dc:	b29b      	uxth	r3, r3
   203de:	2b05      	cmp	r3, #5
   203e0:	d1f1      	bne.n	203c6 <tls_interface_sendto+0x56>
   203e2:	4b0e      	ldr	r3, [pc, #56]	; (2041c <tls_interface_sendto+0xac>)
   203e4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   203e8:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   203ec:	2b02      	cmp	r3, #2
   203ee:	d1ea      	bne.n	203c6 <tls_interface_sendto+0x56>
   203f0:	4601      	mov	r1, r0
   203f2:	4620      	mov	r0, r4
   203f4:	f7ff fef2 	bl	201dc <secure_client_socket>
   203f8:	2800      	cmp	r0, #0
   203fa:	d003      	beq.n	20404 <tls_interface_sendto+0x94>
   203fc:	dcd8      	bgt.n	203b0 <tls_interface_sendto+0x40>
   203fe:	e7d9      	b.n	203b4 <tls_interface_sendto+0x44>
   20400:	2009      	movs	r0, #9
   20402:	e7d5      	b.n	203b0 <tls_interface_sendto+0x40>
   20404:	e9cd 8908 	strd	r8, r9, [sp, #32]
   20408:	463b      	mov	r3, r7
   2040a:	4632      	mov	r2, r6
   2040c:	4629      	mov	r1, r5
   2040e:	4620      	mov	r0, r4
   20410:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20414:	f003 bace 	b.w	239b4 <ip_interface_sendto>
   20418:	2023      	movs	r0, #35	; 0x23
   2041a:	e7c9      	b.n	203b0 <tls_interface_sendto+0x40>
   2041c:	20021ffc 	.word	0x20021ffc

00020420 <tls_interface_recvfrom>:
   20420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20424:	460d      	mov	r5, r1
   20426:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2042a:	4616      	mov	r6, r2
   2042c:	461f      	mov	r7, r3
   2042e:	4604      	mov	r4, r0
   20430:	f004 fcd4 	bl	24ddc <interface_socket_from_handle_get>
   20434:	b3a0      	cbz	r0, 204a0 <tls_interface_recvfrom+0x80>
   20436:	6803      	ldr	r3, [r0, #0]
   20438:	b29b      	uxth	r3, r3
   2043a:	2b0c      	cmp	r3, #12
   2043c:	d026      	beq.n	2048c <tls_interface_recvfrom+0x6c>
   2043e:	68c3      	ldr	r3, [r0, #12]
   20440:	2b01      	cmp	r3, #1
   20442:	d010      	beq.n	20466 <tls_interface_recvfrom+0x46>
   20444:	2b02      	cmp	r3, #2
   20446:	d006      	beq.n	20456 <tls_interface_recvfrom+0x36>
   20448:	2023      	movs	r0, #35	; 0x23
   2044a:	f00e fc64 	bl	2ed16 <bsd_os_errno_set>
   2044e:	f04f 30ff 	mov.w	r0, #4294967295
   20452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20456:	6803      	ldr	r3, [r0, #0]
   20458:	b29b      	uxth	r3, r3
   2045a:	2b02      	cmp	r3, #2
   2045c:	d007      	beq.n	2046e <tls_interface_recvfrom+0x4e>
   2045e:	6803      	ldr	r3, [r0, #0]
   20460:	b29b      	uxth	r3, r3
   20462:	2b04      	cmp	r3, #4
   20464:	d003      	beq.n	2046e <tls_interface_recvfrom+0x4e>
   20466:	6803      	ldr	r3, [r0, #0]
   20468:	b29b      	uxth	r3, r3
   2046a:	2b05      	cmp	r3, #5
   2046c:	d1ec      	bne.n	20448 <tls_interface_recvfrom+0x28>
   2046e:	4b0d      	ldr	r3, [pc, #52]	; (204a4 <tls_interface_recvfrom+0x84>)
   20470:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   20474:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   20478:	2b02      	cmp	r3, #2
   2047a:	d1e5      	bne.n	20448 <tls_interface_recvfrom+0x28>
   2047c:	4601      	mov	r1, r0
   2047e:	4620      	mov	r0, r4
   20480:	f7ff feac 	bl	201dc <secure_client_socket>
   20484:	2800      	cmp	r0, #0
   20486:	d001      	beq.n	2048c <tls_interface_recvfrom+0x6c>
   20488:	dcdf      	bgt.n	2044a <tls_interface_recvfrom+0x2a>
   2048a:	e7e0      	b.n	2044e <tls_interface_recvfrom+0x2e>
   2048c:	e9cd 8908 	strd	r8, r9, [sp, #32]
   20490:	463b      	mov	r3, r7
   20492:	4632      	mov	r2, r6
   20494:	4629      	mov	r1, r5
   20496:	4620      	mov	r0, r4
   20498:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2049c:	f003 bb60 	b.w	23b60 <ip_interface_recvfrom>
   204a0:	2009      	movs	r0, #9
   204a2:	e7d2      	b.n	2044a <tls_interface_recvfrom+0x2a>
   204a4:	20021ffc 	.word	0x20021ffc

000204a8 <tls_interface_bind>:
   204a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   204ac:	460c      	mov	r4, r1
   204ae:	4617      	mov	r7, r2
   204b0:	4606      	mov	r6, r0
   204b2:	f004 fc93 	bl	24ddc <interface_socket_from_handle_get>
   204b6:	2800      	cmp	r0, #0
   204b8:	d04c      	beq.n	20554 <tls_interface_bind+0xac>
   204ba:	6803      	ldr	r3, [r0, #0]
   204bc:	4605      	mov	r5, r0
   204be:	b29b      	uxth	r3, r3
   204c0:	2b02      	cmp	r3, #2
   204c2:	d150      	bne.n	20566 <tls_interface_bind+0xbe>
   204c4:	4621      	mov	r1, r4
   204c6:	463a      	mov	r2, r7
   204c8:	4630      	mov	r0, r6
   204ca:	f003 fce9 	bl	23ea0 <ip_interface_bind>
   204ce:	4604      	mov	r4, r0
   204d0:	b120      	cbz	r0, 204dc <tls_interface_bind+0x34>
   204d2:	2c00      	cmp	r4, #0
   204d4:	dc3f      	bgt.n	20556 <tls_interface_bind+0xae>
   204d6:	4620      	mov	r0, r4
   204d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   204dc:	eb06 07c6 	add.w	r7, r6, r6, lsl #3
   204e0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 20578 <tls_interface_bind+0xd0>
   204e4:	00bf      	lsls	r7, r7, #2
   204e6:	f818 3007 	ldrb.w	r3, [r8, r7]
   204ea:	2b01      	cmp	r3, #1
   204ec:	d1f3      	bne.n	204d6 <tls_interface_bind+0x2e>
   204ee:	4603      	mov	r3, r0
   204f0:	f247 0281 	movw	r2, #28801	; 0x7081
   204f4:	6969      	ldr	r1, [r5, #20]
   204f6:	4630      	mov	r0, r6
   204f8:	f003 f8f2 	bl	236e0 <ip_interface_request_create>
   204fc:	4681      	mov	r9, r0
   204fe:	b3b0      	cbz	r0, 2056e <tls_interface_bind+0xc6>
   20500:	eb08 0107 	add.w	r1, r8, r7
   20504:	2224      	movs	r2, #36	; 0x24
   20506:	3014      	adds	r0, #20
   20508:	f7ed fb66 	bl	dbd8 <memcpy>
   2050c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   20510:	4649      	mov	r1, r9
   20512:	3324      	adds	r3, #36	; 0x24
   20514:	f8c9 3008 	str.w	r3, [r9, #8]
   20518:	682a      	ldr	r2, [r5, #0]
   2051a:	2304      	movs	r3, #4
   2051c:	0c12      	lsrs	r2, r2, #16
   2051e:	0412      	lsls	r2, r2, #16
   20520:	f042 020a 	orr.w	r2, r2, #10
   20524:	602a      	str	r2, [r5, #0]
   20526:	4628      	mov	r0, r5
   20528:	f247 0281 	movw	r2, #28801	; 0x7081
   2052c:	f003 f8f8 	bl	23720 <ip_interface_request_send>
   20530:	b9f8      	cbnz	r0, 20572 <tls_interface_bind+0xca>
   20532:	682b      	ldr	r3, [r5, #0]
   20534:	00db      	lsls	r3, r3, #3
   20536:	d418      	bmi.n	2056a <tls_interface_bind+0xc2>
   20538:	4630      	mov	r0, r6
   2053a:	f04f 33ff 	mov.w	r3, #4294967295
   2053e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20542:	210b      	movs	r1, #11
   20544:	f003 f900 	bl	23748 <ip_interface_wait>
   20548:	2800      	cmp	r0, #0
   2054a:	d0c4      	beq.n	204d6 <tls_interface_bind+0x2e>
   2054c:	2304      	movs	r3, #4
   2054e:	4604      	mov	r4, r0
   20550:	602b      	str	r3, [r5, #0]
   20552:	e7be      	b.n	204d2 <tls_interface_bind+0x2a>
   20554:	2409      	movs	r4, #9
   20556:	4620      	mov	r0, r4
   20558:	f04f 34ff 	mov.w	r4, #4294967295
   2055c:	f00e fbdb 	bl	2ed16 <bsd_os_errno_set>
   20560:	4620      	mov	r0, r4
   20562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   20566:	242d      	movs	r4, #45	; 0x2d
   20568:	e7f5      	b.n	20556 <tls_interface_bind+0xae>
   2056a:	2473      	movs	r4, #115	; 0x73
   2056c:	e7f3      	b.n	20556 <tls_interface_bind+0xae>
   2056e:	240c      	movs	r4, #12
   20570:	e7f1      	b.n	20556 <tls_interface_bind+0xae>
   20572:	4604      	mov	r4, r0
   20574:	e7ad      	b.n	204d2 <tls_interface_bind+0x2a>
   20576:	bf00      	nop
   20578:	20021ffc 	.word	0x20021ffc

0002057c <tls_interface_connect>:
   2057c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2057e:	460e      	mov	r6, r1
   20580:	4617      	mov	r7, r2
   20582:	4604      	mov	r4, r0
   20584:	f004 fc2a 	bl	24ddc <interface_socket_from_handle_get>
   20588:	b1e8      	cbz	r0, 205c6 <tls_interface_connect+0x4a>
   2058a:	4b13      	ldr	r3, [pc, #76]	; (205d8 <tls_interface_connect+0x5c>)
   2058c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   20590:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   20594:	2b02      	cmp	r3, #2
   20596:	d11c      	bne.n	205d2 <tls_interface_connect+0x56>
   20598:	6803      	ldr	r3, [r0, #0]
   2059a:	4605      	mov	r5, r0
   2059c:	b29b      	uxth	r3, r3
   2059e:	2b02      	cmp	r3, #2
   205a0:	d003      	beq.n	205aa <tls_interface_connect+0x2e>
   205a2:	6803      	ldr	r3, [r0, #0]
   205a4:	b29b      	uxth	r3, r3
   205a6:	2b04      	cmp	r3, #4
   205a8:	d113      	bne.n	205d2 <tls_interface_connect+0x56>
   205aa:	463a      	mov	r2, r7
   205ac:	4631      	mov	r1, r6
   205ae:	4620      	mov	r0, r4
   205b0:	f003 fbd0 	bl	23d54 <ip_interface_connect>
   205b4:	b110      	cbz	r0, 205bc <tls_interface_connect+0x40>
   205b6:	2800      	cmp	r0, #0
   205b8:	dc06      	bgt.n	205c8 <tls_interface_connect+0x4c>
   205ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   205bc:	4629      	mov	r1, r5
   205be:	4620      	mov	r0, r4
   205c0:	f7ff fe0c 	bl	201dc <secure_client_socket>
   205c4:	e7f7      	b.n	205b6 <tls_interface_connect+0x3a>
   205c6:	2009      	movs	r0, #9
   205c8:	f00e fba5 	bl	2ed16 <bsd_os_errno_set>
   205cc:	f04f 30ff 	mov.w	r0, #4294967295
   205d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   205d2:	202d      	movs	r0, #45	; 0x2d
   205d4:	e7f8      	b.n	205c8 <tls_interface_connect+0x4c>
   205d6:	bf00      	nop
   205d8:	20021ffc 	.word	0x20021ffc

000205dc <tls_interface_listen>:
   205dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   205e0:	460f      	mov	r7, r1
   205e2:	4606      	mov	r6, r0
   205e4:	f004 fbfa 	bl	24ddc <interface_socket_from_handle_get>
   205e8:	2800      	cmp	r0, #0
   205ea:	d06b      	beq.n	206c4 <tls_interface_listen+0xe8>
   205ec:	68c3      	ldr	r3, [r0, #12]
   205ee:	4604      	mov	r4, r0
   205f0:	2b01      	cmp	r3, #1
   205f2:	d165      	bne.n	206c0 <tls_interface_listen+0xe4>
   205f4:	6803      	ldr	r3, [r0, #0]
   205f6:	b29b      	uxth	r3, r3
   205f8:	2b04      	cmp	r3, #4
   205fa:	d056      	beq.n	206aa <tls_interface_listen+0xce>
   205fc:	6823      	ldr	r3, [r4, #0]
   205fe:	b29b      	uxth	r3, r3
   20600:	2b0b      	cmp	r3, #11
   20602:	d15d      	bne.n	206c0 <tls_interface_listen+0xe4>
   20604:	00f3      	lsls	r3, r6, #3
   20606:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 206c8 <tls_interface_listen+0xec>
   2060a:	199a      	adds	r2, r3, r6
   2060c:	f819 2022 	ldrb.w	r2, [r9, r2, lsl #2]
   20610:	2a01      	cmp	r2, #1
   20612:	d155      	bne.n	206c0 <tls_interface_listen+0xe4>
   20614:	2201      	movs	r2, #1
   20616:	4433      	add	r3, r6
   20618:	009d      	lsls	r5, r3, #2
   2061a:	f809 2005 	strb.w	r2, [r9, r5]
   2061e:	6961      	ldr	r1, [r4, #20]
   20620:	2300      	movs	r3, #0
   20622:	f247 0281 	movw	r2, #28801	; 0x7081
   20626:	4630      	mov	r0, r6
   20628:	f8d4 8000 	ldr.w	r8, [r4]
   2062c:	f003 f858 	bl	236e0 <ip_interface_request_create>
   20630:	4682      	mov	sl, r0
   20632:	2800      	cmp	r0, #0
   20634:	d042      	beq.n	206bc <tls_interface_listen+0xe0>
   20636:	eb09 0105 	add.w	r1, r9, r5
   2063a:	2224      	movs	r2, #36	; 0x24
   2063c:	3014      	adds	r0, #20
   2063e:	f7ed facb 	bl	dbd8 <memcpy>
   20642:	f8da 3008 	ldr.w	r3, [sl, #8]
   20646:	4651      	mov	r1, sl
   20648:	3324      	adds	r3, #36	; 0x24
   2064a:	f8ca 3008 	str.w	r3, [sl, #8]
   2064e:	6822      	ldr	r2, [r4, #0]
   20650:	4643      	mov	r3, r8
   20652:	0c12      	lsrs	r2, r2, #16
   20654:	0412      	lsls	r2, r2, #16
   20656:	f042 020a 	orr.w	r2, r2, #10
   2065a:	6022      	str	r2, [r4, #0]
   2065c:	4620      	mov	r0, r4
   2065e:	f247 0281 	movw	r2, #28801	; 0x7081
   20662:	f003 f85d 	bl	23720 <ip_interface_request_send>
   20666:	b9e0      	cbnz	r0, 206a2 <tls_interface_listen+0xc6>
   20668:	6823      	ldr	r3, [r4, #0]
   2066a:	00db      	lsls	r3, r3, #3
   2066c:	d40e      	bmi.n	2068c <tls_interface_listen+0xb0>
   2066e:	f04f 33ff 	mov.w	r3, #4294967295
   20672:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20676:	210b      	movs	r1, #11
   20678:	4630      	mov	r0, r6
   2067a:	f003 f865 	bl	23748 <ip_interface_wait>
   2067e:	b160      	cbz	r0, 2069a <tls_interface_listen+0xbe>
   20680:	2800      	cmp	r0, #0
   20682:	f8c4 8000 	str.w	r8, [r4]
   20686:	dc02      	bgt.n	2068e <tls_interface_listen+0xb2>
   20688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2068c:	2073      	movs	r0, #115	; 0x73
   2068e:	f00e fb42 	bl	2ed16 <bsd_os_errno_set>
   20692:	f04f 30ff 	mov.w	r0, #4294967295
   20696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2069a:	4639      	mov	r1, r7
   2069c:	4630      	mov	r0, r6
   2069e:	f003 fc95 	bl	23fcc <ip_interface_listen>
   206a2:	2800      	cmp	r0, #0
   206a4:	dcf3      	bgt.n	2068e <tls_interface_listen+0xb2>
   206a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   206aa:	00f3      	lsls	r3, r6, #3
   206ac:	f8df 9018 	ldr.w	r9, [pc, #24]	; 206c8 <tls_interface_listen+0xec>
   206b0:	199a      	adds	r2, r3, r6
   206b2:	f819 2022 	ldrb.w	r2, [r9, r2, lsl #2]
   206b6:	2a02      	cmp	r2, #2
   206b8:	d1a0      	bne.n	205fc <tls_interface_listen+0x20>
   206ba:	e7ab      	b.n	20614 <tls_interface_listen+0x38>
   206bc:	200c      	movs	r0, #12
   206be:	e7e6      	b.n	2068e <tls_interface_listen+0xb2>
   206c0:	202d      	movs	r0, #45	; 0x2d
   206c2:	e7e4      	b.n	2068e <tls_interface_listen+0xb2>
   206c4:	2009      	movs	r0, #9
   206c6:	e7e2      	b.n	2068e <tls_interface_listen+0xb2>
   206c8:	20021ffc 	.word	0x20021ffc

000206cc <tls_interface_accept>:
   206cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   206ce:	460c      	mov	r4, r1
   206d0:	4616      	mov	r6, r2
   206d2:	461f      	mov	r7, r3
   206d4:	4605      	mov	r5, r0
   206d6:	f004 fb81 	bl	24ddc <interface_socket_from_handle_get>
   206da:	2800      	cmp	r0, #0
   206dc:	d03b      	beq.n	20756 <tls_interface_accept+0x8a>
   206de:	6800      	ldr	r0, [r0, #0]
   206e0:	b280      	uxth	r0, r0
   206e2:	2806      	cmp	r0, #6
   206e4:	d137      	bne.n	20756 <tls_interface_accept+0x8a>
   206e6:	4621      	mov	r1, r4
   206e8:	463b      	mov	r3, r7
   206ea:	4632      	mov	r2, r6
   206ec:	4628      	mov	r0, r5
   206ee:	f003 fce3 	bl	240b8 <ip_interface_accept>
   206f2:	4604      	mov	r4, r0
   206f4:	b118      	cbz	r0, 206fe <tls_interface_accept+0x32>
   206f6:	2c00      	cmp	r4, #0
   206f8:	dc2e      	bgt.n	20758 <tls_interface_accept+0x8c>
   206fa:	4620      	mov	r0, r4
   206fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   206fe:	4628      	mov	r0, r5
   20700:	f004 fb6c 	bl	24ddc <interface_socket_from_handle_get>
   20704:	6803      	ldr	r3, [r0, #0]
   20706:	4f18      	ldr	r7, [pc, #96]	; (20768 <tls_interface_accept+0x9c>)
   20708:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2070c:	6003      	str	r3, [r0, #0]
   2070e:	6803      	ldr	r3, [r0, #0]
   20710:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   20714:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   20718:	4606      	mov	r6, r0
   2071a:	6003      	str	r3, [r0, #0]
   2071c:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   20720:	2224      	movs	r2, #36	; 0x24
   20722:	4638      	mov	r0, r7
   20724:	f7ed fa58 	bl	dbd8 <memcpy>
   20728:	2302      	movs	r3, #2
   2072a:	703b      	strb	r3, [r7, #0]
   2072c:	6833      	ldr	r3, [r6, #0]
   2072e:	4620      	mov	r0, r4
   20730:	0c1b      	lsrs	r3, r3, #16
   20732:	041b      	lsls	r3, r3, #16
   20734:	f043 030b 	orr.w	r3, r3, #11
   20738:	6033      	str	r3, [r6, #0]
   2073a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2073e:	f04f 33ff 	mov.w	r3, #4294967295
   20742:	210c      	movs	r1, #12
   20744:	f003 f800 	bl	23748 <ip_interface_wait>
   20748:	4604      	mov	r4, r0
   2074a:	2800      	cmp	r0, #0
   2074c:	d0d5      	beq.n	206fa <tls_interface_accept+0x2e>
   2074e:	2000      	movs	r0, #0
   20750:	f003 f8c0 	bl	238d4 <ip_interface_close>
   20754:	e7cf      	b.n	206f6 <tls_interface_accept+0x2a>
   20756:	2409      	movs	r4, #9
   20758:	4620      	mov	r0, r4
   2075a:	f04f 34ff 	mov.w	r4, #4294967295
   2075e:	f00e fada 	bl	2ed16 <bsd_os_errno_set>
   20762:	4620      	mov	r0, r4
   20764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20766:	bf00      	nop
   20768:	20021ffc 	.word	0x20021ffc

0002076c <tls_interface_setopt>:
   2076c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20770:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   20774:	9f06      	ldr	r7, [sp, #24]
   20776:	d11d      	bne.n	207b4 <tls_interface_setopt+0x48>
   20778:	461c      	mov	r4, r3
   2077a:	b1c3      	cbz	r3, 207ae <tls_interface_setopt+0x42>
   2077c:	b1bf      	cbz	r7, 207ae <tls_interface_setopt+0x42>
   2077e:	4605      	mov	r5, r0
   20780:	4616      	mov	r6, r2
   20782:	f004 fb2b 	bl	24ddc <interface_socket_from_handle_get>
   20786:	b1c8      	cbz	r0, 207bc <tls_interface_setopt+0x50>
   20788:	6803      	ldr	r3, [r0, #0]
   2078a:	b29b      	uxth	r3, r3
   2078c:	2b02      	cmp	r3, #2
   2078e:	d007      	beq.n	207a0 <tls_interface_setopt+0x34>
   20790:	6803      	ldr	r3, [r0, #0]
   20792:	b29b      	uxth	r3, r3
   20794:	2b04      	cmp	r3, #4
   20796:	d003      	beq.n	207a0 <tls_interface_setopt+0x34>
   20798:	6803      	ldr	r3, [r0, #0]
   2079a:	b29b      	uxth	r3, r3
   2079c:	2b05      	cmp	r3, #5
   2079e:	d10d      	bne.n	207bc <tls_interface_setopt+0x50>
   207a0:	3e01      	subs	r6, #1
   207a2:	2e03      	cmp	r6, #3
   207a4:	d851      	bhi.n	2084a <tls_interface_setopt+0xde>
   207a6:	e8df f006 	tbb	[pc, r6]
   207aa:	3225      	.short	0x3225
   207ac:	0b18      	.short	0x0b18
   207ae:	200e      	movs	r0, #14
   207b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   207b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   207b8:	f003 bdb6 	b.w	24328 <ip_interface_setopt>
   207bc:	2009      	movs	r0, #9
   207be:	e7f7      	b.n	207b0 <tls_interface_setopt+0x44>
   207c0:	2f04      	cmp	r7, #4
   207c2:	d139      	bne.n	20838 <tls_interface_setopt+0xcc>
   207c4:	6823      	ldr	r3, [r4, #0]
   207c6:	2b02      	cmp	r3, #2
   207c8:	d836      	bhi.n	20838 <tls_interface_setopt+0xcc>
   207ca:	4a21      	ldr	r2, [pc, #132]	; (20850 <tls_interface_setopt+0xe4>)
   207cc:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   207d0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   207d4:	70ab      	strb	r3, [r5, #2]
   207d6:	2000      	movs	r0, #0
   207d8:	e7ea      	b.n	207b0 <tls_interface_setopt+0x44>
   207da:	2f01      	cmp	r7, #1
   207dc:	d12c      	bne.n	20838 <tls_interface_setopt+0xcc>
   207de:	7823      	ldrb	r3, [r4, #0]
   207e0:	2b01      	cmp	r3, #1
   207e2:	d829      	bhi.n	20838 <tls_interface_setopt+0xcc>
   207e4:	4a1a      	ldr	r2, [pc, #104]	; (20850 <tls_interface_setopt+0xe4>)
   207e6:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   207ea:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   207ee:	7053      	strb	r3, [r2, #1]
   207f0:	2000      	movs	r0, #0
   207f2:	e7dd      	b.n	207b0 <tls_interface_setopt+0x44>
   207f4:	2f04      	cmp	r7, #4
   207f6:	d11f      	bne.n	20838 <tls_interface_setopt+0xcc>
   207f8:	6820      	ldr	r0, [r4, #0]
   207fa:	b1f8      	cbz	r0, 2083c <tls_interface_setopt+0xd0>
   207fc:	2801      	cmp	r0, #1
   207fe:	d11b      	bne.n	20838 <tls_interface_setopt+0xcc>
   20800:	4b13      	ldr	r3, [pc, #76]	; (20850 <tls_interface_setopt+0xe4>)
   20802:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   20806:	f803 0025 	strb.w	r0, [r3, r5, lsl #2]
   2080a:	2000      	movs	r0, #0
   2080c:	e7d0      	b.n	207b0 <tls_interface_setopt+0x44>
   2080e:	ea5f 0c97 	movs.w	ip, r7, lsr #2
   20812:	d011      	beq.n	20838 <tls_interface_setopt+0xcc>
   20814:	f017 0603 	ands.w	r6, r7, #3
   20818:	d10e      	bne.n	20838 <tls_interface_setopt+0xcc>
   2081a:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   2081e:	00ad      	lsls	r5, r5, #2
   20820:	4b0b      	ldr	r3, [pc, #44]	; (20850 <tls_interface_setopt+0xe4>)
   20822:	1d28      	adds	r0, r5, #4
   20824:	4418      	add	r0, r3
   20826:	442b      	add	r3, r5
   20828:	463a      	mov	r2, r7
   2082a:	4621      	mov	r1, r4
   2082c:	f883 c003 	strb.w	ip, [r3, #3]
   20830:	f7ed f9d2 	bl	dbd8 <memcpy>
   20834:	4630      	mov	r0, r6
   20836:	e7bb      	b.n	207b0 <tls_interface_setopt+0x44>
   20838:	2016      	movs	r0, #22
   2083a:	e7b9      	b.n	207b0 <tls_interface_setopt+0x44>
   2083c:	2202      	movs	r2, #2
   2083e:	4b04      	ldr	r3, [pc, #16]	; (20850 <tls_interface_setopt+0xe4>)
   20840:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   20844:	f803 2025 	strb.w	r2, [r3, r5, lsl #2]
   20848:	e7b2      	b.n	207b0 <tls_interface_setopt+0x44>
   2084a:	202a      	movs	r0, #42	; 0x2a
   2084c:	e7b0      	b.n	207b0 <tls_interface_setopt+0x44>
   2084e:	bf00      	nop
   20850:	20021ffc 	.word	0x20021ffc

00020854 <tls_interface_getopt>:
   20854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20858:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2085c:	9f06      	ldr	r7, [sp, #24]
   2085e:	d112      	bne.n	20886 <tls_interface_getopt+0x32>
   20860:	461d      	mov	r5, r3
   20862:	b16b      	cbz	r3, 20880 <tls_interface_getopt+0x2c>
   20864:	b167      	cbz	r7, 20880 <tls_interface_getopt+0x2c>
   20866:	4606      	mov	r6, r0
   20868:	4614      	mov	r4, r2
   2086a:	f004 fab7 	bl	24ddc <interface_socket_from_handle_get>
   2086e:	2800      	cmp	r0, #0
   20870:	d04f      	beq.n	20912 <tls_interface_getopt+0xbe>
   20872:	3c01      	subs	r4, #1
   20874:	2c03      	cmp	r4, #3
   20876:	d852      	bhi.n	2091e <tls_interface_getopt+0xca>
   20878:	e8df f004 	tbb	[pc, r4]
   2087c:	09152139 	.word	0x09152139
   20880:	200e      	movs	r0, #14
   20882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2088a:	f003 be0f 	b.w	244ac <ip_interface_getopt>
   2088e:	683b      	ldr	r3, [r7, #0]
   20890:	2b04      	cmp	r3, #4
   20892:	d13c      	bne.n	2090e <tls_interface_getopt+0xba>
   20894:	4b23      	ldr	r3, [pc, #140]	; (20924 <tls_interface_getopt+0xd0>)
   20896:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2089a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2089e:	78b3      	ldrb	r3, [r6, #2]
   208a0:	2000      	movs	r0, #0
   208a2:	602b      	str	r3, [r5, #0]
   208a4:	e7ed      	b.n	20882 <tls_interface_getopt+0x2e>
   208a6:	683b      	ldr	r3, [r7, #0]
   208a8:	2b04      	cmp	r3, #4
   208aa:	d130      	bne.n	2090e <tls_interface_getopt+0xba>
   208ac:	4b1d      	ldr	r3, [pc, #116]	; (20924 <tls_interface_getopt+0xd0>)
   208ae:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   208b2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   208b6:	7873      	ldrb	r3, [r6, #1]
   208b8:	2000      	movs	r0, #0
   208ba:	602b      	str	r3, [r5, #0]
   208bc:	e7e1      	b.n	20882 <tls_interface_getopt+0x2e>
   208be:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   208c2:	4918      	ldr	r1, [pc, #96]	; (20924 <tls_interface_getopt+0xd0>)
   208c4:	683b      	ldr	r3, [r7, #0]
   208c6:	00b6      	lsls	r6, r6, #2
   208c8:	198a      	adds	r2, r1, r6
   208ca:	f013 0403 	ands.w	r4, r3, #3
   208ce:	78d0      	ldrb	r0, [r2, #3]
   208d0:	d121      	bne.n	20916 <tls_interface_getopt+0xc2>
   208d2:	089b      	lsrs	r3, r3, #2
   208d4:	4283      	cmp	r3, r0
   208d6:	bf28      	it	cs
   208d8:	4603      	movcs	r3, r0
   208da:	009a      	lsls	r2, r3, #2
   208dc:	b1db      	cbz	r3, 20916 <tls_interface_getopt+0xc2>
   208de:	3604      	adds	r6, #4
   208e0:	4431      	add	r1, r6
   208e2:	603a      	str	r2, [r7, #0]
   208e4:	4628      	mov	r0, r5
   208e6:	f7ed f977 	bl	dbd8 <memcpy>
   208ea:	4620      	mov	r0, r4
   208ec:	e7c9      	b.n	20882 <tls_interface_getopt+0x2e>
   208ee:	683b      	ldr	r3, [r7, #0]
   208f0:	2b04      	cmp	r3, #4
   208f2:	d10c      	bne.n	2090e <tls_interface_getopt+0xba>
   208f4:	4b0b      	ldr	r3, [pc, #44]	; (20924 <tls_interface_getopt+0xd0>)
   208f6:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   208fa:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   208fe:	2000      	movs	r0, #0
   20900:	f1a3 0301 	sub.w	r3, r3, #1
   20904:	fab3 f383 	clz	r3, r3
   20908:	095b      	lsrs	r3, r3, #5
   2090a:	602b      	str	r3, [r5, #0]
   2090c:	e7b9      	b.n	20882 <tls_interface_getopt+0x2e>
   2090e:	2016      	movs	r0, #22
   20910:	e7b7      	b.n	20882 <tls_interface_getopt+0x2e>
   20912:	2009      	movs	r0, #9
   20914:	e7b5      	b.n	20882 <tls_interface_getopt+0x2e>
   20916:	2800      	cmp	r0, #0
   20918:	d1f9      	bne.n	2090e <tls_interface_getopt+0xba>
   2091a:	6038      	str	r0, [r7, #0]
   2091c:	e7b1      	b.n	20882 <tls_interface_getopt+0x2e>
   2091e:	202a      	movs	r0, #42	; 0x2a
   20920:	e7af      	b.n	20882 <tls_interface_getopt+0x2e>
   20922:	bf00      	nop
   20924:	20021ffc 	.word	0x20021ffc

00020928 <tls_rpc_ip_event_handler>:
   20928:	b538      	push	{r3, r4, r5, lr}
   2092a:	f248 0581 	movw	r5, #32897	; 0x8081
   2092e:	42ab      	cmp	r3, r5
   20930:	460c      	mov	r4, r1
   20932:	d053      	beq.n	209dc <tls_rpc_ip_event_handler+0xb4>
   20934:	f249 0182 	movw	r1, #36994	; 0x9082
   20938:	428b      	cmp	r3, r1
   2093a:	d02d      	beq.n	20998 <tls_rpc_ip_event_handler+0x70>
   2093c:	f248 0102 	movw	r1, #32770	; 0x8002
   20940:	428b      	cmp	r3, r1
   20942:	d001      	beq.n	20948 <tls_rpc_ip_event_handler+0x20>
   20944:	2001      	movs	r0, #1
   20946:	bd38      	pop	{r3, r4, r5, pc}
   20948:	2c00      	cmp	r4, #0
   2094a:	d0fb      	beq.n	20944 <tls_rpc_ip_event_handler+0x1c>
   2094c:	6923      	ldr	r3, [r4, #16]
   2094e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   20952:	d002      	beq.n	2095a <tls_rpc_ip_event_handler+0x32>
   20954:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   20958:	d1f4      	bne.n	20944 <tls_rpc_ip_event_handler+0x1c>
   2095a:	6823      	ldr	r3, [r4, #0]
   2095c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   20960:	6023      	str	r3, [r4, #0]
   20962:	6955      	ldr	r5, [r2, #20]
   20964:	2d00      	cmp	r5, #0
   20966:	d148      	bne.n	209fa <tls_rpc_ip_event_handler+0xd2>
   20968:	6823      	ldr	r3, [r4, #0]
   2096a:	0c1b      	lsrs	r3, r3, #16
   2096c:	041b      	lsls	r3, r3, #16
   2096e:	f043 0305 	orr.w	r3, r3, #5
   20972:	6023      	str	r3, [r4, #0]
   20974:	6823      	ldr	r3, [r4, #0]
   20976:	00da      	lsls	r2, r3, #3
   20978:	d50c      	bpl.n	20994 <tls_rpc_ip_event_handler+0x6c>
   2097a:	4b25      	ldr	r3, [pc, #148]	; (20a10 <tls_rpc_ip_event_handler+0xe8>)
   2097c:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
   20980:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   20984:	2b02      	cmp	r3, #2
   20986:	d105      	bne.n	20994 <tls_rpc_ip_event_handler+0x6c>
   20988:	4621      	mov	r1, r4
   2098a:	f7ff fc27 	bl	201dc <secure_client_socket>
   2098e:	b108      	cbz	r0, 20994 <tls_rpc_ip_event_handler+0x6c>
   20990:	2873      	cmp	r0, #115	; 0x73
   20992:	d135      	bne.n	20a00 <tls_rpc_ip_event_handler+0xd8>
   20994:	2000      	movs	r0, #0
   20996:	bd38      	pop	{r3, r4, r5, pc}
   20998:	2c00      	cmp	r4, #0
   2099a:	d0fb      	beq.n	20994 <tls_rpc_ip_event_handler+0x6c>
   2099c:	6823      	ldr	r3, [r4, #0]
   2099e:	b29b      	uxth	r3, r3
   209a0:	2b0b      	cmp	r3, #11
   209a2:	d1f7      	bne.n	20994 <tls_rpc_ip_event_handler+0x6c>
   209a4:	6910      	ldr	r0, [r2, #16]
   209a6:	bb48      	cbnz	r0, 209fc <tls_rpc_ip_event_handler+0xd4>
   209a8:	6823      	ldr	r3, [r4, #0]
   209aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   209ae:	6023      	str	r3, [r4, #0]
   209b0:	6823      	ldr	r3, [r4, #0]
   209b2:	00db      	lsls	r3, r3, #3
   209b4:	d5ee      	bpl.n	20994 <tls_rpc_ip_event_handler+0x6c>
   209b6:	6823      	ldr	r3, [r4, #0]
   209b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   209bc:	6023      	str	r3, [r4, #0]
   209be:	6823      	ldr	r3, [r4, #0]
   209c0:	0c1b      	lsrs	r3, r3, #16
   209c2:	041b      	lsls	r3, r3, #16
   209c4:	f043 030c 	orr.w	r3, r3, #12
   209c8:	6023      	str	r3, [r4, #0]
   209ca:	6823      	ldr	r3, [r4, #0]
   209cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   209d0:	6023      	str	r3, [r4, #0]
   209d2:	6823      	ldr	r3, [r4, #0]
   209d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   209d8:	6023      	str	r3, [r4, #0]
   209da:	bd38      	pop	{r3, r4, r5, pc}
   209dc:	2900      	cmp	r1, #0
   209de:	d0d9      	beq.n	20994 <tls_rpc_ip_event_handler+0x6c>
   209e0:	680b      	ldr	r3, [r1, #0]
   209e2:	b29b      	uxth	r3, r3
   209e4:	2b0a      	cmp	r3, #10
   209e6:	d1d5      	bne.n	20994 <tls_rpc_ip_event_handler+0x6c>
   209e8:	6950      	ldr	r0, [r2, #20]
   209ea:	b938      	cbnz	r0, 209fc <tls_rpc_ip_event_handler+0xd4>
   209ec:	680b      	ldr	r3, [r1, #0]
   209ee:	0c1b      	lsrs	r3, r3, #16
   209f0:	041b      	lsls	r3, r3, #16
   209f2:	f043 030b 	orr.w	r3, r3, #11
   209f6:	600b      	str	r3, [r1, #0]
   209f8:	bd38      	pop	{r3, r4, r5, pc}
   209fa:	4628      	mov	r0, r5
   209fc:	f002 fe66 	bl	236cc <rpc_error_to_nrf_bsd_error>
   20a00:	6060      	str	r0, [r4, #4]
   20a02:	6823      	ldr	r3, [r4, #0]
   20a04:	2000      	movs	r0, #0
   20a06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   20a0a:	6023      	str	r3, [r4, #0]
   20a0c:	bd38      	pop	{r3, r4, r5, pc}
   20a0e:	bf00      	nop
   20a10:	20021ffc 	.word	0x20021ffc

00020a14 <rpc_dfu_event_handler>:
   20a14:	b508      	push	{r3, lr}
   20a16:	4a08      	ldr	r2, [pc, #32]	; (20a38 <rpc_dfu_event_handler+0x24>)
   20a18:	68c1      	ldr	r1, [r0, #12]
   20a1a:	8812      	ldrh	r2, [r2, #0]
   20a1c:	4603      	mov	r3, r0
   20a1e:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   20a22:	d005      	beq.n	20a30 <rpc_dfu_event_handler+0x1c>
   20a24:	6800      	ldr	r0, [r0, #0]
   20a26:	b110      	cbz	r0, 20a2e <rpc_dfu_event_handler+0x1a>
   20a28:	f7f7 fff8 	bl	18a1c <rpc_dfu_client_data_free>
   20a2c:	2000      	movs	r0, #0
   20a2e:	bd08      	pop	{r3, pc}
   20a30:	4a02      	ldr	r2, [pc, #8]	; (20a3c <rpc_dfu_event_handler+0x28>)
   20a32:	2001      	movs	r0, #1
   20a34:	6013      	str	r3, [r2, #0]
   20a36:	bd08      	pop	{r3, pc}
   20a38:	20027886 	.word	0x20027886
   20a3c:	20022128 	.word	0x20022128

00020a40 <mfu_interface_init>:
   20a40:	2300      	movs	r3, #0
   20a42:	b510      	push	{r4, lr}
   20a44:	4808      	ldr	r0, [pc, #32]	; (20a68 <mfu_interface_init+0x28>)
   20a46:	4909      	ldr	r1, [pc, #36]	; (20a6c <mfu_interface_init+0x2c>)
   20a48:	4a09      	ldr	r2, [pc, #36]	; (20a70 <mfu_interface_init+0x30>)
   20a4a:	4c0a      	ldr	r4, [pc, #40]	; (20a74 <mfu_interface_init+0x34>)
   20a4c:	8003      	strh	r3, [r0, #0]
   20a4e:	600b      	str	r3, [r1, #0]
   20a50:	6013      	str	r3, [r2, #0]
   20a52:	6023      	str	r3, [r4, #0]
   20a54:	f7f7 ffac 	bl	189b0 <rpc_dfu_client_init>
   20a58:	b910      	cbnz	r0, 20a60 <mfu_interface_init+0x20>
   20a5a:	2301      	movs	r3, #1
   20a5c:	6023      	str	r3, [r4, #0]
   20a5e:	bd10      	pop	{r4, pc}
   20a60:	f04f 30ff 	mov.w	r0, #4294967295
   20a64:	bd10      	pop	{r4, pc}
   20a66:	bf00      	nop
   20a68:	20027886 	.word	0x20027886
   20a6c:	20022128 	.word	0x20022128
   20a70:	20022124 	.word	0x20022124
   20a74:	2002211c 	.word	0x2002211c

00020a78 <mfu_interface_open>:
   20a78:	2801      	cmp	r0, #1
   20a7a:	b508      	push	{r3, lr}
   20a7c:	d10b      	bne.n	20a96 <mfu_interface_open+0x1e>
   20a7e:	f240 2303 	movw	r3, #515	; 0x203
   20a82:	429a      	cmp	r2, r3
   20a84:	d107      	bne.n	20a96 <mfu_interface_open+0x1e>
   20a86:	4b09      	ldr	r3, [pc, #36]	; (20aac <mfu_interface_open+0x34>)
   20a88:	681a      	ldr	r2, [r3, #0]
   20a8a:	2a01      	cmp	r2, #1
   20a8c:	d109      	bne.n	20aa2 <mfu_interface_open+0x2a>
   20a8e:	2202      	movs	r2, #2
   20a90:	601a      	str	r2, [r3, #0]
   20a92:	4807      	ldr	r0, [pc, #28]	; (20ab0 <mfu_interface_open+0x38>)
   20a94:	bd08      	pop	{r3, pc}
   20a96:	2016      	movs	r0, #22
   20a98:	f00e f93d 	bl	2ed16 <bsd_os_errno_set>
   20a9c:	f04f 30ff 	mov.w	r0, #4294967295
   20aa0:	bd08      	pop	{r3, pc}
   20aa2:	f00e f938 	bl	2ed16 <bsd_os_errno_set>
   20aa6:	f04f 30ff 	mov.w	r0, #4294967295
   20aaa:	bd08      	pop	{r3, pc}
   20aac:	2002211c 	.word	0x2002211c
   20ab0:	49765432 	.word	0x49765432

00020ab4 <mfu_interface_close>:
   20ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ab8:	4c37      	ldr	r4, [pc, #220]	; (20b98 <mfu_interface_close+0xe4>)
   20aba:	b084      	sub	sp, #16
   20abc:	6823      	ldr	r3, [r4, #0]
   20abe:	1e9a      	subs	r2, r3, #2
   20ac0:	2a01      	cmp	r2, #1
   20ac2:	d863      	bhi.n	20b8c <mfu_interface_close+0xd8>
   20ac4:	2b03      	cmp	r3, #3
   20ac6:	d005      	beq.n	20ad4 <mfu_interface_close+0x20>
   20ac8:	2301      	movs	r3, #1
   20aca:	2000      	movs	r0, #0
   20acc:	6023      	str	r3, [r4, #0]
   20ace:	b004      	add	sp, #16
   20ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20ad4:	2100      	movs	r1, #0
   20ad6:	4d31      	ldr	r5, [pc, #196]	; (20b9c <mfu_interface_close+0xe8>)
   20ad8:	4b31      	ldr	r3, [pc, #196]	; (20ba0 <mfu_interface_close+0xec>)
   20ada:	f8c5 161c 	str.w	r1, [r5, #1564]	; 0x61c
   20ade:	681b      	ldr	r3, [r3, #0]
   20ae0:	a801      	add	r0, sp, #4
   20ae2:	9302      	str	r3, [sp, #8]
   20ae4:	9b02      	ldr	r3, [sp, #8]
   20ae6:	f7f7 ff69 	bl	189bc <rpc_dfu_client_request_alloc>
   20aea:	4603      	mov	r3, r0
   20aec:	bb08      	cbnz	r0, 20b32 <mfu_interface_close+0x7e>
   20aee:	2704      	movs	r7, #4
   20af0:	482c      	ldr	r0, [pc, #176]	; (20ba4 <mfu_interface_close+0xf0>)
   20af2:	4e2d      	ldr	r6, [pc, #180]	; (20ba8 <mfu_interface_close+0xf4>)
   20af4:	8802      	ldrh	r2, [r0, #0]
   20af6:	6033      	str	r3, [r6, #0]
   20af8:	3201      	adds	r2, #1
   20afa:	b292      	uxth	r2, r2
   20afc:	0411      	lsls	r1, r2, #16
   20afe:	8002      	strh	r2, [r0, #0]
   20b00:	9801      	ldr	r0, [sp, #4]
   20b02:	f041 0106 	orr.w	r1, r1, #6
   20b06:	60c1      	str	r1, [r0, #12]
   20b08:	7103      	strb	r3, [r0, #4]
   20b0a:	7143      	strb	r3, [r0, #5]
   20b0c:	7183      	strb	r3, [r0, #6]
   20b0e:	71c3      	strb	r3, [r0, #7]
   20b10:	7243      	strb	r3, [r0, #9]
   20b12:	7283      	strb	r3, [r0, #10]
   20b14:	72c3      	strb	r3, [r0, #11]
   20b16:	7207      	strb	r7, [r0, #8]
   20b18:	2106      	movs	r1, #6
   20b1a:	f7f7 ff63 	bl	189e4 <rpc_dfu_client_request_send>
   20b1e:	b180      	cbz	r0, 20b42 <mfu_interface_close+0x8e>
   20b20:	9801      	ldr	r0, [sp, #4]
   20b22:	6803      	ldr	r3, [r0, #0]
   20b24:	b11b      	cbz	r3, 20b2e <mfu_interface_close+0x7a>
   20b26:	4618      	mov	r0, r3
   20b28:	f7f7 ff78 	bl	18a1c <rpc_dfu_client_data_free>
   20b2c:	9801      	ldr	r0, [sp, #4]
   20b2e:	f7f7 ff6d 	bl	18a0c <rpc_dfu_client_message_free>
   20b32:	200c      	movs	r0, #12
   20b34:	f00e f8ef 	bl	2ed16 <bsd_os_errno_set>
   20b38:	f04f 30ff 	mov.w	r0, #4294967295
   20b3c:	b004      	add	sp, #16
   20b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20b42:	f04f 33ff 	mov.w	r3, #4294967295
   20b46:	af04      	add	r7, sp, #16
   20b48:	f847 3d04 	str.w	r3, [r7, #-4]!
   20b4c:	46a0      	mov	r8, r4
   20b4e:	e007      	b.n	20b60 <mfu_interface_close+0xac>
   20b50:	f8d5 361c 	ldr.w	r3, [r5, #1564]	; 0x61c
   20b54:	b9a3      	cbnz	r3, 20b80 <mfu_interface_close+0xcc>
   20b56:	4639      	mov	r1, r7
   20b58:	4640      	mov	r0, r8
   20b5a:	f7f5 f8f9 	bl	15d50 <bsd_os_timedwait>
   20b5e:	b978      	cbnz	r0, 20b80 <mfu_interface_close+0xcc>
   20b60:	6830      	ldr	r0, [r6, #0]
   20b62:	2800      	cmp	r0, #0
   20b64:	d0f4      	beq.n	20b50 <mfu_interface_close+0x9c>
   20b66:	6905      	ldr	r5, [r0, #16]
   20b68:	f7f7 ff50 	bl	18a0c <rpc_dfu_client_message_free>
   20b6c:	2d00      	cmp	r5, #0
   20b6e:	d0ab      	beq.n	20ac8 <mfu_interface_close+0x14>
   20b70:	4b0e      	ldr	r3, [pc, #56]	; (20bac <mfu_interface_close+0xf8>)
   20b72:	2008      	movs	r0, #8
   20b74:	601d      	str	r5, [r3, #0]
   20b76:	f00e f8ce 	bl	2ed16 <bsd_os_errno_set>
   20b7a:	f04f 30ff 	mov.w	r0, #4294967295
   20b7e:	e7a6      	b.n	20ace <mfu_interface_close+0x1a>
   20b80:	203c      	movs	r0, #60	; 0x3c
   20b82:	f00e f8c8 	bl	2ed16 <bsd_os_errno_set>
   20b86:	f04f 30ff 	mov.w	r0, #4294967295
   20b8a:	e7a0      	b.n	20ace <mfu_interface_close+0x1a>
   20b8c:	2001      	movs	r0, #1
   20b8e:	f00e f8c2 	bl	2ed16 <bsd_os_errno_set>
   20b92:	f04f 30ff 	mov.w	r0, #4294967295
   20b96:	e79a      	b.n	20ace <mfu_interface_close+0x1a>
   20b98:	2002211c 	.word	0x2002211c
   20b9c:	4002a000 	.word	0x4002a000
   20ba0:	4002a61c 	.word	0x4002a61c
   20ba4:	20027886 	.word	0x20027886
   20ba8:	20022128 	.word	0x20022128
   20bac:	20022120 	.word	0x20022120

00020bb0 <mfu_interface_sendto>:
   20bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20bb4:	4e69      	ldr	r6, [pc, #420]	; (20d5c <mfu_interface_sendto+0x1ac>)
   20bb6:	4614      	mov	r4, r2
   20bb8:	6833      	ldr	r3, [r6, #0]
   20bba:	b084      	sub	sp, #16
   20bbc:	1e9a      	subs	r2, r3, #2
   20bbe:	2a01      	cmp	r2, #1
   20bc0:	f200 80c5 	bhi.w	20d4e <mfu_interface_sendto+0x19e>
   20bc4:	4688      	mov	r8, r1
   20bc6:	2900      	cmp	r1, #0
   20bc8:	f000 80bb 	beq.w	20d42 <mfu_interface_sendto+0x192>
   20bcc:	2c00      	cmp	r4, #0
   20bce:	f000 80b8 	beq.w	20d42 <mfu_interface_sendto+0x192>
   20bd2:	2b02      	cmp	r3, #2
   20bd4:	d063      	beq.n	20c9e <mfu_interface_sendto+0xee>
   20bd6:	2200      	movs	r2, #0
   20bd8:	4e61      	ldr	r6, [pc, #388]	; (20d60 <mfu_interface_sendto+0x1b0>)
   20bda:	4b62      	ldr	r3, [pc, #392]	; (20d64 <mfu_interface_sendto+0x1b4>)
   20bdc:	f8c6 261c 	str.w	r2, [r6, #1564]	; 0x61c
   20be0:	681b      	ldr	r3, [r3, #0]
   20be2:	4621      	mov	r1, r4
   20be4:	9302      	str	r3, [sp, #8]
   20be6:	a801      	add	r0, sp, #4
   20be8:	9b02      	ldr	r3, [sp, #8]
   20bea:	f7f7 fee7 	bl	189bc <rpc_dfu_client_request_alloc>
   20bee:	4607      	mov	r7, r0
   20bf0:	b140      	cbz	r0, 20c04 <mfu_interface_sendto+0x54>
   20bf2:	200c      	movs	r0, #12
   20bf4:	f00e f88f 	bl	2ed16 <bsd_os_errno_set>
   20bf8:	f04f 34ff 	mov.w	r4, #4294967295
   20bfc:	4620      	mov	r0, r4
   20bfe:	b004      	add	sp, #16
   20c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20c04:	9b01      	ldr	r3, [sp, #4]
   20c06:	4641      	mov	r1, r8
   20c08:	6818      	ldr	r0, [r3, #0]
   20c0a:	4622      	mov	r2, r4
   20c0c:	f7ec ffe4 	bl	dbd8 <memcpy>
   20c10:	2104      	movs	r1, #4
   20c12:	4d55      	ldr	r5, [pc, #340]	; (20d68 <mfu_interface_sendto+0x1b8>)
   20c14:	9801      	ldr	r0, [sp, #4]
   20c16:	882b      	ldrh	r3, [r5, #0]
   20c18:	6044      	str	r4, [r0, #4]
   20c1a:	3301      	adds	r3, #1
   20c1c:	b29b      	uxth	r3, r3
   20c1e:	041a      	lsls	r2, r3, #16
   20c20:	802b      	strh	r3, [r5, #0]
   20c22:	430a      	orrs	r2, r1
   20c24:	4d51      	ldr	r5, [pc, #324]	; (20d6c <mfu_interface_sendto+0x1bc>)
   20c26:	60c2      	str	r2, [r0, #12]
   20c28:	7247      	strb	r7, [r0, #9]
   20c2a:	7287      	strb	r7, [r0, #10]
   20c2c:	72c7      	strb	r7, [r0, #11]
   20c2e:	7201      	strb	r1, [r0, #8]
   20c30:	602f      	str	r7, [r5, #0]
   20c32:	f7f7 fed7 	bl	189e4 <rpc_dfu_client_request_send>
   20c36:	b9f8      	cbnz	r0, 20c78 <mfu_interface_sendto+0xc8>
   20c38:	f04f 33ff 	mov.w	r3, #4294967295
   20c3c:	af04      	add	r7, sp, #16
   20c3e:	f847 3d04 	str.w	r3, [r7, #-4]!
   20c42:	f8df 8118 	ldr.w	r8, [pc, #280]	; 20d5c <mfu_interface_sendto+0x1ac>
   20c46:	e007      	b.n	20c58 <mfu_interface_sendto+0xa8>
   20c48:	f8d6 361c 	ldr.w	r3, [r6, #1564]	; 0x61c
   20c4c:	b9f3      	cbnz	r3, 20c8c <mfu_interface_sendto+0xdc>
   20c4e:	4639      	mov	r1, r7
   20c50:	4640      	mov	r0, r8
   20c52:	f7f5 f87d 	bl	15d50 <bsd_os_timedwait>
   20c56:	b9c8      	cbnz	r0, 20c8c <mfu_interface_sendto+0xdc>
   20c58:	6828      	ldr	r0, [r5, #0]
   20c5a:	2800      	cmp	r0, #0
   20c5c:	d0f4      	beq.n	20c48 <mfu_interface_sendto+0x98>
   20c5e:	6905      	ldr	r5, [r0, #16]
   20c60:	f7f7 fed4 	bl	18a0c <rpc_dfu_client_message_free>
   20c64:	2d00      	cmp	r5, #0
   20c66:	d0c9      	beq.n	20bfc <mfu_interface_sendto+0x4c>
   20c68:	4b41      	ldr	r3, [pc, #260]	; (20d70 <mfu_interface_sendto+0x1c0>)
   20c6a:	2008      	movs	r0, #8
   20c6c:	601d      	str	r5, [r3, #0]
   20c6e:	f04f 34ff 	mov.w	r4, #4294967295
   20c72:	f00e f850 	bl	2ed16 <bsd_os_errno_set>
   20c76:	e7c1      	b.n	20bfc <mfu_interface_sendto+0x4c>
   20c78:	9801      	ldr	r0, [sp, #4]
   20c7a:	6803      	ldr	r3, [r0, #0]
   20c7c:	b11b      	cbz	r3, 20c86 <mfu_interface_sendto+0xd6>
   20c7e:	4618      	mov	r0, r3
   20c80:	f7f7 fecc 	bl	18a1c <rpc_dfu_client_data_free>
   20c84:	9801      	ldr	r0, [sp, #4]
   20c86:	f7f7 fec1 	bl	18a0c <rpc_dfu_client_message_free>
   20c8a:	e7b2      	b.n	20bf2 <mfu_interface_sendto+0x42>
   20c8c:	f04f 34ff 	mov.w	r4, #4294967295
   20c90:	203c      	movs	r0, #60	; 0x3c
   20c92:	f00e f840 	bl	2ed16 <bsd_os_errno_set>
   20c96:	4620      	mov	r0, r4
   20c98:	b004      	add	sp, #16
   20c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20c9e:	2100      	movs	r1, #0
   20ca0:	4f2f      	ldr	r7, [pc, #188]	; (20d60 <mfu_interface_sendto+0x1b0>)
   20ca2:	4b30      	ldr	r3, [pc, #192]	; (20d64 <mfu_interface_sendto+0x1b4>)
   20ca4:	f8c7 161c 	str.w	r1, [r7, #1564]	; 0x61c
   20ca8:	681b      	ldr	r3, [r3, #0]
   20caa:	a802      	add	r0, sp, #8
   20cac:	9300      	str	r3, [sp, #0]
   20cae:	9b00      	ldr	r3, [sp, #0]
   20cb0:	f7f7 fe84 	bl	189bc <rpc_dfu_client_request_alloc>
   20cb4:	4602      	mov	r2, r0
   20cb6:	2800      	cmp	r0, #0
   20cb8:	d19b      	bne.n	20bf2 <mfu_interface_sendto+0x42>
   20cba:	f04f 0c08 	mov.w	ip, #8
   20cbe:	492a      	ldr	r1, [pc, #168]	; (20d68 <mfu_interface_sendto+0x1b8>)
   20cc0:	482c      	ldr	r0, [pc, #176]	; (20d74 <mfu_interface_sendto+0x1c4>)
   20cc2:	880b      	ldrh	r3, [r1, #0]
   20cc4:	6805      	ldr	r5, [r0, #0]
   20cc6:	3301      	adds	r3, #1
   20cc8:	9802      	ldr	r0, [sp, #8]
   20cca:	b29b      	uxth	r3, r3
   20ccc:	800b      	strh	r3, [r1, #0]
   20cce:	041b      	lsls	r3, r3, #16
   20cd0:	f043 0303 	orr.w	r3, r3, #3
   20cd4:	6105      	str	r5, [r0, #16]
   20cd6:	4d25      	ldr	r5, [pc, #148]	; (20d6c <mfu_interface_sendto+0x1bc>)
   20cd8:	60c3      	str	r3, [r0, #12]
   20cda:	7102      	strb	r2, [r0, #4]
   20cdc:	7142      	strb	r2, [r0, #5]
   20cde:	7182      	strb	r2, [r0, #6]
   20ce0:	71c2      	strb	r2, [r0, #7]
   20ce2:	7242      	strb	r2, [r0, #9]
   20ce4:	7282      	strb	r2, [r0, #10]
   20ce6:	72c2      	strb	r2, [r0, #11]
   20ce8:	f880 c008 	strb.w	ip, [r0, #8]
   20cec:	2103      	movs	r1, #3
   20cee:	602a      	str	r2, [r5, #0]
   20cf0:	f7f7 fe78 	bl	189e4 <rpc_dfu_client_request_send>
   20cf4:	b9e0      	cbnz	r0, 20d30 <mfu_interface_sendto+0x180>
   20cf6:	f04f 33ff 	mov.w	r3, #4294967295
   20cfa:	f10d 0910 	add.w	r9, sp, #16
   20cfe:	f849 3d04 	str.w	r3, [r9, #-4]!
   20d02:	46b2      	mov	sl, r6
   20d04:	e009      	b.n	20d1a <mfu_interface_sendto+0x16a>
   20d06:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
   20d0a:	2b00      	cmp	r3, #0
   20d0c:	d1be      	bne.n	20c8c <mfu_interface_sendto+0xdc>
   20d0e:	4649      	mov	r1, r9
   20d10:	4650      	mov	r0, sl
   20d12:	f7f5 f81d 	bl	15d50 <bsd_os_timedwait>
   20d16:	2800      	cmp	r0, #0
   20d18:	d1b8      	bne.n	20c8c <mfu_interface_sendto+0xdc>
   20d1a:	6828      	ldr	r0, [r5, #0]
   20d1c:	2800      	cmp	r0, #0
   20d1e:	d0f2      	beq.n	20d06 <mfu_interface_sendto+0x156>
   20d20:	6905      	ldr	r5, [r0, #16]
   20d22:	f7f7 fe73 	bl	18a0c <rpc_dfu_client_message_free>
   20d26:	2d00      	cmp	r5, #0
   20d28:	d19e      	bne.n	20c68 <mfu_interface_sendto+0xb8>
   20d2a:	2303      	movs	r3, #3
   20d2c:	6033      	str	r3, [r6, #0]
   20d2e:	e752      	b.n	20bd6 <mfu_interface_sendto+0x26>
   20d30:	9802      	ldr	r0, [sp, #8]
   20d32:	6803      	ldr	r3, [r0, #0]
   20d34:	2b00      	cmp	r3, #0
   20d36:	d0a6      	beq.n	20c86 <mfu_interface_sendto+0xd6>
   20d38:	4618      	mov	r0, r3
   20d3a:	f7f7 fe6f 	bl	18a1c <rpc_dfu_client_data_free>
   20d3e:	9802      	ldr	r0, [sp, #8]
   20d40:	e7a1      	b.n	20c86 <mfu_interface_sendto+0xd6>
   20d42:	2016      	movs	r0, #22
   20d44:	f00d ffe7 	bl	2ed16 <bsd_os_errno_set>
   20d48:	f04f 34ff 	mov.w	r4, #4294967295
   20d4c:	e756      	b.n	20bfc <mfu_interface_sendto+0x4c>
   20d4e:	2001      	movs	r0, #1
   20d50:	f00d ffe1 	bl	2ed16 <bsd_os_errno_set>
   20d54:	f04f 34ff 	mov.w	r4, #4294967295
   20d58:	e750      	b.n	20bfc <mfu_interface_sendto+0x4c>
   20d5a:	bf00      	nop
   20d5c:	2002211c 	.word	0x2002211c
   20d60:	4002a000 	.word	0x4002a000
   20d64:	4002a61c 	.word	0x4002a61c
   20d68:	20027886 	.word	0x20027886
   20d6c:	20022128 	.word	0x20022128
   20d70:	20022120 	.word	0x20022120
   20d74:	20022124 	.word	0x20022124

00020d78 <mfu_interface_setopt>:
   20d78:	b5f0      	push	{r4, r5, r6, r7, lr}
   20d7a:	484b      	ldr	r0, [pc, #300]	; (20ea8 <CONFIG_GPS_SIM_BASE_TIMESTAMP+0xc5>)
   20d7c:	b085      	sub	sp, #20
   20d7e:	6800      	ldr	r0, [r0, #0]
   20d80:	3802      	subs	r0, #2
   20d82:	2801      	cmp	r0, #1
   20d84:	f200 8081 	bhi.w	20e8a <CONFIG_GPS_SIM_BASE_TIMESTAMP+0xa7>
   20d88:	f240 2003 	movw	r0, #515	; 0x203
   20d8c:	4281      	cmp	r1, r0
   20d8e:	d176      	bne.n	20e7e <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x9b>
   20d90:	3a04      	subs	r2, #4
   20d92:	2a03      	cmp	r2, #3
   20d94:	d865      	bhi.n	20e62 <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x7f>
   20d96:	e8df f002 	tbb	[pc, r2]
   20d9a:	0254      	.short	0x0254
   20d9c:	5a57      	.short	0x5a57
   20d9e:	2507      	movs	r5, #7
   20da0:	462e      	mov	r6, r5
   20da2:	2100      	movs	r1, #0
   20da4:	4c41      	ldr	r4, [pc, #260]	; (20eac <CONFIG_GPS_SIM_BASE_TIMESTAMP+0xc9>)
   20da6:	4b42      	ldr	r3, [pc, #264]	; (20eb0 <CONFIG_GPS_SIM_BASE_TIMESTAMP+0xcd>)
   20da8:	f8c4 161c 	str.w	r1, [r4, #1564]	; 0x61c
   20dac:	681b      	ldr	r3, [r3, #0]
   20dae:	a801      	add	r0, sp, #4
   20db0:	9302      	str	r3, [sp, #8]
   20db2:	9b02      	ldr	r3, [sp, #8]
   20db4:	f7f7 fe02 	bl	189bc <rpc_dfu_client_request_alloc>
   20db8:	4603      	mov	r3, r0
   20dba:	bb10      	cbnz	r0, 20e02 <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x1f>
   20dbc:	f04f 0c04 	mov.w	ip, #4
   20dc0:	4f3c      	ldr	r7, [pc, #240]	; (20eb4 <CONFIG_GPS_SIM_BASE_TIMESTAMP+0xd1>)
   20dc2:	9801      	ldr	r0, [sp, #4]
   20dc4:	883a      	ldrh	r2, [r7, #0]
   20dc6:	4631      	mov	r1, r6
   20dc8:	3201      	adds	r2, #1
   20dca:	b292      	uxth	r2, r2
   20dcc:	ea45 4602 	orr.w	r6, r5, r2, lsl #16
   20dd0:	4d39      	ldr	r5, [pc, #228]	; (20eb8 <CONFIG_GPS_SIM_BASE_TIMESTAMP+0xd5>)
   20dd2:	60c6      	str	r6, [r0, #12]
   20dd4:	7103      	strb	r3, [r0, #4]
   20dd6:	7143      	strb	r3, [r0, #5]
   20dd8:	7183      	strb	r3, [r0, #6]
   20dda:	71c3      	strb	r3, [r0, #7]
   20ddc:	7243      	strb	r3, [r0, #9]
   20dde:	7283      	strb	r3, [r0, #10]
   20de0:	72c3      	strb	r3, [r0, #11]
   20de2:	f880 c008 	strb.w	ip, [r0, #8]
   20de6:	803a      	strh	r2, [r7, #0]
   20de8:	602b      	str	r3, [r5, #0]
   20dea:	f7f7 fdfb 	bl	189e4 <rpc_dfu_client_request_send>
   20dee:	b178      	cbz	r0, 20e10 <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x2d>
   20df0:	9801      	ldr	r0, [sp, #4]
   20df2:	6803      	ldr	r3, [r0, #0]
   20df4:	b11b      	cbz	r3, 20dfe <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x1b>
   20df6:	4618      	mov	r0, r3
   20df8:	f7f7 fe10 	bl	18a1c <rpc_dfu_client_data_free>
   20dfc:	9801      	ldr	r0, [sp, #4]
   20dfe:	f7f7 fe05 	bl	18a0c <rpc_dfu_client_message_free>
   20e02:	200c      	movs	r0, #12
   20e04:	f00d ff87 	bl	2ed16 <bsd_os_errno_set>
   20e08:	f04f 30ff 	mov.w	r0, #4294967295
   20e0c:	b005      	add	sp, #20
   20e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20e10:	f04f 33ff 	mov.w	r3, #4294967295
   20e14:	ae04      	add	r6, sp, #16
   20e16:	f846 3d04 	str.w	r3, [r6, #-4]!
   20e1a:	4f23      	ldr	r7, [pc, #140]	; (20ea8 <CONFIG_GPS_SIM_BASE_TIMESTAMP+0xc5>)
   20e1c:	e007      	b.n	20e2e <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x4b>
   20e1e:	f8d4 361c 	ldr.w	r3, [r4, #1564]	; 0x61c
   20e22:	bb2b      	cbnz	r3, 20e70 <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x8d>
   20e24:	4631      	mov	r1, r6
   20e26:	4638      	mov	r0, r7
   20e28:	f7f4 ff92 	bl	15d50 <bsd_os_timedwait>
   20e2c:	bb00      	cbnz	r0, 20e70 <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x8d>
   20e2e:	6828      	ldr	r0, [r5, #0]
   20e30:	2800      	cmp	r0, #0
   20e32:	d0f4      	beq.n	20e1e <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x3b>
   20e34:	6904      	ldr	r4, [r0, #16]
   20e36:	f7f7 fde9 	bl	18a0c <rpc_dfu_client_message_free>
   20e3a:	bb64      	cbnz	r4, 20e96 <CONFIG_GPS_SIM_BASE_TIMESTAMP+0xb3>
   20e3c:	4620      	mov	r0, r4
   20e3e:	b005      	add	sp, #20
   20e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20e42:	2505      	movs	r5, #5
   20e44:	462e      	mov	r6, r5
   20e46:	e7ac      	b.n	20da2 <mfu_interface_setopt+0x2a>
   20e48:	2508      	movs	r5, #8
   20e4a:	462e      	mov	r6, r5
   20e4c:	e7a9      	b.n	20da2 <mfu_interface_setopt+0x2a>
   20e4e:	b1b3      	cbz	r3, 20e7e <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x9b>
   20e50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20e52:	2a04      	cmp	r2, #4
   20e54:	d113      	bne.n	20e7e <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x9b>
   20e56:	2000      	movs	r0, #0
   20e58:	681a      	ldr	r2, [r3, #0]
   20e5a:	4b18      	ldr	r3, [pc, #96]	; (20ebc <CONFIG_GPS_SIM_BASE_TIMESTAMP+0xd9>)
   20e5c:	601a      	str	r2, [r3, #0]
   20e5e:	b005      	add	sp, #20
   20e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20e62:	202a      	movs	r0, #42	; 0x2a
   20e64:	f00d ff57 	bl	2ed16 <bsd_os_errno_set>
   20e68:	f04f 30ff 	mov.w	r0, #4294967295
   20e6c:	b005      	add	sp, #20
   20e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20e70:	203c      	movs	r0, #60	; 0x3c
   20e72:	f00d ff50 	bl	2ed16 <bsd_os_errno_set>
   20e76:	f04f 30ff 	mov.w	r0, #4294967295
   20e7a:	b005      	add	sp, #20
   20e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20e7e:	2016      	movs	r0, #22
   20e80:	f00d ff49 	bl	2ed16 <bsd_os_errno_set>
   20e84:	f04f 30ff 	mov.w	r0, #4294967295
   20e88:	e7c0      	b.n	20e0c <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x29>
   20e8a:	2001      	movs	r0, #1
   20e8c:	f00d ff43 	bl	2ed16 <bsd_os_errno_set>
   20e90:	f04f 30ff 	mov.w	r0, #4294967295
   20e94:	e7ba      	b.n	20e0c <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x29>
   20e96:	4b0a      	ldr	r3, [pc, #40]	; (20ec0 <CONFIG_GPS_SIM_BASE_TIMESTAMP+0xdd>)
   20e98:	2008      	movs	r0, #8
   20e9a:	601c      	str	r4, [r3, #0]
   20e9c:	f00d ff3b 	bl	2ed16 <bsd_os_errno_set>
   20ea0:	f04f 30ff 	mov.w	r0, #4294967295
   20ea4:	e7b2      	b.n	20e0c <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x29>
   20ea6:	bf00      	nop
   20ea8:	2002211c 	.word	0x2002211c
   20eac:	4002a000 	.word	0x4002a000
   20eb0:	4002a61c 	.word	0x4002a61c
   20eb4:	20027886 	.word	0x20027886
   20eb8:	20022128 	.word	0x20022128
   20ebc:	20022124 	.word	0x20022124
   20ec0:	20022120 	.word	0x20022120

00020ec4 <mfu_interface_getopt>:
   20ec4:	f240 2003 	movw	r0, #515	; 0x203
   20ec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20ecc:	4281      	cmp	r1, r0
   20ece:	b085      	sub	sp, #20
   20ed0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   20ed2:	f040 80a8 	bne.w	21026 <mfu_interface_getopt+0x162>
   20ed6:	461d      	mov	r5, r3
   20ed8:	2b00      	cmp	r3, #0
   20eda:	f000 80a4 	beq.w	21026 <mfu_interface_getopt+0x162>
   20ede:	2e00      	cmp	r6, #0
   20ee0:	f000 80a1 	beq.w	21026 <mfu_interface_getopt+0x162>
   20ee4:	4b5b      	ldr	r3, [pc, #364]	; (21054 <mfu_interface_getopt+0x190>)
   20ee6:	681b      	ldr	r3, [r3, #0]
   20ee8:	3b02      	subs	r3, #2
   20eea:	2b01      	cmp	r3, #1
   20eec:	f200 80a1 	bhi.w	21032 <mfu_interface_getopt+0x16e>
   20ef0:	3a01      	subs	r2, #1
   20ef2:	2a13      	cmp	r2, #19
   20ef4:	d861      	bhi.n	20fba <mfu_interface_getopt+0xf6>
   20ef6:	e8df f002 	tbb	[pc, r2]
   20efa:	5417      	.short	0x5417
   20efc:	60606060 	.word	0x60606060
   20f00:	6060605a 	.word	0x6060605a
   20f04:	60606060 	.word	0x60606060
   20f08:	60606060 	.word	0x60606060
   20f0c:	0a60      	.short	0x0a60
   20f0e:	6833      	ldr	r3, [r6, #0]
   20f10:	2b04      	cmp	r3, #4
   20f12:	f040 8088 	bne.w	21026 <mfu_interface_getopt+0x162>
   20f16:	2200      	movs	r2, #0
   20f18:	4610      	mov	r0, r2
   20f1a:	4b4f      	ldr	r3, [pc, #316]	; (21058 <mfu_interface_getopt+0x194>)
   20f1c:	6819      	ldr	r1, [r3, #0]
   20f1e:	601a      	str	r2, [r3, #0]
   20f20:	6029      	str	r1, [r5, #0]
   20f22:	b005      	add	sp, #20
   20f24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20f28:	6833      	ldr	r3, [r6, #0]
   20f2a:	2b24      	cmp	r3, #36	; 0x24
   20f2c:	d17b      	bne.n	21026 <mfu_interface_getopt+0x162>
   20f2e:	2401      	movs	r4, #1
   20f30:	46a0      	mov	r8, r4
   20f32:	2100      	movs	r1, #0
   20f34:	4a49      	ldr	r2, [pc, #292]	; (2105c <mfu_interface_getopt+0x198>)
   20f36:	4b4a      	ldr	r3, [pc, #296]	; (21060 <mfu_interface_getopt+0x19c>)
   20f38:	f8c2 161c 	str.w	r1, [r2, #1564]	; 0x61c
   20f3c:	681b      	ldr	r3, [r3, #0]
   20f3e:	a801      	add	r0, sp, #4
   20f40:	9302      	str	r3, [sp, #8]
   20f42:	9b02      	ldr	r3, [sp, #8]
   20f44:	f7f7 fd3a 	bl	189bc <rpc_dfu_client_request_alloc>
   20f48:	bb18      	cbnz	r0, 20f92 <mfu_interface_getopt+0xce>
   20f4a:	4946      	ldr	r1, [pc, #280]	; (21064 <mfu_interface_getopt+0x1a0>)
   20f4c:	9b01      	ldr	r3, [sp, #4]
   20f4e:	880a      	ldrh	r2, [r1, #0]
   20f50:	f1b8 0f03 	cmp.w	r8, #3
   20f54:	f102 0201 	add.w	r2, r2, #1
   20f58:	b292      	uxth	r2, r2
   20f5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   20f5e:	7118      	strb	r0, [r3, #4]
   20f60:	800a      	strh	r2, [r1, #0]
   20f62:	60dc      	str	r4, [r3, #12]
   20f64:	7158      	strb	r0, [r3, #5]
   20f66:	7198      	strb	r0, [r3, #6]
   20f68:	71d8      	strb	r0, [r3, #7]
   20f6a:	d051      	beq.n	21010 <mfu_interface_getopt+0x14c>
   20f6c:	2104      	movs	r1, #4
   20f6e:	2200      	movs	r2, #0
   20f70:	4f3d      	ldr	r7, [pc, #244]	; (21068 <mfu_interface_getopt+0x1a4>)
   20f72:	6099      	str	r1, [r3, #8]
   20f74:	4618      	mov	r0, r3
   20f76:	4641      	mov	r1, r8
   20f78:	603a      	str	r2, [r7, #0]
   20f7a:	f7f7 fd33 	bl	189e4 <rpc_dfu_client_request_send>
   20f7e:	b320      	cbz	r0, 20fca <mfu_interface_getopt+0x106>
   20f80:	9801      	ldr	r0, [sp, #4]
   20f82:	6803      	ldr	r3, [r0, #0]
   20f84:	b11b      	cbz	r3, 20f8e <mfu_interface_getopt+0xca>
   20f86:	4618      	mov	r0, r3
   20f88:	f7f7 fd48 	bl	18a1c <rpc_dfu_client_data_free>
   20f8c:	9801      	ldr	r0, [sp, #4]
   20f8e:	f7f7 fd3d 	bl	18a0c <rpc_dfu_client_message_free>
   20f92:	200c      	movs	r0, #12
   20f94:	f00d febf 	bl	2ed16 <bsd_os_errno_set>
   20f98:	f04f 30ff 	mov.w	r0, #4294967295
   20f9c:	b005      	add	sp, #20
   20f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20fa2:	6833      	ldr	r3, [r6, #0]
   20fa4:	2b04      	cmp	r3, #4
   20fa6:	d13e      	bne.n	21026 <mfu_interface_getopt+0x162>
   20fa8:	2402      	movs	r4, #2
   20faa:	46a0      	mov	r8, r4
   20fac:	e7c1      	b.n	20f32 <mfu_interface_getopt+0x6e>
   20fae:	6833      	ldr	r3, [r6, #0]
   20fb0:	2b04      	cmp	r3, #4
   20fb2:	d138      	bne.n	21026 <mfu_interface_getopt+0x162>
   20fb4:	2409      	movs	r4, #9
   20fb6:	46a0      	mov	r8, r4
   20fb8:	e7bb      	b.n	20f32 <mfu_interface_getopt+0x6e>
   20fba:	202a      	movs	r0, #42	; 0x2a
   20fbc:	f00d feab 	bl	2ed16 <bsd_os_errno_set>
   20fc0:	f04f 30ff 	mov.w	r0, #4294967295
   20fc4:	b005      	add	sp, #20
   20fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20fca:	f04f 33ff 	mov.w	r3, #4294967295
   20fce:	ac04      	add	r4, sp, #16
   20fd0:	f8df 8088 	ldr.w	r8, [pc, #136]	; 2105c <mfu_interface_getopt+0x198>
   20fd4:	f844 3d04 	str.w	r3, [r4, #-4]!
   20fd8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 21054 <mfu_interface_getopt+0x190>
   20fdc:	e007      	b.n	20fee <mfu_interface_getopt+0x12a>
   20fde:	f8d8 361c 	ldr.w	r3, [r8, #1564]	; 0x61c
   20fe2:	b9d3      	cbnz	r3, 2101a <mfu_interface_getopt+0x156>
   20fe4:	4621      	mov	r1, r4
   20fe6:	4648      	mov	r0, r9
   20fe8:	f7f4 feb2 	bl	15d50 <bsd_os_timedwait>
   20fec:	b9a8      	cbnz	r0, 2101a <mfu_interface_getopt+0x156>
   20fee:	6839      	ldr	r1, [r7, #0]
   20ff0:	2900      	cmp	r1, #0
   20ff2:	d0f4      	beq.n	20fde <mfu_interface_getopt+0x11a>
   20ff4:	690c      	ldr	r4, [r1, #16]
   20ff6:	bb14      	cbnz	r4, 2103e <mfu_interface_getopt+0x17a>
   20ff8:	6832      	ldr	r2, [r6, #0]
   20ffa:	3114      	adds	r1, #20
   20ffc:	4628      	mov	r0, r5
   20ffe:	f7ec fdeb 	bl	dbd8 <memcpy>
   21002:	6838      	ldr	r0, [r7, #0]
   21004:	f7f7 fd02 	bl	18a0c <rpc_dfu_client_message_free>
   21008:	4620      	mov	r0, r4
   2100a:	b005      	add	sp, #20
   2100c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21010:	4a16      	ldr	r2, [pc, #88]	; (2106c <mfu_interface_getopt+0x1a8>)
   21012:	2108      	movs	r1, #8
   21014:	6812      	ldr	r2, [r2, #0]
   21016:	611a      	str	r2, [r3, #16]
   21018:	e7a9      	b.n	20f6e <mfu_interface_getopt+0xaa>
   2101a:	203c      	movs	r0, #60	; 0x3c
   2101c:	f00d fe7b 	bl	2ed16 <bsd_os_errno_set>
   21020:	f04f 30ff 	mov.w	r0, #4294967295
   21024:	e77d      	b.n	20f22 <mfu_interface_getopt+0x5e>
   21026:	2016      	movs	r0, #22
   21028:	f00d fe75 	bl	2ed16 <bsd_os_errno_set>
   2102c:	f04f 30ff 	mov.w	r0, #4294967295
   21030:	e777      	b.n	20f22 <mfu_interface_getopt+0x5e>
   21032:	2001      	movs	r0, #1
   21034:	f00d fe6f 	bl	2ed16 <bsd_os_errno_set>
   21038:	f04f 30ff 	mov.w	r0, #4294967295
   2103c:	e771      	b.n	20f22 <mfu_interface_getopt+0x5e>
   2103e:	4b06      	ldr	r3, [pc, #24]	; (21058 <mfu_interface_getopt+0x194>)
   21040:	2008      	movs	r0, #8
   21042:	601c      	str	r4, [r3, #0]
   21044:	f00d fe67 	bl	2ed16 <bsd_os_errno_set>
   21048:	6838      	ldr	r0, [r7, #0]
   2104a:	f7f7 fcdf 	bl	18a0c <rpc_dfu_client_message_free>
   2104e:	f04f 30ff 	mov.w	r0, #4294967295
   21052:	e766      	b.n	20f22 <mfu_interface_getopt+0x5e>
   21054:	2002211c 	.word	0x2002211c
   21058:	20022120 	.word	0x20022120
   2105c:	4002a000 	.word	0x4002a000
   21060:	4002a61c 	.word	0x4002a61c
   21064:	20027886 	.word	0x20027886
   21068:	20022128 	.word	0x20022128
   2106c:	20022124 	.word	0x20022124

00021070 <bsd_platform_error_handler>:
   21070:	b508      	push	{r3, lr}
   21072:	4b07      	ldr	r3, [pc, #28]	; (21090 <bsd_platform_error_handler+0x20>)
   21074:	681a      	ldr	r2, [r3, #0]
   21076:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   2107a:	601a      	str	r2, [r3, #0]
   2107c:	681b      	ldr	r3, [r3, #0]
   2107e:	07db      	lsls	r3, r3, #31
   21080:	d402      	bmi.n	21088 <bsd_platform_error_handler+0x18>
   21082:	f00c ffe1 	bl	2e048 <bsd_recoverable_error_handler>
   21086:	bd08      	pop	{r3, pc}
   21088:	f00c ffe1 	bl	2e04e <bsd_irrecoverable_error_handler>
   2108c:	bd08      	pop	{r3, pc}
   2108e:	bf00      	nop
   21090:	2002212c 	.word	0x2002212c

00021094 <bsd_init>:
   21094:	b510      	push	{r4, lr}
   21096:	4c09      	ldr	r4, [pc, #36]	; (210bc <bsd_init+0x28>)
   21098:	6823      	ldr	r3, [r4, #0]
   2109a:	b953      	cbnz	r3, 210b2 <bsd_init+0x1e>
   2109c:	2301      	movs	r3, #1
   2109e:	6023      	str	r3, [r4, #0]
   210a0:	f000 f82a 	bl	210f8 <bsd_platform_init>
   210a4:	b920      	cbnz	r0, 210b0 <bsd_init+0x1c>
   210a6:	6823      	ldr	r3, [r4, #0]
   210a8:	2b00      	cmp	r3, #0
   210aa:	bfa4      	itt	ge
   210ac:	2302      	movge	r3, #2
   210ae:	6023      	strge	r3, [r4, #0]
   210b0:	bd10      	pop	{r4, pc}
   210b2:	200f      	movs	r0, #15
   210b4:	f00c ffc8 	bl	2e048 <bsd_recoverable_error_handler>
   210b8:	200f      	movs	r0, #15
   210ba:	bd10      	pop	{r4, pc}
   210bc:	2002212c 	.word	0x2002212c

000210c0 <bsd_shutdown>:
   210c0:	2304      	movs	r3, #4
   210c2:	b510      	push	{r4, lr}
   210c4:	4c04      	ldr	r4, [pc, #16]	; (210d8 <bsd_shutdown+0x18>)
   210c6:	6023      	str	r3, [r4, #0]
   210c8:	f000 f894 	bl	211f4 <bsd_platform_shutdown>
   210cc:	6823      	ldr	r3, [r4, #0]
   210ce:	2b00      	cmp	r3, #0
   210d0:	bfa4      	itt	ge
   210d2:	2300      	movge	r3, #0
   210d4:	6023      	strge	r3, [r4, #0]
   210d6:	bd10      	pop	{r4, pc}
   210d8:	2002212c 	.word	0x2002212c

000210dc <unimplemented_method>:
   210dc:	b40f      	push	{r0, r1, r2, r3}
   210de:	b508      	push	{r3, lr}
   210e0:	202d      	movs	r0, #45	; 0x2d
   210e2:	f00d fe18 	bl	2ed16 <bsd_os_errno_set>
   210e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   210ea:	f04f 30ff 	mov.w	r0, #4294967295
   210ee:	b004      	add	sp, #16
   210f0:	4770      	bx	lr
   210f2:	bf00      	nop

000210f4 <rpc_transport_ipc_fault_handler>:
   210f4:	f7ff bfbc 	b.w	21070 <bsd_platform_error_handler>

000210f8 <bsd_platform_init>:
   210f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   210fa:	b093      	sub	sp, #76	; 0x4c
   210fc:	f7f7 fec6 	bl	18e8c <nrf_mem_init>
   21100:	2800      	cmp	r0, #0
   21102:	d137      	bne.n	21174 <bsd_platform_init+0x7c>
   21104:	4934      	ldr	r1, [pc, #208]	; (211d8 <bsd_platform_init+0xe0>)
   21106:	a801      	add	r0, sp, #4
   21108:	f7f7 ff34 	bl	18f74 <nrf_mem_register>
   2110c:	4604      	mov	r4, r0
   2110e:	bb60      	cbnz	r0, 2116a <bsd_platform_init+0x72>
   21110:	f7f4 fed0 	bl	15eb4 <bsd_os_init>
   21114:	f003 ff70 	bl	24ff8 <rpc_framework_init>
   21118:	4604      	mov	r4, r0
   2111a:	bb30      	cbnz	r0, 2116a <bsd_platform_init+0x72>
   2111c:	2320      	movs	r3, #32
   2111e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   21122:	2208      	movs	r2, #8
   21124:	f44f 5740 	mov.w	r7, #12288	; 0x3000
   21128:	482c      	ldr	r0, [pc, #176]	; (211dc <bsd_platform_init+0xe4>)
   2112a:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
   2112e:	4e2c      	ldr	r6, [pc, #176]	; (211e0 <bsd_platform_init+0xe8>)
   21130:	9303      	str	r3, [sp, #12]
   21132:	9305      	str	r3, [sp, #20]
   21134:	9307      	str	r3, [sp, #28]
   21136:	4d2b      	ldr	r5, [pc, #172]	; (211e4 <bsd_platform_init+0xec>)
   21138:	9109      	str	r1, [sp, #36]	; 0x24
   2113a:	910d      	str	r1, [sp, #52]	; 0x34
   2113c:	4c2a      	ldr	r4, [pc, #168]	; (211e8 <bsd_platform_init+0xf0>)
   2113e:	492b      	ldr	r1, [pc, #172]	; (211ec <bsd_platform_init+0xf4>)
   21140:	4b2b      	ldr	r3, [pc, #172]	; (211f0 <bsd_platform_init+0xf8>)
   21142:	9002      	str	r0, [sp, #8]
   21144:	eb0d 0002 	add.w	r0, sp, r2
   21148:	970b      	str	r7, [sp, #44]	; 0x2c
   2114a:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   2114e:	9604      	str	r6, [sp, #16]
   21150:	9506      	str	r5, [sp, #24]
   21152:	9408      	str	r4, [sp, #32]
   21154:	910a      	str	r1, [sp, #40]	; 0x28
   21156:	930c      	str	r3, [sp, #48]	; 0x30
   21158:	f000 fc34 	bl	219c4 <rpc_transport_ipc_init>
   2115c:	b108      	cbz	r0, 21162 <bsd_platform_init+0x6a>
   2115e:	4604      	mov	r4, r0
   21160:	e005      	b.n	2116e <bsd_platform_init+0x76>
   21162:	f003 fd29 	bl	24bb8 <interface_init>
   21166:	4604      	mov	r4, r0
   21168:	b150      	cbz	r0, 21180 <bsd_platform_init+0x88>
   2116a:	f7ff ff81 	bl	21070 <bsd_platform_error_handler>
   2116e:	4620      	mov	r0, r4
   21170:	b013      	add	sp, #76	; 0x4c
   21172:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21174:	4604      	mov	r4, r0
   21176:	f7ff ff7b 	bl	21070 <bsd_platform_error_handler>
   2117a:	4620      	mov	r0, r4
   2117c:	b013      	add	sp, #76	; 0x4c
   2117e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21180:	f7fe fe7a 	bl	1fe78 <at_interface_init>
   21184:	4604      	mov	r4, r0
   21186:	2800      	cmp	r0, #0
   21188:	d1ef      	bne.n	2116a <bsd_platform_init+0x72>
   2118a:	f002 faf1 	bl	23770 <ip_interface_init>
   2118e:	4604      	mov	r4, r0
   21190:	2800      	cmp	r0, #0
   21192:	d1ea      	bne.n	2116a <bsd_platform_init+0x72>
   21194:	f7ff f88e 	bl	202b4 <tls_interface_init>
   21198:	4604      	mov	r4, r0
   2119a:	2800      	cmp	r0, #0
   2119c:	d1e5      	bne.n	2116a <bsd_platform_init+0x72>
   2119e:	f7ff fc4f 	bl	20a40 <mfu_interface_init>
   211a2:	4604      	mov	r4, r0
   211a4:	2800      	cmp	r0, #0
   211a6:	d1e0      	bne.n	2116a <bsd_platform_init+0x72>
   211a8:	f005 f8c8 	bl	2633c <authenticated_atcmd_init>
   211ac:	4604      	mov	r4, r0
   211ae:	b978      	cbnz	r0, 211d0 <bsd_platform_init+0xd8>
   211b0:	f000 f93a 	bl	21428 <nrf_inbuilt_key_init>
   211b4:	4604      	mov	r4, r0
   211b6:	2800      	cmp	r0, #0
   211b8:	d1d7      	bne.n	2116a <bsd_platform_init+0x72>
   211ba:	f001 fb35 	bl	22828 <pdn_interface_init>
   211be:	4604      	mov	r4, r0
   211c0:	2800      	cmp	r0, #0
   211c2:	d1d2      	bne.n	2116a <bsd_platform_init+0x72>
   211c4:	f004 ffde 	bl	26184 <gnss_interface_init>
   211c8:	4604      	mov	r4, r0
   211ca:	2800      	cmp	r0, #0
   211cc:	d0cf      	beq.n	2116e <bsd_platform_init+0x76>
   211ce:	e7cc      	b.n	2116a <bsd_platform_init+0x72>
   211d0:	f7ff ff4e 	bl	21070 <bsd_platform_error_handler>
   211d4:	e7cb      	b.n	2116e <bsd_platform_init+0x76>
   211d6:	bf00      	nop
   211d8:	00033aac 	.word	0x00033aac
   211dc:	20010000 	.word	0x20010000
   211e0:	20010040 	.word	0x20010040
   211e4:	20010020 	.word	0x20010020
   211e8:	20017060 	.word	0x20017060
   211ec:	20010060 	.word	0x20010060
   211f0:	20013060 	.word	0x20013060

000211f4 <bsd_platform_shutdown>:
   211f4:	b508      	push	{r3, lr}
   211f6:	f000 f95d 	bl	214b4 <nrf_inbuilt_key_deinit>
   211fa:	f005 f921 	bl	26440 <authenticated_atcmd_shutdown>
   211fe:	f003 fe3f 	bl	24e80 <interface_shutdown>
   21202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   21206:	f000 bc41 	b.w	21a8c <rpc_transport_ipc_shutdown>
   2120a:	bf00      	nop

0002120c <bsd_platform_af_method_table_get>:
   2120c:	2802      	cmp	r0, #2
   2120e:	b508      	push	{r3, lr}
   21210:	d00e      	beq.n	21230 <bsd_platform_af_method_table_get+0x24>
   21212:	d922      	bls.n	2125a <bsd_platform_af_method_table_get+0x4e>
   21214:	280a      	cmp	r0, #10
   21216:	d00b      	beq.n	21230 <bsd_platform_af_method_table_get+0x24>
   21218:	2866      	cmp	r0, #102	; 0x66
   2121a:	d119      	bne.n	21250 <bsd_platform_af_method_table_get+0x44>
   2121c:	f240 2301 	movw	r3, #513	; 0x201
   21220:	429a      	cmp	r2, r3
   21222:	d029      	beq.n	21278 <bsd_platform_af_method_table_get+0x6c>
   21224:	f240 2302 	movw	r3, #514	; 0x202
   21228:	429a      	cmp	r2, r3
   2122a:	d111      	bne.n	21250 <bsd_platform_af_method_table_get+0x44>
   2122c:	4813      	ldr	r0, [pc, #76]	; (2127c <bsd_platform_af_method_table_get+0x70>)
   2122e:	bd08      	pop	{r3, pc}
   21230:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   21234:	2a0a      	cmp	r2, #10
   21236:	d81b      	bhi.n	21270 <bsd_platform_af_method_table_get+0x64>
   21238:	2301      	movs	r3, #1
   2123a:	f240 4103 	movw	r1, #1027	; 0x403
   2123e:	4810      	ldr	r0, [pc, #64]	; (21280 <bsd_platform_af_method_table_get+0x74>)
   21240:	fa03 f202 	lsl.w	r2, r3, r2
   21244:	420a      	tst	r2, r1
   21246:	f100 0328 	add.w	r3, r0, #40	; 0x28
   2124a:	bf18      	it	ne
   2124c:	4618      	movne	r0, r3
   2124e:	bd08      	pop	{r3, pc}
   21250:	2016      	movs	r0, #22
   21252:	f00d fd60 	bl	2ed16 <bsd_os_errno_set>
   21256:	2000      	movs	r0, #0
   21258:	bd08      	pop	{r3, pc}
   2125a:	2801      	cmp	r0, #1
   2125c:	d1f8      	bne.n	21250 <bsd_platform_af_method_table_get+0x44>
   2125e:	f240 2303 	movw	r3, #515	; 0x203
   21262:	429a      	cmp	r2, r3
   21264:	d006      	beq.n	21274 <bsd_platform_af_method_table_get+0x68>
   21266:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   2126a:	d1f1      	bne.n	21250 <bsd_platform_af_method_table_get+0x44>
   2126c:	4805      	ldr	r0, [pc, #20]	; (21284 <bsd_platform_af_method_table_get+0x78>)
   2126e:	bd08      	pop	{r3, pc}
   21270:	4803      	ldr	r0, [pc, #12]	; (21280 <bsd_platform_af_method_table_get+0x74>)
   21272:	bd08      	pop	{r3, pc}
   21274:	4804      	ldr	r0, [pc, #16]	; (21288 <bsd_platform_af_method_table_get+0x7c>)
   21276:	bd08      	pop	{r3, pc}
   21278:	4804      	ldr	r0, [pc, #16]	; (2128c <bsd_platform_af_method_table_get+0x80>)
   2127a:	bd08      	pop	{r3, pc}
   2127c:	00033a44 	.word	0x00033a44
   21280:	000339cc 	.word	0x000339cc
   21284:	00033a6c 	.word	0x00033a6c
   21288:	00033a1c 	.word	0x00033a1c
   2128c:	000339a4 	.word	0x000339a4

00021290 <bsd_platform_fd_method_table_get>:
   21290:	b538      	push	{r3, r4, r5, lr}
   21292:	4605      	mov	r5, r0
   21294:	f003 fda2 	bl	24ddc <interface_socket_from_handle_get>
   21298:	4604      	mov	r4, r0
   2129a:	b950      	cbnz	r0, 212b2 <bsd_platform_fd_method_table_get+0x22>
   2129c:	4b23      	ldr	r3, [pc, #140]	; (2132c <bsd_platform_fd_method_table_get+0x9c>)
   2129e:	43ab      	bics	r3, r5
   212a0:	d01a      	beq.n	212d8 <bsd_platform_fd_method_table_get+0x48>
   212a2:	4b23      	ldr	r3, [pc, #140]	; (21330 <bsd_platform_fd_method_table_get+0xa0>)
   212a4:	43ab      	bics	r3, r5
   212a6:	d015      	beq.n	212d4 <bsd_platform_fd_method_table_get+0x44>
   212a8:	4b22      	ldr	r3, [pc, #136]	; (21334 <bsd_platform_fd_method_table_get+0xa4>)
   212aa:	43ab      	bics	r3, r5
   212ac:	d138      	bne.n	21320 <bsd_platform_fd_method_table_get+0x90>
   212ae:	4822      	ldr	r0, [pc, #136]	; (21338 <bsd_platform_fd_method_table_get+0xa8>)
   212b0:	bd38      	pop	{r3, r4, r5, pc}
   212b2:	6883      	ldr	r3, [r0, #8]
   212b4:	6902      	ldr	r2, [r0, #16]
   212b6:	2b02      	cmp	r3, #2
   212b8:	d010      	beq.n	212dc <bsd_platform_fd_method_table_get+0x4c>
   212ba:	d91f      	bls.n	212fc <bsd_platform_fd_method_table_get+0x6c>
   212bc:	2b0a      	cmp	r3, #10
   212be:	d00d      	beq.n	212dc <bsd_platform_fd_method_table_get+0x4c>
   212c0:	2b66      	cmp	r3, #102	; 0x66
   212c2:	d124      	bne.n	2130e <bsd_platform_fd_method_table_get+0x7e>
   212c4:	f240 2301 	movw	r3, #513	; 0x201
   212c8:	429a      	cmp	r2, r3
   212ca:	d027      	beq.n	2131c <bsd_platform_fd_method_table_get+0x8c>
   212cc:	f240 2302 	movw	r3, #514	; 0x202
   212d0:	429a      	cmp	r2, r3
   212d2:	d11c      	bne.n	2130e <bsd_platform_fd_method_table_get+0x7e>
   212d4:	4819      	ldr	r0, [pc, #100]	; (2133c <bsd_platform_fd_method_table_get+0xac>)
   212d6:	bd38      	pop	{r3, r4, r5, pc}
   212d8:	4819      	ldr	r0, [pc, #100]	; (21340 <bsd_platform_fd_method_table_get+0xb0>)
   212da:	bd38      	pop	{r3, r4, r5, pc}
   212dc:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   212e0:	2a0a      	cmp	r2, #10
   212e2:	d819      	bhi.n	21318 <bsd_platform_fd_method_table_get+0x88>
   212e4:	2301      	movs	r3, #1
   212e6:	f240 4103 	movw	r1, #1027	; 0x403
   212ea:	4816      	ldr	r0, [pc, #88]	; (21344 <bsd_platform_fd_method_table_get+0xb4>)
   212ec:	fa03 f202 	lsl.w	r2, r3, r2
   212f0:	420a      	tst	r2, r1
   212f2:	f100 0428 	add.w	r4, r0, #40	; 0x28
   212f6:	bf18      	it	ne
   212f8:	4620      	movne	r0, r4
   212fa:	bd38      	pop	{r3, r4, r5, pc}
   212fc:	2b01      	cmp	r3, #1
   212fe:	d106      	bne.n	2130e <bsd_platform_fd_method_table_get+0x7e>
   21300:	f240 2303 	movw	r3, #515	; 0x203
   21304:	429a      	cmp	r2, r3
   21306:	d0e7      	beq.n	212d8 <bsd_platform_fd_method_table_get+0x48>
   21308:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   2130c:	d0cf      	beq.n	212ae <bsd_platform_fd_method_table_get+0x1e>
   2130e:	2016      	movs	r0, #22
   21310:	f00d fd01 	bl	2ed16 <bsd_os_errno_set>
   21314:	2000      	movs	r0, #0
   21316:	bd38      	pop	{r3, r4, r5, pc}
   21318:	480a      	ldr	r0, [pc, #40]	; (21344 <bsd_platform_fd_method_table_get+0xb4>)
   2131a:	bd38      	pop	{r3, r4, r5, pc}
   2131c:	480a      	ldr	r0, [pc, #40]	; (21348 <bsd_platform_fd_method_table_get+0xb8>)
   2131e:	bd38      	pop	{r3, r4, r5, pc}
   21320:	2009      	movs	r0, #9
   21322:	f00d fcf8 	bl	2ed16 <bsd_os_errno_set>
   21326:	4620      	mov	r0, r4
   21328:	bd38      	pop	{r3, r4, r5, pc}
   2132a:	bf00      	nop
   2132c:	49765432 	.word	0x49765432
   21330:	789a0000 	.word	0x789a0000
   21334:	49765443 	.word	0x49765443
   21338:	00033a6c 	.word	0x00033a6c
   2133c:	00033a44 	.word	0x00033a44
   21340:	00033a1c 	.word	0x00033a1c
   21344:	000339cc 	.word	0x000339cc
   21348:	000339a4 	.word	0x000339a4

0002134c <bsd_platform_getaddrinfo>:
   2134c:	f003 b8b0 	b.w	244b0 <ip_interface_getaddrinfo>

00021350 <bsd_platform_freeaddrinfo>:
   21350:	f003 b998 	b.w	24684 <ip_interface_freeaddrinfo>

00021354 <bsd_platform_poll>:
   21354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21358:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   2135c:	b083      	sub	sp, #12
   2135e:	9200      	str	r2, [sp, #0]
   21360:	2800      	cmp	r0, #0
   21362:	d048      	beq.n	213f6 <bsd_platform_poll+0xa2>
   21364:	1e4b      	subs	r3, r1, #1
   21366:	2b07      	cmp	r3, #7
   21368:	d845      	bhi.n	213f6 <bsd_platform_poll+0xa2>
   2136a:	4680      	mov	r8, r0
   2136c:	4605      	mov	r5, r0
   2136e:	2400      	movs	r4, #0
   21370:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   21374:	88ab      	ldrh	r3, [r5, #4]
   21376:	6828      	ldr	r0, [r5, #0]
   21378:	f003 0303 	and.w	r3, r3, #3
   2137c:	a901      	add	r1, sp, #4
   2137e:	f043 061c 	orr.w	r6, r3, #28
   21382:	f003 fd39 	bl	24df8 <interface_socket_event_get>
   21386:	9b01      	ldr	r3, [sp, #4]
   21388:	3508      	adds	r5, #8
   2138a:	4033      	ands	r3, r6
   2138c:	f825 3c02 	strh.w	r3, [r5, #-2]
   21390:	b103      	cbz	r3, 21394 <bsd_platform_poll+0x40>
   21392:	3401      	adds	r4, #1
   21394:	42af      	cmp	r7, r5
   21396:	d1ed      	bne.n	21374 <bsd_platform_poll+0x20>
   21398:	bb9c      	cbnz	r4, 21402 <bsd_platform_poll+0xae>
   2139a:	4669      	mov	r1, sp
   2139c:	4640      	mov	r0, r8
   2139e:	f7f4 fcd7 	bl	15d50 <bsd_os_timedwait>
   213a2:	4607      	mov	r7, r0
   213a4:	b108      	cbz	r0, 213aa <bsd_platform_poll+0x56>
   213a6:	283c      	cmp	r0, #60	; 0x3c
   213a8:	d11d      	bne.n	213e6 <bsd_platform_poll+0x92>
   213aa:	46c1      	mov	r9, r8
   213ac:	2600      	movs	r6, #0
   213ae:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   213b2:	f8d9 0000 	ldr.w	r0, [r9]
   213b6:	f003 0303 	and.w	r3, r3, #3
   213ba:	a901      	add	r1, sp, #4
   213bc:	f043 041c 	orr.w	r4, r3, #28
   213c0:	f003 fd1a 	bl	24df8 <interface_socket_event_get>
   213c4:	9b01      	ldr	r3, [sp, #4]
   213c6:	f109 0908 	add.w	r9, r9, #8
   213ca:	4023      	ands	r3, r4
   213cc:	f829 3c02 	strh.w	r3, [r9, #-2]
   213d0:	b103      	cbz	r3, 213d4 <bsd_platform_poll+0x80>
   213d2:	3601      	adds	r6, #1
   213d4:	454d      	cmp	r5, r9
   213d6:	d1ea      	bne.n	213ae <bsd_platform_poll+0x5a>
   213d8:	b90e      	cbnz	r6, 213de <bsd_platform_poll+0x8a>
   213da:	2f00      	cmp	r7, #0
   213dc:	d0dd      	beq.n	2139a <bsd_platform_poll+0x46>
   213de:	4630      	mov	r0, r6
   213e0:	b003      	add	sp, #12
   213e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   213e6:	2023      	movs	r0, #35	; 0x23
   213e8:	f00d fc95 	bl	2ed16 <bsd_os_errno_set>
   213ec:	f04f 30ff 	mov.w	r0, #4294967295
   213f0:	b003      	add	sp, #12
   213f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   213f6:	2016      	movs	r0, #22
   213f8:	f00d fc8d 	bl	2ed16 <bsd_os_errno_set>
   213fc:	f04f 30ff 	mov.w	r0, #4294967295
   21400:	e7ee      	b.n	213e0 <bsd_platform_poll+0x8c>
   21402:	4620      	mov	r0, r4
   21404:	e7ec      	b.n	213e0 <bsd_platform_poll+0x8c>
   21406:	bf00      	nop

00021408 <bsd_platform_fcntl>:
   21408:	b508      	push	{r3, lr}
   2140a:	4b06      	ldr	r3, [pc, #24]	; (21424 <bsd_platform_fcntl+0x1c>)
   2140c:	4383      	bics	r3, r0
   2140e:	d003      	beq.n	21418 <bsd_platform_fcntl+0x10>
   21410:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   21414:	f003 bd62 	b.w	24edc <interface_socket_fcntl>
   21418:	202d      	movs	r0, #45	; 0x2d
   2141a:	f00d fc7c 	bl	2ed16 <bsd_os_errno_set>
   2141e:	f04f 30ff 	mov.w	r0, #4294967295
   21422:	bd08      	pop	{r3, pc}
   21424:	49765432 	.word	0x49765432

00021428 <nrf_inbuilt_key_init>:
   21428:	b570      	push	{r4, r5, r6, lr}
   2142a:	b086      	sub	sp, #24
   2142c:	491d      	ldr	r1, [pc, #116]	; (214a4 <nrf_inbuilt_key_init+0x7c>)
   2142e:	a802      	add	r0, sp, #8
   21430:	f7f7 fda0 	bl	18f74 <nrf_mem_register>
   21434:	bb00      	cbnz	r0, 21478 <nrf_inbuilt_key_init+0x50>
   21436:	4601      	mov	r1, r0
   21438:	4604      	mov	r4, r0
   2143a:	f240 2201 	movw	r2, #513	; 0x201
   2143e:	2066      	movs	r0, #102	; 0x66
   21440:	f7fe fd1c 	bl	1fe7c <at_interface_open>
   21444:	4e18      	ldr	r6, [pc, #96]	; (214a8 <nrf_inbuilt_key_init+0x80>)
   21446:	2800      	cmp	r0, #0
   21448:	4605      	mov	r5, r0
   2144a:	6030      	str	r0, [r6, #0]
   2144c:	db10      	blt.n	21470 <nrf_inbuilt_key_init+0x48>
   2144e:	4817      	ldr	r0, [pc, #92]	; (214ac <nrf_inbuilt_key_init+0x84>)
   21450:	f009 fc34 	bl	2acbc <strlen>
   21454:	4623      	mov	r3, r4
   21456:	4602      	mov	r2, r0
   21458:	4914      	ldr	r1, [pc, #80]	; (214ac <nrf_inbuilt_key_init+0x84>)
   2145a:	4628      	mov	r0, r5
   2145c:	9401      	str	r4, [sp, #4]
   2145e:	9400      	str	r4, [sp, #0]
   21460:	f7fe fcbc 	bl	1fddc <at_interface_write>
   21464:	4605      	mov	r5, r0
   21466:	4811      	ldr	r0, [pc, #68]	; (214ac <nrf_inbuilt_key_init+0x84>)
   21468:	f009 fc28 	bl	2acbc <strlen>
   2146c:	42a8      	cmp	r0, r5
   2146e:	d007      	beq.n	21480 <nrf_inbuilt_key_init+0x58>
   21470:	2405      	movs	r4, #5
   21472:	4620      	mov	r0, r4
   21474:	b006      	add	sp, #24
   21476:	bd70      	pop	{r4, r5, r6, pc}
   21478:	2469      	movs	r4, #105	; 0x69
   2147a:	4620      	mov	r0, r4
   2147c:	b006      	add	sp, #24
   2147e:	bd70      	pop	{r4, r5, r6, pc}
   21480:	6830      	ldr	r0, [r6, #0]
   21482:	e9cd 4400 	strd	r4, r4, [sp]
   21486:	a903      	add	r1, sp, #12
   21488:	4623      	mov	r3, r4
   2148a:	220a      	movs	r2, #10
   2148c:	f7fe fd88 	bl	1ffa0 <at_interface_read>
   21490:	2801      	cmp	r0, #1
   21492:	dded      	ble.n	21470 <nrf_inbuilt_key_init+0x48>
   21494:	a803      	add	r0, sp, #12
   21496:	2202      	movs	r2, #2
   21498:	4905      	ldr	r1, [pc, #20]	; (214b0 <nrf_inbuilt_key_init+0x88>)
   2149a:	f009 fc3d 	bl	2ad18 <strncmp>
   2149e:	2800      	cmp	r0, #0
   214a0:	d0e7      	beq.n	21472 <nrf_inbuilt_key_init+0x4a>
   214a2:	e7e5      	b.n	21470 <nrf_inbuilt_key_init+0x48>
   214a4:	2002d868 	.word	0x2002d868
   214a8:	2002d864 	.word	0x2002d864
   214ac:	00033ac4 	.word	0x00033ac4
   214b0:	00033ad0 	.word	0x00033ad0

000214b4 <nrf_inbuilt_key_deinit>:
   214b4:	b510      	push	{r4, lr}
   214b6:	4c05      	ldr	r4, [pc, #20]	; (214cc <nrf_inbuilt_key_deinit+0x18>)
   214b8:	6820      	ldr	r0, [r4, #0]
   214ba:	2800      	cmp	r0, #0
   214bc:	db01      	blt.n	214c2 <nrf_inbuilt_key_deinit+0xe>
   214be:	f7fe fd27 	bl	1ff10 <at_interface_close>
   214c2:	f04f 33ff 	mov.w	r3, #4294967295
   214c6:	2000      	movs	r0, #0
   214c8:	6023      	str	r3, [r4, #0]
   214ca:	bd10      	pop	{r4, pc}
   214cc:	2002d864 	.word	0x2002d864

000214d0 <ipc_trace_init>:
   214d0:	4b01      	ldr	r3, [pc, #4]	; (214d8 <ipc_trace_init+0x8>)
   214d2:	6018      	str	r0, [r3, #0]
   214d4:	4770      	bx	lr
   214d6:	bf00      	nop
   214d8:	2002313c 	.word	0x2002313c

000214dc <bsd_os_trace_irq_handler>:
   214dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   214de:	4b6c      	ldr	r3, [pc, #432]	; (21690 <bsd_os_trace_irq_handler+0x1b4>)
   214e0:	b083      	sub	sp, #12
   214e2:	781b      	ldrb	r3, [r3, #0]
   214e4:	2b00      	cmp	r3, #0
   214e6:	f000 80ad 	beq.w	21644 <bsd_os_trace_irq_handler+0x168>
   214ea:	4b6a      	ldr	r3, [pc, #424]	; (21694 <bsd_os_trace_irq_handler+0x1b8>)
   214ec:	681c      	ldr	r4, [r3, #0]
   214ee:	68a2      	ldr	r2, [r4, #8]
   214f0:	6863      	ldr	r3, [r4, #4]
   214f2:	429a      	cmp	r2, r3
   214f4:	d02d      	beq.n	21552 <bsd_os_trace_irq_handler+0x76>
   214f6:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   214fa:	f8ad 3000 	strh.w	r3, [sp]
   214fe:	7823      	ldrb	r3, [r4, #0]
   21500:	466e      	mov	r6, sp
   21502:	f88d 3004 	strb.w	r3, [sp, #4]
   21506:	6863      	ldr	r3, [r4, #4]
   21508:	2105      	movs	r1, #5
   2150a:	429a      	cmp	r2, r3
   2150c:	bf2a      	itet	cs
   2150e:	6927      	ldrcs	r7, [r4, #16]
   21510:	1a9f      	subcc	r7, r3, r2
   21512:	1abf      	subcs	r7, r7, r2
   21514:	429a      	cmp	r2, r3
   21516:	bf94      	ite	ls
   21518:	2500      	movls	r5, #0
   2151a:	68e5      	ldrhi	r5, [r4, #12]
   2151c:	b2bf      	uxth	r7, r7
   2151e:	bf88      	it	hi
   21520:	1b5b      	subhi	r3, r3, r5
   21522:	4630      	mov	r0, r6
   21524:	bf88      	it	hi
   21526:	b29d      	uxthhi	r5, r3
   21528:	f8ad 7002 	strh.w	r7, [sp, #2]
   2152c:	f00d fcc0 	bl	2eeb0 <bsd_os_trace_put>
   21530:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   21534:	68a0      	ldr	r0, [r4, #8]
   21536:	f00d fcbb 	bl	2eeb0 <bsd_os_trace_put>
   2153a:	68a3      	ldr	r3, [r4, #8]
   2153c:	6922      	ldr	r2, [r4, #16]
   2153e:	441f      	add	r7, r3
   21540:	4297      	cmp	r7, r2
   21542:	bf08      	it	eq
   21544:	68e3      	ldreq	r3, [r4, #12]
   21546:	60a7      	str	r7, [r4, #8]
   21548:	bf08      	it	eq
   2154a:	60a3      	streq	r3, [r4, #8]
   2154c:	2d00      	cmp	r5, #0
   2154e:	f040 808d 	bne.w	2166c <bsd_os_trace_irq_handler+0x190>
   21552:	4b51      	ldr	r3, [pc, #324]	; (21698 <bsd_os_trace_irq_handler+0x1bc>)
   21554:	681c      	ldr	r4, [r3, #0]
   21556:	68a2      	ldr	r2, [r4, #8]
   21558:	6863      	ldr	r3, [r4, #4]
   2155a:	429a      	cmp	r2, r3
   2155c:	d02c      	beq.n	215b8 <bsd_os_trace_irq_handler+0xdc>
   2155e:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   21562:	f8ad 3000 	strh.w	r3, [sp]
   21566:	7823      	ldrb	r3, [r4, #0]
   21568:	466e      	mov	r6, sp
   2156a:	f88d 3004 	strb.w	r3, [sp, #4]
   2156e:	6863      	ldr	r3, [r4, #4]
   21570:	2105      	movs	r1, #5
   21572:	429a      	cmp	r2, r3
   21574:	bf2a      	itet	cs
   21576:	6927      	ldrcs	r7, [r4, #16]
   21578:	1a9f      	subcc	r7, r3, r2
   2157a:	1abf      	subcs	r7, r7, r2
   2157c:	429a      	cmp	r2, r3
   2157e:	bf94      	ite	ls
   21580:	2500      	movls	r5, #0
   21582:	68e5      	ldrhi	r5, [r4, #12]
   21584:	b2bf      	uxth	r7, r7
   21586:	bf88      	it	hi
   21588:	1b5b      	subhi	r3, r3, r5
   2158a:	4630      	mov	r0, r6
   2158c:	bf88      	it	hi
   2158e:	b29d      	uxthhi	r5, r3
   21590:	f8ad 7002 	strh.w	r7, [sp, #2]
   21594:	f00d fc8c 	bl	2eeb0 <bsd_os_trace_put>
   21598:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2159c:	68a0      	ldr	r0, [r4, #8]
   2159e:	f00d fc87 	bl	2eeb0 <bsd_os_trace_put>
   215a2:	68a3      	ldr	r3, [r4, #8]
   215a4:	6922      	ldr	r2, [r4, #16]
   215a6:	441f      	add	r7, r3
   215a8:	4297      	cmp	r7, r2
   215aa:	bf08      	it	eq
   215ac:	68e3      	ldreq	r3, [r4, #12]
   215ae:	60a7      	str	r7, [r4, #8]
   215b0:	bf08      	it	eq
   215b2:	60a3      	streq	r3, [r4, #8]
   215b4:	2d00      	cmp	r5, #0
   215b6:	d148      	bne.n	2164a <bsd_os_trace_irq_handler+0x16e>
   215b8:	4b38      	ldr	r3, [pc, #224]	; (2169c <bsd_os_trace_irq_handler+0x1c0>)
   215ba:	681c      	ldr	r4, [r3, #0]
   215bc:	68a2      	ldr	r2, [r4, #8]
   215be:	6863      	ldr	r3, [r4, #4]
   215c0:	429a      	cmp	r2, r3
   215c2:	d02b      	beq.n	2161c <bsd_os_trace_irq_handler+0x140>
   215c4:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   215c8:	f8ad 3000 	strh.w	r3, [sp]
   215cc:	7823      	ldrb	r3, [r4, #0]
   215ce:	466e      	mov	r6, sp
   215d0:	f88d 3004 	strb.w	r3, [sp, #4]
   215d4:	6863      	ldr	r3, [r4, #4]
   215d6:	2105      	movs	r1, #5
   215d8:	429a      	cmp	r2, r3
   215da:	bf2a      	itet	cs
   215dc:	6927      	ldrcs	r7, [r4, #16]
   215de:	1a9f      	subcc	r7, r3, r2
   215e0:	1abf      	subcs	r7, r7, r2
   215e2:	429a      	cmp	r2, r3
   215e4:	bf94      	ite	ls
   215e6:	2500      	movls	r5, #0
   215e8:	68e5      	ldrhi	r5, [r4, #12]
   215ea:	b2bf      	uxth	r7, r7
   215ec:	bf88      	it	hi
   215ee:	1b5b      	subhi	r3, r3, r5
   215f0:	4630      	mov	r0, r6
   215f2:	bf88      	it	hi
   215f4:	b29d      	uxthhi	r5, r3
   215f6:	f8ad 7002 	strh.w	r7, [sp, #2]
   215fa:	f00d fc59 	bl	2eeb0 <bsd_os_trace_put>
   215fe:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   21602:	68a0      	ldr	r0, [r4, #8]
   21604:	f00d fc54 	bl	2eeb0 <bsd_os_trace_put>
   21608:	68a3      	ldr	r3, [r4, #8]
   2160a:	6922      	ldr	r2, [r4, #16]
   2160c:	441f      	add	r7, r3
   2160e:	4297      	cmp	r7, r2
   21610:	bf08      	it	eq
   21612:	68e3      	ldreq	r3, [r4, #12]
   21614:	60a7      	str	r7, [r4, #8]
   21616:	bf08      	it	eq
   21618:	60a3      	streq	r3, [r4, #8]
   2161a:	b90d      	cbnz	r5, 21620 <bsd_os_trace_irq_handler+0x144>
   2161c:	b003      	add	sp, #12
   2161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21620:	4630      	mov	r0, r6
   21622:	2105      	movs	r1, #5
   21624:	f8ad 5002 	strh.w	r5, [sp, #2]
   21628:	f00d fc42 	bl	2eeb0 <bsd_os_trace_put>
   2162c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   21630:	68e0      	ldr	r0, [r4, #12]
   21632:	f00d fc3d 	bl	2eeb0 <bsd_os_trace_put>
   21636:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2163a:	68e3      	ldr	r3, [r4, #12]
   2163c:	4413      	add	r3, r2
   2163e:	60a3      	str	r3, [r4, #8]
   21640:	b003      	add	sp, #12
   21642:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21644:	f7f4 fc2e 	bl	15ea4 <bsd_os_trace_irq_clear>
   21648:	e74f      	b.n	214ea <bsd_os_trace_irq_handler+0xe>
   2164a:	2105      	movs	r1, #5
   2164c:	4630      	mov	r0, r6
   2164e:	f8ad 5002 	strh.w	r5, [sp, #2]
   21652:	f00d fc2d 	bl	2eeb0 <bsd_os_trace_put>
   21656:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2165a:	68e0      	ldr	r0, [r4, #12]
   2165c:	f00d fc28 	bl	2eeb0 <bsd_os_trace_put>
   21660:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   21664:	68e3      	ldr	r3, [r4, #12]
   21666:	4413      	add	r3, r2
   21668:	60a3      	str	r3, [r4, #8]
   2166a:	e7a5      	b.n	215b8 <bsd_os_trace_irq_handler+0xdc>
   2166c:	2105      	movs	r1, #5
   2166e:	4630      	mov	r0, r6
   21670:	f8ad 5002 	strh.w	r5, [sp, #2]
   21674:	f00d fc1c 	bl	2eeb0 <bsd_os_trace_put>
   21678:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2167c:	68e0      	ldr	r0, [r4, #12]
   2167e:	f00d fc17 	bl	2eeb0 <bsd_os_trace_put>
   21682:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   21686:	68e3      	ldr	r3, [r4, #12]
   21688:	4413      	add	r3, r2
   2168a:	60a3      	str	r3, [r4, #8]
   2168c:	e761      	b.n	21552 <bsd_os_trace_irq_handler+0x76>
   2168e:	bf00      	nop
   21690:	20027d9f 	.word	0x20027d9f
   21694:	20023138 	.word	0x20023138
   21698:	20023130 	.word	0x20023130
   2169c:	20023134 	.word	0x20023134

000216a0 <ipc_trace_handle>:
   216a0:	2200      	movs	r2, #0
   216a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216a6:	4bb0      	ldr	r3, [pc, #704]	; (21968 <ipc_trace_handle+0x2c8>)
   216a8:	b083      	sub	sp, #12
   216aa:	681b      	ldr	r3, [r3, #0]
   216ac:	6919      	ldr	r1, [r3, #16]
   216ae:	695c      	ldr	r4, [r3, #20]
   216b0:	7c18      	ldrb	r0, [r3, #16]
   216b2:	741a      	strb	r2, [r3, #16]
   216b4:	7c58      	ldrb	r0, [r3, #17]
   216b6:	745a      	strb	r2, [r3, #17]
   216b8:	7c98      	ldrb	r0, [r3, #18]
   216ba:	749a      	strb	r2, [r3, #18]
   216bc:	7cd8      	ldrb	r0, [r3, #19]
   216be:	74da      	strb	r2, [r3, #19]
   216c0:	7d18      	ldrb	r0, [r3, #20]
   216c2:	751a      	strb	r2, [r3, #20]
   216c4:	7d58      	ldrb	r0, [r3, #21]
   216c6:	755a      	strb	r2, [r3, #21]
   216c8:	7d98      	ldrb	r0, [r3, #22]
   216ca:	759a      	strb	r2, [r3, #22]
   216cc:	7dd8      	ldrb	r0, [r3, #23]
   216ce:	75da      	strb	r2, [r3, #23]
   216d0:	b1b9      	cbz	r1, 21702 <ipc_trace_handle+0x62>
   216d2:	3901      	subs	r1, #1
   216d4:	2903      	cmp	r1, #3
   216d6:	d814      	bhi.n	21702 <ipc_trace_handle+0x62>
   216d8:	e8df f011 	tbh	[pc, r1, lsl #1]
   216dc:	010300d6 	.word	0x010300d6
   216e0:	00160004 	.word	0x00160004
   216e4:	2501      	movs	r5, #1
   216e6:	2003      	movs	r0, #3
   216e8:	2200      	movs	r2, #0
   216ea:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   216ee:	4c9f      	ldr	r4, [pc, #636]	; (2196c <ipc_trace_handle+0x2cc>)
   216f0:	7025      	strb	r5, [r4, #0]
   216f2:	7a1c      	ldrb	r4, [r3, #8]
   216f4:	7218      	strb	r0, [r3, #8]
   216f6:	7a58      	ldrb	r0, [r3, #9]
   216f8:	725a      	strb	r2, [r3, #9]
   216fa:	7a98      	ldrb	r0, [r3, #10]
   216fc:	729a      	strb	r2, [r3, #10]
   216fe:	7ada      	ldrb	r2, [r3, #11]
   21700:	72d9      	strb	r1, [r3, #11]
   21702:	b003      	add	sp, #12
   21704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21708:	2104      	movs	r1, #4
   2170a:	2200      	movs	r2, #0
   2170c:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   21710:	7a1c      	ldrb	r4, [r3, #8]
   21712:	7219      	strb	r1, [r3, #8]
   21714:	7a59      	ldrb	r1, [r3, #9]
   21716:	725a      	strb	r2, [r3, #9]
   21718:	4994      	ldr	r1, [pc, #592]	; (2196c <ipc_trace_handle+0x2cc>)
   2171a:	7a9c      	ldrb	r4, [r3, #10]
   2171c:	729a      	strb	r2, [r3, #10]
   2171e:	7adc      	ldrb	r4, [r3, #11]
   21720:	72d8      	strb	r0, [r3, #11]
   21722:	700a      	strb	r2, [r1, #0]
   21724:	780b      	ldrb	r3, [r1, #0]
   21726:	2b00      	cmp	r3, #0
   21728:	f000 8117 	beq.w	2195a <ipc_trace_handle+0x2ba>
   2172c:	4b90      	ldr	r3, [pc, #576]	; (21970 <ipc_trace_handle+0x2d0>)
   2172e:	681c      	ldr	r4, [r3, #0]
   21730:	68a2      	ldr	r2, [r4, #8]
   21732:	6863      	ldr	r3, [r4, #4]
   21734:	429a      	cmp	r2, r3
   21736:	d02d      	beq.n	21794 <ipc_trace_handle+0xf4>
   21738:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   2173c:	f8ad 3000 	strh.w	r3, [sp]
   21740:	7823      	ldrb	r3, [r4, #0]
   21742:	466e      	mov	r6, sp
   21744:	f88d 3004 	strb.w	r3, [sp, #4]
   21748:	6863      	ldr	r3, [r4, #4]
   2174a:	2105      	movs	r1, #5
   2174c:	429a      	cmp	r2, r3
   2174e:	bf2a      	itet	cs
   21750:	6927      	ldrcs	r7, [r4, #16]
   21752:	1a9f      	subcc	r7, r3, r2
   21754:	1abf      	subcs	r7, r7, r2
   21756:	429a      	cmp	r2, r3
   21758:	bf94      	ite	ls
   2175a:	2500      	movls	r5, #0
   2175c:	68e5      	ldrhi	r5, [r4, #12]
   2175e:	b2bf      	uxth	r7, r7
   21760:	bf88      	it	hi
   21762:	1b5b      	subhi	r3, r3, r5
   21764:	4630      	mov	r0, r6
   21766:	bf88      	it	hi
   21768:	b29d      	uxthhi	r5, r3
   2176a:	f8ad 7002 	strh.w	r7, [sp, #2]
   2176e:	f00d fb9f 	bl	2eeb0 <bsd_os_trace_put>
   21772:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   21776:	68a0      	ldr	r0, [r4, #8]
   21778:	f00d fb9a 	bl	2eeb0 <bsd_os_trace_put>
   2177c:	68a3      	ldr	r3, [r4, #8]
   2177e:	6922      	ldr	r2, [r4, #16]
   21780:	441f      	add	r7, r3
   21782:	4297      	cmp	r7, r2
   21784:	bf08      	it	eq
   21786:	68e3      	ldreq	r3, [r4, #12]
   21788:	60a7      	str	r7, [r4, #8]
   2178a:	bf08      	it	eq
   2178c:	60a3      	streq	r3, [r4, #8]
   2178e:	2d00      	cmp	r5, #0
   21790:	f040 80d2 	bne.w	21938 <ipc_trace_handle+0x298>
   21794:	4b77      	ldr	r3, [pc, #476]	; (21974 <ipc_trace_handle+0x2d4>)
   21796:	681c      	ldr	r4, [r3, #0]
   21798:	68a2      	ldr	r2, [r4, #8]
   2179a:	6863      	ldr	r3, [r4, #4]
   2179c:	429a      	cmp	r2, r3
   2179e:	d02d      	beq.n	217fc <ipc_trace_handle+0x15c>
   217a0:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   217a4:	f8ad 3000 	strh.w	r3, [sp]
   217a8:	7823      	ldrb	r3, [r4, #0]
   217aa:	466e      	mov	r6, sp
   217ac:	f88d 3004 	strb.w	r3, [sp, #4]
   217b0:	6863      	ldr	r3, [r4, #4]
   217b2:	2105      	movs	r1, #5
   217b4:	429a      	cmp	r2, r3
   217b6:	bf2a      	itet	cs
   217b8:	6927      	ldrcs	r7, [r4, #16]
   217ba:	1a9f      	subcc	r7, r3, r2
   217bc:	1abf      	subcs	r7, r7, r2
   217be:	429a      	cmp	r2, r3
   217c0:	bf94      	ite	ls
   217c2:	2500      	movls	r5, #0
   217c4:	68e5      	ldrhi	r5, [r4, #12]
   217c6:	b2bf      	uxth	r7, r7
   217c8:	bf88      	it	hi
   217ca:	1b5b      	subhi	r3, r3, r5
   217cc:	4630      	mov	r0, r6
   217ce:	bf88      	it	hi
   217d0:	b29d      	uxthhi	r5, r3
   217d2:	f8ad 7002 	strh.w	r7, [sp, #2]
   217d6:	f00d fb6b 	bl	2eeb0 <bsd_os_trace_put>
   217da:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   217de:	68a0      	ldr	r0, [r4, #8]
   217e0:	f00d fb66 	bl	2eeb0 <bsd_os_trace_put>
   217e4:	68a3      	ldr	r3, [r4, #8]
   217e6:	6922      	ldr	r2, [r4, #16]
   217e8:	441f      	add	r7, r3
   217ea:	4297      	cmp	r7, r2
   217ec:	bf08      	it	eq
   217ee:	68e3      	ldreq	r3, [r4, #12]
   217f0:	60a7      	str	r7, [r4, #8]
   217f2:	bf08      	it	eq
   217f4:	60a3      	streq	r3, [r4, #8]
   217f6:	2d00      	cmp	r5, #0
   217f8:	f040 808d 	bne.w	21916 <ipc_trace_handle+0x276>
   217fc:	4b5e      	ldr	r3, [pc, #376]	; (21978 <ipc_trace_handle+0x2d8>)
   217fe:	681c      	ldr	r4, [r3, #0]
   21800:	68a2      	ldr	r2, [r4, #8]
   21802:	6863      	ldr	r3, [r4, #4]
   21804:	429a      	cmp	r2, r3
   21806:	f43f af7c 	beq.w	21702 <ipc_trace_handle+0x62>
   2180a:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   2180e:	f8ad 3000 	strh.w	r3, [sp]
   21812:	7823      	ldrb	r3, [r4, #0]
   21814:	466e      	mov	r6, sp
   21816:	f88d 3004 	strb.w	r3, [sp, #4]
   2181a:	6863      	ldr	r3, [r4, #4]
   2181c:	2105      	movs	r1, #5
   2181e:	429a      	cmp	r2, r3
   21820:	bf2a      	itet	cs
   21822:	6927      	ldrcs	r7, [r4, #16]
   21824:	1a9f      	subcc	r7, r3, r2
   21826:	1abf      	subcs	r7, r7, r2
   21828:	429a      	cmp	r2, r3
   2182a:	bf94      	ite	ls
   2182c:	2500      	movls	r5, #0
   2182e:	68e5      	ldrhi	r5, [r4, #12]
   21830:	b2bf      	uxth	r7, r7
   21832:	bf88      	it	hi
   21834:	1b5b      	subhi	r3, r3, r5
   21836:	4630      	mov	r0, r6
   21838:	bf88      	it	hi
   2183a:	b29d      	uxthhi	r5, r3
   2183c:	f8ad 7002 	strh.w	r7, [sp, #2]
   21840:	f00d fb36 	bl	2eeb0 <bsd_os_trace_put>
   21844:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   21848:	68a0      	ldr	r0, [r4, #8]
   2184a:	f00d fb31 	bl	2eeb0 <bsd_os_trace_put>
   2184e:	68a3      	ldr	r3, [r4, #8]
   21850:	6922      	ldr	r2, [r4, #16]
   21852:	441f      	add	r7, r3
   21854:	4297      	cmp	r7, r2
   21856:	bf08      	it	eq
   21858:	68e3      	ldreq	r3, [r4, #12]
   2185a:	60a7      	str	r7, [r4, #8]
   2185c:	bf08      	it	eq
   2185e:	60a3      	streq	r3, [r4, #8]
   21860:	2d00      	cmp	r5, #0
   21862:	f43f af4e 	beq.w	21702 <ipc_trace_handle+0x62>
   21866:	2105      	movs	r1, #5
   21868:	4630      	mov	r0, r6
   2186a:	f8ad 5002 	strh.w	r5, [sp, #2]
   2186e:	f00d fb1f 	bl	2eeb0 <bsd_os_trace_put>
   21872:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   21876:	68e0      	ldr	r0, [r4, #12]
   21878:	f00d fb1a 	bl	2eeb0 <bsd_os_trace_put>
   2187c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   21880:	68e3      	ldr	r3, [r4, #12]
   21882:	4413      	add	r3, r2
   21884:	60a3      	str	r3, [r4, #8]
   21886:	e73c      	b.n	21702 <ipc_trace_handle+0x62>
   21888:	4a38      	ldr	r2, [pc, #224]	; (2196c <ipc_trace_handle+0x2cc>)
   2188a:	7811      	ldrb	r1, [r2, #0]
   2188c:	b109      	cbz	r1, 21892 <ipc_trace_handle+0x1f2>
   2188e:	2100      	movs	r1, #0
   21890:	7011      	strb	r1, [r2, #0]
   21892:	68a5      	ldr	r5, [r4, #8]
   21894:	2d00      	cmp	r5, #0
   21896:	d039      	beq.n	2190c <ipc_trace_handle+0x26c>
   21898:	f04f 0c00 	mov.w	ip, #0
   2189c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 21974 <ipc_trace_handle+0x2d4>
   218a0:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 21970 <ipc_trace_handle+0x2d0>
   218a4:	4934      	ldr	r1, [pc, #208]	; (21978 <ipc_trace_handle+0x2d8>)
   218a6:	46e1      	mov	r9, ip
   218a8:	4666      	mov	r6, ip
   218aa:	4662      	mov	r2, ip
   218ac:	f8d1 e000 	ldr.w	lr, [r1]
   218b0:	f8da 8000 	ldr.w	r8, [sl]
   218b4:	f8db 7000 	ldr.w	r7, [fp]
   218b8:	e008      	b.n	218cc <ipc_trace_handle+0x22c>
   218ba:	2963      	cmp	r1, #99	; 0x63
   218bc:	d016      	beq.n	218ec <ipc_trace_handle+0x24c>
   218be:	2961      	cmp	r1, #97	; 0x61
   218c0:	bf04      	itt	eq
   218c2:	4607      	moveq	r7, r0
   218c4:	2601      	moveq	r6, #1
   218c6:	3201      	adds	r2, #1
   218c8:	42aa      	cmp	r2, r5
   218ca:	d013      	beq.n	218f4 <ipc_trace_handle+0x254>
   218cc:	1c91      	adds	r1, r2, #2
   218ce:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   218d2:	6848      	ldr	r0, [r1, #4]
   218d4:	7801      	ldrb	r1, [r0, #0]
   218d6:	2962      	cmp	r1, #98	; 0x62
   218d8:	d1ef      	bne.n	218ba <ipc_trace_handle+0x21a>
   218da:	4680      	mov	r8, r0
   218dc:	f04f 0901 	mov.w	r9, #1
   218e0:	e7f1      	b.n	218c6 <ipc_trace_handle+0x226>
   218e2:	f7f4 fad7 	bl	15e94 <bsd_os_trace_irq_set>
   218e6:	b003      	add	sp, #12
   218e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   218ec:	4686      	mov	lr, r0
   218ee:	f04f 0c01 	mov.w	ip, #1
   218f2:	e7e8      	b.n	218c6 <ipc_trace_handle+0x226>
   218f4:	bba6      	cbnz	r6, 21960 <ipc_trace_handle+0x2c0>
   218f6:	f1b9 0f00 	cmp.w	r9, #0
   218fa:	d001      	beq.n	21900 <ipc_trace_handle+0x260>
   218fc:	f8ca 8000 	str.w	r8, [sl]
   21900:	f1bc 0f00 	cmp.w	ip, #0
   21904:	d002      	beq.n	2190c <ipc_trace_handle+0x26c>
   21906:	4a1c      	ldr	r2, [pc, #112]	; (21978 <ipc_trace_handle+0x2d8>)
   21908:	f8c2 e000 	str.w	lr, [r2]
   2190c:	2001      	movs	r0, #1
   2190e:	2200      	movs	r2, #0
   21910:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   21914:	e6ed      	b.n	216f2 <ipc_trace_handle+0x52>
   21916:	2105      	movs	r1, #5
   21918:	4630      	mov	r0, r6
   2191a:	f8ad 5002 	strh.w	r5, [sp, #2]
   2191e:	f00d fac7 	bl	2eeb0 <bsd_os_trace_put>
   21922:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   21926:	68e0      	ldr	r0, [r4, #12]
   21928:	f00d fac2 	bl	2eeb0 <bsd_os_trace_put>
   2192c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   21930:	68e3      	ldr	r3, [r4, #12]
   21932:	4413      	add	r3, r2
   21934:	60a3      	str	r3, [r4, #8]
   21936:	e761      	b.n	217fc <ipc_trace_handle+0x15c>
   21938:	2105      	movs	r1, #5
   2193a:	4630      	mov	r0, r6
   2193c:	f8ad 5002 	strh.w	r5, [sp, #2]
   21940:	f00d fab6 	bl	2eeb0 <bsd_os_trace_put>
   21944:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   21948:	68e0      	ldr	r0, [r4, #12]
   2194a:	f00d fab1 	bl	2eeb0 <bsd_os_trace_put>
   2194e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   21952:	68e3      	ldr	r3, [r4, #12]
   21954:	4413      	add	r3, r2
   21956:	60a3      	str	r3, [r4, #8]
   21958:	e71c      	b.n	21794 <ipc_trace_handle+0xf4>
   2195a:	f7f4 faa3 	bl	15ea4 <bsd_os_trace_irq_clear>
   2195e:	e6e5      	b.n	2172c <ipc_trace_handle+0x8c>
   21960:	f8cb 7000 	str.w	r7, [fp]
   21964:	e7c7      	b.n	218f6 <ipc_trace_handle+0x256>
   21966:	bf00      	nop
   21968:	2002313c 	.word	0x2002313c
   2196c:	20027d9f 	.word	0x20027d9f
   21970:	20023138 	.word	0x20023138
   21974:	20023130 	.word	0x20023130
   21978:	20023134 	.word	0x20023134

0002197c <rpc_trace_coredump_in_progress>:
   2197c:	4b01      	ldr	r3, [pc, #4]	; (21984 <rpc_trace_coredump_in_progress+0x8>)
   2197e:	7818      	ldrb	r0, [r3, #0]
   21980:	4770      	bx	lr
   21982:	bf00      	nop
   21984:	20027d9f 	.word	0x20027d9f

00021988 <transport_reset>:
   21988:	2000      	movs	r0, #0
   2198a:	4770      	bx	lr

0002198c <transport_data_free>:
   2198c:	4b0b      	ldr	r3, [pc, #44]	; (219bc <transport_data_free+0x30>)
   2198e:	e9d3 2300 	ldrd	r2, r3, [r3]
   21992:	4413      	add	r3, r2
   21994:	4298      	cmp	r0, r3
   21996:	d20d      	bcs.n	219b4 <transport_data_free+0x28>
   21998:	4282      	cmp	r2, r0
   2199a:	d80b      	bhi.n	219b4 <transport_data_free+0x28>
   2199c:	b510      	push	{r4, lr}
   2199e:	4604      	mov	r4, r0
   219a0:	f000 fdea 	bl	22578 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   219a4:	b140      	cbz	r0, 219b8 <transport_data_free+0x2c>
   219a6:	4a06      	ldr	r2, [pc, #24]	; (219c0 <transport_data_free+0x34>)
   219a8:	6084      	str	r4, [r0, #8]
   219aa:	6002      	str	r2, [r0, #0]
   219ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   219b0:	f000 bd2a 	b.w	22408 <rpc_transport_ipc_tx_send>
   219b4:	f7f7 bc2c 	b.w	19210 <nrf_shared_free>
   219b8:	bd10      	pop	{r4, pc}
   219ba:	bf00      	nop
   219bc:	20023140 	.word	0x20023140
   219c0:	00020001 	.word	0x00020001

000219c4 <rpc_transport_ipc_init>:
   219c4:	2800      	cmp	r0, #0
   219c6:	d02b      	beq.n	21a20 <rpc_transport_ipc_init+0x5c>
   219c8:	b530      	push	{r4, r5, lr}
   219ca:	b089      	sub	sp, #36	; 0x24
   219cc:	aa01      	add	r2, sp, #4
   219ce:	4669      	mov	r1, sp
   219d0:	4604      	mov	r4, r0
   219d2:	f000 fc2f 	bl	22234 <rpc_transport_ipc_tx_init>
   219d6:	4603      	mov	r3, r0
   219d8:	b140      	cbz	r0, 219ec <rpc_transport_ipc_init+0x28>
   219da:	4a13      	ldr	r2, [pc, #76]	; (21a28 <rpc_transport_ipc_init+0x64>)
   219dc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   219e0:	c803      	ldmia	r0, {r0, r1}
   219e2:	e882 0003 	stmia.w	r2, {r0, r1}
   219e6:	4618      	mov	r0, r3
   219e8:	b009      	add	sp, #36	; 0x24
   219ea:	bd30      	pop	{r4, r5, pc}
   219ec:	e9dd 1200 	ldrd	r1, r2, [sp]
   219f0:	4620      	mov	r0, r4
   219f2:	f000 f857 	bl	21aa4 <rpc_transport_ipc_rx_init>
   219f6:	4603      	mov	r3, r0
   219f8:	2800      	cmp	r0, #0
   219fa:	d1ee      	bne.n	219da <rpc_transport_ipc_init+0x16>
   219fc:	4b0b      	ldr	r3, [pc, #44]	; (21a2c <rpc_transport_ipc_init+0x68>)
   219fe:	490c      	ldr	r1, [pc, #48]	; (21a30 <rpc_transport_ipc_init+0x6c>)
   21a00:	480c      	ldr	r0, [pc, #48]	; (21a34 <rpc_transport_ipc_init+0x70>)
   21a02:	4a0d      	ldr	r2, [pc, #52]	; (21a38 <rpc_transport_ipc_init+0x74>)
   21a04:	9303      	str	r3, [sp, #12]
   21a06:	4d0d      	ldr	r5, [pc, #52]	; (21a3c <rpc_transport_ipc_init+0x78>)
   21a08:	4b0d      	ldr	r3, [pc, #52]	; (21a40 <rpc_transport_ipc_init+0x7c>)
   21a0a:	9104      	str	r1, [sp, #16]
   21a0c:	9005      	str	r0, [sp, #20]
   21a0e:	490d      	ldr	r1, [pc, #52]	; (21a44 <rpc_transport_ipc_init+0x80>)
   21a10:	a802      	add	r0, sp, #8
   21a12:	9307      	str	r3, [sp, #28]
   21a14:	9506      	str	r5, [sp, #24]
   21a16:	9202      	str	r2, [sp, #8]
   21a18:	f003 fc78 	bl	2530c <rpc_transport_register>
   21a1c:	4603      	mov	r3, r0
   21a1e:	e7dc      	b.n	219da <rpc_transport_ipc_init+0x16>
   21a20:	230e      	movs	r3, #14
   21a22:	4618      	mov	r0, r3
   21a24:	4770      	bx	lr
   21a26:	bf00      	nop
   21a28:	20023140 	.word	0x20023140
   21a2c:	00022509 	.word	0x00022509
   21a30:	000225d9 	.word	0x000225d9
   21a34:	0002209d 	.word	0x0002209d
   21a38:	00022409 	.word	0x00022409
   21a3c:	0002198d 	.word	0x0002198d
   21a40:	00021989 	.word	0x00021989
   21a44:	20023148 	.word	0x20023148

00021a48 <rpc_transport_rx_handle>:
   21a48:	b160      	cbz	r0, 21a64 <rpc_transport_rx_handle+0x1c>
   21a4a:	b508      	push	{r3, lr}
   21a4c:	6843      	ldr	r3, [r0, #4]
   21a4e:	b2db      	uxtb	r3, r3
   21a50:	2b02      	cmp	r3, #2
   21a52:	d00e      	beq.n	21a72 <rpc_transport_rx_handle+0x2a>
   21a54:	6803      	ldr	r3, [r0, #0]
   21a56:	0c1b      	lsrs	r3, r3, #16
   21a58:	2b02      	cmp	r3, #2
   21a5a:	d005      	beq.n	21a68 <rpc_transport_rx_handle+0x20>
   21a5c:	2b04      	cmp	r3, #4
   21a5e:	d00e      	beq.n	21a7e <rpc_transport_rx_handle+0x36>
   21a60:	2000      	movs	r0, #0
   21a62:	bd08      	pop	{r3, pc}
   21a64:	2000      	movs	r0, #0
   21a66:	4770      	bx	lr
   21a68:	6880      	ldr	r0, [r0, #8]
   21a6a:	f7f7 fbd1 	bl	19210 <nrf_shared_free>
   21a6e:	2000      	movs	r0, #0
   21a70:	bd08      	pop	{r3, pc}
   21a72:	4601      	mov	r1, r0
   21a74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   21a78:	4803      	ldr	r0, [pc, #12]	; (21a88 <rpc_transport_rx_handle+0x40>)
   21a7a:	f003 bb31 	b.w	250e0 <rpc_transport_input>
   21a7e:	4802      	ldr	r0, [pc, #8]	; (21a88 <rpc_transport_rx_handle+0x40>)
   21a80:	f003 fca4 	bl	253cc <rpc_transport_unregister>
   21a84:	2000      	movs	r0, #0
   21a86:	bd08      	pop	{r3, pc}
   21a88:	20023148 	.word	0x20023148

00021a8c <rpc_transport_ipc_shutdown>:
   21a8c:	b508      	push	{r3, lr}
   21a8e:	f000 fdad 	bl	225ec <rpc_transport_ipc_tx_suspend>
   21a92:	f000 fb39 	bl	22108 <rpc_transport_ipc_rx_suspend>
   21a96:	f000 fdaf 	bl	225f8 <rpc_transport_ipc_tx_shutdown>
   21a9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   21a9e:	f000 bb53 	b.w	22148 <rpc_transport_ipc_rx_shutdown>
   21aa2:	bf00      	nop

00021aa4 <rpc_transport_ipc_rx_init>:
   21aa4:	2800      	cmp	r0, #0
   21aa6:	f000 80ff 	beq.w	21ca8 <rpc_transport_ipc_rx_init+0x204>
   21aaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21aae:	6805      	ldr	r5, [r0, #0]
   21ab0:	b095      	sub	sp, #84	; 0x54
   21ab2:	2d00      	cmp	r5, #0
   21ab4:	f000 80ee 	beq.w	21c94 <rpc_transport_ipc_rx_init+0x1f0>
   21ab8:	6883      	ldr	r3, [r0, #8]
   21aba:	2b00      	cmp	r3, #0
   21abc:	f000 80ea 	beq.w	21c94 <rpc_transport_ipc_rx_init+0x1f0>
   21ac0:	6907      	ldr	r7, [r0, #16]
   21ac2:	2f00      	cmp	r7, #0
   21ac4:	f000 80e6 	beq.w	21c94 <rpc_transport_ipc_rx_init+0x1f0>
   21ac8:	6a84      	ldr	r4, [r0, #40]	; 0x28
   21aca:	2c00      	cmp	r4, #0
   21acc:	f000 80e2 	beq.w	21c94 <rpc_transport_ipc_rx_init+0x1f0>
   21ad0:	6844      	ldr	r4, [r0, #4]
   21ad2:	2c1b      	cmp	r4, #27
   21ad4:	f240 80e3 	bls.w	21c9e <rpc_transport_ipc_rx_init+0x1fa>
   21ad8:	68c4      	ldr	r4, [r0, #12]
   21ada:	2c0b      	cmp	r4, #11
   21adc:	f240 80df 	bls.w	21c9e <rpc_transport_ipc_rx_init+0x1fa>
   21ae0:	f8d0 e014 	ldr.w	lr, [r0, #20]
   21ae4:	f1be 0f17 	cmp.w	lr, #23
   21ae8:	f240 80d9 	bls.w	21c9e <rpc_transport_ipc_rx_init+0x1fa>
   21aec:	2600      	movs	r6, #0
   21aee:	4604      	mov	r4, r0
   21af0:	486f      	ldr	r0, [pc, #444]	; (21cb0 <rpc_transport_ipc_rx_init+0x20c>)
   21af2:	e9cd 1200 	strd	r1, r2, [sp]
   21af6:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 21cd0 <rpc_transport_ipc_rx_init+0x22c>
   21afa:	496e      	ldr	r1, [pc, #440]	; (21cb4 <rpc_transport_ipc_rx_init+0x210>)
   21afc:	8006      	strh	r6, [r0, #0]
   21afe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   21b00:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 21cd4 <rpc_transport_ipc_rx_init+0x230>
   21b04:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 21cd8 <rpc_transport_ipc_rx_init+0x234>
   21b08:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 21cdc <rpc_transport_ipc_rx_init+0x238>
   21b0c:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 21ce0 <rpc_transport_ipc_rx_init+0x23c>
   21b10:	4672      	mov	r2, lr
   21b12:	600e      	str	r6, [r1, #0]
   21b14:	f8ca 0000 	str.w	r0, [sl]
   21b18:	4631      	mov	r1, r6
   21b1a:	4638      	mov	r0, r7
   21b1c:	f8cc 6000 	str.w	r6, [ip]
   21b20:	f8cb 3000 	str.w	r3, [fp]
   21b24:	f8c8 6000 	str.w	r6, [r8]
   21b28:	f8c9 6000 	str.w	r6, [r9]
   21b2c:	f008 feda 	bl	2a8e4 <memset>
   21b30:	69e3      	ldr	r3, [r4, #28]
   21b32:	4638      	mov	r0, r7
   21b34:	603b      	str	r3, [r7, #0]
   21b36:	69a3      	ldr	r3, [r4, #24]
   21b38:	607b      	str	r3, [r7, #4]
   21b3a:	f7ff fcc9 	bl	214d0 <ipc_trace_init>
   21b3e:	2201      	movs	r2, #1
   21b40:	f04f 0c04 	mov.w	ip, #4
   21b44:	4b5c      	ldr	r3, [pc, #368]	; (21cb8 <rpc_transport_ipc_rx_init+0x214>)
   21b46:	495d      	ldr	r1, [pc, #372]	; (21cbc <rpc_transport_ipc_rx_init+0x218>)
   21b48:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   21b4c:	6809      	ldr	r1, [r1, #0]
   21b4e:	2080      	movs	r0, #128	; 0x80
   21b50:	9104      	str	r1, [sp, #16]
   21b52:	495b      	ldr	r1, [pc, #364]	; (21cc0 <rpc_transport_ipc_rx_init+0x21c>)
   21b54:	f8dd e010 	ldr.w	lr, [sp, #16]
   21b58:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   21b5c:	6809      	ldr	r1, [r1, #0]
   21b5e:	702e      	strb	r6, [r5, #0]
   21b60:	9103      	str	r1, [sp, #12]
   21b62:	706e      	strb	r6, [r5, #1]
   21b64:	70ee      	strb	r6, [r5, #3]
   21b66:	70aa      	strb	r2, [r5, #2]
   21b68:	9903      	ldr	r1, [sp, #12]
   21b6a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21b6c:	f8db e000 	ldr.w	lr, [fp]
   21b70:	6069      	str	r1, [r5, #4]
   21b72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   21b74:	9c01      	ldr	r4, [sp, #4]
   21b76:	60a9      	str	r1, [r5, #8]
   21b78:	60ec      	str	r4, [r5, #12]
   21b7a:	9c00      	ldr	r4, [sp, #0]
   21b7c:	4951      	ldr	r1, [pc, #324]	; (21cc4 <rpc_transport_ipc_rx_init+0x220>)
   21b7e:	61af      	str	r7, [r5, #24]
   21b80:	f8c5 e014 	str.w	lr, [r5, #20]
   21b84:	612c      	str	r4, [r5, #16]
   21b86:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   21b8a:	680c      	ldr	r4, [r1, #0]
   21b8c:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   21b90:	9405      	str	r4, [sp, #20]
   21b92:	9c05      	ldr	r4, [sp, #20]
   21b94:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   21b98:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   21b9c:	f44f 6780 	mov.w	r7, #1024	; 0x400
   21ba0:	9406      	str	r4, [sp, #24]
   21ba2:	9c06      	ldr	r4, [sp, #24]
   21ba4:	2410      	movs	r4, #16
   21ba6:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   21baa:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   21bae:	4d46      	ldr	r5, [pc, #280]	; (21cc8 <rpc_transport_ipc_rx_init+0x224>)
   21bb0:	9407      	str	r4, [sp, #28]
   21bb2:	9c07      	ldr	r4, [sp, #28]
   21bb4:	2440      	movs	r4, #64	; 0x40
   21bb6:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   21bba:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   21bbe:	9408      	str	r4, [sp, #32]
   21bc0:	9c08      	ldr	r4, [sp, #32]
   21bc2:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   21bc6:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   21bca:	9009      	str	r0, [sp, #36]	; 0x24
   21bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
   21bce:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   21bd2:	6808      	ldr	r0, [r1, #0]
   21bd4:	900a      	str	r0, [sp, #40]	; 0x28
   21bd6:	980a      	ldr	r0, [sp, #40]	; 0x28
   21bd8:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   21bdc:	6888      	ldr	r0, [r1, #8]
   21bde:	900b      	str	r0, [sp, #44]	; 0x2c
   21be0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   21be2:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   21be6:	6908      	ldr	r0, [r1, #16]
   21be8:	900c      	str	r0, [sp, #48]	; 0x30
   21bea:	980c      	ldr	r0, [sp, #48]	; 0x30
   21bec:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   21bf0:	6988      	ldr	r0, [r1, #24]
   21bf2:	900d      	str	r0, [sp, #52]	; 0x34
   21bf4:	980d      	ldr	r0, [sp, #52]	; 0x34
   21bf6:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   21bfa:	69c8      	ldr	r0, [r1, #28]
   21bfc:	f501 7101 	add.w	r1, r1, #516	; 0x204
   21c00:	900e      	str	r0, [sp, #56]	; 0x38
   21c02:	980e      	ldr	r0, [sp, #56]	; 0x38
   21c04:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   21c08:	4310      	orrs	r0, r2
   21c0a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   21c0e:	680c      	ldr	r4, [r1, #0]
   21c10:	482e      	ldr	r0, [pc, #184]	; (21ccc <rpc_transport_ipc_rx_init+0x228>)
   21c12:	940f      	str	r4, [sp, #60]	; 0x3c
   21c14:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   21c16:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   21c1a:	ea44 040c 	orr.w	r4, r4, ip
   21c1e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   21c22:	680c      	ldr	r4, [r1, #0]
   21c24:	9410      	str	r4, [sp, #64]	; 0x40
   21c26:	9c10      	ldr	r4, [sp, #64]	; 0x40
   21c28:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   21c2c:	f044 0410 	orr.w	r4, r4, #16
   21c30:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   21c34:	680c      	ldr	r4, [r1, #0]
   21c36:	9411      	str	r4, [sp, #68]	; 0x44
   21c38:	9c11      	ldr	r4, [sp, #68]	; 0x44
   21c3a:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   21c3e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   21c42:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   21c46:	680c      	ldr	r4, [r1, #0]
   21c48:	9412      	str	r4, [sp, #72]	; 0x48
   21c4a:	9c12      	ldr	r4, [sp, #72]	; 0x48
   21c4c:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   21c50:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   21c54:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   21c58:	f8da 3000 	ldr.w	r3, [sl]
   21c5c:	6809      	ldr	r1, [r1, #0]
   21c5e:	015b      	lsls	r3, r3, #5
   21c60:	9113      	str	r1, [sp, #76]	; 0x4c
   21c62:	b2db      	uxtb	r3, r3
   21c64:	9913      	ldr	r1, [sp, #76]	; 0x4c
   21c66:	f8c8 2000 	str.w	r2, [r8]
   21c6a:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   21c6e:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   21c72:	6047      	str	r7, [r0, #4]
   21c74:	9602      	str	r6, [sp, #8]
   21c76:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   21c7a:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   21c7e:	9302      	str	r3, [sp, #8]
   21c80:	9b02      	ldr	r3, [sp, #8]
   21c82:	f8d8 3000 	ldr.w	r3, [r8]
   21c86:	2b01      	cmp	r3, #1
   21c88:	d0fb      	beq.n	21c82 <rpc_transport_ipc_rx_init+0x1de>
   21c8a:	f8d9 0000 	ldr.w	r0, [r9]
   21c8e:	b015      	add	sp, #84	; 0x54
   21c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c94:	f24c 000e 	movw	r0, #49166	; 0xc00e
   21c98:	b015      	add	sp, #84	; 0x54
   21c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c9e:	f24c 0009 	movw	r0, #49161	; 0xc009
   21ca2:	b015      	add	sp, #84	; 0x54
   21ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ca8:	f24c 000e 	movw	r0, #49166	; 0xc00e
   21cac:	4770      	bx	lr
   21cae:	bf00      	nop
   21cb0:	20027888 	.word	0x20027888
   21cb4:	20023158 	.word	0x20023158
   21cb8:	4002a000 	.word	0x4002a000
   21cbc:	4002a610 	.word	0x4002a610
   21cc0:	4002a614 	.word	0x4002a614
   21cc4:	4002a590 	.word	0x4002a590
   21cc8:	40005000 	.word	0x40005000
   21ccc:	e000e100 	.word	0xe000e100
   21cd0:	20023150 	.word	0x20023150
   21cd4:	2002315c 	.word	0x2002315c
   21cd8:	20023154 	.word	0x20023154
   21cdc:	20023160 	.word	0x20023160
   21ce0:	2002314c 	.word	0x2002314c

00021ce4 <IPC_IRQHandler>:
   21ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21ce8:	f44f 6580 	mov.w	r5, #1024	; 0x400
   21cec:	4cb1      	ldr	r4, [pc, #708]	; (21fb4 <IPC_IRQHandler+0x2d0>)
   21cee:	b087      	sub	sp, #28
   21cf0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   21cf4:	f3bf 8f4f 	dsb	sy
   21cf8:	f3bf 8f6f 	isb	sy
   21cfc:	4eae      	ldr	r6, [pc, #696]	; (21fb8 <IPC_IRQHandler+0x2d4>)
   21cfe:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   21d02:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   21d06:	061f      	lsls	r7, r3, #24
   21d08:	f100 80c8 	bmi.w	21e9c <IPC_IRQHandler+0x1b8>
   21d0c:	4baa      	ldr	r3, [pc, #680]	; (21fb8 <IPC_IRQHandler+0x2d4>)
   21d0e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   21d12:	07d0      	lsls	r0, r2, #31
   21d14:	f100 80d4 	bmi.w	21ec0 <IPC_IRQHandler+0x1dc>
   21d18:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   21d1c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   21d20:	f040 80b6 	bne.w	21e90 <IPC_IRQHandler+0x1ac>
   21d24:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   21d28:	0749      	lsls	r1, r1, #29
   21d2a:	f100 80ea 	bmi.w	21f02 <IPC_IRQHandler+0x21e>
   21d2e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   21d32:	06db      	lsls	r3, r3, #27
   21d34:	f140 809d 	bpl.w	21e72 <IPC_IRQHandler+0x18e>
   21d38:	2100      	movs	r1, #0
   21d3a:	4a9f      	ldr	r2, [pc, #636]	; (21fb8 <IPC_IRQHandler+0x2d4>)
   21d3c:	4b9f      	ldr	r3, [pc, #636]	; (21fbc <IPC_IRQHandler+0x2d8>)
   21d3e:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   21d42:	681b      	ldr	r3, [r3, #0]
   21d44:	9304      	str	r3, [sp, #16]
   21d46:	9b04      	ldr	r3, [sp, #16]
   21d48:	f8df 829c 	ldr.w	r8, [pc, #668]	; 21fe8 <IPC_IRQHandler+0x304>
   21d4c:	4f9c      	ldr	r7, [pc, #624]	; (21fc0 <IPC_IRQHandler+0x2dc>)
   21d4e:	f8df 929c 	ldr.w	r9, [pc, #668]	; 21fec <IPC_IRQHandler+0x308>
   21d52:	f8d8 a000 	ldr.w	sl, [r8]
   21d56:	f8da 1000 	ldr.w	r1, [sl]
   21d5a:	2900      	cmp	r1, #0
   21d5c:	d03f      	beq.n	21dde <IPC_IRQHandler+0xfa>
   21d5e:	2200      	movs	r2, #0
   21d60:	4614      	mov	r4, r2
   21d62:	e002      	b.n	21d6a <IPC_IRQHandler+0x86>
   21d64:	3401      	adds	r4, #1
   21d66:	428c      	cmp	r4, r1
   21d68:	d227      	bcs.n	21dba <IPC_IRQHandler+0xd6>
   21d6a:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   21d6e:	68ab      	ldr	r3, [r5, #8]
   21d70:	2b00      	cmp	r3, #0
   21d72:	d0f7      	beq.n	21d64 <IPC_IRQHandler+0x80>
   21d74:	686e      	ldr	r6, [r5, #4]
   21d76:	b2f6      	uxtb	r6, r6
   21d78:	2e01      	cmp	r6, #1
   21d7a:	d1f3      	bne.n	21d64 <IPC_IRQHandler+0x80>
   21d7c:	6868      	ldr	r0, [r5, #4]
   21d7e:	f8b9 3000 	ldrh.w	r3, [r9]
   21d82:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   21d86:	d1ed      	bne.n	21d64 <IPC_IRQHandler+0x80>
   21d88:	686a      	ldr	r2, [r5, #4]
   21d8a:	3301      	adds	r3, #1
   21d8c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   21d90:	f042 0202 	orr.w	r2, r2, #2
   21d94:	606a      	str	r2, [r5, #4]
   21d96:	68a8      	ldr	r0, [r5, #8]
   21d98:	f8a9 3000 	strh.w	r3, [r9]
   21d9c:	f7ff fe54 	bl	21a48 <rpc_transport_rx_handle>
   21da0:	4632      	mov	r2, r6
   21da2:	b928      	cbnz	r0, 21db0 <IPC_IRQHandler+0xcc>
   21da4:	686b      	ldr	r3, [r5, #4]
   21da6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   21daa:	f043 0303 	orr.w	r3, r3, #3
   21dae:	606b      	str	r3, [r5, #4]
   21db0:	f8da 1000 	ldr.w	r1, [sl]
   21db4:	3401      	adds	r4, #1
   21db6:	428c      	cmp	r4, r1
   21db8:	d3d7      	bcc.n	21d6a <IPC_IRQHandler+0x86>
   21dba:	2a00      	cmp	r2, #0
   21dbc:	d1cd      	bne.n	21d5a <IPC_IRQHandler+0x76>
   21dbe:	b171      	cbz	r1, 21dde <IPC_IRQHandler+0xfa>
   21dc0:	4613      	mov	r3, r2
   21dc2:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   21dc6:	6890      	ldr	r0, [r2, #8]
   21dc8:	3301      	adds	r3, #1
   21dca:	b130      	cbz	r0, 21dda <IPC_IRQHandler+0xf6>
   21dcc:	f8d2 b004 	ldr.w	fp, [r2, #4]
   21dd0:	fa5f fb8b 	uxtb.w	fp, fp
   21dd4:	f1bb 0f01 	cmp.w	fp, #1
   21dd8:	d003      	beq.n	21de2 <IPC_IRQHandler+0xfe>
   21dda:	428b      	cmp	r3, r1
   21ddc:	d1f1      	bne.n	21dc2 <IPC_IRQHandler+0xde>
   21dde:	f04f 0b00 	mov.w	fp, #0
   21de2:	f8d7 a000 	ldr.w	sl, [r7]
   21de6:	f8da 2000 	ldr.w	r2, [sl]
   21dea:	2a00      	cmp	r2, #0
   21dec:	d03d      	beq.n	21e6a <IPC_IRQHandler+0x186>
   21dee:	2100      	movs	r1, #0
   21df0:	460c      	mov	r4, r1
   21df2:	e002      	b.n	21dfa <IPC_IRQHandler+0x116>
   21df4:	3401      	adds	r4, #1
   21df6:	4294      	cmp	r4, r2
   21df8:	d227      	bcs.n	21e4a <IPC_IRQHandler+0x166>
   21dfa:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   21dfe:	68ab      	ldr	r3, [r5, #8]
   21e00:	2b00      	cmp	r3, #0
   21e02:	d0f7      	beq.n	21df4 <IPC_IRQHandler+0x110>
   21e04:	686e      	ldr	r6, [r5, #4]
   21e06:	b2f6      	uxtb	r6, r6
   21e08:	2e01      	cmp	r6, #1
   21e0a:	d1f3      	bne.n	21df4 <IPC_IRQHandler+0x110>
   21e0c:	6868      	ldr	r0, [r5, #4]
   21e0e:	f8b9 3000 	ldrh.w	r3, [r9]
   21e12:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   21e16:	d1ed      	bne.n	21df4 <IPC_IRQHandler+0x110>
   21e18:	686a      	ldr	r2, [r5, #4]
   21e1a:	3301      	adds	r3, #1
   21e1c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   21e20:	f042 0202 	orr.w	r2, r2, #2
   21e24:	606a      	str	r2, [r5, #4]
   21e26:	68a8      	ldr	r0, [r5, #8]
   21e28:	f8a9 3000 	strh.w	r3, [r9]
   21e2c:	f7ff fe0c 	bl	21a48 <rpc_transport_rx_handle>
   21e30:	4631      	mov	r1, r6
   21e32:	b928      	cbnz	r0, 21e40 <IPC_IRQHandler+0x15c>
   21e34:	686a      	ldr	r2, [r5, #4]
   21e36:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   21e3a:	f043 0303 	orr.w	r3, r3, #3
   21e3e:	606b      	str	r3, [r5, #4]
   21e40:	f8da 2000 	ldr.w	r2, [sl]
   21e44:	3401      	adds	r4, #1
   21e46:	4294      	cmp	r4, r2
   21e48:	d3d7      	bcc.n	21dfa <IPC_IRQHandler+0x116>
   21e4a:	2900      	cmp	r1, #0
   21e4c:	d1cd      	bne.n	21dea <IPC_IRQHandler+0x106>
   21e4e:	b162      	cbz	r2, 21e6a <IPC_IRQHandler+0x186>
   21e50:	460b      	mov	r3, r1
   21e52:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   21e56:	6888      	ldr	r0, [r1, #8]
   21e58:	3301      	adds	r3, #1
   21e5a:	b120      	cbz	r0, 21e66 <IPC_IRQHandler+0x182>
   21e5c:	6849      	ldr	r1, [r1, #4]
   21e5e:	b2c9      	uxtb	r1, r1
   21e60:	2901      	cmp	r1, #1
   21e62:	f43f af76 	beq.w	21d52 <IPC_IRQHandler+0x6e>
   21e66:	4293      	cmp	r3, r2
   21e68:	d1f3      	bne.n	21e52 <IPC_IRQHandler+0x16e>
   21e6a:	f1bb 0f00 	cmp.w	fp, #0
   21e6e:	f47f af70 	bne.w	21d52 <IPC_IRQHandler+0x6e>
   21e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
   21e76:	4b53      	ldr	r3, [pc, #332]	; (21fc4 <IPC_IRQHandler+0x2e0>)
   21e78:	4a4e      	ldr	r2, [pc, #312]	; (21fb4 <IPC_IRQHandler+0x2d0>)
   21e7a:	681b      	ldr	r3, [r3, #0]
   21e7c:	015b      	lsls	r3, r3, #5
   21e7e:	b2db      	uxtb	r3, r3
   21e80:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   21e84:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   21e88:	6051      	str	r1, [r2, #4]
   21e8a:	b007      	add	sp, #28
   21e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e90:	2206      	movs	r2, #6
   21e92:	4b4d      	ldr	r3, [pc, #308]	; (21fc8 <IPC_IRQHandler+0x2e4>)
   21e94:	601a      	str	r2, [r3, #0]
   21e96:	b007      	add	sp, #28
   21e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e9c:	f7ff fc00 	bl	216a0 <ipc_trace_handle>
   21ea0:	f7ff fd6c 	bl	2197c <rpc_trace_coredump_in_progress>
   21ea4:	2800      	cmp	r0, #0
   21ea6:	d151      	bne.n	21f4c <IPC_IRQHandler+0x268>
   21ea8:	4b48      	ldr	r3, [pc, #288]	; (21fcc <IPC_IRQHandler+0x2e8>)
   21eaa:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   21eae:	681b      	ldr	r3, [r3, #0]
   21eb0:	9301      	str	r3, [sp, #4]
   21eb2:	9b01      	ldr	r3, [sp, #4]
   21eb4:	4b40      	ldr	r3, [pc, #256]	; (21fb8 <IPC_IRQHandler+0x2d4>)
   21eb6:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   21eba:	07d0      	lsls	r0, r2, #31
   21ebc:	f57f af2c 	bpl.w	21d18 <IPC_IRQHandler+0x34>
   21ec0:	2000      	movs	r0, #0
   21ec2:	f248 0203 	movw	r2, #32771	; 0x8003
   21ec6:	4942      	ldr	r1, [pc, #264]	; (21fd0 <IPC_IRQHandler+0x2ec>)
   21ec8:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   21ecc:	6809      	ldr	r1, [r1, #0]
   21ece:	9102      	str	r1, [sp, #8]
   21ed0:	9902      	ldr	r1, [sp, #8]
   21ed2:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   21ed6:	4293      	cmp	r3, r2
   21ed8:	d046      	beq.n	21f68 <IPC_IRQHandler+0x284>
   21eda:	d822      	bhi.n	21f22 <IPC_IRQHandler+0x23e>
   21edc:	f248 0201 	movw	r2, #32769	; 0x8001
   21ee0:	4293      	cmp	r3, r2
   21ee2:	d03a      	beq.n	21f5a <IPC_IRQHandler+0x276>
   21ee4:	f248 0202 	movw	r2, #32770	; 0x8002
   21ee8:	4293      	cmp	r3, r2
   21eea:	d129      	bne.n	21f40 <IPC_IRQHandler+0x25c>
   21eec:	2103      	movs	r1, #3
   21eee:	2006      	movs	r0, #6
   21ef0:	4a35      	ldr	r2, [pc, #212]	; (21fc8 <IPC_IRQHandler+0x2e4>)
   21ef2:	4b38      	ldr	r3, [pc, #224]	; (21fd4 <IPC_IRQHandler+0x2f0>)
   21ef4:	6011      	str	r1, [r2, #0]
   21ef6:	6018      	str	r0, [r3, #0]
   21ef8:	b007      	add	sp, #28
   21efa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21efe:	f7ff b8f9 	b.w	210f4 <rpc_transport_ipc_fault_handler>
   21f02:	4d31      	ldr	r5, [pc, #196]	; (21fc8 <IPC_IRQHandler+0x2e4>)
   21f04:	6829      	ldr	r1, [r5, #0]
   21f06:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   21f0a:	2901      	cmp	r1, #1
   21f0c:	4932      	ldr	r1, [pc, #200]	; (21fd8 <IPC_IRQHandler+0x2f4>)
   21f0e:	d033      	beq.n	21f78 <IPC_IRQHandler+0x294>
   21f10:	680a      	ldr	r2, [r1, #0]
   21f12:	9203      	str	r2, [sp, #12]
   21f14:	9a03      	ldr	r2, [sp, #12]
   21f16:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   21f1a:	06da      	lsls	r2, r3, #27
   21f1c:	f57f af14 	bpl.w	21d48 <IPC_IRQHandler+0x64>
   21f20:	e70a      	b.n	21d38 <IPC_IRQHandler+0x54>
   21f22:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   21f26:	d90b      	bls.n	21f40 <IPC_IRQHandler+0x25c>
   21f28:	4a2c      	ldr	r2, [pc, #176]	; (21fdc <IPC_IRQHandler+0x2f8>)
   21f2a:	4293      	cmp	r3, r2
   21f2c:	d902      	bls.n	21f34 <IPC_IRQHandler+0x250>
   21f2e:	4a2c      	ldr	r2, [pc, #176]	; (21fe0 <IPC_IRQHandler+0x2fc>)
   21f30:	4293      	cmp	r3, r2
   21f32:	d105      	bne.n	21f40 <IPC_IRQHandler+0x25c>
   21f34:	2003      	movs	r0, #3
   21f36:	4924      	ldr	r1, [pc, #144]	; (21fc8 <IPC_IRQHandler+0x2e4>)
   21f38:	4a26      	ldr	r2, [pc, #152]	; (21fd4 <IPC_IRQHandler+0x2f0>)
   21f3a:	6008      	str	r0, [r1, #0]
   21f3c:	6013      	str	r3, [r2, #0]
   21f3e:	e7aa      	b.n	21e96 <IPC_IRQHandler+0x1b2>
   21f40:	2003      	movs	r0, #3
   21f42:	4a21      	ldr	r2, [pc, #132]	; (21fc8 <IPC_IRQHandler+0x2e4>)
   21f44:	4b23      	ldr	r3, [pc, #140]	; (21fd4 <IPC_IRQHandler+0x2f0>)
   21f46:	6010      	str	r0, [r2, #0]
   21f48:	6018      	str	r0, [r3, #0]
   21f4a:	e7d5      	b.n	21ef8 <IPC_IRQHandler+0x214>
   21f4c:	23e0      	movs	r3, #224	; 0xe0
   21f4e:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   21f52:	6065      	str	r5, [r4, #4]
   21f54:	b007      	add	sp, #28
   21f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f5a:	2103      	movs	r1, #3
   21f5c:	2007      	movs	r0, #7
   21f5e:	4a1a      	ldr	r2, [pc, #104]	; (21fc8 <IPC_IRQHandler+0x2e4>)
   21f60:	4b1c      	ldr	r3, [pc, #112]	; (21fd4 <IPC_IRQHandler+0x2f0>)
   21f62:	6011      	str	r1, [r2, #0]
   21f64:	6018      	str	r0, [r3, #0]
   21f66:	e7c7      	b.n	21ef8 <IPC_IRQHandler+0x214>
   21f68:	2304      	movs	r3, #4
   21f6a:	2103      	movs	r1, #3
   21f6c:	4c19      	ldr	r4, [pc, #100]	; (21fd4 <IPC_IRQHandler+0x2f0>)
   21f6e:	4a16      	ldr	r2, [pc, #88]	; (21fc8 <IPC_IRQHandler+0x2e4>)
   21f70:	4618      	mov	r0, r3
   21f72:	6023      	str	r3, [r4, #0]
   21f74:	6011      	str	r1, [r2, #0]
   21f76:	e7bf      	b.n	21ef8 <IPC_IRQHandler+0x214>
   21f78:	4a1a      	ldr	r2, [pc, #104]	; (21fe4 <IPC_IRQHandler+0x300>)
   21f7a:	680b      	ldr	r3, [r1, #0]
   21f7c:	6812      	ldr	r2, [r2, #0]
   21f7e:	9305      	str	r3, [sp, #20]
   21f80:	6893      	ldr	r3, [r2, #8]
   21f82:	4819      	ldr	r0, [pc, #100]	; (21fe8 <IPC_IRQHandler+0x304>)
   21f84:	490e      	ldr	r1, [pc, #56]	; (21fc0 <IPC_IRQHandler+0x2dc>)
   21f86:	6003      	str	r3, [r0, #0]
   21f88:	6854      	ldr	r4, [r2, #4]
   21f8a:	9a05      	ldr	r2, [sp, #20]
   21f8c:	600c      	str	r4, [r1, #0]
   21f8e:	b173      	cbz	r3, 21fae <IPC_IRQHandler+0x2ca>
   21f90:	b16c      	cbz	r4, 21fae <IPC_IRQHandler+0x2ca>
   21f92:	681b      	ldr	r3, [r3, #0]
   21f94:	2b10      	cmp	r3, #16
   21f96:	d802      	bhi.n	21f9e <IPC_IRQHandler+0x2ba>
   21f98:	6822      	ldr	r2, [r4, #0]
   21f9a:	2a10      	cmp	r2, #16
   21f9c:	d928      	bls.n	21ff0 <IPC_IRQHandler+0x30c>
   21f9e:	f24c 0306 	movw	r3, #49158	; 0xc006
   21fa2:	2203      	movs	r2, #3
   21fa4:	490b      	ldr	r1, [pc, #44]	; (21fd4 <IPC_IRQHandler+0x2f0>)
   21fa6:	4618      	mov	r0, r3
   21fa8:	600b      	str	r3, [r1, #0]
   21faa:	602a      	str	r2, [r5, #0]
   21fac:	e7a4      	b.n	21ef8 <IPC_IRQHandler+0x214>
   21fae:	2310      	movs	r3, #16
   21fb0:	e7f7      	b.n	21fa2 <IPC_IRQHandler+0x2be>
   21fb2:	bf00      	nop
   21fb4:	e000e100 	.word	0xe000e100
   21fb8:	4002a000 	.word	0x4002a000
   21fbc:	4002a110 	.word	0x4002a110
   21fc0:	20023158 	.word	0x20023158
   21fc4:	20023150 	.word	0x20023150
   21fc8:	20023154 	.word	0x20023154
   21fcc:	4002a11c 	.word	0x4002a11c
   21fd0:	4002a100 	.word	0x4002a100
   21fd4:	2002314c 	.word	0x2002314c
   21fd8:	4002a108 	.word	0x4002a108
   21fdc:	04400004 	.word	0x04400004
   21fe0:	05500001 	.word	0x05500001
   21fe4:	20023160 	.word	0x20023160
   21fe8:	2002315c 	.word	0x2002315c
   21fec:	20027888 	.word	0x20027888
   21ff0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 22098 <IPC_IRQHandler+0x3b4>
   21ff4:	2a00      	cmp	r2, #0
   21ff6:	d042      	beq.n	2207e <IPC_IRQHandler+0x39a>
   21ff8:	2300      	movs	r3, #0
   21ffa:	f104 0904 	add.w	r9, r4, #4
   21ffe:	461e      	mov	r6, r3
   22000:	e002      	b.n	22008 <IPC_IRQHandler+0x324>
   22002:	3601      	adds	r6, #1
   22004:	4296      	cmp	r6, r2
   22006:	d22a      	bcs.n	2205e <IPC_IRQHandler+0x37a>
   22008:	00f7      	lsls	r7, r6, #3
   2200a:	19e1      	adds	r1, r4, r7
   2200c:	6888      	ldr	r0, [r1, #8]
   2200e:	2800      	cmp	r0, #0
   22010:	d0f7      	beq.n	22002 <IPC_IRQHandler+0x31e>
   22012:	f8d1 a004 	ldr.w	sl, [r1, #4]
   22016:	fa5f fa8a 	uxtb.w	sl, sl
   2201a:	f1ba 0f01 	cmp.w	sl, #1
   2201e:	d1f0      	bne.n	22002 <IPC_IRQHandler+0x31e>
   22020:	f8d1 c004 	ldr.w	ip, [r1, #4]
   22024:	f8b8 0000 	ldrh.w	r0, [r8]
   22028:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   2202c:	d1e9      	bne.n	22002 <IPC_IRQHandler+0x31e>
   2202e:	684b      	ldr	r3, [r1, #4]
   22030:	1c42      	adds	r2, r0, #1
   22032:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   22036:	f043 0302 	orr.w	r3, r3, #2
   2203a:	604b      	str	r3, [r1, #4]
   2203c:	6888      	ldr	r0, [r1, #8]
   2203e:	f8a8 2000 	strh.w	r2, [r8]
   22042:	f7ff fd01 	bl	21a48 <rpc_transport_rx_handle>
   22046:	4653      	mov	r3, sl
   22048:	b938      	cbnz	r0, 2205a <IPC_IRQHandler+0x376>
   2204a:	f859 2007 	ldr.w	r2, [r9, r7]
   2204e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   22052:	f042 0203 	orr.w	r2, r2, #3
   22056:	f849 2007 	str.w	r2, [r9, r7]
   2205a:	6822      	ldr	r2, [r4, #0]
   2205c:	e7d1      	b.n	22002 <IPC_IRQHandler+0x31e>
   2205e:	2b00      	cmp	r3, #0
   22060:	d1c8      	bne.n	21ff4 <IPC_IRQHandler+0x310>
   22062:	b912      	cbnz	r2, 2206a <IPC_IRQHandler+0x386>
   22064:	e00b      	b.n	2207e <IPC_IRQHandler+0x39a>
   22066:	4293      	cmp	r3, r2
   22068:	d009      	beq.n	2207e <IPC_IRQHandler+0x39a>
   2206a:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   2206e:	6888      	ldr	r0, [r1, #8]
   22070:	3301      	adds	r3, #1
   22072:	2800      	cmp	r0, #0
   22074:	d0f7      	beq.n	22066 <IPC_IRQHandler+0x382>
   22076:	6849      	ldr	r1, [r1, #4]
   22078:	b2c9      	uxtb	r1, r1
   2207a:	2901      	cmp	r1, #1
   2207c:	d1f3      	bne.n	22066 <IPC_IRQHandler+0x382>
   2207e:	2002      	movs	r0, #2
   22080:	4b03      	ldr	r3, [pc, #12]	; (22090 <IPC_IRQHandler+0x3ac>)
   22082:	f44f 6180 	mov.w	r1, #1024	; 0x400
   22086:	4a03      	ldr	r2, [pc, #12]	; (22094 <IPC_IRQHandler+0x3b0>)
   22088:	681b      	ldr	r3, [r3, #0]
   2208a:	6028      	str	r0, [r5, #0]
   2208c:	e6f6      	b.n	21e7c <IPC_IRQHandler+0x198>
   2208e:	bf00      	nop
   22090:	20023150 	.word	0x20023150
   22094:	e000e100 	.word	0xe000e100
   22098:	20027888 	.word	0x20027888

0002209c <rpc_transport_msg_free>:
   2209c:	b430      	push	{r4, r5}
   2209e:	4b18      	ldr	r3, [pc, #96]	; (22100 <rpc_transport_msg_free+0x64>)
   220a0:	681c      	ldr	r4, [r3, #0]
   220a2:	6825      	ldr	r5, [r4, #0]
   220a4:	b16d      	cbz	r5, 220c2 <rpc_transport_msg_free+0x26>
   220a6:	68a3      	ldr	r3, [r4, #8]
   220a8:	4283      	cmp	r3, r0
   220aa:	d027      	beq.n	220fc <rpc_transport_msg_free+0x60>
   220ac:	2300      	movs	r3, #0
   220ae:	e002      	b.n	220b6 <rpc_transport_msg_free+0x1a>
   220b0:	6889      	ldr	r1, [r1, #8]
   220b2:	4281      	cmp	r1, r0
   220b4:	d019      	beq.n	220ea <rpc_transport_msg_free+0x4e>
   220b6:	3301      	adds	r3, #1
   220b8:	00da      	lsls	r2, r3, #3
   220ba:	42ab      	cmp	r3, r5
   220bc:	eb04 0102 	add.w	r1, r4, r2
   220c0:	d1f6      	bne.n	220b0 <rpc_transport_msg_free+0x14>
   220c2:	4b10      	ldr	r3, [pc, #64]	; (22104 <rpc_transport_msg_free+0x68>)
   220c4:	681c      	ldr	r4, [r3, #0]
   220c6:	6825      	ldr	r5, [r4, #0]
   220c8:	b16d      	cbz	r5, 220e6 <rpc_transport_msg_free+0x4a>
   220ca:	68a3      	ldr	r3, [r4, #8]
   220cc:	4283      	cmp	r3, r0
   220ce:	d015      	beq.n	220fc <rpc_transport_msg_free+0x60>
   220d0:	2300      	movs	r3, #0
   220d2:	e002      	b.n	220da <rpc_transport_msg_free+0x3e>
   220d4:	6889      	ldr	r1, [r1, #8]
   220d6:	4281      	cmp	r1, r0
   220d8:	d007      	beq.n	220ea <rpc_transport_msg_free+0x4e>
   220da:	3301      	adds	r3, #1
   220dc:	00da      	lsls	r2, r3, #3
   220de:	429d      	cmp	r5, r3
   220e0:	eb04 0102 	add.w	r1, r4, r2
   220e4:	d1f6      	bne.n	220d4 <rpc_transport_msg_free+0x38>
   220e6:	bc30      	pop	{r4, r5}
   220e8:	4770      	bx	lr
   220ea:	3204      	adds	r2, #4
   220ec:	58a3      	ldr	r3, [r4, r2]
   220ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   220f2:	f043 0303 	orr.w	r3, r3, #3
   220f6:	50a3      	str	r3, [r4, r2]
   220f8:	bc30      	pop	{r4, r5}
   220fa:	4770      	bx	lr
   220fc:	2204      	movs	r2, #4
   220fe:	e7f5      	b.n	220ec <rpc_transport_msg_free+0x50>
   22100:	2002315c 	.word	0x2002315c
   22104:	20023158 	.word	0x20023158

00022108 <rpc_transport_ipc_rx_suspend>:
   22108:	b410      	push	{r4}
   2210a:	2400      	movs	r4, #0
   2210c:	2010      	movs	r0, #16
   2210e:	2204      	movs	r2, #4
   22110:	4b0a      	ldr	r3, [pc, #40]	; (2213c <rpc_transport_ipc_rx_suspend+0x34>)
   22112:	490b      	ldr	r1, [pc, #44]	; (22140 <rpc_transport_ipc_rx_suspend+0x38>)
   22114:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   22118:	680c      	ldr	r4, [r1, #0]
   2211a:	b083      	sub	sp, #12
   2211c:	9401      	str	r4, [sp, #4]
   2211e:	9c01      	ldr	r4, [sp, #4]
   22120:	f5a1 7126 	sub.w	r1, r1, #664	; 0x298
   22124:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   22128:	6809      	ldr	r1, [r1, #0]
   2212a:	4b06      	ldr	r3, [pc, #24]	; (22144 <rpc_transport_ipc_rx_suspend+0x3c>)
   2212c:	9100      	str	r1, [sp, #0]
   2212e:	9900      	ldr	r1, [sp, #0]
   22130:	601a      	str	r2, [r3, #0]
   22132:	b003      	add	sp, #12
   22134:	f85d 4b04 	ldr.w	r4, [sp], #4
   22138:	4770      	bx	lr
   2213a:	bf00      	nop
   2213c:	4002a000 	.word	0x4002a000
   22140:	4002a5a0 	.word	0x4002a5a0
   22144:	20023154 	.word	0x20023154

00022148 <rpc_transport_ipc_rx_shutdown>:
   22148:	b4f0      	push	{r4, r5, r6, r7}
   2214a:	4a32      	ldr	r2, [pc, #200]	; (22214 <rpc_transport_ipc_rx_shutdown+0xcc>)
   2214c:	b08c      	sub	sp, #48	; 0x30
   2214e:	6813      	ldr	r3, [r2, #0]
   22150:	2b06      	cmp	r3, #6
   22152:	d1fc      	bne.n	2214e <rpc_transport_ipc_rx_shutdown+0x6>
   22154:	2000      	movs	r0, #0
   22156:	2201      	movs	r2, #1
   22158:	210a      	movs	r1, #10
   2215a:	4b2f      	ldr	r3, [pc, #188]	; (22218 <rpc_transport_ipc_rx_shutdown+0xd0>)
   2215c:	9000      	str	r0, [sp, #0]
   2215e:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
   22162:	f8d3 0610 	ldr.w	r0, [r3, #1552]	; 0x610
   22166:	9000      	str	r0, [sp, #0]
   22168:	9800      	ldr	r0, [sp, #0]
   2216a:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   2216e:	9101      	str	r1, [sp, #4]
   22170:	9b01      	ldr	r3, [sp, #4]
   22172:	b12b      	cbz	r3, 22180 <rpc_transport_ipc_rx_shutdown+0x38>
   22174:	9b01      	ldr	r3, [sp, #4]
   22176:	3b01      	subs	r3, #1
   22178:	9301      	str	r3, [sp, #4]
   2217a:	9b01      	ldr	r3, [sp, #4]
   2217c:	2b00      	cmp	r3, #0
   2217e:	d1f9      	bne.n	22174 <rpc_transport_ipc_rx_shutdown+0x2c>
   22180:	2200      	movs	r2, #0
   22182:	2601      	movs	r6, #1
   22184:	2504      	movs	r5, #4
   22186:	2410      	movs	r4, #16
   22188:	4923      	ldr	r1, [pc, #140]	; (22218 <rpc_transport_ipc_rx_shutdown+0xd0>)
   2218a:	4b24      	ldr	r3, [pc, #144]	; (2221c <rpc_transport_ipc_rx_shutdown+0xd4>)
   2218c:	f8c1 2614 	str.w	r2, [r1, #1556]	; 0x614
   22190:	f501 3115 	add.w	r1, r1, #152576	; 0x25400
   22194:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   22198:	f501 71c8 	add.w	r1, r1, #400	; 0x190
   2219c:	6809      	ldr	r1, [r1, #0]
   2219e:	2040      	movs	r0, #64	; 0x40
   221a0:	9102      	str	r1, [sp, #8]
   221a2:	491f      	ldr	r1, [pc, #124]	; (22220 <rpc_transport_ipc_rx_shutdown+0xd8>)
   221a4:	9f02      	ldr	r7, [sp, #8]
   221a6:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   221aa:	680f      	ldr	r7, [r1, #0]
   221ac:	2180      	movs	r1, #128	; 0x80
   221ae:	9703      	str	r7, [sp, #12]
   221b0:	4f1c      	ldr	r7, [pc, #112]	; (22224 <rpc_transport_ipc_rx_shutdown+0xdc>)
   221b2:	f8dd c00c 	ldr.w	ip, [sp, #12]
   221b6:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   221ba:	683f      	ldr	r7, [r7, #0]
   221bc:	9704      	str	r7, [sp, #16]
   221be:	4f1a      	ldr	r7, [pc, #104]	; (22228 <rpc_transport_ipc_rx_shutdown+0xe0>)
   221c0:	f8dd c010 	ldr.w	ip, [sp, #16]
   221c4:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   221c8:	683f      	ldr	r7, [r7, #0]
   221ca:	9705      	str	r7, [sp, #20]
   221cc:	9f05      	ldr	r7, [sp, #20]
   221ce:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   221d2:	4a16      	ldr	r2, [pc, #88]	; (2222c <rpc_transport_ipc_rx_shutdown+0xe4>)
   221d4:	6812      	ldr	r2, [r2, #0]
   221d6:	9206      	str	r2, [sp, #24]
   221d8:	4a15      	ldr	r2, [pc, #84]	; (22230 <rpc_transport_ipc_rx_shutdown+0xe8>)
   221da:	9f06      	ldr	r7, [sp, #24]
   221dc:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   221e0:	6816      	ldr	r6, [r2, #0]
   221e2:	9607      	str	r6, [sp, #28]
   221e4:	9e07      	ldr	r6, [sp, #28]
   221e6:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   221ea:	6815      	ldr	r5, [r2, #0]
   221ec:	9508      	str	r5, [sp, #32]
   221ee:	9d08      	ldr	r5, [sp, #32]
   221f0:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
   221f4:	6814      	ldr	r4, [r2, #0]
   221f6:	9409      	str	r4, [sp, #36]	; 0x24
   221f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   221fa:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   221fe:	6810      	ldr	r0, [r2, #0]
   22200:	900a      	str	r0, [sp, #40]	; 0x28
   22202:	980a      	ldr	r0, [sp, #40]	; 0x28
   22204:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
   22208:	6813      	ldr	r3, [r2, #0]
   2220a:	930b      	str	r3, [sp, #44]	; 0x2c
   2220c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2220e:	b00c      	add	sp, #48	; 0x30
   22210:	bcf0      	pop	{r4, r5, r6, r7}
   22212:	4770      	bx	lr
   22214:	20023154 	.word	0x20023154
   22218:	40005000 	.word	0x40005000
   2221c:	4002a000 	.word	0x4002a000
   22220:	4002a598 	.word	0x4002a598
   22224:	4002a5a0 	.word	0x4002a5a0
   22228:	4002a5a8 	.word	0x4002a5a8
   2222c:	4002a5ac 	.word	0x4002a5ac
   22230:	4002a308 	.word	0x4002a308

00022234 <rpc_transport_ipc_tx_init>:
   22234:	2800      	cmp	r0, #0
   22236:	f000 80b8 	beq.w	223aa <rpc_transport_ipc_tx_init+0x176>
   2223a:	2900      	cmp	r1, #0
   2223c:	f000 80b5 	beq.w	223aa <rpc_transport_ipc_tx_init+0x176>
   22240:	2a00      	cmp	r2, #0
   22242:	f000 80b2 	beq.w	223aa <rpc_transport_ipc_tx_init+0x176>
   22246:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2224a:	6a04      	ldr	r4, [r0, #32]
   2224c:	b085      	sub	sp, #20
   2224e:	2c00      	cmp	r4, #0
   22250:	f000 80a6 	beq.w	223a0 <rpc_transport_ipc_tx_init+0x16c>
   22254:	6a40      	ldr	r0, [r0, #36]	; 0x24
   22256:	2800      	cmp	r0, #0
   22258:	f000 80a2 	beq.w	223a0 <rpc_transport_ipc_tx_init+0x16c>
   2225c:	f642 4587 	movw	r5, #11399	; 0x2c87
   22260:	f04f 0a00 	mov.w	sl, #0
   22264:	4e55      	ldr	r6, [pc, #340]	; (223bc <rpc_transport_ipc_tx_init+0x188>)
   22266:	42a8      	cmp	r0, r5
   22268:	f886 a000 	strb.w	sl, [r6]
   2226c:	f240 80a0 	bls.w	223b0 <rpc_transport_ipc_tx_init+0x17c>
   22270:	2708      	movs	r7, #8
   22272:	f8df 9180 	ldr.w	r9, [pc, #384]	; 223f4 <rpc_transport_ipc_tx_init+0x1c0>
   22276:	4620      	mov	r0, r4
   22278:	4616      	mov	r6, r2
   2227a:	460d      	mov	r5, r1
   2227c:	2244      	movs	r2, #68	; 0x44
   2227e:	4651      	mov	r1, sl
   22280:	f8c9 4000 	str.w	r4, [r9]
   22284:	f008 fb2e 	bl	2a8e4 <memset>
   22288:	f8d9 2000 	ldr.w	r2, [r9]
   2228c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   22290:	f8df 8164 	ldr.w	r8, [pc, #356]	; 223f8 <rpc_transport_ipc_tx_init+0x1c4>
   22294:	f882 a001 	strb.w	sl, [r2, #1]
   22298:	f882 a002 	strb.w	sl, [r2, #2]
   2229c:	f882 a003 	strb.w	sl, [r2, #3]
   222a0:	7017      	strb	r7, [r2, #0]
   222a2:	4618      	mov	r0, r3
   222a4:	2244      	movs	r2, #68	; 0x44
   222a6:	4651      	mov	r1, sl
   222a8:	f8c8 3000 	str.w	r3, [r8]
   222ac:	f008 fb1a 	bl	2a8e4 <memset>
   222b0:	f8d8 2000 	ldr.w	r2, [r8]
   222b4:	f104 0388 	add.w	r3, r4, #136	; 0x88
   222b8:	f8df b140 	ldr.w	fp, [pc, #320]	; 223fc <rpc_transport_ipc_tx_init+0x1c8>
   222bc:	7017      	strb	r7, [r2, #0]
   222be:	f882 a001 	strb.w	sl, [r2, #1]
   222c2:	f882 a002 	strb.w	sl, [r2, #2]
   222c6:	f882 a003 	strb.w	sl, [r2, #3]
   222ca:	4618      	mov	r0, r3
   222cc:	f44f 7200 	mov.w	r2, #512	; 0x200
   222d0:	4651      	mov	r1, sl
   222d2:	f8cb 3000 	str.w	r3, [fp]
   222d6:	f008 fb05 	bl	2a8e4 <memset>
   222da:	4b39      	ldr	r3, [pc, #228]	; (223c0 <rpc_transport_ipc_tx_init+0x18c>)
   222dc:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   222e0:	f8c3 c000 	str.w	ip, [r3]
   222e4:	4651      	mov	r1, sl
   222e6:	4660      	mov	r0, ip
   222e8:	f44f 7200 	mov.w	r2, #512	; 0x200
   222ec:	f008 fafa 	bl	2a8e4 <memset>
   222f0:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   222f4:	2106      	movs	r1, #6
   222f6:	f04f 0e01 	mov.w	lr, #1
   222fa:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   222fe:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   22302:	4b30      	ldr	r3, [pc, #192]	; (223c4 <rpc_transport_ipc_tx_init+0x190>)
   22304:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   22308:	605c      	str	r4, [r3, #4]
   2230a:	4c2f      	ldr	r4, [pc, #188]	; (223c8 <rpc_transport_ipc_tx_init+0x194>)
   2230c:	f8c3 c008 	str.w	ip, [r3, #8]
   22310:	8199      	strh	r1, [r3, #12]
   22312:	f8a3 e000 	strh.w	lr, [r3]
   22316:	4619      	mov	r1, r3
   22318:	611c      	str	r4, [r3, #16]
   2231a:	4b2c      	ldr	r3, [pc, #176]	; (223cc <rpc_transport_ipc_tx_init+0x198>)
   2231c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 22400 <rpc_transport_ipc_tx_init+0x1cc>
   22320:	6120      	str	r0, [r4, #16]
   22322:	482b      	ldr	r0, [pc, #172]	; (223d0 <rpc_transport_ipc_tx_init+0x19c>)
   22324:	6063      	str	r3, [r4, #4]
   22326:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   2232a:	60a0      	str	r0, [r4, #8]
   2232c:	f8c4 c000 	str.w	ip, [r4]
   22330:	4828      	ldr	r0, [pc, #160]	; (223d4 <rpc_transport_ipc_tx_init+0x1a0>)
   22332:	60e3      	str	r3, [r4, #12]
   22334:	6162      	str	r2, [r4, #20]
   22336:	f7f6 fe1d 	bl	18f74 <nrf_mem_register>
   2233a:	2800      	cmp	r0, #0
   2233c:	d132      	bne.n	223a4 <rpc_transport_ipc_tx_init+0x170>
   2233e:	f04f 0c02 	mov.w	ip, #2
   22342:	2420      	movs	r4, #32
   22344:	f8d9 1000 	ldr.w	r1, [r9]
   22348:	f8db 2000 	ldr.w	r2, [fp]
   2234c:	6029      	str	r1, [r5, #0]
   2234e:	4b1c      	ldr	r3, [pc, #112]	; (223c0 <rpc_transport_ipc_tx_init+0x18c>)
   22350:	f8d8 1000 	ldr.w	r1, [r8]
   22354:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 22404 <rpc_transport_ipc_tx_init+0x1d0>
   22358:	4d1f      	ldr	r5, [pc, #124]	; (223d8 <rpc_transport_ipc_tx_init+0x1a4>)
   2235a:	6031      	str	r1, [r6, #0]
   2235c:	f8ce 2000 	str.w	r2, [lr]
   22360:	681b      	ldr	r3, [r3, #0]
   22362:	491e      	ldr	r1, [pc, #120]	; (223dc <rpc_transport_ipc_tx_init+0x1a8>)
   22364:	f502 7200 	add.w	r2, r2, #512	; 0x200
   22368:	602a      	str	r2, [r5, #0]
   2236a:	4e1d      	ldr	r6, [pc, #116]	; (223e0 <rpc_transport_ipc_tx_init+0x1ac>)
   2236c:	4a1d      	ldr	r2, [pc, #116]	; (223e4 <rpc_transport_ipc_tx_init+0x1b0>)
   2236e:	4d1e      	ldr	r5, [pc, #120]	; (223e8 <rpc_transport_ipc_tx_init+0x1b4>)
   22370:	600b      	str	r3, [r1, #0]
   22372:	f503 7300 	add.w	r3, r3, #512	; 0x200
   22376:	491d      	ldr	r1, [pc, #116]	; (223ec <rpc_transport_ipc_tx_init+0x1b8>)
   22378:	6033      	str	r3, [r6, #0]
   2237a:	8028      	strh	r0, [r5, #0]
   2237c:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   22380:	6809      	ldr	r1, [r1, #0]
   22382:	4b1b      	ldr	r3, [pc, #108]	; (223f0 <rpc_transport_ipc_tx_init+0x1bc>)
   22384:	9103      	str	r1, [sp, #12]
   22386:	9903      	ldr	r1, [sp, #12]
   22388:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   2238c:	6819      	ldr	r1, [r3, #0]
   2238e:	443b      	add	r3, r7
   22390:	9102      	str	r1, [sp, #8]
   22392:	9902      	ldr	r1, [sp, #8]
   22394:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   22398:	681b      	ldr	r3, [r3, #0]
   2239a:	9301      	str	r3, [sp, #4]
   2239c:	9b01      	ldr	r3, [sp, #4]
   2239e:	e001      	b.n	223a4 <rpc_transport_ipc_tx_init+0x170>
   223a0:	f24c 0007 	movw	r0, #49159	; 0xc007
   223a4:	b005      	add	sp, #20
   223a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223aa:	f24c 000e 	movw	r0, #49166	; 0xc00e
   223ae:	4770      	bx	lr
   223b0:	f24c 0004 	movw	r0, #49156	; 0xc004
   223b4:	b005      	add	sp, #20
   223b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223ba:	bf00      	nop
   223bc:	20027da0 	.word	0x20027da0
   223c0:	2002318c 	.word	0x2002318c
   223c4:	20023178 	.word	0x20023178
   223c8:	2002319c 	.word	0x2002319c
   223cc:	00040080 	.word	0x00040080
   223d0:	00040100 	.word	0x00040100
   223d4:	20023164 	.word	0x20023164
   223d8:	20023170 	.word	0x20023170
   223dc:	2002316c 	.word	0x2002316c
   223e0:	20023168 	.word	0x20023168
   223e4:	4002a000 	.word	0x4002a000
   223e8:	2002788a 	.word	0x2002788a
   223ec:	4002a514 	.word	0x4002a514
   223f0:	4002a51c 	.word	0x4002a51c
   223f4:	20023198 	.word	0x20023198
   223f8:	20023190 	.word	0x20023190
   223fc:	20023194 	.word	0x20023194
   22400:	00080040 	.word	0x00080040
   22404:	20023174 	.word	0x20023174

00022408 <rpc_transport_ipc_tx_send>:
   22408:	2800      	cmp	r0, #0
   2240a:	d05f      	beq.n	224cc <rpc_transport_ipc_tx_send+0xc4>
   2240c:	b470      	push	{r4, r5, r6}
   2240e:	4b33      	ldr	r3, [pc, #204]	; (224dc <rpc_transport_ipc_tx_send+0xd4>)
   22410:	b083      	sub	sp, #12
   22412:	681a      	ldr	r2, [r3, #0]
   22414:	4b32      	ldr	r3, [pc, #200]	; (224e0 <rpc_transport_ipc_tx_send+0xd8>)
   22416:	4282      	cmp	r2, r0
   22418:	d81e      	bhi.n	22458 <rpc_transport_ipc_tx_send+0x50>
   2241a:	681b      	ldr	r3, [r3, #0]
   2241c:	4931      	ldr	r1, [pc, #196]	; (224e4 <rpc_transport_ipc_tx_send+0xdc>)
   2241e:	4283      	cmp	r3, r0
   22420:	6809      	ldr	r1, [r1, #0]
   22422:	d803      	bhi.n	2242c <rpc_transport_ipc_tx_send+0x24>
   22424:	4c30      	ldr	r4, [pc, #192]	; (224e8 <rpc_transport_ipc_tx_send+0xe0>)
   22426:	6824      	ldr	r4, [r4, #0]
   22428:	4284      	cmp	r4, r0
   2242a:	d847      	bhi.n	224bc <rpc_transport_ipc_tx_send+0xb4>
   2242c:	4281      	cmp	r1, r0
   2242e:	d90e      	bls.n	2244e <rpc_transport_ipc_tx_send+0x46>
   22430:	4b2e      	ldr	r3, [pc, #184]	; (224ec <rpc_transport_ipc_tx_send+0xe4>)
   22432:	781b      	ldrb	r3, [r3, #0]
   22434:	2b00      	cmp	r3, #0
   22436:	d14c      	bne.n	224d2 <rpc_transport_ipc_tx_send+0xca>
   22438:	1a83      	subs	r3, r0, r2
   2243a:	492d      	ldr	r1, [pc, #180]	; (224f0 <rpc_transport_ipc_tx_send+0xe8>)
   2243c:	099e      	lsrs	r6, r3, #6
   2243e:	069b      	lsls	r3, r3, #26
   22440:	680a      	ldr	r2, [r1, #0]
   22442:	4c2c      	ldr	r4, [pc, #176]	; (224f4 <rpc_transport_ipc_tx_send+0xec>)
   22444:	f04f 0103 	mov.w	r1, #3
   22448:	f04f 0502 	mov.w	r5, #2
   2244c:	d014      	beq.n	22478 <rpc_transport_ipc_tx_send+0x70>
   2244e:	f24c 0010 	movw	r0, #49168	; 0xc010
   22452:	b003      	add	sp, #12
   22454:	bc70      	pop	{r4, r5, r6}
   22456:	4770      	bx	lr
   22458:	681b      	ldr	r3, [r3, #0]
   2245a:	4298      	cmp	r0, r3
   2245c:	d3f7      	bcc.n	2244e <rpc_transport_ipc_tx_send+0x46>
   2245e:	4a22      	ldr	r2, [pc, #136]	; (224e8 <rpc_transport_ipc_tx_send+0xe0>)
   22460:	6812      	ldr	r2, [r2, #0]
   22462:	4290      	cmp	r0, r2
   22464:	d2f3      	bcs.n	2244e <rpc_transport_ipc_tx_send+0x46>
   22466:	2101      	movs	r1, #1
   22468:	1ac3      	subs	r3, r0, r3
   2246a:	4a23      	ldr	r2, [pc, #140]	; (224f8 <rpc_transport_ipc_tx_send+0xf0>)
   2246c:	099e      	lsrs	r6, r3, #6
   2246e:	069b      	lsls	r3, r3, #26
   22470:	460d      	mov	r5, r1
   22472:	6812      	ldr	r2, [r2, #0]
   22474:	4c21      	ldr	r4, [pc, #132]	; (224fc <rpc_transport_ipc_tx_send+0xf4>)
   22476:	d1ea      	bne.n	2244e <rpc_transport_ipc_tx_send+0x46>
   22478:	6843      	ldr	r3, [r0, #4]
   2247a:	b2db      	uxtb	r3, r3
   2247c:	429d      	cmp	r5, r3
   2247e:	d120      	bne.n	224c2 <rpc_transport_ipc_tx_send+0xba>
   22480:	2020      	movs	r0, #32
   22482:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   22486:	4d1e      	ldr	r5, [pc, #120]	; (22500 <rpc_transport_ipc_tx_send+0xf8>)
   22488:	6853      	ldr	r3, [r2, #4]
   2248a:	882e      	ldrh	r6, [r5, #0]
   2248c:	b29b      	uxth	r3, r3
   2248e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   22492:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   22496:	f043 0301 	orr.w	r3, r3, #1
   2249a:	6053      	str	r3, [r2, #4]
   2249c:	bf00      	nop
   2249e:	3801      	subs	r0, #1
   224a0:	d1fc      	bne.n	2249c <rpc_transport_ipc_tx_send+0x94>
   224a2:	2201      	movs	r2, #1
   224a4:	4b17      	ldr	r3, [pc, #92]	; (22504 <rpc_transport_ipc_tx_send+0xfc>)
   224a6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   224aa:	6822      	ldr	r2, [r4, #0]
   224ac:	882b      	ldrh	r3, [r5, #0]
   224ae:	9201      	str	r2, [sp, #4]
   224b0:	9a01      	ldr	r2, [sp, #4]
   224b2:	3301      	adds	r3, #1
   224b4:	802b      	strh	r3, [r5, #0]
   224b6:	b003      	add	sp, #12
   224b8:	bc70      	pop	{r4, r5, r6}
   224ba:	4770      	bx	lr
   224bc:	4281      	cmp	r1, r0
   224be:	d9d2      	bls.n	22466 <rpc_transport_ipc_tx_send+0x5e>
   224c0:	e7b6      	b.n	22430 <rpc_transport_ipc_tx_send+0x28>
   224c2:	f24c 0007 	movw	r0, #49159	; 0xc007
   224c6:	b003      	add	sp, #12
   224c8:	bc70      	pop	{r4, r5, r6}
   224ca:	4770      	bx	lr
   224cc:	f24c 000e 	movw	r0, #49166	; 0xc00e
   224d0:	4770      	bx	lr
   224d2:	f24c 000f 	movw	r0, #49167	; 0xc00f
   224d6:	b003      	add	sp, #12
   224d8:	bc70      	pop	{r4, r5, r6}
   224da:	4770      	bx	lr
   224dc:	20023174 	.word	0x20023174
   224e0:	2002316c 	.word	0x2002316c
   224e4:	20023170 	.word	0x20023170
   224e8:	20023168 	.word	0x20023168
   224ec:	20027da0 	.word	0x20027da0
   224f0:	20023198 	.word	0x20023198
   224f4:	4002a00c 	.word	0x4002a00c
   224f8:	20023190 	.word	0x20023190
   224fc:	4002a004 	.word	0x4002a004
   22500:	2002788a 	.word	0x2002788a
   22504:	4002a000 	.word	0x4002a000

00022508 <rpc_transport_ipc_tx_rpc_data_alloc>:
   22508:	4b18      	ldr	r3, [pc, #96]	; (2256c <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   2250a:	781b      	ldrb	r3, [r3, #0]
   2250c:	bb63      	cbnz	r3, 22568 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   2250e:	b4f0      	push	{r4, r5, r6, r7}
   22510:	4a17      	ldr	r2, [pc, #92]	; (22570 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   22512:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   22516:	6814      	ldr	r4, [r2, #0]
   22518:	4b16      	ldr	r3, [pc, #88]	; (22574 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   2251a:	6825      	ldr	r5, [r4, #0]
   2251c:	681e      	ldr	r6, [r3, #0]
   2251e:	b1a5      	cbz	r5, 2254a <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   22520:	4607      	mov	r7, r0
   22522:	00c1      	lsls	r1, r0, #3
   22524:	1863      	adds	r3, r4, r1
   22526:	685a      	ldr	r2, [r3, #4]
   22528:	b2d2      	uxtb	r2, r2
   2252a:	2a03      	cmp	r2, #3
   2252c:	d104      	bne.n	22538 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   2252e:	609f      	str	r7, [r3, #8]
   22530:	685a      	ldr	r2, [r3, #4]
   22532:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   22536:	605a      	str	r2, [r3, #4]
   22538:	685a      	ldr	r2, [r3, #4]
   2253a:	f012 0fff 	tst.w	r2, #255	; 0xff
   2253e:	d101      	bne.n	22544 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   22540:	689b      	ldr	r3, [r3, #8]
   22542:	b12b      	cbz	r3, 22550 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   22544:	3001      	adds	r0, #1
   22546:	42a8      	cmp	r0, r5
   22548:	d1eb      	bne.n	22522 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   2254a:	2000      	movs	r0, #0
   2254c:	bcf0      	pop	{r4, r5, r6, r7}
   2254e:	4770      	bx	lr
   22550:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   22554:	4421      	add	r1, r4
   22556:	6088      	str	r0, [r1, #8]
   22558:	6843      	ldr	r3, [r0, #4]
   2255a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2255e:	f043 0302 	orr.w	r3, r3, #2
   22562:	6043      	str	r3, [r0, #4]
   22564:	bcf0      	pop	{r4, r5, r6, r7}
   22566:	4770      	bx	lr
   22568:	2000      	movs	r0, #0
   2256a:	4770      	bx	lr
   2256c:	20027da0 	.word	0x20027da0
   22570:	20023198 	.word	0x20023198
   22574:	20023194 	.word	0x20023194

00022578 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   22578:	b4f0      	push	{r4, r5, r6, r7}
   2257a:	4a15      	ldr	r2, [pc, #84]	; (225d0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   2257c:	4b15      	ldr	r3, [pc, #84]	; (225d4 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   2257e:	6814      	ldr	r4, [r2, #0]
   22580:	681e      	ldr	r6, [r3, #0]
   22582:	6825      	ldr	r5, [r4, #0]
   22584:	b1ad      	cbz	r5, 225b2 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   22586:	2000      	movs	r0, #0
   22588:	4607      	mov	r7, r0
   2258a:	00c1      	lsls	r1, r0, #3
   2258c:	1863      	adds	r3, r4, r1
   2258e:	685a      	ldr	r2, [r3, #4]
   22590:	b2d2      	uxtb	r2, r2
   22592:	2a03      	cmp	r2, #3
   22594:	d104      	bne.n	225a0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   22596:	609f      	str	r7, [r3, #8]
   22598:	685a      	ldr	r2, [r3, #4]
   2259a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2259e:	605a      	str	r2, [r3, #4]
   225a0:	685a      	ldr	r2, [r3, #4]
   225a2:	f012 0fff 	tst.w	r2, #255	; 0xff
   225a6:	d101      	bne.n	225ac <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   225a8:	689b      	ldr	r3, [r3, #8]
   225aa:	b12b      	cbz	r3, 225b8 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   225ac:	3001      	adds	r0, #1
   225ae:	4285      	cmp	r5, r0
   225b0:	d1eb      	bne.n	2258a <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   225b2:	2000      	movs	r0, #0
   225b4:	bcf0      	pop	{r4, r5, r6, r7}
   225b6:	4770      	bx	lr
   225b8:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   225bc:	4421      	add	r1, r4
   225be:	6088      	str	r0, [r1, #8]
   225c0:	6843      	ldr	r3, [r0, #4]
   225c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   225c6:	f043 0301 	orr.w	r3, r3, #1
   225ca:	6043      	str	r3, [r0, #4]
   225cc:	bcf0      	pop	{r4, r5, r6, r7}
   225ce:	4770      	bx	lr
   225d0:	20023190 	.word	0x20023190
   225d4:	2002318c 	.word	0x2002318c

000225d8 <rpc_transport_ipc_tx_data_alloc>:
   225d8:	4b03      	ldr	r3, [pc, #12]	; (225e8 <rpc_transport_ipc_tx_data_alloc+0x10>)
   225da:	781b      	ldrb	r3, [r3, #0]
   225dc:	b90b      	cbnz	r3, 225e2 <rpc_transport_ipc_tx_data_alloc+0xa>
   225de:	f7f6 be0d 	b.w	191fc <nrf_shared_malloc>
   225e2:	2000      	movs	r0, #0
   225e4:	4770      	bx	lr
   225e6:	bf00      	nop
   225e8:	20027da0 	.word	0x20027da0

000225ec <rpc_transport_ipc_tx_suspend>:
   225ec:	2201      	movs	r2, #1
   225ee:	4b01      	ldr	r3, [pc, #4]	; (225f4 <rpc_transport_ipc_tx_suspend+0x8>)
   225f0:	701a      	strb	r2, [r3, #0]
   225f2:	4770      	bx	lr
   225f4:	20027da0 	.word	0x20027da0

000225f8 <rpc_transport_ipc_tx_shutdown>:
   225f8:	b4f0      	push	{r4, r5, r6, r7}
   225fa:	4a16      	ldr	r2, [pc, #88]	; (22654 <rpc_transport_ipc_tx_shutdown+0x5c>)
   225fc:	4b16      	ldr	r3, [pc, #88]	; (22658 <rpc_transport_ipc_tx_shutdown+0x60>)
   225fe:	6814      	ldr	r4, [r2, #0]
   22600:	681e      	ldr	r6, [r3, #0]
   22602:	6825      	ldr	r5, [r4, #0]
   22604:	b1ad      	cbz	r5, 22632 <rpc_transport_ipc_tx_shutdown+0x3a>
   22606:	2200      	movs	r2, #0
   22608:	4617      	mov	r7, r2
   2260a:	00d0      	lsls	r0, r2, #3
   2260c:	1823      	adds	r3, r4, r0
   2260e:	6859      	ldr	r1, [r3, #4]
   22610:	b2c9      	uxtb	r1, r1
   22612:	2903      	cmp	r1, #3
   22614:	d104      	bne.n	22620 <rpc_transport_ipc_tx_shutdown+0x28>
   22616:	609f      	str	r7, [r3, #8]
   22618:	6859      	ldr	r1, [r3, #4]
   2261a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   2261e:	6059      	str	r1, [r3, #4]
   22620:	6859      	ldr	r1, [r3, #4]
   22622:	f011 0fff 	tst.w	r1, #255	; 0xff
   22626:	d101      	bne.n	2262c <rpc_transport_ipc_tx_shutdown+0x34>
   22628:	689b      	ldr	r3, [r3, #8]
   2262a:	b123      	cbz	r3, 22636 <rpc_transport_ipc_tx_shutdown+0x3e>
   2262c:	3201      	adds	r2, #1
   2262e:	42aa      	cmp	r2, r5
   22630:	d1eb      	bne.n	2260a <rpc_transport_ipc_tx_shutdown+0x12>
   22632:	bcf0      	pop	{r4, r5, r6, r7}
   22634:	4770      	bx	lr
   22636:	0192      	lsls	r2, r2, #6
   22638:	4404      	add	r4, r0
   2263a:	18b0      	adds	r0, r6, r2
   2263c:	60a0      	str	r0, [r4, #8]
   2263e:	6843      	ldr	r3, [r0, #4]
   22640:	4906      	ldr	r1, [pc, #24]	; (2265c <rpc_transport_ipc_tx_shutdown+0x64>)
   22642:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   22646:	f043 0301 	orr.w	r3, r3, #1
   2264a:	6043      	str	r3, [r0, #4]
   2264c:	50b1      	str	r1, [r6, r2]
   2264e:	bcf0      	pop	{r4, r5, r6, r7}
   22650:	f7ff beda 	b.w	22408 <rpc_transport_ipc_tx_send>
   22654:	20023190 	.word	0x20023190
   22658:	2002318c 	.word	0x2002318c
   2265c:	00030001 	.word	0x00030001

00022660 <pdn_id_get_parser>:
   22660:	780b      	ldrb	r3, [r1, #0]
   22662:	b570      	push	{r4, r5, r6, lr}
   22664:	4606      	mov	r6, r0
   22666:	b1eb      	cbz	r3, 226a4 <pdn_id_get_parser+0x44>
   22668:	4608      	mov	r0, r1
   2266a:	2400      	movs	r4, #0
   2266c:	460a      	mov	r2, r1
   2266e:	2b20      	cmp	r3, #32
   22670:	4615      	mov	r5, r2
   22672:	d012      	beq.n	2269a <pdn_id_get_parser+0x3a>
   22674:	7013      	strb	r3, [r2, #0]
   22676:	3401      	adds	r4, #1
   22678:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2267c:	190a      	adds	r2, r1, r4
   2267e:	4615      	mov	r5, r2
   22680:	2b00      	cmp	r3, #0
   22682:	d1f4      	bne.n	2266e <pdn_id_get_parser+0xe>
   22684:	2400      	movs	r4, #0
   22686:	4608      	mov	r0, r1
   22688:	702c      	strb	r4, [r5, #0]
   2268a:	f007 fd8f 	bl	2a1ac <atoi>
   2268e:	4b06      	ldr	r3, [pc, #24]	; (226a8 <pdn_id_get_parser+0x48>)
   22690:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   22694:	6058      	str	r0, [r3, #4]
   22696:	4620      	mov	r0, r4
   22698:	bd70      	pop	{r4, r5, r6, pc}
   2269a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2269e:	2b00      	cmp	r3, #0
   226a0:	d1e5      	bne.n	2266e <pdn_id_get_parser+0xe>
   226a2:	e7ef      	b.n	22684 <pdn_id_get_parser+0x24>
   226a4:	460d      	mov	r5, r1
   226a6:	e7ed      	b.n	22684 <pdn_id_get_parser+0x24>
   226a8:	200232b8 	.word	0x200232b8

000226ac <conext_create_parser>:
   226ac:	780b      	ldrb	r3, [r1, #0]
   226ae:	b570      	push	{r4, r5, r6, lr}
   226b0:	4606      	mov	r6, r0
   226b2:	b1eb      	cbz	r3, 226f0 <conext_create_parser+0x44>
   226b4:	4608      	mov	r0, r1
   226b6:	2400      	movs	r4, #0
   226b8:	460a      	mov	r2, r1
   226ba:	2b20      	cmp	r3, #32
   226bc:	4615      	mov	r5, r2
   226be:	d012      	beq.n	226e6 <conext_create_parser+0x3a>
   226c0:	7013      	strb	r3, [r2, #0]
   226c2:	3401      	adds	r4, #1
   226c4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   226c8:	190a      	adds	r2, r1, r4
   226ca:	4615      	mov	r5, r2
   226cc:	2b00      	cmp	r3, #0
   226ce:	d1f4      	bne.n	226ba <conext_create_parser+0xe>
   226d0:	2400      	movs	r4, #0
   226d2:	4b08      	ldr	r3, [pc, #32]	; (226f4 <conext_create_parser+0x48>)
   226d4:	702c      	strb	r4, [r5, #0]
   226d6:	4608      	mov	r0, r1
   226d8:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
   226dc:	f007 fd66 	bl	2a1ac <atoi>
   226e0:	6028      	str	r0, [r5, #0]
   226e2:	4620      	mov	r0, r4
   226e4:	bd70      	pop	{r4, r5, r6, pc}
   226e6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   226ea:	2b00      	cmp	r3, #0
   226ec:	d1e5      	bne.n	226ba <conext_create_parser+0xe>
   226ee:	e7ef      	b.n	226d0 <conext_create_parser+0x24>
   226f0:	460d      	mov	r5, r1
   226f2:	e7ed      	b.n	226d0 <conext_create_parser+0x24>
   226f4:	200232b8 	.word	0x200232b8

000226f8 <ok_rsp_parser>:
   226f8:	b508      	push	{r3, lr}
   226fa:	2280      	movs	r2, #128	; 0x80
   226fc:	2100      	movs	r1, #0
   226fe:	4802      	ldr	r0, [pc, #8]	; (22708 <ok_rsp_parser+0x10>)
   22700:	f008 f8f0 	bl	2a8e4 <memset>
   22704:	2000      	movs	r0, #0
   22706:	bd08      	pop	{r3, pc}
   22708:	200231b8 	.word	0x200231b8

0002270c <event_wait.constprop.2>:
   2270c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2270e:	4c1f      	ldr	r4, [pc, #124]	; (2278c <event_wait.constprop.2+0x80>)
   22710:	b083      	sub	sp, #12
   22712:	4606      	mov	r6, r0
   22714:	491e      	ldr	r1, [pc, #120]	; (22790 <event_wait.constprop.2+0x84>)
   22716:	4620      	mov	r0, r4
   22718:	f008 fce0 	bl	2b0dc <strstr>
   2271c:	bb10      	cbnz	r0, 22764 <event_wait.constprop.2+0x58>
   2271e:	4605      	mov	r5, r0
   22720:	4601      	mov	r1, r0
   22722:	2280      	movs	r2, #128	; 0x80
   22724:	4620      	mov	r0, r4
   22726:	f008 f8dd 	bl	2a8e4 <memset>
   2272a:	4b1a      	ldr	r3, [pc, #104]	; (22794 <event_wait.constprop.2+0x88>)
   2272c:	9501      	str	r5, [sp, #4]
   2272e:	6818      	ldr	r0, [r3, #0]
   22730:	2280      	movs	r2, #128	; 0x80
   22732:	462b      	mov	r3, r5
   22734:	9500      	str	r5, [sp, #0]
   22736:	4621      	mov	r1, r4
   22738:	f7fd fc32 	bl	1ffa0 <at_interface_read>
   2273c:	4607      	mov	r7, r0
   2273e:	4816      	ldr	r0, [pc, #88]	; (22798 <event_wait.constprop.2+0x8c>)
   22740:	f008 fabc 	bl	2acbc <strlen>
   22744:	4287      	cmp	r7, r0
   22746:	4605      	mov	r5, r0
   22748:	db14      	blt.n	22774 <event_wait.constprop.2+0x68>
   2274a:	4602      	mov	r2, r0
   2274c:	4621      	mov	r1, r4
   2274e:	4812      	ldr	r0, [pc, #72]	; (22798 <event_wait.constprop.2+0x8c>)
   22750:	f008 fae2 	bl	2ad18 <strncmp>
   22754:	b970      	cbnz	r0, 22774 <event_wait.constprop.2+0x68>
   22756:	4630      	mov	r0, r6
   22758:	1961      	adds	r1, r4, r5
   2275a:	b003      	add	sp, #12
   2275c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   22760:	f7ff bfca 	b.w	226f8 <ok_rsp_parser>
   22764:	4620      	mov	r0, r4
   22766:	2280      	movs	r2, #128	; 0x80
   22768:	2100      	movs	r1, #0
   2276a:	f008 f8bb 	bl	2a8e4 <memset>
   2276e:	2000      	movs	r0, #0
   22770:	b003      	add	sp, #12
   22772:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22774:	4809      	ldr	r0, [pc, #36]	; (2279c <event_wait.constprop.2+0x90>)
   22776:	f008 faa1 	bl	2acbc <strlen>
   2277a:	4904      	ldr	r1, [pc, #16]	; (2278c <event_wait.constprop.2+0x80>)
   2277c:	4602      	mov	r2, r0
   2277e:	4807      	ldr	r0, [pc, #28]	; (2279c <event_wait.constprop.2+0x90>)
   22780:	f008 faca 	bl	2ad18 <strncmp>
   22784:	f04f 30ff 	mov.w	r0, #4294967295
   22788:	e7f2      	b.n	22770 <event_wait.constprop.2+0x64>
   2278a:	bf00      	nop
   2278c:	200231b8 	.word	0x200231b8
   22790:	00033ad4 	.word	0x00033ad4
   22794:	200231b4 	.word	0x200231b4
   22798:	00033ad0 	.word	0x00033ad0
   2279c:	00033adc 	.word	0x00033adc

000227a0 <pdn_id_get.part.0>:
   227a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   227a2:	4c1c      	ldr	r4, [pc, #112]	; (22814 <pdn_id_get.part.0+0x74>)
   227a4:	b083      	sub	sp, #12
   227a6:	2280      	movs	r2, #128	; 0x80
   227a8:	2100      	movs	r1, #0
   227aa:	4606      	mov	r6, r0
   227ac:	4620      	mov	r0, r4
   227ae:	f008 f899 	bl	2a8e4 <memset>
   227b2:	2300      	movs	r3, #0
   227b4:	4a18      	ldr	r2, [pc, #96]	; (22818 <pdn_id_get.part.0+0x78>)
   227b6:	4621      	mov	r1, r4
   227b8:	6810      	ldr	r0, [r2, #0]
   227ba:	e9cd 3300 	strd	r3, r3, [sp]
   227be:	2280      	movs	r2, #128	; 0x80
   227c0:	f7fd fbee 	bl	1ffa0 <at_interface_read>
   227c4:	4607      	mov	r7, r0
   227c6:	4815      	ldr	r0, [pc, #84]	; (2281c <pdn_id_get.part.0+0x7c>)
   227c8:	f008 fa78 	bl	2acbc <strlen>
   227cc:	4287      	cmp	r7, r0
   227ce:	db18      	blt.n	22802 <pdn_id_get.part.0+0x62>
   227d0:	4605      	mov	r5, r0
   227d2:	4602      	mov	r2, r0
   227d4:	4621      	mov	r1, r4
   227d6:	4811      	ldr	r0, [pc, #68]	; (2281c <pdn_id_get.part.0+0x7c>)
   227d8:	f008 fa9e 	bl	2ad18 <strncmp>
   227dc:	b988      	cbnz	r0, 22802 <pdn_id_get.part.0+0x62>
   227de:	1961      	adds	r1, r4, r5
   227e0:	4630      	mov	r0, r6
   227e2:	f7ff ff3d 	bl	22660 <pdn_id_get_parser>
   227e6:	b130      	cbz	r0, 227f6 <pdn_id_get.part.0+0x56>
   227e8:	4b0d      	ldr	r3, [pc, #52]	; (22820 <pdn_id_get.part.0+0x80>)
   227ea:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   227ee:	681a      	ldr	r2, [r3, #0]
   227f0:	605a      	str	r2, [r3, #4]
   227f2:	b003      	add	sp, #12
   227f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   227f6:	4630      	mov	r0, r6
   227f8:	b003      	add	sp, #12
   227fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   227fe:	f7ff bf85 	b.w	2270c <event_wait.constprop.2>
   22802:	4808      	ldr	r0, [pc, #32]	; (22824 <pdn_id_get.part.0+0x84>)
   22804:	f008 fa5a 	bl	2acbc <strlen>
   22808:	4902      	ldr	r1, [pc, #8]	; (22814 <pdn_id_get.part.0+0x74>)
   2280a:	4602      	mov	r2, r0
   2280c:	4805      	ldr	r0, [pc, #20]	; (22824 <pdn_id_get.part.0+0x84>)
   2280e:	f008 fa83 	bl	2ad18 <strncmp>
   22812:	e7e9      	b.n	227e8 <pdn_id_get.part.0+0x48>
   22814:	200231b8 	.word	0x200231b8
   22818:	200231b4 	.word	0x200231b4
   2281c:	00033ae4 	.word	0x00033ae4
   22820:	200232b8 	.word	0x200232b8
   22824:	00033adc 	.word	0x00033adc

00022828 <pdn_interface_init>:
   22828:	f04f 33ff 	mov.w	r3, #4294967295
   2282c:	b510      	push	{r4, lr}
   2282e:	4c09      	ldr	r4, [pc, #36]	; (22854 <pdn_interface_init+0x2c>)
   22830:	2228      	movs	r2, #40	; 0x28
   22832:	2100      	movs	r1, #0
   22834:	4808      	ldr	r0, [pc, #32]	; (22858 <pdn_interface_init+0x30>)
   22836:	6023      	str	r3, [r4, #0]
   22838:	f008 f854 	bl	2a8e4 <memset>
   2283c:	f240 2201 	movw	r2, #513	; 0x201
   22840:	2100      	movs	r1, #0
   22842:	2066      	movs	r0, #102	; 0x66
   22844:	f7fd fb1a 	bl	1fe7c <at_interface_open>
   22848:	2800      	cmp	r0, #0
   2284a:	6020      	str	r0, [r4, #0]
   2284c:	bfb4      	ite	lt
   2284e:	2003      	movlt	r0, #3
   22850:	2000      	movge	r0, #0
   22852:	bd10      	pop	{r4, pc}
   22854:	200231b4 	.word	0x200231b4
   22858:	200232b8 	.word	0x200232b8

0002285c <pdn_interface_open>:
   2285c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22860:	2866      	cmp	r0, #102	; 0x66
   22862:	b082      	sub	sp, #8
   22864:	f040 80ca 	bne.w	229fc <pdn_interface_open+0x1a0>
   22868:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2286c:	f040 80ad 	bne.w	229ca <pdn_interface_open+0x16e>
   22870:	f240 2302 	movw	r3, #514	; 0x202
   22874:	429a      	cmp	r2, r3
   22876:	f040 80a8 	bne.w	229ca <pdn_interface_open+0x16e>
   2287a:	4c63      	ldr	r4, [pc, #396]	; (22a08 <pdn_interface_open+0x1ac>)
   2287c:	6825      	ldr	r5, [r4, #0]
   2287e:	b34d      	cbz	r5, 228d4 <pdn_interface_open+0x78>
   22880:	6863      	ldr	r3, [r4, #4]
   22882:	2b00      	cmp	r3, #0
   22884:	f000 809d 	beq.w	229c2 <pdn_interface_open+0x166>
   22888:	68a3      	ldr	r3, [r4, #8]
   2288a:	2b00      	cmp	r3, #0
   2288c:	f000 809b 	beq.w	229c6 <pdn_interface_open+0x16a>
   22890:	68e3      	ldr	r3, [r4, #12]
   22892:	2b00      	cmp	r3, #0
   22894:	f000 809f 	beq.w	229d6 <pdn_interface_open+0x17a>
   22898:	6923      	ldr	r3, [r4, #16]
   2289a:	2b00      	cmp	r3, #0
   2289c:	f000 809d 	beq.w	229da <pdn_interface_open+0x17e>
   228a0:	6963      	ldr	r3, [r4, #20]
   228a2:	2b00      	cmp	r3, #0
   228a4:	f000 80a6 	beq.w	229f4 <pdn_interface_open+0x198>
   228a8:	69a3      	ldr	r3, [r4, #24]
   228aa:	2b00      	cmp	r3, #0
   228ac:	f000 80a4 	beq.w	229f8 <pdn_interface_open+0x19c>
   228b0:	69e3      	ldr	r3, [r4, #28]
   228b2:	2b00      	cmp	r3, #0
   228b4:	f000 8093 	beq.w	229de <pdn_interface_open+0x182>
   228b8:	6a23      	ldr	r3, [r4, #32]
   228ba:	b153      	cbz	r3, 228d2 <pdn_interface_open+0x76>
   228bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   228be:	2509      	movs	r5, #9
   228c0:	b143      	cbz	r3, 228d4 <pdn_interface_open+0x78>
   228c2:	200c      	movs	r0, #12
   228c4:	f00c fa27 	bl	2ed16 <bsd_os_errno_set>
   228c8:	f04f 30ff 	mov.w	r0, #4294967295
   228cc:	b002      	add	sp, #8
   228ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   228d2:	2508      	movs	r5, #8
   228d4:	2074      	movs	r0, #116	; 0x74
   228d6:	f7f6 fc67 	bl	191a8 <nrf_malloc>
   228da:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   228de:	2800      	cmp	r0, #0
   228e0:	d0ef      	beq.n	228c2 <pdn_interface_open+0x66>
   228e2:	2274      	movs	r2, #116	; 0x74
   228e4:	2100      	movs	r1, #0
   228e6:	f007 fffd 	bl	2a8e4 <memset>
   228ea:	2101      	movs	r1, #1
   228ec:	2603      	movs	r6, #3
   228ee:	f04f 30ff 	mov.w	r0, #4294967295
   228f2:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   228f6:	2280      	movs	r2, #128	; 0x80
   228f8:	6099      	str	r1, [r3, #8]
   228fa:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   228fe:	2100      	movs	r1, #0
   22900:	671e      	str	r6, [r3, #112]	; 0x70
   22902:	6058      	str	r0, [r3, #4]
   22904:	4841      	ldr	r0, [pc, #260]	; (22a0c <pdn_interface_open+0x1b0>)
   22906:	f007 ffed 	bl	2a8e4 <memset>
   2290a:	4f41      	ldr	r7, [pc, #260]	; (22a10 <pdn_interface_open+0x1b4>)
   2290c:	4a41      	ldr	r2, [pc, #260]	; (22a14 <pdn_interface_open+0x1b8>)
   2290e:	2180      	movs	r1, #128	; 0x80
   22910:	483e      	ldr	r0, [pc, #248]	; (22a0c <pdn_interface_open+0x1b0>)
   22912:	f008 f875 	bl	2aa00 <snprintf>
   22916:	483d      	ldr	r0, [pc, #244]	; (22a0c <pdn_interface_open+0x1b0>)
   22918:	f8d7 8000 	ldr.w	r8, [r7]
   2291c:	2600      	movs	r6, #0
   2291e:	f008 f9cd 	bl	2acbc <strlen>
   22922:	4633      	mov	r3, r6
   22924:	4602      	mov	r2, r0
   22926:	4939      	ldr	r1, [pc, #228]	; (22a0c <pdn_interface_open+0x1b0>)
   22928:	4640      	mov	r0, r8
   2292a:	9601      	str	r6, [sp, #4]
   2292c:	9600      	str	r6, [sp, #0]
   2292e:	f7fd fa55 	bl	1fddc <at_interface_write>
   22932:	4680      	mov	r8, r0
   22934:	4835      	ldr	r0, [pc, #212]	; (22a0c <pdn_interface_open+0x1b0>)
   22936:	f008 f9c1 	bl	2acbc <strlen>
   2293a:	4540      	cmp	r0, r8
   2293c:	d121      	bne.n	22982 <pdn_interface_open+0x126>
   2293e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 22a20 <pdn_interface_open+0x1c4>
   22942:	4631      	mov	r1, r6
   22944:	2280      	movs	r2, #128	; 0x80
   22946:	4640      	mov	r0, r8
   22948:	f007 ffcc 	bl	2a8e4 <memset>
   2294c:	6838      	ldr	r0, [r7, #0]
   2294e:	4633      	mov	r3, r6
   22950:	e9cd 6600 	strd	r6, r6, [sp]
   22954:	4641      	mov	r1, r8
   22956:	2280      	movs	r2, #128	; 0x80
   22958:	f7fd fb22 	bl	1ffa0 <at_interface_read>
   2295c:	4607      	mov	r7, r0
   2295e:	482e      	ldr	r0, [pc, #184]	; (22a18 <pdn_interface_open+0x1bc>)
   22960:	f008 f9ac 	bl	2acbc <strlen>
   22964:	4287      	cmp	r7, r0
   22966:	4606      	mov	r6, r0
   22968:	db3b      	blt.n	229e2 <pdn_interface_open+0x186>
   2296a:	4602      	mov	r2, r0
   2296c:	4641      	mov	r1, r8
   2296e:	482a      	ldr	r0, [pc, #168]	; (22a18 <pdn_interface_open+0x1bc>)
   22970:	f008 f9d2 	bl	2ad18 <strncmp>
   22974:	bba8      	cbnz	r0, 229e2 <pdn_interface_open+0x186>
   22976:	eb08 0106 	add.w	r1, r8, r6
   2297a:	4628      	mov	r0, r5
   2297c:	f7ff fe96 	bl	226ac <conext_create_parser>
   22980:	b178      	cbz	r0, 229a2 <pdn_interface_open+0x146>
   22982:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   22986:	f7f6 fc2d 	bl	191e4 <nrf_free>
   2298a:	2274      	movs	r2, #116	; 0x74
   2298c:	2100      	movs	r1, #0
   2298e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   22992:	f007 ffa7 	bl	2a8e4 <memset>
   22996:	2300      	movs	r3, #0
   22998:	f04f 30ff 	mov.w	r0, #4294967295
   2299c:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   229a0:	e794      	b.n	228cc <pdn_interface_open+0x70>
   229a2:	4628      	mov	r0, r5
   229a4:	f7ff feb2 	bl	2270c <event_wait.constprop.2>
   229a8:	2800      	cmp	r0, #0
   229aa:	d1ea      	bne.n	22982 <pdn_interface_open+0x126>
   229ac:	2202      	movs	r2, #2
   229ae:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   229b2:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   229b6:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   229ba:	609a      	str	r2, [r3, #8]
   229bc:	b002      	add	sp, #8
   229be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   229c2:	2501      	movs	r5, #1
   229c4:	e786      	b.n	228d4 <pdn_interface_open+0x78>
   229c6:	2502      	movs	r5, #2
   229c8:	e784      	b.n	228d4 <pdn_interface_open+0x78>
   229ca:	2016      	movs	r0, #22
   229cc:	f00c f9a3 	bl	2ed16 <bsd_os_errno_set>
   229d0:	f04f 30ff 	mov.w	r0, #4294967295
   229d4:	e77a      	b.n	228cc <pdn_interface_open+0x70>
   229d6:	2503      	movs	r5, #3
   229d8:	e77c      	b.n	228d4 <pdn_interface_open+0x78>
   229da:	2504      	movs	r5, #4
   229dc:	e77a      	b.n	228d4 <pdn_interface_open+0x78>
   229de:	2507      	movs	r5, #7
   229e0:	e778      	b.n	228d4 <pdn_interface_open+0x78>
   229e2:	480e      	ldr	r0, [pc, #56]	; (22a1c <pdn_interface_open+0x1c0>)
   229e4:	f008 f96a 	bl	2acbc <strlen>
   229e8:	490d      	ldr	r1, [pc, #52]	; (22a20 <pdn_interface_open+0x1c4>)
   229ea:	4602      	mov	r2, r0
   229ec:	480b      	ldr	r0, [pc, #44]	; (22a1c <pdn_interface_open+0x1c0>)
   229ee:	f008 f993 	bl	2ad18 <strncmp>
   229f2:	e7c6      	b.n	22982 <pdn_interface_open+0x126>
   229f4:	2505      	movs	r5, #5
   229f6:	e76d      	b.n	228d4 <pdn_interface_open+0x78>
   229f8:	2506      	movs	r5, #6
   229fa:	e76b      	b.n	228d4 <pdn_interface_open+0x78>
   229fc:	202f      	movs	r0, #47	; 0x2f
   229fe:	f00c f98a 	bl	2ed16 <bsd_os_errno_set>
   22a02:	f04f 30ff 	mov.w	r0, #4294967295
   22a06:	e761      	b.n	228cc <pdn_interface_open+0x70>
   22a08:	200232b8 	.word	0x200232b8
   22a0c:	20023238 	.word	0x20023238
   22a10:	200231b4 	.word	0x200231b4
   22a14:	00033b50 	.word	0x00033b50
   22a18:	00033b60 	.word	0x00033b60
   22a1c:	00033adc 	.word	0x00033adc
   22a20:	200231b8 	.word	0x200231b8

00022a24 <pdn_interface_connect>:
   22a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a28:	b083      	sub	sp, #12
   22a2a:	2900      	cmp	r1, #0
   22a2c:	f000 80e7 	beq.w	22bfe <pdn_interface_connect+0x1da>
   22a30:	2a64      	cmp	r2, #100	; 0x64
   22a32:	4691      	mov	r9, r2
   22a34:	f200 80e3 	bhi.w	22bfe <pdn_interface_connect+0x1da>
   22a38:	4604      	mov	r4, r0
   22a3a:	4608      	mov	r0, r1
   22a3c:	4688      	mov	r8, r1
   22a3e:	f008 f93d 	bl	2acbc <strlen>
   22a42:	2864      	cmp	r0, #100	; 0x64
   22a44:	f200 80db 	bhi.w	22bfe <pdn_interface_connect+0x1da>
   22a48:	4b71      	ldr	r3, [pc, #452]	; (22c10 <pdn_interface_connect+0x1ec>)
   22a4a:	43a3      	bics	r3, r4
   22a4c:	d15b      	bne.n	22b06 <pdn_interface_connect+0xe2>
   22a4e:	f024 44f1 	bic.w	r4, r4, #2021654528	; 0x78800000
   22a52:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   22a56:	2c09      	cmp	r4, #9
   22a58:	dc55      	bgt.n	22b06 <pdn_interface_connect+0xe2>
   22a5a:	4e6e      	ldr	r6, [pc, #440]	; (22c14 <pdn_interface_connect+0x1f0>)
   22a5c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   22a60:	2b00      	cmp	r3, #0
   22a62:	d050      	beq.n	22b06 <pdn_interface_connect+0xe2>
   22a64:	689a      	ldr	r2, [r3, #8]
   22a66:	2a00      	cmp	r2, #0
   22a68:	d04d      	beq.n	22b06 <pdn_interface_connect+0xe2>
   22a6a:	2c00      	cmp	r4, #0
   22a6c:	db4b      	blt.n	22b06 <pdn_interface_connect+0xe2>
   22a6e:	689b      	ldr	r3, [r3, #8]
   22a70:	2b02      	cmp	r3, #2
   22a72:	d148      	bne.n	22b06 <pdn_interface_connect+0xe2>
   22a74:	4f68      	ldr	r7, [pc, #416]	; (22c18 <pdn_interface_connect+0x1f4>)
   22a76:	2280      	movs	r2, #128	; 0x80
   22a78:	2100      	movs	r1, #0
   22a7a:	4638      	mov	r0, r7
   22a7c:	f007 ff32 	bl	2a8e4 <memset>
   22a80:	4a66      	ldr	r2, [pc, #408]	; (22c1c <pdn_interface_connect+0x1f8>)
   22a82:	2180      	movs	r1, #128	; 0x80
   22a84:	4638      	mov	r0, r7
   22a86:	f007 ffbb 	bl	2aa00 <snprintf>
   22a8a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   22a8e:	4605      	mov	r5, r0
   22a90:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
   22a94:	681b      	ldr	r3, [r3, #0]
   22a96:	4a62      	ldr	r2, [pc, #392]	; (22c20 <pdn_interface_connect+0x1fc>)
   22a98:	1838      	adds	r0, r7, r0
   22a9a:	f007 ffb1 	bl	2aa00 <snprintf>
   22a9e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   22aa2:	4405      	add	r5, r0
   22aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   22aa6:	f003 0203 	and.w	r2, r3, #3
   22aaa:	2a03      	cmp	r2, #3
   22aac:	f000 809e 	beq.w	22bec <pdn_interface_connect+0x1c8>
   22ab0:	079b      	lsls	r3, r3, #30
   22ab2:	eb07 0005 	add.w	r0, r7, r5
   22ab6:	f1c5 0180 	rsb	r1, r5, #128	; 0x80
   22aba:	bf4c      	ite	mi
   22abc:	4b59      	ldrmi	r3, [pc, #356]	; (22c24 <pdn_interface_connect+0x200>)
   22abe:	4b5a      	ldrpl	r3, [pc, #360]	; (22c28 <pdn_interface_connect+0x204>)
   22ac0:	4a5a      	ldr	r2, [pc, #360]	; (22c2c <pdn_interface_connect+0x208>)
   22ac2:	f007 ff9d 	bl	2aa00 <snprintf>
   22ac6:	4405      	add	r5, r0
   22ac8:	4643      	mov	r3, r8
   22aca:	4a59      	ldr	r2, [pc, #356]	; (22c30 <pdn_interface_connect+0x20c>)
   22acc:	f1c5 0180 	rsb	r1, r5, #128	; 0x80
   22ad0:	1978      	adds	r0, r7, r5
   22ad2:	f007 ff95 	bl	2aa00 <snprintf>
   22ad6:	4428      	add	r0, r5
   22ad8:	2880      	cmp	r0, #128	; 0x80
   22ada:	dc14      	bgt.n	22b06 <pdn_interface_connect+0xe2>
   22adc:	f8df a164 	ldr.w	sl, [pc, #356]	; 22c44 <pdn_interface_connect+0x220>
   22ae0:	484d      	ldr	r0, [pc, #308]	; (22c18 <pdn_interface_connect+0x1f4>)
   22ae2:	f8da 5000 	ldr.w	r5, [sl]
   22ae6:	f008 f8e9 	bl	2acbc <strlen>
   22aea:	2300      	movs	r3, #0
   22aec:	4602      	mov	r2, r0
   22aee:	9301      	str	r3, [sp, #4]
   22af0:	4628      	mov	r0, r5
   22af2:	9300      	str	r3, [sp, #0]
   22af4:	4948      	ldr	r1, [pc, #288]	; (22c18 <pdn_interface_connect+0x1f4>)
   22af6:	f7fd f971 	bl	1fddc <at_interface_write>
   22afa:	4605      	mov	r5, r0
   22afc:	4846      	ldr	r0, [pc, #280]	; (22c18 <pdn_interface_connect+0x1f4>)
   22afe:	f008 f8dd 	bl	2acbc <strlen>
   22b02:	42a8      	cmp	r0, r5
   22b04:	d007      	beq.n	22b16 <pdn_interface_connect+0xf2>
   22b06:	2009      	movs	r0, #9
   22b08:	f00c f905 	bl	2ed16 <bsd_os_errno_set>
   22b0c:	f04f 30ff 	mov.w	r0, #4294967295
   22b10:	b003      	add	sp, #12
   22b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22b16:	4620      	mov	r0, r4
   22b18:	f7ff fdf8 	bl	2270c <event_wait.constprop.2>
   22b1c:	4605      	mov	r5, r0
   22b1e:	2800      	cmp	r0, #0
   22b20:	d1f1      	bne.n	22b06 <pdn_interface_connect+0xe2>
   22b22:	4601      	mov	r1, r0
   22b24:	2280      	movs	r2, #128	; 0x80
   22b26:	483c      	ldr	r0, [pc, #240]	; (22c18 <pdn_interface_connect+0x1f4>)
   22b28:	f007 fedc 	bl	2a8e4 <memset>
   22b2c:	4a41      	ldr	r2, [pc, #260]	; (22c34 <pdn_interface_connect+0x210>)
   22b2e:	2180      	movs	r1, #128	; 0x80
   22b30:	4839      	ldr	r0, [pc, #228]	; (22c18 <pdn_interface_connect+0x1f4>)
   22b32:	f007 ff65 	bl	2aa00 <snprintf>
   22b36:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   22b3a:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
   22b3e:	681b      	ldr	r3, [r3, #0]
   22b40:	4a3d      	ldr	r2, [pc, #244]	; (22c38 <pdn_interface_connect+0x214>)
   22b42:	4438      	add	r0, r7
   22b44:	f007 ff5c 	bl	2aa00 <snprintf>
   22b48:	4833      	ldr	r0, [pc, #204]	; (22c18 <pdn_interface_connect+0x1f4>)
   22b4a:	f8da b000 	ldr.w	fp, [sl]
   22b4e:	f008 f8b5 	bl	2acbc <strlen>
   22b52:	462b      	mov	r3, r5
   22b54:	4602      	mov	r2, r0
   22b56:	9501      	str	r5, [sp, #4]
   22b58:	9500      	str	r5, [sp, #0]
   22b5a:	492f      	ldr	r1, [pc, #188]	; (22c18 <pdn_interface_connect+0x1f4>)
   22b5c:	4658      	mov	r0, fp
   22b5e:	f7fd f93d 	bl	1fddc <at_interface_write>
   22b62:	4605      	mov	r5, r0
   22b64:	482c      	ldr	r0, [pc, #176]	; (22c18 <pdn_interface_connect+0x1f4>)
   22b66:	f008 f8a9 	bl	2acbc <strlen>
   22b6a:	42a8      	cmp	r0, r5
   22b6c:	d1cb      	bne.n	22b06 <pdn_interface_connect+0xe2>
   22b6e:	4620      	mov	r0, r4
   22b70:	f7ff fdcc 	bl	2270c <event_wait.constprop.2>
   22b74:	4605      	mov	r5, r0
   22b76:	2800      	cmp	r0, #0
   22b78:	d1c5      	bne.n	22b06 <pdn_interface_connect+0xe2>
   22b7a:	2103      	movs	r1, #3
   22b7c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   22b80:	464a      	mov	r2, r9
   22b82:	6099      	str	r1, [r3, #8]
   22b84:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   22b88:	4641      	mov	r1, r8
   22b8a:	300c      	adds	r0, #12
   22b8c:	f7eb f824 	bl	dbd8 <memcpy>
   22b90:	2280      	movs	r2, #128	; 0x80
   22b92:	4629      	mov	r1, r5
   22b94:	4820      	ldr	r0, [pc, #128]	; (22c18 <pdn_interface_connect+0x1f4>)
   22b96:	f007 fea5 	bl	2a8e4 <memset>
   22b9a:	4a28      	ldr	r2, [pc, #160]	; (22c3c <pdn_interface_connect+0x218>)
   22b9c:	2180      	movs	r1, #128	; 0x80
   22b9e:	481e      	ldr	r0, [pc, #120]	; (22c18 <pdn_interface_connect+0x1f4>)
   22ba0:	f007 ff2e 	bl	2aa00 <snprintf>
   22ba4:	4601      	mov	r1, r0
   22ba6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   22baa:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   22bae:	681b      	ldr	r3, [r3, #0]
   22bb0:	4a21      	ldr	r2, [pc, #132]	; (22c38 <pdn_interface_connect+0x214>)
   22bb2:	1838      	adds	r0, r7, r0
   22bb4:	f007 ff24 	bl	2aa00 <snprintf>
   22bb8:	4817      	ldr	r0, [pc, #92]	; (22c18 <pdn_interface_connect+0x1f4>)
   22bba:	f8da 6000 	ldr.w	r6, [sl]
   22bbe:	f008 f87d 	bl	2acbc <strlen>
   22bc2:	462b      	mov	r3, r5
   22bc4:	4602      	mov	r2, r0
   22bc6:	4914      	ldr	r1, [pc, #80]	; (22c18 <pdn_interface_connect+0x1f4>)
   22bc8:	4630      	mov	r0, r6
   22bca:	9501      	str	r5, [sp, #4]
   22bcc:	9500      	str	r5, [sp, #0]
   22bce:	f7fd f905 	bl	1fddc <at_interface_write>
   22bd2:	4606      	mov	r6, r0
   22bd4:	4810      	ldr	r0, [pc, #64]	; (22c18 <pdn_interface_connect+0x1f4>)
   22bd6:	f008 f871 	bl	2acbc <strlen>
   22bda:	42b0      	cmp	r0, r6
   22bdc:	d115      	bne.n	22c0a <pdn_interface_connect+0x1e6>
   22bde:	4620      	mov	r0, r4
   22be0:	f7ff fdde 	bl	227a0 <pdn_id_get.part.0>
   22be4:	4628      	mov	r0, r5
   22be6:	b003      	add	sp, #12
   22be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22bec:	f1c5 0180 	rsb	r1, r5, #128	; 0x80
   22bf0:	1978      	adds	r0, r7, r5
   22bf2:	4b13      	ldr	r3, [pc, #76]	; (22c40 <pdn_interface_connect+0x21c>)
   22bf4:	4a0d      	ldr	r2, [pc, #52]	; (22c2c <pdn_interface_connect+0x208>)
   22bf6:	f007 ff03 	bl	2aa00 <snprintf>
   22bfa:	4405      	add	r5, r0
   22bfc:	e764      	b.n	22ac8 <pdn_interface_connect+0xa4>
   22bfe:	200e      	movs	r0, #14
   22c00:	f00c f889 	bl	2ed16 <bsd_os_errno_set>
   22c04:	f04f 30ff 	mov.w	r0, #4294967295
   22c08:	e782      	b.n	22b10 <pdn_interface_connect+0xec>
   22c0a:	4628      	mov	r0, r5
   22c0c:	e780      	b.n	22b10 <pdn_interface_connect+0xec>
   22c0e:	bf00      	nop
   22c10:	789a0000 	.word	0x789a0000
   22c14:	200232b8 	.word	0x200232b8
   22c18:	20023238 	.word	0x20023238
   22c1c:	00033afc 	.word	0x00033afc
   22c20:	00033b08 	.word	0x00033b08
   22c24:	00033b1c 	.word	0x00033b1c
   22c28:	00033b24 	.word	0x00033b24
   22c2c:	00033b14 	.word	0x00033b14
   22c30:	00033b48 	.word	0x00033b48
   22c34:	00033b28 	.word	0x00033b28
   22c38:	00033b34 	.word	0x00033b34
   22c3c:	00033b38 	.word	0x00033b38
   22c40:	00033b0c 	.word	0x00033b0c
   22c44:	200231b4 	.word	0x200231b4

00022c48 <pdn_interface_close>:
   22c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22c4c:	4b4c      	ldr	r3, [pc, #304]	; (22d80 <pdn_interface_close+0x138>)
   22c4e:	b082      	sub	sp, #8
   22c50:	4383      	bics	r3, r0
   22c52:	f040 8088 	bne.w	22d66 <pdn_interface_close+0x11e>
   22c56:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   22c5a:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   22c5e:	2c09      	cmp	r4, #9
   22c60:	f300 8081 	bgt.w	22d66 <pdn_interface_close+0x11e>
   22c64:	4e47      	ldr	r6, [pc, #284]	; (22d84 <pdn_interface_close+0x13c>)
   22c66:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   22c6a:	2800      	cmp	r0, #0
   22c6c:	d07b      	beq.n	22d66 <pdn_interface_close+0x11e>
   22c6e:	6883      	ldr	r3, [r0, #8]
   22c70:	2b00      	cmp	r3, #0
   22c72:	d078      	beq.n	22d66 <pdn_interface_close+0x11e>
   22c74:	2c00      	cmp	r4, #0
   22c76:	db76      	blt.n	22d66 <pdn_interface_close+0x11e>
   22c78:	6883      	ldr	r3, [r0, #8]
   22c7a:	2b03      	cmp	r3, #3
   22c7c:	d00d      	beq.n	22c9a <pdn_interface_close+0x52>
   22c7e:	f7f6 fab1 	bl	191e4 <nrf_free>
   22c82:	2274      	movs	r2, #116	; 0x74
   22c84:	2100      	movs	r1, #0
   22c86:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   22c8a:	f007 fe2b 	bl	2a8e4 <memset>
   22c8e:	2000      	movs	r0, #0
   22c90:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
   22c94:	b002      	add	sp, #8
   22c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22c9a:	4d3b      	ldr	r5, [pc, #236]	; (22d88 <pdn_interface_close+0x140>)
   22c9c:	2280      	movs	r2, #128	; 0x80
   22c9e:	2100      	movs	r1, #0
   22ca0:	4628      	mov	r0, r5
   22ca2:	f007 fe1f 	bl	2a8e4 <memset>
   22ca6:	4a39      	ldr	r2, [pc, #228]	; (22d8c <pdn_interface_close+0x144>)
   22ca8:	2180      	movs	r1, #128	; 0x80
   22caa:	4628      	mov	r0, r5
   22cac:	f007 fea8 	bl	2aa00 <snprintf>
   22cb0:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   22cb4:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
   22cb8:	681b      	ldr	r3, [r3, #0]
   22cba:	4a35      	ldr	r2, [pc, #212]	; (22d90 <pdn_interface_close+0x148>)
   22cbc:	4428      	add	r0, r5
   22cbe:	4f35      	ldr	r7, [pc, #212]	; (22d94 <pdn_interface_close+0x14c>)
   22cc0:	f007 fe9e 	bl	2aa00 <snprintf>
   22cc4:	4628      	mov	r0, r5
   22cc6:	f8d7 8000 	ldr.w	r8, [r7]
   22cca:	f007 fff7 	bl	2acbc <strlen>
   22cce:	2300      	movs	r3, #0
   22cd0:	4602      	mov	r2, r0
   22cd2:	4629      	mov	r1, r5
   22cd4:	4640      	mov	r0, r8
   22cd6:	e9cd 3300 	strd	r3, r3, [sp]
   22cda:	f7fd f87f 	bl	1fddc <at_interface_write>
   22cde:	4680      	mov	r8, r0
   22ce0:	4628      	mov	r0, r5
   22ce2:	f007 ffeb 	bl	2acbc <strlen>
   22ce6:	4540      	cmp	r0, r8
   22ce8:	d102      	bne.n	22cf0 <pdn_interface_close+0xa8>
   22cea:	4620      	mov	r0, r4
   22cec:	f7ff fd0e 	bl	2270c <event_wait.constprop.2>
   22cf0:	2280      	movs	r2, #128	; 0x80
   22cf2:	2100      	movs	r1, #0
   22cf4:	4824      	ldr	r0, [pc, #144]	; (22d88 <pdn_interface_close+0x140>)
   22cf6:	f007 fdf5 	bl	2a8e4 <memset>
   22cfa:	4a27      	ldr	r2, [pc, #156]	; (22d98 <pdn_interface_close+0x150>)
   22cfc:	2180      	movs	r1, #128	; 0x80
   22cfe:	4822      	ldr	r0, [pc, #136]	; (22d88 <pdn_interface_close+0x140>)
   22d00:	f007 fe7e 	bl	2aa00 <snprintf>
   22d04:	4601      	mov	r1, r0
   22d06:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   22d0a:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   22d0e:	681b      	ldr	r3, [r3, #0]
   22d10:	4a1f      	ldr	r2, [pc, #124]	; (22d90 <pdn_interface_close+0x148>)
   22d12:	1828      	adds	r0, r5, r0
   22d14:	f007 fe74 	bl	2aa00 <snprintf>
   22d18:	481b      	ldr	r0, [pc, #108]	; (22d88 <pdn_interface_close+0x140>)
   22d1a:	683d      	ldr	r5, [r7, #0]
   22d1c:	f007 ffce 	bl	2acbc <strlen>
   22d20:	2300      	movs	r3, #0
   22d22:	4602      	mov	r2, r0
   22d24:	9301      	str	r3, [sp, #4]
   22d26:	4628      	mov	r0, r5
   22d28:	9300      	str	r3, [sp, #0]
   22d2a:	4917      	ldr	r1, [pc, #92]	; (22d88 <pdn_interface_close+0x140>)
   22d2c:	f7fd f856 	bl	1fddc <at_interface_write>
   22d30:	4605      	mov	r5, r0
   22d32:	4815      	ldr	r0, [pc, #84]	; (22d88 <pdn_interface_close+0x140>)
   22d34:	f007 ffc2 	bl	2acbc <strlen>
   22d38:	42a8      	cmp	r0, r5
   22d3a:	d11a      	bne.n	22d72 <pdn_interface_close+0x12a>
   22d3c:	4620      	mov	r0, r4
   22d3e:	f7ff fce5 	bl	2270c <event_wait.constprop.2>
   22d42:	4605      	mov	r5, r0
   22d44:	b9a8      	cbnz	r0, 22d72 <pdn_interface_close+0x12a>
   22d46:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   22d4a:	f7f6 fa4b 	bl	191e4 <nrf_free>
   22d4e:	2274      	movs	r2, #116	; 0x74
   22d50:	4629      	mov	r1, r5
   22d52:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   22d56:	f007 fdc5 	bl	2a8e4 <memset>
   22d5a:	4628      	mov	r0, r5
   22d5c:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
   22d60:	b002      	add	sp, #8
   22d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22d66:	2009      	movs	r0, #9
   22d68:	f00b ffd5 	bl	2ed16 <bsd_os_errno_set>
   22d6c:	f04f 30ff 	mov.w	r0, #4294967295
   22d70:	e790      	b.n	22c94 <pdn_interface_close+0x4c>
   22d72:	2023      	movs	r0, #35	; 0x23
   22d74:	f00b ffcf 	bl	2ed16 <bsd_os_errno_set>
   22d78:	f04f 30ff 	mov.w	r0, #4294967295
   22d7c:	e78a      	b.n	22c94 <pdn_interface_close+0x4c>
   22d7e:	bf00      	nop
   22d80:	789a0000 	.word	0x789a0000
   22d84:	200232b8 	.word	0x200232b8
   22d88:	20023238 	.word	0x20023238
   22d8c:	00033af0 	.word	0x00033af0
   22d90:	00033b34 	.word	0x00033b34
   22d94:	200231b4 	.word	0x200231b4
   22d98:	00033afc 	.word	0x00033afc

00022d9c <pdn_interface_setopt>:
   22d9c:	b510      	push	{r4, lr}
   22d9e:	f240 2402 	movw	r4, #514	; 0x202
   22da2:	42a1      	cmp	r1, r4
   22da4:	d101      	bne.n	22daa <pdn_interface_setopt+0xe>
   22da6:	2a01      	cmp	r2, #1
   22da8:	d005      	beq.n	22db6 <pdn_interface_setopt+0x1a>
   22daa:	2016      	movs	r0, #22
   22dac:	f00b ffb3 	bl	2ed16 <bsd_os_errno_set>
   22db0:	f04f 30ff 	mov.w	r0, #4294967295
   22db4:	bd10      	pop	{r4, pc}
   22db6:	2b00      	cmp	r3, #0
   22db8:	d0f7      	beq.n	22daa <pdn_interface_setopt+0xe>
   22dba:	9a02      	ldr	r2, [sp, #8]
   22dbc:	2a00      	cmp	r2, #0
   22dbe:	d0f4      	beq.n	22daa <pdn_interface_setopt+0xe>
   22dc0:	4a1e      	ldr	r2, [pc, #120]	; (22e3c <pdn_interface_setopt+0xa0>)
   22dc2:	4382      	bics	r2, r0
   22dc4:	d001      	beq.n	22dca <pdn_interface_setopt+0x2e>
   22dc6:	2009      	movs	r0, #9
   22dc8:	e7f0      	b.n	22dac <pdn_interface_setopt+0x10>
   22dca:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   22dce:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   22dd2:	2809      	cmp	r0, #9
   22dd4:	dcf7      	bgt.n	22dc6 <pdn_interface_setopt+0x2a>
   22dd6:	4a1a      	ldr	r2, [pc, #104]	; (22e40 <pdn_interface_setopt+0xa4>)
   22dd8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   22ddc:	2a00      	cmp	r2, #0
   22dde:	d0f2      	beq.n	22dc6 <pdn_interface_setopt+0x2a>
   22de0:	6891      	ldr	r1, [r2, #8]
   22de2:	2900      	cmp	r1, #0
   22de4:	d0ef      	beq.n	22dc6 <pdn_interface_setopt+0x2a>
   22de6:	2800      	cmp	r0, #0
   22de8:	dbed      	blt.n	22dc6 <pdn_interface_setopt+0x2a>
   22dea:	6891      	ldr	r1, [r2, #8]
   22dec:	b1f9      	cbz	r1, 22e2e <pdn_interface_setopt+0x92>
   22dee:	6891      	ldr	r1, [r2, #8]
   22df0:	2903      	cmp	r1, #3
   22df2:	d01c      	beq.n	22e2e <pdn_interface_setopt+0x92>
   22df4:	6891      	ldr	r1, [r2, #8]
   22df6:	2904      	cmp	r1, #4
   22df8:	d019      	beq.n	22e2e <pdn_interface_setopt+0x92>
   22dfa:	9902      	ldr	r1, [sp, #8]
   22dfc:	0888      	lsrs	r0, r1, #2
   22dfe:	1e41      	subs	r1, r0, #1
   22e00:	2901      	cmp	r1, #1
   22e02:	d8d2      	bhi.n	22daa <pdn_interface_setopt+0xe>
   22e04:	9902      	ldr	r1, [sp, #8]
   22e06:	0789      	lsls	r1, r1, #30
   22e08:	d1cf      	bne.n	22daa <pdn_interface_setopt+0xe>
   22e0a:	6819      	ldr	r1, [r3, #0]
   22e0c:	2902      	cmp	r1, #2
   22e0e:	d010      	beq.n	22e32 <pdn_interface_setopt+0x96>
   22e10:	290a      	cmp	r1, #10
   22e12:	d1ca      	bne.n	22daa <pdn_interface_setopt+0xe>
   22e14:	2102      	movs	r1, #2
   22e16:	2802      	cmp	r0, #2
   22e18:	d106      	bne.n	22e28 <pdn_interface_setopt+0x8c>
   22e1a:	685b      	ldr	r3, [r3, #4]
   22e1c:	2b02      	cmp	r3, #2
   22e1e:	d00a      	beq.n	22e36 <pdn_interface_setopt+0x9a>
   22e20:	2b0a      	cmp	r3, #10
   22e22:	d1c2      	bne.n	22daa <pdn_interface_setopt+0xe>
   22e24:	f041 0102 	orr.w	r1, r1, #2
   22e28:	6711      	str	r1, [r2, #112]	; 0x70
   22e2a:	2000      	movs	r0, #0
   22e2c:	e7be      	b.n	22dac <pdn_interface_setopt+0x10>
   22e2e:	200e      	movs	r0, #14
   22e30:	e7bc      	b.n	22dac <pdn_interface_setopt+0x10>
   22e32:	2101      	movs	r1, #1
   22e34:	e7ef      	b.n	22e16 <pdn_interface_setopt+0x7a>
   22e36:	f041 0101 	orr.w	r1, r1, #1
   22e3a:	e7f5      	b.n	22e28 <pdn_interface_setopt+0x8c>
   22e3c:	789a0000 	.word	0x789a0000
   22e40:	200232b8 	.word	0x200232b8

00022e44 <pdn_interface_getopt>:
   22e44:	b510      	push	{r4, lr}
   22e46:	f240 2402 	movw	r4, #514	; 0x202
   22e4a:	42a1      	cmp	r1, r4
   22e4c:	d101      	bne.n	22e52 <pdn_interface_getopt+0xe>
   22e4e:	2a01      	cmp	r2, #1
   22e50:	d005      	beq.n	22e5e <pdn_interface_getopt+0x1a>
   22e52:	2016      	movs	r0, #22
   22e54:	f00b ff5f 	bl	2ed16 <bsd_os_errno_set>
   22e58:	f04f 30ff 	mov.w	r0, #4294967295
   22e5c:	bd10      	pop	{r4, pc}
   22e5e:	2b00      	cmp	r3, #0
   22e60:	d0f7      	beq.n	22e52 <pdn_interface_getopt+0xe>
   22e62:	9b02      	ldr	r3, [sp, #8]
   22e64:	2b00      	cmp	r3, #0
   22e66:	d0f4      	beq.n	22e52 <pdn_interface_getopt+0xe>
   22e68:	4b1c      	ldr	r3, [pc, #112]	; (22edc <pdn_interface_getopt+0x98>)
   22e6a:	4383      	bics	r3, r0
   22e6c:	d005      	beq.n	22e7a <pdn_interface_getopt+0x36>
   22e6e:	2009      	movs	r0, #9
   22e70:	f00b ff51 	bl	2ed16 <bsd_os_errno_set>
   22e74:	f04f 30ff 	mov.w	r0, #4294967295
   22e78:	bd10      	pop	{r4, pc}
   22e7a:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   22e7e:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   22e82:	2809      	cmp	r0, #9
   22e84:	dcf3      	bgt.n	22e6e <pdn_interface_getopt+0x2a>
   22e86:	4b16      	ldr	r3, [pc, #88]	; (22ee0 <pdn_interface_getopt+0x9c>)
   22e88:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   22e8c:	2b00      	cmp	r3, #0
   22e8e:	d0ee      	beq.n	22e6e <pdn_interface_getopt+0x2a>
   22e90:	689a      	ldr	r2, [r3, #8]
   22e92:	2a00      	cmp	r2, #0
   22e94:	d0eb      	beq.n	22e6e <pdn_interface_getopt+0x2a>
   22e96:	2800      	cmp	r0, #0
   22e98:	dbe9      	blt.n	22e6e <pdn_interface_getopt+0x2a>
   22e9a:	689a      	ldr	r2, [r3, #8]
   22e9c:	b1e2      	cbz	r2, 22ed8 <pdn_interface_getopt+0x94>
   22e9e:	689a      	ldr	r2, [r3, #8]
   22ea0:	2a04      	cmp	r2, #4
   22ea2:	d019      	beq.n	22ed8 <pdn_interface_getopt+0x94>
   22ea4:	9a02      	ldr	r2, [sp, #8]
   22ea6:	6812      	ldr	r2, [r2, #0]
   22ea8:	2a07      	cmp	r2, #7
   22eaa:	d9d2      	bls.n	22e52 <pdn_interface_getopt+0xe>
   22eac:	f012 0203 	ands.w	r2, r2, #3
   22eb0:	d1cf      	bne.n	22e52 <pdn_interface_getopt+0xe>
   22eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   22eb4:	0799      	lsls	r1, r3, #30
   22eb6:	d503      	bpl.n	22ec0 <pdn_interface_getopt+0x7c>
   22eb8:	210a      	movs	r1, #10
   22eba:	2201      	movs	r2, #1
   22ebc:	9802      	ldr	r0, [sp, #8]
   22ebe:	6001      	str	r1, [r0, #0]
   22ec0:	07db      	lsls	r3, r3, #31
   22ec2:	d504      	bpl.n	22ece <pdn_interface_getopt+0x8a>
   22ec4:	2302      	movs	r3, #2
   22ec6:	9902      	ldr	r1, [sp, #8]
   22ec8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   22ecc:	3201      	adds	r2, #1
   22ece:	9b02      	ldr	r3, [sp, #8]
   22ed0:	0092      	lsls	r2, r2, #2
   22ed2:	601a      	str	r2, [r3, #0]
   22ed4:	2000      	movs	r0, #0
   22ed6:	e7bd      	b.n	22e54 <pdn_interface_getopt+0x10>
   22ed8:	200e      	movs	r0, #14
   22eda:	e7bb      	b.n	22e54 <pdn_interface_getopt+0x10>
   22edc:	789a0000 	.word	0x789a0000
   22ee0:	200232b8 	.word	0x200232b8

00022ee4 <pdn_interface_pdn_id_get>:
   22ee4:	2900      	cmp	r1, #0
   22ee6:	f000 839b 	beq.w	23620 <pdn_interface_pdn_id_get+0x73c>
   22eea:	b5f0      	push	{r4, r5, r6, r7, lr}
   22eec:	4ca2      	ldr	r4, [pc, #648]	; (23178 <pdn_interface_pdn_id_get+0x294>)
   22eee:	2802      	cmp	r0, #2
   22ef0:	b083      	sub	sp, #12
   22ef2:	460d      	mov	r5, r1
   22ef4:	6823      	ldr	r3, [r4, #0]
   22ef6:	f000 8093 	beq.w	23020 <pdn_interface_pdn_id_get+0x13c>
   22efa:	280a      	cmp	r0, #10
   22efc:	d03e      	beq.n	22f7c <pdn_interface_pdn_id_get+0x98>
   22efe:	b11b      	cbz	r3, 22f08 <pdn_interface_pdn_id_get+0x24>
   22f00:	689b      	ldr	r3, [r3, #8]
   22f02:	2b03      	cmp	r3, #3
   22f04:	f000 8126 	beq.w	23154 <pdn_interface_pdn_id_get+0x270>
   22f08:	6863      	ldr	r3, [r4, #4]
   22f0a:	b11b      	cbz	r3, 22f14 <pdn_interface_pdn_id_get+0x30>
   22f0c:	689b      	ldr	r3, [r3, #8]
   22f0e:	2b03      	cmp	r3, #3
   22f10:	f000 810f 	beq.w	23132 <pdn_interface_pdn_id_get+0x24e>
   22f14:	68a3      	ldr	r3, [r4, #8]
   22f16:	b11b      	cbz	r3, 22f20 <pdn_interface_pdn_id_get+0x3c>
   22f18:	689b      	ldr	r3, [r3, #8]
   22f1a:	2b03      	cmp	r3, #3
   22f1c:	f000 80f8 	beq.w	23110 <pdn_interface_pdn_id_get+0x22c>
   22f20:	68e3      	ldr	r3, [r4, #12]
   22f22:	b11b      	cbz	r3, 22f2c <pdn_interface_pdn_id_get+0x48>
   22f24:	689b      	ldr	r3, [r3, #8]
   22f26:	2b03      	cmp	r3, #3
   22f28:	f000 80e1 	beq.w	230ee <pdn_interface_pdn_id_get+0x20a>
   22f2c:	6923      	ldr	r3, [r4, #16]
   22f2e:	b11b      	cbz	r3, 22f38 <pdn_interface_pdn_id_get+0x54>
   22f30:	689b      	ldr	r3, [r3, #8]
   22f32:	2b03      	cmp	r3, #3
   22f34:	f000 8122 	beq.w	2317c <pdn_interface_pdn_id_get+0x298>
   22f38:	6963      	ldr	r3, [r4, #20]
   22f3a:	b11b      	cbz	r3, 22f44 <pdn_interface_pdn_id_get+0x60>
   22f3c:	689b      	ldr	r3, [r3, #8]
   22f3e:	2b03      	cmp	r3, #3
   22f40:	f000 8160 	beq.w	23204 <pdn_interface_pdn_id_get+0x320>
   22f44:	69a3      	ldr	r3, [r4, #24]
   22f46:	b11b      	cbz	r3, 22f50 <pdn_interface_pdn_id_get+0x6c>
   22f48:	689b      	ldr	r3, [r3, #8]
   22f4a:	2b03      	cmp	r3, #3
   22f4c:	f000 8149 	beq.w	231e2 <pdn_interface_pdn_id_get+0x2fe>
   22f50:	69e3      	ldr	r3, [r4, #28]
   22f52:	b11b      	cbz	r3, 22f5c <pdn_interface_pdn_id_get+0x78>
   22f54:	689b      	ldr	r3, [r3, #8]
   22f56:	2b03      	cmp	r3, #3
   22f58:	f000 8132 	beq.w	231c0 <pdn_interface_pdn_id_get+0x2dc>
   22f5c:	6a23      	ldr	r3, [r4, #32]
   22f5e:	b11b      	cbz	r3, 22f68 <pdn_interface_pdn_id_get+0x84>
   22f60:	689b      	ldr	r3, [r3, #8]
   22f62:	2b03      	cmp	r3, #3
   22f64:	f000 811b 	beq.w	2319e <pdn_interface_pdn_id_get+0x2ba>
   22f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22f6a:	b11b      	cbz	r3, 22f74 <pdn_interface_pdn_id_get+0x90>
   22f6c:	689b      	ldr	r3, [r3, #8]
   22f6e:	2b03      	cmp	r3, #3
   22f70:	f000 80ac 	beq.w	230cc <pdn_interface_pdn_id_get+0x1e8>
   22f74:	f04f 30ff 	mov.w	r0, #4294967295
   22f78:	b003      	add	sp, #12
   22f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22f7c:	b11b      	cbz	r3, 22f86 <pdn_interface_pdn_id_get+0xa2>
   22f7e:	689b      	ldr	r3, [r3, #8]
   22f80:	2b03      	cmp	r3, #3
   22f82:	f000 8319 	beq.w	235b8 <pdn_interface_pdn_id_get+0x6d4>
   22f86:	6863      	ldr	r3, [r4, #4]
   22f88:	b11b      	cbz	r3, 22f92 <pdn_interface_pdn_id_get+0xae>
   22f8a:	689b      	ldr	r3, [r3, #8]
   22f8c:	2b03      	cmp	r3, #3
   22f8e:	f000 82e1 	beq.w	23554 <pdn_interface_pdn_id_get+0x670>
   22f92:	68a3      	ldr	r3, [r4, #8]
   22f94:	b11b      	cbz	r3, 22f9e <pdn_interface_pdn_id_get+0xba>
   22f96:	689b      	ldr	r3, [r3, #8]
   22f98:	2b03      	cmp	r3, #3
   22f9a:	f000 82bb 	beq.w	23514 <pdn_interface_pdn_id_get+0x630>
   22f9e:	68e3      	ldr	r3, [r4, #12]
   22fa0:	b11b      	cbz	r3, 22faa <pdn_interface_pdn_id_get+0xc6>
   22fa2:	689e      	ldr	r6, [r3, #8]
   22fa4:	2e03      	cmp	r6, #3
   22fa6:	f000 81d6 	beq.w	23356 <pdn_interface_pdn_id_get+0x472>
   22faa:	6923      	ldr	r3, [r4, #16]
   22fac:	b11b      	cbz	r3, 22fb6 <pdn_interface_pdn_id_get+0xd2>
   22fae:	689b      	ldr	r3, [r3, #8]
   22fb0:	2b03      	cmp	r3, #3
   22fb2:	f000 81e9 	beq.w	23388 <pdn_interface_pdn_id_get+0x4a4>
   22fb6:	6963      	ldr	r3, [r4, #20]
   22fb8:	b11b      	cbz	r3, 22fc2 <pdn_interface_pdn_id_get+0xde>
   22fba:	689b      	ldr	r3, [r3, #8]
   22fbc:	2b03      	cmp	r3, #3
   22fbe:	f000 81fb 	beq.w	233b8 <pdn_interface_pdn_id_get+0x4d4>
   22fc2:	69a3      	ldr	r3, [r4, #24]
   22fc4:	b11b      	cbz	r3, 22fce <pdn_interface_pdn_id_get+0xea>
   22fc6:	689b      	ldr	r3, [r3, #8]
   22fc8:	2b03      	cmp	r3, #3
   22fca:	f000 820d 	beq.w	233e8 <pdn_interface_pdn_id_get+0x504>
   22fce:	69e3      	ldr	r3, [r4, #28]
   22fd0:	b11b      	cbz	r3, 22fda <pdn_interface_pdn_id_get+0xf6>
   22fd2:	689b      	ldr	r3, [r3, #8]
   22fd4:	2b03      	cmp	r3, #3
   22fd6:	f000 821f 	beq.w	23418 <pdn_interface_pdn_id_get+0x534>
   22fda:	6a23      	ldr	r3, [r4, #32]
   22fdc:	b11b      	cbz	r3, 22fe6 <pdn_interface_pdn_id_get+0x102>
   22fde:	689b      	ldr	r3, [r3, #8]
   22fe0:	2b03      	cmp	r3, #3
   22fe2:	f000 8233 	beq.w	2344c <pdn_interface_pdn_id_get+0x568>
   22fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22fe8:	2b00      	cmp	r3, #0
   22fea:	d0c3      	beq.n	22f74 <pdn_interface_pdn_id_get+0x90>
   22fec:	689b      	ldr	r3, [r3, #8]
   22fee:	2b03      	cmp	r3, #3
   22ff0:	d1c0      	bne.n	22f74 <pdn_interface_pdn_id_get+0x90>
   22ff2:	4628      	mov	r0, r5
   22ff4:	f007 fe62 	bl	2acbc <strlen>
   22ff8:	4606      	mov	r6, r0
   22ffa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   22ffc:	300c      	adds	r0, #12
   22ffe:	f007 fe5d 	bl	2acbc <strlen>
   23002:	4286      	cmp	r6, r0
   23004:	d1b6      	bne.n	22f74 <pdn_interface_pdn_id_get+0x90>
   23006:	6a61      	ldr	r1, [r4, #36]	; 0x24
   23008:	4628      	mov	r0, r5
   2300a:	310c      	adds	r1, #12
   2300c:	f7ea fe5a 	bl	dcc4 <strcmp>
   23010:	2800      	cmp	r0, #0
   23012:	d1af      	bne.n	22f74 <pdn_interface_pdn_id_get+0x90>
   23014:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23016:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   23018:	0792      	lsls	r2, r2, #30
   2301a:	d5ab      	bpl.n	22f74 <pdn_interface_pdn_id_get+0x90>
   2301c:	2609      	movs	r6, #9
   2301e:	e11a      	b.n	23256 <pdn_interface_pdn_id_get+0x372>
   23020:	b11b      	cbz	r3, 2302a <pdn_interface_pdn_id_get+0x146>
   23022:	689b      	ldr	r3, [r3, #8]
   23024:	2b03      	cmp	r3, #3
   23026:	f000 82e1 	beq.w	235ec <pdn_interface_pdn_id_get+0x708>
   2302a:	6863      	ldr	r3, [r4, #4]
   2302c:	b11b      	cbz	r3, 23036 <pdn_interface_pdn_id_get+0x152>
   2302e:	689b      	ldr	r3, [r3, #8]
   23030:	2b03      	cmp	r3, #3
   23032:	f000 82a9 	beq.w	23588 <pdn_interface_pdn_id_get+0x6a4>
   23036:	68a3      	ldr	r3, [r4, #8]
   23038:	b11b      	cbz	r3, 23042 <pdn_interface_pdn_id_get+0x15e>
   2303a:	689b      	ldr	r3, [r3, #8]
   2303c:	2b03      	cmp	r3, #3
   2303e:	f000 824f 	beq.w	234e0 <pdn_interface_pdn_id_get+0x5fc>
   23042:	68e3      	ldr	r3, [r4, #12]
   23044:	b11b      	cbz	r3, 2304e <pdn_interface_pdn_id_get+0x16a>
   23046:	689e      	ldr	r6, [r3, #8]
   23048:	2e03      	cmp	r6, #3
   2304a:	f000 80ec 	beq.w	23226 <pdn_interface_pdn_id_get+0x342>
   2304e:	6923      	ldr	r3, [r4, #16]
   23050:	b11b      	cbz	r3, 2305a <pdn_interface_pdn_id_get+0x176>
   23052:	689b      	ldr	r3, [r3, #8]
   23054:	2b03      	cmp	r3, #3
   23056:	f000 8130 	beq.w	232ba <pdn_interface_pdn_id_get+0x3d6>
   2305a:	6963      	ldr	r3, [r4, #20]
   2305c:	b11b      	cbz	r3, 23066 <pdn_interface_pdn_id_get+0x182>
   2305e:	689b      	ldr	r3, [r3, #8]
   23060:	2b03      	cmp	r3, #3
   23062:	f000 8144 	beq.w	232ee <pdn_interface_pdn_id_get+0x40a>
   23066:	69a3      	ldr	r3, [r4, #24]
   23068:	b11b      	cbz	r3, 23072 <pdn_interface_pdn_id_get+0x18e>
   2306a:	689b      	ldr	r3, [r3, #8]
   2306c:	2b03      	cmp	r3, #3
   2306e:	f000 8158 	beq.w	23322 <pdn_interface_pdn_id_get+0x43e>
   23072:	69e3      	ldr	r3, [r4, #28]
   23074:	b11b      	cbz	r3, 2307e <pdn_interface_pdn_id_get+0x19a>
   23076:	689b      	ldr	r3, [r3, #8]
   23078:	2b03      	cmp	r3, #3
   2307a:	f000 8201 	beq.w	23480 <pdn_interface_pdn_id_get+0x59c>
   2307e:	6a23      	ldr	r3, [r4, #32]
   23080:	b11b      	cbz	r3, 2308a <pdn_interface_pdn_id_get+0x1a6>
   23082:	689b      	ldr	r3, [r3, #8]
   23084:	2b03      	cmp	r3, #3
   23086:	f000 8213 	beq.w	234b0 <pdn_interface_pdn_id_get+0x5cc>
   2308a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2308c:	2b00      	cmp	r3, #0
   2308e:	f43f af71 	beq.w	22f74 <pdn_interface_pdn_id_get+0x90>
   23092:	689b      	ldr	r3, [r3, #8]
   23094:	2b03      	cmp	r3, #3
   23096:	f47f af6d 	bne.w	22f74 <pdn_interface_pdn_id_get+0x90>
   2309a:	4628      	mov	r0, r5
   2309c:	f007 fe0e 	bl	2acbc <strlen>
   230a0:	4606      	mov	r6, r0
   230a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   230a4:	300c      	adds	r0, #12
   230a6:	f007 fe09 	bl	2acbc <strlen>
   230aa:	4286      	cmp	r6, r0
   230ac:	f47f af62 	bne.w	22f74 <pdn_interface_pdn_id_get+0x90>
   230b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   230b2:	4628      	mov	r0, r5
   230b4:	310c      	adds	r1, #12
   230b6:	f7ea fe05 	bl	dcc4 <strcmp>
   230ba:	2800      	cmp	r0, #0
   230bc:	f47f af5a 	bne.w	22f74 <pdn_interface_pdn_id_get+0x90>
   230c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   230c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   230c4:	07d2      	lsls	r2, r2, #31
   230c6:	f57f af55 	bpl.w	22f74 <pdn_interface_pdn_id_get+0x90>
   230ca:	e7a7      	b.n	2301c <pdn_interface_pdn_id_get+0x138>
   230cc:	4628      	mov	r0, r5
   230ce:	f007 fdf5 	bl	2acbc <strlen>
   230d2:	4606      	mov	r6, r0
   230d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   230d6:	300c      	adds	r0, #12
   230d8:	f007 fdf0 	bl	2acbc <strlen>
   230dc:	4286      	cmp	r6, r0
   230de:	f47f af49 	bne.w	22f74 <pdn_interface_pdn_id_get+0x90>
   230e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   230e4:	4628      	mov	r0, r5
   230e6:	310c      	adds	r1, #12
   230e8:	f7ea fdec 	bl	dcc4 <strcmp>
   230ec:	e742      	b.n	22f74 <pdn_interface_pdn_id_get+0x90>
   230ee:	4628      	mov	r0, r5
   230f0:	f007 fde4 	bl	2acbc <strlen>
   230f4:	4606      	mov	r6, r0
   230f6:	68e0      	ldr	r0, [r4, #12]
   230f8:	300c      	adds	r0, #12
   230fa:	f007 fddf 	bl	2acbc <strlen>
   230fe:	4286      	cmp	r6, r0
   23100:	f47f af14 	bne.w	22f2c <pdn_interface_pdn_id_get+0x48>
   23104:	68e1      	ldr	r1, [r4, #12]
   23106:	4628      	mov	r0, r5
   23108:	310c      	adds	r1, #12
   2310a:	f7ea fddb 	bl	dcc4 <strcmp>
   2310e:	e70d      	b.n	22f2c <pdn_interface_pdn_id_get+0x48>
   23110:	4628      	mov	r0, r5
   23112:	f007 fdd3 	bl	2acbc <strlen>
   23116:	4606      	mov	r6, r0
   23118:	68a0      	ldr	r0, [r4, #8]
   2311a:	300c      	adds	r0, #12
   2311c:	f007 fdce 	bl	2acbc <strlen>
   23120:	4286      	cmp	r6, r0
   23122:	f47f aefd 	bne.w	22f20 <pdn_interface_pdn_id_get+0x3c>
   23126:	68a1      	ldr	r1, [r4, #8]
   23128:	4628      	mov	r0, r5
   2312a:	310c      	adds	r1, #12
   2312c:	f7ea fdca 	bl	dcc4 <strcmp>
   23130:	e6f6      	b.n	22f20 <pdn_interface_pdn_id_get+0x3c>
   23132:	4628      	mov	r0, r5
   23134:	f007 fdc2 	bl	2acbc <strlen>
   23138:	4606      	mov	r6, r0
   2313a:	6860      	ldr	r0, [r4, #4]
   2313c:	300c      	adds	r0, #12
   2313e:	f007 fdbd 	bl	2acbc <strlen>
   23142:	4286      	cmp	r6, r0
   23144:	f47f aee6 	bne.w	22f14 <pdn_interface_pdn_id_get+0x30>
   23148:	6861      	ldr	r1, [r4, #4]
   2314a:	4628      	mov	r0, r5
   2314c:	310c      	adds	r1, #12
   2314e:	f7ea fdb9 	bl	dcc4 <strcmp>
   23152:	e6df      	b.n	22f14 <pdn_interface_pdn_id_get+0x30>
   23154:	4608      	mov	r0, r1
   23156:	f007 fdb1 	bl	2acbc <strlen>
   2315a:	4606      	mov	r6, r0
   2315c:	6820      	ldr	r0, [r4, #0]
   2315e:	300c      	adds	r0, #12
   23160:	f007 fdac 	bl	2acbc <strlen>
   23164:	42b0      	cmp	r0, r6
   23166:	f47f aecf 	bne.w	22f08 <pdn_interface_pdn_id_get+0x24>
   2316a:	6821      	ldr	r1, [r4, #0]
   2316c:	4628      	mov	r0, r5
   2316e:	310c      	adds	r1, #12
   23170:	f7ea fda8 	bl	dcc4 <strcmp>
   23174:	e6c8      	b.n	22f08 <pdn_interface_pdn_id_get+0x24>
   23176:	bf00      	nop
   23178:	200232b8 	.word	0x200232b8
   2317c:	4628      	mov	r0, r5
   2317e:	f007 fd9d 	bl	2acbc <strlen>
   23182:	4606      	mov	r6, r0
   23184:	6920      	ldr	r0, [r4, #16]
   23186:	300c      	adds	r0, #12
   23188:	f007 fd98 	bl	2acbc <strlen>
   2318c:	4286      	cmp	r6, r0
   2318e:	f47f aed3 	bne.w	22f38 <pdn_interface_pdn_id_get+0x54>
   23192:	6921      	ldr	r1, [r4, #16]
   23194:	4628      	mov	r0, r5
   23196:	310c      	adds	r1, #12
   23198:	f7ea fd94 	bl	dcc4 <strcmp>
   2319c:	e6cc      	b.n	22f38 <pdn_interface_pdn_id_get+0x54>
   2319e:	4628      	mov	r0, r5
   231a0:	f007 fd8c 	bl	2acbc <strlen>
   231a4:	4606      	mov	r6, r0
   231a6:	6a20      	ldr	r0, [r4, #32]
   231a8:	300c      	adds	r0, #12
   231aa:	f007 fd87 	bl	2acbc <strlen>
   231ae:	4286      	cmp	r6, r0
   231b0:	f47f aeda 	bne.w	22f68 <pdn_interface_pdn_id_get+0x84>
   231b4:	6a21      	ldr	r1, [r4, #32]
   231b6:	4628      	mov	r0, r5
   231b8:	310c      	adds	r1, #12
   231ba:	f7ea fd83 	bl	dcc4 <strcmp>
   231be:	e6d3      	b.n	22f68 <pdn_interface_pdn_id_get+0x84>
   231c0:	4628      	mov	r0, r5
   231c2:	f007 fd7b 	bl	2acbc <strlen>
   231c6:	4606      	mov	r6, r0
   231c8:	69e0      	ldr	r0, [r4, #28]
   231ca:	300c      	adds	r0, #12
   231cc:	f007 fd76 	bl	2acbc <strlen>
   231d0:	4286      	cmp	r6, r0
   231d2:	f47f aec3 	bne.w	22f5c <pdn_interface_pdn_id_get+0x78>
   231d6:	69e1      	ldr	r1, [r4, #28]
   231d8:	4628      	mov	r0, r5
   231da:	310c      	adds	r1, #12
   231dc:	f7ea fd72 	bl	dcc4 <strcmp>
   231e0:	e6bc      	b.n	22f5c <pdn_interface_pdn_id_get+0x78>
   231e2:	4628      	mov	r0, r5
   231e4:	f007 fd6a 	bl	2acbc <strlen>
   231e8:	4606      	mov	r6, r0
   231ea:	69a0      	ldr	r0, [r4, #24]
   231ec:	300c      	adds	r0, #12
   231ee:	f007 fd65 	bl	2acbc <strlen>
   231f2:	4286      	cmp	r6, r0
   231f4:	f47f aeac 	bne.w	22f50 <pdn_interface_pdn_id_get+0x6c>
   231f8:	69a1      	ldr	r1, [r4, #24]
   231fa:	4628      	mov	r0, r5
   231fc:	310c      	adds	r1, #12
   231fe:	f7ea fd61 	bl	dcc4 <strcmp>
   23202:	e6a5      	b.n	22f50 <pdn_interface_pdn_id_get+0x6c>
   23204:	4628      	mov	r0, r5
   23206:	f007 fd59 	bl	2acbc <strlen>
   2320a:	4606      	mov	r6, r0
   2320c:	6960      	ldr	r0, [r4, #20]
   2320e:	300c      	adds	r0, #12
   23210:	f007 fd54 	bl	2acbc <strlen>
   23214:	4286      	cmp	r6, r0
   23216:	f47f ae95 	bne.w	22f44 <pdn_interface_pdn_id_get+0x60>
   2321a:	6961      	ldr	r1, [r4, #20]
   2321c:	4628      	mov	r0, r5
   2321e:	310c      	adds	r1, #12
   23220:	f7ea fd50 	bl	dcc4 <strcmp>
   23224:	e68e      	b.n	22f44 <pdn_interface_pdn_id_get+0x60>
   23226:	4628      	mov	r0, r5
   23228:	f007 fd48 	bl	2acbc <strlen>
   2322c:	4607      	mov	r7, r0
   2322e:	68e0      	ldr	r0, [r4, #12]
   23230:	300c      	adds	r0, #12
   23232:	f007 fd43 	bl	2acbc <strlen>
   23236:	4287      	cmp	r7, r0
   23238:	f47f af09 	bne.w	2304e <pdn_interface_pdn_id_get+0x16a>
   2323c:	68e1      	ldr	r1, [r4, #12]
   2323e:	4628      	mov	r0, r5
   23240:	310c      	adds	r1, #12
   23242:	f7ea fd3f 	bl	dcc4 <strcmp>
   23246:	2800      	cmp	r0, #0
   23248:	f47f af01 	bne.w	2304e <pdn_interface_pdn_id_get+0x16a>
   2324c:	68e3      	ldr	r3, [r4, #12]
   2324e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   23250:	07d1      	lsls	r1, r2, #31
   23252:	f57f aefc 	bpl.w	2304e <pdn_interface_pdn_id_get+0x16a>
   23256:	6858      	ldr	r0, [r3, #4]
   23258:	1c43      	adds	r3, r0, #1
   2325a:	f47f ae8d 	bne.w	22f78 <pdn_interface_pdn_id_get+0x94>
   2325e:	4db9      	ldr	r5, [pc, #740]	; (23544 <pdn_interface_pdn_id_get+0x660>)
   23260:	2280      	movs	r2, #128	; 0x80
   23262:	2100      	movs	r1, #0
   23264:	4628      	mov	r0, r5
   23266:	f007 fb3d 	bl	2a8e4 <memset>
   2326a:	4ab7      	ldr	r2, [pc, #732]	; (23548 <pdn_interface_pdn_id_get+0x664>)
   2326c:	2180      	movs	r1, #128	; 0x80
   2326e:	4628      	mov	r0, r5
   23270:	f007 fbc6 	bl	2aa00 <snprintf>
   23274:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   23278:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
   2327c:	4ab3      	ldr	r2, [pc, #716]	; (2354c <pdn_interface_pdn_id_get+0x668>)
   2327e:	681b      	ldr	r3, [r3, #0]
   23280:	4428      	add	r0, r5
   23282:	f007 fbbd 	bl	2aa00 <snprintf>
   23286:	4bb2      	ldr	r3, [pc, #712]	; (23550 <pdn_interface_pdn_id_get+0x66c>)
   23288:	4628      	mov	r0, r5
   2328a:	681f      	ldr	r7, [r3, #0]
   2328c:	f007 fd16 	bl	2acbc <strlen>
   23290:	2300      	movs	r3, #0
   23292:	4602      	mov	r2, r0
   23294:	4629      	mov	r1, r5
   23296:	4638      	mov	r0, r7
   23298:	e9cd 3300 	strd	r3, r3, [sp]
   2329c:	f7fc fd9e 	bl	1fddc <at_interface_write>
   232a0:	4607      	mov	r7, r0
   232a2:	4628      	mov	r0, r5
   232a4:	f007 fd0a 	bl	2acbc <strlen>
   232a8:	42b8      	cmp	r0, r7
   232aa:	d102      	bne.n	232b2 <pdn_interface_pdn_id_get+0x3ce>
   232ac:	4630      	mov	r0, r6
   232ae:	f7ff fa77 	bl	227a0 <pdn_id_get.part.0>
   232b2:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   232b6:	6858      	ldr	r0, [r3, #4]
   232b8:	e65e      	b.n	22f78 <pdn_interface_pdn_id_get+0x94>
   232ba:	4628      	mov	r0, r5
   232bc:	f007 fcfe 	bl	2acbc <strlen>
   232c0:	4606      	mov	r6, r0
   232c2:	6920      	ldr	r0, [r4, #16]
   232c4:	300c      	adds	r0, #12
   232c6:	f007 fcf9 	bl	2acbc <strlen>
   232ca:	4286      	cmp	r6, r0
   232cc:	f47f aec5 	bne.w	2305a <pdn_interface_pdn_id_get+0x176>
   232d0:	6921      	ldr	r1, [r4, #16]
   232d2:	4628      	mov	r0, r5
   232d4:	310c      	adds	r1, #12
   232d6:	f7ea fcf5 	bl	dcc4 <strcmp>
   232da:	2800      	cmp	r0, #0
   232dc:	f47f aebd 	bne.w	2305a <pdn_interface_pdn_id_get+0x176>
   232e0:	6923      	ldr	r3, [r4, #16]
   232e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   232e4:	07d2      	lsls	r2, r2, #31
   232e6:	f57f aeb8 	bpl.w	2305a <pdn_interface_pdn_id_get+0x176>
   232ea:	2604      	movs	r6, #4
   232ec:	e7b3      	b.n	23256 <pdn_interface_pdn_id_get+0x372>
   232ee:	4628      	mov	r0, r5
   232f0:	f007 fce4 	bl	2acbc <strlen>
   232f4:	4606      	mov	r6, r0
   232f6:	6960      	ldr	r0, [r4, #20]
   232f8:	300c      	adds	r0, #12
   232fa:	f007 fcdf 	bl	2acbc <strlen>
   232fe:	4286      	cmp	r6, r0
   23300:	f47f aeb1 	bne.w	23066 <pdn_interface_pdn_id_get+0x182>
   23304:	6961      	ldr	r1, [r4, #20]
   23306:	4628      	mov	r0, r5
   23308:	310c      	adds	r1, #12
   2330a:	f7ea fcdb 	bl	dcc4 <strcmp>
   2330e:	2800      	cmp	r0, #0
   23310:	f47f aea9 	bne.w	23066 <pdn_interface_pdn_id_get+0x182>
   23314:	6963      	ldr	r3, [r4, #20]
   23316:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   23318:	07d7      	lsls	r7, r2, #31
   2331a:	f57f aea4 	bpl.w	23066 <pdn_interface_pdn_id_get+0x182>
   2331e:	2605      	movs	r6, #5
   23320:	e799      	b.n	23256 <pdn_interface_pdn_id_get+0x372>
   23322:	4628      	mov	r0, r5
   23324:	f007 fcca 	bl	2acbc <strlen>
   23328:	4606      	mov	r6, r0
   2332a:	69a0      	ldr	r0, [r4, #24]
   2332c:	300c      	adds	r0, #12
   2332e:	f007 fcc5 	bl	2acbc <strlen>
   23332:	4286      	cmp	r6, r0
   23334:	f47f ae9d 	bne.w	23072 <pdn_interface_pdn_id_get+0x18e>
   23338:	69a1      	ldr	r1, [r4, #24]
   2333a:	4628      	mov	r0, r5
   2333c:	310c      	adds	r1, #12
   2333e:	f7ea fcc1 	bl	dcc4 <strcmp>
   23342:	2800      	cmp	r0, #0
   23344:	f47f ae95 	bne.w	23072 <pdn_interface_pdn_id_get+0x18e>
   23348:	69a3      	ldr	r3, [r4, #24]
   2334a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2334c:	07d6      	lsls	r6, r2, #31
   2334e:	f57f ae90 	bpl.w	23072 <pdn_interface_pdn_id_get+0x18e>
   23352:	2606      	movs	r6, #6
   23354:	e77f      	b.n	23256 <pdn_interface_pdn_id_get+0x372>
   23356:	4628      	mov	r0, r5
   23358:	f007 fcb0 	bl	2acbc <strlen>
   2335c:	4607      	mov	r7, r0
   2335e:	68e0      	ldr	r0, [r4, #12]
   23360:	300c      	adds	r0, #12
   23362:	f007 fcab 	bl	2acbc <strlen>
   23366:	4287      	cmp	r7, r0
   23368:	f47f ae1f 	bne.w	22faa <pdn_interface_pdn_id_get+0xc6>
   2336c:	68e1      	ldr	r1, [r4, #12]
   2336e:	4628      	mov	r0, r5
   23370:	310c      	adds	r1, #12
   23372:	f7ea fca7 	bl	dcc4 <strcmp>
   23376:	2800      	cmp	r0, #0
   23378:	f47f ae17 	bne.w	22faa <pdn_interface_pdn_id_get+0xc6>
   2337c:	68e3      	ldr	r3, [r4, #12]
   2337e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   23380:	0791      	lsls	r1, r2, #30
   23382:	f53f af68 	bmi.w	23256 <pdn_interface_pdn_id_get+0x372>
   23386:	e610      	b.n	22faa <pdn_interface_pdn_id_get+0xc6>
   23388:	4628      	mov	r0, r5
   2338a:	f007 fc97 	bl	2acbc <strlen>
   2338e:	4606      	mov	r6, r0
   23390:	6920      	ldr	r0, [r4, #16]
   23392:	300c      	adds	r0, #12
   23394:	f007 fc92 	bl	2acbc <strlen>
   23398:	4286      	cmp	r6, r0
   2339a:	f47f ae0c 	bne.w	22fb6 <pdn_interface_pdn_id_get+0xd2>
   2339e:	6921      	ldr	r1, [r4, #16]
   233a0:	4628      	mov	r0, r5
   233a2:	310c      	adds	r1, #12
   233a4:	f7ea fc8e 	bl	dcc4 <strcmp>
   233a8:	2800      	cmp	r0, #0
   233aa:	f47f ae04 	bne.w	22fb6 <pdn_interface_pdn_id_get+0xd2>
   233ae:	6923      	ldr	r3, [r4, #16]
   233b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   233b2:	0792      	lsls	r2, r2, #30
   233b4:	d499      	bmi.n	232ea <pdn_interface_pdn_id_get+0x406>
   233b6:	e5fe      	b.n	22fb6 <pdn_interface_pdn_id_get+0xd2>
   233b8:	4628      	mov	r0, r5
   233ba:	f007 fc7f 	bl	2acbc <strlen>
   233be:	4606      	mov	r6, r0
   233c0:	6960      	ldr	r0, [r4, #20]
   233c2:	300c      	adds	r0, #12
   233c4:	f007 fc7a 	bl	2acbc <strlen>
   233c8:	4286      	cmp	r6, r0
   233ca:	f47f adfa 	bne.w	22fc2 <pdn_interface_pdn_id_get+0xde>
   233ce:	6961      	ldr	r1, [r4, #20]
   233d0:	4628      	mov	r0, r5
   233d2:	310c      	adds	r1, #12
   233d4:	f7ea fc76 	bl	dcc4 <strcmp>
   233d8:	2800      	cmp	r0, #0
   233da:	f47f adf2 	bne.w	22fc2 <pdn_interface_pdn_id_get+0xde>
   233de:	6963      	ldr	r3, [r4, #20]
   233e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   233e2:	0797      	lsls	r7, r2, #30
   233e4:	d49b      	bmi.n	2331e <pdn_interface_pdn_id_get+0x43a>
   233e6:	e5ec      	b.n	22fc2 <pdn_interface_pdn_id_get+0xde>
   233e8:	4628      	mov	r0, r5
   233ea:	f007 fc67 	bl	2acbc <strlen>
   233ee:	4606      	mov	r6, r0
   233f0:	69a0      	ldr	r0, [r4, #24]
   233f2:	300c      	adds	r0, #12
   233f4:	f007 fc62 	bl	2acbc <strlen>
   233f8:	4286      	cmp	r6, r0
   233fa:	f47f ade8 	bne.w	22fce <pdn_interface_pdn_id_get+0xea>
   233fe:	69a1      	ldr	r1, [r4, #24]
   23400:	4628      	mov	r0, r5
   23402:	310c      	adds	r1, #12
   23404:	f7ea fc5e 	bl	dcc4 <strcmp>
   23408:	2800      	cmp	r0, #0
   2340a:	f47f ade0 	bne.w	22fce <pdn_interface_pdn_id_get+0xea>
   2340e:	69a3      	ldr	r3, [r4, #24]
   23410:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   23412:	0796      	lsls	r6, r2, #30
   23414:	d49d      	bmi.n	23352 <pdn_interface_pdn_id_get+0x46e>
   23416:	e5da      	b.n	22fce <pdn_interface_pdn_id_get+0xea>
   23418:	4628      	mov	r0, r5
   2341a:	f007 fc4f 	bl	2acbc <strlen>
   2341e:	4606      	mov	r6, r0
   23420:	69e0      	ldr	r0, [r4, #28]
   23422:	300c      	adds	r0, #12
   23424:	f007 fc4a 	bl	2acbc <strlen>
   23428:	4286      	cmp	r6, r0
   2342a:	f47f add6 	bne.w	22fda <pdn_interface_pdn_id_get+0xf6>
   2342e:	69e1      	ldr	r1, [r4, #28]
   23430:	4628      	mov	r0, r5
   23432:	310c      	adds	r1, #12
   23434:	f7ea fc46 	bl	dcc4 <strcmp>
   23438:	2800      	cmp	r0, #0
   2343a:	f47f adce 	bne.w	22fda <pdn_interface_pdn_id_get+0xf6>
   2343e:	69e3      	ldr	r3, [r4, #28]
   23440:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   23442:	0790      	lsls	r0, r2, #30
   23444:	f57f adc9 	bpl.w	22fda <pdn_interface_pdn_id_get+0xf6>
   23448:	2607      	movs	r6, #7
   2344a:	e704      	b.n	23256 <pdn_interface_pdn_id_get+0x372>
   2344c:	4628      	mov	r0, r5
   2344e:	f007 fc35 	bl	2acbc <strlen>
   23452:	4606      	mov	r6, r0
   23454:	6a20      	ldr	r0, [r4, #32]
   23456:	300c      	adds	r0, #12
   23458:	f007 fc30 	bl	2acbc <strlen>
   2345c:	4286      	cmp	r6, r0
   2345e:	f47f adc2 	bne.w	22fe6 <pdn_interface_pdn_id_get+0x102>
   23462:	6a21      	ldr	r1, [r4, #32]
   23464:	4628      	mov	r0, r5
   23466:	310c      	adds	r1, #12
   23468:	f7ea fc2c 	bl	dcc4 <strcmp>
   2346c:	2800      	cmp	r0, #0
   2346e:	f47f adba 	bne.w	22fe6 <pdn_interface_pdn_id_get+0x102>
   23472:	6a23      	ldr	r3, [r4, #32]
   23474:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   23476:	0791      	lsls	r1, r2, #30
   23478:	f57f adb5 	bpl.w	22fe6 <pdn_interface_pdn_id_get+0x102>
   2347c:	2608      	movs	r6, #8
   2347e:	e6ea      	b.n	23256 <pdn_interface_pdn_id_get+0x372>
   23480:	4628      	mov	r0, r5
   23482:	f007 fc1b 	bl	2acbc <strlen>
   23486:	4606      	mov	r6, r0
   23488:	69e0      	ldr	r0, [r4, #28]
   2348a:	300c      	adds	r0, #12
   2348c:	f007 fc16 	bl	2acbc <strlen>
   23490:	4286      	cmp	r6, r0
   23492:	f47f adf4 	bne.w	2307e <pdn_interface_pdn_id_get+0x19a>
   23496:	69e1      	ldr	r1, [r4, #28]
   23498:	4628      	mov	r0, r5
   2349a:	310c      	adds	r1, #12
   2349c:	f7ea fc12 	bl	dcc4 <strcmp>
   234a0:	2800      	cmp	r0, #0
   234a2:	f47f adec 	bne.w	2307e <pdn_interface_pdn_id_get+0x19a>
   234a6:	69e3      	ldr	r3, [r4, #28]
   234a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   234aa:	07d0      	lsls	r0, r2, #31
   234ac:	d4cc      	bmi.n	23448 <pdn_interface_pdn_id_get+0x564>
   234ae:	e5e6      	b.n	2307e <pdn_interface_pdn_id_get+0x19a>
   234b0:	4628      	mov	r0, r5
   234b2:	f007 fc03 	bl	2acbc <strlen>
   234b6:	4606      	mov	r6, r0
   234b8:	6a20      	ldr	r0, [r4, #32]
   234ba:	300c      	adds	r0, #12
   234bc:	f007 fbfe 	bl	2acbc <strlen>
   234c0:	4286      	cmp	r6, r0
   234c2:	f47f ade2 	bne.w	2308a <pdn_interface_pdn_id_get+0x1a6>
   234c6:	6a21      	ldr	r1, [r4, #32]
   234c8:	4628      	mov	r0, r5
   234ca:	310c      	adds	r1, #12
   234cc:	f7ea fbfa 	bl	dcc4 <strcmp>
   234d0:	2800      	cmp	r0, #0
   234d2:	f47f adda 	bne.w	2308a <pdn_interface_pdn_id_get+0x1a6>
   234d6:	6a23      	ldr	r3, [r4, #32]
   234d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   234da:	07d1      	lsls	r1, r2, #31
   234dc:	d4ce      	bmi.n	2347c <pdn_interface_pdn_id_get+0x598>
   234de:	e5d4      	b.n	2308a <pdn_interface_pdn_id_get+0x1a6>
   234e0:	4628      	mov	r0, r5
   234e2:	f007 fbeb 	bl	2acbc <strlen>
   234e6:	4606      	mov	r6, r0
   234e8:	68a0      	ldr	r0, [r4, #8]
   234ea:	300c      	adds	r0, #12
   234ec:	f007 fbe6 	bl	2acbc <strlen>
   234f0:	4286      	cmp	r6, r0
   234f2:	f47f ada6 	bne.w	23042 <pdn_interface_pdn_id_get+0x15e>
   234f6:	68a1      	ldr	r1, [r4, #8]
   234f8:	4628      	mov	r0, r5
   234fa:	310c      	adds	r1, #12
   234fc:	f7ea fbe2 	bl	dcc4 <strcmp>
   23500:	2800      	cmp	r0, #0
   23502:	f47f ad9e 	bne.w	23042 <pdn_interface_pdn_id_get+0x15e>
   23506:	68a3      	ldr	r3, [r4, #8]
   23508:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2350a:	07d0      	lsls	r0, r2, #31
   2350c:	f57f ad99 	bpl.w	23042 <pdn_interface_pdn_id_get+0x15e>
   23510:	2602      	movs	r6, #2
   23512:	e6a0      	b.n	23256 <pdn_interface_pdn_id_get+0x372>
   23514:	4628      	mov	r0, r5
   23516:	f007 fbd1 	bl	2acbc <strlen>
   2351a:	4606      	mov	r6, r0
   2351c:	68a0      	ldr	r0, [r4, #8]
   2351e:	300c      	adds	r0, #12
   23520:	f007 fbcc 	bl	2acbc <strlen>
   23524:	4286      	cmp	r6, r0
   23526:	f47f ad3a 	bne.w	22f9e <pdn_interface_pdn_id_get+0xba>
   2352a:	68a1      	ldr	r1, [r4, #8]
   2352c:	4628      	mov	r0, r5
   2352e:	310c      	adds	r1, #12
   23530:	f7ea fbc8 	bl	dcc4 <strcmp>
   23534:	2800      	cmp	r0, #0
   23536:	f47f ad32 	bne.w	22f9e <pdn_interface_pdn_id_get+0xba>
   2353a:	68a3      	ldr	r3, [r4, #8]
   2353c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2353e:	0790      	lsls	r0, r2, #30
   23540:	d4e6      	bmi.n	23510 <pdn_interface_pdn_id_get+0x62c>
   23542:	e52c      	b.n	22f9e <pdn_interface_pdn_id_get+0xba>
   23544:	20023238 	.word	0x20023238
   23548:	00033b38 	.word	0x00033b38
   2354c:	00033b34 	.word	0x00033b34
   23550:	200231b4 	.word	0x200231b4
   23554:	4628      	mov	r0, r5
   23556:	f007 fbb1 	bl	2acbc <strlen>
   2355a:	4606      	mov	r6, r0
   2355c:	6860      	ldr	r0, [r4, #4]
   2355e:	300c      	adds	r0, #12
   23560:	f007 fbac 	bl	2acbc <strlen>
   23564:	4286      	cmp	r6, r0
   23566:	f47f ad14 	bne.w	22f92 <pdn_interface_pdn_id_get+0xae>
   2356a:	6861      	ldr	r1, [r4, #4]
   2356c:	4628      	mov	r0, r5
   2356e:	310c      	adds	r1, #12
   23570:	f7ea fba8 	bl	dcc4 <strcmp>
   23574:	2800      	cmp	r0, #0
   23576:	f47f ad0c 	bne.w	22f92 <pdn_interface_pdn_id_get+0xae>
   2357a:	6863      	ldr	r3, [r4, #4]
   2357c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2357e:	0796      	lsls	r6, r2, #30
   23580:	f57f ad07 	bpl.w	22f92 <pdn_interface_pdn_id_get+0xae>
   23584:	2601      	movs	r6, #1
   23586:	e666      	b.n	23256 <pdn_interface_pdn_id_get+0x372>
   23588:	4628      	mov	r0, r5
   2358a:	f007 fb97 	bl	2acbc <strlen>
   2358e:	4606      	mov	r6, r0
   23590:	6860      	ldr	r0, [r4, #4]
   23592:	300c      	adds	r0, #12
   23594:	f007 fb92 	bl	2acbc <strlen>
   23598:	4286      	cmp	r6, r0
   2359a:	f47f ad4c 	bne.w	23036 <pdn_interface_pdn_id_get+0x152>
   2359e:	6861      	ldr	r1, [r4, #4]
   235a0:	4628      	mov	r0, r5
   235a2:	310c      	adds	r1, #12
   235a4:	f7ea fb8e 	bl	dcc4 <strcmp>
   235a8:	2800      	cmp	r0, #0
   235aa:	f47f ad44 	bne.w	23036 <pdn_interface_pdn_id_get+0x152>
   235ae:	6863      	ldr	r3, [r4, #4]
   235b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   235b2:	07d6      	lsls	r6, r2, #31
   235b4:	d4e6      	bmi.n	23584 <pdn_interface_pdn_id_get+0x6a0>
   235b6:	e53e      	b.n	23036 <pdn_interface_pdn_id_get+0x152>
   235b8:	4608      	mov	r0, r1
   235ba:	f007 fb7f 	bl	2acbc <strlen>
   235be:	4606      	mov	r6, r0
   235c0:	6820      	ldr	r0, [r4, #0]
   235c2:	300c      	adds	r0, #12
   235c4:	f007 fb7a 	bl	2acbc <strlen>
   235c8:	4286      	cmp	r6, r0
   235ca:	f47f acdc 	bne.w	22f86 <pdn_interface_pdn_id_get+0xa2>
   235ce:	6821      	ldr	r1, [r4, #0]
   235d0:	4628      	mov	r0, r5
   235d2:	310c      	adds	r1, #12
   235d4:	f7ea fb76 	bl	dcc4 <strcmp>
   235d8:	4606      	mov	r6, r0
   235da:	2800      	cmp	r0, #0
   235dc:	f47f acd3 	bne.w	22f86 <pdn_interface_pdn_id_get+0xa2>
   235e0:	6823      	ldr	r3, [r4, #0]
   235e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   235e4:	0797      	lsls	r7, r2, #30
   235e6:	f53f ae36 	bmi.w	23256 <pdn_interface_pdn_id_get+0x372>
   235ea:	e4cc      	b.n	22f86 <pdn_interface_pdn_id_get+0xa2>
   235ec:	4608      	mov	r0, r1
   235ee:	f007 fb65 	bl	2acbc <strlen>
   235f2:	4606      	mov	r6, r0
   235f4:	6820      	ldr	r0, [r4, #0]
   235f6:	300c      	adds	r0, #12
   235f8:	f007 fb60 	bl	2acbc <strlen>
   235fc:	4286      	cmp	r6, r0
   235fe:	f47f ad14 	bne.w	2302a <pdn_interface_pdn_id_get+0x146>
   23602:	6821      	ldr	r1, [r4, #0]
   23604:	4628      	mov	r0, r5
   23606:	310c      	adds	r1, #12
   23608:	f7ea fb5c 	bl	dcc4 <strcmp>
   2360c:	4606      	mov	r6, r0
   2360e:	2800      	cmp	r0, #0
   23610:	f47f ad0b 	bne.w	2302a <pdn_interface_pdn_id_get+0x146>
   23614:	6823      	ldr	r3, [r4, #0]
   23616:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   23618:	07d7      	lsls	r7, r2, #31
   2361a:	f53f ae1c 	bmi.w	23256 <pdn_interface_pdn_id_get+0x372>
   2361e:	e504      	b.n	2302a <pdn_interface_pdn_id_get+0x146>
   23620:	f04f 30ff 	mov.w	r0, #4294967295
   23624:	4770      	bx	lr
   23626:	bf00      	nop

00023628 <gnss_client_event_handler>:
   23628:	f850 1b08 	ldr.w	r1, [r0], #8
   2362c:	0c09      	lsrs	r1, r1, #16
   2362e:	f002 b8c7 	b.w	257c0 <rpc_gnss_event_handler>
   23632:	bf00      	nop

00023634 <rpc_gnss_client_init>:
   23634:	4801      	ldr	r0, [pc, #4]	; (2363c <rpc_gnss_client_init+0x8>)
   23636:	f001 bce9 	b.w	2500c <rpc_client_register>
   2363a:	bf00      	nop
   2363c:	00033b6c 	.word	0x00033b6c

00023640 <rpc_gnss_client_request_alloc>:
   23640:	2300      	movs	r3, #0
   23642:	b510      	push	{r4, lr}
   23644:	b082      	sub	sp, #8
   23646:	9301      	str	r3, [sp, #4]
   23648:	b158      	cbz	r0, 23662 <rpc_gnss_client_request_alloc+0x22>
   2364a:	4604      	mov	r4, r0
   2364c:	aa01      	add	r2, sp, #4
   2364e:	2007      	movs	r0, #7
   23650:	f001 ff1c 	bl	2548c <rpc_message_alloc>
   23654:	b918      	cbnz	r0, 2365e <rpc_gnss_client_request_alloc+0x1e>
   23656:	9b01      	ldr	r3, [sp, #4]
   23658:	b10b      	cbz	r3, 2365e <rpc_gnss_client_request_alloc+0x1e>
   2365a:	3308      	adds	r3, #8
   2365c:	6023      	str	r3, [r4, #0]
   2365e:	b002      	add	sp, #8
   23660:	bd10      	pop	{r4, pc}
   23662:	2007      	movs	r0, #7
   23664:	b002      	add	sp, #8
   23666:	bd10      	pop	{r4, pc}

00023668 <rpc_gnss_client_request_send>:
   23668:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   2366c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   23670:	d10b      	bne.n	2368a <rpc_gnss_client_request_send+0x22>
   23672:	b160      	cbz	r0, 2368e <rpc_gnss_client_request_send+0x26>
   23674:	4603      	mov	r3, r0
   23676:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2367a:	2007      	movs	r0, #7
   2367c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   23680:	f843 1d08 	str.w	r1, [r3, #-8]!
   23684:	4619      	mov	r1, r3
   23686:	f001 bee9 	b.w	2545c <rpc_message_send>
   2368a:	200f      	movs	r0, #15
   2368c:	4770      	bx	lr
   2368e:	2007      	movs	r0, #7
   23690:	4770      	bx	lr
   23692:	bf00      	nop

00023694 <rpc_gnss_client_message_free>:
   23694:	b120      	cbz	r0, 236a0 <rpc_gnss_client_message_free+0xc>
   23696:	f1a0 0108 	sub.w	r1, r0, #8
   2369a:	2007      	movs	r0, #7
   2369c:	f001 bf2a 	b.w	254f4 <rpc_message_free>
   236a0:	2007      	movs	r0, #7
   236a2:	4770      	bx	lr

000236a4 <rpc_gnss_client_data_free>:
   236a4:	b118      	cbz	r0, 236ae <rpc_gnss_client_data_free+0xa>
   236a6:	4601      	mov	r1, r0
   236a8:	2007      	movs	r0, #7
   236aa:	f001 bfd3 	b.w	25654 <rpc_message_data_free>
   236ae:	2007      	movs	r0, #7
   236b0:	4770      	bx	lr
   236b2:	bf00      	nop

000236b4 <ip_recvd_packet_free_cb>:
   236b4:	b510      	push	{r4, lr}
   236b6:	4604      	mov	r4, r0
   236b8:	6800      	ldr	r0, [r0, #0]
   236ba:	f7fc fd87 	bl	201cc <rpc_ip_client_data_free>
   236be:	68a0      	ldr	r0, [r4, #8]
   236c0:	b118      	cbz	r0, 236ca <ip_recvd_packet_free_cb+0x16>
   236c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   236c6:	f7f5 bd8d 	b.w	191e4 <nrf_free>
   236ca:	bd10      	pop	{r4, pc}

000236cc <rpc_error_to_nrf_bsd_error>:
   236cc:	2810      	cmp	r0, #16
   236ce:	bf9a      	itte	ls
   236d0:	4b02      	ldrls	r3, [pc, #8]	; (236dc <rpc_error_to_nrf_bsd_error+0x10>)
   236d2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   236d6:	202d      	movhi	r0, #45	; 0x2d
   236d8:	4770      	bx	lr
   236da:	bf00      	nop
   236dc:	00033b7c 	.word	0x00033b7c

000236e0 <ip_interface_request_create>:
   236e0:	b570      	push	{r4, r5, r6, lr}
   236e2:	2500      	movs	r5, #0
   236e4:	b082      	sub	sp, #8
   236e6:	ac02      	add	r4, sp, #8
   236e8:	f844 5d04 	str.w	r5, [r4, #-4]!
   236ec:	4606      	mov	r6, r0
   236ee:	460d      	mov	r5, r1
   236f0:	4620      	mov	r0, r4
   236f2:	4619      	mov	r1, r3
   236f4:	4614      	mov	r4, r2
   236f6:	f7fc fd37 	bl	20168 <rpc_ip_client_request_alloc>
   236fa:	b960      	cbnz	r0, 23716 <ip_interface_request_create+0x36>
   236fc:	9b01      	ldr	r3, [sp, #4]
   236fe:	2208      	movs	r2, #8
   23700:	7258      	strb	r0, [r3, #9]
   23702:	7298      	strb	r0, [r3, #10]
   23704:	72d8      	strb	r0, [r3, #11]
   23706:	4618      	mov	r0, r3
   23708:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   2370c:	60dc      	str	r4, [r3, #12]
   2370e:	611d      	str	r5, [r3, #16]
   23710:	721a      	strb	r2, [r3, #8]
   23712:	b002      	add	sp, #8
   23714:	bd70      	pop	{r4, r5, r6, pc}
   23716:	9b01      	ldr	r3, [sp, #4]
   23718:	4618      	mov	r0, r3
   2371a:	b002      	add	sp, #8
   2371c:	bd70      	pop	{r4, r5, r6, pc}
   2371e:	bf00      	nop

00023720 <ip_interface_request_send>:
   23720:	b570      	push	{r4, r5, r6, lr}
   23722:	460c      	mov	r4, r1
   23724:	4605      	mov	r5, r0
   23726:	4611      	mov	r1, r2
   23728:	4620      	mov	r0, r4
   2372a:	461e      	mov	r6, r3
   2372c:	f7fc fd30 	bl	20190 <rpc_ip_client_request_send>
   23730:	b900      	cbnz	r0, 23734 <ip_interface_request_send+0x14>
   23732:	bd70      	pop	{r4, r5, r6, pc}
   23734:	6820      	ldr	r0, [r4, #0]
   23736:	b108      	cbz	r0, 2373c <ip_interface_request_send+0x1c>
   23738:	f7fc fd48 	bl	201cc <rpc_ip_client_data_free>
   2373c:	4620      	mov	r0, r4
   2373e:	f7fc fd3d 	bl	201bc <rpc_ip_client_message_free>
   23742:	602e      	str	r6, [r5, #0]
   23744:	2023      	movs	r0, #35	; 0x23
   23746:	bd70      	pop	{r4, r5, r6, pc}

00023748 <ip_interface_wait>:
   23748:	b538      	push	{r3, r4, r5, lr}
   2374a:	4605      	mov	r5, r0
   2374c:	f001 fad6 	bl	24cfc <interface_socket_wait>
   23750:	4604      	mov	r4, r0
   23752:	b108      	cbz	r0, 23758 <ip_interface_wait+0x10>
   23754:	4620      	mov	r0, r4
   23756:	bd38      	pop	{r3, r4, r5, pc}
   23758:	4628      	mov	r0, r5
   2375a:	f001 fb3f 	bl	24ddc <interface_socket_from_handle_get>
   2375e:	2800      	cmp	r0, #0
   23760:	d0f8      	beq.n	23754 <ip_interface_wait+0xc>
   23762:	6844      	ldr	r4, [r0, #4]
   23764:	2c00      	cmp	r4, #0
   23766:	d0f5      	beq.n	23754 <ip_interface_wait+0xc>
   23768:	2300      	movs	r3, #0
   2376a:	6043      	str	r3, [r0, #4]
   2376c:	4620      	mov	r0, r4
   2376e:	bd38      	pop	{r3, r4, r5, pc}

00023770 <ip_interface_init>:
   23770:	b538      	push	{r3, r4, r5, lr}
   23772:	2300      	movs	r3, #0
   23774:	4d07      	ldr	r5, [pc, #28]	; (23794 <ip_interface_init+0x24>)
   23776:	4c08      	ldr	r4, [pc, #32]	; (23798 <ip_interface_init+0x28>)
   23778:	4619      	mov	r1, r3
   2377a:	2220      	movs	r2, #32
   2377c:	4807      	ldr	r0, [pc, #28]	; (2379c <ip_interface_init+0x2c>)
   2377e:	602b      	str	r3, [r5, #0]
   23780:	6023      	str	r3, [r4, #0]
   23782:	f007 f8af 	bl	2a8e4 <memset>
   23786:	f7fc fce9 	bl	2015c <rpc_ip_client_init>
   2378a:	3000      	adds	r0, #0
   2378c:	bf18      	it	ne
   2378e:	2001      	movne	r0, #1
   23790:	4240      	negs	r0, r0
   23792:	bd38      	pop	{r3, r4, r5, pc}
   23794:	200232f0 	.word	0x200232f0
   23798:	200232ec 	.word	0x200232ec
   2379c:	200232f8 	.word	0x200232f8

000237a0 <ip_interface_open>:
   237a0:	2300      	movs	r3, #0
   237a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   237a6:	f020 0608 	bic.w	r6, r0, #8
   237aa:	b082      	sub	sp, #8
   237ac:	2e02      	cmp	r6, #2
   237ae:	9300      	str	r3, [sp, #0]
   237b0:	f040 8088 	bne.w	238c4 <ip_interface_open+0x124>
   237b4:	1e4b      	subs	r3, r1, #1
   237b6:	2b01      	cmp	r3, #1
   237b8:	460c      	mov	r4, r1
   237ba:	d856      	bhi.n	2386a <ip_interface_open+0xca>
   237bc:	4607      	mov	r7, r0
   237be:	2a00      	cmp	r2, #0
   237c0:	d14f      	bne.n	23862 <ip_interface_open+0xc2>
   237c2:	2901      	cmp	r1, #1
   237c4:	bf08      	it	eq
   237c6:	2601      	moveq	r6, #1
   237c8:	4a41      	ldr	r2, [pc, #260]	; (238d0 <ip_interface_open+0x130>)
   237ca:	4621      	mov	r1, r4
   237cc:	4668      	mov	r0, sp
   237ce:	f001 f9ff 	bl	24bd0 <interface_socket_allocate>
   237d2:	9b00      	ldr	r3, [sp, #0]
   237d4:	4680      	mov	r8, r0
   237d6:	2b00      	cmp	r3, #0
   237d8:	d050      	beq.n	2387c <ip_interface_open+0xdc>
   237da:	2100      	movs	r1, #0
   237dc:	a802      	add	r0, sp, #8
   237de:	f840 1d04 	str.w	r1, [r0, #-4]!
   237e2:	e9c3 7402 	strd	r7, r4, [r3, #8]
   237e6:	611e      	str	r6, [r3, #16]
   237e8:	f7fc fcbe 	bl	20168 <rpc_ip_client_request_alloc>
   237ec:	2800      	cmp	r0, #0
   237ee:	d142      	bne.n	23876 <ip_interface_open+0xd6>
   237f0:	f247 0201 	movw	r2, #28673	; 0x7001
   237f4:	f04f 33ff 	mov.w	r3, #4294967295
   237f8:	2108      	movs	r1, #8
   237fa:	9d01      	ldr	r5, [sp, #4]
   237fc:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   23800:	60ea      	str	r2, [r5, #12]
   23802:	7268      	strb	r0, [r5, #9]
   23804:	72a8      	strb	r0, [r5, #10]
   23806:	72e8      	strb	r0, [r5, #11]
   23808:	7229      	strb	r1, [r5, #8]
   2380a:	742b      	strb	r3, [r5, #16]
   2380c:	746b      	strb	r3, [r5, #17]
   2380e:	74ab      	strb	r3, [r5, #18]
   23810:	74eb      	strb	r3, [r5, #19]
   23812:	2f0a      	cmp	r7, #10
   23814:	bf0c      	ite	eq
   23816:	2202      	moveq	r2, #2
   23818:	2201      	movne	r2, #1
   2381a:	68ab      	ldr	r3, [r5, #8]
   2381c:	61ee      	str	r6, [r5, #28]
   2381e:	330c      	adds	r3, #12
   23820:	61ac      	str	r4, [r5, #24]
   23822:	616a      	str	r2, [r5, #20]
   23824:	60ab      	str	r3, [r5, #8]
   23826:	f247 0101 	movw	r1, #28673	; 0x7001
   2382a:	4628      	mov	r0, r5
   2382c:	9f00      	ldr	r7, [sp, #0]
   2382e:	f7fc fcaf 	bl	20190 <rpc_ip_client_request_send>
   23832:	4606      	mov	r6, r0
   23834:	b338      	cbz	r0, 23886 <ip_interface_open+0xe6>
   23836:	6828      	ldr	r0, [r5, #0]
   23838:	b108      	cbz	r0, 2383e <ip_interface_open+0x9e>
   2383a:	f7fc fcc7 	bl	201cc <rpc_ip_client_data_free>
   2383e:	4628      	mov	r0, r5
   23840:	f7fc fcbc 	bl	201bc <rpc_ip_client_message_free>
   23844:	2301      	movs	r3, #1
   23846:	2523      	movs	r5, #35	; 0x23
   23848:	603b      	str	r3, [r7, #0]
   2384a:	4640      	mov	r0, r8
   2384c:	f001 fa14 	bl	24c78 <interface_socket_free>
   23850:	4628      	mov	r0, r5
   23852:	f00b fa60 	bl	2ed16 <bsd_os_errno_set>
   23856:	f04f 38ff 	mov.w	r8, #4294967295
   2385a:	4640      	mov	r0, r8
   2385c:	b002      	add	sp, #8
   2385e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23862:	2901      	cmp	r1, #1
   23864:	d00c      	beq.n	23880 <ip_interface_open+0xe0>
   23866:	2a02      	cmp	r2, #2
   23868:	d0ae      	beq.n	237c8 <ip_interface_open+0x28>
   2386a:	2016      	movs	r0, #22
   2386c:	f00b fa53 	bl	2ed16 <bsd_os_errno_set>
   23870:	f04f 38ff 	mov.w	r8, #4294967295
   23874:	e7f1      	b.n	2385a <ip_interface_open+0xba>
   23876:	9d01      	ldr	r5, [sp, #4]
   23878:	2d00      	cmp	r5, #0
   2387a:	d1ca      	bne.n	23812 <ip_interface_open+0x72>
   2387c:	250c      	movs	r5, #12
   2387e:	e7e4      	b.n	2384a <ip_interface_open+0xaa>
   23880:	2a01      	cmp	r2, #1
   23882:	d0a1      	beq.n	237c8 <ip_interface_open+0x28>
   23884:	e7f1      	b.n	2386a <ip_interface_open+0xca>
   23886:	f04f 33ff 	mov.w	r3, #4294967295
   2388a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2388e:	2102      	movs	r1, #2
   23890:	4640      	mov	r0, r8
   23892:	f001 fa33 	bl	24cfc <interface_socket_wait>
   23896:	4605      	mov	r5, r0
   23898:	2800      	cmp	r0, #0
   2389a:	d1d6      	bne.n	2384a <ip_interface_open+0xaa>
   2389c:	4640      	mov	r0, r8
   2389e:	f001 fa9d 	bl	24ddc <interface_socket_from_handle_get>
   238a2:	b118      	cbz	r0, 238ac <ip_interface_open+0x10c>
   238a4:	6845      	ldr	r5, [r0, #4]
   238a6:	b10d      	cbz	r5, 238ac <ip_interface_open+0x10c>
   238a8:	6046      	str	r6, [r0, #4]
   238aa:	e7ce      	b.n	2384a <ip_interface_open+0xaa>
   238ac:	2c02      	cmp	r4, #2
   238ae:	d1d4      	bne.n	2385a <ip_interface_open+0xba>
   238b0:	9b00      	ldr	r3, [sp, #0]
   238b2:	681a      	ldr	r2, [r3, #0]
   238b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   238b8:	601a      	str	r2, [r3, #0]
   238ba:	681a      	ldr	r2, [r3, #0]
   238bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   238c0:	601a      	str	r2, [r3, #0]
   238c2:	e7ca      	b.n	2385a <ip_interface_open+0xba>
   238c4:	202f      	movs	r0, #47	; 0x2f
   238c6:	f00b fa26 	bl	2ed16 <bsd_os_errno_set>
   238ca:	f04f 38ff 	mov.w	r8, #4294967295
   238ce:	e7c4      	b.n	2385a <ip_interface_open+0xba>
   238d0:	000236b5 	.word	0x000236b5

000238d4 <ip_interface_close>:
   238d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   238d8:	b082      	sub	sp, #8
   238da:	4606      	mov	r6, r0
   238dc:	f001 fa7e 	bl	24ddc <interface_socket_from_handle_get>
   238e0:	2800      	cmp	r0, #0
   238e2:	d063      	beq.n	239ac <ip_interface_close+0xd8>
   238e4:	4604      	mov	r4, r0
   238e6:	2100      	movs	r1, #0
   238e8:	a802      	add	r0, sp, #8
   238ea:	6827      	ldr	r7, [r4, #0]
   238ec:	f840 1d04 	str.w	r1, [r0, #-4]!
   238f0:	f8d4 8014 	ldr.w	r8, [r4, #20]
   238f4:	f7fc fc38 	bl	20168 <rpc_ip_client_request_alloc>
   238f8:	2800      	cmp	r0, #0
   238fa:	d13a      	bne.n	23972 <ip_interface_close+0x9e>
   238fc:	f247 0309 	movw	r3, #28681	; 0x7009
   23900:	2208      	movs	r2, #8
   23902:	9d01      	ldr	r5, [sp, #4]
   23904:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   23908:	60eb      	str	r3, [r5, #12]
   2390a:	f8c5 8010 	str.w	r8, [r5, #16]
   2390e:	7268      	strb	r0, [r5, #9]
   23910:	72a8      	strb	r0, [r5, #10]
   23912:	72e8      	strb	r0, [r5, #11]
   23914:	722a      	strb	r2, [r5, #8]
   23916:	6823      	ldr	r3, [r4, #0]
   23918:	f247 0109 	movw	r1, #28681	; 0x7009
   2391c:	0c1b      	lsrs	r3, r3, #16
   2391e:	041b      	lsls	r3, r3, #16
   23920:	f043 030d 	orr.w	r3, r3, #13
   23924:	6023      	str	r3, [r4, #0]
   23926:	6823      	ldr	r3, [r4, #0]
   23928:	4628      	mov	r0, r5
   2392a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2392e:	6023      	str	r3, [r4, #0]
   23930:	6823      	ldr	r3, [r4, #0]
   23932:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   23936:	6023      	str	r3, [r4, #0]
   23938:	f7fc fc2a 	bl	20190 <rpc_ip_client_request_send>
   2393c:	bb40      	cbnz	r0, 23990 <ip_interface_close+0xbc>
   2393e:	f04f 33ff 	mov.w	r3, #4294967295
   23942:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23946:	210e      	movs	r1, #14
   23948:	4630      	mov	r0, r6
   2394a:	f001 f9d7 	bl	24cfc <interface_socket_wait>
   2394e:	4604      	mov	r4, r0
   23950:	b1a0      	cbz	r0, 2397c <ip_interface_close+0xa8>
   23952:	4c17      	ldr	r4, [pc, #92]	; (239b0 <ip_interface_close+0xdc>)
   23954:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   23958:	b120      	cbz	r0, 23964 <ip_interface_close+0x90>
   2395a:	f7fc fc2f 	bl	201bc <rpc_ip_client_message_free>
   2395e:	2300      	movs	r3, #0
   23960:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   23964:	4630      	mov	r0, r6
   23966:	f001 f987 	bl	24c78 <interface_socket_free>
   2396a:	2000      	movs	r0, #0
   2396c:	b002      	add	sp, #8
   2396e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23972:	9d01      	ldr	r5, [sp, #4]
   23974:	200c      	movs	r0, #12
   23976:	2d00      	cmp	r5, #0
   23978:	d1cd      	bne.n	23916 <ip_interface_close+0x42>
   2397a:	e012      	b.n	239a2 <ip_interface_close+0xce>
   2397c:	4630      	mov	r0, r6
   2397e:	f001 fa2d 	bl	24ddc <interface_socket_from_handle_get>
   23982:	2800      	cmp	r0, #0
   23984:	d0e5      	beq.n	23952 <ip_interface_close+0x7e>
   23986:	6843      	ldr	r3, [r0, #4]
   23988:	2b00      	cmp	r3, #0
   2398a:	d0e2      	beq.n	23952 <ip_interface_close+0x7e>
   2398c:	6044      	str	r4, [r0, #4]
   2398e:	e7e0      	b.n	23952 <ip_interface_close+0x7e>
   23990:	6828      	ldr	r0, [r5, #0]
   23992:	b108      	cbz	r0, 23998 <ip_interface_close+0xc4>
   23994:	f7fc fc1a 	bl	201cc <rpc_ip_client_data_free>
   23998:	4628      	mov	r0, r5
   2399a:	f7fc fc0f 	bl	201bc <rpc_ip_client_message_free>
   2399e:	2023      	movs	r0, #35	; 0x23
   239a0:	6027      	str	r7, [r4, #0]
   239a2:	f00b f9b8 	bl	2ed16 <bsd_os_errno_set>
   239a6:	f04f 30ff 	mov.w	r0, #4294967295
   239aa:	e7df      	b.n	2396c <ip_interface_close+0x98>
   239ac:	2009      	movs	r0, #9
   239ae:	e7f8      	b.n	239a2 <ip_interface_close+0xce>
   239b0:	200232f8 	.word	0x200232f8

000239b4 <ip_interface_sendto>:
   239b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   239b8:	2400      	movs	r4, #0
   239ba:	b083      	sub	sp, #12
   239bc:	4688      	mov	r8, r1
   239be:	4617      	mov	r7, r2
   239c0:	4699      	mov	r9, r3
   239c2:	9401      	str	r4, [sp, #4]
   239c4:	4605      	mov	r5, r0
   239c6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   239c8:	f001 fa08 	bl	24ddc <interface_socket_from_handle_get>
   239cc:	2800      	cmp	r0, #0
   239ce:	f000 80c2 	beq.w	23b56 <ip_interface_sendto+0x1a2>
   239d2:	68c3      	ldr	r3, [r0, #12]
   239d4:	4604      	mov	r4, r0
   239d6:	2b01      	cmp	r3, #1
   239d8:	d05c      	beq.n	23a94 <ip_interface_sendto+0xe0>
   239da:	6822      	ldr	r2, [r4, #0]
   239dc:	0391      	lsls	r1, r2, #14
   239de:	f140 80a6 	bpl.w	23b2e <ip_interface_sendto+0x17a>
   239e2:	4639      	mov	r1, r7
   239e4:	a801      	add	r0, sp, #4
   239e6:	f7fc fbbf 	bl	20168 <rpc_ip_client_request_alloc>
   239ea:	2800      	cmp	r0, #0
   239ec:	f040 80aa 	bne.w	23b44 <ip_interface_sendto+0x190>
   239f0:	220c      	movs	r2, #12
   239f2:	9b01      	ldr	r3, [sp, #4]
   239f4:	721a      	strb	r2, [r3, #8]
   239f6:	7258      	strb	r0, [r3, #9]
   239f8:	7298      	strb	r0, [r3, #10]
   239fa:	72d8      	strb	r0, [r3, #11]
   239fc:	b1ee      	cbz	r6, 23a3a <ip_interface_sendto+0x86>
   239fe:	68a2      	ldr	r2, [r4, #8]
   23a00:	6871      	ldr	r1, [r6, #4]
   23a02:	428a      	cmp	r2, r1
   23a04:	d108      	bne.n	23a18 <ip_interface_sendto+0x64>
   23a06:	2a02      	cmp	r2, #2
   23a08:	f103 001c 	add.w	r0, r3, #28
   23a0c:	7831      	ldrb	r1, [r6, #0]
   23a0e:	d045      	beq.n	23a9c <ip_interface_sendto+0xe8>
   23a10:	2a0a      	cmp	r2, #10
   23a12:	d101      	bne.n	23a18 <ip_interface_sendto+0x64>
   23a14:	2924      	cmp	r1, #36	; 0x24
   23a16:	d068      	beq.n	23aea <ip_interface_sendto+0x136>
   23a18:	6818      	ldr	r0, [r3, #0]
   23a1a:	b110      	cbz	r0, 23a22 <ip_interface_sendto+0x6e>
   23a1c:	f7fc fbd6 	bl	201cc <rpc_ip_client_data_free>
   23a20:	9b01      	ldr	r3, [sp, #4]
   23a22:	4618      	mov	r0, r3
   23a24:	f7fc fbca 	bl	201bc <rpc_ip_client_message_free>
   23a28:	2016      	movs	r0, #22
   23a2a:	f00b f974 	bl	2ed16 <bsd_os_errno_set>
   23a2e:	f04f 36ff 	mov.w	r6, #4294967295
   23a32:	4630      	mov	r0, r6
   23a34:	b003      	add	sp, #12
   23a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23a3a:	f247 0206 	movw	r2, #28678	; 0x7006
   23a3e:	4616      	mov	r6, r2
   23a40:	f8c3 9014 	str.w	r9, [r3, #20]
   23a44:	6961      	ldr	r1, [r4, #20]
   23a46:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   23a4a:	60da      	str	r2, [r3, #12]
   23a4c:	6119      	str	r1, [r3, #16]
   23a4e:	605f      	str	r7, [r3, #4]
   23a50:	f1b8 0f00 	cmp.w	r8, #0
   23a54:	d004      	beq.n	23a60 <ip_interface_sendto+0xac>
   23a56:	463a      	mov	r2, r7
   23a58:	4641      	mov	r1, r8
   23a5a:	6818      	ldr	r0, [r3, #0]
   23a5c:	f7ea f8bc 	bl	dbd8 <memcpy>
   23a60:	6827      	ldr	r7, [r4, #0]
   23a62:	6823      	ldr	r3, [r4, #0]
   23a64:	4631      	mov	r1, r6
   23a66:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   23a6a:	6023      	str	r3, [r4, #0]
   23a6c:	6823      	ldr	r3, [r4, #0]
   23a6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   23a72:	6023      	str	r3, [r4, #0]
   23a74:	9e01      	ldr	r6, [sp, #4]
   23a76:	4630      	mov	r0, r6
   23a78:	f7fc fb8a 	bl	20190 <rpc_ip_client_request_send>
   23a7c:	4680      	mov	r8, r0
   23a7e:	b1c0      	cbz	r0, 23ab2 <ip_interface_sendto+0xfe>
   23a80:	6830      	ldr	r0, [r6, #0]
   23a82:	b108      	cbz	r0, 23a88 <ip_interface_sendto+0xd4>
   23a84:	f7fc fba2 	bl	201cc <rpc_ip_client_data_free>
   23a88:	4630      	mov	r0, r6
   23a8a:	f7fc fb97 	bl	201bc <rpc_ip_client_message_free>
   23a8e:	6027      	str	r7, [r4, #0]
   23a90:	2023      	movs	r0, #35	; 0x23
   23a92:	e7ca      	b.n	23a2a <ip_interface_sendto+0x76>
   23a94:	2e00      	cmp	r6, #0
   23a96:	d0a0      	beq.n	239da <ip_interface_sendto+0x26>
   23a98:	2016      	movs	r0, #22
   23a9a:	e7c6      	b.n	23a2a <ip_interface_sendto+0x76>
   23a9c:	2910      	cmp	r1, #16
   23a9e:	d1bb      	bne.n	23a18 <ip_interface_sendto+0x64>
   23aa0:	2204      	movs	r2, #4
   23aa2:	8931      	ldrh	r1, [r6, #8]
   23aa4:	835a      	strh	r2, [r3, #26]
   23aa6:	8319      	strh	r1, [r3, #24]
   23aa8:	f106 010c 	add.w	r1, r6, #12
   23aac:	f7ea f894 	bl	dbd8 <memcpy>
   23ab0:	e022      	b.n	23af8 <ip_interface_sendto+0x144>
   23ab2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   23ab6:	f04f 33ff 	mov.w	r3, #4294967295
   23aba:	4611      	mov	r1, r2
   23abc:	4628      	mov	r0, r5
   23abe:	f001 f91d 	bl	24cfc <interface_socket_wait>
   23ac2:	b140      	cbz	r0, 23ad6 <ip_interface_sendto+0x122>
   23ac4:	6823      	ldr	r3, [r4, #0]
   23ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   23aca:	6023      	str	r3, [r4, #0]
   23acc:	6823      	ldr	r3, [r4, #0]
   23ace:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   23ad2:	6023      	str	r3, [r4, #0]
   23ad4:	e7a9      	b.n	23a2a <ip_interface_sendto+0x76>
   23ad6:	4628      	mov	r0, r5
   23ad8:	f001 f980 	bl	24ddc <interface_socket_from_handle_get>
   23adc:	4603      	mov	r3, r0
   23ade:	b1b8      	cbz	r0, 23b10 <ip_interface_sendto+0x15c>
   23ae0:	6840      	ldr	r0, [r0, #4]
   23ae2:	b1a8      	cbz	r0, 23b10 <ip_interface_sendto+0x15c>
   23ae4:	f8c3 8004 	str.w	r8, [r3, #4]
   23ae8:	e7ec      	b.n	23ac4 <ip_interface_sendto+0x110>
   23aea:	2210      	movs	r2, #16
   23aec:	8931      	ldrh	r1, [r6, #8]
   23aee:	835a      	strh	r2, [r3, #26]
   23af0:	8319      	strh	r1, [r3, #24]
   23af2:	18b1      	adds	r1, r6, r2
   23af4:	f7ea f870 	bl	dbd8 <memcpy>
   23af8:	f247 0207 	movw	r2, #28679	; 0x7007
   23afc:	9b01      	ldr	r3, [sp, #4]
   23afe:	4616      	mov	r6, r2
   23b00:	6899      	ldr	r1, [r3, #8]
   23b02:	8b58      	ldrh	r0, [r3, #26]
   23b04:	3104      	adds	r1, #4
   23b06:	4401      	add	r1, r0
   23b08:	f8c3 9014 	str.w	r9, [r3, #20]
   23b0c:	6099      	str	r1, [r3, #8]
   23b0e:	e799      	b.n	23a44 <ip_interface_sendto+0x90>
   23b10:	6823      	ldr	r3, [r4, #0]
   23b12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   23b16:	6023      	str	r3, [r4, #0]
   23b18:	4c10      	ldr	r4, [pc, #64]	; (23b5c <ip_interface_sendto+0x1a8>)
   23b1a:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   23b1e:	4618      	mov	r0, r3
   23b20:	699e      	ldr	r6, [r3, #24]
   23b22:	f7fc fb4b 	bl	201bc <rpc_ip_client_message_free>
   23b26:	2300      	movs	r3, #0
   23b28:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   23b2c:	e781      	b.n	23a32 <ip_interface_sendto+0x7e>
   23b2e:	6822      	ldr	r2, [r4, #0]
   23b30:	0092      	lsls	r2, r2, #2
   23b32:	d405      	bmi.n	23b40 <ip_interface_sendto+0x18c>
   23b34:	2b02      	cmp	r3, #2
   23b36:	d007      	beq.n	23b48 <ip_interface_sendto+0x194>
   23b38:	6823      	ldr	r3, [r4, #0]
   23b3a:	b29b      	uxth	r3, r3
   23b3c:	2b05      	cmp	r3, #5
   23b3e:	d003      	beq.n	23b48 <ip_interface_sendto+0x194>
   23b40:	2039      	movs	r0, #57	; 0x39
   23b42:	e772      	b.n	23a2a <ip_interface_sendto+0x76>
   23b44:	200c      	movs	r0, #12
   23b46:	e770      	b.n	23a2a <ip_interface_sendto+0x76>
   23b48:	6823      	ldr	r3, [r4, #0]
   23b4a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   23b4e:	bf0c      	ite	eq
   23b50:	2023      	moveq	r0, #35	; 0x23
   23b52:	2039      	movne	r0, #57	; 0x39
   23b54:	e769      	b.n	23a2a <ip_interface_sendto+0x76>
   23b56:	2009      	movs	r0, #9
   23b58:	e767      	b.n	23a2a <ip_interface_sendto+0x76>
   23b5a:	bf00      	nop
   23b5c:	200232f8 	.word	0x200232f8

00023b60 <ip_interface_recvfrom>:
   23b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23b64:	b085      	sub	sp, #20
   23b66:	2a00      	cmp	r2, #0
   23b68:	f000 80ea 	beq.w	23d40 <ip_interface_recvfrom+0x1e0>
   23b6c:	468a      	mov	sl, r1
   23b6e:	4699      	mov	r9, r3
   23b70:	4607      	mov	r7, r0
   23b72:	4616      	mov	r6, r2
   23b74:	f001 f932 	bl	24ddc <interface_socket_from_handle_get>
   23b78:	4604      	mov	r4, r0
   23b7a:	2800      	cmp	r0, #0
   23b7c:	f000 80e7 	beq.w	23d4e <ip_interface_recvfrom+0x1ee>
   23b80:	6803      	ldr	r3, [r0, #0]
   23b82:	02dd      	lsls	r5, r3, #11
   23b84:	d54f      	bpl.n	23c26 <ip_interface_recvfrom+0xc6>
   23b86:	f019 0f02 	tst.w	r9, #2
   23b8a:	bf18      	it	ne
   23b8c:	f04f 0800 	movne.w	r8, #0
   23b90:	f04f 3bff 	mov.w	fp, #4294967295
   23b94:	bf08      	it	eq
   23b96:	6803      	ldreq	r3, [r0, #0]
   23b98:	f009 0510 	and.w	r5, r9, #16
   23b9c:	bf04      	itt	eq
   23b9e:	f083 5880 	eoreq.w	r8, r3, #268435456	; 0x10000000
   23ba2:	f3c8 7800 	ubfxeq	r8, r8, #28, #1
   23ba6:	6823      	ldr	r3, [r4, #0]
   23ba8:	03d8      	lsls	r0, r3, #15
   23baa:	d556      	bpl.n	23c5a <ip_interface_recvfrom+0xfa>
   23bac:	6823      	ldr	r3, [r4, #0]
   23bae:	69a0      	ldr	r0, [r4, #24]
   23bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   23bb4:	6023      	str	r3, [r4, #0]
   23bb6:	6803      	ldr	r3, [r0, #0]
   23bb8:	68db      	ldr	r3, [r3, #12]
   23bba:	4798      	blx	r3
   23bbc:	f1b0 3fff 	cmp.w	r0, #4294967295
   23bc0:	4683      	mov	fp, r0
   23bc2:	d069      	beq.n	23c98 <ip_interface_recvfrom+0x138>
   23bc4:	4286      	cmp	r6, r0
   23bc6:	dd03      	ble.n	23bd0 <ip_interface_recvfrom+0x70>
   23bc8:	68e3      	ldr	r3, [r4, #12]
   23bca:	2b01      	cmp	r3, #1
   23bcc:	f000 8090 	beq.w	23cf0 <ip_interface_recvfrom+0x190>
   23bd0:	2500      	movs	r5, #0
   23bd2:	69a0      	ldr	r0, [r4, #24]
   23bd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   23bd6:	b103      	cbz	r3, 23bda <ip_interface_recvfrom+0x7a>
   23bd8:	681b      	ldr	r3, [r3, #0]
   23bda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   23bdc:	e9cd a600 	strd	sl, r6, [sp]
   23be0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   23be4:	6803      	ldr	r3, [r0, #0]
   23be6:	464a      	mov	r2, r9
   23be8:	689b      	ldr	r3, [r3, #8]
   23bea:	4669      	mov	r1, sp
   23bec:	4798      	blx	r3
   23bee:	4683      	mov	fp, r0
   23bf0:	69a0      	ldr	r0, [r4, #24]
   23bf2:	f1bb 3fff 	cmp.w	fp, #4294967295
   23bf6:	6803      	ldr	r3, [r0, #0]
   23bf8:	bf18      	it	ne
   23bfa:	2601      	movne	r6, #1
   23bfc:	68db      	ldr	r3, [r3, #12]
   23bfe:	bf0a      	itet	eq
   23c00:	2600      	moveq	r6, #0
   23c02:	f04f 0800 	movne.w	r8, #0
   23c06:	f04f 0823 	moveq.w	r8, #35	; 0x23
   23c0a:	4798      	blx	r3
   23c0c:	3001      	adds	r0, #1
   23c0e:	d11f      	bne.n	23c50 <ip_interface_recvfrom+0xf0>
   23c10:	b10d      	cbz	r5, 23c16 <ip_interface_recvfrom+0xb6>
   23c12:	2e00      	cmp	r6, #0
   23c14:	d073      	beq.n	23cfe <ip_interface_recvfrom+0x19e>
   23c16:	f1b8 0f00 	cmp.w	r8, #0
   23c1a:	f040 808b 	bne.w	23d34 <ip_interface_recvfrom+0x1d4>
   23c1e:	4658      	mov	r0, fp
   23c20:	b005      	add	sp, #20
   23c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23c26:	6803      	ldr	r3, [r0, #0]
   23c28:	b29b      	uxth	r3, r3
   23c2a:	2b06      	cmp	r3, #6
   23c2c:	d074      	beq.n	23d18 <ip_interface_recvfrom+0x1b8>
   23c2e:	6803      	ldr	r3, [r0, #0]
   23c30:	b29b      	uxth	r3, r3
   23c32:	2b07      	cmp	r3, #7
   23c34:	bf0c      	ite	eq
   23c36:	f04f 0809 	moveq.w	r8, #9
   23c3a:	f04f 0839 	movne.w	r8, #57	; 0x39
   23c3e:	69a0      	ldr	r0, [r4, #24]
   23c40:	6803      	ldr	r3, [r0, #0]
   23c42:	68db      	ldr	r3, [r3, #12]
   23c44:	4798      	blx	r3
   23c46:	3001      	adds	r0, #1
   23c48:	bf18      	it	ne
   23c4a:	f04f 3bff 	movne.w	fp, #4294967295
   23c4e:	d071      	beq.n	23d34 <ip_interface_recvfrom+0x1d4>
   23c50:	6823      	ldr	r3, [r4, #0]
   23c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   23c56:	6023      	str	r3, [r4, #0]
   23c58:	e7dd      	b.n	23c16 <ip_interface_recvfrom+0xb6>
   23c5a:	f1b8 0f00 	cmp.w	r8, #0
   23c5e:	d072      	beq.n	23d46 <ip_interface_recvfrom+0x1e6>
   23c60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   23c64:	69e3      	ldr	r3, [r4, #28]
   23c66:	4611      	mov	r1, r2
   23c68:	2b00      	cmp	r3, #0
   23c6a:	bf08      	it	eq
   23c6c:	f04f 33ff 	moveq.w	r3, #4294967295
   23c70:	4638      	mov	r0, r7
   23c72:	f001 f843 	bl	24cfc <interface_socket_wait>
   23c76:	4680      	mov	r8, r0
   23c78:	b358      	cbz	r0, 23cd2 <ip_interface_recvfrom+0x172>
   23c7a:	6823      	ldr	r3, [r4, #0]
   23c7c:	69a0      	ldr	r0, [r4, #24]
   23c7e:	031b      	lsls	r3, r3, #12
   23c80:	d521      	bpl.n	23cc6 <ip_interface_recvfrom+0x166>
   23c82:	6823      	ldr	r3, [r4, #0]
   23c84:	b29b      	uxth	r3, r3
   23c86:	2b0d      	cmp	r3, #13
   23c88:	d01d      	beq.n	23cc6 <ip_interface_recvfrom+0x166>
   23c8a:	68e5      	ldr	r5, [r4, #12]
   23c8c:	f1a5 0501 	sub.w	r5, r5, #1
   23c90:	fab5 f585 	clz	r5, r5
   23c94:	096d      	lsrs	r5, r5, #5
   23c96:	e79d      	b.n	23bd4 <ip_interface_recvfrom+0x74>
   23c98:	6823      	ldr	r3, [r4, #0]
   23c9a:	031a      	lsls	r2, r3, #12
   23c9c:	d5dd      	bpl.n	23c5a <ip_interface_recvfrom+0xfa>
   23c9e:	6823      	ldr	r3, [r4, #0]
   23ca0:	b29b      	uxth	r3, r3
   23ca2:	2b0d      	cmp	r3, #13
   23ca4:	d0d9      	beq.n	23c5a <ip_interface_recvfrom+0xfa>
   23ca6:	68e3      	ldr	r3, [r4, #12]
   23ca8:	69a0      	ldr	r0, [r4, #24]
   23caa:	2b01      	cmp	r3, #1
   23cac:	d037      	beq.n	23d1e <ip_interface_recvfrom+0x1be>
   23cae:	f04f 0839 	mov.w	r8, #57	; 0x39
   23cb2:	6823      	ldr	r3, [r4, #0]
   23cb4:	0c1b      	lsrs	r3, r3, #16
   23cb6:	041b      	lsls	r3, r3, #16
   23cb8:	f043 030d 	orr.w	r3, r3, #13
   23cbc:	6023      	str	r3, [r4, #0]
   23cbe:	6823      	ldr	r3, [r4, #0]
   23cc0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   23cc4:	6023      	str	r3, [r4, #0]
   23cc6:	6803      	ldr	r3, [r0, #0]
   23cc8:	68db      	ldr	r3, [r3, #12]
   23cca:	4798      	blx	r3
   23ccc:	3001      	adds	r0, #1
   23cce:	d1bf      	bne.n	23c50 <ip_interface_recvfrom+0xf0>
   23cd0:	e030      	b.n	23d34 <ip_interface_recvfrom+0x1d4>
   23cd2:	4638      	mov	r0, r7
   23cd4:	f001 f882 	bl	24ddc <interface_socket_from_handle_get>
   23cd8:	b138      	cbz	r0, 23cea <ip_interface_recvfrom+0x18a>
   23cda:	f8d0 8004 	ldr.w	r8, [r0, #4]
   23cde:	f1b8 0f00 	cmp.w	r8, #0
   23ce2:	d002      	beq.n	23cea <ip_interface_recvfrom+0x18a>
   23ce4:	2300      	movs	r3, #0
   23ce6:	6043      	str	r3, [r0, #4]
   23ce8:	e7c7      	b.n	23c7a <ip_interface_recvfrom+0x11a>
   23cea:	f04f 0801 	mov.w	r8, #1
   23cee:	e75a      	b.n	23ba6 <ip_interface_recvfrom+0x46>
   23cf0:	b11d      	cbz	r5, 23cfa <ip_interface_recvfrom+0x19a>
   23cf2:	6823      	ldr	r3, [r4, #0]
   23cf4:	00d9      	lsls	r1, r3, #3
   23cf6:	d5b3      	bpl.n	23c60 <ip_interface_recvfrom+0x100>
   23cf8:	e76a      	b.n	23bd0 <ip_interface_recvfrom+0x70>
   23cfa:	69a0      	ldr	r0, [r4, #24]
   23cfc:	e76a      	b.n	23bd4 <ip_interface_recvfrom+0x74>
   23cfe:	6823      	ldr	r3, [r4, #0]
   23d00:	f04f 0b00 	mov.w	fp, #0
   23d04:	0c1b      	lsrs	r3, r3, #16
   23d06:	041b      	lsls	r3, r3, #16
   23d08:	f043 030d 	orr.w	r3, r3, #13
   23d0c:	6023      	str	r3, [r4, #0]
   23d0e:	6823      	ldr	r3, [r4, #0]
   23d10:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   23d14:	6023      	str	r3, [r4, #0]
   23d16:	e782      	b.n	23c1e <ip_interface_recvfrom+0xbe>
   23d18:	f04f 0809 	mov.w	r8, #9
   23d1c:	e78f      	b.n	23c3e <ip_interface_recvfrom+0xde>
   23d1e:	6803      	ldr	r3, [r0, #0]
   23d20:	68db      	ldr	r3, [r3, #12]
   23d22:	4798      	blx	r3
   23d24:	3001      	adds	r0, #1
   23d26:	d0ea      	beq.n	23cfe <ip_interface_recvfrom+0x19e>
   23d28:	f04f 0823 	mov.w	r8, #35	; 0x23
   23d2c:	6823      	ldr	r3, [r4, #0]
   23d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   23d32:	6023      	str	r3, [r4, #0]
   23d34:	4640      	mov	r0, r8
   23d36:	f00a ffee 	bl	2ed16 <bsd_os_errno_set>
   23d3a:	f04f 3bff 	mov.w	fp, #4294967295
   23d3e:	e76e      	b.n	23c1e <ip_interface_recvfrom+0xbe>
   23d40:	f04f 0816 	mov.w	r8, #22
   23d44:	e7f6      	b.n	23d34 <ip_interface_recvfrom+0x1d4>
   23d46:	69a0      	ldr	r0, [r4, #24]
   23d48:	f04f 0823 	mov.w	r8, #35	; 0x23
   23d4c:	e7bb      	b.n	23cc6 <ip_interface_recvfrom+0x166>
   23d4e:	f04f 0809 	mov.w	r8, #9
   23d52:	e7ef      	b.n	23d34 <ip_interface_recvfrom+0x1d4>

00023d54 <ip_interface_connect>:
   23d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23d58:	b082      	sub	sp, #8
   23d5a:	2900      	cmp	r1, #0
   23d5c:	d043      	beq.n	23de6 <ip_interface_connect+0x92>
   23d5e:	2a00      	cmp	r2, #0
   23d60:	d041      	beq.n	23de6 <ip_interface_connect+0x92>
   23d62:	4606      	mov	r6, r0
   23d64:	460f      	mov	r7, r1
   23d66:	f001 f839 	bl	24ddc <interface_socket_from_handle_get>
   23d6a:	4605      	mov	r5, r0
   23d6c:	2800      	cmp	r0, #0
   23d6e:	f000 8092 	beq.w	23e96 <ip_interface_connect+0x142>
   23d72:	6803      	ldr	r3, [r0, #0]
   23d74:	b29b      	uxth	r3, r3
   23d76:	2b02      	cmp	r3, #2
   23d78:	d004      	beq.n	23d84 <ip_interface_connect+0x30>
   23d7a:	6803      	ldr	r3, [r0, #0]
   23d7c:	b29b      	uxth	r3, r3
   23d7e:	2b04      	cmp	r3, #4
   23d80:	f040 8089 	bne.w	23e96 <ip_interface_connect+0x142>
   23d84:	6829      	ldr	r1, [r5, #0]
   23d86:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   23d8a:	d178      	bne.n	23e7e <ip_interface_connect+0x12a>
   23d8c:	a802      	add	r0, sp, #8
   23d8e:	f840 1d04 	str.w	r1, [r0, #-4]!
   23d92:	f8d5 8014 	ldr.w	r8, [r5, #20]
   23d96:	f7fc f9e7 	bl	20168 <rpc_ip_client_request_alloc>
   23d9a:	bb70      	cbnz	r0, 23dfa <ip_interface_connect+0xa6>
   23d9c:	2108      	movs	r1, #8
   23d9e:	0433      	lsls	r3, r6, #16
   23da0:	9c01      	ldr	r4, [sp, #4]
   23da2:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   23da6:	f042 0202 	orr.w	r2, r2, #2
   23daa:	60e2      	str	r2, [r4, #12]
   23dac:	f8c4 8010 	str.w	r8, [r4, #16]
   23db0:	7260      	strb	r0, [r4, #9]
   23db2:	72a0      	strb	r0, [r4, #10]
   23db4:	72e0      	strb	r0, [r4, #11]
   23db6:	7221      	strb	r1, [r4, #8]
   23db8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   23dbc:	f043 0302 	orr.w	r3, r3, #2
   23dc0:	60e3      	str	r3, [r4, #12]
   23dc2:	68a3      	ldr	r3, [r4, #8]
   23dc4:	696a      	ldr	r2, [r5, #20]
   23dc6:	3304      	adds	r3, #4
   23dc8:	6122      	str	r2, [r4, #16]
   23dca:	60a3      	str	r3, [r4, #8]
   23dcc:	68ab      	ldr	r3, [r5, #8]
   23dce:	687a      	ldr	r2, [r7, #4]
   23dd0:	4293      	cmp	r3, r2
   23dd2:	d108      	bne.n	23de6 <ip_interface_connect+0x92>
   23dd4:	2b02      	cmp	r3, #2
   23dd6:	f104 0018 	add.w	r0, r4, #24
   23dda:	783a      	ldrb	r2, [r7, #0]
   23ddc:	d035      	beq.n	23e4a <ip_interface_connect+0xf6>
   23dde:	2b0a      	cmp	r3, #10
   23de0:	d101      	bne.n	23de6 <ip_interface_connect+0x92>
   23de2:	2a24      	cmp	r2, #36	; 0x24
   23de4:	d00e      	beq.n	23e04 <ip_interface_connect+0xb0>
   23de6:	2416      	movs	r4, #22
   23de8:	4620      	mov	r0, r4
   23dea:	f00a ff94 	bl	2ed16 <bsd_os_errno_set>
   23dee:	f04f 34ff 	mov.w	r4, #4294967295
   23df2:	4620      	mov	r0, r4
   23df4:	b002      	add	sp, #8
   23df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23dfa:	9c01      	ldr	r4, [sp, #4]
   23dfc:	2c00      	cmp	r4, #0
   23dfe:	d04c      	beq.n	23e9a <ip_interface_connect+0x146>
   23e00:	0433      	lsls	r3, r6, #16
   23e02:	e7d9      	b.n	23db8 <ip_interface_connect+0x64>
   23e04:	2210      	movs	r2, #16
   23e06:	893b      	ldrh	r3, [r7, #8]
   23e08:	18b9      	adds	r1, r7, r2
   23e0a:	82e2      	strh	r2, [r4, #22]
   23e0c:	82a3      	strh	r3, [r4, #20]
   23e0e:	f7e9 fee3 	bl	dbd8 <memcpy>
   23e12:	68a3      	ldr	r3, [r4, #8]
   23e14:	8ae2      	ldrh	r2, [r4, #22]
   23e16:	f247 0102 	movw	r1, #28674	; 0x7002
   23e1a:	4413      	add	r3, r2
   23e1c:	60a3      	str	r3, [r4, #8]
   23e1e:	f8d5 8000 	ldr.w	r8, [r5]
   23e22:	682b      	ldr	r3, [r5, #0]
   23e24:	4620      	mov	r0, r4
   23e26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   23e2a:	602b      	str	r3, [r5, #0]
   23e2c:	f7fc f9b0 	bl	20190 <rpc_ip_client_request_send>
   23e30:	4607      	mov	r7, r0
   23e32:	b1a8      	cbz	r0, 23e60 <ip_interface_connect+0x10c>
   23e34:	6820      	ldr	r0, [r4, #0]
   23e36:	b108      	cbz	r0, 23e3c <ip_interface_connect+0xe8>
   23e38:	f7fc f9c8 	bl	201cc <rpc_ip_client_data_free>
   23e3c:	4620      	mov	r0, r4
   23e3e:	f7fc f9bd 	bl	201bc <rpc_ip_client_message_free>
   23e42:	2423      	movs	r4, #35	; 0x23
   23e44:	f8c5 8000 	str.w	r8, [r5]
   23e48:	e7ce      	b.n	23de8 <ip_interface_connect+0x94>
   23e4a:	2a10      	cmp	r2, #16
   23e4c:	d1cb      	bne.n	23de6 <ip_interface_connect+0x92>
   23e4e:	2204      	movs	r2, #4
   23e50:	893b      	ldrh	r3, [r7, #8]
   23e52:	f107 010c 	add.w	r1, r7, #12
   23e56:	82e2      	strh	r2, [r4, #22]
   23e58:	82a3      	strh	r3, [r4, #20]
   23e5a:	f7e9 febd 	bl	dbd8 <memcpy>
   23e5e:	e7d8      	b.n	23e12 <ip_interface_connect+0xbe>
   23e60:	f04f 33ff 	mov.w	r3, #4294967295
   23e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23e68:	2105      	movs	r1, #5
   23e6a:	4630      	mov	r0, r6
   23e6c:	f000 ff46 	bl	24cfc <interface_socket_wait>
   23e70:	4604      	mov	r4, r0
   23e72:	b130      	cbz	r0, 23e82 <ip_interface_connect+0x12e>
   23e74:	2c73      	cmp	r4, #115	; 0x73
   23e76:	d0b7      	beq.n	23de8 <ip_interface_connect+0x94>
   23e78:	f8c5 8000 	str.w	r8, [r5]
   23e7c:	e7b4      	b.n	23de8 <ip_interface_connect+0x94>
   23e7e:	2472      	movs	r4, #114	; 0x72
   23e80:	e7b2      	b.n	23de8 <ip_interface_connect+0x94>
   23e82:	4630      	mov	r0, r6
   23e84:	f000 ffaa 	bl	24ddc <interface_socket_from_handle_get>
   23e88:	2800      	cmp	r0, #0
   23e8a:	d0b2      	beq.n	23df2 <ip_interface_connect+0x9e>
   23e8c:	6844      	ldr	r4, [r0, #4]
   23e8e:	2c00      	cmp	r4, #0
   23e90:	d0af      	beq.n	23df2 <ip_interface_connect+0x9e>
   23e92:	6047      	str	r7, [r0, #4]
   23e94:	e7ee      	b.n	23e74 <ip_interface_connect+0x120>
   23e96:	2409      	movs	r4, #9
   23e98:	e7a6      	b.n	23de8 <ip_interface_connect+0x94>
   23e9a:	240c      	movs	r4, #12
   23e9c:	e7a4      	b.n	23de8 <ip_interface_connect+0x94>
   23e9e:	bf00      	nop

00023ea0 <ip_interface_bind>:
   23ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23ea4:	b082      	sub	sp, #8
   23ea6:	b389      	cbz	r1, 23f0c <ip_interface_bind+0x6c>
   23ea8:	b382      	cbz	r2, 23f0c <ip_interface_bind+0x6c>
   23eaa:	4607      	mov	r7, r0
   23eac:	460e      	mov	r6, r1
   23eae:	f000 ff95 	bl	24ddc <interface_socket_from_handle_get>
   23eb2:	4605      	mov	r5, r0
   23eb4:	2800      	cmp	r0, #0
   23eb6:	d07b      	beq.n	23fb0 <ip_interface_bind+0x110>
   23eb8:	6803      	ldr	r3, [r0, #0]
   23eba:	b29b      	uxth	r3, r3
   23ebc:	2b02      	cmp	r3, #2
   23ebe:	d177      	bne.n	23fb0 <ip_interface_bind+0x110>
   23ec0:	2100      	movs	r1, #0
   23ec2:	a802      	add	r0, sp, #8
   23ec4:	f840 1d04 	str.w	r1, [r0, #-4]!
   23ec8:	f8d5 8014 	ldr.w	r8, [r5, #20]
   23ecc:	f7fc f94c 	bl	20168 <rpc_ip_client_request_alloc>
   23ed0:	bb30      	cbnz	r0, 23f20 <ip_interface_bind+0x80>
   23ed2:	f247 0305 	movw	r3, #28677	; 0x7005
   23ed6:	2208      	movs	r2, #8
   23ed8:	9c01      	ldr	r4, [sp, #4]
   23eda:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   23ede:	60e3      	str	r3, [r4, #12]
   23ee0:	f8c4 8010 	str.w	r8, [r4, #16]
   23ee4:	7260      	strb	r0, [r4, #9]
   23ee6:	72a0      	strb	r0, [r4, #10]
   23ee8:	72e0      	strb	r0, [r4, #11]
   23eea:	7222      	strb	r2, [r4, #8]
   23eec:	68a3      	ldr	r3, [r4, #8]
   23eee:	3304      	adds	r3, #4
   23ef0:	60a3      	str	r3, [r4, #8]
   23ef2:	68ab      	ldr	r3, [r5, #8]
   23ef4:	6872      	ldr	r2, [r6, #4]
   23ef6:	4293      	cmp	r3, r2
   23ef8:	d108      	bne.n	23f0c <ip_interface_bind+0x6c>
   23efa:	2b02      	cmp	r3, #2
   23efc:	f104 0018 	add.w	r0, r4, #24
   23f00:	7832      	ldrb	r2, [r6, #0]
   23f02:	d03c      	beq.n	23f7e <ip_interface_bind+0xde>
   23f04:	2b0a      	cmp	r3, #10
   23f06:	d101      	bne.n	23f0c <ip_interface_bind+0x6c>
   23f08:	2a24      	cmp	r2, #36	; 0x24
   23f0a:	d00e      	beq.n	23f2a <ip_interface_bind+0x8a>
   23f0c:	2416      	movs	r4, #22
   23f0e:	4620      	mov	r0, r4
   23f10:	f00a ff01 	bl	2ed16 <bsd_os_errno_set>
   23f14:	f04f 34ff 	mov.w	r4, #4294967295
   23f18:	4620      	mov	r0, r4
   23f1a:	b002      	add	sp, #8
   23f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23f20:	9c01      	ldr	r4, [sp, #4]
   23f22:	2c00      	cmp	r4, #0
   23f24:	d1e2      	bne.n	23eec <ip_interface_bind+0x4c>
   23f26:	240c      	movs	r4, #12
   23f28:	e7f1      	b.n	23f0e <ip_interface_bind+0x6e>
   23f2a:	2210      	movs	r2, #16
   23f2c:	8933      	ldrh	r3, [r6, #8]
   23f2e:	18b1      	adds	r1, r6, r2
   23f30:	82e2      	strh	r2, [r4, #22]
   23f32:	82a3      	strh	r3, [r4, #20]
   23f34:	f7e9 fe50 	bl	dbd8 <memcpy>
   23f38:	68a3      	ldr	r3, [r4, #8]
   23f3a:	8ae2      	ldrh	r2, [r4, #22]
   23f3c:	f247 0105 	movw	r1, #28677	; 0x7005
   23f40:	4413      	add	r3, r2
   23f42:	60a3      	str	r3, [r4, #8]
   23f44:	682b      	ldr	r3, [r5, #0]
   23f46:	4620      	mov	r0, r4
   23f48:	0c1b      	lsrs	r3, r3, #16
   23f4a:	041b      	lsls	r3, r3, #16
   23f4c:	f043 0303 	orr.w	r3, r3, #3
   23f50:	602b      	str	r3, [r5, #0]
   23f52:	682e      	ldr	r6, [r5, #0]
   23f54:	f7fc f91c 	bl	20190 <rpc_ip_client_request_send>
   23f58:	4680      	mov	r8, r0
   23f5a:	b9d8      	cbnz	r0, 23f94 <ip_interface_bind+0xf4>
   23f5c:	f04f 33ff 	mov.w	r3, #4294967295
   23f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23f64:	2104      	movs	r1, #4
   23f66:	4638      	mov	r0, r7
   23f68:	f000 fec8 	bl	24cfc <interface_socket_wait>
   23f6c:	4604      	mov	r4, r0
   23f6e:	b308      	cbz	r0, 23fb4 <ip_interface_bind+0x114>
   23f70:	682b      	ldr	r3, [r5, #0]
   23f72:	0c1b      	lsrs	r3, r3, #16
   23f74:	041b      	lsls	r3, r3, #16
   23f76:	f043 0302 	orr.w	r3, r3, #2
   23f7a:	602b      	str	r3, [r5, #0]
   23f7c:	e7c7      	b.n	23f0e <ip_interface_bind+0x6e>
   23f7e:	2a10      	cmp	r2, #16
   23f80:	d1c4      	bne.n	23f0c <ip_interface_bind+0x6c>
   23f82:	2204      	movs	r2, #4
   23f84:	8933      	ldrh	r3, [r6, #8]
   23f86:	f106 010c 	add.w	r1, r6, #12
   23f8a:	82e2      	strh	r2, [r4, #22]
   23f8c:	82a3      	strh	r3, [r4, #20]
   23f8e:	f7e9 fe23 	bl	dbd8 <memcpy>
   23f92:	e7d1      	b.n	23f38 <ip_interface_bind+0x98>
   23f94:	6820      	ldr	r0, [r4, #0]
   23f96:	b108      	cbz	r0, 23f9c <ip_interface_bind+0xfc>
   23f98:	f7fc f918 	bl	201cc <rpc_ip_client_data_free>
   23f9c:	0c36      	lsrs	r6, r6, #16
   23f9e:	0436      	lsls	r6, r6, #16
   23fa0:	4620      	mov	r0, r4
   23fa2:	f046 0602 	orr.w	r6, r6, #2
   23fa6:	f7fc f909 	bl	201bc <rpc_ip_client_message_free>
   23faa:	2423      	movs	r4, #35	; 0x23
   23fac:	602e      	str	r6, [r5, #0]
   23fae:	e7ae      	b.n	23f0e <ip_interface_bind+0x6e>
   23fb0:	2409      	movs	r4, #9
   23fb2:	e7ac      	b.n	23f0e <ip_interface_bind+0x6e>
   23fb4:	4638      	mov	r0, r7
   23fb6:	f000 ff11 	bl	24ddc <interface_socket_from_handle_get>
   23fba:	2800      	cmp	r0, #0
   23fbc:	d0ac      	beq.n	23f18 <ip_interface_bind+0x78>
   23fbe:	6844      	ldr	r4, [r0, #4]
   23fc0:	2c00      	cmp	r4, #0
   23fc2:	d0a9      	beq.n	23f18 <ip_interface_bind+0x78>
   23fc4:	f8c0 8004 	str.w	r8, [r0, #4]
   23fc8:	e7d2      	b.n	23f70 <ip_interface_bind+0xd0>
   23fca:	bf00      	nop

00023fcc <ip_interface_listen>:
   23fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23fd0:	b082      	sub	sp, #8
   23fd2:	4606      	mov	r6, r0
   23fd4:	f000 ff02 	bl	24ddc <interface_socket_from_handle_get>
   23fd8:	2800      	cmp	r0, #0
   23fda:	d067      	beq.n	240ac <ip_interface_listen+0xe0>
   23fdc:	6803      	ldr	r3, [r0, #0]
   23fde:	4605      	mov	r5, r0
   23fe0:	b29b      	uxth	r3, r3
   23fe2:	2b04      	cmp	r3, #4
   23fe4:	d162      	bne.n	240ac <ip_interface_listen+0xe0>
   23fe6:	2100      	movs	r1, #0
   23fe8:	4a32      	ldr	r2, [pc, #200]	; (240b4 <ip_interface_listen+0xe8>)
   23fea:	4630      	mov	r0, r6
   23fec:	f000 fe58 	bl	24ca0 <interface_socket_packet_handler_update>
   23ff0:	4601      	mov	r1, r0
   23ff2:	2800      	cmp	r0, #0
   23ff4:	d15c      	bne.n	240b0 <ip_interface_listen+0xe4>
   23ff6:	a802      	add	r0, sp, #8
   23ff8:	f840 1d04 	str.w	r1, [r0, #-4]!
   23ffc:	696f      	ldr	r7, [r5, #20]
   23ffe:	f7fc f8b3 	bl	20168 <rpc_ip_client_request_alloc>
   24002:	bba8      	cbnz	r0, 24070 <ip_interface_listen+0xa4>
   24004:	f247 0308 	movw	r3, #28680	; 0x7008
   24008:	2208      	movs	r2, #8
   2400a:	9c01      	ldr	r4, [sp, #4]
   2400c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   24010:	60e3      	str	r3, [r4, #12]
   24012:	6127      	str	r7, [r4, #16]
   24014:	7260      	strb	r0, [r4, #9]
   24016:	72a0      	strb	r0, [r4, #10]
   24018:	72e0      	strb	r0, [r4, #11]
   2401a:	7222      	strb	r2, [r4, #8]
   2401c:	68a3      	ldr	r3, [r4, #8]
   2401e:	f247 0108 	movw	r1, #28680	; 0x7008
   24022:	3304      	adds	r3, #4
   24024:	60a3      	str	r3, [r4, #8]
   24026:	682b      	ldr	r3, [r5, #0]
   24028:	4620      	mov	r0, r4
   2402a:	0c1b      	lsrs	r3, r3, #16
   2402c:	041b      	lsls	r3, r3, #16
   2402e:	f043 0306 	orr.w	r3, r3, #6
   24032:	602b      	str	r3, [r5, #0]
   24034:	682f      	ldr	r7, [r5, #0]
   24036:	f7fc f8ab 	bl	20190 <rpc_ip_client_request_send>
   2403a:	4680      	mov	r8, r0
   2403c:	b9e8      	cbnz	r0, 2407a <ip_interface_listen+0xae>
   2403e:	f04f 33ff 	mov.w	r3, #4294967295
   24042:	f64f 72ff 	movw	r2, #65535	; 0xffff
   24046:	2107      	movs	r1, #7
   24048:	4630      	mov	r0, r6
   2404a:	f000 fe57 	bl	24cfc <interface_socket_wait>
   2404e:	4604      	mov	r4, r0
   24050:	b308      	cbz	r0, 24096 <ip_interface_listen+0xca>
   24052:	682b      	ldr	r3, [r5, #0]
   24054:	0c1b      	lsrs	r3, r3, #16
   24056:	041b      	lsls	r3, r3, #16
   24058:	f043 0304 	orr.w	r3, r3, #4
   2405c:	602b      	str	r3, [r5, #0]
   2405e:	4620      	mov	r0, r4
   24060:	f00a fe59 	bl	2ed16 <bsd_os_errno_set>
   24064:	f04f 34ff 	mov.w	r4, #4294967295
   24068:	4620      	mov	r0, r4
   2406a:	b002      	add	sp, #8
   2406c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24070:	9c01      	ldr	r4, [sp, #4]
   24072:	2c00      	cmp	r4, #0
   24074:	d1d2      	bne.n	2401c <ip_interface_listen+0x50>
   24076:	240c      	movs	r4, #12
   24078:	e7f1      	b.n	2405e <ip_interface_listen+0x92>
   2407a:	6820      	ldr	r0, [r4, #0]
   2407c:	b108      	cbz	r0, 24082 <ip_interface_listen+0xb6>
   2407e:	f7fc f8a5 	bl	201cc <rpc_ip_client_data_free>
   24082:	0c3f      	lsrs	r7, r7, #16
   24084:	043f      	lsls	r7, r7, #16
   24086:	4620      	mov	r0, r4
   24088:	f047 0704 	orr.w	r7, r7, #4
   2408c:	f7fc f896 	bl	201bc <rpc_ip_client_message_free>
   24090:	2423      	movs	r4, #35	; 0x23
   24092:	602f      	str	r7, [r5, #0]
   24094:	e7e3      	b.n	2405e <ip_interface_listen+0x92>
   24096:	4630      	mov	r0, r6
   24098:	f000 fea0 	bl	24ddc <interface_socket_from_handle_get>
   2409c:	2800      	cmp	r0, #0
   2409e:	d0e3      	beq.n	24068 <ip_interface_listen+0x9c>
   240a0:	6844      	ldr	r4, [r0, #4]
   240a2:	2c00      	cmp	r4, #0
   240a4:	d0e0      	beq.n	24068 <ip_interface_listen+0x9c>
   240a6:	f8c0 8004 	str.w	r8, [r0, #4]
   240aa:	e7d2      	b.n	24052 <ip_interface_listen+0x86>
   240ac:	2409      	movs	r4, #9
   240ae:	e7d6      	b.n	2405e <ip_interface_listen+0x92>
   240b0:	2423      	movs	r4, #35	; 0x23
   240b2:	e7d4      	b.n	2405e <ip_interface_listen+0x92>
   240b4:	000236b5 	.word	0x000236b5

000240b8 <ip_interface_accept>:
   240b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   240bc:	2500      	movs	r5, #0
   240be:	b085      	sub	sp, #20
   240c0:	460f      	mov	r7, r1
   240c2:	4690      	mov	r8, r2
   240c4:	9502      	str	r5, [sp, #8]
   240c6:	4606      	mov	r6, r0
   240c8:	f000 fe88 	bl	24ddc <interface_socket_from_handle_get>
   240cc:	4604      	mov	r4, r0
   240ce:	2800      	cmp	r0, #0
   240d0:	f000 811c 	beq.w	2430c <ip_interface_accept+0x254>
   240d4:	6803      	ldr	r3, [r0, #0]
   240d6:	b29b      	uxth	r3, r3
   240d8:	2b07      	cmp	r3, #7
   240da:	d10a      	bne.n	240f2 <ip_interface_accept+0x3a>
   240dc:	6803      	ldr	r3, [r0, #0]
   240de:	6805      	ldr	r5, [r0, #0]
   240e0:	00db      	lsls	r3, r3, #3
   240e2:	d416      	bmi.n	24112 <ip_interface_accept+0x5a>
   240e4:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   240e8:	d019      	beq.n	2411e <ip_interface_accept+0x66>
   240ea:	6805      	ldr	r5, [r0, #0]
   240ec:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   240f0:	d124      	bne.n	2413c <ip_interface_accept+0x84>
   240f2:	f04f 0909 	mov.w	r9, #9
   240f6:	9b02      	ldr	r3, [sp, #8]
   240f8:	b113      	cbz	r3, 24100 <ip_interface_accept+0x48>
   240fa:	4628      	mov	r0, r5
   240fc:	f000 fdbc 	bl	24c78 <interface_socket_free>
   24100:	4648      	mov	r0, r9
   24102:	f04f 39ff 	mov.w	r9, #4294967295
   24106:	f00a fe06 	bl	2ed16 <bsd_os_errno_set>
   2410a:	4648      	mov	r0, r9
   2410c:	b005      	add	sp, #20
   2410e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24112:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   24116:	d16d      	bne.n	241f4 <ip_interface_accept+0x13c>
   24118:	f04f 0923 	mov.w	r9, #35	; 0x23
   2411c:	e7eb      	b.n	240f6 <ip_interface_accept+0x3e>
   2411e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   24122:	f04f 33ff 	mov.w	r3, #4294967295
   24126:	4611      	mov	r1, r2
   24128:	4630      	mov	r0, r6
   2412a:	f000 fde7 	bl	24cfc <interface_socket_wait>
   2412e:	4681      	mov	r9, r0
   24130:	2800      	cmp	r0, #0
   24132:	d07e      	beq.n	24232 <ip_interface_accept+0x17a>
   24134:	6825      	ldr	r5, [r4, #0]
   24136:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   2413a:	d0dc      	beq.n	240f6 <ip_interface_accept+0x3e>
   2413c:	f04f 30ff 	mov.w	r0, #4294967295
   24140:	2300      	movs	r3, #0
   24142:	e9cd 0300 	strd	r0, r3, [sp]
   24146:	4a75      	ldr	r2, [pc, #468]	; (2431c <ip_interface_accept+0x264>)
   24148:	68e1      	ldr	r1, [r4, #12]
   2414a:	a802      	add	r0, sp, #8
   2414c:	f000 fd40 	bl	24bd0 <interface_socket_allocate>
   24150:	9b02      	ldr	r3, [sp, #8]
   24152:	4605      	mov	r5, r0
   24154:	2b00      	cmp	r3, #0
   24156:	f000 80dd 	beq.w	24314 <ip_interface_accept+0x25c>
   2415a:	2100      	movs	r1, #0
   2415c:	6922      	ldr	r2, [r4, #16]
   2415e:	a804      	add	r0, sp, #16
   24160:	611a      	str	r2, [r3, #16]
   24162:	68a2      	ldr	r2, [r4, #8]
   24164:	f840 1d04 	str.w	r1, [r0, #-4]!
   24168:	609a      	str	r2, [r3, #8]
   2416a:	68e2      	ldr	r2, [r4, #12]
   2416c:	60da      	str	r2, [r3, #12]
   2416e:	f8d4 9014 	ldr.w	r9, [r4, #20]
   24172:	f7fb fff9 	bl	20168 <rpc_ip_client_request_alloc>
   24176:	2800      	cmp	r0, #0
   24178:	d143      	bne.n	24202 <ip_interface_accept+0x14a>
   2417a:	f247 030c 	movw	r3, #28684	; 0x700c
   2417e:	2108      	movs	r1, #8
   24180:	f8dd b00c 	ldr.w	fp, [sp, #12]
   24184:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   24188:	f8cb 300c 	str.w	r3, [fp, #12]
   2418c:	f8cb 9010 	str.w	r9, [fp, #16]
   24190:	f88b 0009 	strb.w	r0, [fp, #9]
   24194:	f88b 000a 	strb.w	r0, [fp, #10]
   24198:	f88b 000b 	strb.w	r0, [fp, #11]
   2419c:	f88b 1008 	strb.w	r1, [fp, #8]
   241a0:	6823      	ldr	r3, [r4, #0]
   241a2:	f247 010c 	movw	r1, #28684	; 0x700c
   241a6:	0c1b      	lsrs	r3, r3, #16
   241a8:	041b      	lsls	r3, r3, #16
   241aa:	f043 0308 	orr.w	r3, r3, #8
   241ae:	6023      	str	r3, [r4, #0]
   241b0:	4658      	mov	r0, fp
   241b2:	f8d4 9000 	ldr.w	r9, [r4]
   241b6:	f7fb ffeb 	bl	20190 <rpc_ip_client_request_send>
   241ba:	4682      	mov	sl, r0
   241bc:	bb48      	cbnz	r0, 24212 <ip_interface_accept+0x15a>
   241be:	6822      	ldr	r2, [r4, #0]
   241c0:	9900      	ldr	r1, [sp, #0]
   241c2:	f04f 33ff 	mov.w	r3, #4294967295
   241c6:	400a      	ands	r2, r1
   241c8:	6022      	str	r2, [r4, #0]
   241ca:	2109      	movs	r1, #9
   241cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   241d0:	4630      	mov	r0, r6
   241d2:	f000 fd93 	bl	24cfc <interface_socket_wait>
   241d6:	4681      	mov	r9, r0
   241d8:	2800      	cmp	r0, #0
   241da:	f000 8085 	beq.w	242e8 <ip_interface_accept+0x230>
   241de:	6823      	ldr	r3, [r4, #0]
   241e0:	9a01      	ldr	r2, [sp, #4]
   241e2:	431a      	orrs	r2, r3
   241e4:	6022      	str	r2, [r4, #0]
   241e6:	6823      	ldr	r3, [r4, #0]
   241e8:	0c1b      	lsrs	r3, r3, #16
   241ea:	041b      	lsls	r3, r3, #16
   241ec:	f043 0307 	orr.w	r3, r3, #7
   241f0:	6023      	str	r3, [r4, #0]
   241f2:	e780      	b.n	240f6 <ip_interface_accept+0x3e>
   241f4:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   241f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   241fc:	e9cd 2300 	strd	r2, r3, [sp]
   24200:	e7a1      	b.n	24146 <ip_interface_accept+0x8e>
   24202:	f8dd b00c 	ldr.w	fp, [sp, #12]
   24206:	f04f 090c 	mov.w	r9, #12
   2420a:	f1bb 0f00 	cmp.w	fp, #0
   2420e:	d1c7      	bne.n	241a0 <ip_interface_accept+0xe8>
   24210:	e771      	b.n	240f6 <ip_interface_accept+0x3e>
   24212:	f8db 0000 	ldr.w	r0, [fp]
   24216:	b108      	cbz	r0, 2421c <ip_interface_accept+0x164>
   24218:	f7fb ffd8 	bl	201cc <rpc_ip_client_data_free>
   2421c:	ea4f 4919 	mov.w	r9, r9, lsr #16
   24220:	4658      	mov	r0, fp
   24222:	ea4f 4909 	mov.w	r9, r9, lsl #16
   24226:	f7fb ffc9 	bl	201bc <rpc_ip_client_message_free>
   2422a:	f049 0307 	orr.w	r3, r9, #7
   2422e:	6023      	str	r3, [r4, #0]
   24230:	e772      	b.n	24118 <ip_interface_accept+0x60>
   24232:	4630      	mov	r0, r6
   24234:	f000 fdd2 	bl	24ddc <interface_socket_from_handle_get>
   24238:	b130      	cbz	r0, 24248 <ip_interface_accept+0x190>
   2423a:	f8d0 9004 	ldr.w	r9, [r0, #4]
   2423e:	f1b9 0f00 	cmp.w	r9, #0
   24242:	d001      	beq.n	24248 <ip_interface_accept+0x190>
   24244:	6045      	str	r5, [r0, #4]
   24246:	e775      	b.n	24134 <ip_interface_accept+0x7c>
   24248:	6823      	ldr	r3, [r4, #0]
   2424a:	03d9      	lsls	r1, r3, #15
   2424c:	f53f af76 	bmi.w	2413c <ip_interface_accept+0x84>
   24250:	4d33      	ldr	r5, [pc, #204]	; (24320 <ip_interface_accept+0x268>)
   24252:	9902      	ldr	r1, [sp, #8]
   24254:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   24258:	699b      	ldr	r3, [r3, #24]
   2425a:	614b      	str	r3, [r1, #20]
   2425c:	b147      	cbz	r7, 24270 <ip_interface_accept+0x1b8>
   2425e:	688b      	ldr	r3, [r1, #8]
   24260:	2b0a      	cmp	r3, #10
   24262:	d024      	beq.n	242ae <ip_interface_accept+0x1f6>
   24264:	2b02      	cmp	r3, #2
   24266:	d103      	bne.n	24270 <ip_interface_accept+0x1b8>
   24268:	f8d8 2000 	ldr.w	r2, [r8]
   2426c:	2a10      	cmp	r2, #16
   2426e:	d032      	beq.n	242d6 <ip_interface_accept+0x21e>
   24270:	680a      	ldr	r2, [r1, #0]
   24272:	482c      	ldr	r0, [pc, #176]	; (24324 <ip_interface_accept+0x26c>)
   24274:	4002      	ands	r2, r0
   24276:	f042 0205 	orr.w	r2, r2, #5
   2427a:	600a      	str	r2, [r1, #0]
   2427c:	9a02      	ldr	r2, [sp, #8]
   2427e:	6811      	ldr	r1, [r2, #0]
   24280:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   24284:	6011      	str	r1, [r2, #0]
   24286:	6811      	ldr	r1, [r2, #0]
   24288:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   2428c:	6011      	str	r1, [r2, #0]
   2428e:	6823      	ldr	r3, [r4, #0]
   24290:	4003      	ands	r3, r0
   24292:	f043 0307 	orr.w	r3, r3, #7
   24296:	6023      	str	r3, [r4, #0]
   24298:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   2429c:	f7fb ff8e 	bl	201bc <rpc_ip_client_message_free>
   242a0:	2300      	movs	r3, #0
   242a2:	4648      	mov	r0, r9
   242a4:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   242a8:	b005      	add	sp, #20
   242aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242ae:	f8d8 2000 	ldr.w	r2, [r8]
   242b2:	2a24      	cmp	r2, #36	; 0x24
   242b4:	d1dc      	bne.n	24270 <ip_interface_accept+0x1b8>
   242b6:	703a      	strb	r2, [r7, #0]
   242b8:	2210      	movs	r2, #16
   242ba:	607b      	str	r3, [r7, #4]
   242bc:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   242c0:	f107 0010 	add.w	r0, r7, #16
   242c4:	8b9b      	ldrh	r3, [r3, #28]
   242c6:	813b      	strh	r3, [r7, #8]
   242c8:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   242cc:	3120      	adds	r1, #32
   242ce:	f7e9 fc83 	bl	dbd8 <memcpy>
   242d2:	9902      	ldr	r1, [sp, #8]
   242d4:	e7cc      	b.n	24270 <ip_interface_accept+0x1b8>
   242d6:	703a      	strb	r2, [r7, #0]
   242d8:	607b      	str	r3, [r7, #4]
   242da:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   242de:	f107 000c 	add.w	r0, r7, #12
   242e2:	8b9b      	ldrh	r3, [r3, #28]
   242e4:	2204      	movs	r2, #4
   242e6:	e7ee      	b.n	242c6 <ip_interface_accept+0x20e>
   242e8:	4630      	mov	r0, r6
   242ea:	f000 fd77 	bl	24ddc <interface_socket_from_handle_get>
   242ee:	b138      	cbz	r0, 24300 <ip_interface_accept+0x248>
   242f0:	f8d0 9004 	ldr.w	r9, [r0, #4]
   242f4:	f1b9 0f00 	cmp.w	r9, #0
   242f8:	d002      	beq.n	24300 <ip_interface_accept+0x248>
   242fa:	f8c0 a004 	str.w	sl, [r0, #4]
   242fe:	e76e      	b.n	241de <ip_interface_accept+0x126>
   24300:	6823      	ldr	r3, [r4, #0]
   24302:	9a01      	ldr	r2, [sp, #4]
   24304:	46a9      	mov	r9, r5
   24306:	4313      	orrs	r3, r2
   24308:	6023      	str	r3, [r4, #0]
   2430a:	e7a1      	b.n	24250 <ip_interface_accept+0x198>
   2430c:	4605      	mov	r5, r0
   2430e:	f04f 0909 	mov.w	r9, #9
   24312:	e6f0      	b.n	240f6 <ip_interface_accept+0x3e>
   24314:	f04f 090c 	mov.w	r9, #12
   24318:	e6f2      	b.n	24100 <ip_interface_accept+0x48>
   2431a:	bf00      	nop
   2431c:	000236b5 	.word	0x000236b5
   24320:	200232f8 	.word	0x200232f8
   24324:	ffff0000 	.word	0xffff0000

00024328 <ip_interface_setopt>:
   24328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2432c:	2901      	cmp	r1, #1
   2432e:	b082      	sub	sp, #8
   24330:	f040 80a2 	bne.w	24478 <ip_interface_setopt+0x150>
   24334:	4616      	mov	r6, r2
   24336:	461d      	mov	r5, r3
   24338:	4607      	mov	r7, r0
   2433a:	f000 fd4f 	bl	24ddc <interface_socket_from_handle_get>
   2433e:	4604      	mov	r4, r0
   24340:	2800      	cmp	r0, #0
   24342:	f000 809f 	beq.w	24484 <ip_interface_setopt+0x15c>
   24346:	2e14      	cmp	r6, #20
   24348:	d06f      	beq.n	2442a <ip_interface_setopt+0x102>
   2434a:	2e19      	cmp	r6, #25
   2434c:	d163      	bne.n	24416 <ip_interface_setopt+0xee>
   2434e:	2d00      	cmp	r5, #0
   24350:	f000 809a 	beq.w	24488 <ip_interface_setopt+0x160>
   24354:	4628      	mov	r0, r5
   24356:	f006 fcb1 	bl	2acbc <strlen>
   2435a:	9b08      	ldr	r3, [sp, #32]
   2435c:	4298      	cmp	r0, r3
   2435e:	f040 8093 	bne.w	24488 <ip_interface_setopt+0x160>
   24362:	6823      	ldr	r3, [r4, #0]
   24364:	b29b      	uxth	r3, r3
   24366:	2b02      	cmp	r3, #2
   24368:	f040 808c 	bne.w	24484 <ip_interface_setopt+0x15c>
   2436c:	4629      	mov	r1, r5
   2436e:	68a0      	ldr	r0, [r4, #8]
   24370:	f7fe fdb8 	bl	22ee4 <pdn_interface_pdn_id_get>
   24374:	9000      	str	r0, [sp, #0]
   24376:	3001      	adds	r0, #1
   24378:	f000 8088 	beq.w	2448c <ip_interface_setopt+0x164>
   2437c:	6823      	ldr	r3, [r4, #0]
   2437e:	025a      	lsls	r2, r3, #9
   24380:	d467      	bmi.n	24452 <ip_interface_setopt+0x12a>
   24382:	6823      	ldr	r3, [r4, #0]
   24384:	021b      	lsls	r3, r3, #8
   24386:	d464      	bmi.n	24452 <ip_interface_setopt+0x12a>
   24388:	2200      	movs	r2, #0
   2438a:	6826      	ldr	r6, [r4, #0]
   2438c:	6823      	ldr	r3, [r4, #0]
   2438e:	a802      	add	r0, sp, #8
   24390:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   24394:	6023      	str	r3, [r4, #0]
   24396:	2104      	movs	r1, #4
   24398:	f840 2d04 	str.w	r2, [r0, #-4]!
   2439c:	f8d4 8014 	ldr.w	r8, [r4, #20]
   243a0:	f7fb fee2 	bl	20168 <rpc_ip_client_request_alloc>
   243a4:	2800      	cmp	r0, #0
   243a6:	d161      	bne.n	2446c <ip_interface_setopt+0x144>
   243a8:	f247 0303 	movw	r3, #28675	; 0x7003
   243ac:	2208      	movs	r2, #8
   243ae:	9d01      	ldr	r5, [sp, #4]
   243b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   243b4:	60eb      	str	r3, [r5, #12]
   243b6:	f8c5 8010 	str.w	r8, [r5, #16]
   243ba:	7268      	strb	r0, [r5, #9]
   243bc:	72a8      	strb	r0, [r5, #10]
   243be:	72e8      	strb	r0, [r5, #11]
   243c0:	722a      	strb	r2, [r5, #8]
   243c2:	f04f 0c08 	mov.w	ip, #8
   243c6:	2300      	movs	r3, #0
   243c8:	2010      	movs	r0, #16
   243ca:	2130      	movs	r1, #48	; 0x30
   243cc:	68aa      	ldr	r2, [r5, #8]
   243ce:	756b      	strb	r3, [r5, #21]
   243d0:	4462      	add	r2, ip
   243d2:	60aa      	str	r2, [r5, #8]
   243d4:	75ab      	strb	r3, [r5, #22]
   243d6:	75eb      	strb	r3, [r5, #23]
   243d8:	76ab      	strb	r3, [r5, #26]
   243da:	76eb      	strb	r3, [r5, #27]
   243dc:	f885 c014 	strb.w	ip, [r5, #20]
   243e0:	7628      	strb	r0, [r5, #24]
   243e2:	7669      	strb	r1, [r5, #25]
   243e4:	2204      	movs	r2, #4
   243e6:	4669      	mov	r1, sp
   243e8:	6828      	ldr	r0, [r5, #0]
   243ea:	f7e9 fbf5 	bl	dbd8 <memcpy>
   243ee:	f247 0103 	movw	r1, #28675	; 0x7003
   243f2:	4628      	mov	r0, r5
   243f4:	f7fb fecc 	bl	20190 <rpc_ip_client_request_send>
   243f8:	4680      	mov	r8, r0
   243fa:	bb60      	cbnz	r0, 24456 <ip_interface_setopt+0x12e>
   243fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   24400:	f04f 33ff 	mov.w	r3, #4294967295
   24404:	4611      	mov	r1, r2
   24406:	4638      	mov	r0, r7
   24408:	f000 fc78 	bl	24cfc <interface_socket_wait>
   2440c:	4605      	mov	r5, r0
   2440e:	2800      	cmp	r0, #0
   24410:	d03e      	beq.n	24490 <ip_interface_setopt+0x168>
   24412:	6026      	str	r6, [r4, #0]
   24414:	e000      	b.n	24418 <ip_interface_setopt+0xf0>
   24416:	252a      	movs	r5, #42	; 0x2a
   24418:	4628      	mov	r0, r5
   2441a:	f00a fc7c 	bl	2ed16 <bsd_os_errno_set>
   2441e:	f04f 35ff 	mov.w	r5, #4294967295
   24422:	4628      	mov	r0, r5
   24424:	b002      	add	sp, #8
   24426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2442a:	b36d      	cbz	r5, 24488 <ip_interface_setopt+0x160>
   2442c:	9b08      	ldr	r3, [sp, #32]
   2442e:	2b08      	cmp	r3, #8
   24430:	d12c      	bne.n	2448c <ip_interface_setopt+0x164>
   24432:	686b      	ldr	r3, [r5, #4]
   24434:	682a      	ldr	r2, [r5, #0]
   24436:	2500      	movs	r5, #0
   24438:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2443c:	481a      	ldr	r0, [pc, #104]	; (244a8 <ip_interface_setopt+0x180>)
   2443e:	fba0 0303 	umull	r0, r3, r0, r3
   24442:	4628      	mov	r0, r5
   24444:	099b      	lsrs	r3, r3, #6
   24446:	fb01 3302 	mla	r3, r1, r2, r3
   2444a:	61e3      	str	r3, [r4, #28]
   2444c:	b002      	add	sp, #8
   2444e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24452:	2523      	movs	r5, #35	; 0x23
   24454:	e7e0      	b.n	24418 <ip_interface_setopt+0xf0>
   24456:	6828      	ldr	r0, [r5, #0]
   24458:	b108      	cbz	r0, 2445e <ip_interface_setopt+0x136>
   2445a:	f7fb feb7 	bl	201cc <rpc_ip_client_data_free>
   2445e:	4628      	mov	r0, r5
   24460:	f7fb feac 	bl	201bc <rpc_ip_client_message_free>
   24464:	2523      	movs	r5, #35	; 0x23
   24466:	6026      	str	r6, [r4, #0]
   24468:	6026      	str	r6, [r4, #0]
   2446a:	e7d5      	b.n	24418 <ip_interface_setopt+0xf0>
   2446c:	9d01      	ldr	r5, [sp, #4]
   2446e:	2d00      	cmp	r5, #0
   24470:	d1a7      	bne.n	243c2 <ip_interface_setopt+0x9a>
   24472:	6026      	str	r6, [r4, #0]
   24474:	250c      	movs	r5, #12
   24476:	e7cf      	b.n	24418 <ip_interface_setopt+0xf0>
   24478:	202a      	movs	r0, #42	; 0x2a
   2447a:	f00a fc4c 	bl	2ed16 <bsd_os_errno_set>
   2447e:	f04f 35ff 	mov.w	r5, #4294967295
   24482:	e7ce      	b.n	24422 <ip_interface_setopt+0xfa>
   24484:	2509      	movs	r5, #9
   24486:	e7c7      	b.n	24418 <ip_interface_setopt+0xf0>
   24488:	250e      	movs	r5, #14
   2448a:	e7c5      	b.n	24418 <ip_interface_setopt+0xf0>
   2448c:	2516      	movs	r5, #22
   2448e:	e7c3      	b.n	24418 <ip_interface_setopt+0xf0>
   24490:	4638      	mov	r0, r7
   24492:	f000 fca3 	bl	24ddc <interface_socket_from_handle_get>
   24496:	b120      	cbz	r0, 244a2 <ip_interface_setopt+0x17a>
   24498:	6845      	ldr	r5, [r0, #4]
   2449a:	b115      	cbz	r5, 244a2 <ip_interface_setopt+0x17a>
   2449c:	f8c0 8004 	str.w	r8, [r0, #4]
   244a0:	e7b7      	b.n	24412 <ip_interface_setopt+0xea>
   244a2:	6026      	str	r6, [r4, #0]
   244a4:	e7bd      	b.n	24422 <ip_interface_setopt+0xfa>
   244a6:	bf00      	nop
   244a8:	10624dd3 	.word	0x10624dd3

000244ac <ip_interface_getopt>:
   244ac:	f000 bcbc 	b.w	24e28 <interface_socket_getopt>

000244b0 <ip_interface_getaddrinfo>:
   244b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   244b4:	f04f 0c00 	mov.w	ip, #0
   244b8:	2401      	movs	r4, #1
   244ba:	4e6c      	ldr	r6, [pc, #432]	; (2466c <ip_interface_getaddrinfo+0x1bc>)
   244bc:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 24678 <ip_interface_getaddrinfo+0x1c8>
   244c0:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 2467c <ip_interface_getaddrinfo+0x1cc>
   244c4:	b085      	sub	sp, #20
   244c6:	4607      	mov	r7, r0
   244c8:	4615      	mov	r5, r2
   244ca:	9301      	str	r3, [sp, #4]
   244cc:	f8a6 c000 	strh.w	ip, [r6]
   244d0:	f8ca 4000 	str.w	r4, [sl]
   244d4:	f8c9 4000 	str.w	r4, [r9]
   244d8:	b171      	cbz	r1, 244f8 <ip_interface_getaddrinfo+0x48>
   244da:	4608      	mov	r0, r1
   244dc:	220a      	movs	r2, #10
   244de:	4661      	mov	r1, ip
   244e0:	f006 ff88 	bl	2b3f4 <strtol>
   244e4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   244e8:	1e42      	subs	r2, r0, #1
   244ea:	429a      	cmp	r2, r3
   244ec:	f200 8086 	bhi.w	245fc <ip_interface_getaddrinfo+0x14c>
   244f0:	0203      	lsls	r3, r0, #8
   244f2:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   244f6:	8030      	strh	r0, [r6, #0]
   244f8:	f8df 8184 	ldr.w	r8, [pc, #388]	; 24680 <ip_interface_getaddrinfo+0x1d0>
   244fc:	f8d8 3000 	ldr.w	r3, [r8]
   24500:	2b00      	cmp	r3, #0
   24502:	d177      	bne.n	245f4 <ip_interface_getaddrinfo+0x144>
   24504:	4a5a      	ldr	r2, [pc, #360]	; (24670 <ip_interface_getaddrinfo+0x1c0>)
   24506:	6013      	str	r3, [r2, #0]
   24508:	4a5a      	ldr	r2, [pc, #360]	; (24674 <ip_interface_getaddrinfo+0x1c4>)
   2450a:	6013      	str	r3, [r2, #0]
   2450c:	2f00      	cmp	r7, #0
   2450e:	d065      	beq.n	245dc <ip_interface_getaddrinfo+0x12c>
   24510:	4638      	mov	r0, r7
   24512:	f006 fbd3 	bl	2acbc <strlen>
   24516:	4683      	mov	fp, r0
   24518:	b125      	cbz	r5, 24524 <ip_interface_getaddrinfo+0x74>
   2451a:	69ea      	ldr	r2, [r5, #28]
   2451c:	b112      	cbz	r2, 24524 <ip_interface_getaddrinfo+0x74>
   2451e:	6851      	ldr	r1, [r2, #4]
   24520:	2966      	cmp	r1, #102	; 0x66
   24522:	d06f      	beq.n	24604 <ip_interface_getaddrinfo+0x154>
   24524:	f04f 32ff 	mov.w	r2, #4294967295
   24528:	2100      	movs	r1, #0
   2452a:	ae04      	add	r6, sp, #16
   2452c:	f846 1d04 	str.w	r1, [r6, #-4]!
   24530:	4630      	mov	r0, r6
   24532:	4659      	mov	r1, fp
   24534:	9200      	str	r2, [sp, #0]
   24536:	f7fb fe17 	bl	20168 <rpc_ip_client_request_alloc>
   2453a:	9a00      	ldr	r2, [sp, #0]
   2453c:	2800      	cmp	r0, #0
   2453e:	d14f      	bne.n	245e0 <ip_interface_getaddrinfo+0x130>
   24540:	f247 010d 	movw	r1, #28685	; 0x700d
   24544:	f04f 0c08 	mov.w	ip, #8
   24548:	9c03      	ldr	r4, [sp, #12]
   2454a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   2454e:	60e1      	str	r1, [r4, #12]
   24550:	6122      	str	r2, [r4, #16]
   24552:	7260      	strb	r0, [r4, #9]
   24554:	72a0      	strb	r0, [r4, #10]
   24556:	72e0      	strb	r0, [r4, #11]
   24558:	f884 c008 	strb.w	ip, [r4, #8]
   2455c:	2d00      	cmp	r5, #0
   2455e:	d06a      	beq.n	24636 <ip_interface_getaddrinfo+0x186>
   24560:	686a      	ldr	r2, [r5, #4]
   24562:	f022 0108 	bic.w	r1, r2, #8
   24566:	2902      	cmp	r1, #2
   24568:	d16e      	bne.n	24648 <ip_interface_getaddrinfo+0x198>
   2456a:	68a9      	ldr	r1, [r5, #8]
   2456c:	2902      	cmp	r1, #2
   2456e:	bf08      	it	eq
   24570:	f8ca 1000 	streq.w	r1, [sl]
   24574:	2a0a      	cmp	r2, #10
   24576:	bf14      	ite	ne
   24578:	2201      	movne	r2, #1
   2457a:	2202      	moveq	r2, #2
   2457c:	61a2      	str	r2, [r4, #24]
   2457e:	68ea      	ldr	r2, [r5, #12]
   24580:	f8c9 1000 	str.w	r1, [r9]
   24584:	6222      	str	r2, [r4, #32]
   24586:	68aa      	ldr	r2, [r5, #8]
   24588:	61e2      	str	r2, [r4, #28]
   2458a:	682a      	ldr	r2, [r5, #0]
   2458c:	6162      	str	r2, [r4, #20]
   2458e:	68a2      	ldr	r2, [r4, #8]
   24590:	3210      	adds	r2, #16
   24592:	60a2      	str	r2, [r4, #8]
   24594:	b12f      	cbz	r7, 245a2 <ip_interface_getaddrinfo+0xf2>
   24596:	6820      	ldr	r0, [r4, #0]
   24598:	b118      	cbz	r0, 245a2 <ip_interface_getaddrinfo+0xf2>
   2459a:	465a      	mov	r2, fp
   2459c:	4639      	mov	r1, r7
   2459e:	f7e9 fb1b 	bl	dbd8 <memcpy>
   245a2:	2301      	movs	r3, #1
   245a4:	f247 010d 	movw	r1, #28685	; 0x700d
   245a8:	4620      	mov	r0, r4
   245aa:	f8c8 3000 	str.w	r3, [r8]
   245ae:	f7fb fdef 	bl	20190 <rpc_ip_client_request_send>
   245b2:	2800      	cmp	r0, #0
   245b4:	d146      	bne.n	24644 <ip_interface_getaddrinfo+0x194>
   245b6:	f04f 33ff 	mov.w	r3, #4294967295
   245ba:	9303      	str	r3, [sp, #12]
   245bc:	4631      	mov	r1, r6
   245be:	4620      	mov	r0, r4
   245c0:	f7f1 fbc6 	bl	15d50 <bsd_os_timedwait>
   245c4:	f8d8 3000 	ldr.w	r3, [r8]
   245c8:	2b01      	cmp	r3, #1
   245ca:	d0f7      	beq.n	245bc <ip_interface_getaddrinfo+0x10c>
   245cc:	4b29      	ldr	r3, [pc, #164]	; (24674 <ip_interface_getaddrinfo+0x1c4>)
   245ce:	6818      	ldr	r0, [r3, #0]
   245d0:	bb60      	cbnz	r0, 2462c <ip_interface_getaddrinfo+0x17c>
   245d2:	4b27      	ldr	r3, [pc, #156]	; (24670 <ip_interface_getaddrinfo+0x1c0>)
   245d4:	9a01      	ldr	r2, [sp, #4]
   245d6:	681b      	ldr	r3, [r3, #0]
   245d8:	6013      	str	r3, [r2, #0]
   245da:	e00c      	b.n	245f6 <ip_interface_getaddrinfo+0x146>
   245dc:	46bb      	mov	fp, r7
   245de:	e79b      	b.n	24518 <ip_interface_getaddrinfo+0x68>
   245e0:	9c03      	ldr	r4, [sp, #12]
   245e2:	2c00      	cmp	r4, #0
   245e4:	d1ba      	bne.n	2455c <ip_interface_getaddrinfo+0xac>
   245e6:	200c      	movs	r0, #12
   245e8:	2300      	movs	r3, #0
   245ea:	f8c8 3000 	str.w	r3, [r8]
   245ee:	b005      	add	sp, #20
   245f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   245f4:	2073      	movs	r0, #115	; 0x73
   245f6:	b005      	add	sp, #20
   245f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   245fc:	2016      	movs	r0, #22
   245fe:	b005      	add	sp, #20
   24600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24604:	6891      	ldr	r1, [r2, #8]
   24606:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2460a:	d18b      	bne.n	24524 <ip_interface_getaddrinfo+0x74>
   2460c:	f240 2102 	movw	r1, #514	; 0x202
   24610:	68d0      	ldr	r0, [r2, #12]
   24612:	4288      	cmp	r0, r1
   24614:	d186      	bne.n	24524 <ip_interface_getaddrinfo+0x74>
   24616:	6991      	ldr	r1, [r2, #24]
   24618:	2900      	cmp	r1, #0
   2461a:	d083      	beq.n	24524 <ip_interface_getaddrinfo+0x74>
   2461c:	6868      	ldr	r0, [r5, #4]
   2461e:	f7fe fc61 	bl	22ee4 <pdn_interface_pdn_id_get>
   24622:	1c43      	adds	r3, r0, #1
   24624:	f43f af7e 	beq.w	24524 <ip_interface_getaddrinfo+0x74>
   24628:	4602      	mov	r2, r0
   2462a:	e77d      	b.n	24528 <ip_interface_getaddrinfo+0x78>
   2462c:	4b11      	ldr	r3, [pc, #68]	; (24674 <ip_interface_getaddrinfo+0x1c4>)
   2462e:	6818      	ldr	r0, [r3, #0]
   24630:	2800      	cmp	r0, #0
   24632:	d0e0      	beq.n	245f6 <ip_interface_getaddrinfo+0x146>
   24634:	e7d8      	b.n	245e8 <ip_interface_getaddrinfo+0x138>
   24636:	4629      	mov	r1, r5
   24638:	2210      	movs	r2, #16
   2463a:	f104 0014 	add.w	r0, r4, #20
   2463e:	f006 f951 	bl	2a8e4 <memset>
   24642:	e7a4      	b.n	2458e <ip_interface_getaddrinfo+0xde>
   24644:	2023      	movs	r0, #35	; 0x23
   24646:	e7cf      	b.n	245e8 <ip_interface_getaddrinfo+0x138>
   24648:	202f      	movs	r0, #47	; 0x2f
   2464a:	f00a fb64 	bl	2ed16 <bsd_os_errno_set>
   2464e:	68a2      	ldr	r2, [r4, #8]
   24650:	3210      	adds	r2, #16
   24652:	60a2      	str	r2, [r4, #8]
   24654:	b917      	cbnz	r7, 2465c <ip_interface_getaddrinfo+0x1ac>
   24656:	f04f 30ff 	mov.w	r0, #4294967295
   2465a:	e7c5      	b.n	245e8 <ip_interface_getaddrinfo+0x138>
   2465c:	6820      	ldr	r0, [r4, #0]
   2465e:	2800      	cmp	r0, #0
   24660:	d0f9      	beq.n	24656 <ip_interface_getaddrinfo+0x1a6>
   24662:	465a      	mov	r2, fp
   24664:	4639      	mov	r1, r7
   24666:	f7e9 fab7 	bl	dbd8 <memcpy>
   2466a:	e7f4      	b.n	24656 <ip_interface_getaddrinfo+0x1a6>
   2466c:	2002788c 	.word	0x2002788c
   24670:	200232f0 	.word	0x200232f0
   24674:	200232e8 	.word	0x200232e8
   24678:	200232e0 	.word	0x200232e0
   2467c:	200232e4 	.word	0x200232e4
   24680:	200232ec 	.word	0x200232ec

00024684 <ip_interface_freeaddrinfo>:
   24684:	b538      	push	{r3, r4, r5, lr}
   24686:	4c0b      	ldr	r4, [pc, #44]	; (246b4 <ip_interface_freeaddrinfo+0x30>)
   24688:	6823      	ldr	r3, [r4, #0]
   2468a:	2b02      	cmp	r3, #2
   2468c:	d000      	beq.n	24690 <ip_interface_freeaddrinfo+0xc>
   2468e:	bd38      	pop	{r3, r4, r5, pc}
   24690:	b130      	cbz	r0, 246a0 <ip_interface_freeaddrinfo+0x1c>
   24692:	4605      	mov	r5, r0
   24694:	6940      	ldr	r0, [r0, #20]
   24696:	f7f4 fda5 	bl	191e4 <nrf_free>
   2469a:	4628      	mov	r0, r5
   2469c:	f7f4 fda2 	bl	191e4 <nrf_free>
   246a0:	2300      	movs	r3, #0
   246a2:	4a05      	ldr	r2, [pc, #20]	; (246b8 <ip_interface_freeaddrinfo+0x34>)
   246a4:	4905      	ldr	r1, [pc, #20]	; (246bc <ip_interface_freeaddrinfo+0x38>)
   246a6:	6023      	str	r3, [r4, #0]
   246a8:	6013      	str	r3, [r2, #0]
   246aa:	6808      	ldr	r0, [r1, #0]
   246ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   246b0:	f7fb bd8c 	b.w	201cc <rpc_ip_client_data_free>
   246b4:	200232ec 	.word	0x200232ec
   246b8:	200232e8 	.word	0x200232e8
   246bc:	200232f4 	.word	0x200232f4

000246c0 <rpc_ip_event_handler>:
   246c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   246c4:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   246c8:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   246cc:	4605      	mov	r5, r0
   246ce:	b089      	sub	sp, #36	; 0x24
   246d0:	460e      	mov	r6, r1
   246d2:	68c0      	ldr	r0, [r0, #12]
   246d4:	d05c      	beq.n	24790 <rpc_ip_event_handler+0xd0>
   246d6:	0c04      	lsrs	r4, r0, #16
   246d8:	4620      	mov	r0, r4
   246da:	f000 fb7f 	bl	24ddc <interface_socket_from_handle_get>
   246de:	f248 030d 	movw	r3, #32781	; 0x800d
   246e2:	429e      	cmp	r6, r3
   246e4:	4607      	mov	r7, r0
   246e6:	46a0      	mov	r8, r4
   246e8:	d03f      	beq.n	2476a <rpc_ip_event_handler+0xaa>
   246ea:	2f00      	cmp	r7, #0
   246ec:	d04c      	beq.n	24788 <rpc_ip_event_handler+0xc8>
   246ee:	4640      	mov	r0, r8
   246f0:	4633      	mov	r3, r6
   246f2:	462a      	mov	r2, r5
   246f4:	4639      	mov	r1, r7
   246f6:	f7fc f917 	bl	20928 <tls_rpc_ip_event_handler>
   246fa:	2800      	cmp	r0, #0
   246fc:	d040      	beq.n	24780 <rpc_ip_event_handler+0xc0>
   246fe:	f248 0307 	movw	r3, #32775	; 0x8007
   24702:	429e      	cmp	r6, r3
   24704:	d95f      	bls.n	247c6 <rpc_ip_event_handler+0x106>
   24706:	f248 030c 	movw	r3, #32780	; 0x800c
   2470a:	429e      	cmp	r6, r3
   2470c:	f000 8186 	beq.w	24a1c <rpc_ip_event_handler+0x35c>
   24710:	f240 810a 	bls.w	24928 <rpc_ip_event_handler+0x268>
   24714:	f249 0302 	movw	r3, #36866	; 0x9002
   24718:	429e      	cmp	r6, r3
   2471a:	f000 808b 	beq.w	24834 <rpc_ip_event_handler+0x174>
   2471e:	f249 0303 	movw	r3, #36867	; 0x9003
   24722:	429e      	cmp	r6, r3
   24724:	f000 8127 	beq.w	24976 <rpc_ip_event_handler+0x2b6>
   24728:	f249 0301 	movw	r3, #36865	; 0x9001
   2472c:	429e      	cmp	r6, r3
   2472e:	d12b      	bne.n	24788 <rpc_ip_event_handler+0xc8>
   24730:	683c      	ldr	r4, [r7, #0]
   24732:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   24736:	f000 81a6 	beq.w	24a86 <rpc_ip_event_handler+0x3c6>
   2473a:	68ab      	ldr	r3, [r5, #8]
   2473c:	2b04      	cmp	r3, #4
   2473e:	f200 8210 	bhi.w	24b62 <rpc_ip_event_handler+0x4a2>
   24742:	2300      	movs	r3, #0
   24744:	6829      	ldr	r1, [r5, #0]
   24746:	686a      	ldr	r2, [r5, #4]
   24748:	e9cd 3306 	strd	r3, r3, [sp, #24]
   2474c:	e9cd 1204 	strd	r1, r2, [sp, #16]
   24750:	69b8      	ldr	r0, [r7, #24]
   24752:	a904      	add	r1, sp, #16
   24754:	6803      	ldr	r3, [r0, #0]
   24756:	685b      	ldr	r3, [r3, #4]
   24758:	4798      	blx	r3
   2475a:	3001      	adds	r0, #1
   2475c:	f000 81e9 	beq.w	24b32 <rpc_ip_event_handler+0x472>
   24760:	683b      	ldr	r3, [r7, #0]
   24762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   24766:	603b      	str	r3, [r7, #0]
   24768:	e00a      	b.n	24780 <rpc_ip_event_handler+0xc0>
   2476a:	f8df 933c 	ldr.w	r9, [pc, #828]	; 24aa8 <rpc_ip_event_handler+0x3e8>
   2476e:	682f      	ldr	r7, [r5, #0]
   24770:	f8d9 3000 	ldr.w	r3, [r9]
   24774:	2b01      	cmp	r3, #1
   24776:	d015      	beq.n	247a4 <rpc_ip_event_handler+0xe4>
   24778:	b117      	cbz	r7, 24780 <rpc_ip_event_handler+0xc0>
   2477a:	4638      	mov	r0, r7
   2477c:	f7fb fd26 	bl	201cc <rpc_ip_client_data_free>
   24780:	2000      	movs	r0, #0
   24782:	b009      	add	sp, #36	; 0x24
   24784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24788:	6828      	ldr	r0, [r5, #0]
   2478a:	2800      	cmp	r0, #0
   2478c:	d1f6      	bne.n	2477c <rpc_ip_event_handler+0xbc>
   2478e:	e7f7      	b.n	24780 <rpc_ip_event_handler+0xc0>
   24790:	f000 fadc 	bl	24d4c <interface_from_internal_id_search>
   24794:	4680      	mov	r8, r0
   24796:	f000 fb21 	bl	24ddc <interface_socket_from_handle_get>
   2479a:	4607      	mov	r7, r0
   2479c:	4644      	mov	r4, r8
   2479e:	2f00      	cmp	r7, #0
   247a0:	d1a5      	bne.n	246ee <rpc_ip_event_handler+0x2e>
   247a2:	e7f1      	b.n	24788 <rpc_ip_event_handler+0xc8>
   247a4:	696b      	ldr	r3, [r5, #20]
   247a6:	2b00      	cmp	r3, #0
   247a8:	d04e      	beq.n	24848 <rpc_ip_event_handler+0x188>
   247aa:	2b10      	cmp	r3, #16
   247ac:	bf96      	itet	ls
   247ae:	4ab8      	ldrls	r2, [pc, #736]	; (24a90 <rpc_ip_event_handler+0x3d0>)
   247b0:	212d      	movhi	r1, #45	; 0x2d
   247b2:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
   247b6:	2302      	movs	r3, #2
   247b8:	4ab6      	ldr	r2, [pc, #728]	; (24a94 <rpc_ip_event_handler+0x3d4>)
   247ba:	6011      	str	r1, [r2, #0]
   247bc:	f8c9 3000 	str.w	r3, [r9]
   247c0:	2f00      	cmp	r7, #0
   247c2:	d1da      	bne.n	2477a <rpc_ip_event_handler+0xba>
   247c4:	e7dc      	b.n	24780 <rpc_ip_event_handler+0xc0>
   247c6:	f248 0306 	movw	r3, #32774	; 0x8006
   247ca:	429e      	cmp	r6, r3
   247cc:	f080 80fe 	bcs.w	249cc <rpc_ip_event_handler+0x30c>
   247d0:	f248 0302 	movw	r3, #32770	; 0x8002
   247d4:	429e      	cmp	r6, r3
   247d6:	f000 80e0 	beq.w	2499a <rpc_ip_event_handler+0x2da>
   247da:	d919      	bls.n	24810 <rpc_ip_event_handler+0x150>
   247dc:	f248 0303 	movw	r3, #32771	; 0x8003
   247e0:	429e      	cmp	r6, r3
   247e2:	f000 812f 	beq.w	24a44 <rpc_ip_event_handler+0x384>
   247e6:	f248 0305 	movw	r3, #32773	; 0x8005
   247ea:	429e      	cmp	r6, r3
   247ec:	d1cc      	bne.n	24788 <rpc_ip_event_handler+0xc8>
   247ee:	683b      	ldr	r3, [r7, #0]
   247f0:	b29b      	uxth	r3, r3
   247f2:	2b03      	cmp	r3, #3
   247f4:	d1c4      	bne.n	24780 <rpc_ip_event_handler+0xc0>
   247f6:	696b      	ldr	r3, [r5, #20]
   247f8:	2b00      	cmp	r3, #0
   247fa:	f000 81a3 	beq.w	24b44 <rpc_ip_event_handler+0x484>
   247fe:	2b10      	cmp	r3, #16
   24800:	f200 80c9 	bhi.w	24996 <rpc_ip_event_handler+0x2d6>
   24804:	4aa2      	ldr	r2, [pc, #648]	; (24a90 <rpc_ip_event_handler+0x3d0>)
   24806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2480a:	607b      	str	r3, [r7, #4]
   2480c:	2000      	movs	r0, #0
   2480e:	e7b8      	b.n	24782 <rpc_ip_event_handler+0xc2>
   24810:	f248 0301 	movw	r3, #32769	; 0x8001
   24814:	429e      	cmp	r6, r3
   24816:	d1b7      	bne.n	24788 <rpc_ip_event_handler+0xc8>
   24818:	683b      	ldr	r3, [r7, #0]
   2481a:	2b01      	cmp	r3, #1
   2481c:	d1b0      	bne.n	24780 <rpc_ip_event_handler+0xc0>
   2481e:	6968      	ldr	r0, [r5, #20]
   24820:	2800      	cmp	r0, #0
   24822:	f000 818a 	beq.w	24b3a <rpc_ip_event_handler+0x47a>
   24826:	2810      	cmp	r0, #16
   24828:	f200 80b5 	bhi.w	24996 <rpc_ip_event_handler+0x2d6>
   2482c:	4b98      	ldr	r3, [pc, #608]	; (24a90 <rpc_ip_event_handler+0x3d0>)
   2482e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   24832:	e7ea      	b.n	2480a <rpc_ip_event_handler+0x14a>
   24834:	683b      	ldr	r3, [r7, #0]
   24836:	b29b      	uxth	r3, r3
   24838:	2b07      	cmp	r3, #7
   2483a:	d1a1      	bne.n	24780 <rpc_ip_event_handler+0xc0>
   2483c:	683b      	ldr	r3, [r7, #0]
   2483e:	2000      	movs	r0, #0
   24840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   24844:	603b      	str	r3, [r7, #0]
   24846:	e79c      	b.n	24782 <rpc_ip_event_handler+0xc2>
   24848:	4b93      	ldr	r3, [pc, #588]	; (24a98 <rpc_ip_event_handler+0x3d8>)
   2484a:	601f      	str	r7, [r3, #0]
   2484c:	69ac      	ldr	r4, [r5, #24]
   2484e:	0163      	lsls	r3, r4, #5
   24850:	4618      	mov	r0, r3
   24852:	9303      	str	r3, [sp, #12]
   24854:	f7f4 fca8 	bl	191a8 <nrf_malloc>
   24858:	9002      	str	r0, [sp, #8]
   2485a:	2800      	cmp	r0, #0
   2485c:	f000 80ff 	beq.w	24a5e <rpc_ip_event_handler+0x39e>
   24860:	00e5      	lsls	r5, r4, #3
   24862:	1928      	adds	r0, r5, r4
   24864:	0080      	lsls	r0, r0, #2
   24866:	f7f4 fc9f 	bl	191a8 <nrf_malloc>
   2486a:	2800      	cmp	r0, #0
   2486c:	f000 8107 	beq.w	24a7e <rpc_ip_event_handler+0x3be>
   24870:	2c00      	cmp	r4, #0
   24872:	d078      	beq.n	24966 <rpc_ip_event_handler+0x2a6>
   24874:	f105 0210 	add.w	r2, r5, #16
   24878:	1883      	adds	r3, r0, r2
   2487a:	9301      	str	r3, [sp, #4]
   2487c:	9b02      	ldr	r3, [sp, #8]
   2487e:	2404      	movs	r4, #4
   24880:	f8df a228 	ldr.w	sl, [pc, #552]	; 24aac <rpc_ip_event_handler+0x3ec>
   24884:	f8df b228 	ldr.w	fp, [pc, #552]	; 24ab0 <rpc_ip_event_handler+0x3f0>
   24888:	f100 0810 	add.w	r8, r0, #16
   2488c:	f103 0620 	add.w	r6, r3, #32
   24890:	e01d      	b.n	248ce <rpc_ip_event_handler+0x20e>
   24892:	220a      	movs	r2, #10
   24894:	f848 2c0c 	str.w	r2, [r8, #-12]
   24898:	f04f 0224 	mov.w	r2, #36	; 0x24
   2489c:	4640      	mov	r0, r8
   2489e:	f808 2c10 	strb.w	r2, [r8, #-16]
   248a2:	f828 3c08 	strh.w	r3, [r8, #-8]
   248a6:	f856 2c10 	ldr.w	r2, [r6, #-16]
   248aa:	f7e9 f995 	bl	dbd8 <memcpy>
   248ae:	f856 3c10 	ldr.w	r3, [r6, #-16]
   248b2:	f108 0808 	add.w	r8, r8, #8
   248b6:	441c      	add	r4, r3
   248b8:	193b      	adds	r3, r7, r4
   248ba:	f846 3c08 	str.w	r3, [r6, #-8]
   248be:	9b01      	ldr	r3, [sp, #4]
   248c0:	f846 6c04 	str.w	r6, [r6, #-4]
   248c4:	4543      	cmp	r3, r8
   248c6:	442c      	add	r4, r5
   248c8:	f106 0620 	add.w	r6, r6, #32
   248cc:	d045      	beq.n	2495a <rpc_ip_event_handler+0x29a>
   248ce:	593b      	ldr	r3, [r7, r4]
   248d0:	193a      	adds	r2, r7, r4
   248d2:	f846 3c20 	str.w	r3, [r6, #-32]
   248d6:	6853      	ldr	r3, [r2, #4]
   248d8:	f8da 1000 	ldr.w	r1, [sl]
   248dc:	2b02      	cmp	r3, #2
   248de:	bf14      	ite	ne
   248e0:	2002      	movne	r0, #2
   248e2:	200a      	moveq	r0, #10
   248e4:	f8db 3000 	ldr.w	r3, [fp]
   248e8:	e946 0107 	strd	r0, r1, [r6, #-28]
   248ec:	f846 3c14 	str.w	r3, [r6, #-20]
   248f0:	8a10      	ldrh	r0, [r2, #16]
   248f2:	f1a8 0310 	sub.w	r3, r8, #16
   248f6:	f846 0c10 	str.w	r0, [r6, #-16]
   248fa:	8a55      	ldrh	r5, [r2, #18]
   248fc:	f846 3c0c 	str.w	r3, [r6, #-12]
   24900:	4b66      	ldr	r3, [pc, #408]	; (24a9c <rpc_ip_event_handler+0x3dc>)
   24902:	3414      	adds	r4, #20
   24904:	2804      	cmp	r0, #4
   24906:	eb07 0104 	add.w	r1, r7, r4
   2490a:	881b      	ldrh	r3, [r3, #0]
   2490c:	d1c1      	bne.n	24892 <rpc_ip_event_handler+0x1d2>
   2490e:	2210      	movs	r2, #16
   24910:	2002      	movs	r0, #2
   24912:	f828 3c08 	strh.w	r3, [r8, #-8]
   24916:	f848 0c0c 	str.w	r0, [r8, #-12]
   2491a:	f808 2c10 	strb.w	r2, [r8, #-16]
   2491e:	f856 2c10 	ldr.w	r2, [r6, #-16]
   24922:	f1a8 0004 	sub.w	r0, r8, #4
   24926:	e7c0      	b.n	248aa <rpc_ip_event_handler+0x1ea>
   24928:	f248 0308 	movw	r3, #32776	; 0x8008
   2492c:	429e      	cmp	r6, r3
   2492e:	d065      	beq.n	249fc <rpc_ip_event_handler+0x33c>
   24930:	f248 0309 	movw	r3, #32777	; 0x8009
   24934:	429e      	cmp	r6, r3
   24936:	f47f af27 	bne.w	24788 <rpc_ip_event_handler+0xc8>
   2493a:	683b      	ldr	r3, [r7, #0]
   2493c:	b29b      	uxth	r3, r3
   2493e:	2b0d      	cmp	r3, #13
   24940:	f47f af1e 	bne.w	24780 <rpc_ip_event_handler+0xc0>
   24944:	6968      	ldr	r0, [r5, #20]
   24946:	2800      	cmp	r0, #0
   24948:	f47f af6d 	bne.w	24826 <rpc_ip_event_handler+0x166>
   2494c:	683b      	ldr	r3, [r7, #0]
   2494e:	0c1b      	lsrs	r3, r3, #16
   24950:	041b      	lsls	r3, r3, #16
   24952:	f043 030e 	orr.w	r3, r3, #14
   24956:	603b      	str	r3, [r7, #0]
   24958:	e713      	b.n	24782 <rpc_ip_event_handler+0xc2>
   2495a:	2200      	movs	r2, #0
   2495c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   24960:	440b      	add	r3, r1
   24962:	f843 2c04 	str.w	r2, [r3, #-4]
   24966:	2202      	movs	r2, #2
   24968:	4b4d      	ldr	r3, [pc, #308]	; (24aa0 <rpc_ip_event_handler+0x3e0>)
   2496a:	f8c9 2000 	str.w	r2, [r9]
   2496e:	9a02      	ldr	r2, [sp, #8]
   24970:	2000      	movs	r0, #0
   24972:	601a      	str	r2, [r3, #0]
   24974:	e705      	b.n	24782 <rpc_ip_event_handler+0xc2>
   24976:	683b      	ldr	r3, [r7, #0]
   24978:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   2497c:	603b      	str	r3, [r7, #0]
   2497e:	683b      	ldr	r3, [r7, #0]
   24980:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   24984:	603b      	str	r3, [r7, #0]
   24986:	683b      	ldr	r3, [r7, #0]
   24988:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2498c:	603b      	str	r3, [r7, #0]
   2498e:	692b      	ldr	r3, [r5, #16]
   24990:	2b10      	cmp	r3, #16
   24992:	f67f af37 	bls.w	24804 <rpc_ip_event_handler+0x144>
   24996:	232d      	movs	r3, #45	; 0x2d
   24998:	e737      	b.n	2480a <rpc_ip_event_handler+0x14a>
   2499a:	683b      	ldr	r3, [r7, #0]
   2499c:	0098      	lsls	r0, r3, #2
   2499e:	f57f aeef 	bpl.w	24780 <rpc_ip_event_handler+0xc0>
   249a2:	683b      	ldr	r3, [r7, #0]
   249a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   249a8:	603b      	str	r3, [r7, #0]
   249aa:	6968      	ldr	r0, [r5, #20]
   249ac:	2800      	cmp	r0, #0
   249ae:	f000 8095 	beq.w	24adc <rpc_ip_event_handler+0x41c>
   249b2:	2810      	cmp	r0, #16
   249b4:	bf8e      	itee	hi
   249b6:	232d      	movhi	r3, #45	; 0x2d
   249b8:	4b35      	ldrls	r3, [pc, #212]	; (24a90 <rpc_ip_event_handler+0x3d0>)
   249ba:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   249be:	2000      	movs	r0, #0
   249c0:	607b      	str	r3, [r7, #4]
   249c2:	683b      	ldr	r3, [r7, #0]
   249c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   249c8:	603b      	str	r3, [r7, #0]
   249ca:	e6da      	b.n	24782 <rpc_ip_event_handler+0xc2>
   249cc:	683b      	ldr	r3, [r7, #0]
   249ce:	0299      	lsls	r1, r3, #10
   249d0:	f57f aed6 	bpl.w	24780 <rpc_ip_event_handler+0xc0>
   249d4:	696b      	ldr	r3, [r5, #20]
   249d6:	2b00      	cmp	r3, #0
   249d8:	d16c      	bne.n	24ab4 <rpc_ip_event_handler+0x3f4>
   249da:	683b      	ldr	r3, [r7, #0]
   249dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   249e0:	603b      	str	r3, [r7, #0]
   249e2:	683b      	ldr	r3, [r7, #0]
   249e4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   249e8:	603b      	str	r3, [r7, #0]
   249ea:	683b      	ldr	r3, [r7, #0]
   249ec:	00da      	lsls	r2, r3, #3
   249ee:	f53f aec7 	bmi.w	24780 <rpc_ip_event_handler+0xc0>
   249f2:	4b2c      	ldr	r3, [pc, #176]	; (24aa4 <rpc_ip_event_handler+0x3e4>)
   249f4:	2001      	movs	r0, #1
   249f6:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
   249fa:	e6c2      	b.n	24782 <rpc_ip_event_handler+0xc2>
   249fc:	683b      	ldr	r3, [r7, #0]
   249fe:	b29b      	uxth	r3, r3
   24a00:	2b06      	cmp	r3, #6
   24a02:	f47f aebd 	bne.w	24780 <rpc_ip_event_handler+0xc0>
   24a06:	6968      	ldr	r0, [r5, #20]
   24a08:	2800      	cmp	r0, #0
   24a0a:	f47f af0c 	bne.w	24826 <rpc_ip_event_handler+0x166>
   24a0e:	683b      	ldr	r3, [r7, #0]
   24a10:	0c1b      	lsrs	r3, r3, #16
   24a12:	041b      	lsls	r3, r3, #16
   24a14:	f043 0307 	orr.w	r3, r3, #7
   24a18:	603b      	str	r3, [r7, #0]
   24a1a:	e6b2      	b.n	24782 <rpc_ip_event_handler+0xc2>
   24a1c:	683b      	ldr	r3, [r7, #0]
   24a1e:	b29b      	uxth	r3, r3
   24a20:	2b08      	cmp	r3, #8
   24a22:	f47f aead 	bne.w	24780 <rpc_ip_event_handler+0xc0>
   24a26:	696b      	ldr	r3, [r5, #20]
   24a28:	2b00      	cmp	r3, #0
   24a2a:	f47f aee8 	bne.w	247fe <rpc_ip_event_handler+0x13e>
   24a2e:	4b1d      	ldr	r3, [pc, #116]	; (24aa4 <rpc_ip_event_handler+0x3e4>)
   24a30:	2001      	movs	r0, #1
   24a32:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
   24a36:	683b      	ldr	r3, [r7, #0]
   24a38:	0c1b      	lsrs	r3, r3, #16
   24a3a:	041b      	lsls	r3, r3, #16
   24a3c:	f043 0309 	orr.w	r3, r3, #9
   24a40:	603b      	str	r3, [r7, #0]
   24a42:	e69e      	b.n	24782 <rpc_ip_event_handler+0xc2>
   24a44:	683b      	ldr	r3, [r7, #0]
   24a46:	025b      	lsls	r3, r3, #9
   24a48:	f57f ae9a 	bpl.w	24780 <rpc_ip_event_handler+0xc0>
   24a4c:	6968      	ldr	r0, [r5, #20]
   24a4e:	2800      	cmp	r0, #0
   24a50:	f47f aee9 	bne.w	24826 <rpc_ip_event_handler+0x166>
   24a54:	683b      	ldr	r3, [r7, #0]
   24a56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   24a5a:	603b      	str	r3, [r7, #0]
   24a5c:	e691      	b.n	24782 <rpc_ip_event_handler+0xc2>
   24a5e:	f7f4 fbc1 	bl	191e4 <nrf_free>
   24a62:	200c      	movs	r0, #12
   24a64:	2302      	movs	r3, #2
   24a66:	490b      	ldr	r1, [pc, #44]	; (24a94 <rpc_ip_event_handler+0x3d4>)
   24a68:	4a0d      	ldr	r2, [pc, #52]	; (24aa0 <rpc_ip_event_handler+0x3e0>)
   24a6a:	6008      	str	r0, [r1, #0]
   24a6c:	682f      	ldr	r7, [r5, #0]
   24a6e:	9902      	ldr	r1, [sp, #8]
   24a70:	6011      	str	r1, [r2, #0]
   24a72:	f8c9 3000 	str.w	r3, [r9]
   24a76:	2f00      	cmp	r7, #0
   24a78:	f47f ae7f 	bne.w	2477a <rpc_ip_event_handler+0xba>
   24a7c:	e680      	b.n	24780 <rpc_ip_event_handler+0xc0>
   24a7e:	220c      	movs	r2, #12
   24a80:	4b04      	ldr	r3, [pc, #16]	; (24a94 <rpc_ip_event_handler+0x3d4>)
   24a82:	601a      	str	r2, [r3, #0]
   24a84:	e76f      	b.n	24966 <rpc_ip_event_handler+0x2a6>
   24a86:	6828      	ldr	r0, [r5, #0]
   24a88:	f7fb fba0 	bl	201cc <rpc_ip_client_data_free>
   24a8c:	4620      	mov	r0, r4
   24a8e:	e678      	b.n	24782 <rpc_ip_event_handler+0xc2>
   24a90:	00033b7c 	.word	0x00033b7c
   24a94:	200232e8 	.word	0x200232e8
   24a98:	200232f4 	.word	0x200232f4
   24a9c:	2002788c 	.word	0x2002788c
   24aa0:	200232f0 	.word	0x200232f0
   24aa4:	200232f8 	.word	0x200232f8
   24aa8:	200232ec 	.word	0x200232ec
   24aac:	200232e4 	.word	0x200232e4
   24ab0:	200232e0 	.word	0x200232e0
   24ab4:	2b10      	cmp	r3, #16
   24ab6:	bf8e      	itee	hi
   24ab8:	232d      	movhi	r3, #45	; 0x2d
   24aba:	4a3e      	ldrls	r2, [pc, #248]	; (24bb4 <rpc_ip_event_handler+0x4f4>)
   24abc:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   24ac0:	607b      	str	r3, [r7, #4]
   24ac2:	683b      	ldr	r3, [r7, #0]
   24ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   24ac8:	603b      	str	r3, [r7, #0]
   24aca:	696b      	ldr	r3, [r5, #20]
   24acc:	2b6b      	cmp	r3, #107	; 0x6b
   24ace:	683b      	ldr	r3, [r7, #0]
   24ad0:	d040      	beq.n	24b54 <rpc_ip_event_handler+0x494>
   24ad2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   24ad6:	2000      	movs	r0, #0
   24ad8:	603b      	str	r3, [r7, #0]
   24ada:	e652      	b.n	24782 <rpc_ip_event_handler+0xc2>
   24adc:	683b      	ldr	r3, [r7, #0]
   24ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   24ae2:	603b      	str	r3, [r7, #0]
   24ae4:	683b      	ldr	r3, [r7, #0]
   24ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   24aea:	603b      	str	r3, [r7, #0]
   24aec:	683b      	ldr	r3, [r7, #0]
   24aee:	0c1b      	lsrs	r3, r3, #16
   24af0:	041b      	lsls	r3, r3, #16
   24af2:	f043 0305 	orr.w	r3, r3, #5
   24af6:	603b      	str	r3, [r7, #0]
   24af8:	e643      	b.n	24782 <rpc_ip_event_handler+0xc2>
   24afa:	2302      	movs	r3, #2
   24afc:	2610      	movs	r6, #16
   24afe:	6043      	str	r3, [r0, #4]
   24b00:	7006      	strb	r6, [r0, #0]
   24b02:	8a2b      	ldrh	r3, [r5, #16]
   24b04:	f105 0114 	add.w	r1, r5, #20
   24b08:	8103      	strh	r3, [r0, #8]
   24b0a:	300c      	adds	r0, #12
   24b0c:	f7e9 f864 	bl	dbd8 <memcpy>
   24b10:	686b      	ldr	r3, [r5, #4]
   24b12:	682a      	ldr	r2, [r5, #0]
   24b14:	e9cd 4606 	strd	r4, r6, [sp, #24]
   24b18:	e9cd 2304 	strd	r2, r3, [sp, #16]
   24b1c:	69b8      	ldr	r0, [r7, #24]
   24b1e:	a904      	add	r1, sp, #16
   24b20:	6803      	ldr	r3, [r0, #0]
   24b22:	685b      	ldr	r3, [r3, #4]
   24b24:	4798      	blx	r3
   24b26:	3001      	adds	r0, #1
   24b28:	f47f ae1a 	bne.w	24760 <rpc_ip_event_handler+0xa0>
   24b2c:	4620      	mov	r0, r4
   24b2e:	f7f4 fb59 	bl	191e4 <nrf_free>
   24b32:	6828      	ldr	r0, [r5, #0]
   24b34:	f7fb fb4a 	bl	201cc <rpc_ip_client_data_free>
   24b38:	e622      	b.n	24780 <rpc_ip_event_handler+0xc0>
   24b3a:	2302      	movs	r3, #2
   24b3c:	603b      	str	r3, [r7, #0]
   24b3e:	69ab      	ldr	r3, [r5, #24]
   24b40:	617b      	str	r3, [r7, #20]
   24b42:	e61e      	b.n	24782 <rpc_ip_event_handler+0xc2>
   24b44:	683b      	ldr	r3, [r7, #0]
   24b46:	2000      	movs	r0, #0
   24b48:	0c1b      	lsrs	r3, r3, #16
   24b4a:	041b      	lsls	r3, r3, #16
   24b4c:	f043 0304 	orr.w	r3, r3, #4
   24b50:	603b      	str	r3, [r7, #0]
   24b52:	e616      	b.n	24782 <rpc_ip_event_handler+0xc2>
   24b54:	f013 6300 	ands.w	r3, r3, #134217728	; 0x8000000
   24b58:	d019      	beq.n	24b8e <rpc_ip_event_handler+0x4ce>
   24b5a:	230c      	movs	r3, #12
   24b5c:	2000      	movs	r0, #0
   24b5e:	607b      	str	r3, [r7, #4]
   24b60:	e60f      	b.n	24782 <rpc_ip_event_handler+0xc2>
   24b62:	8a6b      	ldrh	r3, [r5, #18]
   24b64:	2b00      	cmp	r3, #0
   24b66:	f43f adec 	beq.w	24742 <rpc_ip_event_handler+0x82>
   24b6a:	2024      	movs	r0, #36	; 0x24
   24b6c:	f7f4 fb1c 	bl	191a8 <nrf_malloc>
   24b70:	4604      	mov	r4, r0
   24b72:	2800      	cmp	r0, #0
   24b74:	d0dd      	beq.n	24b32 <rpc_ip_event_handler+0x472>
   24b76:	8a6a      	ldrh	r2, [r5, #18]
   24b78:	2a10      	cmp	r2, #16
   24b7a:	d00e      	beq.n	24b9a <rpc_ip_event_handler+0x4da>
   24b7c:	2a04      	cmp	r2, #4
   24b7e:	d0bc      	beq.n	24afa <rpc_ip_event_handler+0x43a>
   24b80:	6828      	ldr	r0, [r5, #0]
   24b82:	f7fb fb23 	bl	201cc <rpc_ip_client_data_free>
   24b86:	4620      	mov	r0, r4
   24b88:	f7f4 fb2c 	bl	191e4 <nrf_free>
   24b8c:	e5f8      	b.n	24780 <rpc_ip_event_handler+0xc0>
   24b8e:	683a      	ldr	r2, [r7, #0]
   24b90:	4618      	mov	r0, r3
   24b92:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   24b96:	603a      	str	r2, [r7, #0]
   24b98:	e5f3      	b.n	24782 <rpc_ip_event_handler+0xc2>
   24b9a:	230a      	movs	r3, #10
   24b9c:	2624      	movs	r6, #36	; 0x24
   24b9e:	6043      	str	r3, [r0, #4]
   24ba0:	7006      	strb	r6, [r0, #0]
   24ba2:	8a2b      	ldrh	r3, [r5, #16]
   24ba4:	f105 0114 	add.w	r1, r5, #20
   24ba8:	8103      	strh	r3, [r0, #8]
   24baa:	3010      	adds	r0, #16
   24bac:	f7e9 f814 	bl	dbd8 <memcpy>
   24bb0:	e7ae      	b.n	24b10 <rpc_ip_event_handler+0x450>
   24bb2:	bf00      	nop
   24bb4:	00033b7c 	.word	0x00033b7c

00024bb8 <interface_init>:
   24bb8:	b508      	push	{r3, lr}
   24bba:	f44f 7280 	mov.w	r2, #256	; 0x100
   24bbe:	2100      	movs	r1, #0
   24bc0:	4802      	ldr	r0, [pc, #8]	; (24bcc <interface_init+0x14>)
   24bc2:	f005 fe8f 	bl	2a8e4 <memset>
   24bc6:	2000      	movs	r0, #0
   24bc8:	bd08      	pop	{r3, pc}
   24bca:	bf00      	nop
   24bcc:	20027da4 	.word	0x20027da4

00024bd0 <interface_socket_allocate>:
   24bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24bd2:	4b28      	ldr	r3, [pc, #160]	; (24c74 <interface_socket_allocate+0xa4>)
   24bd4:	4606      	mov	r6, r0
   24bd6:	681d      	ldr	r5, [r3, #0]
   24bd8:	4608      	mov	r0, r1
   24bda:	b1e5      	cbz	r5, 24c16 <interface_socket_allocate+0x46>
   24bdc:	6a1c      	ldr	r4, [r3, #32]
   24bde:	2c00      	cmp	r4, #0
   24be0:	d03b      	beq.n	24c5a <interface_socket_allocate+0x8a>
   24be2:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   24be4:	2c00      	cmp	r4, #0
   24be6:	d03a      	beq.n	24c5e <interface_socket_allocate+0x8e>
   24be8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   24bea:	2c00      	cmp	r4, #0
   24bec:	d039      	beq.n	24c62 <interface_socket_allocate+0x92>
   24bee:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
   24bf2:	b179      	cbz	r1, 24c14 <interface_socket_allocate+0x44>
   24bf4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   24bf8:	b3a9      	cbz	r1, 24c66 <interface_socket_allocate+0x96>
   24bfa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
   24bfe:	b3a1      	cbz	r1, 24c6a <interface_socket_allocate+0x9a>
   24c00:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
   24c04:	b399      	cbz	r1, 24c6e <interface_socket_allocate+0x9e>
   24c06:	f04f 35ff 	mov.w	r5, #4294967295
   24c0a:	200c      	movs	r0, #12
   24c0c:	f00a f883 	bl	2ed16 <bsd_os_errno_set>
   24c10:	4628      	mov	r0, r5
   24c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24c14:	2504      	movs	r5, #4
   24c16:	f04f 0c01 	mov.w	ip, #1
   24c1a:	f04f 37ff 	mov.w	r7, #4294967295
   24c1e:	016c      	lsls	r4, r5, #5
   24c20:	f843 c004 	str.w	ip, [r3, r4]
   24c24:	441c      	add	r4, r3
   24c26:	4611      	mov	r1, r2
   24c28:	6167      	str	r7, [r4, #20]
   24c2a:	4622      	mov	r2, r4
   24c2c:	f7fa ff96 	bl	1fb5c <packet_handler_create>
   24c30:	4603      	mov	r3, r0
   24c32:	61a0      	str	r0, [r4, #24]
   24c34:	b158      	cbz	r0, 24c4e <interface_socket_allocate+0x7e>
   24c36:	681b      	ldr	r3, [r3, #0]
   24c38:	681b      	ldr	r3, [r3, #0]
   24c3a:	4798      	blx	r3
   24c3c:	b910      	cbnz	r0, 24c44 <interface_socket_allocate+0x74>
   24c3e:	6034      	str	r4, [r6, #0]
   24c40:	4628      	mov	r0, r5
   24c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24c44:	69a0      	ldr	r0, [r4, #24]
   24c46:	f7fa ffa7 	bl	1fb98 <packet_handler_delete>
   24c4a:	2300      	movs	r3, #0
   24c4c:	61a3      	str	r3, [r4, #24]
   24c4e:	4620      	mov	r0, r4
   24c50:	2220      	movs	r2, #32
   24c52:	2100      	movs	r1, #0
   24c54:	f005 fe46 	bl	2a8e4 <memset>
   24c58:	e7d5      	b.n	24c06 <interface_socket_allocate+0x36>
   24c5a:	2501      	movs	r5, #1
   24c5c:	e7db      	b.n	24c16 <interface_socket_allocate+0x46>
   24c5e:	2502      	movs	r5, #2
   24c60:	e7d9      	b.n	24c16 <interface_socket_allocate+0x46>
   24c62:	2503      	movs	r5, #3
   24c64:	e7d7      	b.n	24c16 <interface_socket_allocate+0x46>
   24c66:	2505      	movs	r5, #5
   24c68:	e7d5      	b.n	24c16 <interface_socket_allocate+0x46>
   24c6a:	2506      	movs	r5, #6
   24c6c:	e7d3      	b.n	24c16 <interface_socket_allocate+0x46>
   24c6e:	2507      	movs	r5, #7
   24c70:	e7d1      	b.n	24c16 <interface_socket_allocate+0x46>
   24c72:	bf00      	nop
   24c74:	20027da4 	.word	0x20027da4

00024c78 <interface_socket_free>:
   24c78:	2807      	cmp	r0, #7
   24c7a:	d900      	bls.n	24c7e <interface_socket_free+0x6>
   24c7c:	4770      	bx	lr
   24c7e:	b510      	push	{r4, lr}
   24c80:	4c06      	ldr	r4, [pc, #24]	; (24c9c <interface_socket_free+0x24>)
   24c82:	eb04 1440 	add.w	r4, r4, r0, lsl #5
   24c86:	69a0      	ldr	r0, [r4, #24]
   24c88:	b108      	cbz	r0, 24c8e <interface_socket_free+0x16>
   24c8a:	f7fa ff85 	bl	1fb98 <packet_handler_delete>
   24c8e:	4620      	mov	r0, r4
   24c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24c94:	2220      	movs	r2, #32
   24c96:	2100      	movs	r1, #0
   24c98:	f005 be24 	b.w	2a8e4 <memset>
   24c9c:	20027da4 	.word	0x20027da4

00024ca0 <interface_socket_packet_handler_update>:
   24ca0:	2807      	cmp	r0, #7
   24ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24ca6:	d818      	bhi.n	24cda <interface_socket_packet_handler_update+0x3a>
   24ca8:	4d13      	ldr	r5, [pc, #76]	; (24cf8 <interface_socket_packet_handler_update+0x58>)
   24caa:	0144      	lsls	r4, r0, #5
   24cac:	592b      	ldr	r3, [r5, r4]
   24cae:	192f      	adds	r7, r5, r4
   24cb0:	b19b      	cbz	r3, 24cda <interface_socket_packet_handler_update+0x3a>
   24cb2:	4608      	mov	r0, r1
   24cb4:	4611      	mov	r1, r2
   24cb6:	463a      	mov	r2, r7
   24cb8:	f8d7 8018 	ldr.w	r8, [r7, #24]
   24cbc:	f7fa ff4e 	bl	1fb5c <packet_handler_create>
   24cc0:	61b8      	str	r0, [r7, #24]
   24cc2:	b1b8      	cbz	r0, 24cf4 <interface_socket_packet_handler_update+0x54>
   24cc4:	6803      	ldr	r3, [r0, #0]
   24cc6:	681b      	ldr	r3, [r3, #0]
   24cc8:	4798      	blx	r3
   24cca:	4606      	mov	r6, r0
   24ccc:	b948      	cbnz	r0, 24ce2 <interface_socket_packet_handler_update+0x42>
   24cce:	4640      	mov	r0, r8
   24cd0:	f7fa ff62 	bl	1fb98 <packet_handler_delete>
   24cd4:	4630      	mov	r0, r6
   24cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24cda:	2605      	movs	r6, #5
   24cdc:	4630      	mov	r0, r6
   24cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24ce2:	69b8      	ldr	r0, [r7, #24]
   24ce4:	f7fa ff58 	bl	1fb98 <packet_handler_delete>
   24ce8:	1928      	adds	r0, r5, r4
   24cea:	f8c0 8018 	str.w	r8, [r0, #24]
   24cee:	4630      	mov	r0, r6
   24cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24cf4:	2604      	movs	r6, #4
   24cf6:	e7f7      	b.n	24ce8 <interface_socket_packet_handler_update+0x48>
   24cf8:	20027da4 	.word	0x20027da4

00024cfc <interface_socket_wait>:
   24cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   24cfe:	4e12      	ldr	r6, [pc, #72]	; (24d48 <interface_socket_wait+0x4c>)
   24d00:	0140      	lsls	r0, r0, #5
   24d02:	5834      	ldr	r4, [r6, r0]
   24d04:	b083      	sub	sp, #12
   24d06:	4014      	ands	r4, r2
   24d08:	428c      	cmp	r4, r1
   24d0a:	9301      	str	r3, [sp, #4]
   24d0c:	eb06 0700 	add.w	r7, r6, r0
   24d10:	d013      	beq.n	24d3a <interface_socket_wait+0x3e>
   24d12:	687b      	ldr	r3, [r7, #4]
   24d14:	b98b      	cbnz	r3, 24d3a <interface_socket_wait+0x3e>
   24d16:	5833      	ldr	r3, [r6, r0]
   24d18:	00db      	lsls	r3, r3, #3
   24d1a:	d411      	bmi.n	24d40 <interface_socket_wait+0x44>
   24d1c:	460d      	mov	r5, r1
   24d1e:	4614      	mov	r4, r2
   24d20:	463e      	mov	r6, r7
   24d22:	e006      	b.n	24d32 <interface_socket_wait+0x36>
   24d24:	6873      	ldr	r3, [r6, #4]
   24d26:	b943      	cbnz	r3, 24d3a <interface_socket_wait+0x3e>
   24d28:	a901      	add	r1, sp, #4
   24d2a:	4638      	mov	r0, r7
   24d2c:	f7f1 f810 	bl	15d50 <bsd_os_timedwait>
   24d30:	b920      	cbnz	r0, 24d3c <interface_socket_wait+0x40>
   24d32:	6833      	ldr	r3, [r6, #0]
   24d34:	4023      	ands	r3, r4
   24d36:	42ab      	cmp	r3, r5
   24d38:	d1f4      	bne.n	24d24 <interface_socket_wait+0x28>
   24d3a:	2000      	movs	r0, #0
   24d3c:	b003      	add	sp, #12
   24d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24d40:	2073      	movs	r0, #115	; 0x73
   24d42:	b003      	add	sp, #12
   24d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24d46:	bf00      	nop
   24d48:	20027da4 	.word	0x20027da4

00024d4c <interface_from_internal_id_search>:
   24d4c:	4b22      	ldr	r3, [pc, #136]	; (24dd8 <interface_from_internal_id_search+0x8c>)
   24d4e:	681a      	ldr	r2, [r3, #0]
   24d50:	b112      	cbz	r2, 24d58 <interface_from_internal_id_search+0xc>
   24d52:	695a      	ldr	r2, [r3, #20]
   24d54:	4282      	cmp	r2, r0
   24d56:	d031      	beq.n	24dbc <interface_from_internal_id_search+0x70>
   24d58:	6a1a      	ldr	r2, [r3, #32]
   24d5a:	b112      	cbz	r2, 24d62 <interface_from_internal_id_search+0x16>
   24d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   24d5e:	4282      	cmp	r2, r0
   24d60:	d02e      	beq.n	24dc0 <interface_from_internal_id_search+0x74>
   24d62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   24d64:	b112      	cbz	r2, 24d6c <interface_from_internal_id_search+0x20>
   24d66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   24d68:	4282      	cmp	r2, r0
   24d6a:	d02b      	beq.n	24dc4 <interface_from_internal_id_search+0x78>
   24d6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   24d6e:	b112      	cbz	r2, 24d76 <interface_from_internal_id_search+0x2a>
   24d70:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   24d72:	4282      	cmp	r2, r0
   24d74:	d028      	beq.n	24dc8 <interface_from_internal_id_search+0x7c>
   24d76:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   24d7a:	b11a      	cbz	r2, 24d84 <interface_from_internal_id_search+0x38>
   24d7c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   24d80:	4282      	cmp	r2, r0
   24d82:	d023      	beq.n	24dcc <interface_from_internal_id_search+0x80>
   24d84:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   24d88:	b11a      	cbz	r2, 24d92 <interface_from_internal_id_search+0x46>
   24d8a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   24d8e:	4282      	cmp	r2, r0
   24d90:	d01e      	beq.n	24dd0 <interface_from_internal_id_search+0x84>
   24d92:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   24d96:	b11a      	cbz	r2, 24da0 <interface_from_internal_id_search+0x54>
   24d98:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   24d9c:	4282      	cmp	r2, r0
   24d9e:	d019      	beq.n	24dd4 <interface_from_internal_id_search+0x88>
   24da0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   24da4:	b13a      	cbz	r2, 24db6 <interface_from_internal_id_search+0x6a>
   24da6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   24daa:	4283      	cmp	r3, r0
   24dac:	bf14      	ite	ne
   24dae:	f04f 30ff 	movne.w	r0, #4294967295
   24db2:	2007      	moveq	r0, #7
   24db4:	4770      	bx	lr
   24db6:	f04f 30ff 	mov.w	r0, #4294967295
   24dba:	4770      	bx	lr
   24dbc:	2000      	movs	r0, #0
   24dbe:	4770      	bx	lr
   24dc0:	2001      	movs	r0, #1
   24dc2:	4770      	bx	lr
   24dc4:	2002      	movs	r0, #2
   24dc6:	4770      	bx	lr
   24dc8:	2003      	movs	r0, #3
   24dca:	4770      	bx	lr
   24dcc:	2004      	movs	r0, #4
   24dce:	4770      	bx	lr
   24dd0:	2005      	movs	r0, #5
   24dd2:	4770      	bx	lr
   24dd4:	2006      	movs	r0, #6
   24dd6:	4770      	bx	lr
   24dd8:	20027da4 	.word	0x20027da4

00024ddc <interface_socket_from_handle_get>:
   24ddc:	2807      	cmp	r0, #7
   24dde:	d807      	bhi.n	24df0 <interface_socket_from_handle_get+0x14>
   24de0:	4b04      	ldr	r3, [pc, #16]	; (24df4 <interface_socket_from_handle_get+0x18>)
   24de2:	0140      	lsls	r0, r0, #5
   24de4:	581a      	ldr	r2, [r3, r0]
   24de6:	4418      	add	r0, r3
   24de8:	2a00      	cmp	r2, #0
   24dea:	bf08      	it	eq
   24dec:	2000      	moveq	r0, #0
   24dee:	4770      	bx	lr
   24df0:	2000      	movs	r0, #0
   24df2:	4770      	bx	lr
   24df4:	20027da4 	.word	0x20027da4

00024df8 <interface_socket_event_get>:
   24df8:	b119      	cbz	r1, 24e02 <interface_socket_event_get+0xa>
   24dfa:	2807      	cmp	r0, #7
   24dfc:	d902      	bls.n	24e04 <interface_socket_event_get+0xc>
   24dfe:	2310      	movs	r3, #16
   24e00:	600b      	str	r3, [r1, #0]
   24e02:	4770      	bx	lr
   24e04:	4b07      	ldr	r3, [pc, #28]	; (24e24 <interface_socket_event_get+0x2c>)
   24e06:	0140      	lsls	r0, r0, #5
   24e08:	581a      	ldr	r2, [r3, r0]
   24e0a:	2a00      	cmp	r2, #0
   24e0c:	d0f7      	beq.n	24dfe <interface_socket_event_get+0x6>
   24e0e:	581b      	ldr	r3, [r3, r0]
   24e10:	0c1b      	lsrs	r3, r3, #16
   24e12:	f003 020a 	and.w	r2, r3, #10
   24e16:	2a0a      	cmp	r2, #10
   24e18:	bf14      	ite	ne
   24e1a:	f003 030f 	andne.w	r3, r3, #15
   24e1e:	f003 030d 	andeq.w	r3, r3, #13
   24e22:	e7ed      	b.n	24e00 <interface_socket_event_get+0x8>
   24e24:	20027da4 	.word	0x20027da4

00024e28 <interface_socket_getopt>:
   24e28:	b570      	push	{r4, r5, r6, lr}
   24e2a:	2807      	cmp	r0, #7
   24e2c:	9d04      	ldr	r5, [sp, #16]
   24e2e:	d81f      	bhi.n	24e70 <interface_socket_getopt+0x48>
   24e30:	4c12      	ldr	r4, [pc, #72]	; (24e7c <interface_socket_getopt+0x54>)
   24e32:	0140      	lsls	r0, r0, #5
   24e34:	5826      	ldr	r6, [r4, r0]
   24e36:	4404      	add	r4, r0
   24e38:	b1d6      	cbz	r6, 24e70 <interface_socket_getopt+0x48>
   24e3a:	2901      	cmp	r1, #1
   24e3c:	d112      	bne.n	24e64 <interface_socket_getopt+0x3c>
   24e3e:	2a04      	cmp	r2, #4
   24e40:	d110      	bne.n	24e64 <interface_socket_getopt+0x3c>
   24e42:	b14b      	cbz	r3, 24e58 <interface_socket_getopt+0x30>
   24e44:	b145      	cbz	r5, 24e58 <interface_socket_getopt+0x30>
   24e46:	682a      	ldr	r2, [r5, #0]
   24e48:	2a04      	cmp	r2, #4
   24e4a:	d105      	bne.n	24e58 <interface_socket_getopt+0x30>
   24e4c:	2200      	movs	r2, #0
   24e4e:	6861      	ldr	r1, [r4, #4]
   24e50:	4610      	mov	r0, r2
   24e52:	6019      	str	r1, [r3, #0]
   24e54:	6062      	str	r2, [r4, #4]
   24e56:	bd70      	pop	{r4, r5, r6, pc}
   24e58:	2016      	movs	r0, #22
   24e5a:	f009 ff5c 	bl	2ed16 <bsd_os_errno_set>
   24e5e:	f04f 30ff 	mov.w	r0, #4294967295
   24e62:	bd70      	pop	{r4, r5, r6, pc}
   24e64:	202a      	movs	r0, #42	; 0x2a
   24e66:	f009 ff56 	bl	2ed16 <bsd_os_errno_set>
   24e6a:	f04f 30ff 	mov.w	r0, #4294967295
   24e6e:	bd70      	pop	{r4, r5, r6, pc}
   24e70:	2009      	movs	r0, #9
   24e72:	f009 ff50 	bl	2ed16 <bsd_os_errno_set>
   24e76:	f04f 30ff 	mov.w	r0, #4294967295
   24e7a:	bd70      	pop	{r4, r5, r6, pc}
   24e7c:	20027da4 	.word	0x20027da4

00024e80 <interface_shutdown>:
   24e80:	4b15      	ldr	r3, [pc, #84]	; (24ed8 <interface_shutdown+0x58>)
   24e82:	681a      	ldr	r2, [r3, #0]
   24e84:	b10a      	cbz	r2, 24e8a <interface_shutdown+0xa>
   24e86:	2270      	movs	r2, #112	; 0x70
   24e88:	605a      	str	r2, [r3, #4]
   24e8a:	6a1a      	ldr	r2, [r3, #32]
   24e8c:	b10a      	cbz	r2, 24e92 <interface_shutdown+0x12>
   24e8e:	2270      	movs	r2, #112	; 0x70
   24e90:	625a      	str	r2, [r3, #36]	; 0x24
   24e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   24e94:	b10a      	cbz	r2, 24e9a <interface_shutdown+0x1a>
   24e96:	2270      	movs	r2, #112	; 0x70
   24e98:	645a      	str	r2, [r3, #68]	; 0x44
   24e9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   24e9c:	b10a      	cbz	r2, 24ea2 <interface_shutdown+0x22>
   24e9e:	2270      	movs	r2, #112	; 0x70
   24ea0:	665a      	str	r2, [r3, #100]	; 0x64
   24ea2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   24ea6:	b112      	cbz	r2, 24eae <interface_shutdown+0x2e>
   24ea8:	2270      	movs	r2, #112	; 0x70
   24eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   24eae:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   24eb2:	b112      	cbz	r2, 24eba <interface_shutdown+0x3a>
   24eb4:	2270      	movs	r2, #112	; 0x70
   24eb6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
   24eba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   24ebe:	b112      	cbz	r2, 24ec6 <interface_shutdown+0x46>
   24ec0:	2270      	movs	r2, #112	; 0x70
   24ec2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
   24ec6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   24eca:	b112      	cbz	r2, 24ed2 <interface_shutdown+0x52>
   24ecc:	2270      	movs	r2, #112	; 0x70
   24ece:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   24ed2:	2000      	movs	r0, #0
   24ed4:	4770      	bx	lr
   24ed6:	bf00      	nop
   24ed8:	20027da4 	.word	0x20027da4

00024edc <interface_socket_fcntl>:
   24edc:	2807      	cmp	r0, #7
   24ede:	b510      	push	{r4, lr}
   24ee0:	d816      	bhi.n	24f10 <interface_socket_fcntl+0x34>
   24ee2:	4c11      	ldr	r4, [pc, #68]	; (24f28 <interface_socket_fcntl+0x4c>)
   24ee4:	0143      	lsls	r3, r0, #5
   24ee6:	58e0      	ldr	r0, [r4, r3]
   24ee8:	b190      	cbz	r0, 24f10 <interface_socket_fcntl+0x34>
   24eea:	2901      	cmp	r1, #1
   24eec:	d005      	beq.n	24efa <interface_socket_fcntl+0x1e>
   24eee:	2902      	cmp	r1, #2
   24ef0:	d114      	bne.n	24f1c <interface_socket_fcntl+0x40>
   24ef2:	58e0      	ldr	r0, [r4, r3]
   24ef4:	f3c0 7000 	ubfx	r0, r0, #28, #1
   24ef8:	bd10      	pop	{r4, pc}
   24efa:	f012 0001 	ands.w	r0, r2, #1
   24efe:	58e2      	ldr	r2, [r4, r3]
   24f00:	bf1a      	itte	ne
   24f02:	2000      	movne	r0, #0
   24f04:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   24f08:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   24f0c:	50e2      	str	r2, [r4, r3]
   24f0e:	bd10      	pop	{r4, pc}
   24f10:	2009      	movs	r0, #9
   24f12:	f009 ff00 	bl	2ed16 <bsd_os_errno_set>
   24f16:	f04f 30ff 	mov.w	r0, #4294967295
   24f1a:	bd10      	pop	{r4, pc}
   24f1c:	2016      	movs	r0, #22
   24f1e:	f009 fefa 	bl	2ed16 <bsd_os_errno_set>
   24f22:	f04f 30ff 	mov.w	r0, #4294967295
   24f26:	bd10      	pop	{r4, pc}
   24f28:	20027da4 	.word	0x20027da4

00024f2c <bsd_os_application_irq_handler>:
   24f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24f30:	4c2e      	ldr	r4, [pc, #184]	; (24fec <bsd_os_application_irq_handler+0xc0>)
   24f32:	f7f0 ffa7 	bl	15e84 <bsd_os_application_irq_clear>
   24f36:	2703      	movs	r7, #3
   24f38:	4d2d      	ldr	r5, [pc, #180]	; (24ff0 <bsd_os_application_irq_handler+0xc4>)
   24f3a:	4e2e      	ldr	r6, [pc, #184]	; (24ff4 <bsd_os_application_irq_handler+0xc8>)
   24f3c:	f104 0880 	add.w	r8, r4, #128	; 0x80
   24f40:	e002      	b.n	24f48 <bsd_os_application_irq_handler+0x1c>
   24f42:	3408      	adds	r4, #8
   24f44:	4544      	cmp	r4, r8
   24f46:	d03b      	beq.n	24fc0 <bsd_os_application_irq_handler+0x94>
   24f48:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   24f4c:	2b02      	cmp	r3, #2
   24f4e:	d1f8      	bne.n	24f42 <bsd_os_application_irq_handler+0x16>
   24f50:	6820      	ldr	r0, [r4, #0]
   24f52:	8829      	ldrh	r1, [r5, #0]
   24f54:	6802      	ldr	r2, [r0, #0]
   24f56:	b292      	uxth	r2, r2
   24f58:	4291      	cmp	r1, r2
   24f5a:	d033      	beq.n	24fc4 <bsd_os_application_irq_handler+0x98>
   24f5c:	8a29      	ldrh	r1, [r5, #16]
   24f5e:	4291      	cmp	r1, r2
   24f60:	d032      	beq.n	24fc8 <bsd_os_application_irq_handler+0x9c>
   24f62:	8c29      	ldrh	r1, [r5, #32]
   24f64:	4291      	cmp	r1, r2
   24f66:	d01c      	beq.n	24fa2 <bsd_os_application_irq_handler+0x76>
   24f68:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   24f6a:	4293      	cmp	r3, r2
   24f6c:	d02e      	beq.n	24fcc <bsd_os_application_irq_handler+0xa0>
   24f6e:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
   24f72:	4293      	cmp	r3, r2
   24f74:	d02f      	beq.n	24fd6 <bsd_os_application_irq_handler+0xaa>
   24f76:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
   24f7a:	4293      	cmp	r3, r2
   24f7c:	d02d      	beq.n	24fda <bsd_os_application_irq_handler+0xae>
   24f7e:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
   24f82:	4293      	cmp	r3, r2
   24f84:	d02b      	beq.n	24fde <bsd_os_application_irq_handler+0xb2>
   24f86:	f8b5 3070 	ldrh.w	r3, [r5, #112]	; 0x70
   24f8a:	4293      	cmp	r3, r2
   24f8c:	d029      	beq.n	24fe2 <bsd_os_application_irq_handler+0xb6>
   24f8e:	f8b5 3080 	ldrh.w	r3, [r5, #128]	; 0x80
   24f92:	4293      	cmp	r3, r2
   24f94:	d027      	beq.n	24fe6 <bsd_os_application_irq_handler+0xba>
   24f96:	f8b5 3090 	ldrh.w	r3, [r5, #144]	; 0x90
   24f9a:	4293      	cmp	r3, r2
   24f9c:	bf08      	it	eq
   24f9e:	2309      	moveq	r3, #9
   24fa0:	d1cf      	bne.n	24f42 <bsd_os_application_irq_handler+0x16>
   24fa2:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   24fa6:	685a      	ldr	r2, [r3, #4]
   24fa8:	68d9      	ldr	r1, [r3, #12]
   24faa:	4790      	blx	r2
   24fac:	b980      	cbnz	r0, 24fd0 <bsd_os_application_irq_handler+0xa4>
   24fae:	2201      	movs	r2, #1
   24fb0:	6820      	ldr	r0, [r4, #0]
   24fb2:	f804 2c04 	strb.w	r2, [r4, #-4]
   24fb6:	68f3      	ldr	r3, [r6, #12]
   24fb8:	3408      	adds	r4, #8
   24fba:	4798      	blx	r3
   24fbc:	4544      	cmp	r4, r8
   24fbe:	d1c3      	bne.n	24f48 <bsd_os_application_irq_handler+0x1c>
   24fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24fc4:	2300      	movs	r3, #0
   24fc6:	e7ec      	b.n	24fa2 <bsd_os_application_irq_handler+0x76>
   24fc8:	2301      	movs	r3, #1
   24fca:	e7ea      	b.n	24fa2 <bsd_os_application_irq_handler+0x76>
   24fcc:	2303      	movs	r3, #3
   24fce:	e7e8      	b.n	24fa2 <bsd_os_application_irq_handler+0x76>
   24fd0:	f804 7c04 	strb.w	r7, [r4, #-4]
   24fd4:	e7b5      	b.n	24f42 <bsd_os_application_irq_handler+0x16>
   24fd6:	2304      	movs	r3, #4
   24fd8:	e7e3      	b.n	24fa2 <bsd_os_application_irq_handler+0x76>
   24fda:	2305      	movs	r3, #5
   24fdc:	e7e1      	b.n	24fa2 <bsd_os_application_irq_handler+0x76>
   24fde:	2306      	movs	r3, #6
   24fe0:	e7df      	b.n	24fa2 <bsd_os_application_irq_handler+0x76>
   24fe2:	2307      	movs	r3, #7
   24fe4:	e7dd      	b.n	24fa2 <bsd_os_application_irq_handler+0x76>
   24fe6:	2308      	movs	r3, #8
   24fe8:	e7db      	b.n	24fa2 <bsd_os_application_irq_handler+0x76>
   24fea:	bf00      	nop
   24fec:	20023454 	.word	0x20023454
   24ff0:	20023318 	.word	0x20023318
   24ff4:	200233b8 	.word	0x200233b8

00024ff8 <rpc_framework_init>:
   24ff8:	b508      	push	{r3, lr}
   24ffa:	22a0      	movs	r2, #160	; 0xa0
   24ffc:	2100      	movs	r1, #0
   24ffe:	4802      	ldr	r0, [pc, #8]	; (25008 <rpc_framework_init+0x10>)
   25000:	f005 fc70 	bl	2a8e4 <memset>
   25004:	2000      	movs	r0, #0
   25006:	bd08      	pop	{r3, pc}
   25008:	20023318 	.word	0x20023318

0002500c <rpc_client_register>:
   2500c:	8803      	ldrh	r3, [r0, #0]
   2500e:	2b00      	cmp	r3, #0
   25010:	d045      	beq.n	2509e <rpc_client_register+0x92>
   25012:	6842      	ldr	r2, [r0, #4]
   25014:	4601      	mov	r1, r0
   25016:	2a00      	cmp	r2, #0
   25018:	d050      	beq.n	250bc <rpc_client_register+0xb0>
   2501a:	4a30      	ldr	r2, [pc, #192]	; (250dc <rpc_client_register+0xd0>)
   2501c:	8810      	ldrh	r0, [r2, #0]
   2501e:	4283      	cmp	r3, r0
   25020:	d03d      	beq.n	2509e <rpc_client_register+0x92>
   25022:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25026:	8a14      	ldrh	r4, [r2, #16]
   25028:	42a3      	cmp	r3, r4
   2502a:	d035      	beq.n	25098 <rpc_client_register+0x8c>
   2502c:	8c15      	ldrh	r5, [r2, #32]
   2502e:	42ab      	cmp	r3, r5
   25030:	d032      	beq.n	25098 <rpc_client_register+0x8c>
   25032:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   25034:	42b3      	cmp	r3, r6
   25036:	d02f      	beq.n	25098 <rpc_client_register+0x8c>
   25038:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   2503c:	42bb      	cmp	r3, r7
   2503e:	d02b      	beq.n	25098 <rpc_client_register+0x8c>
   25040:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   25044:	4563      	cmp	r3, ip
   25046:	d027      	beq.n	25098 <rpc_client_register+0x8c>
   25048:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   2504c:	4573      	cmp	r3, lr
   2504e:	d023      	beq.n	25098 <rpc_client_register+0x8c>
   25050:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   25054:	4543      	cmp	r3, r8
   25056:	d01f      	beq.n	25098 <rpc_client_register+0x8c>
   25058:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   2505c:	454b      	cmp	r3, r9
   2505e:	d01b      	beq.n	25098 <rpc_client_register+0x8c>
   25060:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   25064:	4553      	cmp	r3, sl
   25066:	d017      	beq.n	25098 <rpc_client_register+0x8c>
   25068:	b1e0      	cbz	r0, 250a4 <rpc_client_register+0x98>
   2506a:	b35c      	cbz	r4, 250c4 <rpc_client_register+0xb8>
   2506c:	b365      	cbz	r5, 250c8 <rpc_client_register+0xbc>
   2506e:	b36e      	cbz	r6, 250cc <rpc_client_register+0xc0>
   25070:	b377      	cbz	r7, 250d0 <rpc_client_register+0xc4>
   25072:	f1bc 0f00 	cmp.w	ip, #0
   25076:	d02d      	beq.n	250d4 <rpc_client_register+0xc8>
   25078:	f1be 0f00 	cmp.w	lr, #0
   2507c:	d020      	beq.n	250c0 <rpc_client_register+0xb4>
   2507e:	f1b8 0f00 	cmp.w	r8, #0
   25082:	d029      	beq.n	250d8 <rpc_client_register+0xcc>
   25084:	f1b9 0f00 	cmp.w	r9, #0
   25088:	d00b      	beq.n	250a2 <rpc_client_register+0x96>
   2508a:	2009      	movs	r0, #9
   2508c:	f1ba 0f00 	cmp.w	sl, #0
   25090:	d008      	beq.n	250a4 <rpc_client_register+0x98>
   25092:	2004      	movs	r0, #4
   25094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25098:	2007      	movs	r0, #7
   2509a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2509e:	2007      	movs	r0, #7
   250a0:	4770      	bx	lr
   250a2:	2008      	movs	r0, #8
   250a4:	0100      	lsls	r0, r0, #4
   250a6:	5213      	strh	r3, [r2, r0]
   250a8:	684b      	ldr	r3, [r1, #4]
   250aa:	4402      	add	r2, r0
   250ac:	6053      	str	r3, [r2, #4]
   250ae:	688b      	ldr	r3, [r1, #8]
   250b0:	2000      	movs	r0, #0
   250b2:	6093      	str	r3, [r2, #8]
   250b4:	68cb      	ldr	r3, [r1, #12]
   250b6:	60d3      	str	r3, [r2, #12]
   250b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   250bc:	200e      	movs	r0, #14
   250be:	4770      	bx	lr
   250c0:	2006      	movs	r0, #6
   250c2:	e7ef      	b.n	250a4 <rpc_client_register+0x98>
   250c4:	2001      	movs	r0, #1
   250c6:	e7ed      	b.n	250a4 <rpc_client_register+0x98>
   250c8:	2002      	movs	r0, #2
   250ca:	e7eb      	b.n	250a4 <rpc_client_register+0x98>
   250cc:	2003      	movs	r0, #3
   250ce:	e7e9      	b.n	250a4 <rpc_client_register+0x98>
   250d0:	2004      	movs	r0, #4
   250d2:	e7e7      	b.n	250a4 <rpc_client_register+0x98>
   250d4:	2005      	movs	r0, #5
   250d6:	e7e5      	b.n	250a4 <rpc_client_register+0x98>
   250d8:	2007      	movs	r0, #7
   250da:	e7e3      	b.n	250a4 <rpc_client_register+0x98>
   250dc:	20023318 	.word	0x20023318

000250e0 <rpc_transport_input>:
   250e0:	b538      	push	{r3, r4, r5, lr}
   250e2:	4a86      	ldr	r2, [pc, #536]	; (252fc <rpc_transport_input+0x21c>)
   250e4:	680b      	ldr	r3, [r1, #0]
   250e6:	8810      	ldrh	r0, [r2, #0]
   250e8:	b29b      	uxth	r3, r3
   250ea:	4298      	cmp	r0, r3
   250ec:	d029      	beq.n	25142 <rpc_transport_input+0x62>
   250ee:	8a10      	ldrh	r0, [r2, #16]
   250f0:	4298      	cmp	r0, r3
   250f2:	d026      	beq.n	25142 <rpc_transport_input+0x62>
   250f4:	8c10      	ldrh	r0, [r2, #32]
   250f6:	4298      	cmp	r0, r3
   250f8:	d023      	beq.n	25142 <rpc_transport_input+0x62>
   250fa:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   250fc:	4298      	cmp	r0, r3
   250fe:	d020      	beq.n	25142 <rpc_transport_input+0x62>
   25100:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   25104:	4298      	cmp	r0, r3
   25106:	d01c      	beq.n	25142 <rpc_transport_input+0x62>
   25108:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   2510c:	4298      	cmp	r0, r3
   2510e:	d018      	beq.n	25142 <rpc_transport_input+0x62>
   25110:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   25114:	4298      	cmp	r0, r3
   25116:	d014      	beq.n	25142 <rpc_transport_input+0x62>
   25118:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   2511c:	4298      	cmp	r0, r3
   2511e:	d010      	beq.n	25142 <rpc_transport_input+0x62>
   25120:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   25124:	4298      	cmp	r0, r3
   25126:	d00c      	beq.n	25142 <rpc_transport_input+0x62>
   25128:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   2512c:	429a      	cmp	r2, r3
   2512e:	d008      	beq.n	25142 <rpc_transport_input+0x62>
   25130:	6888      	ldr	r0, [r1, #8]
   25132:	2800      	cmp	r0, #0
   25134:	f000 80a9 	beq.w	2528a <rpc_transport_input+0x1aa>
   25138:	4b71      	ldr	r3, [pc, #452]	; (25300 <rpc_transport_input+0x220>)
   2513a:	691b      	ldr	r3, [r3, #16]
   2513c:	4798      	blx	r3
   2513e:	2000      	movs	r0, #0
   25140:	bd38      	pop	{r3, r4, r5, pc}
   25142:	6888      	ldr	r0, [r1, #8]
   25144:	2800      	cmp	r0, #0
   25146:	f000 8091 	beq.w	2526c <rpc_transport_input+0x18c>
   2514a:	4a6e      	ldr	r2, [pc, #440]	; (25304 <rpc_transport_input+0x224>)
   2514c:	6815      	ldr	r5, [r2, #0]
   2514e:	2d00      	cmp	r5, #0
   25150:	d03b      	beq.n	251ca <rpc_transport_input+0xea>
   25152:	6894      	ldr	r4, [r2, #8]
   25154:	2c00      	cmp	r4, #0
   25156:	f000 809a 	beq.w	2528e <rpc_transport_input+0x1ae>
   2515a:	6914      	ldr	r4, [r2, #16]
   2515c:	2c00      	cmp	r4, #0
   2515e:	f000 8098 	beq.w	25292 <rpc_transport_input+0x1b2>
   25162:	6994      	ldr	r4, [r2, #24]
   25164:	2c00      	cmp	r4, #0
   25166:	f000 8096 	beq.w	25296 <rpc_transport_input+0x1b6>
   2516a:	6a14      	ldr	r4, [r2, #32]
   2516c:	2c00      	cmp	r4, #0
   2516e:	f000 8094 	beq.w	2529a <rpc_transport_input+0x1ba>
   25172:	6a94      	ldr	r4, [r2, #40]	; 0x28
   25174:	2c00      	cmp	r4, #0
   25176:	f000 8086 	beq.w	25286 <rpc_transport_input+0x1a6>
   2517a:	6b14      	ldr	r4, [r2, #48]	; 0x30
   2517c:	2c00      	cmp	r4, #0
   2517e:	f000 8090 	beq.w	252a2 <rpc_transport_input+0x1c2>
   25182:	6b94      	ldr	r4, [r2, #56]	; 0x38
   25184:	2c00      	cmp	r4, #0
   25186:	f000 8090 	beq.w	252aa <rpc_transport_input+0x1ca>
   2518a:	6c14      	ldr	r4, [r2, #64]	; 0x40
   2518c:	2c00      	cmp	r4, #0
   2518e:	f000 8090 	beq.w	252b2 <rpc_transport_input+0x1d2>
   25192:	6c94      	ldr	r4, [r2, #72]	; 0x48
   25194:	2c00      	cmp	r4, #0
   25196:	f000 8090 	beq.w	252ba <rpc_transport_input+0x1da>
   2519a:	6d14      	ldr	r4, [r2, #80]	; 0x50
   2519c:	2c00      	cmp	r4, #0
   2519e:	f000 8092 	beq.w	252c6 <rpc_transport_input+0x1e6>
   251a2:	6d94      	ldr	r4, [r2, #88]	; 0x58
   251a4:	2c00      	cmp	r4, #0
   251a6:	f000 8090 	beq.w	252ca <rpc_transport_input+0x1ea>
   251aa:	6e14      	ldr	r4, [r2, #96]	; 0x60
   251ac:	2c00      	cmp	r4, #0
   251ae:	f000 8092 	beq.w	252d6 <rpc_transport_input+0x1f6>
   251b2:	6e94      	ldr	r4, [r2, #104]	; 0x68
   251b4:	2c00      	cmp	r4, #0
   251b6:	f000 8090 	beq.w	252da <rpc_transport_input+0x1fa>
   251ba:	6f14      	ldr	r4, [r2, #112]	; 0x70
   251bc:	2c00      	cmp	r4, #0
   251be:	f000 808e 	beq.w	252de <rpc_transport_input+0x1fe>
   251c2:	6f94      	ldr	r4, [r2, #120]	; 0x78
   251c4:	2c00      	cmp	r4, #0
   251c6:	d1b7      	bne.n	25138 <rpc_transport_input+0x58>
   251c8:	250f      	movs	r5, #15
   251ca:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
   251ce:	f842 0035 	str.w	r0, [r2, r5, lsl #3]
   251d2:	80a3      	strh	r3, [r4, #4]
   251d4:	4b4c      	ldr	r3, [pc, #304]	; (25308 <rpc_transport_input+0x228>)
   251d6:	781a      	ldrb	r2, [r3, #0]
   251d8:	2a01      	cmp	r2, #1
   251da:	d060      	beq.n	2529e <rpc_transport_input+0x1be>
   251dc:	7a1a      	ldrb	r2, [r3, #8]
   251de:	2a01      	cmp	r2, #1
   251e0:	d047      	beq.n	25272 <rpc_transport_input+0x192>
   251e2:	7c1a      	ldrb	r2, [r3, #16]
   251e4:	2a01      	cmp	r2, #1
   251e6:	d05e      	beq.n	252a6 <rpc_transport_input+0x1c6>
   251e8:	7e1a      	ldrb	r2, [r3, #24]
   251ea:	2a01      	cmp	r2, #1
   251ec:	d05f      	beq.n	252ae <rpc_transport_input+0x1ce>
   251ee:	f893 2020 	ldrb.w	r2, [r3, #32]
   251f2:	2a01      	cmp	r2, #1
   251f4:	d05f      	beq.n	252b6 <rpc_transport_input+0x1d6>
   251f6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   251fa:	2a01      	cmp	r2, #1
   251fc:	d05f      	beq.n	252be <rpc_transport_input+0x1de>
   251fe:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   25202:	2a01      	cmp	r2, #1
   25204:	d05d      	beq.n	252c2 <rpc_transport_input+0x1e2>
   25206:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   2520a:	2a01      	cmp	r2, #1
   2520c:	d05f      	beq.n	252ce <rpc_transport_input+0x1ee>
   2520e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   25212:	2a01      	cmp	r2, #1
   25214:	d05d      	beq.n	252d2 <rpc_transport_input+0x1f2>
   25216:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   2521a:	2a01      	cmp	r2, #1
   2521c:	d061      	beq.n	252e2 <rpc_transport_input+0x202>
   2521e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   25222:	2a01      	cmp	r2, #1
   25224:	d05f      	beq.n	252e6 <rpc_transport_input+0x206>
   25226:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   2522a:	2a01      	cmp	r2, #1
   2522c:	d05d      	beq.n	252ea <rpc_transport_input+0x20a>
   2522e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   25232:	2a01      	cmp	r2, #1
   25234:	d05b      	beq.n	252ee <rpc_transport_input+0x20e>
   25236:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   2523a:	2a01      	cmp	r2, #1
   2523c:	d059      	beq.n	252f2 <rpc_transport_input+0x212>
   2523e:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   25242:	2a01      	cmp	r2, #1
   25244:	d057      	beq.n	252f6 <rpc_transport_input+0x216>
   25246:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   2524a:	2a01      	cmp	r2, #1
   2524c:	d010      	beq.n	25270 <rpc_transport_input+0x190>
   2524e:	2d10      	cmp	r5, #16
   25250:	d01b      	beq.n	2528a <rpc_transport_input+0x1aa>
   25252:	2400      	movs	r4, #0
   25254:	4b2b      	ldr	r3, [pc, #172]	; (25304 <rpc_transport_input+0x224>)
   25256:	4a2a      	ldr	r2, [pc, #168]	; (25300 <rpc_transport_input+0x220>)
   25258:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
   2525c:	f843 4035 	str.w	r4, [r3, r5, lsl #3]
   25260:	8084      	strh	r4, [r0, #4]
   25262:	6888      	ldr	r0, [r1, #8]
   25264:	6913      	ldr	r3, [r2, #16]
   25266:	4798      	blx	r3
   25268:	4620      	mov	r0, r4
   2526a:	bd38      	pop	{r3, r4, r5, pc}
   2526c:	2510      	movs	r5, #16
   2526e:	e7b1      	b.n	251d4 <rpc_transport_input+0xf4>
   25270:	220f      	movs	r2, #15
   25272:	2402      	movs	r4, #2
   25274:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   25278:	6041      	str	r1, [r0, #4]
   2527a:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   2527e:	f7f0 fdf9 	bl	15e74 <bsd_os_application_irq_set>
   25282:	2001      	movs	r0, #1
   25284:	bd38      	pop	{r3, r4, r5, pc}
   25286:	2505      	movs	r5, #5
   25288:	e79f      	b.n	251ca <rpc_transport_input+0xea>
   2528a:	2000      	movs	r0, #0
   2528c:	bd38      	pop	{r3, r4, r5, pc}
   2528e:	2501      	movs	r5, #1
   25290:	e79b      	b.n	251ca <rpc_transport_input+0xea>
   25292:	2502      	movs	r5, #2
   25294:	e799      	b.n	251ca <rpc_transport_input+0xea>
   25296:	2503      	movs	r5, #3
   25298:	e797      	b.n	251ca <rpc_transport_input+0xea>
   2529a:	2504      	movs	r5, #4
   2529c:	e795      	b.n	251ca <rpc_transport_input+0xea>
   2529e:	2200      	movs	r2, #0
   252a0:	e7e7      	b.n	25272 <rpc_transport_input+0x192>
   252a2:	2506      	movs	r5, #6
   252a4:	e791      	b.n	251ca <rpc_transport_input+0xea>
   252a6:	2202      	movs	r2, #2
   252a8:	e7e3      	b.n	25272 <rpc_transport_input+0x192>
   252aa:	2507      	movs	r5, #7
   252ac:	e78d      	b.n	251ca <rpc_transport_input+0xea>
   252ae:	2203      	movs	r2, #3
   252b0:	e7df      	b.n	25272 <rpc_transport_input+0x192>
   252b2:	2508      	movs	r5, #8
   252b4:	e789      	b.n	251ca <rpc_transport_input+0xea>
   252b6:	2204      	movs	r2, #4
   252b8:	e7db      	b.n	25272 <rpc_transport_input+0x192>
   252ba:	2509      	movs	r5, #9
   252bc:	e785      	b.n	251ca <rpc_transport_input+0xea>
   252be:	2205      	movs	r2, #5
   252c0:	e7d7      	b.n	25272 <rpc_transport_input+0x192>
   252c2:	2206      	movs	r2, #6
   252c4:	e7d5      	b.n	25272 <rpc_transport_input+0x192>
   252c6:	250a      	movs	r5, #10
   252c8:	e77f      	b.n	251ca <rpc_transport_input+0xea>
   252ca:	250b      	movs	r5, #11
   252cc:	e77d      	b.n	251ca <rpc_transport_input+0xea>
   252ce:	2207      	movs	r2, #7
   252d0:	e7cf      	b.n	25272 <rpc_transport_input+0x192>
   252d2:	2208      	movs	r2, #8
   252d4:	e7cd      	b.n	25272 <rpc_transport_input+0x192>
   252d6:	250c      	movs	r5, #12
   252d8:	e777      	b.n	251ca <rpc_transport_input+0xea>
   252da:	250d      	movs	r5, #13
   252dc:	e775      	b.n	251ca <rpc_transport_input+0xea>
   252de:	250e      	movs	r5, #14
   252e0:	e773      	b.n	251ca <rpc_transport_input+0xea>
   252e2:	2209      	movs	r2, #9
   252e4:	e7c5      	b.n	25272 <rpc_transport_input+0x192>
   252e6:	220a      	movs	r2, #10
   252e8:	e7c3      	b.n	25272 <rpc_transport_input+0x192>
   252ea:	220b      	movs	r2, #11
   252ec:	e7c1      	b.n	25272 <rpc_transport_input+0x192>
   252ee:	220c      	movs	r2, #12
   252f0:	e7bf      	b.n	25272 <rpc_transport_input+0x192>
   252f2:	220d      	movs	r2, #13
   252f4:	e7bd      	b.n	25272 <rpc_transport_input+0x192>
   252f6:	220e      	movs	r2, #14
   252f8:	e7bb      	b.n	25272 <rpc_transport_input+0x192>
   252fa:	bf00      	nop
   252fc:	20023318 	.word	0x20023318
   25300:	200233b8 	.word	0x200233b8
   25304:	200233d0 	.word	0x200233d0
   25308:	20023450 	.word	0x20023450

0002530c <rpc_transport_register>:
   2530c:	b4f0      	push	{r4, r5, r6, r7}
   2530e:	2900      	cmp	r1, #0
   25310:	d052      	beq.n	253b8 <rpc_transport_register+0xac>
   25312:	2800      	cmp	r0, #0
   25314:	d050      	beq.n	253b8 <rpc_transport_register+0xac>
   25316:	6883      	ldr	r3, [r0, #8]
   25318:	2b00      	cmp	r3, #0
   2531a:	d04d      	beq.n	253b8 <rpc_transport_register+0xac>
   2531c:	6903      	ldr	r3, [r0, #16]
   2531e:	2b00      	cmp	r3, #0
   25320:	d04a      	beq.n	253b8 <rpc_transport_register+0xac>
   25322:	6843      	ldr	r3, [r0, #4]
   25324:	2b00      	cmp	r3, #0
   25326:	d047      	beq.n	253b8 <rpc_transport_register+0xac>
   25328:	68c3      	ldr	r3, [r0, #12]
   2532a:	2b00      	cmp	r3, #0
   2532c:	d044      	beq.n	253b8 <rpc_transport_register+0xac>
   2532e:	6803      	ldr	r3, [r0, #0]
   25330:	2b00      	cmp	r3, #0
   25332:	d041      	beq.n	253b8 <rpc_transport_register+0xac>
   25334:	6943      	ldr	r3, [r0, #20]
   25336:	2b00      	cmp	r3, #0
   25338:	d03e      	beq.n	253b8 <rpc_transport_register+0xac>
   2533a:	2601      	movs	r6, #1
   2533c:	2500      	movs	r5, #0
   2533e:	4604      	mov	r4, r0
   25340:	460f      	mov	r7, r1
   25342:	4a1f      	ldr	r2, [pc, #124]	; (253c0 <rpc_transport_register+0xb4>)
   25344:	4b1f      	ldr	r3, [pc, #124]	; (253c4 <rpc_transport_register+0xb8>)
   25346:	f8df c080 	ldr.w	ip, [pc, #128]	; 253c8 <rpc_transport_register+0xbc>
   2534a:	7416      	strb	r6, [r2, #16]
   2534c:	7616      	strb	r6, [r2, #24]
   2534e:	f882 6020 	strb.w	r6, [r2, #32]
   25352:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   25356:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   2535a:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   2535e:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   25362:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   25366:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   2536a:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   2536e:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   25372:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   25376:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   2537a:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   2537e:	611d      	str	r5, [r3, #16]
   25380:	619d      	str	r5, [r3, #24]
   25382:	621d      	str	r5, [r3, #32]
   25384:	629d      	str	r5, [r3, #40]	; 0x28
   25386:	631d      	str	r5, [r3, #48]	; 0x30
   25388:	639d      	str	r5, [r3, #56]	; 0x38
   2538a:	641d      	str	r5, [r3, #64]	; 0x40
   2538c:	649d      	str	r5, [r3, #72]	; 0x48
   2538e:	651d      	str	r5, [r3, #80]	; 0x50
   25390:	659d      	str	r5, [r3, #88]	; 0x58
   25392:	661d      	str	r5, [r3, #96]	; 0x60
   25394:	669d      	str	r5, [r3, #104]	; 0x68
   25396:	671d      	str	r5, [r3, #112]	; 0x70
   25398:	679d      	str	r5, [r3, #120]	; 0x78
   2539a:	7016      	strb	r6, [r2, #0]
   2539c:	7216      	strb	r6, [r2, #8]
   2539e:	601d      	str	r5, [r3, #0]
   253a0:	609d      	str	r5, [r3, #8]
   253a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   253a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   253a8:	e894 0003 	ldmia.w	r4, {r0, r1}
   253ac:	e88c 0003 	stmia.w	ip, {r0, r1}
   253b0:	603e      	str	r6, [r7, #0]
   253b2:	4628      	mov	r0, r5
   253b4:	bcf0      	pop	{r4, r5, r6, r7}
   253b6:	4770      	bx	lr
   253b8:	250e      	movs	r5, #14
   253ba:	4628      	mov	r0, r5
   253bc:	bcf0      	pop	{r4, r5, r6, r7}
   253be:	4770      	bx	lr
   253c0:	20023450 	.word	0x20023450
   253c4:	200233d0 	.word	0x200233d0
   253c8:	200233b8 	.word	0x200233b8

000253cc <rpc_transport_unregister>:
   253cc:	2800      	cmp	r0, #0
   253ce:	d03a      	beq.n	25446 <rpc_transport_unregister+0x7a>
   253d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   253d4:	4680      	mov	r8, r0
   253d6:	4c1d      	ldr	r4, [pc, #116]	; (2544c <rpc_transport_unregister+0x80>)
   253d8:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   253dc:	68a3      	ldr	r3, [r4, #8]
   253de:	3410      	adds	r4, #16
   253e0:	b103      	cbz	r3, 253e4 <rpc_transport_unregister+0x18>
   253e2:	4798      	blx	r3
   253e4:	42ac      	cmp	r4, r5
   253e6:	d1f9      	bne.n	253dc <rpc_transport_unregister+0x10>
   253e8:	f04f 0901 	mov.w	r9, #1
   253ec:	2600      	movs	r6, #0
   253ee:	4c18      	ldr	r4, [pc, #96]	; (25450 <rpc_transport_unregister+0x84>)
   253f0:	4d18      	ldr	r5, [pc, #96]	; (25454 <rpc_transport_unregister+0x88>)
   253f2:	f8df a064 	ldr.w	sl, [pc, #100]	; 25458 <rpc_transport_unregister+0x8c>
   253f6:	f104 0780 	add.w	r7, r4, #128	; 0x80
   253fa:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   253fe:	2b01      	cmp	r3, #1
   25400:	d005      	beq.n	2540e <rpc_transport_unregister+0x42>
   25402:	f8da 300c 	ldr.w	r3, [sl, #12]
   25406:	6820      	ldr	r0, [r4, #0]
   25408:	4798      	blx	r3
   2540a:	f804 9c04 	strb.w	r9, [r4, #-4]
   2540e:	f855 0c04 	ldr.w	r0, [r5, #-4]
   25412:	3408      	adds	r4, #8
   25414:	b128      	cbz	r0, 25422 <rpc_transport_unregister+0x56>
   25416:	f8da 3010 	ldr.w	r3, [sl, #16]
   2541a:	4798      	blx	r3
   2541c:	802e      	strh	r6, [r5, #0]
   2541e:	f845 6c04 	str.w	r6, [r5, #-4]
   25422:	42bc      	cmp	r4, r7
   25424:	f105 0508 	add.w	r5, r5, #8
   25428:	d1e7      	bne.n	253fa <rpc_transport_unregister+0x2e>
   2542a:	f8d8 0000 	ldr.w	r0, [r8]
   2542e:	2218      	movs	r2, #24
   25430:	3801      	subs	r0, #1
   25432:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   25436:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   2543a:	2100      	movs	r1, #0
   2543c:	f005 fa52 	bl	2a8e4 <memset>
   25440:	2000      	movs	r0, #0
   25442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25446:	200e      	movs	r0, #14
   25448:	4770      	bx	lr
   2544a:	bf00      	nop
   2544c:	20023318 	.word	0x20023318
   25450:	20023454 	.word	0x20023454
   25454:	200233d4 	.word	0x200233d4
   25458:	200233b8 	.word	0x200233b8

0002545c <rpc_message_send>:
   2545c:	b168      	cbz	r0, 2547a <rpc_message_send+0x1e>
   2545e:	b171      	cbz	r1, 2547e <rpc_message_send+0x22>
   25460:	4a09      	ldr	r2, [pc, #36]	; (25488 <rpc_message_send+0x2c>)
   25462:	6853      	ldr	r3, [r2, #4]
   25464:	b16b      	cbz	r3, 25482 <rpc_message_send+0x26>
   25466:	684b      	ldr	r3, [r1, #4]
   25468:	8008      	strh	r0, [r1, #0]
   2546a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2546e:	f043 0302 	orr.w	r3, r3, #2
   25472:	6812      	ldr	r2, [r2, #0]
   25474:	604b      	str	r3, [r1, #4]
   25476:	4608      	mov	r0, r1
   25478:	4710      	bx	r2
   2547a:	2007      	movs	r0, #7
   2547c:	4770      	bx	lr
   2547e:	200e      	movs	r0, #14
   25480:	4770      	bx	lr
   25482:	2008      	movs	r0, #8
   25484:	4770      	bx	lr
   25486:	bf00      	nop
   25488:	200233b8 	.word	0x200233b8

0002548c <rpc_message_alloc>:
   2548c:	b35a      	cbz	r2, 254e6 <rpc_message_alloc+0x5a>
   2548e:	b1e8      	cbz	r0, 254cc <rpc_message_alloc+0x40>
   25490:	2300      	movs	r3, #0
   25492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25496:	f8df 8058 	ldr.w	r8, [pc, #88]	; 254f0 <rpc_message_alloc+0x64>
   2549a:	6013      	str	r3, [r2, #0]
   2549c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   254a0:	b31b      	cbz	r3, 254ea <rpc_message_alloc+0x5e>
   254a2:	4616      	mov	r6, r2
   254a4:	460c      	mov	r4, r1
   254a6:	4605      	mov	r5, r0
   254a8:	4798      	blx	r3
   254aa:	4607      	mov	r7, r0
   254ac:	b1c8      	cbz	r0, 254e2 <rpc_message_alloc+0x56>
   254ae:	60c4      	str	r4, [r0, #12]
   254b0:	b174      	cbz	r4, 254d0 <rpc_message_alloc+0x44>
   254b2:	4620      	mov	r0, r4
   254b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   254b8:	4798      	blx	r3
   254ba:	60b8      	str	r0, [r7, #8]
   254bc:	b960      	cbnz	r0, 254d8 <rpc_message_alloc+0x4c>
   254be:	4638      	mov	r0, r7
   254c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
   254c4:	4798      	blx	r3
   254c6:	2004      	movs	r0, #4
   254c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   254cc:	2007      	movs	r0, #7
   254ce:	4770      	bx	lr
   254d0:	7204      	strb	r4, [r0, #8]
   254d2:	7244      	strb	r4, [r0, #9]
   254d4:	7284      	strb	r4, [r0, #10]
   254d6:	72c4      	strb	r4, [r0, #11]
   254d8:	803d      	strh	r5, [r7, #0]
   254da:	6037      	str	r7, [r6, #0]
   254dc:	2000      	movs	r0, #0
   254de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   254e2:	2004      	movs	r0, #4
   254e4:	e7f0      	b.n	254c8 <rpc_message_alloc+0x3c>
   254e6:	200e      	movs	r0, #14
   254e8:	4770      	bx	lr
   254ea:	2008      	movs	r0, #8
   254ec:	e7ec      	b.n	254c8 <rpc_message_alloc+0x3c>
   254ee:	bf00      	nop
   254f0:	200233b8 	.word	0x200233b8

000254f4 <rpc_message_free>:
   254f4:	2800      	cmp	r0, #0
   254f6:	d03d      	beq.n	25574 <rpc_message_free+0x80>
   254f8:	2900      	cmp	r1, #0
   254fa:	f000 8091 	beq.w	25620 <rpc_message_free+0x12c>
   254fe:	b538      	push	{r3, r4, r5, lr}
   25500:	4c52      	ldr	r4, [pc, #328]	; (2564c <rpc_message_free+0x158>)
   25502:	6863      	ldr	r3, [r4, #4]
   25504:	2b00      	cmp	r3, #0
   25506:	d037      	beq.n	25578 <rpc_message_free+0x84>
   25508:	4a51      	ldr	r2, [pc, #324]	; (25650 <rpc_message_free+0x15c>)
   2550a:	4608      	mov	r0, r1
   2550c:	6853      	ldr	r3, [r2, #4]
   2550e:	4299      	cmp	r1, r3
   25510:	d034      	beq.n	2557c <rpc_message_free+0x88>
   25512:	68d3      	ldr	r3, [r2, #12]
   25514:	4298      	cmp	r0, r3
   25516:	d03d      	beq.n	25594 <rpc_message_free+0xa0>
   25518:	6953      	ldr	r3, [r2, #20]
   2551a:	4298      	cmp	r0, r3
   2551c:	d03f      	beq.n	2559e <rpc_message_free+0xaa>
   2551e:	69d3      	ldr	r3, [r2, #28]
   25520:	4298      	cmp	r0, r3
   25522:	d041      	beq.n	255a8 <rpc_message_free+0xb4>
   25524:	6a53      	ldr	r3, [r2, #36]	; 0x24
   25526:	4298      	cmp	r0, r3
   25528:	d044      	beq.n	255b4 <rpc_message_free+0xc0>
   2552a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2552c:	4298      	cmp	r0, r3
   2552e:	d047      	beq.n	255c0 <rpc_message_free+0xcc>
   25530:	6b53      	ldr	r3, [r2, #52]	; 0x34
   25532:	4298      	cmp	r0, r3
   25534:	d04a      	beq.n	255cc <rpc_message_free+0xd8>
   25536:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   25538:	4298      	cmp	r0, r3
   2553a:	d04d      	beq.n	255d8 <rpc_message_free+0xe4>
   2553c:	6c53      	ldr	r3, [r2, #68]	; 0x44
   2553e:	4298      	cmp	r0, r3
   25540:	d050      	beq.n	255e4 <rpc_message_free+0xf0>
   25542:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   25544:	4298      	cmp	r0, r3
   25546:	d053      	beq.n	255f0 <rpc_message_free+0xfc>
   25548:	6d53      	ldr	r3, [r2, #84]	; 0x54
   2554a:	4298      	cmp	r0, r3
   2554c:	d056      	beq.n	255fc <rpc_message_free+0x108>
   2554e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   25550:	4298      	cmp	r0, r3
   25552:	d059      	beq.n	25608 <rpc_message_free+0x114>
   25554:	6e53      	ldr	r3, [r2, #100]	; 0x64
   25556:	4298      	cmp	r0, r3
   25558:	d05c      	beq.n	25614 <rpc_message_free+0x120>
   2555a:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   2555c:	4298      	cmp	r0, r3
   2555e:	d061      	beq.n	25624 <rpc_message_free+0x130>
   25560:	6f53      	ldr	r3, [r2, #116]	; 0x74
   25562:	4298      	cmp	r0, r3
   25564:	d064      	beq.n	25630 <rpc_message_free+0x13c>
   25566:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   25568:	4283      	cmp	r3, r0
   2556a:	d067      	beq.n	2563c <rpc_message_free+0x148>
   2556c:	68e3      	ldr	r3, [r4, #12]
   2556e:	4798      	blx	r3
   25570:	2000      	movs	r0, #0
   25572:	bd38      	pop	{r3, r4, r5, pc}
   25574:	2007      	movs	r0, #7
   25576:	4770      	bx	lr
   25578:	2008      	movs	r0, #8
   2557a:	bd38      	pop	{r3, r4, r5, pc}
   2557c:	7811      	ldrb	r1, [r2, #0]
   2557e:	2903      	cmp	r1, #3
   25580:	d1c7      	bne.n	25512 <rpc_message_free+0x1e>
   25582:	2100      	movs	r1, #0
   25584:	2501      	movs	r5, #1
   25586:	4618      	mov	r0, r3
   25588:	68e4      	ldr	r4, [r4, #12]
   2558a:	f802 5031 	strb.w	r5, [r2, r1, lsl #3]
   2558e:	47a0      	blx	r4
   25590:	2000      	movs	r0, #0
   25592:	bd38      	pop	{r3, r4, r5, pc}
   25594:	7a11      	ldrb	r1, [r2, #8]
   25596:	2903      	cmp	r1, #3
   25598:	d1be      	bne.n	25518 <rpc_message_free+0x24>
   2559a:	2101      	movs	r1, #1
   2559c:	e7f2      	b.n	25584 <rpc_message_free+0x90>
   2559e:	7c11      	ldrb	r1, [r2, #16]
   255a0:	2903      	cmp	r1, #3
   255a2:	d1bc      	bne.n	2551e <rpc_message_free+0x2a>
   255a4:	2102      	movs	r1, #2
   255a6:	e7ed      	b.n	25584 <rpc_message_free+0x90>
   255a8:	7e11      	ldrb	r1, [r2, #24]
   255aa:	2903      	cmp	r1, #3
   255ac:	d0ea      	beq.n	25584 <rpc_message_free+0x90>
   255ae:	6a53      	ldr	r3, [r2, #36]	; 0x24
   255b0:	4298      	cmp	r0, r3
   255b2:	d1ba      	bne.n	2552a <rpc_message_free+0x36>
   255b4:	f892 1020 	ldrb.w	r1, [r2, #32]
   255b8:	2903      	cmp	r1, #3
   255ba:	d1b6      	bne.n	2552a <rpc_message_free+0x36>
   255bc:	2104      	movs	r1, #4
   255be:	e7e1      	b.n	25584 <rpc_message_free+0x90>
   255c0:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
   255c4:	2903      	cmp	r1, #3
   255c6:	d1b3      	bne.n	25530 <rpc_message_free+0x3c>
   255c8:	2105      	movs	r1, #5
   255ca:	e7db      	b.n	25584 <rpc_message_free+0x90>
   255cc:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   255d0:	2903      	cmp	r1, #3
   255d2:	d1b0      	bne.n	25536 <rpc_message_free+0x42>
   255d4:	2106      	movs	r1, #6
   255d6:	e7d5      	b.n	25584 <rpc_message_free+0x90>
   255d8:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   255dc:	2903      	cmp	r1, #3
   255de:	d1ad      	bne.n	2553c <rpc_message_free+0x48>
   255e0:	2107      	movs	r1, #7
   255e2:	e7cf      	b.n	25584 <rpc_message_free+0x90>
   255e4:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   255e8:	2903      	cmp	r1, #3
   255ea:	d1aa      	bne.n	25542 <rpc_message_free+0x4e>
   255ec:	2108      	movs	r1, #8
   255ee:	e7c9      	b.n	25584 <rpc_message_free+0x90>
   255f0:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
   255f4:	2903      	cmp	r1, #3
   255f6:	d1a7      	bne.n	25548 <rpc_message_free+0x54>
   255f8:	2109      	movs	r1, #9
   255fa:	e7c3      	b.n	25584 <rpc_message_free+0x90>
   255fc:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
   25600:	2903      	cmp	r1, #3
   25602:	d1a4      	bne.n	2554e <rpc_message_free+0x5a>
   25604:	210a      	movs	r1, #10
   25606:	e7bd      	b.n	25584 <rpc_message_free+0x90>
   25608:	f892 1058 	ldrb.w	r1, [r2, #88]	; 0x58
   2560c:	2903      	cmp	r1, #3
   2560e:	d1a1      	bne.n	25554 <rpc_message_free+0x60>
   25610:	210b      	movs	r1, #11
   25612:	e7b7      	b.n	25584 <rpc_message_free+0x90>
   25614:	f892 1060 	ldrb.w	r1, [r2, #96]	; 0x60
   25618:	2903      	cmp	r1, #3
   2561a:	d19e      	bne.n	2555a <rpc_message_free+0x66>
   2561c:	210c      	movs	r1, #12
   2561e:	e7b1      	b.n	25584 <rpc_message_free+0x90>
   25620:	200e      	movs	r0, #14
   25622:	4770      	bx	lr
   25624:	f892 1068 	ldrb.w	r1, [r2, #104]	; 0x68
   25628:	2903      	cmp	r1, #3
   2562a:	d199      	bne.n	25560 <rpc_message_free+0x6c>
   2562c:	210d      	movs	r1, #13
   2562e:	e7a9      	b.n	25584 <rpc_message_free+0x90>
   25630:	f892 1070 	ldrb.w	r1, [r2, #112]	; 0x70
   25634:	2903      	cmp	r1, #3
   25636:	d196      	bne.n	25566 <rpc_message_free+0x72>
   25638:	210e      	movs	r1, #14
   2563a:	e7a3      	b.n	25584 <rpc_message_free+0x90>
   2563c:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   25640:	2b03      	cmp	r3, #3
   25642:	d193      	bne.n	2556c <rpc_message_free+0x78>
   25644:	4603      	mov	r3, r0
   25646:	210f      	movs	r1, #15
   25648:	e79c      	b.n	25584 <rpc_message_free+0x90>
   2564a:	bf00      	nop
   2564c:	200233b8 	.word	0x200233b8
   25650:	20023450 	.word	0x20023450

00025654 <rpc_message_data_free>:
   25654:	2800      	cmp	r0, #0
   25656:	d03d      	beq.n	256d4 <rpc_message_data_free+0x80>
   25658:	2900      	cmp	r1, #0
   2565a:	f000 808b 	beq.w	25774 <rpc_message_data_free+0x120>
   2565e:	b538      	push	{r3, r4, r5, lr}
   25660:	4a4f      	ldr	r2, [pc, #316]	; (257a0 <rpc_message_data_free+0x14c>)
   25662:	6853      	ldr	r3, [r2, #4]
   25664:	2b00      	cmp	r3, #0
   25666:	d037      	beq.n	256d8 <rpc_message_data_free+0x84>
   25668:	4b4e      	ldr	r3, [pc, #312]	; (257a4 <rpc_message_data_free+0x150>)
   2566a:	681c      	ldr	r4, [r3, #0]
   2566c:	42a1      	cmp	r1, r4
   2566e:	d035      	beq.n	256dc <rpc_message_data_free+0x88>
   25670:	689c      	ldr	r4, [r3, #8]
   25672:	42a1      	cmp	r1, r4
   25674:	d03d      	beq.n	256f2 <rpc_message_data_free+0x9e>
   25676:	691c      	ldr	r4, [r3, #16]
   25678:	42a1      	cmp	r1, r4
   2567a:	d03f      	beq.n	256fc <rpc_message_data_free+0xa8>
   2567c:	699c      	ldr	r4, [r3, #24]
   2567e:	42a1      	cmp	r1, r4
   25680:	d041      	beq.n	25706 <rpc_message_data_free+0xb2>
   25682:	6a1c      	ldr	r4, [r3, #32]
   25684:	42a1      	cmp	r1, r4
   25686:	d043      	beq.n	25710 <rpc_message_data_free+0xbc>
   25688:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   2568a:	42a1      	cmp	r1, r4
   2568c:	d045      	beq.n	2571a <rpc_message_data_free+0xc6>
   2568e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   25690:	42a1      	cmp	r1, r4
   25692:	d047      	beq.n	25724 <rpc_message_data_free+0xd0>
   25694:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   25696:	42a1      	cmp	r1, r4
   25698:	d049      	beq.n	2572e <rpc_message_data_free+0xda>
   2569a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   2569c:	42a1      	cmp	r1, r4
   2569e:	d04b      	beq.n	25738 <rpc_message_data_free+0xe4>
   256a0:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   256a2:	42a1      	cmp	r1, r4
   256a4:	d04e      	beq.n	25744 <rpc_message_data_free+0xf0>
   256a6:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   256a8:	42a1      	cmp	r1, r4
   256aa:	d051      	beq.n	25750 <rpc_message_data_free+0xfc>
   256ac:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   256ae:	42a1      	cmp	r1, r4
   256b0:	d054      	beq.n	2575c <rpc_message_data_free+0x108>
   256b2:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   256b4:	42a1      	cmp	r1, r4
   256b6:	d057      	beq.n	25768 <rpc_message_data_free+0x114>
   256b8:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   256ba:	42a1      	cmp	r1, r4
   256bc:	d05c      	beq.n	25778 <rpc_message_data_free+0x124>
   256be:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   256c0:	42a1      	cmp	r1, r4
   256c2:	d05f      	beq.n	25784 <rpc_message_data_free+0x130>
   256c4:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   256c6:	428c      	cmp	r4, r1
   256c8:	d062      	beq.n	25790 <rpc_message_data_free+0x13c>
   256ca:	4608      	mov	r0, r1
   256cc:	6913      	ldr	r3, [r2, #16]
   256ce:	4798      	blx	r3
   256d0:	2000      	movs	r0, #0
   256d2:	bd38      	pop	{r3, r4, r5, pc}
   256d4:	2007      	movs	r0, #7
   256d6:	4770      	bx	lr
   256d8:	2008      	movs	r0, #8
   256da:	bd38      	pop	{r3, r4, r5, pc}
   256dc:	889c      	ldrh	r4, [r3, #4]
   256de:	4284      	cmp	r4, r0
   256e0:	d1c6      	bne.n	25670 <rpc_message_data_free+0x1c>
   256e2:	2400      	movs	r4, #0
   256e4:	2000      	movs	r0, #0
   256e6:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   256ea:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   256ee:	80a8      	strh	r0, [r5, #4]
   256f0:	e7eb      	b.n	256ca <rpc_message_data_free+0x76>
   256f2:	899c      	ldrh	r4, [r3, #12]
   256f4:	4284      	cmp	r4, r0
   256f6:	d1be      	bne.n	25676 <rpc_message_data_free+0x22>
   256f8:	2401      	movs	r4, #1
   256fa:	e7f3      	b.n	256e4 <rpc_message_data_free+0x90>
   256fc:	8a9c      	ldrh	r4, [r3, #20]
   256fe:	4284      	cmp	r4, r0
   25700:	d1bc      	bne.n	2567c <rpc_message_data_free+0x28>
   25702:	2402      	movs	r4, #2
   25704:	e7ee      	b.n	256e4 <rpc_message_data_free+0x90>
   25706:	8b9c      	ldrh	r4, [r3, #28]
   25708:	4284      	cmp	r4, r0
   2570a:	d1ba      	bne.n	25682 <rpc_message_data_free+0x2e>
   2570c:	2403      	movs	r4, #3
   2570e:	e7e9      	b.n	256e4 <rpc_message_data_free+0x90>
   25710:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   25712:	4284      	cmp	r4, r0
   25714:	d1b8      	bne.n	25688 <rpc_message_data_free+0x34>
   25716:	2404      	movs	r4, #4
   25718:	e7e4      	b.n	256e4 <rpc_message_data_free+0x90>
   2571a:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   2571c:	4284      	cmp	r4, r0
   2571e:	d1b6      	bne.n	2568e <rpc_message_data_free+0x3a>
   25720:	2405      	movs	r4, #5
   25722:	e7df      	b.n	256e4 <rpc_message_data_free+0x90>
   25724:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   25726:	4284      	cmp	r4, r0
   25728:	d1b4      	bne.n	25694 <rpc_message_data_free+0x40>
   2572a:	2406      	movs	r4, #6
   2572c:	e7da      	b.n	256e4 <rpc_message_data_free+0x90>
   2572e:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   25730:	4284      	cmp	r4, r0
   25732:	d1b2      	bne.n	2569a <rpc_message_data_free+0x46>
   25734:	2407      	movs	r4, #7
   25736:	e7d5      	b.n	256e4 <rpc_message_data_free+0x90>
   25738:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   2573c:	4284      	cmp	r4, r0
   2573e:	d1af      	bne.n	256a0 <rpc_message_data_free+0x4c>
   25740:	2408      	movs	r4, #8
   25742:	e7cf      	b.n	256e4 <rpc_message_data_free+0x90>
   25744:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   25748:	4284      	cmp	r4, r0
   2574a:	d1ac      	bne.n	256a6 <rpc_message_data_free+0x52>
   2574c:	2409      	movs	r4, #9
   2574e:	e7c9      	b.n	256e4 <rpc_message_data_free+0x90>
   25750:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   25754:	4284      	cmp	r4, r0
   25756:	d1a9      	bne.n	256ac <rpc_message_data_free+0x58>
   25758:	240a      	movs	r4, #10
   2575a:	e7c3      	b.n	256e4 <rpc_message_data_free+0x90>
   2575c:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   25760:	4284      	cmp	r4, r0
   25762:	d1a6      	bne.n	256b2 <rpc_message_data_free+0x5e>
   25764:	240b      	movs	r4, #11
   25766:	e7bd      	b.n	256e4 <rpc_message_data_free+0x90>
   25768:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   2576c:	4284      	cmp	r4, r0
   2576e:	d1a3      	bne.n	256b8 <rpc_message_data_free+0x64>
   25770:	240c      	movs	r4, #12
   25772:	e7b7      	b.n	256e4 <rpc_message_data_free+0x90>
   25774:	200e      	movs	r0, #14
   25776:	4770      	bx	lr
   25778:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   2577c:	4284      	cmp	r4, r0
   2577e:	d19e      	bne.n	256be <rpc_message_data_free+0x6a>
   25780:	240d      	movs	r4, #13
   25782:	e7af      	b.n	256e4 <rpc_message_data_free+0x90>
   25784:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   25788:	4284      	cmp	r4, r0
   2578a:	d19b      	bne.n	256c4 <rpc_message_data_free+0x70>
   2578c:	240e      	movs	r4, #14
   2578e:	e7a9      	b.n	256e4 <rpc_message_data_free+0x90>
   25790:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   25794:	4284      	cmp	r4, r0
   25796:	bf08      	it	eq
   25798:	240f      	moveq	r4, #15
   2579a:	d196      	bne.n	256ca <rpc_message_data_free+0x76>
   2579c:	e7a2      	b.n	256e4 <rpc_message_data_free+0x90>
   2579e:	bf00      	nop
   257a0:	200233b8 	.word	0x200233b8
   257a4:	200233d0 	.word	0x200233d0

000257a8 <packet_free_cb>:
   257a8:	b510      	push	{r4, lr}
   257aa:	4604      	mov	r4, r0
   257ac:	6800      	ldr	r0, [r0, #0]
   257ae:	f7fd ff79 	bl	236a4 <rpc_gnss_client_data_free>
   257b2:	68a0      	ldr	r0, [r4, #8]
   257b4:	b118      	cbz	r0, 257be <packet_free_cb+0x16>
   257b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   257ba:	f7f3 bd13 	b.w	191e4 <nrf_free>
   257be:	bd10      	pop	{r4, pc}

000257c0 <rpc_gnss_event_handler>:
   257c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   257c2:	4b55      	ldr	r3, [pc, #340]	; (25918 <rpc_gnss_event_handler+0x158>)
   257c4:	4605      	mov	r5, r0
   257c6:	6800      	ldr	r0, [r0, #0]
   257c8:	881b      	ldrh	r3, [r3, #0]
   257ca:	6802      	ldr	r2, [r0, #0]
   257cc:	4e53      	ldr	r6, [pc, #332]	; (2591c <rpc_gnss_event_handler+0x15c>)
   257ce:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   257d2:	b085      	sub	sp, #20
   257d4:	460c      	mov	r4, r1
   257d6:	6030      	str	r0, [r6, #0]
   257d8:	d02e      	beq.n	25838 <rpc_gnss_event_handler+0x78>
   257da:	f244 0301 	movw	r3, #16385	; 0x4001
   257de:	429c      	cmp	r4, r3
   257e0:	d003      	beq.n	257ea <rpc_gnss_event_handler+0x2a>
   257e2:	f244 0302 	movw	r3, #16386	; 0x4002
   257e6:	429c      	cmp	r4, r3
   257e8:	d107      	bne.n	257fa <rpc_gnss_event_handler+0x3a>
   257ea:	4e4d      	ldr	r6, [pc, #308]	; (25920 <rpc_gnss_event_handler+0x160>)
   257ec:	6833      	ldr	r3, [r6, #0]
   257ee:	075b      	lsls	r3, r3, #29
   257f0:	d406      	bmi.n	25800 <rpc_gnss_event_handler+0x40>
   257f2:	6828      	ldr	r0, [r5, #0]
   257f4:	b108      	cbz	r0, 257fa <rpc_gnss_event_handler+0x3a>
   257f6:	f7fd ff55 	bl	236a4 <rpc_gnss_client_data_free>
   257fa:	2000      	movs	r0, #0
   257fc:	b005      	add	sp, #20
   257fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25800:	2002      	movs	r0, #2
   25802:	f7f3 fcd1 	bl	191a8 <nrf_malloc>
   25806:	4607      	mov	r7, r0
   25808:	2800      	cmp	r0, #0
   2580a:	d063      	beq.n	258d4 <rpc_gnss_event_handler+0x114>
   2580c:	2302      	movs	r3, #2
   2580e:	8004      	strh	r4, [r0, #0]
   25810:	6829      	ldr	r1, [r5, #0]
   25812:	686a      	ldr	r2, [r5, #4]
   25814:	4843      	ldr	r0, [pc, #268]	; (25924 <rpc_gnss_event_handler+0x164>)
   25816:	6800      	ldr	r0, [r0, #0]
   25818:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   2581c:	9303      	str	r3, [sp, #12]
   2581e:	6803      	ldr	r3, [r0, #0]
   25820:	4669      	mov	r1, sp
   25822:	685b      	ldr	r3, [r3, #4]
   25824:	4798      	blx	r3
   25826:	3001      	adds	r0, #1
   25828:	d061      	beq.n	258ee <rpc_gnss_event_handler+0x12e>
   2582a:	2000      	movs	r0, #0
   2582c:	6833      	ldr	r3, [r6, #0]
   2582e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   25832:	6033      	str	r3, [r6, #0]
   25834:	b005      	add	sp, #20
   25836:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25838:	4b39      	ldr	r3, [pc, #228]	; (25920 <rpc_gnss_event_handler+0x160>)
   2583a:	681a      	ldr	r2, [r3, #0]
   2583c:	01d1      	lsls	r1, r2, #7
   2583e:	d50f      	bpl.n	25860 <rpc_gnss_event_handler+0xa0>
   25840:	f242 0202 	movw	r2, #8194	; 0x2002
   25844:	4294      	cmp	r4, r2
   25846:	d10b      	bne.n	25860 <rpc_gnss_event_handler+0xa0>
   25848:	6842      	ldr	r2, [r0, #4]
   2584a:	b91a      	cbnz	r2, 25854 <rpc_gnss_event_handler+0x94>
   2584c:	681a      	ldr	r2, [r3, #0]
   2584e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   25852:	601a      	str	r2, [r3, #0]
   25854:	681a      	ldr	r2, [r3, #0]
   25856:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   2585a:	601a      	str	r2, [r3, #0]
   2585c:	681b      	ldr	r3, [r3, #0]
   2585e:	e01d      	b.n	2589c <rpc_gnss_event_handler+0xdc>
   25860:	681a      	ldr	r2, [r3, #0]
   25862:	0252      	lsls	r2, r2, #9
   25864:	d50e      	bpl.n	25884 <rpc_gnss_event_handler+0xc4>
   25866:	f242 0203 	movw	r2, #8195	; 0x2003
   2586a:	4294      	cmp	r4, r2
   2586c:	d10a      	bne.n	25884 <rpc_gnss_event_handler+0xc4>
   2586e:	6842      	ldr	r2, [r0, #4]
   25870:	b91a      	cbnz	r2, 2587a <rpc_gnss_event_handler+0xba>
   25872:	681a      	ldr	r2, [r3, #0]
   25874:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   25878:	601a      	str	r2, [r3, #0]
   2587a:	681a      	ldr	r2, [r3, #0]
   2587c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
   25880:	601a      	str	r2, [r3, #0]
   25882:	e00b      	b.n	2589c <rpc_gnss_event_handler+0xdc>
   25884:	f242 0201 	movw	r2, #8193	; 0x2001
   25888:	4294      	cmp	r4, r2
   2588a:	d10a      	bne.n	258a2 <rpc_gnss_event_handler+0xe2>
   2588c:	6842      	ldr	r2, [r0, #4]
   2588e:	b92a      	cbnz	r2, 2589c <rpc_gnss_event_handler+0xdc>
   25890:	681a      	ldr	r2, [r3, #0]
   25892:	0c12      	lsrs	r2, r2, #16
   25894:	0412      	lsls	r2, r2, #16
   25896:	f042 0202 	orr.w	r2, r2, #2
   2589a:	601a      	str	r2, [r3, #0]
   2589c:	f7fd ff02 	bl	236a4 <rpc_gnss_client_data_free>
   258a0:	e79b      	b.n	257da <rpc_gnss_event_handler+0x1a>
   258a2:	f242 0204 	movw	r2, #8196	; 0x2004
   258a6:	4294      	cmp	r4, r2
   258a8:	d1f8      	bne.n	2589c <rpc_gnss_event_handler+0xdc>
   258aa:	6842      	ldr	r2, [r0, #4]
   258ac:	bb42      	cbnz	r2, 25900 <rpc_gnss_event_handler+0x140>
   258ae:	681a      	ldr	r2, [r3, #0]
   258b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   258b4:	601a      	str	r2, [r3, #0]
   258b6:	681a      	ldr	r2, [r3, #0]
   258b8:	b292      	uxth	r2, r2
   258ba:	2a03      	cmp	r2, #3
   258bc:	681a      	ldr	r2, [r3, #0]
   258be:	d024      	beq.n	2590a <rpc_gnss_event_handler+0x14a>
   258c0:	b292      	uxth	r2, r2
   258c2:	2a04      	cmp	r2, #4
   258c4:	d1d9      	bne.n	2587a <rpc_gnss_event_handler+0xba>
   258c6:	681a      	ldr	r2, [r3, #0]
   258c8:	0c12      	lsrs	r2, r2, #16
   258ca:	0412      	lsls	r2, r2, #16
   258cc:	f042 0202 	orr.w	r2, r2, #2
   258d0:	601a      	str	r2, [r3, #0]
   258d2:	e7d2      	b.n	2587a <rpc_gnss_event_handler+0xba>
   258d4:	2102      	movs	r1, #2
   258d6:	686b      	ldr	r3, [r5, #4]
   258d8:	682a      	ldr	r2, [r5, #0]
   258da:	4812      	ldr	r0, [pc, #72]	; (25924 <rpc_gnss_event_handler+0x164>)
   258dc:	6800      	ldr	r0, [r0, #0]
   258de:	e9cd 7102 	strd	r7, r1, [sp, #8]
   258e2:	e9cd 2300 	strd	r2, r3, [sp]
   258e6:	6803      	ldr	r3, [r0, #0]
   258e8:	4669      	mov	r1, sp
   258ea:	685b      	ldr	r3, [r3, #4]
   258ec:	4798      	blx	r3
   258ee:	4638      	mov	r0, r7
   258f0:	f7f3 fc78 	bl	191e4 <nrf_free>
   258f4:	6828      	ldr	r0, [r5, #0]
   258f6:	f7fd fed5 	bl	236a4 <rpc_gnss_client_data_free>
   258fa:	2000      	movs	r0, #0
   258fc:	b005      	add	sp, #20
   258fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25900:	681a      	ldr	r2, [r3, #0]
   25902:	b292      	uxth	r2, r2
   25904:	2a03      	cmp	r2, #3
   25906:	d1b8      	bne.n	2587a <rpc_gnss_event_handler+0xba>
   25908:	e7dd      	b.n	258c6 <rpc_gnss_event_handler+0x106>
   2590a:	0c12      	lsrs	r2, r2, #16
   2590c:	0412      	lsls	r2, r2, #16
   2590e:	f042 0204 	orr.w	r2, r2, #4
   25912:	601a      	str	r2, [r3, #0]
   25914:	e7b1      	b.n	2587a <rpc_gnss_event_handler+0xba>
   25916:	bf00      	nop
   25918:	2002788e 	.word	0x2002788e
   2591c:	200234d4 	.word	0x200234d4
   25920:	200234d0 	.word	0x200234d0
   25924:	200234d8 	.word	0x200234d8

00025928 <gnss_interface_read>:
   25928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2592c:	4cd0      	ldr	r4, [pc, #832]	; (25c70 <gnss_interface_read+0x348>)
   2592e:	b0b7      	sub	sp, #220	; 0xdc
   25930:	42a0      	cmp	r0, r4
   25932:	f040 81d1 	bne.w	25cd8 <gnss_interface_read+0x3b0>
   25936:	460e      	mov	r6, r1
   25938:	2900      	cmp	r1, #0
   2593a:	f000 81c7 	beq.w	25ccc <gnss_interface_read+0x3a4>
   2593e:	2ad7      	cmp	r2, #215	; 0xd7
   25940:	f240 81c4 	bls.w	25ccc <gnss_interface_read+0x3a4>
   25944:	4dcb      	ldr	r5, [pc, #812]	; (25c74 <gnss_interface_read+0x34c>)
   25946:	4699      	mov	r9, r3
   25948:	682b      	ldr	r3, [r5, #0]
   2594a:	b29b      	uxth	r3, r3
   2594c:	2b04      	cmp	r3, #4
   2594e:	f040 81c9 	bne.w	25ce4 <gnss_interface_read+0x3bc>
   25952:	2102      	movs	r1, #2
   25954:	f04f 0cb6 	mov.w	ip, #182	; 0xb6
   25958:	4607      	mov	r7, r0
   2595a:	2400      	movs	r4, #0
   2595c:	682b      	ldr	r3, [r5, #0]
   2595e:	f10d 020e 	add.w	r2, sp, #14
   25962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   25966:	602b      	str	r3, [r5, #0]
   25968:	f8df a30c 	ldr.w	sl, [pc, #780]	; 25c78 <gnss_interface_read+0x350>
   2596c:	ab08      	add	r3, sp, #32
   2596e:	f8df 830c 	ldr.w	r8, [pc, #780]	; 25c7c <gnss_interface_read+0x354>
   25972:	f8cd c014 	str.w	ip, [sp, #20]
   25976:	9107      	str	r1, [sp, #28]
   25978:	9304      	str	r3, [sp, #16]
   2597a:	9206      	str	r2, [sp, #24]
   2597c:	ea09 0b01 	and.w	fp, r9, r1
   25980:	f8da 0000 	ldr.w	r0, [sl]
   25984:	464a      	mov	r2, r9
   25986:	6803      	ldr	r3, [r0, #0]
   25988:	a904      	add	r1, sp, #16
   2598a:	689b      	ldr	r3, [r3, #8]
   2598c:	4798      	blx	r3
   2598e:	2800      	cmp	r0, #0
   25990:	da12      	bge.n	259b8 <gnss_interface_read+0x90>
   25992:	f1bb 0f00 	cmp.w	fp, #0
   25996:	f040 8173 	bne.w	25c80 <gnss_interface_read+0x358>
   2599a:	682b      	ldr	r3, [r5, #0]
   2599c:	03d8      	lsls	r0, r3, #15
   2599e:	d4ef      	bmi.n	25980 <gnss_interface_read+0x58>
   259a0:	b10c      	cbz	r4, 259a6 <gnss_interface_read+0x7e>
   259a2:	e7ed      	b.n	25980 <gnss_interface_read+0x58>
   259a4:	b930      	cbnz	r0, 259b4 <gnss_interface_read+0x8c>
   259a6:	4641      	mov	r1, r8
   259a8:	4638      	mov	r0, r7
   259aa:	f7f0 f9d1 	bl	15d50 <bsd_os_timedwait>
   259ae:	682b      	ldr	r3, [r5, #0]
   259b0:	03d9      	lsls	r1, r3, #15
   259b2:	d5f7      	bpl.n	259a4 <gnss_interface_read+0x7c>
   259b4:	4604      	mov	r4, r0
   259b6:	e7e3      	b.n	25980 <gnss_interface_read+0x58>
   259b8:	4603      	mov	r3, r0
   259ba:	f244 0102 	movw	r1, #16386	; 0x4002
   259be:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   259c2:	428a      	cmp	r2, r1
   259c4:	f000 8172 	beq.w	25cac <gnss_interface_read+0x384>
   259c8:	f244 0101 	movw	r1, #16385	; 0x4001
   259cc:	428a      	cmp	r2, r1
   259ce:	f040 817d 	bne.w	25ccc <gnss_interface_read+0x3a4>
   259d2:	e9dd 800a 	ldrd	r8, r0, [sp, #40]	; 0x28
   259d6:	2201      	movs	r2, #1
   259d8:	990c      	ldr	r1, [sp, #48]	; 0x30
   259da:	9f09      	ldr	r7, [sp, #36]	; 0x24
   259dc:	e9c6 0104 	strd	r0, r1, [r6, #16]
   259e0:	e9c6 7802 	strd	r7, r8, [r6, #8]
   259e4:	980d      	ldr	r0, [sp, #52]	; 0x34
   259e6:	990e      	ldr	r1, [sp, #56]	; 0x38
   259e8:	7032      	strb	r2, [r6, #0]
   259ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   259ec:	61b0      	str	r0, [r6, #24]
   259ee:	9810      	ldr	r0, [sp, #64]	; 0x40
   259f0:	61f1      	str	r1, [r6, #28]
   259f2:	6232      	str	r2, [r6, #32]
   259f4:	f89d 105d 	ldrb.w	r1, [sp, #93]	; 0x5d
   259f8:	f8dd 204d 	ldr.w	r2, [sp, #77]	; 0x4d
   259fc:	6270      	str	r0, [r6, #36]	; 0x24
   259fe:	f8dd 0051 	ldr.w	r0, [sp, #81]	; 0x51
   25a02:	f886 1044 	strb.w	r1, [r6, #68]	; 0x44
   25a06:	f8dd 1055 	ldr.w	r1, [sp, #85]	; 0x55
   25a0a:	6372      	str	r2, [r6, #52]	; 0x34
   25a0c:	f8dd 2059 	ldr.w	r2, [sp, #89]	; 0x59
   25a10:	63b0      	str	r0, [r6, #56]	; 0x38
   25a12:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
   25a16:	63f1      	str	r1, [r6, #60]	; 0x3c
   25a18:	6432      	str	r2, [r6, #64]	; 0x40
   25a1a:	f8dd 1046 	ldr.w	r1, [sp, #70]	; 0x46
   25a1e:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   25a22:	8530      	strh	r0, [r6, #40]	; 0x28
   25a24:	f886 202e 	strb.w	r2, [r6, #46]	; 0x2e
   25a28:	f8c6 102a 	str.w	r1, [r6, #42]	; 0x2a
   25a2c:	f89d 404b 	ldrb.w	r4, [sp, #75]	; 0x4b
   25a30:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
   25a34:	9a18      	ldr	r2, [sp, #96]	; 0x60
   25a36:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
   25a3a:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
   25a3e:	f89d 106b 	ldrb.w	r1, [sp, #107]	; 0x6b
   25a42:	f3c2 200f 	ubfx	r0, r2, #8, #16
   25a46:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   25a48:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   25a4c:	8634      	strh	r4, [r6, #48]	; 0x30
   25a4e:	f8a6 004a 	strh.w	r0, [r6, #74]	; 0x4a
   25a52:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
   25a56:	f3c2 220f 	ubfx	r2, r2, #8, #16
   25a5a:	f8a6 1056 	strh.w	r1, [r6, #86]	; 0x56
   25a5e:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
   25a62:	f8a6 2062 	strh.w	r2, [r6, #98]	; 0x62
   25a66:	f8dd 2063 	ldr.w	r2, [sp, #99]	; 0x63
   25a6a:	f8a6 0046 	strh.w	r0, [r6, #70]	; 0x46
   25a6e:	f886 1048 	strb.w	r1, [r6, #72]	; 0x48
   25a72:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
   25a76:	f89d 0067 	ldrb.w	r0, [sp, #103]	; 0x67
   25a7a:	64f2      	str	r2, [r6, #76]	; 0x4c
   25a7c:	f89d 206a 	ldrb.w	r2, [sp, #106]	; 0x6a
   25a80:	f886 0050 	strb.w	r0, [r6, #80]	; 0x50
   25a84:	f8a6 1052 	strh.w	r1, [r6, #82]	; 0x52
   25a88:	f886 2054 	strb.w	r2, [r6, #84]	; 0x54
   25a8c:	f8bd 2072 	ldrh.w	r2, [sp, #114]	; 0x72
   25a90:	f8dd 006d 	ldr.w	r0, [sp, #109]	; 0x6d
   25a94:	f89d 1071 	ldrb.w	r1, [sp, #113]	; 0x71
   25a98:	65b0      	str	r0, [r6, #88]	; 0x58
   25a9a:	f886 105c 	strb.w	r1, [r6, #92]	; 0x5c
   25a9e:	f89d 0074 	ldrb.w	r0, [sp, #116]	; 0x74
   25aa2:	f8dd 1077 	ldr.w	r1, [sp, #119]	; 0x77
   25aa6:	f8a6 205e 	strh.w	r2, [r6, #94]	; 0x5e
   25aaa:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
   25aae:	f886 0060 	strb.w	r0, [r6, #96]	; 0x60
   25ab2:	6671      	str	r1, [r6, #100]	; 0x64
   25ab4:	f886 2068 	strb.w	r2, [r6, #104]	; 0x68
   25ab8:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
   25abc:	f89d 007f 	ldrb.w	r0, [sp, #127]	; 0x7f
   25ac0:	9922      	ldr	r1, [sp, #136]	; 0x88
   25ac2:	f89d 4094 	ldrb.w	r4, [sp, #148]	; 0x94
   25ac6:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   25aca:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   25ace:	f3c1 210f 	ubfx	r1, r1, #8, #16
   25ad2:	f8a6 006e 	strh.w	r0, [r6, #110]	; 0x6e
   25ad6:	f8bd 007c 	ldrh.w	r0, [sp, #124]	; 0x7c
   25ada:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   25ade:	f8a6 107a 	strh.w	r1, [r6, #122]	; 0x7a
   25ae2:	f89d 107e 	ldrb.w	r1, [sp, #126]	; 0x7e
   25ae6:	f8a6 2086 	strh.w	r2, [r6, #134]	; 0x86
   25aea:	f8dd 2081 	ldr.w	r2, [sp, #129]	; 0x81
   25aee:	f8a6 006a 	strh.w	r0, [r6, #106]	; 0x6a
   25af2:	f886 106c 	strb.w	r1, [r6, #108]	; 0x6c
   25af6:	f8bd 1086 	ldrh.w	r1, [sp, #134]	; 0x86
   25afa:	f89d 0085 	ldrb.w	r0, [sp, #133]	; 0x85
   25afe:	6732      	str	r2, [r6, #112]	; 0x70
   25b00:	f89d 2088 	ldrb.w	r2, [sp, #136]	; 0x88
   25b04:	f886 0074 	strb.w	r0, [r6, #116]	; 0x74
   25b08:	f8a6 1076 	strh.w	r1, [r6, #118]	; 0x76
   25b0c:	f886 2078 	strb.w	r2, [r6, #120]	; 0x78
   25b10:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
   25b14:	f8dd 008b 	ldr.w	r0, [sp, #139]	; 0x8b
   25b18:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
   25b1c:	67f0      	str	r0, [r6, #124]	; 0x7c
   25b1e:	f886 1080 	strb.w	r1, [r6, #128]	; 0x80
   25b22:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
   25b26:	f8dd 1095 	ldr.w	r1, [sp, #149]	; 0x95
   25b2a:	f8a6 2082 	strh.w	r2, [r6, #130]	; 0x82
   25b2e:	f89d 2099 	ldrb.w	r2, [sp, #153]	; 0x99
   25b32:	f886 0084 	strb.w	r0, [r6, #132]	; 0x84
   25b36:	f8c6 1088 	str.w	r1, [r6, #136]	; 0x88
   25b3a:	f886 208c 	strb.w	r2, [r6, #140]	; 0x8c
   25b3e:	f8bd 409a 	ldrh.w	r4, [sp, #154]	; 0x9a
   25b42:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   25b44:	f89d 70a8 	ldrb.w	r7, [sp, #168]	; 0xa8
   25b48:	f89d 10a7 	ldrb.w	r1, [sp, #167]	; 0xa7
   25b4c:	f3c2 200f 	ubfx	r0, r2, #8, #16
   25b50:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   25b52:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   25b56:	f8a6 0092 	strh.w	r0, [r6, #146]	; 0x92
   25b5a:	f89d 009c 	ldrb.w	r0, [sp, #156]	; 0x9c
   25b5e:	f8a6 109e 	strh.w	r1, [r6, #158]	; 0x9e
   25b62:	f3c2 220f 	ubfx	r2, r2, #8, #16
   25b66:	f8dd 109f 	ldr.w	r1, [sp, #159]	; 0x9f
   25b6a:	f8a6 408e 	strh.w	r4, [r6, #142]	; 0x8e
   25b6e:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
   25b72:	f886 0090 	strb.w	r0, [r6, #144]	; 0x90
   25b76:	f89d 20a3 	ldrb.w	r2, [sp, #163]	; 0xa3
   25b7a:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	; 0xa4
   25b7e:	f8c6 1094 	str.w	r1, [r6, #148]	; 0x94
   25b82:	f89d 10a6 	ldrb.w	r1, [sp, #166]	; 0xa6
   25b86:	f886 2098 	strb.w	r2, [r6, #152]	; 0x98
   25b8a:	f8dd 20a9 	ldr.w	r2, [sp, #169]	; 0xa9
   25b8e:	f8a6 009a 	strh.w	r0, [r6, #154]	; 0x9a
   25b92:	f886 109c 	strb.w	r1, [r6, #156]	; 0x9c
   25b96:	f8bd 10ae 	ldrh.w	r1, [sp, #174]	; 0xae
   25b9a:	f89d 00ad 	ldrb.w	r0, [sp, #173]	; 0xad
   25b9e:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
   25ba2:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
   25ba6:	f886 00a4 	strb.w	r0, [r6, #164]	; 0xa4
   25baa:	f8a6 10a6 	strh.w	r1, [r6, #166]	; 0xa6
   25bae:	f886 20a8 	strb.w	r2, [r6, #168]	; 0xa8
   25bb2:	f8bd 20b8 	ldrh.w	r2, [sp, #184]	; 0xb8
   25bb6:	f8dd 00b3 	ldr.w	r0, [sp, #179]	; 0xb3
   25bba:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
   25bbe:	f8c6 00ac 	str.w	r0, [r6, #172]	; 0xac
   25bc2:	f886 10b0 	strb.w	r1, [r6, #176]	; 0xb0
   25bc6:	f8a6 20b2 	strh.w	r2, [r6, #178]	; 0xb2
   25bca:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
   25bce:	f89d 00bb 	ldrb.w	r0, [sp, #187]	; 0xbb
   25bd2:	f89d 40d0 	ldrb.w	r4, [sp, #208]	; 0xd0
   25bd6:	9931      	ldr	r1, [sp, #196]	; 0xc4
   25bd8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   25bdc:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
   25be0:	f89d 70ba 	ldrb.w	r7, [sp, #186]	; 0xba
   25be4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   25be8:	f3c1 210f 	ubfx	r1, r1, #8, #16
   25bec:	f8a6 00b6 	strh.w	r0, [r6, #182]	; 0xb6
   25bf0:	f8a6 20ce 	strh.w	r2, [r6, #206]	; 0xce
   25bf4:	f8a6 10c2 	strh.w	r1, [r6, #194]	; 0xc2
   25bf8:	f886 70b4 	strb.w	r7, [r6, #180]	; 0xb4
   25bfc:	f8bd 10c2 	ldrh.w	r1, [sp, #194]	; 0xc2
   25c00:	f89d 00c1 	ldrb.w	r0, [sp, #193]	; 0xc1
   25c04:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
   25c08:	f8dd 40bd 	ldr.w	r4, [sp, #189]	; 0xbd
   25c0c:	f886 00bc 	strb.w	r0, [r6, #188]	; 0xbc
   25c10:	f8a6 10be 	strh.w	r1, [r6, #190]	; 0xbe
   25c14:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
   25c18:	f886 20c0 	strb.w	r2, [r6, #192]	; 0xc0
   25c1c:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
   25c20:	f8dd 00c7 	ldr.w	r0, [sp, #199]	; 0xc7
   25c24:	f89d 10cb 	ldrb.w	r1, [sp, #203]	; 0xcb
   25c28:	f8c6 00c4 	str.w	r0, [r6, #196]	; 0xc4
   25c2c:	f886 10c8 	strb.w	r1, [r6, #200]	; 0xc8
   25c30:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
   25c34:	f8dd 10d1 	ldr.w	r1, [sp, #209]	; 0xd1
   25c38:	f8a6 20ca 	strh.w	r2, [r6, #202]	; 0xca
   25c3c:	f89d 20d5 	ldrb.w	r2, [sp, #213]	; 0xd5
   25c40:	f886 00cc 	strb.w	r0, [r6, #204]	; 0xcc
   25c44:	f8c6 10d0 	str.w	r1, [r6, #208]	; 0xd0
   25c48:	f886 20d4 	strb.w	r2, [r6, #212]	; 0xd4
   25c4c:	f8da 0000 	ldr.w	r0, [sl]
   25c50:	9301      	str	r3, [sp, #4]
   25c52:	6802      	ldr	r2, [r0, #0]
   25c54:	68d2      	ldr	r2, [r2, #12]
   25c56:	4790      	blx	r2
   25c58:	2800      	cmp	r0, #0
   25c5a:	9b01      	ldr	r3, [sp, #4]
   25c5c:	dd03      	ble.n	25c66 <gnss_interface_read+0x33e>
   25c5e:	682a      	ldr	r2, [r5, #0]
   25c60:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   25c64:	602a      	str	r2, [r5, #0]
   25c66:	4618      	mov	r0, r3
   25c68:	b037      	add	sp, #220	; 0xdc
   25c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c6e:	bf00      	nop
   25c70:	49765443 	.word	0x49765443
   25c74:	200234d0 	.word	0x200234d0
   25c78:	200234d8 	.word	0x200234d8
   25c7c:	2002d87c 	.word	0x2002d87c
   25c80:	1c42      	adds	r2, r0, #1
   25c82:	4603      	mov	r3, r0
   25c84:	f47f ae99 	bne.w	259ba <gnss_interface_read+0x92>
   25c88:	9001      	str	r0, [sp, #4]
   25c8a:	b93c      	cbnz	r4, 25c9c <gnss_interface_read+0x374>
   25c8c:	2023      	movs	r0, #35	; 0x23
   25c8e:	f009 f842 	bl	2ed16 <bsd_os_errno_set>
   25c92:	9b01      	ldr	r3, [sp, #4]
   25c94:	4618      	mov	r0, r3
   25c96:	b037      	add	sp, #220	; 0xdc
   25c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c9c:	4620      	mov	r0, r4
   25c9e:	f009 f83a 	bl	2ed16 <bsd_os_errno_set>
   25ca2:	9b01      	ldr	r3, [sp, #4]
   25ca4:	4618      	mov	r0, r3
   25ca6:	b037      	add	sp, #220	; 0xdc
   25ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25cac:	a808      	add	r0, sp, #32
   25cae:	f005 f805 	bl	2acbc <strlen>
   25cb2:	2202      	movs	r2, #2
   25cb4:	3001      	adds	r0, #1
   25cb6:	b284      	uxth	r4, r0
   25cb8:	f806 2b08 	strb.w	r2, [r6], #8
   25cbc:	a908      	add	r1, sp, #32
   25cbe:	4630      	mov	r0, r6
   25cc0:	4622      	mov	r2, r4
   25cc2:	f7e7 ff89 	bl	dbd8 <memcpy>
   25cc6:	f104 0308 	add.w	r3, r4, #8
   25cca:	e7bf      	b.n	25c4c <gnss_interface_read+0x324>
   25ccc:	2016      	movs	r0, #22
   25cce:	f009 f822 	bl	2ed16 <bsd_os_errno_set>
   25cd2:	f04f 33ff 	mov.w	r3, #4294967295
   25cd6:	e7c6      	b.n	25c66 <gnss_interface_read+0x33e>
   25cd8:	2009      	movs	r0, #9
   25cda:	f009 f81c 	bl	2ed16 <bsd_os_errno_set>
   25cde:	f04f 33ff 	mov.w	r3, #4294967295
   25ce2:	e7c0      	b.n	25c66 <gnss_interface_read+0x33e>
   25ce4:	2039      	movs	r0, #57	; 0x39
   25ce6:	f009 f816 	bl	2ed16 <bsd_os_errno_set>
   25cea:	f04f 33ff 	mov.w	r3, #4294967295
   25cee:	e7ba      	b.n	25c66 <gnss_interface_read+0x33e>

00025cf0 <gnss_interface_setopt>:
   25cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25cf4:	f241 0402 	movw	r4, #4098	; 0x1002
   25cf8:	4222      	tst	r2, r4
   25cfa:	b086      	sub	sp, #24
   25cfc:	4d94      	ldr	r5, [pc, #592]	; (25f50 <gnss_interface_setopt+0x260>)
   25cfe:	d004      	beq.n	25d0a <gnss_interface_setopt+0x1a>
   25d00:	682c      	ldr	r4, [r5, #0]
   25d02:	b2a4      	uxth	r4, r4
   25d04:	2c02      	cmp	r4, #2
   25d06:	f040 80f6 	bne.w	25ef6 <gnss_interface_setopt+0x206>
   25d0a:	682c      	ldr	r4, [r5, #0]
   25d0c:	0264      	lsls	r4, r4, #9
   25d0e:	f100 8119 	bmi.w	25f44 <gnss_interface_setopt+0x254>
   25d12:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   25d16:	f040 8109 	bne.w	25f2c <gnss_interface_setopt+0x23c>
   25d1a:	498e      	ldr	r1, [pc, #568]	; (25f54 <gnss_interface_setopt+0x264>)
   25d1c:	4288      	cmp	r0, r1
   25d1e:	f040 810b 	bne.w	25f38 <gnss_interface_setopt+0x248>
   25d22:	3a01      	subs	r2, #1
   25d24:	2a07      	cmp	r2, #7
   25d26:	f200 80de 	bhi.w	25ee6 <gnss_interface_setopt+0x1f6>
   25d2a:	e8df f002 	tbb	[pc, r2]
   25d2e:	c077      	.short	0xc077
   25d30:	9a8f83cc 	.word	0x9a8f83cc
   25d34:	04a6      	.short	0x04a6
   25d36:	682b      	ldr	r3, [r5, #0]
   25d38:	b29b      	uxth	r3, r3
   25d3a:	2b04      	cmp	r3, #4
   25d3c:	f040 80db 	bne.w	25ef6 <gnss_interface_setopt+0x206>
   25d40:	f241 0604 	movw	r6, #4100	; 0x1004
   25d44:	2300      	movs	r3, #0
   25d46:	4637      	mov	r7, r6
   25d48:	f88d 3008 	strb.w	r3, [sp, #8]
   25d4c:	f88d 3009 	strb.w	r3, [sp, #9]
   25d50:	f88d 300a 	strb.w	r3, [sp, #10]
   25d54:	f88d 300b 	strb.w	r3, [sp, #11]
   25d58:	f88d 300c 	strb.w	r3, [sp, #12]
   25d5c:	682b      	ldr	r3, [r5, #0]
   25d5e:	2111      	movs	r1, #17
   25d60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   25d64:	4668      	mov	r0, sp
   25d66:	602b      	str	r3, [r5, #0]
   25d68:	f7fd fc6a 	bl	23640 <rpc_gnss_client_request_alloc>
   25d6c:	4604      	mov	r4, r0
   25d6e:	9800      	ldr	r0, [sp, #0]
   25d70:	2c00      	cmp	r4, #0
   25d72:	f040 80c6 	bne.w	25f02 <gnss_interface_setopt+0x212>
   25d76:	2800      	cmp	r0, #0
   25d78:	f000 80c3 	beq.w	25f02 <gnss_interface_setopt+0x212>
   25d7c:	2211      	movs	r2, #17
   25d7e:	f04f 0876 	mov.w	r8, #118	; 0x76
   25d82:	f04f 0e49 	mov.w	lr, #73	; 0x49
   25d86:	f04f 0a43 	mov.w	sl, #67	; 0x43
   25d8a:	f04f 0954 	mov.w	r9, #84	; 0x54
   25d8e:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 25f5c <gnss_interface_setopt+0x26c>
   25d92:	a906      	add	r1, sp, #24
   25d94:	f8bc 3000 	ldrh.w	r3, [ip]
   25d98:	f880 800e 	strb.w	r8, [r0, #14]
   25d9c:	3301      	adds	r3, #1
   25d9e:	b29b      	uxth	r3, r3
   25da0:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   25da4:	f841 6d14 	str.w	r6, [r1, #-20]!
   25da8:	7144      	strb	r4, [r0, #5]
   25daa:	7184      	strb	r4, [r0, #6]
   25dac:	71c4      	strb	r4, [r0, #7]
   25dae:	7204      	strb	r4, [r0, #8]
   25db0:	7244      	strb	r4, [r0, #9]
   25db2:	7284      	strb	r4, [r0, #10]
   25db4:	72c4      	strb	r4, [r0, #11]
   25db6:	7102      	strb	r2, [r0, #4]
   25db8:	f880 a00c 	strb.w	sl, [r0, #12]
   25dbc:	f880 900d 	strb.w	r9, [r0, #13]
   25dc0:	f880 e00f 	strb.w	lr, [r0, #15]
   25dc4:	f8df 8198 	ldr.w	r8, [pc, #408]	; 25f60 <gnss_interface_setopt+0x270>
   25dc8:	6800      	ldr	r0, [r0, #0]
   25dca:	f8ac 3000 	strh.w	r3, [ip]
   25dce:	f7e7 ff03 	bl	dbd8 <memcpy>
   25dd2:	4639      	mov	r1, r7
   25dd4:	9800      	ldr	r0, [sp, #0]
   25dd6:	f8c8 4000 	str.w	r4, [r8]
   25dda:	f7fd fc45 	bl	23668 <rpc_gnss_client_request_send>
   25dde:	2800      	cmp	r0, #0
   25de0:	f040 809a 	bne.w	25f18 <gnss_interface_setopt+0x228>
   25de4:	4f5c      	ldr	r7, [pc, #368]	; (25f58 <gnss_interface_setopt+0x268>)
   25de6:	4e5b      	ldr	r6, [pc, #364]	; (25f54 <gnss_interface_setopt+0x264>)
   25de8:	4639      	mov	r1, r7
   25dea:	4630      	mov	r0, r6
   25dec:	f7ef ffb0 	bl	15d50 <bsd_os_timedwait>
   25df0:	682c      	ldr	r4, [r5, #0]
   25df2:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   25df6:	d1f7      	bne.n	25de8 <gnss_interface_setopt+0xf8>
   25df8:	f8d8 0000 	ldr.w	r0, [r8]
   25dfc:	b118      	cbz	r0, 25e06 <gnss_interface_setopt+0x116>
   25dfe:	f7fd fc51 	bl	236a4 <rpc_gnss_client_data_free>
   25e02:	f8c8 4000 	str.w	r4, [r8]
   25e06:	682b      	ldr	r3, [r5, #0]
   25e08:	021b      	lsls	r3, r3, #8
   25e0a:	d566      	bpl.n	25eda <gnss_interface_setopt+0x1ea>
   25e0c:	2000      	movs	r0, #0
   25e0e:	682b      	ldr	r3, [r5, #0]
   25e10:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   25e14:	602b      	str	r3, [r5, #0]
   25e16:	b006      	add	sp, #24
   25e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25e1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   25e1e:	2a02      	cmp	r2, #2
   25e20:	d161      	bne.n	25ee6 <gnss_interface_setopt+0x1f6>
   25e22:	2208      	movs	r2, #8
   25e24:	f241 0603 	movw	r6, #4099	; 0x1003
   25e28:	881b      	ldrh	r3, [r3, #0]
   25e2a:	9202      	str	r2, [sp, #8]
   25e2c:	f8ad 300f 	strh.w	r3, [sp, #15]
   25e30:	4637      	mov	r7, r6
   25e32:	e793      	b.n	25d5c <gnss_interface_setopt+0x6c>
   25e34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   25e36:	2a02      	cmp	r2, #2
   25e38:	d155      	bne.n	25ee6 <gnss_interface_setopt+0x1f6>
   25e3a:	2220      	movs	r2, #32
   25e3c:	f241 0603 	movw	r6, #4099	; 0x1003
   25e40:	881b      	ldrh	r3, [r3, #0]
   25e42:	9202      	str	r2, [sp, #8]
   25e44:	f8ad 3013 	strh.w	r3, [sp, #19]
   25e48:	4637      	mov	r7, r6
   25e4a:	e787      	b.n	25d5c <gnss_interface_setopt+0x6c>
   25e4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   25e4e:	2a01      	cmp	r2, #1
   25e50:	d149      	bne.n	25ee6 <gnss_interface_setopt+0x1f6>
   25e52:	f241 0603 	movw	r6, #4099	; 0x1003
   25e56:	781b      	ldrb	r3, [r3, #0]
   25e58:	9202      	str	r2, [sp, #8]
   25e5a:	f88d 300c 	strb.w	r3, [sp, #12]
   25e5e:	4637      	mov	r7, r6
   25e60:	e77c      	b.n	25d5c <gnss_interface_setopt+0x6c>
   25e62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   25e64:	2a01      	cmp	r2, #1
   25e66:	d13e      	bne.n	25ee6 <gnss_interface_setopt+0x1f6>
   25e68:	2202      	movs	r2, #2
   25e6a:	f241 0603 	movw	r6, #4099	; 0x1003
   25e6e:	781b      	ldrb	r3, [r3, #0]
   25e70:	9202      	str	r2, [sp, #8]
   25e72:	f88d 300d 	strb.w	r3, [sp, #13]
   25e76:	4637      	mov	r7, r6
   25e78:	e770      	b.n	25d5c <gnss_interface_setopt+0x6c>
   25e7a:	682b      	ldr	r3, [r5, #0]
   25e7c:	b29b      	uxth	r3, r3
   25e7e:	2b02      	cmp	r3, #2
   25e80:	d139      	bne.n	25ef6 <gnss_interface_setopt+0x206>
   25e82:	2200      	movs	r2, #0
   25e84:	2101      	movs	r1, #1
   25e86:	f241 0604 	movw	r6, #4100	; 0x1004
   25e8a:	682b      	ldr	r3, [r5, #0]
   25e8c:	f88d 1008 	strb.w	r1, [sp, #8]
   25e90:	0c1b      	lsrs	r3, r3, #16
   25e92:	041b      	lsls	r3, r3, #16
   25e94:	f043 0303 	orr.w	r3, r3, #3
   25e98:	602b      	str	r3, [r5, #0]
   25e9a:	f88d 2009 	strb.w	r2, [sp, #9]
   25e9e:	f88d 200a 	strb.w	r2, [sp, #10]
   25ea2:	f88d 200b 	strb.w	r2, [sp, #11]
   25ea6:	f88d 200c 	strb.w	r2, [sp, #12]
   25eaa:	4637      	mov	r7, r6
   25eac:	e756      	b.n	25d5c <gnss_interface_setopt+0x6c>
   25eae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   25eb0:	2a02      	cmp	r2, #2
   25eb2:	d118      	bne.n	25ee6 <gnss_interface_setopt+0x1f6>
   25eb4:	2210      	movs	r2, #16
   25eb6:	f241 0603 	movw	r6, #4099	; 0x1003
   25eba:	881b      	ldrh	r3, [r3, #0]
   25ebc:	9202      	str	r2, [sp, #8]
   25ebe:	f8ad 3011 	strh.w	r3, [sp, #17]
   25ec2:	4637      	mov	r7, r6
   25ec4:	e74a      	b.n	25d5c <gnss_interface_setopt+0x6c>
   25ec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   25ec8:	2a01      	cmp	r2, #1
   25eca:	d10c      	bne.n	25ee6 <gnss_interface_setopt+0x1f6>
   25ecc:	781b      	ldrb	r3, [r3, #0]
   25ece:	2b01      	cmp	r3, #1
   25ed0:	d109      	bne.n	25ee6 <gnss_interface_setopt+0x1f6>
   25ed2:	f241 0603 	movw	r6, #4099	; 0x1003
   25ed6:	4637      	mov	r7, r6
   25ed8:	e740      	b.n	25d5c <gnss_interface_setopt+0x6c>
   25eda:	200e      	movs	r0, #14
   25edc:	f008 ff1b 	bl	2ed16 <bsd_os_errno_set>
   25ee0:	f04f 30ff 	mov.w	r0, #4294967295
   25ee4:	e793      	b.n	25e0e <gnss_interface_setopt+0x11e>
   25ee6:	2016      	movs	r0, #22
   25ee8:	f008 ff15 	bl	2ed16 <bsd_os_errno_set>
   25eec:	f04f 30ff 	mov.w	r0, #4294967295
   25ef0:	b006      	add	sp, #24
   25ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25ef6:	200e      	movs	r0, #14
   25ef8:	f008 ff0d 	bl	2ed16 <bsd_os_errno_set>
   25efc:	f04f 30ff 	mov.w	r0, #4294967295
   25f00:	e789      	b.n	25e16 <gnss_interface_setopt+0x126>
   25f02:	6803      	ldr	r3, [r0, #0]
   25f04:	b11b      	cbz	r3, 25f0e <gnss_interface_setopt+0x21e>
   25f06:	4618      	mov	r0, r3
   25f08:	f7fd fbcc 	bl	236a4 <rpc_gnss_client_data_free>
   25f0c:	9800      	ldr	r0, [sp, #0]
   25f0e:	f7fd fbc1 	bl	23694 <rpc_gnss_client_message_free>
   25f12:	2023      	movs	r0, #35	; 0x23
   25f14:	f008 feff 	bl	2ed16 <bsd_os_errno_set>
   25f18:	682b      	ldr	r3, [r5, #0]
   25f1a:	200e      	movs	r0, #14
   25f1c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   25f20:	602b      	str	r3, [r5, #0]
   25f22:	f008 fef8 	bl	2ed16 <bsd_os_errno_set>
   25f26:	f04f 30ff 	mov.w	r0, #4294967295
   25f2a:	e774      	b.n	25e16 <gnss_interface_setopt+0x126>
   25f2c:	202a      	movs	r0, #42	; 0x2a
   25f2e:	f008 fef2 	bl	2ed16 <bsd_os_errno_set>
   25f32:	f04f 30ff 	mov.w	r0, #4294967295
   25f36:	e76e      	b.n	25e16 <gnss_interface_setopt+0x126>
   25f38:	2009      	movs	r0, #9
   25f3a:	f008 feec 	bl	2ed16 <bsd_os_errno_set>
   25f3e:	f04f 30ff 	mov.w	r0, #4294967295
   25f42:	e768      	b.n	25e16 <gnss_interface_setopt+0x126>
   25f44:	2073      	movs	r0, #115	; 0x73
   25f46:	f008 fee6 	bl	2ed16 <bsd_os_errno_set>
   25f4a:	f04f 30ff 	mov.w	r0, #4294967295
   25f4e:	e762      	b.n	25e16 <gnss_interface_setopt+0x126>
   25f50:	200234d0 	.word	0x200234d0
   25f54:	49765443 	.word	0x49765443
   25f58:	2002d87c 	.word	0x2002d87c
   25f5c:	2002788e 	.word	0x2002788e
   25f60:	200234d4 	.word	0x200234d4

00025f64 <gnss_interface_getopt>:
   25f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f68:	4c81      	ldr	r4, [pc, #516]	; (26170 <gnss_interface_getopt+0x20c>)
   25f6a:	b087      	sub	sp, #28
   25f6c:	6825      	ldr	r5, [r4, #0]
   25f6e:	4698      	mov	r8, r3
   25f70:	b2ad      	uxth	r5, r5
   25f72:	2d02      	cmp	r5, #2
   25f74:	9b10      	ldr	r3, [sp, #64]	; 0x40
   25f76:	f040 80dc 	bne.w	26132 <gnss_interface_getopt+0x1ce>
   25f7a:	6825      	ldr	r5, [r4, #0]
   25f7c:	03ee      	lsls	r6, r5, #15
   25f7e:	f100 80f0 	bmi.w	26162 <gnss_interface_getopt+0x1fe>
   25f82:	6825      	ldr	r5, [r4, #0]
   25f84:	01ed      	lsls	r5, r5, #7
   25f86:	f100 80e6 	bmi.w	26156 <gnss_interface_getopt+0x1f2>
   25f8a:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   25f8e:	f040 80d6 	bne.w	2613e <gnss_interface_getopt+0x1da>
   25f92:	4978      	ldr	r1, [pc, #480]	; (26174 <gnss_interface_getopt+0x210>)
   25f94:	4288      	cmp	r0, r1
   25f96:	f040 80d8 	bne.w	2614a <gnss_interface_getopt+0x1e6>
   25f9a:	f1b8 0f00 	cmp.w	r8, #0
   25f9e:	d00b      	beq.n	25fb8 <gnss_interface_getopt+0x54>
   25fa0:	b153      	cbz	r3, 25fb8 <gnss_interface_getopt+0x54>
   25fa2:	1e57      	subs	r7, r2, #1
   25fa4:	2f05      	cmp	r7, #5
   25fa6:	d807      	bhi.n	25fb8 <gnss_interface_getopt+0x54>
   25fa8:	e8df f007 	tbb	[pc, r7]
   25fac:	0f030f0f 	.word	0x0f030f0f
   25fb0:	0303      	.short	0x0303
   25fb2:	681b      	ldr	r3, [r3, #0]
   25fb4:	2b01      	cmp	r3, #1
   25fb6:	d00b      	beq.n	25fd0 <gnss_interface_getopt+0x6c>
   25fb8:	2016      	movs	r0, #22
   25fba:	f008 feac 	bl	2ed16 <bsd_os_errno_set>
   25fbe:	f04f 35ff 	mov.w	r5, #4294967295
   25fc2:	4628      	mov	r0, r5
   25fc4:	b007      	add	sp, #28
   25fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25fca:	681b      	ldr	r3, [r3, #0]
   25fcc:	2b02      	cmp	r3, #2
   25fce:	d1f3      	bne.n	25fb8 <gnss_interface_getopt+0x54>
   25fd0:	6823      	ldr	r3, [r4, #0]
   25fd2:	2211      	movs	r2, #17
   25fd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   25fd8:	2100      	movs	r1, #0
   25fda:	a801      	add	r0, sp, #4
   25fdc:	6023      	str	r3, [r4, #0]
   25fde:	f004 fc81 	bl	2a8e4 <memset>
   25fe2:	2111      	movs	r1, #17
   25fe4:	4668      	mov	r0, sp
   25fe6:	f7fd fb2b 	bl	23640 <rpc_gnss_client_request_alloc>
   25fea:	4605      	mov	r5, r0
   25fec:	9800      	ldr	r0, [sp, #0]
   25fee:	2d00      	cmp	r5, #0
   25ff0:	f040 808a 	bne.w	26108 <gnss_interface_getopt+0x1a4>
   25ff4:	2800      	cmp	r0, #0
   25ff6:	f000 8087 	beq.w	26108 <gnss_interface_getopt+0x1a4>
   25ffa:	f241 0602 	movw	r6, #4098	; 0x1002
   25ffe:	f04f 0e49 	mov.w	lr, #73	; 0x49
   26002:	2211      	movs	r2, #17
   26004:	f04f 0976 	mov.w	r9, #118	; 0x76
   26008:	f04f 0b43 	mov.w	fp, #67	; 0x43
   2600c:	f04f 0a54 	mov.w	sl, #84	; 0x54
   26010:	f8df c168 	ldr.w	ip, [pc, #360]	; 2617c <gnss_interface_getopt+0x218>
   26014:	f880 e00f 	strb.w	lr, [r0, #15]
   26018:	f8bc 3000 	ldrh.w	r3, [ip]
   2601c:	f880 900e 	strb.w	r9, [r0, #14]
   26020:	3301      	adds	r3, #1
   26022:	b29b      	uxth	r3, r3
   26024:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   26028:	f8cd e004 	str.w	lr, [sp, #4]
   2602c:	7145      	strb	r5, [r0, #5]
   2602e:	7185      	strb	r5, [r0, #6]
   26030:	71c5      	strb	r5, [r0, #7]
   26032:	7205      	strb	r5, [r0, #8]
   26034:	7245      	strb	r5, [r0, #9]
   26036:	7285      	strb	r5, [r0, #10]
   26038:	72c5      	strb	r5, [r0, #11]
   2603a:	a901      	add	r1, sp, #4
   2603c:	7102      	strb	r2, [r0, #4]
   2603e:	f880 b00c 	strb.w	fp, [r0, #12]
   26042:	f880 a00d 	strb.w	sl, [r0, #13]
   26046:	f8df 9138 	ldr.w	r9, [pc, #312]	; 26180 <gnss_interface_getopt+0x21c>
   2604a:	6800      	ldr	r0, [r0, #0]
   2604c:	f8ac 3000 	strh.w	r3, [ip]
   26050:	f7e7 fdc2 	bl	dbd8 <memcpy>
   26054:	4631      	mov	r1, r6
   26056:	9800      	ldr	r0, [sp, #0]
   26058:	f8c9 5000 	str.w	r5, [r9]
   2605c:	f7fd fb04 	bl	23668 <rpc_gnss_client_request_send>
   26060:	2800      	cmp	r0, #0
   26062:	d15c      	bne.n	2611e <gnss_interface_getopt+0x1ba>
   26064:	4e44      	ldr	r6, [pc, #272]	; (26178 <gnss_interface_getopt+0x214>)
   26066:	4d43      	ldr	r5, [pc, #268]	; (26174 <gnss_interface_getopt+0x210>)
   26068:	4631      	mov	r1, r6
   2606a:	4628      	mov	r0, r5
   2606c:	f7ef fe70 	bl	15d50 <bsd_os_timedwait>
   26070:	6823      	ldr	r3, [r4, #0]
   26072:	01db      	lsls	r3, r3, #7
   26074:	d4f8      	bmi.n	26068 <gnss_interface_getopt+0x104>
   26076:	f8d9 0000 	ldr.w	r0, [r9]
   2607a:	b1d8      	cbz	r0, 260b4 <gnss_interface_getopt+0x150>
   2607c:	6825      	ldr	r5, [r4, #0]
   2607e:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   26082:	d00f      	beq.n	260a4 <gnss_interface_getopt+0x140>
   26084:	2f05      	cmp	r7, #5
   26086:	d837      	bhi.n	260f8 <gnss_interface_getopt+0x194>
   26088:	e8df f007 	tbb	[pc, r7]
   2608c:	2b26201a 	.word	0x2b26201a
   26090:	0331      	.short	0x0331
   26092:	2500      	movs	r5, #0
   26094:	7b43      	ldrb	r3, [r0, #13]
   26096:	f888 3000 	strb.w	r3, [r8]
   2609a:	f7fd fb03 	bl	236a4 <rpc_gnss_client_data_free>
   2609e:	2300      	movs	r3, #0
   260a0:	f8c9 3000 	str.w	r3, [r9]
   260a4:	6823      	ldr	r3, [r4, #0]
   260a6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   260aa:	6023      	str	r3, [r4, #0]
   260ac:	4628      	mov	r0, r5
   260ae:	b007      	add	sp, #28
   260b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   260b4:	6823      	ldr	r3, [r4, #0]
   260b6:	4605      	mov	r5, r0
   260b8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   260bc:	6023      	str	r3, [r4, #0]
   260be:	e7f5      	b.n	260ac <gnss_interface_getopt+0x148>
   260c0:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   260c4:	2500      	movs	r5, #0
   260c6:	f8a8 3000 	strh.w	r3, [r8]
   260ca:	e7e6      	b.n	2609a <gnss_interface_getopt+0x136>
   260cc:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   260d0:	2500      	movs	r5, #0
   260d2:	f8a8 3000 	strh.w	r3, [r8]
   260d6:	e7e0      	b.n	2609a <gnss_interface_getopt+0x136>
   260d8:	7b83      	ldrb	r3, [r0, #14]
   260da:	2500      	movs	r5, #0
   260dc:	f888 3000 	strb.w	r3, [r8]
   260e0:	e7db      	b.n	2609a <gnss_interface_getopt+0x136>
   260e2:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   260e6:	2500      	movs	r5, #0
   260e8:	f8a8 3000 	strh.w	r3, [r8]
   260ec:	e7d5      	b.n	2609a <gnss_interface_getopt+0x136>
   260ee:	7b03      	ldrb	r3, [r0, #12]
   260f0:	2500      	movs	r5, #0
   260f2:	f888 3000 	strb.w	r3, [r8]
   260f6:	e7d0      	b.n	2609a <gnss_interface_getopt+0x136>
   260f8:	2016      	movs	r0, #22
   260fa:	f008 fe0c 	bl	2ed16 <bsd_os_errno_set>
   260fe:	f04f 35ff 	mov.w	r5, #4294967295
   26102:	f8d9 0000 	ldr.w	r0, [r9]
   26106:	e7c8      	b.n	2609a <gnss_interface_getopt+0x136>
   26108:	6803      	ldr	r3, [r0, #0]
   2610a:	b11b      	cbz	r3, 26114 <gnss_interface_getopt+0x1b0>
   2610c:	4618      	mov	r0, r3
   2610e:	f7fd fac9 	bl	236a4 <rpc_gnss_client_data_free>
   26112:	9800      	ldr	r0, [sp, #0]
   26114:	f7fd fabe 	bl	23694 <rpc_gnss_client_message_free>
   26118:	2023      	movs	r0, #35	; 0x23
   2611a:	f008 fdfc 	bl	2ed16 <bsd_os_errno_set>
   2611e:	6823      	ldr	r3, [r4, #0]
   26120:	200e      	movs	r0, #14
   26122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   26126:	6023      	str	r3, [r4, #0]
   26128:	f04f 35ff 	mov.w	r5, #4294967295
   2612c:	f008 fdf3 	bl	2ed16 <bsd_os_errno_set>
   26130:	e747      	b.n	25fc2 <gnss_interface_getopt+0x5e>
   26132:	200e      	movs	r0, #14
   26134:	f008 fdef 	bl	2ed16 <bsd_os_errno_set>
   26138:	f04f 35ff 	mov.w	r5, #4294967295
   2613c:	e741      	b.n	25fc2 <gnss_interface_getopt+0x5e>
   2613e:	202a      	movs	r0, #42	; 0x2a
   26140:	f008 fde9 	bl	2ed16 <bsd_os_errno_set>
   26144:	f04f 35ff 	mov.w	r5, #4294967295
   26148:	e73b      	b.n	25fc2 <gnss_interface_getopt+0x5e>
   2614a:	2009      	movs	r0, #9
   2614c:	f008 fde3 	bl	2ed16 <bsd_os_errno_set>
   26150:	f04f 35ff 	mov.w	r5, #4294967295
   26154:	e735      	b.n	25fc2 <gnss_interface_getopt+0x5e>
   26156:	2073      	movs	r0, #115	; 0x73
   26158:	f008 fddd 	bl	2ed16 <bsd_os_errno_set>
   2615c:	f04f 35ff 	mov.w	r5, #4294967295
   26160:	e72f      	b.n	25fc2 <gnss_interface_getopt+0x5e>
   26162:	2005      	movs	r0, #5
   26164:	f008 fdd7 	bl	2ed16 <bsd_os_errno_set>
   26168:	f04f 35ff 	mov.w	r5, #4294967295
   2616c:	e729      	b.n	25fc2 <gnss_interface_getopt+0x5e>
   2616e:	bf00      	nop
   26170:	200234d0 	.word	0x200234d0
   26174:	49765443 	.word	0x49765443
   26178:	2002d87c 	.word	0x2002d87c
   2617c:	2002788e 	.word	0x2002788e
   26180:	200234d4 	.word	0x200234d4

00026184 <gnss_interface_init>:
   26184:	2100      	movs	r1, #0
   26186:	b538      	push	{r3, r4, r5, lr}
   26188:	4c09      	ldr	r4, [pc, #36]	; (261b0 <gnss_interface_init+0x2c>)
   2618a:	4d0a      	ldr	r5, [pc, #40]	; (261b4 <gnss_interface_init+0x30>)
   2618c:	6822      	ldr	r2, [r4, #0]
   2618e:	480a      	ldr	r0, [pc, #40]	; (261b8 <gnss_interface_init+0x34>)
   26190:	4b0a      	ldr	r3, [pc, #40]	; (261bc <gnss_interface_init+0x38>)
   26192:	402a      	ands	r2, r5
   26194:	6022      	str	r2, [r4, #0]
   26196:	8001      	strh	r1, [r0, #0]
   26198:	6019      	str	r1, [r3, #0]
   2619a:	f7fd fa4b 	bl	23634 <rpc_gnss_client_init>
   2619e:	b928      	cbnz	r0, 261ac <gnss_interface_init+0x28>
   261a0:	6823      	ldr	r3, [r4, #0]
   261a2:	402b      	ands	r3, r5
   261a4:	f043 0301 	orr.w	r3, r3, #1
   261a8:	6023      	str	r3, [r4, #0]
   261aa:	bd38      	pop	{r3, r4, r5, pc}
   261ac:	2003      	movs	r0, #3
   261ae:	bd38      	pop	{r3, r4, r5, pc}
   261b0:	200234d0 	.word	0x200234d0
   261b4:	ffff0000 	.word	0xffff0000
   261b8:	2002788e 	.word	0x2002788e
   261bc:	200234d4 	.word	0x200234d4

000261c0 <gnss_interface_open>:
   261c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   261c4:	2801      	cmp	r0, #1
   261c6:	b087      	sub	sp, #28
   261c8:	d15f      	bne.n	2628a <gnss_interface_open+0xca>
   261ca:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   261ce:	d15c      	bne.n	2628a <gnss_interface_open+0xca>
   261d0:	2902      	cmp	r1, #2
   261d2:	d15a      	bne.n	2628a <gnss_interface_open+0xca>
   261d4:	4c3b      	ldr	r4, [pc, #236]	; (262c4 <gnss_interface_open+0x104>)
   261d6:	6823      	ldr	r3, [r4, #0]
   261d8:	b29b      	uxth	r3, r3
   261da:	2b01      	cmp	r3, #1
   261dc:	d15b      	bne.n	26296 <gnss_interface_open+0xd6>
   261de:	2111      	movs	r1, #17
   261e0:	4668      	mov	r0, sp
   261e2:	f7fd fa2d 	bl	23640 <rpc_gnss_client_request_alloc>
   261e6:	4605      	mov	r5, r0
   261e8:	9800      	ldr	r0, [sp, #0]
   261ea:	2d00      	cmp	r5, #0
   261ec:	d159      	bne.n	262a2 <gnss_interface_open+0xe2>
   261ee:	2800      	cmp	r0, #0
   261f0:	d057      	beq.n	262a2 <gnss_interface_open+0xe2>
   261f2:	f241 0601 	movw	r6, #4097	; 0x1001
   261f6:	f04f 0c49 	mov.w	ip, #73	; 0x49
   261fa:	2211      	movs	r2, #17
   261fc:	f04f 0e76 	mov.w	lr, #118	; 0x76
   26200:	f04f 0943 	mov.w	r9, #67	; 0x43
   26204:	f04f 0854 	mov.w	r8, #84	; 0x54
   26208:	4f2f      	ldr	r7, [pc, #188]	; (262c8 <gnss_interface_open+0x108>)
   2620a:	a906      	add	r1, sp, #24
   2620c:	883b      	ldrh	r3, [r7, #0]
   2620e:	f880 c00f 	strb.w	ip, [r0, #15]
   26212:	3301      	adds	r3, #1
   26214:	b29b      	uxth	r3, r3
   26216:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   2621a:	f841 cd14 	str.w	ip, [r1, #-20]!
   2621e:	7145      	strb	r5, [r0, #5]
   26220:	7185      	strb	r5, [r0, #6]
   26222:	71c5      	strb	r5, [r0, #7]
   26224:	7205      	strb	r5, [r0, #8]
   26226:	7245      	strb	r5, [r0, #9]
   26228:	7285      	strb	r5, [r0, #10]
   2622a:	72c5      	strb	r5, [r0, #11]
   2622c:	7102      	strb	r2, [r0, #4]
   2622e:	f880 900c 	strb.w	r9, [r0, #12]
   26232:	f880 800d 	strb.w	r8, [r0, #13]
   26236:	f880 e00e 	strb.w	lr, [r0, #14]
   2623a:	6800      	ldr	r0, [r0, #0]
   2623c:	803b      	strh	r3, [r7, #0]
   2623e:	f7e7 fccb 	bl	dbd8 <memcpy>
   26242:	4b22      	ldr	r3, [pc, #136]	; (262cc <gnss_interface_open+0x10c>)
   26244:	4631      	mov	r1, r6
   26246:	9800      	ldr	r0, [sp, #0]
   26248:	601d      	str	r5, [r3, #0]
   2624a:	f7fd fa0d 	bl	23668 <rpc_gnss_client_request_send>
   2624e:	2800      	cmp	r0, #0
   26250:	d132      	bne.n	262b8 <gnss_interface_open+0xf8>
   26252:	4e1f      	ldr	r6, [pc, #124]	; (262d0 <gnss_interface_open+0x110>)
   26254:	4d1f      	ldr	r5, [pc, #124]	; (262d4 <gnss_interface_open+0x114>)
   26256:	4631      	mov	r1, r6
   26258:	4628      	mov	r0, r5
   2625a:	f7ef fd79 	bl	15d50 <bsd_os_timedwait>
   2625e:	6823      	ldr	r3, [r4, #0]
   26260:	b29b      	uxth	r3, r3
   26262:	2b01      	cmp	r3, #1
   26264:	d0f7      	beq.n	26256 <gnss_interface_open+0x96>
   26266:	6820      	ldr	r0, [r4, #0]
   26268:	b280      	uxth	r0, r0
   2626a:	2802      	cmp	r0, #2
   2626c:	d113      	bne.n	26296 <gnss_interface_open+0xd6>
   2626e:	2200      	movs	r2, #0
   26270:	4919      	ldr	r1, [pc, #100]	; (262d8 <gnss_interface_open+0x118>)
   26272:	f7f9 fc73 	bl	1fb5c <packet_handler_create>
   26276:	4a19      	ldr	r2, [pc, #100]	; (262dc <gnss_interface_open+0x11c>)
   26278:	6010      	str	r0, [r2, #0]
   2627a:	b160      	cbz	r0, 26296 <gnss_interface_open+0xd6>
   2627c:	6803      	ldr	r3, [r0, #0]
   2627e:	681b      	ldr	r3, [r3, #0]
   26280:	4798      	blx	r3
   26282:	4814      	ldr	r0, [pc, #80]	; (262d4 <gnss_interface_open+0x114>)
   26284:	b007      	add	sp, #28
   26286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2628a:	2016      	movs	r0, #22
   2628c:	f008 fd43 	bl	2ed16 <bsd_os_errno_set>
   26290:	f04f 30ff 	mov.w	r0, #4294967295
   26294:	e7f6      	b.n	26284 <gnss_interface_open+0xc4>
   26296:	200e      	movs	r0, #14
   26298:	f008 fd3d 	bl	2ed16 <bsd_os_errno_set>
   2629c:	f04f 30ff 	mov.w	r0, #4294967295
   262a0:	e7f0      	b.n	26284 <gnss_interface_open+0xc4>
   262a2:	6803      	ldr	r3, [r0, #0]
   262a4:	b11b      	cbz	r3, 262ae <gnss_interface_open+0xee>
   262a6:	4618      	mov	r0, r3
   262a8:	f7fd f9fc 	bl	236a4 <rpc_gnss_client_data_free>
   262ac:	9800      	ldr	r0, [sp, #0]
   262ae:	f7fd f9f1 	bl	23694 <rpc_gnss_client_message_free>
   262b2:	2023      	movs	r0, #35	; 0x23
   262b4:	f008 fd2f 	bl	2ed16 <bsd_os_errno_set>
   262b8:	200d      	movs	r0, #13
   262ba:	f008 fd2c 	bl	2ed16 <bsd_os_errno_set>
   262be:	f04f 30ff 	mov.w	r0, #4294967295
   262c2:	e7df      	b.n	26284 <gnss_interface_open+0xc4>
   262c4:	200234d0 	.word	0x200234d0
   262c8:	2002788e 	.word	0x2002788e
   262cc:	200234d4 	.word	0x200234d4
   262d0:	2002d87c 	.word	0x2002d87c
   262d4:	49765443 	.word	0x49765443
   262d8:	000257a9 	.word	0x000257a9
   262dc:	200234d8 	.word	0x200234d8

000262e0 <gnss_interface_close>:
   262e0:	b530      	push	{r4, r5, lr}
   262e2:	4b13      	ldr	r3, [pc, #76]	; (26330 <gnss_interface_close+0x50>)
   262e4:	b083      	sub	sp, #12
   262e6:	4298      	cmp	r0, r3
   262e8:	d11c      	bne.n	26324 <gnss_interface_close+0x44>
   262ea:	4c12      	ldr	r4, [pc, #72]	; (26334 <gnss_interface_close+0x54>)
   262ec:	6823      	ldr	r3, [r4, #0]
   262ee:	b29b      	uxth	r3, r3
   262f0:	2b04      	cmp	r3, #4
   262f2:	d00f      	beq.n	26314 <gnss_interface_close+0x34>
   262f4:	4d10      	ldr	r5, [pc, #64]	; (26338 <gnss_interface_close+0x58>)
   262f6:	6828      	ldr	r0, [r5, #0]
   262f8:	b118      	cbz	r0, 26302 <gnss_interface_close+0x22>
   262fa:	f7f9 fc4d 	bl	1fb98 <packet_handler_delete>
   262fe:	2300      	movs	r3, #0
   26300:	602b      	str	r3, [r5, #0]
   26302:	2000      	movs	r0, #0
   26304:	6823      	ldr	r3, [r4, #0]
   26306:	0c1b      	lsrs	r3, r3, #16
   26308:	041b      	lsls	r3, r3, #16
   2630a:	f043 0301 	orr.w	r3, r3, #1
   2630e:	6023      	str	r3, [r4, #0]
   26310:	b003      	add	sp, #12
   26312:	bd30      	pop	{r4, r5, pc}
   26314:	2300      	movs	r3, #0
   26316:	2208      	movs	r2, #8
   26318:	9300      	str	r3, [sp, #0]
   2631a:	f44f 7101 	mov.w	r1, #516	; 0x204
   2631e:	f000 fa0b 	bl	26738 <nrf_setsockopt>
   26322:	e7e7      	b.n	262f4 <gnss_interface_close+0x14>
   26324:	2009      	movs	r0, #9
   26326:	f008 fcf6 	bl	2ed16 <bsd_os_errno_set>
   2632a:	f04f 30ff 	mov.w	r0, #4294967295
   2632e:	e7ef      	b.n	26310 <gnss_interface_close+0x30>
   26330:	49765443 	.word	0x49765443
   26334:	200234d0 	.word	0x200234d0
   26338:	200234d8 	.word	0x200234d8

0002633c <authenticated_atcmd_init>:
   2633c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2633e:	4c3b      	ldr	r4, [pc, #236]	; (2642c <authenticated_atcmd_init+0xf0>)
   26340:	b0c7      	sub	sp, #284	; 0x11c
   26342:	6826      	ldr	r6, [r4, #0]
   26344:	bb16      	cbnz	r6, 2638c <authenticated_atcmd_init+0x50>
   26346:	2701      	movs	r7, #1
   26348:	4839      	ldr	r0, [pc, #228]	; (26430 <authenticated_atcmd_init+0xf4>)
   2634a:	6027      	str	r7, [r4, #0]
   2634c:	f004 fcb6 	bl	2acbc <strlen>
   26350:	4605      	mov	r5, r0
   26352:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
   26356:	4631      	mov	r1, r6
   26358:	f44f 7280 	mov.w	r2, #256	; 0x100
   2635c:	a806      	add	r0, sp, #24
   2635e:	9302      	str	r3, [sp, #8]
   26360:	f004 fac0 	bl	2a8e4 <memset>
   26364:	462a      	mov	r2, r5
   26366:	4932      	ldr	r1, [pc, #200]	; (26430 <authenticated_atcmd_init+0xf4>)
   26368:	a806      	add	r0, sp, #24
   2636a:	f7e7 fc35 	bl	dbd8 <memcpy>
   2636e:	aa06      	add	r2, sp, #24
   26370:	9700      	str	r7, [sp, #0]
   26372:	ab02      	add	r3, sp, #8
   26374:	442a      	add	r2, r5
   26376:	2120      	movs	r1, #32
   26378:	482e      	ldr	r0, [pc, #184]	; (26434 <authenticated_atcmd_init+0xf8>)
   2637a:	f7f9 f8c7 	bl	1f50c <es256_key_generate>
   2637e:	4606      	mov	r6, r0
   26380:	b138      	cbz	r0, 26392 <authenticated_atcmd_init+0x56>
   26382:	2300      	movs	r3, #0
   26384:	2023      	movs	r0, #35	; 0x23
   26386:	6023      	str	r3, [r4, #0]
   26388:	b047      	add	sp, #284	; 0x11c
   2638a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2638c:	200e      	movs	r0, #14
   2638e:	b047      	add	sp, #284	; 0x11c
   26390:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26392:	2022      	movs	r0, #34	; 0x22
   26394:	9b02      	ldr	r3, [sp, #8]
   26396:	6027      	str	r7, [r4, #0]
   26398:	441d      	add	r5, r3
   2639a:	af06      	add	r7, sp, #24
   2639c:	ab06      	add	r3, sp, #24
   2639e:	5578      	strb	r0, [r7, r5]
   263a0:	442b      	add	r3, r5
   263a2:	f240 2201 	movw	r2, #513	; 0x201
   263a6:	2102      	movs	r1, #2
   263a8:	2066      	movs	r0, #102	; 0x66
   263aa:	705e      	strb	r6, [r3, #1]
   263ac:	f7f9 fd66 	bl	1fe7c <at_interface_open>
   263b0:	1e07      	subs	r7, r0, #0
   263b2:	dbe6      	blt.n	26382 <authenticated_atcmd_init+0x46>
   263b4:	4820      	ldr	r0, [pc, #128]	; (26438 <authenticated_atcmd_init+0xfc>)
   263b6:	f004 fc81 	bl	2acbc <strlen>
   263ba:	4633      	mov	r3, r6
   263bc:	4602      	mov	r2, r0
   263be:	491e      	ldr	r1, [pc, #120]	; (26438 <authenticated_atcmd_init+0xfc>)
   263c0:	e9cd 6600 	strd	r6, r6, [sp]
   263c4:	4638      	mov	r0, r7
   263c6:	f7f9 fd09 	bl	1fddc <at_interface_write>
   263ca:	3502      	adds	r5, #2
   263cc:	a903      	add	r1, sp, #12
   263ce:	4633      	mov	r3, r6
   263d0:	220a      	movs	r2, #10
   263d2:	e9cd 6600 	strd	r6, r6, [sp]
   263d6:	4638      	mov	r0, r7
   263d8:	f7f9 fde2 	bl	1ffa0 <at_interface_read>
   263dc:	e9cd 6600 	strd	r6, r6, [sp]
   263e0:	a906      	add	r1, sp, #24
   263e2:	462a      	mov	r2, r5
   263e4:	4633      	mov	r3, r6
   263e6:	4638      	mov	r0, r7
   263e8:	f7f9 fcf8 	bl	1fddc <at_interface_write>
   263ec:	42a8      	cmp	r0, r5
   263ee:	d003      	beq.n	263f8 <authenticated_atcmd_init+0xbc>
   263f0:	4638      	mov	r0, r7
   263f2:	f7f9 fd8d 	bl	1ff10 <at_interface_close>
   263f6:	e7c4      	b.n	26382 <authenticated_atcmd_init+0x46>
   263f8:	e9cd 6600 	strd	r6, r6, [sp]
   263fc:	4633      	mov	r3, r6
   263fe:	220a      	movs	r2, #10
   26400:	a903      	add	r1, sp, #12
   26402:	4638      	mov	r0, r7
   26404:	f7f9 fdcc 	bl	1ffa0 <at_interface_read>
   26408:	2801      	cmp	r0, #1
   2640a:	ddf1      	ble.n	263f0 <authenticated_atcmd_init+0xb4>
   2640c:	a803      	add	r0, sp, #12
   2640e:	2202      	movs	r2, #2
   26410:	490a      	ldr	r1, [pc, #40]	; (2643c <authenticated_atcmd_init+0x100>)
   26412:	f004 fc81 	bl	2ad18 <strncmp>
   26416:	4605      	mov	r5, r0
   26418:	2800      	cmp	r0, #0
   2641a:	d1e9      	bne.n	263f0 <authenticated_atcmd_init+0xb4>
   2641c:	2302      	movs	r3, #2
   2641e:	4638      	mov	r0, r7
   26420:	6023      	str	r3, [r4, #0]
   26422:	f7f9 fd75 	bl	1ff10 <at_interface_close>
   26426:	4628      	mov	r0, r5
   26428:	e7ae      	b.n	26388 <authenticated_atcmd_init+0x4c>
   2642a:	bf00      	nop
   2642c:	200234dc 	.word	0x200234dc
   26430:	00033bc0 	.word	0x00033bc0
   26434:	20027ea4 	.word	0x20027ea4
   26438:	00033bd0 	.word	0x00033bd0
   2643c:	00033ad0 	.word	0x00033ad0

00026440 <authenticated_atcmd_shutdown>:
   26440:	2200      	movs	r2, #0
   26442:	4b01      	ldr	r3, [pc, #4]	; (26448 <authenticated_atcmd_shutdown+0x8>)
   26444:	601a      	str	r2, [r3, #0]
   26446:	4770      	bx	lr
   26448:	200234dc 	.word	0x200234dc

0002644c <at_client_evt_handler>:
   2644c:	b120      	cbz	r0, 26458 <at_client_evt_handler+0xc>
   2644e:	f850 1b08 	ldr.w	r1, [r0], #8
   26452:	0c09      	lsrs	r1, r1, #16
   26454:	f7f9 be2a 	b.w	200ac <rpc_at_event_handler>
   26458:	4770      	bx	lr
   2645a:	bf00      	nop

0002645c <rpc_at_client_init>:
   2645c:	4801      	ldr	r0, [pc, #4]	; (26464 <rpc_at_client_init+0x8>)
   2645e:	f7fe bdd5 	b.w	2500c <rpc_client_register>
   26462:	bf00      	nop
   26464:	00033be0 	.word	0x00033be0

00026468 <rpc_at_client_request_alloc>:
   26468:	b180      	cbz	r0, 2648c <rpc_at_client_request_alloc+0x24>
   2646a:	2300      	movs	r3, #0
   2646c:	b510      	push	{r4, lr}
   2646e:	b082      	sub	sp, #8
   26470:	aa02      	add	r2, sp, #8
   26472:	4604      	mov	r4, r0
   26474:	f842 3d04 	str.w	r3, [r2, #-4]!
   26478:	2003      	movs	r0, #3
   2647a:	f7ff f807 	bl	2548c <rpc_message_alloc>
   2647e:	b918      	cbnz	r0, 26488 <rpc_at_client_request_alloc+0x20>
   26480:	9b01      	ldr	r3, [sp, #4]
   26482:	b10b      	cbz	r3, 26488 <rpc_at_client_request_alloc+0x20>
   26484:	3308      	adds	r3, #8
   26486:	6023      	str	r3, [r4, #0]
   26488:	b002      	add	sp, #8
   2648a:	bd10      	pop	{r4, pc}
   2648c:	200e      	movs	r0, #14
   2648e:	4770      	bx	lr

00026490 <rpc_at_client_request_send>:
   26490:	b150      	cbz	r0, 264a8 <rpc_at_client_request_send+0x18>
   26492:	4603      	mov	r3, r0
   26494:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   26498:	2003      	movs	r0, #3
   2649a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2649e:	f843 1d08 	str.w	r1, [r3, #-8]!
   264a2:	4619      	mov	r1, r3
   264a4:	f7fe bfda 	b.w	2545c <rpc_message_send>
   264a8:	200e      	movs	r0, #14
   264aa:	4770      	bx	lr

000264ac <rpc_at_client_message_free>:
   264ac:	b120      	cbz	r0, 264b8 <rpc_at_client_message_free+0xc>
   264ae:	f1a0 0108 	sub.w	r1, r0, #8
   264b2:	2003      	movs	r0, #3
   264b4:	f7ff b81e 	b.w	254f4 <rpc_message_free>
   264b8:	200e      	movs	r0, #14
   264ba:	4770      	bx	lr

000264bc <rpc_at_client_data_free>:
   264bc:	b118      	cbz	r0, 264c6 <rpc_at_client_data_free+0xa>
   264be:	4601      	mov	r1, r0
   264c0:	2003      	movs	r0, #3
   264c2:	f7ff b8c7 	b.w	25654 <rpc_message_data_free>
   264c6:	200e      	movs	r0, #14
   264c8:	4770      	bx	lr
   264ca:	bf00      	nop

000264cc <linked_list_init>:
   264cc:	b128      	cbz	r0, 264da <linked_list_init+0xe>
   264ce:	2300      	movs	r3, #0
   264d0:	6003      	str	r3, [r0, #0]
   264d2:	e9c0 3301 	strd	r3, r3, [r0, #4]
   264d6:	4618      	mov	r0, r3
   264d8:	4770      	bx	lr
   264da:	2007      	movs	r0, #7
   264dc:	4770      	bx	lr
   264de:	bf00      	nop

000264e0 <linked_list_push>:
   264e0:	6802      	ldr	r2, [r0, #0]
   264e2:	4603      	mov	r3, r0
   264e4:	3201      	adds	r2, #1
   264e6:	d00e      	beq.n	26506 <linked_list_push+0x26>
   264e8:	2200      	movs	r2, #0
   264ea:	600a      	str	r2, [r1, #0]
   264ec:	6802      	ldr	r2, [r0, #0]
   264ee:	b13a      	cbz	r2, 26500 <linked_list_push+0x20>
   264f0:	6882      	ldr	r2, [r0, #8]
   264f2:	6011      	str	r1, [r2, #0]
   264f4:	6081      	str	r1, [r0, #8]
   264f6:	681a      	ldr	r2, [r3, #0]
   264f8:	2000      	movs	r0, #0
   264fa:	3201      	adds	r2, #1
   264fc:	601a      	str	r2, [r3, #0]
   264fe:	4770      	bx	lr
   26500:	e9c0 1101 	strd	r1, r1, [r0, #4]
   26504:	e7f7      	b.n	264f6 <linked_list_push+0x16>
   26506:	2004      	movs	r0, #4
   26508:	4770      	bx	lr
   2650a:	bf00      	nop

0002650c <linked_list_pop>:
   2650c:	4603      	mov	r3, r0
   2650e:	6800      	ldr	r0, [r0, #0]
   26510:	b128      	cbz	r0, 2651e <linked_list_pop+0x12>
   26512:	6858      	ldr	r0, [r3, #4]
   26514:	681a      	ldr	r2, [r3, #0]
   26516:	6801      	ldr	r1, [r0, #0]
   26518:	3a01      	subs	r2, #1
   2651a:	6059      	str	r1, [r3, #4]
   2651c:	601a      	str	r2, [r3, #0]
   2651e:	4770      	bx	lr

00026520 <linked_list_peek>:
   26520:	6803      	ldr	r3, [r0, #0]
   26522:	b10b      	cbz	r3, 26528 <linked_list_peek+0x8>
   26524:	6840      	ldr	r0, [r0, #4]
   26526:	4770      	bx	lr
   26528:	4618      	mov	r0, r3
   2652a:	4770      	bx	lr

0002652c <linked_list_size_get>:
   2652c:	6800      	ldr	r0, [r0, #0]
   2652e:	4770      	bx	lr

00026530 <linked_list_get_next>:
   26530:	6800      	ldr	r0, [r0, #0]
   26532:	4770      	bx	lr

00026534 <nrf_socket>:
   26534:	b570      	push	{r4, r5, r6, lr}
   26536:	4604      	mov	r4, r0
   26538:	460d      	mov	r5, r1
   2653a:	4616      	mov	r6, r2
   2653c:	f7fa fe66 	bl	2120c <bsd_platform_af_method_table_get>
   26540:	b130      	cbz	r0, 26550 <nrf_socket+0x1c>
   26542:	6803      	ldr	r3, [r0, #0]
   26544:	4632      	mov	r2, r6
   26546:	4629      	mov	r1, r5
   26548:	4620      	mov	r0, r4
   2654a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2654e:	4718      	bx	r3
   26550:	f04f 30ff 	mov.w	r0, #4294967295
   26554:	bd70      	pop	{r4, r5, r6, pc}
   26556:	bf00      	nop

00026558 <nrf_close>:
   26558:	b510      	push	{r4, lr}
   2655a:	4604      	mov	r4, r0
   2655c:	f7fa fe98 	bl	21290 <bsd_platform_fd_method_table_get>
   26560:	b120      	cbz	r0, 2656c <nrf_close+0x14>
   26562:	6843      	ldr	r3, [r0, #4]
   26564:	4620      	mov	r0, r4
   26566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2656a:	4718      	bx	r3
   2656c:	f04f 30ff 	mov.w	r0, #4294967295
   26570:	bd10      	pop	{r4, pc}
   26572:	bf00      	nop

00026574 <nrf_sendto>:
   26574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26578:	460d      	mov	r5, r1
   2657a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2657e:	4616      	mov	r6, r2
   26580:	461f      	mov	r7, r3
   26582:	4604      	mov	r4, r0
   26584:	f7fa fe84 	bl	21290 <bsd_platform_fd_method_table_get>
   26588:	b158      	cbz	r0, 265a2 <nrf_sendto+0x2e>
   2658a:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2658e:	f8d0 e008 	ldr.w	lr, [r0, #8]
   26592:	463b      	mov	r3, r7
   26594:	4632      	mov	r2, r6
   26596:	4629      	mov	r1, r5
   26598:	4620      	mov	r0, r4
   2659a:	46f4      	mov	ip, lr
   2659c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   265a0:	4760      	bx	ip
   265a2:	f04f 30ff 	mov.w	r0, #4294967295
   265a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   265aa:	bf00      	nop

000265ac <nrf_send>:
   265ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   265b0:	b082      	sub	sp, #8
   265b2:	460e      	mov	r6, r1
   265b4:	4617      	mov	r7, r2
   265b6:	4698      	mov	r8, r3
   265b8:	4605      	mov	r5, r0
   265ba:	f7fa fe69 	bl	21290 <bsd_platform_fd_method_table_get>
   265be:	b160      	cbz	r0, 265da <nrf_send+0x2e>
   265c0:	4604      	mov	r4, r0
   265c2:	2000      	movs	r0, #0
   265c4:	e9cd 0000 	strd	r0, r0, [sp]
   265c8:	4643      	mov	r3, r8
   265ca:	463a      	mov	r2, r7
   265cc:	4631      	mov	r1, r6
   265ce:	4628      	mov	r0, r5
   265d0:	68a4      	ldr	r4, [r4, #8]
   265d2:	47a0      	blx	r4
   265d4:	b002      	add	sp, #8
   265d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   265da:	f04f 30ff 	mov.w	r0, #4294967295
   265de:	e7f9      	b.n	265d4 <nrf_send+0x28>

000265e0 <nrf_write>:
   265e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   265e2:	b083      	sub	sp, #12
   265e4:	460e      	mov	r6, r1
   265e6:	4617      	mov	r7, r2
   265e8:	4605      	mov	r5, r0
   265ea:	f7fa fe51 	bl	21290 <bsd_platform_fd_method_table_get>
   265ee:	b150      	cbz	r0, 26606 <nrf_write+0x26>
   265f0:	2300      	movs	r3, #0
   265f2:	4604      	mov	r4, r0
   265f4:	e9cd 3300 	strd	r3, r3, [sp]
   265f8:	463a      	mov	r2, r7
   265fa:	4631      	mov	r1, r6
   265fc:	4628      	mov	r0, r5
   265fe:	68a4      	ldr	r4, [r4, #8]
   26600:	47a0      	blx	r4
   26602:	b003      	add	sp, #12
   26604:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26606:	f04f 30ff 	mov.w	r0, #4294967295
   2660a:	e7fa      	b.n	26602 <nrf_write+0x22>

0002660c <nrf_recvfrom>:
   2660c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26610:	460d      	mov	r5, r1
   26612:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   26616:	4616      	mov	r6, r2
   26618:	461f      	mov	r7, r3
   2661a:	4604      	mov	r4, r0
   2661c:	f7fa fe38 	bl	21290 <bsd_platform_fd_method_table_get>
   26620:	b158      	cbz	r0, 2663a <nrf_recvfrom+0x2e>
   26622:	e9cd 8908 	strd	r8, r9, [sp, #32]
   26626:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   2662a:	463b      	mov	r3, r7
   2662c:	4632      	mov	r2, r6
   2662e:	4629      	mov	r1, r5
   26630:	4620      	mov	r0, r4
   26632:	46f4      	mov	ip, lr
   26634:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26638:	4760      	bx	ip
   2663a:	f04f 30ff 	mov.w	r0, #4294967295
   2663e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26642:	bf00      	nop

00026644 <nrf_recv>:
   26644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26648:	b082      	sub	sp, #8
   2664a:	460e      	mov	r6, r1
   2664c:	4617      	mov	r7, r2
   2664e:	4698      	mov	r8, r3
   26650:	4605      	mov	r5, r0
   26652:	f7fa fe1d 	bl	21290 <bsd_platform_fd_method_table_get>
   26656:	b160      	cbz	r0, 26672 <nrf_recv+0x2e>
   26658:	4604      	mov	r4, r0
   2665a:	2000      	movs	r0, #0
   2665c:	e9cd 0000 	strd	r0, r0, [sp]
   26660:	4643      	mov	r3, r8
   26662:	463a      	mov	r2, r7
   26664:	4631      	mov	r1, r6
   26666:	4628      	mov	r0, r5
   26668:	68e4      	ldr	r4, [r4, #12]
   2666a:	47a0      	blx	r4
   2666c:	b002      	add	sp, #8
   2666e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26672:	f04f 30ff 	mov.w	r0, #4294967295
   26676:	e7f9      	b.n	2666c <nrf_recv+0x28>

00026678 <nrf_read>:
   26678:	b5f0      	push	{r4, r5, r6, r7, lr}
   2667a:	b083      	sub	sp, #12
   2667c:	460e      	mov	r6, r1
   2667e:	4617      	mov	r7, r2
   26680:	4605      	mov	r5, r0
   26682:	f7fa fe05 	bl	21290 <bsd_platform_fd_method_table_get>
   26686:	b150      	cbz	r0, 2669e <nrf_read+0x26>
   26688:	2300      	movs	r3, #0
   2668a:	4604      	mov	r4, r0
   2668c:	e9cd 3300 	strd	r3, r3, [sp]
   26690:	463a      	mov	r2, r7
   26692:	4631      	mov	r1, r6
   26694:	4628      	mov	r0, r5
   26696:	68e4      	ldr	r4, [r4, #12]
   26698:	47a0      	blx	r4
   2669a:	b003      	add	sp, #12
   2669c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2669e:	f04f 30ff 	mov.w	r0, #4294967295
   266a2:	e7fa      	b.n	2669a <nrf_read+0x22>

000266a4 <nrf_connect>:
   266a4:	b570      	push	{r4, r5, r6, lr}
   266a6:	460d      	mov	r5, r1
   266a8:	4616      	mov	r6, r2
   266aa:	4604      	mov	r4, r0
   266ac:	f7fa fdf0 	bl	21290 <bsd_platform_fd_method_table_get>
   266b0:	b130      	cbz	r0, 266c0 <nrf_connect+0x1c>
   266b2:	6943      	ldr	r3, [r0, #20]
   266b4:	4632      	mov	r2, r6
   266b6:	4629      	mov	r1, r5
   266b8:	4620      	mov	r0, r4
   266ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   266be:	4718      	bx	r3
   266c0:	f04f 30ff 	mov.w	r0, #4294967295
   266c4:	bd70      	pop	{r4, r5, r6, pc}
   266c6:	bf00      	nop

000266c8 <nrf_listen>:
   266c8:	b570      	push	{r4, r5, r6, lr}
   266ca:	460d      	mov	r5, r1
   266cc:	4604      	mov	r4, r0
   266ce:	f7fa fddf 	bl	21290 <bsd_platform_fd_method_table_get>
   266d2:	b128      	cbz	r0, 266e0 <nrf_listen+0x18>
   266d4:	6983      	ldr	r3, [r0, #24]
   266d6:	4629      	mov	r1, r5
   266d8:	4620      	mov	r0, r4
   266da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   266de:	4718      	bx	r3
   266e0:	f04f 30ff 	mov.w	r0, #4294967295
   266e4:	bd70      	pop	{r4, r5, r6, pc}
   266e6:	bf00      	nop

000266e8 <nrf_accept>:
   266e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   266ec:	460d      	mov	r5, r1
   266ee:	4616      	mov	r6, r2
   266f0:	4604      	mov	r4, r0
   266f2:	f7fa fdcd 	bl	21290 <bsd_platform_fd_method_table_get>
   266f6:	b140      	cbz	r0, 2670a <nrf_accept+0x22>
   266f8:	69c7      	ldr	r7, [r0, #28]
   266fa:	4632      	mov	r2, r6
   266fc:	4629      	mov	r1, r5
   266fe:	4620      	mov	r0, r4
   26700:	46bc      	mov	ip, r7
   26702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   26706:	2300      	movs	r3, #0
   26708:	4760      	bx	ip
   2670a:	f04f 30ff 	mov.w	r0, #4294967295
   2670e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26712:	bf00      	nop

00026714 <nrf_bind>:
   26714:	b570      	push	{r4, r5, r6, lr}
   26716:	460d      	mov	r5, r1
   26718:	4616      	mov	r6, r2
   2671a:	4604      	mov	r4, r0
   2671c:	f7fa fdb8 	bl	21290 <bsd_platform_fd_method_table_get>
   26720:	b130      	cbz	r0, 26730 <nrf_bind+0x1c>
   26722:	6903      	ldr	r3, [r0, #16]
   26724:	4632      	mov	r2, r6
   26726:	4629      	mov	r1, r5
   26728:	4620      	mov	r0, r4
   2672a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2672e:	4718      	bx	r3
   26730:	f04f 30ff 	mov.w	r0, #4294967295
   26734:	bd70      	pop	{r4, r5, r6, pc}
   26736:	bf00      	nop

00026738 <nrf_setsockopt>:
   26738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2673c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   26740:	460d      	mov	r5, r1
   26742:	4616      	mov	r6, r2
   26744:	461f      	mov	r7, r3
   26746:	4604      	mov	r4, r0
   26748:	f7fa fda2 	bl	21290 <bsd_platform_fd_method_table_get>
   2674c:	b158      	cbz	r0, 26766 <nrf_setsockopt+0x2e>
   2674e:	f8cd 8018 	str.w	r8, [sp, #24]
   26752:	f8d0 e020 	ldr.w	lr, [r0, #32]
   26756:	463b      	mov	r3, r7
   26758:	4632      	mov	r2, r6
   2675a:	4629      	mov	r1, r5
   2675c:	4620      	mov	r0, r4
   2675e:	46f4      	mov	ip, lr
   26760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   26764:	4760      	bx	ip
   26766:	f04f 30ff 	mov.w	r0, #4294967295
   2676a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2676e:	bf00      	nop

00026770 <nrf_getsockopt>:
   26770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26774:	f8dd 8018 	ldr.w	r8, [sp, #24]
   26778:	460d      	mov	r5, r1
   2677a:	4616      	mov	r6, r2
   2677c:	461f      	mov	r7, r3
   2677e:	4604      	mov	r4, r0
   26780:	f7fa fd86 	bl	21290 <bsd_platform_fd_method_table_get>
   26784:	b158      	cbz	r0, 2679e <nrf_getsockopt+0x2e>
   26786:	f8cd 8018 	str.w	r8, [sp, #24]
   2678a:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   2678e:	463b      	mov	r3, r7
   26790:	4632      	mov	r2, r6
   26792:	4629      	mov	r1, r5
   26794:	4620      	mov	r0, r4
   26796:	46f4      	mov	ip, lr
   26798:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2679c:	4760      	bx	ip
   2679e:	f04f 30ff 	mov.w	r0, #4294967295
   267a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   267a6:	bf00      	nop

000267a8 <nrf_getaddrinfo>:
   267a8:	f7fa bdd0 	b.w	2134c <bsd_platform_getaddrinfo>

000267ac <nrf_freeaddrinfo>:
   267ac:	f7fa bdd0 	b.w	21350 <bsd_platform_freeaddrinfo>

000267b0 <nrf_poll>:
   267b0:	f7fa bdd0 	b.w	21354 <bsd_platform_poll>

000267b4 <nrf_fcntl>:
   267b4:	f7fa be28 	b.w	21408 <bsd_platform_fcntl>

000267b8 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   267b8:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   267ba:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   267bc:	4b08      	ldr	r3, [pc, #32]	; (267e0 <z_sys_device_do_config_level+0x28>)
   267be:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   267c2:	3001      	adds	r0, #1
   267c4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   267c8:	42a5      	cmp	r5, r4
   267ca:	d800      	bhi.n	267ce <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   267cc:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   267ce:	6823      	ldr	r3, [r4, #0]
   267d0:	4620      	mov	r0, r4
   267d2:	685b      	ldr	r3, [r3, #4]
   267d4:	4798      	blx	r3
		if (retval != 0) {
   267d6:	b100      	cbz	r0, 267da <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   267d8:	6066      	str	r6, [r4, #4]
								info++) {
   267da:	340c      	adds	r4, #12
   267dc:	e7f4      	b.n	267c8 <z_sys_device_do_config_level+0x10>
   267de:	bf00      	nop
   267e0:	00033bf0 	.word	0x00033bf0

000267e4 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   267e4:	4b10      	ldr	r3, [pc, #64]	; (26828 <z_impl_device_get_binding+0x44>)
{
   267e6:	b570      	push	{r4, r5, r6, lr}
   267e8:	4605      	mov	r5, r0
   267ea:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   267ec:	4c0f      	ldr	r4, [pc, #60]	; (2682c <z_impl_device_get_binding+0x48>)
   267ee:	429c      	cmp	r4, r3
   267f0:	d104      	bne.n	267fc <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   267f2:	4c0e      	ldr	r4, [pc, #56]	; (2682c <z_impl_device_get_binding+0x48>)
   267f4:	42b4      	cmp	r4, r6
   267f6:	d109      	bne.n	2680c <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   267f8:	2400      	movs	r4, #0
   267fa:	e012      	b.n	26822 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   267fc:	6862      	ldr	r2, [r4, #4]
   267fe:	b11a      	cbz	r2, 26808 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   26800:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   26802:	6812      	ldr	r2, [r2, #0]
   26804:	42aa      	cmp	r2, r5
   26806:	d00c      	beq.n	26822 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   26808:	340c      	adds	r4, #12
   2680a:	e7f0      	b.n	267ee <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   2680c:	6863      	ldr	r3, [r4, #4]
   2680e:	b90b      	cbnz	r3, 26814 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   26810:	340c      	adds	r4, #12
   26812:	e7ef      	b.n	267f4 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   26814:	6823      	ldr	r3, [r4, #0]
   26816:	4628      	mov	r0, r5
   26818:	6819      	ldr	r1, [r3, #0]
   2681a:	f7e7 fa53 	bl	dcc4 <strcmp>
   2681e:	2800      	cmp	r0, #0
   26820:	d1f6      	bne.n	26810 <z_impl_device_get_binding+0x2c>
}
   26822:	4620      	mov	r0, r4
   26824:	bd70      	pop	{r4, r5, r6, pc}
   26826:	bf00      	nop
   26828:	2002def8 	.word	0x2002def8
   2682c:	2002de14 	.word	0x2002de14

00026830 <z_impl_z_errno>:

Z_SYSCALL_HANDLER0_SIMPLE(z_errno);
#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   26830:	4b01      	ldr	r3, [pc, #4]	; (26838 <z_impl_z_errno+0x8>)
   26832:	6898      	ldr	r0, [r3, #8]
}
   26834:	3054      	adds	r0, #84	; 0x54
   26836:	4770      	bx	lr
   26838:	20027730 	.word	0x20027730

0002683c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   2683c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   2683e:	4d0b      	ldr	r5, [pc, #44]	; (2686c <idle+0x30>)
	__asm__ volatile(
   26840:	f04f 0220 	mov.w	r2, #32
   26844:	f3ef 8311 	mrs	r3, BASEPRI
   26848:	f382 8811 	msr	BASEPRI, r2
   2684c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   26850:	f002 fcc2 	bl	291d8 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   26854:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   26856:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   26858:	2802      	cmp	r0, #2
   2685a:	bfd8      	it	le
   2685c:	4608      	movle	r0, r1
   2685e:	f002 fd01 	bl	29264 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   26862:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
   26864:	f7ed f846 	bl	138f4 <k_cpu_idle>
   26868:	e7ea      	b.n	26840 <idle+0x4>
   2686a:	bf00      	nop
   2686c:	20027730 	.word	0x20027730

00026870 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   26870:	4802      	ldr	r0, [pc, #8]	; (2687c <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   26872:	4a03      	ldr	r2, [pc, #12]	; (26880 <z_bss_zero+0x10>)
   26874:	2100      	movs	r1, #0
   26876:	1a12      	subs	r2, r2, r0
   26878:	f004 b834 	b.w	2a8e4 <memset>
   2687c:	20020000 	.word	0x20020000
   26880:	20027eec 	.word	0x20027eec

00026884 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   26884:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26886:	4806      	ldr	r0, [pc, #24]	; (268a0 <z_data_copy+0x1c>)
   26888:	4a06      	ldr	r2, [pc, #24]	; (268a4 <z_data_copy+0x20>)
   2688a:	4907      	ldr	r1, [pc, #28]	; (268a8 <z_data_copy+0x24>)
   2688c:	1a12      	subs	r2, r2, r0
   2688e:	f7e7 f9a3 	bl	dbd8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   26892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   26896:	4a05      	ldr	r2, [pc, #20]	; (268ac <z_data_copy+0x28>)
   26898:	4905      	ldr	r1, [pc, #20]	; (268b0 <z_data_copy+0x2c>)
   2689a:	4806      	ldr	r0, [pc, #24]	; (268b4 <z_data_copy+0x30>)
   2689c:	f7e7 b99c 	b.w	dbd8 <memcpy>
   268a0:	2002d3c8 	.word	0x2002d3c8
   268a4:	2002e040 	.word	0x2002e040
   268a8:	000362d0 	.word	0x000362d0
   268ac:	00000000 	.word	0x00000000
   268b0:	000362d0 	.word	0x000362d0
   268b4:	20020000 	.word	0x20020000

000268b8 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   268b8:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   268ba:	2002      	movs	r0, #2
   268bc:	f7ff ff7c 	bl	267b8 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   268c0:	4807      	ldr	r0, [pc, #28]	; (268e0 <bg_thread_main+0x28>)
   268c2:	f007 feb6 	bl	2e632 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   268c6:	2003      	movs	r0, #3
   268c8:	f7ff ff76 	bl	267b8 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   268cc:	f002 f9ec 	bl	28ca8 <z_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   268d0:	f7ec f8ea 	bl	12aa8 <main>

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   268d4:	4a03      	ldr	r2, [pc, #12]	; (268e4 <bg_thread_main+0x2c>)
   268d6:	7b13      	ldrb	r3, [r2, #12]
   268d8:	f023 0301 	bic.w	r3, r3, #1
   268dc:	7313      	strb	r3, [r2, #12]
}
   268de:	bd08      	pop	{r3, pc}
   268e0:	00035c06 	.word	0x00035c06
   268e4:	20023590 	.word	0x20023590

000268e8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   268e8:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   268ea:	4b46      	ldr	r3, [pc, #280]	; (26a04 <z_cstart+0x11c>)
   268ec:	b0b2      	sub	sp, #200	; 0xc8
   268ee:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   268f2:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   268f6:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   268fa:	2400      	movs	r4, #0
   268fc:	23e0      	movs	r3, #224	; 0xe0
   268fe:	4d42      	ldr	r5, [pc, #264]	; (26a08 <z_cstart+0x120>)

	/* perform any architecture-specific initialization */
	kernel_arch_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   26900:	2701      	movs	r7, #1
   26902:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   26906:	77ec      	strb	r4, [r5, #31]
   26908:	762c      	strb	r4, [r5, #24]
   2690a:	766c      	strb	r4, [r5, #25]
   2690c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2690e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   26910:	4e3e      	ldr	r6, [pc, #248]	; (26a0c <z_cstart+0x124>)
   26912:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   26916:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void kernel_arch_init(void)
{
	z_InterruptStackSetup();
	z_ExcSetup();
	z_FaultInit();
   26918:	f7ed f9be 	bl	13c98 <z_FaultInit>
	z_CpuIdleInit();
   2691c:	f7ec ffe4 	bl	138e8 <z_CpuIdleInit>
static ALWAYS_INLINE void z_clearfaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   26920:	f04f 33ff 	mov.w	r3, #4294967295
   26924:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   26926:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   26928:	ab06      	add	r3, sp, #24
   2692a:	4621      	mov	r1, r4
   2692c:	22b0      	movs	r2, #176	; 0xb0
   2692e:	4618      	mov	r0, r3
   26930:	f003 ffd8 	bl	2a8e4 <memset>
	_current = &dummy_thread;
   26934:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   26936:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   26938:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2693c:	f7ff ff3c 	bl	267b8 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   26940:	4638      	mov	r0, r7
   26942:	f7ff ff39 	bl	267b8 <z_sys_device_do_config_level>
	_kernel.ready_q.cache = _main_thread;
   26946:	4d32      	ldr	r5, [pc, #200]	; (26a10 <z_cstart+0x128>)
	z_sched_init();
   26948:	f001 fdf2 	bl	28530 <z_sched_init>
	z_setup_new_thread(_main_thread, _main_stack,
   2694c:	4b31      	ldr	r3, [pc, #196]	; (26a14 <z_cstart+0x12c>)
	_kernel.ready_q.cache = _main_thread;
   2694e:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(_main_thread, _main_stack,
   26950:	e9cd 7304 	strd	r7, r3, [sp, #16]
   26954:	2307      	movs	r3, #7
   26956:	e9cd 4400 	strd	r4, r4, [sp]
   2695a:	e9cd 4302 	strd	r4, r3, [sp, #8]
   2695e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   26962:	4b2d      	ldr	r3, [pc, #180]	; (26a18 <z_cstart+0x130>)
   26964:	492d      	ldr	r1, [pc, #180]	; (26a1c <z_cstart+0x134>)
   26966:	4628      	mov	r0, r5
   26968:	f002 f8ac 	bl	28ac4 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2696c:	7b6b      	ldrb	r3, [r5, #13]
   2696e:	4634      	mov	r4, r6
   26970:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   26974:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   26978:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2697a:	d104      	bne.n	26986 <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   2697c:	69ab      	ldr	r3, [r5, #24]
   2697e:	b913      	cbnz	r3, 26986 <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
   26980:	4628      	mov	r0, r5
   26982:	f001 f9d3 	bl	27d2c <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   26986:	4b26      	ldr	r3, [pc, #152]	; (26a20 <z_cstart+0x138>)
   26988:	2600      	movs	r6, #0
   2698a:	9305      	str	r3, [sp, #20]
   2698c:	2201      	movs	r2, #1
   2698e:	230f      	movs	r3, #15
   26990:	4f24      	ldr	r7, [pc, #144]	; (26a24 <z_cstart+0x13c>)
   26992:	e9cd 3203 	strd	r3, r2, [sp, #12]
   26996:	e9cd 6601 	strd	r6, r6, [sp, #4]
   2699a:	9600      	str	r6, [sp, #0]
   2699c:	4b22      	ldr	r3, [pc, #136]	; (26a28 <z_cstart+0x140>)
   2699e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   269a2:	4922      	ldr	r1, [pc, #136]	; (26a2c <z_cstart+0x144>)
   269a4:	4638      	mov	r0, r7
   269a6:	f002 f88d 	bl	28ac4 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   269aa:	7b7b      	ldrb	r3, [r7, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
   269ac:	60e7      	str	r7, [r4, #12]
   269ae:	f023 0304 	bic.w	r3, r3, #4
   269b2:	737b      	strb	r3, [r7, #13]
	list->head = (sys_dnode_t *)list;
   269b4:	4b1e      	ldr	r3, [pc, #120]	; (26a30 <z_cstart+0x148>)
	list->tail = (sys_dnode_t *)list;
   269b6:	e9c4 3306 	strd	r3, r3, [r4, #24]
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   269ba:	eee1 6a10 	vmsr	fpscr, r6
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   269be:	f3ef 8314 	mrs	r3, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   269c2:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   269c6:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   269ca:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arch_configure_static_mpu_regions();
   269ce:	f7ed fb09 	bl	13fe4 <z_arch_configure_static_mpu_regions>
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arch_configure_dynamic_mpu_regions(main_thread);
   269d2:	480f      	ldr	r0, [pc, #60]	; (26a10 <z_cstart+0x128>)
	_current = main_thread;
   269d4:	60a5      	str	r5, [r4, #8]
	z_arch_configure_dynamic_mpu_regions(main_thread);
   269d6:	f007 fe71 	bl	2e6bc <z_arch_configure_dynamic_mpu_regions>
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   269da:	4b10      	ldr	r3, [pc, #64]	; (26a1c <z_cstart+0x134>)
   269dc:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   269e0:	4a0d      	ldr	r2, [pc, #52]	; (26a18 <z_cstart+0x130>)
   269e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   269e6:	4610      	mov	r0, r2
   269e8:	f383 8809 	msr	PSP, r3
   269ec:	b663      	cpsie	if
   269ee:	f04f 0100 	mov.w	r1, #0
   269f2:	f381 8811 	msr	BASEPRI, r1
   269f6:	f3bf 8f6f 	isb	sy
   269fa:	2100      	movs	r1, #0
   269fc:	2200      	movs	r2, #0
   269fe:	2300      	movs	r3, #0
   26a00:	f007 fc86 	bl	2e310 <z_thread_entry>
   26a04:	2002aec0 	.word	0x2002aec0
   26a08:	e000ed00 	.word	0xe000ed00
   26a0c:	20027730 	.word	0x20027730
   26a10:	20023590 	.word	0x20023590
   26a14:	00035c33 	.word	0x00035c33
   26a18:	000268b9 	.word	0x000268b9
   26a1c:	20028d80 	.word	0x20028d80
   26a20:	00035c38 	.word	0x00035c38
   26a24:	200234e0 	.word	0x200234e0
   26a28:	0002683d 	.word	0x0002683d
   26a2c:	2002ad80 	.word	0x2002ad80
   26a30:	20027748 	.word	0x20027748

00026a34 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   26a34:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   26a36:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   26a38:	4b0a      	ldr	r3, [pc, #40]	; (26a64 <init_mem_slab_module+0x30>)
   26a3a:	480b      	ldr	r0, [pc, #44]	; (26a68 <init_mem_slab_module+0x34>)
   26a3c:	4283      	cmp	r3, r0
   26a3e:	d301      	bcc.n	26a44 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   26a40:	2000      	movs	r0, #0
   26a42:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
   26a44:	2100      	movs	r1, #0
	p = slab->buffer;
   26a46:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   26a48:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   26a4a:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   26a4c:	42a9      	cmp	r1, r5
   26a4e:	d101      	bne.n	26a54 <init_mem_slab_module+0x20>
	     slab++) {
   26a50:	331c      	adds	r3, #28
   26a52:	e7f3      	b.n	26a3c <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   26a54:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   26a56:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
   26a58:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   26a5a:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   26a5c:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
   26a5e:	4432      	add	r2, r6
   26a60:	e7f4      	b.n	26a4c <init_mem_slab_module+0x18>
   26a62:	bf00      	nop
   26a64:	2002def8 	.word	0x2002def8
   26a68:	2002df30 	.word	0x2002df30

00026a6c <k_mem_slab_init>:
SYS_INIT(init_mem_slab_module, PRE_KERNEL_1,
	 CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void k_mem_slab_init(struct k_mem_slab *slab, void *buffer,
		    size_t block_size, u32_t num_blocks)
{
   26a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26a6e:	461e      	mov	r6, r3
	/* block size must be word aligned */
	__ASSERT((slab->block_size & (sizeof(void *) - 1)) == 0,
   26a70:	68c3      	ldr	r3, [r0, #12]
{
   26a72:	4604      	mov	r4, r0
	__ASSERT((slab->block_size & (sizeof(void *) - 1)) == 0,
   26a74:	079b      	lsls	r3, r3, #30
{
   26a76:	460d      	mov	r5, r1
   26a78:	4617      	mov	r7, r2
	__ASSERT((slab->block_size & (sizeof(void *) - 1)) == 0,
   26a7a:	d00c      	beq.n	26a96 <k_mem_slab_init+0x2a>
   26a7c:	490e      	ldr	r1, [pc, #56]	; (26ab8 <k_mem_slab_init+0x4c>)
   26a7e:	2350      	movs	r3, #80	; 0x50
   26a80:	4a0e      	ldr	r2, [pc, #56]	; (26abc <k_mem_slab_init+0x50>)
   26a82:	480f      	ldr	r0, [pc, #60]	; (26ac0 <k_mem_slab_init+0x54>)
   26a84:	f007 fdd5 	bl	2e632 <printk>
   26a88:	480e      	ldr	r0, [pc, #56]	; (26ac4 <k_mem_slab_init+0x58>)
   26a8a:	f007 fdd2 	bl	2e632 <printk>
   26a8e:	2150      	movs	r1, #80	; 0x50
   26a90:	480a      	ldr	r0, [pc, #40]	; (26abc <k_mem_slab_init+0x50>)
   26a92:	f007 fddb 	bl	2e64c <assert_post_action>
		 "block size not word aligned");

	slab->num_blocks = num_blocks;
	slab->block_size = block_size;
	slab->buffer = buffer;
	slab->num_used = 0U;
   26a96:	2300      	movs	r3, #0
	slab->block_size = block_size;
   26a98:	e9c4 6702 	strd	r6, r7, [r4, #8]
	slab->free_list = NULL;
   26a9c:	e9c4 3305 	strd	r3, r3, [r4, #20]
	slab->buffer = buffer;
   26aa0:	6125      	str	r5, [r4, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   26aa2:	429e      	cmp	r6, r3
   26aa4:	d102      	bne.n	26aac <k_mem_slab_init+0x40>
   26aa6:	e9c4 4400 	strd	r4, r4, [r4]
	create_free_list(slab);
	z_waitq_init(&slab->wait_q);
	SYS_TRACING_OBJ_INIT(k_mem_slab, slab);

	z_object_init(slab);
}
   26aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*(char **)p = slab->free_list;
   26aac:	6962      	ldr	r2, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   26aae:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   26ab0:	602a      	str	r2, [r5, #0]
		slab->free_list = p;
   26ab2:	6165      	str	r5, [r4, #20]
		p += slab->block_size;
   26ab4:	443d      	add	r5, r7
   26ab6:	e7f4      	b.n	26aa2 <k_mem_slab_init+0x36>
   26ab8:	00035c68 	.word	0x00035c68
   26abc:	00035c3d 	.word	0x00035c3d
   26ac0:	0003452c 	.word	0x0003452c
   26ac4:	00035c97 	.word	0x00035c97

00026ac8 <k_mem_slab_alloc>:

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   26ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26aca:	4604      	mov	r4, r0
   26acc:	460d      	mov	r5, r1
   26ace:	4616      	mov	r6, r2
   26ad0:	f04f 0320 	mov.w	r3, #32
   26ad4:	f3ef 8711 	mrs	r7, BASEPRI
   26ad8:	f383 8811 	msr	BASEPRI, r3
   26adc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   26ae0:	482b      	ldr	r0, [pc, #172]	; (26b90 <k_mem_slab_alloc+0xc8>)
   26ae2:	f002 f809 	bl	28af8 <z_spin_lock_valid>
   26ae6:	b960      	cbnz	r0, 26b02 <k_mem_slab_alloc+0x3a>
   26ae8:	492a      	ldr	r1, [pc, #168]	; (26b94 <k_mem_slab_alloc+0xcc>)
   26aea:	234e      	movs	r3, #78	; 0x4e
   26aec:	4a2a      	ldr	r2, [pc, #168]	; (26b98 <k_mem_slab_alloc+0xd0>)
   26aee:	482b      	ldr	r0, [pc, #172]	; (26b9c <k_mem_slab_alloc+0xd4>)
   26af0:	f007 fd9f 	bl	2e632 <printk>
   26af4:	482a      	ldr	r0, [pc, #168]	; (26ba0 <k_mem_slab_alloc+0xd8>)
   26af6:	f007 fd9c 	bl	2e632 <printk>
   26afa:	214e      	movs	r1, #78	; 0x4e
   26afc:	4826      	ldr	r0, [pc, #152]	; (26b98 <k_mem_slab_alloc+0xd0>)
   26afe:	f007 fda5 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   26b02:	4823      	ldr	r0, [pc, #140]	; (26b90 <k_mem_slab_alloc+0xc8>)
   26b04:	f002 f816 	bl	28b34 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	/* block size must be word aligned */
	__ASSERT((slab->block_size & (sizeof(void *) - 1)) == 0,
   26b08:	68e3      	ldr	r3, [r4, #12]
   26b0a:	079b      	lsls	r3, r3, #30
   26b0c:	d00c      	beq.n	26b28 <k_mem_slab_alloc+0x60>
   26b0e:	4925      	ldr	r1, [pc, #148]	; (26ba4 <k_mem_slab_alloc+0xdc>)
   26b10:	2364      	movs	r3, #100	; 0x64
   26b12:	4a25      	ldr	r2, [pc, #148]	; (26ba8 <k_mem_slab_alloc+0xe0>)
   26b14:	4821      	ldr	r0, [pc, #132]	; (26b9c <k_mem_slab_alloc+0xd4>)
   26b16:	f007 fd8c 	bl	2e632 <printk>
   26b1a:	4824      	ldr	r0, [pc, #144]	; (26bac <k_mem_slab_alloc+0xe4>)
   26b1c:	f007 fd89 	bl	2e632 <printk>
   26b20:	2164      	movs	r1, #100	; 0x64
   26b22:	4821      	ldr	r0, [pc, #132]	; (26ba8 <k_mem_slab_alloc+0xe0>)
   26b24:	f007 fd92 	bl	2e64c <assert_post_action>
		 "block size not word aligned");

	if (slab->free_list != NULL) {
   26b28:	6963      	ldr	r3, [r4, #20]
   26b2a:	b1eb      	cbz	r3, 26b68 <k_mem_slab_alloc+0xa0>
		/* take a free block */
		*mem = slab->free_list;
   26b2c:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   26b2e:	6963      	ldr	r3, [r4, #20]
   26b30:	681b      	ldr	r3, [r3, #0]
   26b32:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   26b34:	69a3      	ldr	r3, [r4, #24]
   26b36:	3301      	adds	r3, #1
   26b38:	61a3      	str	r3, [r4, #24]
		result = 0;
   26b3a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   26b3c:	4814      	ldr	r0, [pc, #80]	; (26b90 <k_mem_slab_alloc+0xc8>)
   26b3e:	f001 ffe9 	bl	28b14 <z_spin_unlock_valid>
   26b42:	b960      	cbnz	r0, 26b5e <k_mem_slab_alloc+0x96>
   26b44:	491a      	ldr	r1, [pc, #104]	; (26bb0 <k_mem_slab_alloc+0xe8>)
   26b46:	2361      	movs	r3, #97	; 0x61
   26b48:	4a13      	ldr	r2, [pc, #76]	; (26b98 <k_mem_slab_alloc+0xd0>)
   26b4a:	4814      	ldr	r0, [pc, #80]	; (26b9c <k_mem_slab_alloc+0xd4>)
   26b4c:	f007 fd71 	bl	2e632 <printk>
   26b50:	4818      	ldr	r0, [pc, #96]	; (26bb4 <k_mem_slab_alloc+0xec>)
   26b52:	f007 fd6e 	bl	2e632 <printk>
   26b56:	2161      	movs	r1, #97	; 0x61
   26b58:	480f      	ldr	r0, [pc, #60]	; (26b98 <k_mem_slab_alloc+0xd0>)
   26b5a:	f007 fd77 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   26b5e:	f387 8811 	msr	BASEPRI, r7
   26b62:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   26b66:	e010      	b.n	26b8a <k_mem_slab_alloc+0xc2>
	} else if (timeout == K_NO_WAIT) {
   26b68:	b91e      	cbnz	r6, 26b72 <k_mem_slab_alloc+0xaa>
		*mem = NULL;
   26b6a:	602e      	str	r6, [r5, #0]
		result = -ENOMEM;
   26b6c:	f06f 040b 	mvn.w	r4, #11
   26b70:	e7e4      	b.n	26b3c <k_mem_slab_alloc+0x74>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   26b72:	4622      	mov	r2, r4
   26b74:	4633      	mov	r3, r6
   26b76:	4639      	mov	r1, r7
   26b78:	4805      	ldr	r0, [pc, #20]	; (26b90 <k_mem_slab_alloc+0xc8>)
   26b7a:	f001 fb89 	bl	28290 <z_pend_curr>
		if (result == 0) {
   26b7e:	4604      	mov	r4, r0
   26b80:	b918      	cbnz	r0, 26b8a <k_mem_slab_alloc+0xc2>
			*mem = _current->base.swap_data;
   26b82:	4b0d      	ldr	r3, [pc, #52]	; (26bb8 <k_mem_slab_alloc+0xf0>)
   26b84:	689b      	ldr	r3, [r3, #8]
   26b86:	695b      	ldr	r3, [r3, #20]
   26b88:	602b      	str	r3, [r5, #0]
}
   26b8a:	4620      	mov	r0, r4
   26b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26b8e:	bf00      	nop
   26b90:	20023640 	.word	0x20023640
   26b94:	0003494a 	.word	0x0003494a
   26b98:	0003491e 	.word	0x0003491e
   26b9c:	0003452c 	.word	0x0003452c
   26ba0:	0003495f 	.word	0x0003495f
   26ba4:	00035c68 	.word	0x00035c68
   26ba8:	00035c3d 	.word	0x00035c3d
   26bac:	00035c97 	.word	0x00035c97
   26bb0:	00034974 	.word	0x00034974
   26bb4:	0003498b 	.word	0x0003498b
   26bb8:	20027730 	.word	0x20027730

00026bbc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   26bbc:	b570      	push	{r4, r5, r6, lr}
   26bbe:	4604      	mov	r4, r0
   26bc0:	460d      	mov	r5, r1
	__asm__ volatile(
   26bc2:	f04f 0320 	mov.w	r3, #32
   26bc6:	f3ef 8611 	mrs	r6, BASEPRI
   26bca:	f383 8811 	msr	BASEPRI, r3
   26bce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   26bd2:	4823      	ldr	r0, [pc, #140]	; (26c60 <k_mem_slab_free+0xa4>)
   26bd4:	f001 ff90 	bl	28af8 <z_spin_lock_valid>
   26bd8:	b960      	cbnz	r0, 26bf4 <k_mem_slab_free+0x38>
   26bda:	4922      	ldr	r1, [pc, #136]	; (26c64 <k_mem_slab_free+0xa8>)
   26bdc:	234e      	movs	r3, #78	; 0x4e
   26bde:	4a22      	ldr	r2, [pc, #136]	; (26c68 <k_mem_slab_free+0xac>)
   26be0:	4822      	ldr	r0, [pc, #136]	; (26c6c <k_mem_slab_free+0xb0>)
   26be2:	f007 fd26 	bl	2e632 <printk>
   26be6:	4822      	ldr	r0, [pc, #136]	; (26c70 <k_mem_slab_free+0xb4>)
   26be8:	f007 fd23 	bl	2e632 <printk>
   26bec:	214e      	movs	r1, #78	; 0x4e
   26bee:	481e      	ldr	r0, [pc, #120]	; (26c68 <k_mem_slab_free+0xac>)
   26bf0:	f007 fd2c 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   26bf4:	481a      	ldr	r0, [pc, #104]	; (26c60 <k_mem_slab_free+0xa4>)
   26bf6:	f001 ff9d 	bl	28b34 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   26bfa:	4620      	mov	r0, r4
   26bfc:	f001 fc0c 	bl	28418 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   26c00:	b180      	cbz	r0, 26c24 <k_mem_slab_free+0x68>
}

static ALWAYS_INLINE void
z_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   26c02:	2100      	movs	r1, #0
		z_set_thread_return_value_with_data(pending_thread, 0, *mem);
   26c04:	682a      	ldr	r2, [r5, #0]
   26c06:	6681      	str	r1, [r0, #104]	; 0x68
	thread->base.swap_data = data;
   26c08:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   26c0a:	7b42      	ldrb	r2, [r0, #13]
   26c0c:	06d2      	lsls	r2, r2, #27
   26c0e:	d103      	bne.n	26c18 <k_mem_slab_free+0x5c>
	if (z_is_thread_ready(thread)) {
   26c10:	6983      	ldr	r3, [r0, #24]
   26c12:	b90b      	cbnz	r3, 26c18 <k_mem_slab_free+0x5c>
		z_add_thread_to_ready_q(thread);
   26c14:	f001 f88a 	bl	27d2c <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   26c18:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   26c1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   26c1e:	4810      	ldr	r0, [pc, #64]	; (26c60 <k_mem_slab_free+0xa4>)
   26c20:	f000 be90 	b.w	27944 <z_reschedule>
		**(char ***)mem = slab->free_list;
   26c24:	682b      	ldr	r3, [r5, #0]
   26c26:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   26c28:	480d      	ldr	r0, [pc, #52]	; (26c60 <k_mem_slab_free+0xa4>)
   26c2a:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   26c2c:	682b      	ldr	r3, [r5, #0]
   26c2e:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   26c30:	69a3      	ldr	r3, [r4, #24]
   26c32:	3b01      	subs	r3, #1
   26c34:	61a3      	str	r3, [r4, #24]
   26c36:	f001 ff6d 	bl	28b14 <z_spin_unlock_valid>
   26c3a:	b960      	cbnz	r0, 26c56 <k_mem_slab_free+0x9a>
   26c3c:	490d      	ldr	r1, [pc, #52]	; (26c74 <k_mem_slab_free+0xb8>)
   26c3e:	2361      	movs	r3, #97	; 0x61
   26c40:	4a09      	ldr	r2, [pc, #36]	; (26c68 <k_mem_slab_free+0xac>)
   26c42:	480a      	ldr	r0, [pc, #40]	; (26c6c <k_mem_slab_free+0xb0>)
   26c44:	f007 fcf5 	bl	2e632 <printk>
   26c48:	480b      	ldr	r0, [pc, #44]	; (26c78 <k_mem_slab_free+0xbc>)
   26c4a:	f007 fcf2 	bl	2e632 <printk>
   26c4e:	2161      	movs	r1, #97	; 0x61
   26c50:	4805      	ldr	r0, [pc, #20]	; (26c68 <k_mem_slab_free+0xac>)
   26c52:	f007 fcfb 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   26c56:	f386 8811 	msr	BASEPRI, r6
   26c5a:	f3bf 8f6f 	isb	sy
}
   26c5e:	bd70      	pop	{r4, r5, r6, pc}
   26c60:	20023640 	.word	0x20023640
   26c64:	0003494a 	.word	0x0003494a
   26c68:	0003491e 	.word	0x0003491e
   26c6c:	0003452c 	.word	0x0003452c
   26c70:	0003495f 	.word	0x0003495f
   26c74:	00034974 	.word	0x00034974
   26c78:	0003498b 	.word	0x0003498b

00026c7c <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   26c7c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   26c7e:	4c07      	ldr	r4, [pc, #28]	; (26c9c <init_static_pools+0x20>)
   26c80:	4d07      	ldr	r5, [pc, #28]	; (26ca0 <init_static_pools+0x24>)
   26c82:	42ac      	cmp	r4, r5
   26c84:	d301      	bcc.n	26c8a <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   26c86:	2000      	movs	r0, #0
   26c88:	bd38      	pop	{r3, r4, r5, pc}
   26c8a:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   26c8e:	4620      	mov	r0, r4
   26c90:	e9c4 3305 	strd	r3, r3, [r4, #20]
   26c94:	f007 fa2a 	bl	2e0ec <z_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   26c98:	341c      	adds	r4, #28
   26c9a:	e7f2      	b.n	26c82 <init_static_pools+0x6>
   26c9c:	2002df30 	.word	0x2002df30
   26ca0:	2002df4c 	.word	0x2002df4c

00026ca4 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   26ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26ca8:	4606      	mov	r6, r0
   26caa:	b085      	sub	sp, #20
   26cac:	460d      	mov	r5, r1
   26cae:	4617      	mov	r7, r2
   26cb0:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   26cb2:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   26cb6:	2b0d      	cmp	r3, #13
   26cb8:	d805      	bhi.n	26cc6 <k_mem_pool_alloc+0x22>
   26cba:	2b00      	cmp	r3, #0
   26cbc:	d05d      	beq.n	26d7a <k_mem_pool_alloc+0xd6>
   26cbe:	4b38      	ldr	r3, [pc, #224]	; (26da0 <k_mem_pool_alloc+0xfc>)
   26cc0:	685b      	ldr	r3, [r3, #4]
   26cc2:	051a      	lsls	r2, r3, #20
   26cc4:	d459      	bmi.n	26d7a <k_mem_pool_alloc+0xd6>
	int ret;
	s64_t end = 0;

	__ASSERT(!(z_is_in_isr() && timeout != K_NO_WAIT), "");
   26cc6:	2c00      	cmp	r4, #0
   26cc8:	d14a      	bne.n	26d60 <k_mem_pool_alloc+0xbc>
	s64_t end = 0;
   26cca:	2200      	movs	r2, #0
	return pool - &_k_mem_pool_list_start[0];
   26ccc:	4b35      	ldr	r3, [pc, #212]	; (26da4 <k_mem_pool_alloc+0x100>)

	if (timeout > 0) {
		end = z_tick_get() + z_ms_to_ticks(timeout);
   26cce:	4690      	mov	r8, r2
	return pool - &_k_mem_pool_list_start[0];
   26cd0:	1af3      	subs	r3, r6, r3
   26cd2:	4a35      	ldr	r2, [pc, #212]	; (26da8 <k_mem_pool_alloc+0x104>)
   26cd4:	109b      	asrs	r3, r3, #2
   26cd6:	fb02 fa03 	mul.w	sl, r2, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   26cda:	f106 0b14 	add.w	fp, r6, #20
		block->id.pool = pool_id(p);
   26cde:	fa5f fa8a 	uxtb.w	sl, sl
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
   26ce2:	9500      	str	r5, [sp, #0]
   26ce4:	ab03      	add	r3, sp, #12
   26ce6:	aa02      	add	r2, sp, #8
   26ce8:	4639      	mov	r1, r7
   26cea:	4630      	mov	r0, r6
   26cec:	f007 fa49 	bl	2e182 <z_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   26cf0:	f110 0f0b 	cmn.w	r0, #11
   26cf4:	d10b      	bne.n	26d0e <k_mem_pool_alloc+0x6a>
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
   26cf6:	9500      	str	r5, [sp, #0]
   26cf8:	ab03      	add	r3, sp, #12
   26cfa:	aa02      	add	r2, sp, #8
   26cfc:	4639      	mov	r1, r7
   26cfe:	4630      	mov	r0, r6
   26d00:	f007 fa3f 	bl	2e182 <z_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   26d04:	f110 0f0b 	cmn.w	r0, #11
   26d08:	bf08      	it	eq
   26d0a:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   26d0e:	796b      	ldrb	r3, [r5, #5]
   26d10:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   26d12:	f885 a004 	strb.w	sl, [r5, #4]
		block->id.level = level_num;
   26d16:	f362 0303 	bfi	r3, r2, #0, #4
   26d1a:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   26d1c:	686b      	ldr	r3, [r5, #4]
   26d1e:	9a03      	ldr	r2, [sp, #12]
   26d20:	f362 331f 	bfi	r3, r2, #12, #20
   26d24:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   26d26:	b1c0      	cbz	r0, 26d5a <k_mem_pool_alloc+0xb6>
   26d28:	b1bc      	cbz	r4, 26d5a <k_mem_pool_alloc+0xb6>
   26d2a:	f110 0f0c 	cmn.w	r0, #12
   26d2e:	d114      	bne.n	26d5a <k_mem_pool_alloc+0xb6>
	__asm__ volatile(
   26d30:	f04f 0320 	mov.w	r3, #32
   26d34:	f3ef 8011 	mrs	r0, BASEPRI
   26d38:	f383 8811 	msr	BASEPRI, r3
   26d3c:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
   26d40:	4622      	mov	r2, r4
   26d42:	4659      	mov	r1, fp
   26d44:	f001 fa4c 	bl	281e0 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   26d48:	1c63      	adds	r3, r4, #1
   26d4a:	d0ca      	beq.n	26ce2 <k_mem_pool_alloc+0x3e>
			timeout = end - z_tick_get();
   26d4c:	f002 fb86 	bl	2945c <z_tick_get>

			if (timeout < 0) {
   26d50:	ebb8 0400 	subs.w	r4, r8, r0
   26d54:	d5c5      	bpl.n	26ce2 <k_mem_pool_alloc+0x3e>
				break;
			}
		}
	}

	return -EAGAIN;
   26d56:	f06f 000a 	mvn.w	r0, #10
}
   26d5a:	b005      	add	sp, #20
   26d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(!(z_is_in_isr() && timeout != K_NO_WAIT), "");
   26d60:	4912      	ldr	r1, [pc, #72]	; (26dac <k_mem_pool_alloc+0x108>)
   26d62:	233a      	movs	r3, #58	; 0x3a
   26d64:	4a12      	ldr	r2, [pc, #72]	; (26db0 <k_mem_pool_alloc+0x10c>)
   26d66:	4813      	ldr	r0, [pc, #76]	; (26db4 <k_mem_pool_alloc+0x110>)
   26d68:	f007 fc63 	bl	2e632 <printk>
   26d6c:	4812      	ldr	r0, [pc, #72]	; (26db8 <k_mem_pool_alloc+0x114>)
   26d6e:	f007 fc60 	bl	2e632 <printk>
   26d72:	213a      	movs	r1, #58	; 0x3a
   26d74:	480e      	ldr	r0, [pc, #56]	; (26db0 <k_mem_pool_alloc+0x10c>)
   26d76:	f007 fc69 	bl	2e64c <assert_post_action>
	if (timeout > 0) {
   26d7a:	2c00      	cmp	r4, #0
   26d7c:	dda5      	ble.n	26cca <k_mem_pool_alloc+0x26>
		end = z_tick_get() + z_ms_to_ticks(timeout);
   26d7e:	f002 fb6d 	bl	2945c <z_tick_get>

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
   26d82:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   26d86:	2100      	movs	r1, #0
   26d88:	4680      	mov	r8, r0
   26d8a:	480c      	ldr	r0, [pc, #48]	; (26dbc <k_mem_pool_alloc+0x118>)
   26d8c:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
   26d90:	2300      	movs	r3, #0
   26d92:	fbcc 0104 	smlal	r0, r1, ip, r4
   26d96:	f7e5 fe55 	bl	ca44 <__aeabi_ldivmod>
   26d9a:	eb18 0200 	adds.w	r2, r8, r0
   26d9e:	e795      	b.n	26ccc <k_mem_pool_alloc+0x28>
   26da0:	e000ed00 	.word	0xe000ed00
   26da4:	2002df30 	.word	0x2002df30
   26da8:	b6db6db7 	.word	0xb6db6db7
   26dac:	00035cdf 	.word	0x00035cdf
   26db0:	00035cb5 	.word	0x00035cb5
   26db4:	0003452c 	.word	0x0003452c
   26db8:	000346b0 	.word	0x000346b0
   26dbc:	0003e7ff 	.word	0x0003e7ff

00026dc0 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   26dc0:	b570      	push	{r4, r5, r6, lr}
   26dc2:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   26dc4:	6802      	ldr	r2, [r0, #0]
   26dc6:	7841      	ldrb	r1, [r0, #1]
   26dc8:	4d23      	ldr	r5, [pc, #140]	; (26e58 <k_mem_pool_free_id+0x98>)
   26dca:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   26dce:	00a4      	lsls	r4, r4, #2
   26dd0:	0b12      	lsrs	r2, r2, #12
   26dd2:	f001 010f 	and.w	r1, r1, #15
   26dd6:	1928      	adds	r0, r5, r4
   26dd8:	f7eb ff68 	bl	12cac <z_sys_mem_pool_block_free>
   26ddc:	f04f 0320 	mov.w	r3, #32
   26de0:	f3ef 8611 	mrs	r6, BASEPRI
   26de4:	f383 8811 	msr	BASEPRI, r3
   26de8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   26dec:	481b      	ldr	r0, [pc, #108]	; (26e5c <k_mem_pool_free_id+0x9c>)
   26dee:	f001 fe83 	bl	28af8 <z_spin_lock_valid>
   26df2:	b960      	cbnz	r0, 26e0e <k_mem_pool_free_id+0x4e>
   26df4:	491a      	ldr	r1, [pc, #104]	; (26e60 <k_mem_pool_free_id+0xa0>)
   26df6:	234e      	movs	r3, #78	; 0x4e
   26df8:	4a1a      	ldr	r2, [pc, #104]	; (26e64 <k_mem_pool_free_id+0xa4>)
   26dfa:	481b      	ldr	r0, [pc, #108]	; (26e68 <k_mem_pool_free_id+0xa8>)
   26dfc:	f007 fc19 	bl	2e632 <printk>
   26e00:	481a      	ldr	r0, [pc, #104]	; (26e6c <k_mem_pool_free_id+0xac>)
   26e02:	f007 fc16 	bl	2e632 <printk>
   26e06:	214e      	movs	r1, #78	; 0x4e
   26e08:	4816      	ldr	r0, [pc, #88]	; (26e64 <k_mem_pool_free_id+0xa4>)
   26e0a:	f007 fc1f 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   26e0e:	4813      	ldr	r0, [pc, #76]	; (26e5c <k_mem_pool_free_id+0x9c>)
   26e10:	f001 fe90 	bl	28b34 <z_spin_lock_set_owner>
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   26e14:	f104 0014 	add.w	r0, r4, #20
   26e18:	4428      	add	r0, r5
   26e1a:	f009 fd61 	bl	308e0 <z_unpend_all>

	if (need_sched != 0) {
   26e1e:	b128      	cbz	r0, 26e2c <k_mem_pool_free_id+0x6c>
		z_reschedule(&lock, key);
   26e20:	4631      	mov	r1, r6
	} else {
		k_spin_unlock(&lock, key);
	}
}
   26e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   26e26:	480d      	ldr	r0, [pc, #52]	; (26e5c <k_mem_pool_free_id+0x9c>)
   26e28:	f000 bd8c 	b.w	27944 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   26e2c:	480b      	ldr	r0, [pc, #44]	; (26e5c <k_mem_pool_free_id+0x9c>)
   26e2e:	f001 fe71 	bl	28b14 <z_spin_unlock_valid>
   26e32:	b960      	cbnz	r0, 26e4e <k_mem_pool_free_id+0x8e>
   26e34:	490e      	ldr	r1, [pc, #56]	; (26e70 <k_mem_pool_free_id+0xb0>)
   26e36:	2361      	movs	r3, #97	; 0x61
   26e38:	4a0a      	ldr	r2, [pc, #40]	; (26e64 <k_mem_pool_free_id+0xa4>)
   26e3a:	480b      	ldr	r0, [pc, #44]	; (26e68 <k_mem_pool_free_id+0xa8>)
   26e3c:	f007 fbf9 	bl	2e632 <printk>
   26e40:	480c      	ldr	r0, [pc, #48]	; (26e74 <k_mem_pool_free_id+0xb4>)
   26e42:	f007 fbf6 	bl	2e632 <printk>
   26e46:	2161      	movs	r1, #97	; 0x61
   26e48:	4806      	ldr	r0, [pc, #24]	; (26e64 <k_mem_pool_free_id+0xa4>)
   26e4a:	f007 fbff 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   26e4e:	f386 8811 	msr	BASEPRI, r6
   26e52:	f3bf 8f6f 	isb	sy
}
   26e56:	bd70      	pop	{r4, r5, r6, pc}
   26e58:	2002df30 	.word	0x2002df30
   26e5c:	20027728 	.word	0x20027728
   26e60:	0003494a 	.word	0x0003494a
   26e64:	0003491e 	.word	0x0003491e
   26e68:	0003452c 	.word	0x0003452c
   26e6c:	0003495f 	.word	0x0003495f
   26e70:	00034974 	.word	0x00034974
   26e74:	0003498b 	.word	0x0003498b

00026e78 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   26e78:	4601      	mov	r1, r0
   26e7a:	4801      	ldr	r0, [pc, #4]	; (26e80 <k_malloc+0x8>)
   26e7c:	f009 bcb2 	b.w	307e4 <k_mem_pool_malloc>
   26e80:	2002df30 	.word	0x2002df30

00026e84 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   26e84:	4b03      	ldr	r3, [pc, #12]	; (26e94 <z_thread_malloc+0x10>)
{
   26e86:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   26e88:	689b      	ldr	r3, [r3, #8]
   26e8a:	6e18      	ldr	r0, [r3, #96]	; 0x60
   26e8c:	b108      	cbz	r0, 26e92 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   26e8e:	f009 bca9 	b.w	307e4 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   26e92:	4770      	bx	lr
   26e94:	20027730 	.word	0x20027730

00026e98 <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *q, void *data, s32_t timeout)
{
   26e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26e9c:	4604      	mov	r4, r0
   26e9e:	4688      	mov	r8, r1
   26ea0:	4615      	mov	r5, r2
   26ea2:	f3ef 8305 	mrs	r3, IPSR
   26ea6:	2b0d      	cmp	r3, #13
   26ea8:	d804      	bhi.n	26eb4 <z_impl_k_msgq_put+0x1c>
   26eaa:	b18b      	cbz	r3, 26ed0 <z_impl_k_msgq_put+0x38>
   26eac:	4b42      	ldr	r3, [pc, #264]	; (26fb8 <z_impl_k_msgq_put+0x120>)
   26eae:	685b      	ldr	r3, [r3, #4]
   26eb0:	051a      	lsls	r2, r3, #20
   26eb2:	d40d      	bmi.n	26ed0 <z_impl_k_msgq_put+0x38>
	__ASSERT(!z_is_in_isr() || timeout == K_NO_WAIT, "");
   26eb4:	b165      	cbz	r5, 26ed0 <z_impl_k_msgq_put+0x38>
   26eb6:	4941      	ldr	r1, [pc, #260]	; (26fbc <z_impl_k_msgq_put+0x124>)
   26eb8:	2373      	movs	r3, #115	; 0x73
   26eba:	4a41      	ldr	r2, [pc, #260]	; (26fc0 <z_impl_k_msgq_put+0x128>)
   26ebc:	4841      	ldr	r0, [pc, #260]	; (26fc4 <z_impl_k_msgq_put+0x12c>)
   26ebe:	f007 fbb8 	bl	2e632 <printk>
   26ec2:	4841      	ldr	r0, [pc, #260]	; (26fc8 <z_impl_k_msgq_put+0x130>)
   26ec4:	f007 fbb5 	bl	2e632 <printk>
   26ec8:	2173      	movs	r1, #115	; 0x73
   26eca:	483d      	ldr	r0, [pc, #244]	; (26fc0 <z_impl_k_msgq_put+0x128>)
   26ecc:	f007 fbbe 	bl	2e64c <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&q->lock);
   26ed0:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   26ed4:	f04f 0320 	mov.w	r3, #32
   26ed8:	f3ef 8711 	mrs	r7, BASEPRI
   26edc:	f383 8811 	msr	BASEPRI, r3
   26ee0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   26ee4:	4630      	mov	r0, r6
   26ee6:	f001 fe07 	bl	28af8 <z_spin_lock_valid>
   26eea:	b960      	cbnz	r0, 26f06 <z_impl_k_msgq_put+0x6e>
   26eec:	4937      	ldr	r1, [pc, #220]	; (26fcc <z_impl_k_msgq_put+0x134>)
   26eee:	234e      	movs	r3, #78	; 0x4e
   26ef0:	4a37      	ldr	r2, [pc, #220]	; (26fd0 <z_impl_k_msgq_put+0x138>)
   26ef2:	4834      	ldr	r0, [pc, #208]	; (26fc4 <z_impl_k_msgq_put+0x12c>)
   26ef4:	f007 fb9d 	bl	2e632 <printk>
   26ef8:	4836      	ldr	r0, [pc, #216]	; (26fd4 <z_impl_k_msgq_put+0x13c>)
   26efa:	f007 fb9a 	bl	2e632 <printk>
   26efe:	214e      	movs	r1, #78	; 0x4e
   26f00:	4833      	ldr	r0, [pc, #204]	; (26fd0 <z_impl_k_msgq_put+0x138>)
   26f02:	f007 fba3 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   26f06:	4630      	mov	r0, r6
   26f08:	f001 fe14 	bl	28b34 <z_spin_lock_set_owner>
	struct k_thread *pending_thread;
	int result;

	if (q->used_msgs < q->max_msgs) {
   26f0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   26f0e:	6923      	ldr	r3, [r4, #16]
   26f10:	429a      	cmp	r2, r3
   26f12:	d241      	bcs.n	26f98 <z_impl_k_msgq_put+0x100>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&q->wait_q);
   26f14:	4620      	mov	r0, r4
   26f16:	f001 fa7f 	bl	28418 <z_unpend_first_thread>
   26f1a:	68e2      	ldr	r2, [r4, #12]
		if (pending_thread != NULL) {
   26f1c:	4605      	mov	r5, r0
   26f1e:	4641      	mov	r1, r8
   26f20:	b1a0      	cbz	r0, 26f4c <z_impl_k_msgq_put+0xb4>
   26f22:	6940      	ldr	r0, [r0, #20]
   26f24:	f7e6 fe58 	bl	dbd8 <memcpy>
   26f28:	2300      	movs	r3, #0
   26f2a:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   26f2c:	7b6b      	ldrb	r3, [r5, #13]
   26f2e:	06db      	lsls	r3, r3, #27
   26f30:	d104      	bne.n	26f3c <z_impl_k_msgq_put+0xa4>
	if (z_is_thread_ready(thread)) {
   26f32:	69ab      	ldr	r3, [r5, #24]
   26f34:	b913      	cbnz	r3, 26f3c <z_impl_k_msgq_put+0xa4>
		z_add_thread_to_ready_q(thread);
   26f36:	4628      	mov	r0, r5
   26f38:	f000 fef8 	bl	27d2c <z_add_thread_to_ready_q>
			(void)memcpy(pending_thread->base.swap_data, data,
			       q->msg_size);
			/* wake up waiting thread */
			z_set_thread_return_value(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&q->lock, key);
   26f3c:	4639      	mov	r1, r7
   26f3e:	4630      	mov	r0, r6
   26f40:	f000 fd00 	bl	27944 <z_reschedule>
			return 0;
   26f44:	2400      	movs	r4, #0
	}

	k_spin_unlock(&q->lock, key);

	return result;
}
   26f46:	4620      	mov	r0, r4
   26f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26f4c:	6a20      	ldr	r0, [r4, #32]
   26f4e:	f7e6 fe43 	bl	dbd8 <memcpy>
			q->write_ptr += q->msg_size;
   26f52:	6a23      	ldr	r3, [r4, #32]
   26f54:	68e2      	ldr	r2, [r4, #12]
   26f56:	4413      	add	r3, r2
			if (q->write_ptr == q->buffer_end) {
   26f58:	69a2      	ldr	r2, [r4, #24]
			q->write_ptr += q->msg_size;
   26f5a:	6223      	str	r3, [r4, #32]
			if (q->write_ptr == q->buffer_end) {
   26f5c:	4293      	cmp	r3, r2
				q->write_ptr = q->buffer_start;
   26f5e:	bf04      	itt	eq
   26f60:	6963      	ldreq	r3, [r4, #20]
   26f62:	6223      	streq	r3, [r4, #32]
			q->used_msgs++;
   26f64:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26f66:	3301      	adds	r3, #1
   26f68:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   26f6a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   26f6c:	4630      	mov	r0, r6
   26f6e:	f001 fdd1 	bl	28b14 <z_spin_unlock_valid>
   26f72:	b960      	cbnz	r0, 26f8e <z_impl_k_msgq_put+0xf6>
   26f74:	4918      	ldr	r1, [pc, #96]	; (26fd8 <z_impl_k_msgq_put+0x140>)
   26f76:	2361      	movs	r3, #97	; 0x61
   26f78:	4a15      	ldr	r2, [pc, #84]	; (26fd0 <z_impl_k_msgq_put+0x138>)
   26f7a:	4812      	ldr	r0, [pc, #72]	; (26fc4 <z_impl_k_msgq_put+0x12c>)
   26f7c:	f007 fb59 	bl	2e632 <printk>
   26f80:	4816      	ldr	r0, [pc, #88]	; (26fdc <z_impl_k_msgq_put+0x144>)
   26f82:	f007 fb56 	bl	2e632 <printk>
   26f86:	2161      	movs	r1, #97	; 0x61
   26f88:	4811      	ldr	r0, [pc, #68]	; (26fd0 <z_impl_k_msgq_put+0x138>)
   26f8a:	f007 fb5f 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   26f8e:	f387 8811 	msr	BASEPRI, r7
   26f92:	f3bf 8f6f 	isb	sy
	return result;
   26f96:	e7d6      	b.n	26f46 <z_impl_k_msgq_put+0xae>
	} else if (timeout == K_NO_WAIT) {
   26f98:	b15d      	cbz	r5, 26fb2 <z_impl_k_msgq_put+0x11a>
		_current->base.swap_data = data;
   26f9a:	4b11      	ldr	r3, [pc, #68]	; (26fe0 <z_impl_k_msgq_put+0x148>)
		return z_pend_curr(&q->lock, key, &q->wait_q, timeout);
   26f9c:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   26f9e:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&q->lock, key, &q->wait_q, timeout);
   26fa0:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   26fa2:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&q->lock, key, &q->wait_q, timeout);
   26fa6:	4630      	mov	r0, r6
   26fa8:	462b      	mov	r3, r5
}
   26faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&q->lock, key, &q->wait_q, timeout);
   26fae:	f001 b96f 	b.w	28290 <z_pend_curr>
		result = -ENOMSG;
   26fb2:	f06f 0422 	mvn.w	r4, #34	; 0x22
   26fb6:	e7d9      	b.n	26f6c <z_impl_k_msgq_put+0xd4>
   26fb8:	e000ed00 	.word	0xe000ed00
   26fbc:	00035d4e 	.word	0x00035d4e
   26fc0:	00035cfe 	.word	0x00035cfe
   26fc4:	0003452c 	.word	0x0003452c
   26fc8:	000346b0 	.word	0x000346b0
   26fcc:	0003494a 	.word	0x0003494a
   26fd0:	0003491e 	.word	0x0003491e
   26fd4:	0003495f 	.word	0x0003495f
   26fd8:	00034974 	.word	0x00034974
   26fdc:	0003498b 	.word	0x0003498b
   26fe0:	20027730 	.word	0x20027730

00026fe4 <z_impl_k_msgq_get>:
	return 0;
}
#endif

int z_impl_k_msgq_get(struct k_msgq *q, void *data, s32_t timeout)
{
   26fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26fe8:	4604      	mov	r4, r0
   26fea:	4688      	mov	r8, r1
   26fec:	4615      	mov	r5, r2
   26fee:	f3ef 8305 	mrs	r3, IPSR
   26ff2:	2b0d      	cmp	r3, #13
   26ff4:	d804      	bhi.n	27000 <z_impl_k_msgq_get+0x1c>
   26ff6:	b18b      	cbz	r3, 2701c <z_impl_k_msgq_get+0x38>
   26ff8:	4b48      	ldr	r3, [pc, #288]	; (2711c <z_impl_k_msgq_get+0x138>)
   26ffa:	685b      	ldr	r3, [r3, #4]
   26ffc:	051a      	lsls	r2, r3, #20
   26ffe:	d40d      	bmi.n	2701c <z_impl_k_msgq_get+0x38>
	__ASSERT(!z_is_in_isr() || timeout == K_NO_WAIT, "");
   27000:	b165      	cbz	r5, 2701c <z_impl_k_msgq_get+0x38>
   27002:	4947      	ldr	r1, [pc, #284]	; (27120 <z_impl_k_msgq_get+0x13c>)
   27004:	23be      	movs	r3, #190	; 0xbe
   27006:	4a47      	ldr	r2, [pc, #284]	; (27124 <z_impl_k_msgq_get+0x140>)
   27008:	4847      	ldr	r0, [pc, #284]	; (27128 <z_impl_k_msgq_get+0x144>)
   2700a:	f007 fb12 	bl	2e632 <printk>
   2700e:	4847      	ldr	r0, [pc, #284]	; (2712c <z_impl_k_msgq_get+0x148>)
   27010:	f007 fb0f 	bl	2e632 <printk>
   27014:	21be      	movs	r1, #190	; 0xbe
   27016:	4843      	ldr	r0, [pc, #268]	; (27124 <z_impl_k_msgq_get+0x140>)
   27018:	f007 fb18 	bl	2e64c <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&q->lock);
   2701c:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   27020:	f04f 0320 	mov.w	r3, #32
   27024:	f3ef 8711 	mrs	r7, BASEPRI
   27028:	f383 8811 	msr	BASEPRI, r3
   2702c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   27030:	4630      	mov	r0, r6
   27032:	f001 fd61 	bl	28af8 <z_spin_lock_valid>
   27036:	b960      	cbnz	r0, 27052 <z_impl_k_msgq_get+0x6e>
   27038:	493d      	ldr	r1, [pc, #244]	; (27130 <z_impl_k_msgq_get+0x14c>)
   2703a:	234e      	movs	r3, #78	; 0x4e
   2703c:	4a3d      	ldr	r2, [pc, #244]	; (27134 <z_impl_k_msgq_get+0x150>)
   2703e:	483a      	ldr	r0, [pc, #232]	; (27128 <z_impl_k_msgq_get+0x144>)
   27040:	f007 faf7 	bl	2e632 <printk>
   27044:	483c      	ldr	r0, [pc, #240]	; (27138 <z_impl_k_msgq_get+0x154>)
   27046:	f007 faf4 	bl	2e632 <printk>
   2704a:	214e      	movs	r1, #78	; 0x4e
   2704c:	4839      	ldr	r0, [pc, #228]	; (27134 <z_impl_k_msgq_get+0x150>)
   2704e:	f007 fafd 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   27052:	4630      	mov	r0, r6
   27054:	f001 fd6e 	bl	28b34 <z_spin_lock_set_owner>
	struct k_thread *pending_thread;
	int result;

	if (q->used_msgs > 0) {
   27058:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2705a:	2b00      	cmp	r3, #0
   2705c:	d039      	beq.n	270d2 <z_impl_k_msgq_get+0xee>
   2705e:	68e2      	ldr	r2, [r4, #12]
   27060:	69e1      	ldr	r1, [r4, #28]
   27062:	4640      	mov	r0, r8
   27064:	f7e6 fdb8 	bl	dbd8 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, q->read_ptr, q->msg_size);
		q->read_ptr += q->msg_size;
   27068:	69e3      	ldr	r3, [r4, #28]
   2706a:	68e2      	ldr	r2, [r4, #12]
			q->read_ptr = q->buffer_start;
		}
		q->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&q->wait_q);
   2706c:	4620      	mov	r0, r4
		q->read_ptr += q->msg_size;
   2706e:	4413      	add	r3, r2
		if (q->read_ptr == q->buffer_end) {
   27070:	69a2      	ldr	r2, [r4, #24]
		q->read_ptr += q->msg_size;
   27072:	61e3      	str	r3, [r4, #28]
		if (q->read_ptr == q->buffer_end) {
   27074:	4293      	cmp	r3, r2
			q->read_ptr = q->buffer_start;
   27076:	bf04      	itt	eq
   27078:	6963      	ldreq	r3, [r4, #20]
   2707a:	61e3      	streq	r3, [r4, #28]
		q->used_msgs--;
   2707c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2707e:	3b01      	subs	r3, #1
   27080:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&q->wait_q);
   27082:	f001 f9c9 	bl	28418 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   27086:	4605      	mov	r5, r0
   27088:	2800      	cmp	r0, #0
   2708a:	d031      	beq.n	270f0 <z_impl_k_msgq_get+0x10c>
   2708c:	68e2      	ldr	r2, [r4, #12]
   2708e:	6941      	ldr	r1, [r0, #20]
   27090:	6a20      	ldr	r0, [r4, #32]
   27092:	f7e6 fda1 	bl	dbd8 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(q->write_ptr, pending_thread->base.swap_data,
			       q->msg_size);
			q->write_ptr += q->msg_size;
   27096:	6a23      	ldr	r3, [r4, #32]
   27098:	68e2      	ldr	r2, [r4, #12]
   2709a:	4413      	add	r3, r2
			if (q->write_ptr == q->buffer_end) {
   2709c:	69a2      	ldr	r2, [r4, #24]
			q->write_ptr += q->msg_size;
   2709e:	6223      	str	r3, [r4, #32]
			if (q->write_ptr == q->buffer_end) {
   270a0:	4293      	cmp	r3, r2
				q->write_ptr = q->buffer_start;
   270a2:	bf04      	itt	eq
   270a4:	6963      	ldreq	r3, [r4, #20]
   270a6:	6223      	streq	r3, [r4, #32]
			}
			q->used_msgs++;
   270a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   270aa:	3301      	adds	r3, #1
   270ac:	6263      	str	r3, [r4, #36]	; 0x24
   270ae:	2300      	movs	r3, #0
   270b0:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   270b2:	7b6b      	ldrb	r3, [r5, #13]
   270b4:	06db      	lsls	r3, r3, #27
   270b6:	d104      	bne.n	270c2 <z_impl_k_msgq_get+0xde>
	if (z_is_thread_ready(thread)) {
   270b8:	69ab      	ldr	r3, [r5, #24]
   270ba:	b913      	cbnz	r3, 270c2 <z_impl_k_msgq_get+0xde>
		z_add_thread_to_ready_q(thread);
   270bc:	4628      	mov	r0, r5
   270be:	f000 fe35 	bl	27d2c <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			z_set_thread_return_value(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&q->lock, key);
   270c2:	4639      	mov	r1, r7
   270c4:	4630      	mov	r0, r6
   270c6:	f000 fc3d 	bl	27944 <z_reschedule>
			return 0;
   270ca:	2500      	movs	r5, #0
	}

	k_spin_unlock(&q->lock, key);

	return result;
}
   270cc:	4628      	mov	r0, r5
   270ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   270d2:	b15d      	cbz	r5, 270ec <z_impl_k_msgq_get+0x108>
		_current->base.swap_data = data;
   270d4:	4b19      	ldr	r3, [pc, #100]	; (2713c <z_impl_k_msgq_get+0x158>)
		return z_pend_curr(&q->lock, key, &q->wait_q, timeout);
   270d6:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   270d8:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&q->lock, key, &q->wait_q, timeout);
   270da:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   270dc:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&q->lock, key, &q->wait_q, timeout);
   270e0:	4630      	mov	r0, r6
   270e2:	462b      	mov	r3, r5
}
   270e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&q->lock, key, &q->wait_q, timeout);
   270e8:	f001 b8d2 	b.w	28290 <z_pend_curr>
		result = -ENOMSG;
   270ec:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   270f0:	4630      	mov	r0, r6
   270f2:	f001 fd0f 	bl	28b14 <z_spin_unlock_valid>
   270f6:	b960      	cbnz	r0, 27112 <z_impl_k_msgq_get+0x12e>
   270f8:	4911      	ldr	r1, [pc, #68]	; (27140 <z_impl_k_msgq_get+0x15c>)
   270fa:	2361      	movs	r3, #97	; 0x61
   270fc:	4a0d      	ldr	r2, [pc, #52]	; (27134 <z_impl_k_msgq_get+0x150>)
   270fe:	480a      	ldr	r0, [pc, #40]	; (27128 <z_impl_k_msgq_get+0x144>)
   27100:	f007 fa97 	bl	2e632 <printk>
   27104:	480f      	ldr	r0, [pc, #60]	; (27144 <z_impl_k_msgq_get+0x160>)
   27106:	f007 fa94 	bl	2e632 <printk>
   2710a:	2161      	movs	r1, #97	; 0x61
   2710c:	4809      	ldr	r0, [pc, #36]	; (27134 <z_impl_k_msgq_get+0x150>)
   2710e:	f007 fa9d 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   27112:	f387 8811 	msr	BASEPRI, r7
   27116:	f3bf 8f6f 	isb	sy
	return result;
   2711a:	e7d7      	b.n	270cc <z_impl_k_msgq_get+0xe8>
   2711c:	e000ed00 	.word	0xe000ed00
   27120:	00035d4e 	.word	0x00035d4e
   27124:	00035cfe 	.word	0x00035cfe
   27128:	0003452c 	.word	0x0003452c
   2712c:	000346b0 	.word	0x000346b0
   27130:	0003494a 	.word	0x0003494a
   27134:	0003491e 	.word	0x0003491e
   27138:	0003495f 	.word	0x0003495f
   2713c:	20027730 	.word	0x20027730
   27140:	00034974 	.word	0x00034974
   27144:	0003498b 	.word	0x0003498b

00027148 <z_sched_lock>:
		z_ready_thread(th);
	}
}

static inline void z_sched_lock(void)
{
   27148:	b510      	push	{r4, lr}
   2714a:	f3ef 8305 	mrs	r3, IPSR
   2714e:	2b0d      	cmp	r3, #13
   27150:	d804      	bhi.n	2715c <z_sched_lock+0x14>
   27152:	b193      	cbz	r3, 2717a <z_sched_lock+0x32>
   27154:	4b15      	ldr	r3, [pc, #84]	; (271ac <z_sched_lock+0x64>)
   27156:	685b      	ldr	r3, [r3, #4]
   27158:	051b      	lsls	r3, r3, #20
   2715a:	d40e      	bmi.n	2717a <z_sched_lock+0x32>
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_is_in_isr(), "");
   2715c:	4914      	ldr	r1, [pc, #80]	; (271b0 <z_sched_lock+0x68>)
   2715e:	f44f 7380 	mov.w	r3, #256	; 0x100
   27162:	4a14      	ldr	r2, [pc, #80]	; (271b4 <z_sched_lock+0x6c>)
   27164:	4814      	ldr	r0, [pc, #80]	; (271b8 <z_sched_lock+0x70>)
   27166:	f007 fa64 	bl	2e632 <printk>
   2716a:	4814      	ldr	r0, [pc, #80]	; (271bc <z_sched_lock+0x74>)
   2716c:	f007 fa61 	bl	2e632 <printk>
   27170:	f44f 7180 	mov.w	r1, #256	; 0x100
   27174:	480f      	ldr	r0, [pc, #60]	; (271b4 <z_sched_lock+0x6c>)
   27176:	f007 fa69 	bl	2e64c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   2717a:	4c11      	ldr	r4, [pc, #68]	; (271c0 <z_sched_lock+0x78>)
   2717c:	68a2      	ldr	r2, [r4, #8]
   2717e:	7bd2      	ldrb	r2, [r2, #15]
   27180:	2a01      	cmp	r2, #1
   27182:	d10e      	bne.n	271a2 <z_sched_lock+0x5a>
   27184:	490f      	ldr	r1, [pc, #60]	; (271c4 <z_sched_lock+0x7c>)
   27186:	f240 1301 	movw	r3, #257	; 0x101
   2718a:	4a0a      	ldr	r2, [pc, #40]	; (271b4 <z_sched_lock+0x6c>)
   2718c:	480a      	ldr	r0, [pc, #40]	; (271b8 <z_sched_lock+0x70>)
   2718e:	f007 fa50 	bl	2e632 <printk>
   27192:	480a      	ldr	r0, [pc, #40]	; (271bc <z_sched_lock+0x74>)
   27194:	f007 fa4d 	bl	2e632 <printk>
   27198:	f240 1101 	movw	r1, #257	; 0x101
   2719c:	4805      	ldr	r0, [pc, #20]	; (271b4 <z_sched_lock+0x6c>)
   2719e:	f007 fa55 	bl	2e64c <assert_post_action>

	--_current->base.sched_locked;
   271a2:	68a2      	ldr	r2, [r4, #8]
   271a4:	7bd3      	ldrb	r3, [r2, #15]
   271a6:	3b01      	subs	r3, #1
   271a8:	73d3      	strb	r3, [r2, #15]
	compiler_barrier();

	K_DEBUG("scheduler locked (%p:%d)\n",
		_current, _current->base.sched_locked);
#endif
}
   271aa:	bd10      	pop	{r4, pc}
   271ac:	e000ed00 	.word	0xe000ed00
   271b0:	00035dfb 	.word	0x00035dfb
   271b4:	00035dca 	.word	0x00035dca
   271b8:	0003452c 	.word	0x0003452c
   271bc:	000346b0 	.word	0x000346b0
   271c0:	20027730 	.word	0x20027730
   271c4:	00035e08 	.word	0x00035e08

000271c8 <z_impl_k_mutex_lock>:
		z_thread_priority_set(mutex->owner, new_prio);
	}
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   271c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   271ca:	4604      	mov	r4, r0
   271cc:	460e      	mov	r6, r1
	int new_prio;
	k_spinlock_key_t key;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	z_sched_lock();
   271ce:	f7ff ffbb 	bl	27148 <z_sched_lock>

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   271d2:	68e3      	ldr	r3, [r4, #12]
   271d4:	4a4e      	ldr	r2, [pc, #312]	; (27310 <z_impl_k_mutex_lock+0x148>)
   271d6:	b14b      	cbz	r3, 271ec <z_impl_k_mutex_lock+0x24>
   271d8:	68a1      	ldr	r1, [r4, #8]
   271da:	6890      	ldr	r0, [r2, #8]
   271dc:	4281      	cmp	r1, r0
   271de:	d012      	beq.n	27206 <z_impl_k_mutex_lock+0x3e>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   271e0:	b99e      	cbnz	r6, 2720a <z_impl_k_mutex_lock+0x42>
		k_sched_unlock();
   271e2:	f000 fd21 	bl	27c28 <k_sched_unlock>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   271e6:	f06f 050f 	mvn.w	r5, #15
   271ea:	e00a      	b.n	27202 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   271ec:	6891      	ldr	r1, [r2, #8]
   271ee:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   271f2:	3301      	adds	r3, #1
   271f4:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   271f6:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   271f8:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   271fa:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
   271fc:	f000 fd14 	bl	27c28 <k_sched_unlock>
		return 0;
   27200:	2500      	movs	r5, #0

	k_sched_unlock();

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   27202:	4628      	mov	r0, r5
   27204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   27206:	6921      	ldr	r1, [r4, #16]
   27208:	e7f3      	b.n	271f2 <z_impl_k_mutex_lock+0x2a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2720a:	f990 500e 	ldrsb.w	r5, [r0, #14]
   2720e:	f991 300e 	ldrsb.w	r3, [r1, #14]
   27212:	429d      	cmp	r5, r3
   27214:	bfa8      	it	ge
   27216:	461d      	movge	r5, r3
   27218:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
	__asm__ volatile(
   2721c:	f04f 0320 	mov.w	r3, #32
   27220:	f3ef 8711 	mrs	r7, BASEPRI
   27224:	f383 8811 	msr	BASEPRI, r3
   27228:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2722c:	4839      	ldr	r0, [pc, #228]	; (27314 <z_impl_k_mutex_lock+0x14c>)
   2722e:	f001 fc63 	bl	28af8 <z_spin_lock_valid>
   27232:	b960      	cbnz	r0, 2724e <z_impl_k_mutex_lock+0x86>
   27234:	4938      	ldr	r1, [pc, #224]	; (27318 <z_impl_k_mutex_lock+0x150>)
   27236:	234e      	movs	r3, #78	; 0x4e
   27238:	4a38      	ldr	r2, [pc, #224]	; (2731c <z_impl_k_mutex_lock+0x154>)
   2723a:	4839      	ldr	r0, [pc, #228]	; (27320 <z_impl_k_mutex_lock+0x158>)
   2723c:	f007 f9f9 	bl	2e632 <printk>
   27240:	4838      	ldr	r0, [pc, #224]	; (27324 <z_impl_k_mutex_lock+0x15c>)
   27242:	f007 f9f6 	bl	2e632 <printk>
   27246:	214e      	movs	r1, #78	; 0x4e
   27248:	4834      	ldr	r0, [pc, #208]	; (2731c <z_impl_k_mutex_lock+0x154>)
   2724a:	f007 f9ff 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   2724e:	4831      	ldr	r0, [pc, #196]	; (27314 <z_impl_k_mutex_lock+0x14c>)
   27250:	f001 fc70 	bl	28b34 <z_spin_lock_set_owner>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   27254:	68a0      	ldr	r0, [r4, #8]
   27256:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2725a:	429d      	cmp	r5, r3
   2725c:	da02      	bge.n	27264 <z_impl_k_mutex_lock+0x9c>
		z_thread_priority_set(mutex->owner, new_prio);
   2725e:	4629      	mov	r1, r5
   27260:	f001 f844 	bl	282ec <z_thread_priority_set>
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   27264:	4633      	mov	r3, r6
   27266:	4622      	mov	r2, r4
   27268:	4639      	mov	r1, r7
   2726a:	482a      	ldr	r0, [pc, #168]	; (27314 <z_impl_k_mutex_lock+0x14c>)
   2726c:	f001 f810 	bl	28290 <z_pend_curr>
	if (got_mutex == 0) {
   27270:	4605      	mov	r5, r0
   27272:	b910      	cbnz	r0, 2727a <z_impl_k_mutex_lock+0xb2>
		k_sched_unlock();
   27274:	f000 fcd8 	bl	27c28 <k_sched_unlock>
		return 0;
   27278:	e7c3      	b.n	27202 <z_impl_k_mutex_lock+0x3a>
	return list->head == list;
   2727a:	6823      	ldr	r3, [r4, #0]
   2727c:	6925      	ldr	r5, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2727e:	429c      	cmp	r4, r3
   27280:	d007      	beq.n	27292 <z_impl_k_mutex_lock+0xca>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   27282:	b133      	cbz	r3, 27292 <z_impl_k_mutex_lock+0xca>
   27284:	f993 300e 	ldrsb.w	r3, [r3, #14]
   27288:	429d      	cmp	r5, r3
   2728a:	bfa8      	it	ge
   2728c:	461d      	movge	r5, r3
   2728e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   27292:	f04f 0320 	mov.w	r3, #32
   27296:	f3ef 8611 	mrs	r6, BASEPRI
   2729a:	f383 8811 	msr	BASEPRI, r3
   2729e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   272a2:	481c      	ldr	r0, [pc, #112]	; (27314 <z_impl_k_mutex_lock+0x14c>)
   272a4:	f001 fc28 	bl	28af8 <z_spin_lock_valid>
   272a8:	b960      	cbnz	r0, 272c4 <z_impl_k_mutex_lock+0xfc>
   272aa:	491b      	ldr	r1, [pc, #108]	; (27318 <z_impl_k_mutex_lock+0x150>)
   272ac:	234e      	movs	r3, #78	; 0x4e
   272ae:	4a1b      	ldr	r2, [pc, #108]	; (2731c <z_impl_k_mutex_lock+0x154>)
   272b0:	481b      	ldr	r0, [pc, #108]	; (27320 <z_impl_k_mutex_lock+0x158>)
   272b2:	f007 f9be 	bl	2e632 <printk>
   272b6:	481b      	ldr	r0, [pc, #108]	; (27324 <z_impl_k_mutex_lock+0x15c>)
   272b8:	f007 f9bb 	bl	2e632 <printk>
   272bc:	214e      	movs	r1, #78	; 0x4e
   272be:	4817      	ldr	r0, [pc, #92]	; (2731c <z_impl_k_mutex_lock+0x154>)
   272c0:	f007 f9c4 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   272c4:	4813      	ldr	r0, [pc, #76]	; (27314 <z_impl_k_mutex_lock+0x14c>)
   272c6:	f001 fc35 	bl	28b34 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, new_prio);
   272ca:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   272cc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   272d0:	429d      	cmp	r5, r3
   272d2:	d002      	beq.n	272da <z_impl_k_mutex_lock+0x112>
		z_thread_priority_set(mutex->owner, new_prio);
   272d4:	4629      	mov	r1, r5
   272d6:	f001 f809 	bl	282ec <z_thread_priority_set>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   272da:	480e      	ldr	r0, [pc, #56]	; (27314 <z_impl_k_mutex_lock+0x14c>)
   272dc:	f001 fc1a 	bl	28b14 <z_spin_unlock_valid>
   272e0:	b960      	cbnz	r0, 272fc <z_impl_k_mutex_lock+0x134>
   272e2:	4911      	ldr	r1, [pc, #68]	; (27328 <z_impl_k_mutex_lock+0x160>)
   272e4:	2361      	movs	r3, #97	; 0x61
   272e6:	4a0d      	ldr	r2, [pc, #52]	; (2731c <z_impl_k_mutex_lock+0x154>)
   272e8:	480d      	ldr	r0, [pc, #52]	; (27320 <z_impl_k_mutex_lock+0x158>)
   272ea:	f007 f9a2 	bl	2e632 <printk>
   272ee:	480f      	ldr	r0, [pc, #60]	; (2732c <z_impl_k_mutex_lock+0x164>)
   272f0:	f007 f99f 	bl	2e632 <printk>
   272f4:	2161      	movs	r1, #97	; 0x61
   272f6:	4809      	ldr	r0, [pc, #36]	; (2731c <z_impl_k_mutex_lock+0x154>)
   272f8:	f007 f9a8 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   272fc:	f386 8811 	msr	BASEPRI, r6
   27300:	f3bf 8f6f 	isb	sy
	k_sched_unlock();
   27304:	f000 fc90 	bl	27c28 <k_sched_unlock>
	return -EAGAIN;
   27308:	f06f 050a 	mvn.w	r5, #10
   2730c:	e779      	b.n	27202 <z_impl_k_mutex_lock+0x3a>
   2730e:	bf00      	nop
   27310:	20027730 	.word	0x20027730
   27314:	2002772c 	.word	0x2002772c
   27318:	0003494a 	.word	0x0003494a
   2731c:	0003491e 	.word	0x0003491e
   27320:	0003452c 	.word	0x0003452c
   27324:	0003495f 	.word	0x0003495f
   27328:	00034974 	.word	0x00034974
   2732c:	0003498b 	.word	0x0003498b

00027330 <z_impl_k_mutex_unlock>:

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
	struct k_thread *new_owner;

	__ASSERT(mutex->lock_count > 0U, "");
   27330:	68c3      	ldr	r3, [r0, #12]
{
   27332:	b570      	push	{r4, r5, r6, lr}
   27334:	4604      	mov	r4, r0
	__ASSERT(mutex->lock_count > 0U, "");
   27336:	b963      	cbnz	r3, 27352 <z_impl_k_mutex_unlock+0x22>
   27338:	4946      	ldr	r1, [pc, #280]	; (27454 <z_impl_k_mutex_unlock+0x124>)
   2733a:	23d4      	movs	r3, #212	; 0xd4
   2733c:	4a46      	ldr	r2, [pc, #280]	; (27458 <z_impl_k_mutex_unlock+0x128>)
   2733e:	4847      	ldr	r0, [pc, #284]	; (2745c <z_impl_k_mutex_unlock+0x12c>)
   27340:	f007 f977 	bl	2e632 <printk>
   27344:	4846      	ldr	r0, [pc, #280]	; (27460 <z_impl_k_mutex_unlock+0x130>)
   27346:	f007 f974 	bl	2e632 <printk>
   2734a:	21d4      	movs	r1, #212	; 0xd4
   2734c:	4842      	ldr	r0, [pc, #264]	; (27458 <z_impl_k_mutex_unlock+0x128>)
   2734e:	f007 f97d 	bl	2e64c <assert_post_action>
	__ASSERT(mutex->owner == _current, "");
   27352:	4b44      	ldr	r3, [pc, #272]	; (27464 <z_impl_k_mutex_unlock+0x134>)
   27354:	68a2      	ldr	r2, [r4, #8]
   27356:	689b      	ldr	r3, [r3, #8]
   27358:	429a      	cmp	r2, r3
   2735a:	d00c      	beq.n	27376 <z_impl_k_mutex_unlock+0x46>
   2735c:	4942      	ldr	r1, [pc, #264]	; (27468 <z_impl_k_mutex_unlock+0x138>)
   2735e:	23d5      	movs	r3, #213	; 0xd5
   27360:	4a3d      	ldr	r2, [pc, #244]	; (27458 <z_impl_k_mutex_unlock+0x128>)
   27362:	483e      	ldr	r0, [pc, #248]	; (2745c <z_impl_k_mutex_unlock+0x12c>)
   27364:	f007 f965 	bl	2e632 <printk>
   27368:	483d      	ldr	r0, [pc, #244]	; (27460 <z_impl_k_mutex_unlock+0x130>)
   2736a:	f007 f962 	bl	2e632 <printk>
   2736e:	21d5      	movs	r1, #213	; 0xd5
   27370:	4839      	ldr	r0, [pc, #228]	; (27458 <z_impl_k_mutex_unlock+0x128>)
   27372:	f007 f96b 	bl	2e64c <assert_post_action>

	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();
   27376:	f7ff fee7 	bl	27148 <z_sched_lock>

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   2737a:	68e3      	ldr	r3, [r4, #12]
   2737c:	2b01      	cmp	r3, #1
   2737e:	d005      	beq.n	2738c <z_impl_k_mutex_unlock+0x5c>
		mutex->lock_count--;
   27380:	3b01      	subs	r3, #1
   27382:	60e3      	str	r3, [r4, #12]
	}


k_mutex_unlock_return:
	k_sched_unlock();
}
   27384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   27388:	f000 bc4e 	b.w	27c28 <k_sched_unlock>
	__asm__ volatile(
   2738c:	f04f 0320 	mov.w	r3, #32
   27390:	f3ef 8611 	mrs	r6, BASEPRI
   27394:	f383 8811 	msr	BASEPRI, r3
   27398:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2739c:	4833      	ldr	r0, [pc, #204]	; (2746c <z_impl_k_mutex_unlock+0x13c>)
   2739e:	f001 fbab 	bl	28af8 <z_spin_lock_valid>
   273a2:	b960      	cbnz	r0, 273be <z_impl_k_mutex_unlock+0x8e>
   273a4:	4932      	ldr	r1, [pc, #200]	; (27470 <z_impl_k_mutex_unlock+0x140>)
   273a6:	234e      	movs	r3, #78	; 0x4e
   273a8:	4a32      	ldr	r2, [pc, #200]	; (27474 <z_impl_k_mutex_unlock+0x144>)
   273aa:	482c      	ldr	r0, [pc, #176]	; (2745c <z_impl_k_mutex_unlock+0x12c>)
   273ac:	f007 f941 	bl	2e632 <printk>
   273b0:	4831      	ldr	r0, [pc, #196]	; (27478 <z_impl_k_mutex_unlock+0x148>)
   273b2:	f007 f93e 	bl	2e632 <printk>
   273b6:	214e      	movs	r1, #78	; 0x4e
   273b8:	482e      	ldr	r0, [pc, #184]	; (27474 <z_impl_k_mutex_unlock+0x144>)
   273ba:	f007 f947 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   273be:	482b      	ldr	r0, [pc, #172]	; (2746c <z_impl_k_mutex_unlock+0x13c>)
   273c0:	f001 fbb8 	bl	28b34 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   273c4:	68a0      	ldr	r0, [r4, #8]
   273c6:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   273c8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   273cc:	4299      	cmp	r1, r3
   273ce:	d001      	beq.n	273d4 <z_impl_k_mutex_unlock+0xa4>
		z_thread_priority_set(mutex->owner, new_prio);
   273d0:	f000 ff8c 	bl	282ec <z_thread_priority_set>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   273d4:	4620      	mov	r0, r4
   273d6:	f001 f81f 	bl	28418 <z_unpend_first_thread>
   273da:	4605      	mov	r5, r0
	mutex->owner = new_owner;
   273dc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   273de:	b308      	cbz	r0, 27424 <z_impl_k_mutex_unlock+0xf4>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   273e0:	7b43      	ldrb	r3, [r0, #13]
   273e2:	06db      	lsls	r3, r3, #27
   273e4:	d103      	bne.n	273ee <z_impl_k_mutex_unlock+0xbe>
	if (z_is_thread_ready(thread)) {
   273e6:	6983      	ldr	r3, [r0, #24]
   273e8:	b90b      	cbnz	r3, 273ee <z_impl_k_mutex_unlock+0xbe>
		z_add_thread_to_ready_q(thread);
   273ea:	f000 fc9f 	bl	27d2c <z_add_thread_to_ready_q>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   273ee:	481f      	ldr	r0, [pc, #124]	; (2746c <z_impl_k_mutex_unlock+0x13c>)
   273f0:	f001 fb90 	bl	28b14 <z_spin_unlock_valid>
   273f4:	b960      	cbnz	r0, 27410 <z_impl_k_mutex_unlock+0xe0>
   273f6:	4921      	ldr	r1, [pc, #132]	; (2747c <z_impl_k_mutex_unlock+0x14c>)
   273f8:	2361      	movs	r3, #97	; 0x61
   273fa:	4a1e      	ldr	r2, [pc, #120]	; (27474 <z_impl_k_mutex_unlock+0x144>)
   273fc:	4817      	ldr	r0, [pc, #92]	; (2745c <z_impl_k_mutex_unlock+0x12c>)
   273fe:	f007 f918 	bl	2e632 <printk>
   27402:	481f      	ldr	r0, [pc, #124]	; (27480 <z_impl_k_mutex_unlock+0x150>)
   27404:	f007 f915 	bl	2e632 <printk>
   27408:	2161      	movs	r1, #97	; 0x61
   2740a:	481a      	ldr	r0, [pc, #104]	; (27474 <z_impl_k_mutex_unlock+0x144>)
   2740c:	f007 f91e 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   27410:	f386 8811 	msr	BASEPRI, r6
   27414:	f3bf 8f6f 	isb	sy
   27418:	2300      	movs	r3, #0
   2741a:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
   2741c:	f995 300e 	ldrsb.w	r3, [r5, #14]
   27420:	6123      	str	r3, [r4, #16]
   27422:	e7af      	b.n	27384 <z_impl_k_mutex_unlock+0x54>
		mutex->lock_count = 0U;
   27424:	60e0      	str	r0, [r4, #12]
   27426:	4811      	ldr	r0, [pc, #68]	; (2746c <z_impl_k_mutex_unlock+0x13c>)
   27428:	f001 fb74 	bl	28b14 <z_spin_unlock_valid>
   2742c:	b960      	cbnz	r0, 27448 <z_impl_k_mutex_unlock+0x118>
   2742e:	4913      	ldr	r1, [pc, #76]	; (2747c <z_impl_k_mutex_unlock+0x14c>)
   27430:	2361      	movs	r3, #97	; 0x61
   27432:	4a10      	ldr	r2, [pc, #64]	; (27474 <z_impl_k_mutex_unlock+0x144>)
   27434:	4809      	ldr	r0, [pc, #36]	; (2745c <z_impl_k_mutex_unlock+0x12c>)
   27436:	f007 f8fc 	bl	2e632 <printk>
   2743a:	4811      	ldr	r0, [pc, #68]	; (27480 <z_impl_k_mutex_unlock+0x150>)
   2743c:	f007 f8f9 	bl	2e632 <printk>
   27440:	2161      	movs	r1, #97	; 0x61
   27442:	480c      	ldr	r0, [pc, #48]	; (27474 <z_impl_k_mutex_unlock+0x144>)
   27444:	f007 f902 	bl	2e64c <assert_post_action>
   27448:	f386 8811 	msr	BASEPRI, r6
   2744c:	f3bf 8f6f 	isb	sy
   27450:	e798      	b.n	27384 <z_impl_k_mutex_unlock+0x54>
   27452:	bf00      	nop
   27454:	00035d93 	.word	0x00035d93
   27458:	00035d6b 	.word	0x00035d6b
   2745c:	0003452c 	.word	0x0003452c
   27460:	000346b0 	.word	0x000346b0
   27464:	20027730 	.word	0x20027730
   27468:	00035daa 	.word	0x00035daa
   2746c:	2002772c 	.word	0x2002772c
   27470:	0003494a 	.word	0x0003494a
   27474:	0003491e 	.word	0x0003491e
   27478:	0003495f 	.word	0x0003495f
   2747c:	00034974 	.word	0x00034974
   27480:	0003498b 	.word	0x0003498b

00027484 <queue_insert>:
			       struct k_queue *);
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   27484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27488:	4604      	mov	r4, r0
   2748a:	460e      	mov	r6, r1
   2748c:	4690      	mov	r8, r2
   2748e:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   27490:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   27494:	f04f 0320 	mov.w	r3, #32
   27498:	f3ef 8711 	mrs	r7, BASEPRI
   2749c:	f383 8811 	msr	BASEPRI, r3
   274a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   274a4:	4628      	mov	r0, r5
   274a6:	f001 fb27 	bl	28af8 <z_spin_lock_valid>
   274aa:	b960      	cbnz	r0, 274c6 <queue_insert+0x42>
   274ac:	4932      	ldr	r1, [pc, #200]	; (27578 <queue_insert+0xf4>)
   274ae:	234e      	movs	r3, #78	; 0x4e
   274b0:	4a32      	ldr	r2, [pc, #200]	; (2757c <queue_insert+0xf8>)
   274b2:	4833      	ldr	r0, [pc, #204]	; (27580 <queue_insert+0xfc>)
   274b4:	f007 f8bd 	bl	2e632 <printk>
   274b8:	4832      	ldr	r0, [pc, #200]	; (27584 <queue_insert+0x100>)
   274ba:	f007 f8ba 	bl	2e632 <printk>
   274be:	214e      	movs	r1, #78	; 0x4e
   274c0:	482e      	ldr	r0, [pc, #184]	; (2757c <queue_insert+0xf8>)
   274c2:	f007 f8c3 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   274c6:	4628      	mov	r0, r5
   274c8:	f001 fb34 	bl	28b34 <z_spin_lock_set_owner>
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   274cc:	f1b9 0f00 	cmp.w	r9, #0
   274d0:	d02c      	beq.n	2752c <queue_insert+0xa8>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   274d2:	2008      	movs	r0, #8
   274d4:	f7ff fcd6 	bl	26e84 <z_thread_malloc>
		if (anode == NULL) {
   274d8:	b9c0      	cbnz	r0, 2750c <queue_insert+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   274da:	4628      	mov	r0, r5
   274dc:	f001 fb1a 	bl	28b14 <z_spin_unlock_valid>
   274e0:	b960      	cbnz	r0, 274fc <queue_insert+0x78>
   274e2:	4929      	ldr	r1, [pc, #164]	; (27588 <queue_insert+0x104>)
   274e4:	2361      	movs	r3, #97	; 0x61
   274e6:	4a25      	ldr	r2, [pc, #148]	; (2757c <queue_insert+0xf8>)
   274e8:	4825      	ldr	r0, [pc, #148]	; (27580 <queue_insert+0xfc>)
   274ea:	f007 f8a2 	bl	2e632 <printk>
   274ee:	4827      	ldr	r0, [pc, #156]	; (2758c <queue_insert+0x108>)
   274f0:	f007 f89f 	bl	2e632 <printk>
   274f4:	2161      	movs	r1, #97	; 0x61
   274f6:	4821      	ldr	r0, [pc, #132]	; (2757c <queue_insert+0xf8>)
   274f8:	f007 f8a8 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   274fc:	f387 8811 	msr	BASEPRI, r7
   27500:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   27504:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   27508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0U, "flags too large");
	node->next_and_flags = flags;
   2750c:	2301      	movs	r3, #1
		anode->data = data;
   2750e:	f8c0 8004 	str.w	r8, [r0, #4]
   27512:	6003      	str	r3, [r0, #0]
   27514:	6803      	ldr	r3, [r0, #0]
   27516:	f003 0303 	and.w	r3, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   2751a:	b95e      	cbnz	r6, 27534 <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2751c:	6822      	ldr	r2, [r4, #0]
   2751e:	4313      	orrs	r3, r2
   27520:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   27522:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   27524:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   27526:	b973      	cbnz	r3, 27546 <queue_insert+0xc2>
	list->tail = node;
   27528:	6060      	str	r0, [r4, #4]
   2752a:	e00c      	b.n	27546 <queue_insert+0xc2>
	node->next_and_flags = flags;
   2752c:	f8c8 9000 	str.w	r9, [r8]
   27530:	4640      	mov	r0, r8
   27532:	e7ef      	b.n	27514 <queue_insert+0x90>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   27534:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   27536:	f032 0203 	bics.w	r2, r2, #3
   2753a:	d115      	bne.n	27568 <queue_insert+0xe4>
Z_GENLIST_APPEND(sflist, sfnode)
   2753c:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2753e:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   27540:	b962      	cbnz	r2, 2755c <queue_insert+0xd8>
	list->head = node;
   27542:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   27546:	2104      	movs	r1, #4
   27548:	f104 000c 	add.w	r0, r4, #12
   2754c:	f009 fa7c 	bl	30a48 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   27550:	4628      	mov	r0, r5
   27552:	4639      	mov	r1, r7
   27554:	f000 f9f6 	bl	27944 <z_reschedule>
	return 0;
   27558:	2000      	movs	r0, #0
   2755a:	e7d5      	b.n	27508 <queue_insert+0x84>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2755c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2755e:	f003 0303 	and.w	r3, r3, #3
   27562:	4303      	orrs	r3, r0
   27564:	6013      	str	r3, [r2, #0]
   27566:	e7df      	b.n	27528 <queue_insert+0xa4>
   27568:	4313      	orrs	r3, r2
   2756a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2756c:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2756e:	f003 0303 	and.w	r3, r3, #3
   27572:	4318      	orrs	r0, r3
   27574:	6030      	str	r0, [r6, #0]
   27576:	e7e6      	b.n	27546 <queue_insert+0xc2>
   27578:	0003494a 	.word	0x0003494a
   2757c:	0003491e 	.word	0x0003491e
   27580:	0003452c 	.word	0x0003452c
   27584:	0003495f 	.word	0x0003495f
   27588:	00034974 	.word	0x00034974
   2758c:	0003498b 	.word	0x0003498b

00027590 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   27590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27594:	4604      	mov	r4, r0
   27596:	b089      	sub	sp, #36	; 0x24
   27598:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2759a:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2759e:	f04f 0320 	mov.w	r3, #32
   275a2:	f3ef 8811 	mrs	r8, BASEPRI
   275a6:	f383 8811 	msr	BASEPRI, r3
   275aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   275ae:	4628      	mov	r0, r5
   275b0:	f001 faa2 	bl	28af8 <z_spin_lock_valid>
   275b4:	b960      	cbnz	r0, 275d0 <z_impl_k_queue_get+0x40>
   275b6:	4967      	ldr	r1, [pc, #412]	; (27754 <z_impl_k_queue_get+0x1c4>)
   275b8:	234e      	movs	r3, #78	; 0x4e
   275ba:	4a67      	ldr	r2, [pc, #412]	; (27758 <z_impl_k_queue_get+0x1c8>)
   275bc:	4867      	ldr	r0, [pc, #412]	; (2775c <z_impl_k_queue_get+0x1cc>)
   275be:	f007 f838 	bl	2e632 <printk>
   275c2:	4867      	ldr	r0, [pc, #412]	; (27760 <z_impl_k_queue_get+0x1d0>)
   275c4:	f007 f835 	bl	2e632 <printk>
   275c8:	214e      	movs	r1, #78	; 0x4e
   275ca:	4863      	ldr	r0, [pc, #396]	; (27758 <z_impl_k_queue_get+0x1c8>)
   275cc:	f007 f83e 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   275d0:	4628      	mov	r0, r5
   275d2:	f001 faaf 	bl	28b34 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   275d6:	6820      	ldr	r0, [r4, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   275d8:	b320      	cbz	r0, 27624 <z_impl_k_queue_get+0x94>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   275da:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   275dc:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   275de:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   275e2:	4290      	cmp	r0, r2
	list->tail = node;
   275e4:	bf08      	it	eq
   275e6:	6063      	streq	r3, [r4, #4]
	list->head = node;
   275e8:	6023      	str	r3, [r4, #0]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   275ea:	2101      	movs	r1, #1
   275ec:	f009 f92d 	bl	3084a <z_queue_node_peek>
   275f0:	4606      	mov	r6, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   275f2:	4628      	mov	r0, r5
   275f4:	f001 fa8e 	bl	28b14 <z_spin_unlock_valid>
   275f8:	b960      	cbnz	r0, 27614 <z_impl_k_queue_get+0x84>
   275fa:	495a      	ldr	r1, [pc, #360]	; (27764 <z_impl_k_queue_get+0x1d4>)
   275fc:	2361      	movs	r3, #97	; 0x61
   275fe:	4a56      	ldr	r2, [pc, #344]	; (27758 <z_impl_k_queue_get+0x1c8>)
   27600:	4856      	ldr	r0, [pc, #344]	; (2775c <z_impl_k_queue_get+0x1cc>)
   27602:	f007 f816 	bl	2e632 <printk>
   27606:	4858      	ldr	r0, [pc, #352]	; (27768 <z_impl_k_queue_get+0x1d8>)
   27608:	f007 f813 	bl	2e632 <printk>
   2760c:	2161      	movs	r1, #97	; 0x61
   2760e:	4852      	ldr	r0, [pc, #328]	; (27758 <z_impl_k_queue_get+0x1c8>)
   27610:	f007 f81c 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   27614:	f388 8811 	msr	BASEPRI, r8
   27618:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   2761c:	4630      	mov	r0, r6
   2761e:	b009      	add	sp, #36	; 0x24
   27620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27624:	4628      	mov	r0, r5
	if (timeout == K_NO_WAIT) {
   27626:	b9af      	cbnz	r7, 27654 <z_impl_k_queue_get+0xc4>
   27628:	f001 fa74 	bl	28b14 <z_spin_unlock_valid>
   2762c:	b960      	cbnz	r0, 27648 <z_impl_k_queue_get+0xb8>
   2762e:	494d      	ldr	r1, [pc, #308]	; (27764 <z_impl_k_queue_get+0x1d4>)
   27630:	2361      	movs	r3, #97	; 0x61
   27632:	4a49      	ldr	r2, [pc, #292]	; (27758 <z_impl_k_queue_get+0x1c8>)
   27634:	4849      	ldr	r0, [pc, #292]	; (2775c <z_impl_k_queue_get+0x1cc>)
   27636:	f006 fffc 	bl	2e632 <printk>
   2763a:	484b      	ldr	r0, [pc, #300]	; (27768 <z_impl_k_queue_get+0x1d8>)
   2763c:	f006 fff9 	bl	2e632 <printk>
   27640:	2161      	movs	r1, #97	; 0x61
   27642:	4845      	ldr	r0, [pc, #276]	; (27758 <z_impl_k_queue_get+0x1c8>)
   27644:	f007 f802 	bl	2e64c <assert_post_action>
   27648:	f388 8811 	msr	BASEPRI, r8
   2764c:	f3bf 8f6f 	isb	sy
			return NULL;
   27650:	2600      	movs	r6, #0
   27652:	e7e3      	b.n	2761c <z_impl_k_queue_get+0x8c>
   27654:	f001 fa5e 	bl	28b14 <z_spin_unlock_valid>
   27658:	b960      	cbnz	r0, 27674 <z_impl_k_queue_get+0xe4>
   2765a:	4942      	ldr	r1, [pc, #264]	; (27764 <z_impl_k_queue_get+0x1d4>)
   2765c:	2361      	movs	r3, #97	; 0x61
   2765e:	4a3e      	ldr	r2, [pc, #248]	; (27758 <z_impl_k_queue_get+0x1c8>)
   27660:	483e      	ldr	r0, [pc, #248]	; (2775c <z_impl_k_queue_get+0x1cc>)
   27662:	f006 ffe6 	bl	2e632 <printk>
   27666:	4840      	ldr	r0, [pc, #256]	; (27768 <z_impl_k_queue_get+0x1d8>)
   27668:	f006 ffe3 	bl	2e632 <printk>
   2766c:	2161      	movs	r1, #97	; 0x61
   2766e:	483a      	ldr	r0, [pc, #232]	; (27758 <z_impl_k_queue_get+0x1c8>)
   27670:	f006 ffec 	bl	2e64c <assert_post_action>
   27674:	f388 8811 	msr	BASEPRI, r8
   27678:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   2767c:	2200      	movs	r2, #0
   2767e:	4623      	mov	r3, r4
   27680:	2104      	movs	r1, #4
   27682:	a803      	add	r0, sp, #12
   27684:	f002 f832 	bl	296ec <k_poll_event_init>
	if (timeout != K_FOREVER) {
   27688:	1c7a      	adds	r2, r7, #1
   2768a:	d002      	beq.n	27692 <z_impl_k_queue_get+0x102>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   2768c:	f009 f994 	bl	309b8 <z_impl_k_uptime_get_32>
   27690:	4683      	mov	fp, r0
{
   27692:	f04f 0900 	mov.w	r9, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   27696:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 27758 <z_impl_k_queue_get+0x1c8>
   2769a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 2775c <z_impl_k_queue_get+0x1cc>
		event.state = K_POLL_STATE_NOT_READY;
   2769e:	9b06      	ldr	r3, [sp, #24]

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
   276a0:	eba7 0209 	sub.w	r2, r7, r9
   276a4:	f36f 3310 	bfc	r3, #12, #5
   276a8:	2101      	movs	r1, #1
   276aa:	a803      	add	r0, sp, #12
   276ac:	9306      	str	r3, [sp, #24]
   276ae:	f002 f873 	bl	29798 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   276b2:	b108      	cbz	r0, 276b8 <z_impl_k_queue_get+0x128>
   276b4:	300b      	adds	r0, #11
   276b6:	d1cb      	bne.n	27650 <z_impl_k_queue_get+0xc0>
	__asm__ volatile(
   276b8:	f04f 0320 	mov.w	r3, #32
   276bc:	f3ef 8211 	mrs	r2, BASEPRI
   276c0:	f383 8811 	msr	BASEPRI, r3
   276c4:	f3bf 8f6f 	isb	sy
   276c8:	4628      	mov	r0, r5
   276ca:	9201      	str	r2, [sp, #4]
   276cc:	f001 fa14 	bl	28af8 <z_spin_lock_valid>
   276d0:	b960      	cbnz	r0, 276ec <z_impl_k_queue_get+0x15c>
   276d2:	4920      	ldr	r1, [pc, #128]	; (27754 <z_impl_k_queue_get+0x1c4>)
   276d4:	234e      	movs	r3, #78	; 0x4e
   276d6:	4642      	mov	r2, r8
   276d8:	4650      	mov	r0, sl
   276da:	f006 ffaa 	bl	2e632 <printk>
   276de:	4820      	ldr	r0, [pc, #128]	; (27760 <z_impl_k_queue_get+0x1d0>)
   276e0:	f006 ffa7 	bl	2e632 <printk>
   276e4:	214e      	movs	r1, #78	; 0x4e
   276e6:	4640      	mov	r0, r8
   276e8:	f006 ffb0 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   276ec:	4628      	mov	r0, r5
   276ee:	f001 fa21 	bl	28b34 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   276f2:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   276f4:	b138      	cbz	r0, 27706 <z_impl_k_queue_get+0x176>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   276f6:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   276f8:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   276fa:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   276fe:	4290      	cmp	r0, r2
	list->head = node;
   27700:	6023      	str	r3, [r4, #0]
	list->tail = node;
   27702:	bf08      	it	eq
   27704:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   27706:	2101      	movs	r1, #1
   27708:	f009 f89f 	bl	3084a <z_queue_node_peek>
   2770c:	4606      	mov	r6, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2770e:	4628      	mov	r0, r5
   27710:	f001 fa00 	bl	28b14 <z_spin_unlock_valid>
   27714:	b960      	cbnz	r0, 27730 <z_impl_k_queue_get+0x1a0>
   27716:	4913      	ldr	r1, [pc, #76]	; (27764 <z_impl_k_queue_get+0x1d4>)
   27718:	2361      	movs	r3, #97	; 0x61
   2771a:	4642      	mov	r2, r8
   2771c:	4650      	mov	r0, sl
   2771e:	f006 ff88 	bl	2e632 <printk>
   27722:	4811      	ldr	r0, [pc, #68]	; (27768 <z_impl_k_queue_get+0x1d8>)
   27724:	f006 ff85 	bl	2e632 <printk>
   27728:	2161      	movs	r1, #97	; 0x61
   2772a:	4640      	mov	r0, r8
   2772c:	f006 ff8e 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   27730:	9b01      	ldr	r3, [sp, #4]
   27732:	f383 8811 	msr	BASEPRI, r3
   27736:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   2773a:	2e00      	cmp	r6, #0
   2773c:	f47f af6e 	bne.w	2761c <z_impl_k_queue_get+0x8c>
   27740:	1c7b      	adds	r3, r7, #1
   27742:	d0ac      	beq.n	2769e <z_impl_k_queue_get+0x10e>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   27744:	f009 f938 	bl	309b8 <z_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   27748:	eba0 090b 	sub.w	r9, r0, fp
	} while (!val && !done);
   2774c:	454f      	cmp	r7, r9
   2774e:	daa6      	bge.n	2769e <z_impl_k_queue_get+0x10e>
   27750:	e77e      	b.n	27650 <z_impl_k_queue_get+0xc0>
   27752:	bf00      	nop
   27754:	0003494a 	.word	0x0003494a
   27758:	0003491e 	.word	0x0003491e
   2775c:	0003452c 	.word	0x0003452c
   27760:	0003495f 	.word	0x0003495f
   27764:	00034974 	.word	0x00034974
   27768:	0003498b 	.word	0x0003498b

0002776c <resched>:
   2776c:	f3ef 8005 	mrs	r0, IPSR
   27770:	280d      	cmp	r0, #13
   27772:	d809      	bhi.n	27788 <resched+0x1c>
   27774:	b128      	cbz	r0, 27782 <resched+0x16>
   27776:	4b05      	ldr	r3, [pc, #20]	; (2778c <resched+0x20>)
   27778:	6858      	ldr	r0, [r3, #4]
   2777a:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   2777e:	f3c0 20c0 	ubfx	r0, r0, #11, #1
	}
	_current_cpu->swap_ok = 0;
#endif

	return !z_is_in_isr();
}
   27782:	f080 0001 	eor.w	r0, r0, #1
   27786:	4770      	bx	lr
   27788:	2001      	movs	r0, #1
   2778a:	e7fa      	b.n	27782 <resched+0x16>
   2778c:	e000ed00 	.word	0xe000ed00

00027790 <reset_time_slice>:
{
   27790:	b508      	push	{r3, lr}
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   27792:	f7eb ff87 	bl	136a4 <z_clock_elapsed>
   27796:	4b05      	ldr	r3, [pc, #20]	; (277ac <reset_time_slice+0x1c>)
   27798:	4a05      	ldr	r2, [pc, #20]	; (277b0 <reset_time_slice+0x20>)
   2779a:	681b      	ldr	r3, [r3, #0]
	z_set_timeout_expiry(slice_time, false);
   2779c:	2100      	movs	r1, #0
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   2779e:	4418      	add	r0, r3
   277a0:	6110      	str	r0, [r2, #16]
	z_set_timeout_expiry(slice_time, false);
   277a2:	4618      	mov	r0, r3
}
   277a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_set_timeout_expiry(slice_time, false);
   277a8:	f001 bd5c 	b.w	29264 <z_set_timeout_expiry>
   277ac:	20027770 	.word	0x20027770
   277b0:	20027730 	.word	0x20027730

000277b4 <pended_on.isra.15>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   277b4:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   277b6:	b510      	push	{r4, lr}
   277b8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   277ba:	b95b      	cbnz	r3, 277d4 <pended_on.isra.15+0x20>
   277bc:	4906      	ldr	r1, [pc, #24]	; (277d8 <pended_on.isra.15+0x24>)
   277be:	4807      	ldr	r0, [pc, #28]	; (277dc <pended_on.isra.15+0x28>)
   277c0:	f240 1383 	movw	r3, #387	; 0x183
   277c4:	4a06      	ldr	r2, [pc, #24]	; (277e0 <pended_on.isra.15+0x2c>)
   277c6:	f006 ff34 	bl	2e632 <printk>
   277ca:	f240 1183 	movw	r1, #387	; 0x183
   277ce:	4804      	ldr	r0, [pc, #16]	; (277e0 <pended_on.isra.15+0x2c>)
   277d0:	f006 ff3c 	bl	2e64c <assert_post_action>
}
   277d4:	6820      	ldr	r0, [r4, #0]
   277d6:	bd10      	pop	{r4, pc}
   277d8:	00035e80 	.word	0x00035e80
   277dc:	0003452c 	.word	0x0003452c
   277e0:	00035e58 	.word	0x00035e58

000277e4 <k_sched_time_slice_set>:
{
   277e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   277e6:	4607      	mov	r7, r0
   277e8:	460d      	mov	r5, r1
	__asm__ volatile(
   277ea:	f04f 0320 	mov.w	r3, #32
   277ee:	f3ef 8411 	mrs	r4, BASEPRI
   277f2:	f383 8811 	msr	BASEPRI, r3
   277f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   277fa:	481f      	ldr	r0, [pc, #124]	; (27878 <k_sched_time_slice_set+0x94>)
   277fc:	f001 f97c 	bl	28af8 <z_spin_lock_valid>
   27800:	b960      	cbnz	r0, 2781c <k_sched_time_slice_set+0x38>
   27802:	491e      	ldr	r1, [pc, #120]	; (2787c <k_sched_time_slice_set+0x98>)
   27804:	234e      	movs	r3, #78	; 0x4e
   27806:	4a1e      	ldr	r2, [pc, #120]	; (27880 <k_sched_time_slice_set+0x9c>)
   27808:	481e      	ldr	r0, [pc, #120]	; (27884 <k_sched_time_slice_set+0xa0>)
   2780a:	f006 ff12 	bl	2e632 <printk>
   2780e:	481e      	ldr	r0, [pc, #120]	; (27888 <k_sched_time_slice_set+0xa4>)
   27810:	f006 ff0f 	bl	2e632 <printk>
   27814:	214e      	movs	r1, #78	; 0x4e
   27816:	481a      	ldr	r0, [pc, #104]	; (27880 <k_sched_time_slice_set+0x9c>)
   27818:	f006 ff18 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   2781c:	4816      	ldr	r0, [pc, #88]	; (27878 <k_sched_time_slice_set+0x94>)
   2781e:	f001 f989 	bl	28b34 <z_spin_lock_set_owner>
   27822:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   27826:	2200      	movs	r2, #0
   27828:	2100      	movs	r1, #0
   2782a:	4b18      	ldr	r3, [pc, #96]	; (2788c <k_sched_time_slice_set+0xa8>)
   2782c:	4818      	ldr	r0, [pc, #96]	; (27890 <k_sched_time_slice_set+0xac>)
   2782e:	611a      	str	r2, [r3, #16]
   27830:	fbc6 0107 	smlal	r0, r1, r6, r7
   27834:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
   27838:	2300      	movs	r3, #0
   2783a:	f7e5 f903 	bl	ca44 <__aeabi_ldivmod>
   2783e:	4b15      	ldr	r3, [pc, #84]	; (27894 <k_sched_time_slice_set+0xb0>)
   27840:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   27842:	4b15      	ldr	r3, [pc, #84]	; (27898 <k_sched_time_slice_set+0xb4>)
   27844:	601d      	str	r5, [r3, #0]
		reset_time_slice();
   27846:	f7ff ffa3 	bl	27790 <reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2784a:	480b      	ldr	r0, [pc, #44]	; (27878 <k_sched_time_slice_set+0x94>)
   2784c:	f001 f962 	bl	28b14 <z_spin_unlock_valid>
   27850:	b960      	cbnz	r0, 2786c <k_sched_time_slice_set+0x88>
   27852:	4912      	ldr	r1, [pc, #72]	; (2789c <k_sched_time_slice_set+0xb8>)
   27854:	2361      	movs	r3, #97	; 0x61
   27856:	4a0a      	ldr	r2, [pc, #40]	; (27880 <k_sched_time_slice_set+0x9c>)
   27858:	480a      	ldr	r0, [pc, #40]	; (27884 <k_sched_time_slice_set+0xa0>)
   2785a:	f006 feea 	bl	2e632 <printk>
   2785e:	4810      	ldr	r0, [pc, #64]	; (278a0 <k_sched_time_slice_set+0xbc>)
   27860:	f006 fee7 	bl	2e632 <printk>
   27864:	2161      	movs	r1, #97	; 0x61
   27866:	4806      	ldr	r0, [pc, #24]	; (27880 <k_sched_time_slice_set+0x9c>)
   27868:	f006 fef0 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   2786c:	f384 8811 	msr	BASEPRI, r4
   27870:	f3bf 8f6f 	isb	sy
}
   27874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27876:	bf00      	nop
   27878:	20027768 	.word	0x20027768
   2787c:	0003494a 	.word	0x0003494a
   27880:	0003491e 	.word	0x0003491e
   27884:	0003452c 	.word	0x0003452c
   27888:	0003495f 	.word	0x0003495f
   2788c:	20027730 	.word	0x20027730
   27890:	0003e7ff 	.word	0x0003e7ff
   27894:	20027770 	.word	0x20027770
   27898:	2002776c 	.word	0x2002776c
   2789c:	00034974 	.word	0x00034974
   278a0:	0003498b 	.word	0x0003498b

000278a4 <z_unpend_thread_no_timeout>:
{
   278a4:	b538      	push	{r3, r4, r5, lr}
   278a6:	4604      	mov	r4, r0
	__asm__ volatile(
   278a8:	f04f 0320 	mov.w	r3, #32
   278ac:	f3ef 8511 	mrs	r5, BASEPRI
   278b0:	f383 8811 	msr	BASEPRI, r3
   278b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   278b8:	481b      	ldr	r0, [pc, #108]	; (27928 <z_unpend_thread_no_timeout+0x84>)
   278ba:	f001 f91d 	bl	28af8 <z_spin_lock_valid>
   278be:	b960      	cbnz	r0, 278da <z_unpend_thread_no_timeout+0x36>
   278c0:	491a      	ldr	r1, [pc, #104]	; (2792c <z_unpend_thread_no_timeout+0x88>)
   278c2:	234e      	movs	r3, #78	; 0x4e
   278c4:	4a1a      	ldr	r2, [pc, #104]	; (27930 <z_unpend_thread_no_timeout+0x8c>)
   278c6:	481b      	ldr	r0, [pc, #108]	; (27934 <z_unpend_thread_no_timeout+0x90>)
   278c8:	f006 feb3 	bl	2e632 <printk>
   278cc:	481a      	ldr	r0, [pc, #104]	; (27938 <z_unpend_thread_no_timeout+0x94>)
   278ce:	f006 feb0 	bl	2e632 <printk>
   278d2:	214e      	movs	r1, #78	; 0x4e
   278d4:	4816      	ldr	r0, [pc, #88]	; (27930 <z_unpend_thread_no_timeout+0x8c>)
   278d6:	f006 feb9 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   278da:	4813      	ldr	r0, [pc, #76]	; (27928 <z_unpend_thread_no_timeout+0x84>)
   278dc:	f001 f92a 	bl	28b34 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   278e0:	f104 0008 	add.w	r0, r4, #8
   278e4:	f7ff ff66 	bl	277b4 <pended_on.isra.15>
   278e8:	4621      	mov	r1, r4
   278ea:	f000 f8e3 	bl	27ab4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   278ee:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   278f0:	480d      	ldr	r0, [pc, #52]	; (27928 <z_unpend_thread_no_timeout+0x84>)
   278f2:	f023 0302 	bic.w	r3, r3, #2
   278f6:	7363      	strb	r3, [r4, #13]
   278f8:	f001 f90c 	bl	28b14 <z_spin_unlock_valid>
   278fc:	b960      	cbnz	r0, 27918 <z_unpend_thread_no_timeout+0x74>
   278fe:	490f      	ldr	r1, [pc, #60]	; (2793c <z_unpend_thread_no_timeout+0x98>)
   27900:	2361      	movs	r3, #97	; 0x61
   27902:	4a0b      	ldr	r2, [pc, #44]	; (27930 <z_unpend_thread_no_timeout+0x8c>)
   27904:	480b      	ldr	r0, [pc, #44]	; (27934 <z_unpend_thread_no_timeout+0x90>)
   27906:	f006 fe94 	bl	2e632 <printk>
   2790a:	480d      	ldr	r0, [pc, #52]	; (27940 <z_unpend_thread_no_timeout+0x9c>)
   2790c:	f006 fe91 	bl	2e632 <printk>
   27910:	2161      	movs	r1, #97	; 0x61
   27912:	4807      	ldr	r0, [pc, #28]	; (27930 <z_unpend_thread_no_timeout+0x8c>)
   27914:	f006 fe9a 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   27918:	f385 8811 	msr	BASEPRI, r5
   2791c:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   27920:	2300      	movs	r3, #0
   27922:	60a3      	str	r3, [r4, #8]
}
   27924:	bd38      	pop	{r3, r4, r5, pc}
   27926:	bf00      	nop
   27928:	20027768 	.word	0x20027768
   2792c:	0003494a 	.word	0x0003494a
   27930:	0003491e 	.word	0x0003491e
   27934:	0003452c 	.word	0x0003452c
   27938:	0003495f 	.word	0x0003495f
   2793c:	00034974 	.word	0x00034974
   27940:	0003498b 	.word	0x0003498b

00027944 <z_reschedule>:

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   27944:	b510      	push	{r4, lr}
   27946:	4602      	mov	r2, r0
   27948:	460c      	mov	r4, r1
	if (resched()) {
   2794a:	f7ff ff0f 	bl	2776c <resched>
   2794e:	b1a8      	cbz	r0, 2797c <z_reschedule+0x38>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   27950:	4610      	mov	r0, r2
   27952:	f001 f8df 	bl	28b14 <z_spin_unlock_valid>
   27956:	b960      	cbnz	r0, 27972 <z_reschedule+0x2e>
   27958:	4913      	ldr	r1, [pc, #76]	; (279a8 <z_reschedule+0x64>)
   2795a:	2378      	movs	r3, #120	; 0x78
   2795c:	4a13      	ldr	r2, [pc, #76]	; (279ac <z_reschedule+0x68>)
   2795e:	4814      	ldr	r0, [pc, #80]	; (279b0 <z_reschedule+0x6c>)
   27960:	f006 fe67 	bl	2e632 <printk>
   27964:	4813      	ldr	r0, [pc, #76]	; (279b4 <z_reschedule+0x70>)
   27966:	f006 fe64 	bl	2e632 <printk>
   2796a:	2178      	movs	r1, #120	; 0x78
   2796c:	480f      	ldr	r0, [pc, #60]	; (279ac <z_reschedule+0x68>)
   2796e:	f006 fe6d 	bl	2e64c <assert_post_action>
   27972:	4620      	mov	r0, r4
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   27974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27978:	f7ec b800 	b.w	1397c <__swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2797c:	4610      	mov	r0, r2
   2797e:	f001 f8c9 	bl	28b14 <z_spin_unlock_valid>
   27982:	b960      	cbnz	r0, 2799e <z_reschedule+0x5a>
   27984:	4908      	ldr	r1, [pc, #32]	; (279a8 <z_reschedule+0x64>)
   27986:	2361      	movs	r3, #97	; 0x61
   27988:	4a08      	ldr	r2, [pc, #32]	; (279ac <z_reschedule+0x68>)
   2798a:	4809      	ldr	r0, [pc, #36]	; (279b0 <z_reschedule+0x6c>)
   2798c:	f006 fe51 	bl	2e632 <printk>
   27990:	4808      	ldr	r0, [pc, #32]	; (279b4 <z_reschedule+0x70>)
   27992:	f006 fe4e 	bl	2e632 <printk>
   27996:	2161      	movs	r1, #97	; 0x61
   27998:	4804      	ldr	r0, [pc, #16]	; (279ac <z_reschedule+0x68>)
   2799a:	f006 fe57 	bl	2e64c <assert_post_action>
   2799e:	f384 8811 	msr	BASEPRI, r4
   279a2:	f3bf 8f6f 	isb	sy
   279a6:	bd10      	pop	{r4, pc}
   279a8:	00034974 	.word	0x00034974
   279ac:	0003491e 	.word	0x0003491e
   279b0:	0003452c 	.word	0x0003452c
   279b4:	0003498b 	.word	0x0003498b

000279b8 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   279b8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   279ba:	f04f 0320 	mov.w	r3, #32
   279be:	f3ef 8511 	mrs	r5, BASEPRI
   279c2:	f383 8811 	msr	BASEPRI, r3
   279c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   279ca:	482d      	ldr	r0, [pc, #180]	; (27a80 <k_sched_lock+0xc8>)
   279cc:	f001 f894 	bl	28af8 <z_spin_lock_valid>
   279d0:	b960      	cbnz	r0, 279ec <k_sched_lock+0x34>
   279d2:	492c      	ldr	r1, [pc, #176]	; (27a84 <k_sched_lock+0xcc>)
   279d4:	234e      	movs	r3, #78	; 0x4e
   279d6:	4a2c      	ldr	r2, [pc, #176]	; (27a88 <k_sched_lock+0xd0>)
   279d8:	482c      	ldr	r0, [pc, #176]	; (27a8c <k_sched_lock+0xd4>)
   279da:	f006 fe2a 	bl	2e632 <printk>
   279de:	482c      	ldr	r0, [pc, #176]	; (27a90 <k_sched_lock+0xd8>)
   279e0:	f006 fe27 	bl	2e632 <printk>
   279e4:	214e      	movs	r1, #78	; 0x4e
   279e6:	4828      	ldr	r0, [pc, #160]	; (27a88 <k_sched_lock+0xd0>)
   279e8:	f006 fe30 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   279ec:	4824      	ldr	r0, [pc, #144]	; (27a80 <k_sched_lock+0xc8>)
   279ee:	f001 f8a1 	bl	28b34 <z_spin_lock_set_owner>
   279f2:	f3ef 8305 	mrs	r3, IPSR
   279f6:	2b0d      	cmp	r3, #13
   279f8:	d804      	bhi.n	27a04 <k_sched_lock+0x4c>
   279fa:	b193      	cbz	r3, 27a22 <k_sched_lock+0x6a>
   279fc:	4b25      	ldr	r3, [pc, #148]	; (27a94 <k_sched_lock+0xdc>)
   279fe:	685b      	ldr	r3, [r3, #4]
   27a00:	051b      	lsls	r3, r3, #20
   27a02:	d40e      	bmi.n	27a22 <k_sched_lock+0x6a>
	__ASSERT(!z_is_in_isr(), "");
   27a04:	4924      	ldr	r1, [pc, #144]	; (27a98 <k_sched_lock+0xe0>)
   27a06:	f44f 7380 	mov.w	r3, #256	; 0x100
   27a0a:	4a24      	ldr	r2, [pc, #144]	; (27a9c <k_sched_lock+0xe4>)
   27a0c:	481f      	ldr	r0, [pc, #124]	; (27a8c <k_sched_lock+0xd4>)
   27a0e:	f006 fe10 	bl	2e632 <printk>
   27a12:	4823      	ldr	r0, [pc, #140]	; (27aa0 <k_sched_lock+0xe8>)
   27a14:	f006 fe0d 	bl	2e632 <printk>
   27a18:	f44f 7180 	mov.w	r1, #256	; 0x100
   27a1c:	481f      	ldr	r0, [pc, #124]	; (27a9c <k_sched_lock+0xe4>)
   27a1e:	f006 fe15 	bl	2e64c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   27a22:	4c20      	ldr	r4, [pc, #128]	; (27aa4 <k_sched_lock+0xec>)
   27a24:	68a2      	ldr	r2, [r4, #8]
   27a26:	7bd2      	ldrb	r2, [r2, #15]
   27a28:	2a01      	cmp	r2, #1
   27a2a:	d10e      	bne.n	27a4a <k_sched_lock+0x92>
   27a2c:	491e      	ldr	r1, [pc, #120]	; (27aa8 <k_sched_lock+0xf0>)
   27a2e:	f240 1301 	movw	r3, #257	; 0x101
   27a32:	4a1a      	ldr	r2, [pc, #104]	; (27a9c <k_sched_lock+0xe4>)
   27a34:	4815      	ldr	r0, [pc, #84]	; (27a8c <k_sched_lock+0xd4>)
   27a36:	f006 fdfc 	bl	2e632 <printk>
   27a3a:	4819      	ldr	r0, [pc, #100]	; (27aa0 <k_sched_lock+0xe8>)
   27a3c:	f006 fdf9 	bl	2e632 <printk>
   27a40:	f240 1101 	movw	r1, #257	; 0x101
   27a44:	4815      	ldr	r0, [pc, #84]	; (27a9c <k_sched_lock+0xe4>)
   27a46:	f006 fe01 	bl	2e64c <assert_post_action>
	--_current->base.sched_locked;
   27a4a:	68a2      	ldr	r2, [r4, #8]
   27a4c:	7bd3      	ldrb	r3, [r2, #15]
   27a4e:	3b01      	subs	r3, #1
   27a50:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   27a52:	480b      	ldr	r0, [pc, #44]	; (27a80 <k_sched_lock+0xc8>)
   27a54:	f001 f85e 	bl	28b14 <z_spin_unlock_valid>
   27a58:	b960      	cbnz	r0, 27a74 <k_sched_lock+0xbc>
   27a5a:	4914      	ldr	r1, [pc, #80]	; (27aac <k_sched_lock+0xf4>)
   27a5c:	2361      	movs	r3, #97	; 0x61
   27a5e:	4a0a      	ldr	r2, [pc, #40]	; (27a88 <k_sched_lock+0xd0>)
   27a60:	480a      	ldr	r0, [pc, #40]	; (27a8c <k_sched_lock+0xd4>)
   27a62:	f006 fde6 	bl	2e632 <printk>
   27a66:	4812      	ldr	r0, [pc, #72]	; (27ab0 <k_sched_lock+0xf8>)
   27a68:	f006 fde3 	bl	2e632 <printk>
   27a6c:	2161      	movs	r1, #97	; 0x61
   27a6e:	4806      	ldr	r0, [pc, #24]	; (27a88 <k_sched_lock+0xd0>)
   27a70:	f006 fdec 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   27a74:	f385 8811 	msr	BASEPRI, r5
   27a78:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   27a7c:	bd38      	pop	{r3, r4, r5, pc}
   27a7e:	bf00      	nop
   27a80:	20027768 	.word	0x20027768
   27a84:	0003494a 	.word	0x0003494a
   27a88:	0003491e 	.word	0x0003491e
   27a8c:	0003452c 	.word	0x0003452c
   27a90:	0003495f 	.word	0x0003495f
   27a94:	e000ed00 	.word	0xe000ed00
   27a98:	00035dfb 	.word	0x00035dfb
   27a9c:	00035dca 	.word	0x00035dca
   27aa0:	000346b0 	.word	0x000346b0
   27aa4:	20027730 	.word	0x20027730
   27aa8:	00035e08 	.word	0x00035e08
   27aac:	00034974 	.word	0x00034974
   27ab0:	0003498b 	.word	0x0003498b

00027ab4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   27ab4:	4b12      	ldr	r3, [pc, #72]	; (27b00 <z_priq_dumb_remove+0x4c>)
{
   27ab6:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   27ab8:	f103 0228 	add.w	r2, r3, #40	; 0x28
   27abc:	4282      	cmp	r2, r0
{
   27abe:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   27ac0:	d105      	bne.n	27ace <z_priq_dumb_remove+0x1a>
   27ac2:	689b      	ldr	r3, [r3, #8]
   27ac4:	428b      	cmp	r3, r1
   27ac6:	d102      	bne.n	27ace <z_priq_dumb_remove+0x1a>
   27ac8:	7b4b      	ldrb	r3, [r1, #13]
   27aca:	06db      	lsls	r3, r3, #27
   27acc:	d117      	bne.n	27afe <z_priq_dumb_remove+0x4a>
	return thread == _idle_thread;
   27ace:	4b0d      	ldr	r3, [pc, #52]	; (27b04 <z_priq_dumb_remove+0x50>)
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!is_idle(thread));
   27ad0:	681b      	ldr	r3, [r3, #0]
   27ad2:	429c      	cmp	r4, r3
   27ad4:	d10b      	bne.n	27aee <z_priq_dumb_remove+0x3a>
   27ad6:	490c      	ldr	r1, [pc, #48]	; (27b08 <z_priq_dumb_remove+0x54>)
   27ad8:	480c      	ldr	r0, [pc, #48]	; (27b0c <z_priq_dumb_remove+0x58>)
   27ada:	f44f 7323 	mov.w	r3, #652	; 0x28c
   27ade:	4a0c      	ldr	r2, [pc, #48]	; (27b10 <z_priq_dumb_remove+0x5c>)
   27ae0:	f006 fda7 	bl	2e632 <printk>
   27ae4:	f44f 7123 	mov.w	r1, #652	; 0x28c
   27ae8:	4809      	ldr	r0, [pc, #36]	; (27b10 <z_priq_dumb_remove+0x5c>)
   27aea:	f006 fdaf 	bl	2e64c <assert_post_action>
	node->prev->next = node->next;
   27aee:	e9d4 2300 	ldrd	r2, r3, [r4]
   27af2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   27af4:	6822      	ldr	r2, [r4, #0]
   27af6:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   27af8:	2300      	movs	r3, #0
	node->prev = NULL;
   27afa:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   27afe:	bd10      	pop	{r4, pc}
   27b00:	20027730 	.word	0x20027730
   27b04:	00033c08 	.word	0x00033c08
   27b08:	00035ec1 	.word	0x00035ec1
   27b0c:	0003452c 	.word	0x0003452c
   27b10:	00035e58 	.word	0x00035e58

00027b14 <z_unpend_thread>:
{
   27b14:	b538      	push	{r3, r4, r5, lr}
   27b16:	4604      	mov	r4, r0
	__asm__ volatile(
   27b18:	f04f 0320 	mov.w	r3, #32
   27b1c:	f3ef 8511 	mrs	r5, BASEPRI
   27b20:	f383 8811 	msr	BASEPRI, r3
   27b24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   27b28:	481d      	ldr	r0, [pc, #116]	; (27ba0 <z_unpend_thread+0x8c>)
   27b2a:	f000 ffe5 	bl	28af8 <z_spin_lock_valid>
   27b2e:	b960      	cbnz	r0, 27b4a <z_unpend_thread+0x36>
   27b30:	491c      	ldr	r1, [pc, #112]	; (27ba4 <z_unpend_thread+0x90>)
   27b32:	234e      	movs	r3, #78	; 0x4e
   27b34:	4a1c      	ldr	r2, [pc, #112]	; (27ba8 <z_unpend_thread+0x94>)
   27b36:	481d      	ldr	r0, [pc, #116]	; (27bac <z_unpend_thread+0x98>)
   27b38:	f006 fd7b 	bl	2e632 <printk>
   27b3c:	481c      	ldr	r0, [pc, #112]	; (27bb0 <z_unpend_thread+0x9c>)
   27b3e:	f006 fd78 	bl	2e632 <printk>
   27b42:	214e      	movs	r1, #78	; 0x4e
   27b44:	4818      	ldr	r0, [pc, #96]	; (27ba8 <z_unpend_thread+0x94>)
   27b46:	f006 fd81 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   27b4a:	4815      	ldr	r0, [pc, #84]	; (27ba0 <z_unpend_thread+0x8c>)
   27b4c:	f000 fff2 	bl	28b34 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   27b50:	f104 0008 	add.w	r0, r4, #8
   27b54:	f7ff fe2e 	bl	277b4 <pended_on.isra.15>
   27b58:	4621      	mov	r1, r4
   27b5a:	f7ff ffab 	bl	27ab4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   27b5e:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   27b60:	480f      	ldr	r0, [pc, #60]	; (27ba0 <z_unpend_thread+0x8c>)
   27b62:	f023 0302 	bic.w	r3, r3, #2
   27b66:	7363      	strb	r3, [r4, #13]
   27b68:	f000 ffd4 	bl	28b14 <z_spin_unlock_valid>
   27b6c:	b960      	cbnz	r0, 27b88 <z_unpend_thread+0x74>
   27b6e:	4911      	ldr	r1, [pc, #68]	; (27bb4 <z_unpend_thread+0xa0>)
   27b70:	2361      	movs	r3, #97	; 0x61
   27b72:	4a0d      	ldr	r2, [pc, #52]	; (27ba8 <z_unpend_thread+0x94>)
   27b74:	480d      	ldr	r0, [pc, #52]	; (27bac <z_unpend_thread+0x98>)
   27b76:	f006 fd5c 	bl	2e632 <printk>
   27b7a:	480f      	ldr	r0, [pc, #60]	; (27bb8 <z_unpend_thread+0xa4>)
   27b7c:	f006 fd59 	bl	2e632 <printk>
   27b80:	2161      	movs	r1, #97	; 0x61
   27b82:	4809      	ldr	r0, [pc, #36]	; (27ba8 <z_unpend_thread+0x94>)
   27b84:	f006 fd62 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   27b88:	f385 8811 	msr	BASEPRI, r5
   27b8c:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   27b90:	2300      	movs	r3, #0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   27b92:	f104 0018 	add.w	r0, r4, #24
   27b96:	60a3      	str	r3, [r4, #8]
}
   27b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27b9c:	f001 bad0 	b.w	29140 <z_abort_timeout>
   27ba0:	20027768 	.word	0x20027768
   27ba4:	0003494a 	.word	0x0003494a
   27ba8:	0003491e 	.word	0x0003491e
   27bac:	0003452c 	.word	0x0003452c
   27bb0:	0003495f 	.word	0x0003495f
   27bb4:	00034974 	.word	0x00034974
   27bb8:	0003498b 	.word	0x0003498b

00027bbc <update_cache>:
{
   27bbc:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   27bbe:	4c15      	ldr	r4, [pc, #84]	; (27c14 <update_cache+0x58>)
{
   27bc0:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   27bc2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   27bc6:	f008 fe85 	bl	308d4 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   27bca:	4605      	mov	r5, r0
   27bcc:	b900      	cbnz	r0, 27bd0 <update_cache+0x14>
   27bce:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   27bd0:	b9ca      	cbnz	r2, 27c06 <update_cache+0x4a>
	__ASSERT(_current != NULL, "");
   27bd2:	68a3      	ldr	r3, [r4, #8]
   27bd4:	b963      	cbnz	r3, 27bf0 <update_cache+0x34>
   27bd6:	4910      	ldr	r1, [pc, #64]	; (27c18 <update_cache+0x5c>)
   27bd8:	237f      	movs	r3, #127	; 0x7f
   27bda:	4a10      	ldr	r2, [pc, #64]	; (27c1c <update_cache+0x60>)
   27bdc:	4810      	ldr	r0, [pc, #64]	; (27c20 <update_cache+0x64>)
   27bde:	f006 fd28 	bl	2e632 <printk>
   27be2:	4810      	ldr	r0, [pc, #64]	; (27c24 <update_cache+0x68>)
   27be4:	f006 fd25 	bl	2e632 <printk>
   27be8:	217f      	movs	r1, #127	; 0x7f
   27bea:	480c      	ldr	r0, [pc, #48]	; (27c1c <update_cache+0x60>)
   27bec:	f006 fd2e 	bl	2e64c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   27bf0:	68a3      	ldr	r3, [r4, #8]
   27bf2:	7b5a      	ldrb	r2, [r3, #13]
   27bf4:	06d2      	lsls	r2, r2, #27
   27bf6:	d106      	bne.n	27c06 <update_cache+0x4a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   27bf8:	69aa      	ldr	r2, [r5, #24]
   27bfa:	b922      	cbnz	r2, 27c06 <update_cache+0x4a>
	if (is_preempt(_current) || is_metairq(th)) {
   27bfc:	89da      	ldrh	r2, [r3, #14]
   27bfe:	2a7f      	cmp	r2, #127	; 0x7f
   27c00:	d901      	bls.n	27c06 <update_cache+0x4a>
		_kernel.ready_q.cache = _current;
   27c02:	6263      	str	r3, [r4, #36]	; 0x24
}
   27c04:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   27c06:	68a3      	ldr	r3, [r4, #8]
   27c08:	42ab      	cmp	r3, r5
   27c0a:	d001      	beq.n	27c10 <update_cache+0x54>
			reset_time_slice();
   27c0c:	f7ff fdc0 	bl	27790 <reset_time_slice>
		_kernel.ready_q.cache = th;
   27c10:	6265      	str	r5, [r4, #36]	; 0x24
}
   27c12:	e7f7      	b.n	27c04 <update_cache+0x48>
   27c14:	20027730 	.word	0x20027730
   27c18:	00035e97 	.word	0x00035e97
   27c1c:	00035e58 	.word	0x00035e58
   27c20:	0003452c 	.word	0x0003452c
   27c24:	000346b0 	.word	0x000346b0

00027c28 <k_sched_unlock>:
{
   27c28:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
   27c2a:	4c33      	ldr	r4, [pc, #204]	; (27cf8 <k_sched_unlock+0xd0>)
   27c2c:	68a2      	ldr	r2, [r4, #8]
   27c2e:	7bd2      	ldrb	r2, [r2, #15]
   27c30:	b972      	cbnz	r2, 27c50 <k_sched_unlock+0x28>
   27c32:	4932      	ldr	r1, [pc, #200]	; (27cfc <k_sched_unlock+0xd4>)
   27c34:	f240 2321 	movw	r3, #545	; 0x221
   27c38:	4a31      	ldr	r2, [pc, #196]	; (27d00 <k_sched_unlock+0xd8>)
   27c3a:	4832      	ldr	r0, [pc, #200]	; (27d04 <k_sched_unlock+0xdc>)
   27c3c:	f006 fcf9 	bl	2e632 <printk>
   27c40:	4831      	ldr	r0, [pc, #196]	; (27d08 <k_sched_unlock+0xe0>)
   27c42:	f006 fcf6 	bl	2e632 <printk>
   27c46:	f240 2121 	movw	r1, #545	; 0x221
   27c4a:	482d      	ldr	r0, [pc, #180]	; (27d00 <k_sched_unlock+0xd8>)
   27c4c:	f006 fcfe 	bl	2e64c <assert_post_action>
   27c50:	f3ef 8305 	mrs	r3, IPSR
   27c54:	2b0d      	cmp	r3, #13
   27c56:	d804      	bhi.n	27c62 <k_sched_unlock+0x3a>
   27c58:	b193      	cbz	r3, 27c80 <k_sched_unlock+0x58>
   27c5a:	4b2c      	ldr	r3, [pc, #176]	; (27d0c <k_sched_unlock+0xe4>)
   27c5c:	685b      	ldr	r3, [r3, #4]
   27c5e:	051b      	lsls	r3, r3, #20
   27c60:	d40e      	bmi.n	27c80 <k_sched_unlock+0x58>
	__ASSERT(!z_is_in_isr(), "");
   27c62:	492b      	ldr	r1, [pc, #172]	; (27d10 <k_sched_unlock+0xe8>)
   27c64:	f240 2322 	movw	r3, #546	; 0x222
   27c68:	4a25      	ldr	r2, [pc, #148]	; (27d00 <k_sched_unlock+0xd8>)
   27c6a:	4826      	ldr	r0, [pc, #152]	; (27d04 <k_sched_unlock+0xdc>)
   27c6c:	f006 fce1 	bl	2e632 <printk>
   27c70:	4825      	ldr	r0, [pc, #148]	; (27d08 <k_sched_unlock+0xe0>)
   27c72:	f006 fcde 	bl	2e632 <printk>
   27c76:	f240 2122 	movw	r1, #546	; 0x222
   27c7a:	4821      	ldr	r0, [pc, #132]	; (27d00 <k_sched_unlock+0xd8>)
   27c7c:	f006 fce6 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   27c80:	f04f 0320 	mov.w	r3, #32
   27c84:	f3ef 8511 	mrs	r5, BASEPRI
   27c88:	f383 8811 	msr	BASEPRI, r3
   27c8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   27c90:	4820      	ldr	r0, [pc, #128]	; (27d14 <k_sched_unlock+0xec>)
   27c92:	f000 ff31 	bl	28af8 <z_spin_lock_valid>
   27c96:	b960      	cbnz	r0, 27cb2 <k_sched_unlock+0x8a>
   27c98:	491f      	ldr	r1, [pc, #124]	; (27d18 <k_sched_unlock+0xf0>)
   27c9a:	234e      	movs	r3, #78	; 0x4e
   27c9c:	4a1f      	ldr	r2, [pc, #124]	; (27d1c <k_sched_unlock+0xf4>)
   27c9e:	4819      	ldr	r0, [pc, #100]	; (27d04 <k_sched_unlock+0xdc>)
   27ca0:	f006 fcc7 	bl	2e632 <printk>
   27ca4:	481e      	ldr	r0, [pc, #120]	; (27d20 <k_sched_unlock+0xf8>)
   27ca6:	f006 fcc4 	bl	2e632 <printk>
   27caa:	214e      	movs	r1, #78	; 0x4e
   27cac:	481b      	ldr	r0, [pc, #108]	; (27d1c <k_sched_unlock+0xf4>)
   27cae:	f006 fccd 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   27cb2:	4818      	ldr	r0, [pc, #96]	; (27d14 <k_sched_unlock+0xec>)
   27cb4:	f000 ff3e 	bl	28b34 <z_spin_lock_set_owner>
		++_current->base.sched_locked;
   27cb8:	68a2      	ldr	r2, [r4, #8]
		update_cache(1);
   27cba:	2001      	movs	r0, #1
		++_current->base.sched_locked;
   27cbc:	7bd3      	ldrb	r3, [r2, #15]
   27cbe:	3301      	adds	r3, #1
   27cc0:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
   27cc2:	f7ff ff7b 	bl	27bbc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   27cc6:	4813      	ldr	r0, [pc, #76]	; (27d14 <k_sched_unlock+0xec>)
   27cc8:	f000 ff24 	bl	28b14 <z_spin_unlock_valid>
   27ccc:	b960      	cbnz	r0, 27ce8 <k_sched_unlock+0xc0>
   27cce:	4915      	ldr	r1, [pc, #84]	; (27d24 <k_sched_unlock+0xfc>)
   27cd0:	2361      	movs	r3, #97	; 0x61
   27cd2:	4a12      	ldr	r2, [pc, #72]	; (27d1c <k_sched_unlock+0xf4>)
   27cd4:	480b      	ldr	r0, [pc, #44]	; (27d04 <k_sched_unlock+0xdc>)
   27cd6:	f006 fcac 	bl	2e632 <printk>
   27cda:	4813      	ldr	r0, [pc, #76]	; (27d28 <k_sched_unlock+0x100>)
   27cdc:	f006 fca9 	bl	2e632 <printk>
   27ce0:	2161      	movs	r1, #97	; 0x61
   27ce2:	480e      	ldr	r0, [pc, #56]	; (27d1c <k_sched_unlock+0xf4>)
   27ce4:	f006 fcb2 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   27ce8:	f385 8811 	msr	BASEPRI, r5
   27cec:	f3bf 8f6f 	isb	sy
}
   27cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   27cf4:	f008 bde4 	b.w	308c0 <z_reschedule_unlocked>
   27cf8:	20027730 	.word	0x20027730
   27cfc:	00035e30 	.word	0x00035e30
   27d00:	00035e58 	.word	0x00035e58
   27d04:	0003452c 	.word	0x0003452c
   27d08:	000346b0 	.word	0x000346b0
   27d0c:	e000ed00 	.word	0xe000ed00
   27d10:	00035dfb 	.word	0x00035dfb
   27d14:	20027768 	.word	0x20027768
   27d18:	0003494a 	.word	0x0003494a
   27d1c:	0003491e 	.word	0x0003491e
   27d20:	0003495f 	.word	0x0003495f
   27d24:	00034974 	.word	0x00034974
   27d28:	0003498b 	.word	0x0003498b

00027d2c <z_add_thread_to_ready_q>:
{
   27d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27d2e:	4604      	mov	r4, r0
	__asm__ volatile(
   27d30:	f04f 0320 	mov.w	r3, #32
   27d34:	f3ef 8511 	mrs	r5, BASEPRI
   27d38:	f383 8811 	msr	BASEPRI, r3
   27d3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   27d40:	482f      	ldr	r0, [pc, #188]	; (27e00 <z_add_thread_to_ready_q+0xd4>)
   27d42:	f000 fed9 	bl	28af8 <z_spin_lock_valid>
   27d46:	b960      	cbnz	r0, 27d62 <z_add_thread_to_ready_q+0x36>
   27d48:	492e      	ldr	r1, [pc, #184]	; (27e04 <z_add_thread_to_ready_q+0xd8>)
   27d4a:	234e      	movs	r3, #78	; 0x4e
   27d4c:	4a2e      	ldr	r2, [pc, #184]	; (27e08 <z_add_thread_to_ready_q+0xdc>)
   27d4e:	482f      	ldr	r0, [pc, #188]	; (27e0c <z_add_thread_to_ready_q+0xe0>)
   27d50:	f006 fc6f 	bl	2e632 <printk>
   27d54:	482e      	ldr	r0, [pc, #184]	; (27e10 <z_add_thread_to_ready_q+0xe4>)
   27d56:	f006 fc6c 	bl	2e632 <printk>
   27d5a:	214e      	movs	r1, #78	; 0x4e
   27d5c:	482a      	ldr	r0, [pc, #168]	; (27e08 <z_add_thread_to_ready_q+0xdc>)
   27d5e:	f006 fc75 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   27d62:	4827      	ldr	r0, [pc, #156]	; (27e00 <z_add_thread_to_ready_q+0xd4>)
   27d64:	f000 fee6 	bl	28b34 <z_spin_lock_set_owner>
	return thread == _idle_thread;
   27d68:	4b2a      	ldr	r3, [pc, #168]	; (27e14 <z_add_thread_to_ready_q+0xe8>)
	__ASSERT_NO_MSG(!is_idle(thread));
   27d6a:	681b      	ldr	r3, [r3, #0]
   27d6c:	429c      	cmp	r4, r3
   27d6e:	d10b      	bne.n	27d88 <z_add_thread_to_ready_q+0x5c>
   27d70:	4929      	ldr	r1, [pc, #164]	; (27e18 <z_add_thread_to_ready_q+0xec>)
   27d72:	4826      	ldr	r0, [pc, #152]	; (27e0c <z_add_thread_to_ready_q+0xe0>)
   27d74:	f240 2376 	movw	r3, #630	; 0x276
   27d78:	4a28      	ldr	r2, [pc, #160]	; (27e1c <z_add_thread_to_ready_q+0xf0>)
   27d7a:	f006 fc5a 	bl	2e632 <printk>
   27d7e:	f240 2176 	movw	r1, #630	; 0x276
   27d82:	4826      	ldr	r0, [pc, #152]	; (27e1c <z_add_thread_to_ready_q+0xf0>)
   27d84:	f006 fc62 	bl	2e64c <assert_post_action>
	return list->head == list;
   27d88:	4a25      	ldr	r2, [pc, #148]	; (27e20 <z_add_thread_to_ready_q+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27d8a:	f102 0128 	add.w	r1, r2, #40	; 0x28
   27d8e:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   27d92:	428b      	cmp	r3, r1
   27d94:	d00b      	beq.n	27dae <z_add_thread_to_ready_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27d96:	b153      	cbz	r3, 27dae <z_add_thread_to_ready_q+0x82>
	if (t1->base.prio < t2->base.prio) {
   27d98:	f994 600e 	ldrsb.w	r6, [r4, #14]
   27d9c:	f993 700e 	ldrsb.w	r7, [r3, #14]
   27da0:	42b7      	cmp	r7, r6
   27da2:	dc0a      	bgt.n	27dba <z_add_thread_to_ready_q+0x8e>
	return (node == list->tail) ? NULL : node->next;
   27da4:	4298      	cmp	r0, r3
   27da6:	d002      	beq.n	27dae <z_add_thread_to_ready_q+0x82>
   27da8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27daa:	2b00      	cmp	r3, #0
   27dac:	d1f6      	bne.n	27d9c <z_add_thread_to_ready_q+0x70>
	node->prev = list->tail;
   27dae:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   27db2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   27db4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   27db6:	62d4      	str	r4, [r2, #44]	; 0x2c
   27db8:	e005      	b.n	27dc6 <z_add_thread_to_ready_q+0x9a>
	node->prev = successor->prev;
   27dba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   27dbc:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   27dc0:	685a      	ldr	r2, [r3, #4]
   27dc2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   27dc4:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   27dc6:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   27dc8:	2000      	movs	r0, #0
   27dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   27dce:	7363      	strb	r3, [r4, #13]
   27dd0:	f7ff fef4 	bl	27bbc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   27dd4:	480a      	ldr	r0, [pc, #40]	; (27e00 <z_add_thread_to_ready_q+0xd4>)
   27dd6:	f000 fe9d 	bl	28b14 <z_spin_unlock_valid>
   27dda:	b960      	cbnz	r0, 27df6 <z_add_thread_to_ready_q+0xca>
   27ddc:	4911      	ldr	r1, [pc, #68]	; (27e24 <z_add_thread_to_ready_q+0xf8>)
   27dde:	2361      	movs	r3, #97	; 0x61
   27de0:	4a09      	ldr	r2, [pc, #36]	; (27e08 <z_add_thread_to_ready_q+0xdc>)
   27de2:	480a      	ldr	r0, [pc, #40]	; (27e0c <z_add_thread_to_ready_q+0xe0>)
   27de4:	f006 fc25 	bl	2e632 <printk>
   27de8:	480f      	ldr	r0, [pc, #60]	; (27e28 <z_add_thread_to_ready_q+0xfc>)
   27dea:	f006 fc22 	bl	2e632 <printk>
   27dee:	2161      	movs	r1, #97	; 0x61
   27df0:	4805      	ldr	r0, [pc, #20]	; (27e08 <z_add_thread_to_ready_q+0xdc>)
   27df2:	f006 fc2b 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   27df6:	f385 8811 	msr	BASEPRI, r5
   27dfa:	f3bf 8f6f 	isb	sy
}
   27dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27e00:	20027768 	.word	0x20027768
   27e04:	0003494a 	.word	0x0003494a
   27e08:	0003491e 	.word	0x0003491e
   27e0c:	0003452c 	.word	0x0003452c
   27e10:	0003495f 	.word	0x0003495f
   27e14:	00033c08 	.word	0x00033c08
   27e18:	00035ec1 	.word	0x00035ec1
   27e1c:	00035e58 	.word	0x00035e58
   27e20:	20027730 	.word	0x20027730
   27e24:	00034974 	.word	0x00034974
   27e28:	0003498b 	.word	0x0003498b

00027e2c <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   27e2c:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   27e30:	b570      	push	{r4, r5, r6, lr}
   27e32:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   27e34:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   27e38:	2b00      	cmp	r3, #0
   27e3a:	d040      	beq.n	27ebe <z_thread_timeout+0x92>
	__asm__ volatile(
   27e3c:	f04f 0320 	mov.w	r3, #32
   27e40:	f3ef 8611 	mrs	r6, BASEPRI
   27e44:	f383 8811 	msr	BASEPRI, r3
   27e48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   27e4c:	4824      	ldr	r0, [pc, #144]	; (27ee0 <z_thread_timeout+0xb4>)
   27e4e:	f000 fe53 	bl	28af8 <z_spin_lock_valid>
   27e52:	b960      	cbnz	r0, 27e6e <z_thread_timeout+0x42>
   27e54:	4923      	ldr	r1, [pc, #140]	; (27ee4 <z_thread_timeout+0xb8>)
   27e56:	234e      	movs	r3, #78	; 0x4e
   27e58:	4a23      	ldr	r2, [pc, #140]	; (27ee8 <z_thread_timeout+0xbc>)
   27e5a:	4824      	ldr	r0, [pc, #144]	; (27eec <z_thread_timeout+0xc0>)
   27e5c:	f006 fbe9 	bl	2e632 <printk>
   27e60:	4823      	ldr	r0, [pc, #140]	; (27ef0 <z_thread_timeout+0xc4>)
   27e62:	f006 fbe6 	bl	2e632 <printk>
   27e66:	214e      	movs	r1, #78	; 0x4e
   27e68:	481f      	ldr	r0, [pc, #124]	; (27ee8 <z_thread_timeout+0xbc>)
   27e6a:	f006 fbef 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   27e6e:	481c      	ldr	r0, [pc, #112]	; (27ee0 <z_thread_timeout+0xb4>)
   27e70:	f000 fe60 	bl	28b34 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   27e74:	f1a4 0010 	sub.w	r0, r4, #16
   27e78:	f7ff fc9c 	bl	277b4 <pended_on.isra.15>
   27e7c:	4629      	mov	r1, r5
   27e7e:	f7ff fe19 	bl	27ab4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   27e82:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   27e86:	4816      	ldr	r0, [pc, #88]	; (27ee0 <z_thread_timeout+0xb4>)
   27e88:	f023 0302 	bic.w	r3, r3, #2
   27e8c:	f804 3c0b 	strb.w	r3, [r4, #-11]
   27e90:	f000 fe40 	bl	28b14 <z_spin_unlock_valid>
   27e94:	b960      	cbnz	r0, 27eb0 <z_thread_timeout+0x84>
   27e96:	4917      	ldr	r1, [pc, #92]	; (27ef4 <z_thread_timeout+0xc8>)
   27e98:	2361      	movs	r3, #97	; 0x61
   27e9a:	4a13      	ldr	r2, [pc, #76]	; (27ee8 <z_thread_timeout+0xbc>)
   27e9c:	4813      	ldr	r0, [pc, #76]	; (27eec <z_thread_timeout+0xc0>)
   27e9e:	f006 fbc8 	bl	2e632 <printk>
   27ea2:	4815      	ldr	r0, [pc, #84]	; (27ef8 <z_thread_timeout+0xcc>)
   27ea4:	f006 fbc5 	bl	2e632 <printk>
   27ea8:	2161      	movs	r1, #97	; 0x61
   27eaa:	480f      	ldr	r0, [pc, #60]	; (27ee8 <z_thread_timeout+0xbc>)
   27eac:	f006 fbce 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   27eb0:	f386 8811 	msr	BASEPRI, r6
   27eb4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   27eb8:	2300      	movs	r3, #0
   27eba:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   27ebe:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   27ec2:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   27ec4:	f023 0314 	bic.w	r3, r3, #20
   27ec8:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   27ecc:	f008 fcd7 	bl	3087e <z_is_thread_ready>
   27ed0:	b120      	cbz	r0, 27edc <z_thread_timeout+0xb0>
		z_add_thread_to_ready_q(thread);
   27ed2:	4628      	mov	r0, r5
}
   27ed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   27ed8:	f7ff bf28 	b.w	27d2c <z_add_thread_to_ready_q>
   27edc:	bd70      	pop	{r4, r5, r6, pc}
   27ede:	bf00      	nop
   27ee0:	20027768 	.word	0x20027768
   27ee4:	0003494a 	.word	0x0003494a
   27ee8:	0003491e 	.word	0x0003491e
   27eec:	0003452c 	.word	0x0003452c
   27ef0:	0003495f 	.word	0x0003495f
   27ef4:	00034974 	.word	0x00034974
   27ef8:	0003498b 	.word	0x0003498b

00027efc <z_move_thread_to_end_of_prio_q>:
{
   27efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27efe:	4604      	mov	r4, r0
	__asm__ volatile(
   27f00:	f04f 0320 	mov.w	r3, #32
   27f04:	f3ef 8511 	mrs	r5, BASEPRI
   27f08:	f383 8811 	msr	BASEPRI, r3
   27f0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   27f10:	4833      	ldr	r0, [pc, #204]	; (27fe0 <z_move_thread_to_end_of_prio_q+0xe4>)
   27f12:	f000 fdf1 	bl	28af8 <z_spin_lock_valid>
   27f16:	b960      	cbnz	r0, 27f32 <z_move_thread_to_end_of_prio_q+0x36>
   27f18:	4932      	ldr	r1, [pc, #200]	; (27fe4 <z_move_thread_to_end_of_prio_q+0xe8>)
   27f1a:	234e      	movs	r3, #78	; 0x4e
   27f1c:	4a32      	ldr	r2, [pc, #200]	; (27fe8 <z_move_thread_to_end_of_prio_q+0xec>)
   27f1e:	4833      	ldr	r0, [pc, #204]	; (27fec <z_move_thread_to_end_of_prio_q+0xf0>)
   27f20:	f006 fb87 	bl	2e632 <printk>
   27f24:	4832      	ldr	r0, [pc, #200]	; (27ff0 <z_move_thread_to_end_of_prio_q+0xf4>)
   27f26:	f006 fb84 	bl	2e632 <printk>
   27f2a:	214e      	movs	r1, #78	; 0x4e
   27f2c:	482e      	ldr	r0, [pc, #184]	; (27fe8 <z_move_thread_to_end_of_prio_q+0xec>)
   27f2e:	f006 fb8d 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   27f32:	482b      	ldr	r0, [pc, #172]	; (27fe0 <z_move_thread_to_end_of_prio_q+0xe4>)
   27f34:	f000 fdfe 	bl	28b34 <z_spin_lock_set_owner>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   27f38:	4621      	mov	r1, r4
   27f3a:	482e      	ldr	r0, [pc, #184]	; (27ff4 <z_move_thread_to_end_of_prio_q+0xf8>)
   27f3c:	f7ff fdba 	bl	27ab4 <z_priq_dumb_remove>
	return thread == _idle_thread;
   27f40:	4b2d      	ldr	r3, [pc, #180]	; (27ff8 <z_move_thread_to_end_of_prio_q+0xfc>)
	__ASSERT_NO_MSG(!is_idle(thread));
   27f42:	681b      	ldr	r3, [r3, #0]
   27f44:	429c      	cmp	r4, r3
   27f46:	d10b      	bne.n	27f60 <z_move_thread_to_end_of_prio_q+0x64>
   27f48:	492c      	ldr	r1, [pc, #176]	; (27ffc <z_move_thread_to_end_of_prio_q+0x100>)
   27f4a:	4828      	ldr	r0, [pc, #160]	; (27fec <z_move_thread_to_end_of_prio_q+0xf0>)
   27f4c:	f240 2376 	movw	r3, #630	; 0x276
   27f50:	4a2b      	ldr	r2, [pc, #172]	; (28000 <z_move_thread_to_end_of_prio_q+0x104>)
   27f52:	f006 fb6e 	bl	2e632 <printk>
   27f56:	f240 2176 	movw	r1, #630	; 0x276
   27f5a:	4829      	ldr	r0, [pc, #164]	; (28000 <z_move_thread_to_end_of_prio_q+0x104>)
   27f5c:	f006 fb76 	bl	2e64c <assert_post_action>
	return list->head == list;
   27f60:	4a28      	ldr	r2, [pc, #160]	; (28004 <z_move_thread_to_end_of_prio_q+0x108>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27f62:	f102 0128 	add.w	r1, r2, #40	; 0x28
   27f66:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   27f6a:	428b      	cmp	r3, r1
   27f6c:	d00b      	beq.n	27f86 <z_move_thread_to_end_of_prio_q+0x8a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27f6e:	b153      	cbz	r3, 27f86 <z_move_thread_to_end_of_prio_q+0x8a>
	if (t1->base.prio < t2->base.prio) {
   27f70:	f994 600e 	ldrsb.w	r6, [r4, #14]
   27f74:	f993 700e 	ldrsb.w	r7, [r3, #14]
   27f78:	42b7      	cmp	r7, r6
   27f7a:	dc0a      	bgt.n	27f92 <z_move_thread_to_end_of_prio_q+0x96>
	return (node == list->tail) ? NULL : node->next;
   27f7c:	4283      	cmp	r3, r0
   27f7e:	d002      	beq.n	27f86 <z_move_thread_to_end_of_prio_q+0x8a>
   27f80:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27f82:	2b00      	cmp	r3, #0
   27f84:	d1f6      	bne.n	27f74 <z_move_thread_to_end_of_prio_q+0x78>
	node->prev = list->tail;
   27f86:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   27f8a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   27f8c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   27f8e:	62d4      	str	r4, [r2, #44]	; 0x2c
   27f90:	e005      	b.n	27f9e <z_move_thread_to_end_of_prio_q+0xa2>
	node->prev = successor->prev;
   27f92:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   27f94:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   27f98:	6859      	ldr	r1, [r3, #4]
   27f9a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   27f9c:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   27f9e:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   27fa0:	6890      	ldr	r0, [r2, #8]
   27fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   27fa6:	7363      	strb	r3, [r4, #13]
   27fa8:	1b03      	subs	r3, r0, r4
   27faa:	4258      	negs	r0, r3
   27fac:	4158      	adcs	r0, r3
   27fae:	f7ff fe05 	bl	27bbc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   27fb2:	480b      	ldr	r0, [pc, #44]	; (27fe0 <z_move_thread_to_end_of_prio_q+0xe4>)
   27fb4:	f000 fdae 	bl	28b14 <z_spin_unlock_valid>
   27fb8:	b960      	cbnz	r0, 27fd4 <z_move_thread_to_end_of_prio_q+0xd8>
   27fba:	4913      	ldr	r1, [pc, #76]	; (28008 <z_move_thread_to_end_of_prio_q+0x10c>)
   27fbc:	2361      	movs	r3, #97	; 0x61
   27fbe:	4a0a      	ldr	r2, [pc, #40]	; (27fe8 <z_move_thread_to_end_of_prio_q+0xec>)
   27fc0:	480a      	ldr	r0, [pc, #40]	; (27fec <z_move_thread_to_end_of_prio_q+0xf0>)
   27fc2:	f006 fb36 	bl	2e632 <printk>
   27fc6:	4811      	ldr	r0, [pc, #68]	; (2800c <z_move_thread_to_end_of_prio_q+0x110>)
   27fc8:	f006 fb33 	bl	2e632 <printk>
   27fcc:	2161      	movs	r1, #97	; 0x61
   27fce:	4806      	ldr	r0, [pc, #24]	; (27fe8 <z_move_thread_to_end_of_prio_q+0xec>)
   27fd0:	f006 fb3c 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   27fd4:	f385 8811 	msr	BASEPRI, r5
   27fd8:	f3bf 8f6f 	isb	sy
}
   27fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27fde:	bf00      	nop
   27fe0:	20027768 	.word	0x20027768
   27fe4:	0003494a 	.word	0x0003494a
   27fe8:	0003491e 	.word	0x0003491e
   27fec:	0003452c 	.word	0x0003452c
   27ff0:	0003495f 	.word	0x0003495f
   27ff4:	20027758 	.word	0x20027758
   27ff8:	00033c08 	.word	0x00033c08
   27ffc:	00035ec1 	.word	0x00035ec1
   28000:	00035e58 	.word	0x00035e58
   28004:	20027730 	.word	0x20027730
   28008:	00034974 	.word	0x00034974
   2800c:	0003498b 	.word	0x0003498b

00028010 <z_time_slice>:
	if (pending_current == _current) {
   28010:	4914      	ldr	r1, [pc, #80]	; (28064 <z_time_slice+0x54>)
   28012:	4a15      	ldr	r2, [pc, #84]	; (28068 <z_time_slice+0x58>)
{
   28014:	b510      	push	{r4, lr}
	if (pending_current == _current) {
   28016:	688b      	ldr	r3, [r1, #8]
   28018:	6814      	ldr	r4, [r2, #0]
   2801a:	42a3      	cmp	r3, r4
   2801c:	d103      	bne.n	28026 <z_time_slice+0x16>
}
   2801e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
   28022:	f7ff bbb5 	b.w	27790 <reset_time_slice>
	pending_current = NULL;
   28026:	2400      	movs	r4, #0
   28028:	6014      	str	r4, [r2, #0]
	if (slice_time && sliceable(_current)) {
   2802a:	4a10      	ldr	r2, [pc, #64]	; (2806c <z_time_slice+0x5c>)
   2802c:	6812      	ldr	r2, [r2, #0]
   2802e:	b1ba      	cbz	r2, 28060 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
   28030:	89da      	ldrh	r2, [r3, #14]
   28032:	2a7f      	cmp	r2, #127	; 0x7f
   28034:	d814      	bhi.n	28060 <z_time_slice+0x50>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   28036:	4a0e      	ldr	r2, [pc, #56]	; (28070 <z_time_slice+0x60>)
   28038:	f993 400e 	ldrsb.w	r4, [r3, #14]
   2803c:	6812      	ldr	r2, [r2, #0]
   2803e:	4294      	cmp	r4, r2
   28040:	db0e      	blt.n	28060 <z_time_slice+0x50>
	return thread == _idle_thread;
   28042:	4a0c      	ldr	r2, [pc, #48]	; (28074 <z_time_slice+0x64>)
		&& !is_idle(t)
   28044:	6812      	ldr	r2, [r2, #0]
   28046:	4293      	cmp	r3, r2
   28048:	d00a      	beq.n	28060 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
   2804a:	699a      	ldr	r2, [r3, #24]
   2804c:	b942      	cbnz	r2, 28060 <z_time_slice+0x50>
		if (ticks >= _current_cpu->slice_ticks) {
   2804e:	690a      	ldr	r2, [r1, #16]
   28050:	4282      	cmp	r2, r0
   28052:	dc03      	bgt.n	2805c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   28054:	4618      	mov	r0, r3
   28056:	f7ff ff51 	bl	27efc <z_move_thread_to_end_of_prio_q>
   2805a:	e7e0      	b.n	2801e <z_time_slice+0xe>
			_current_cpu->slice_ticks -= ticks;
   2805c:	1a12      	subs	r2, r2, r0
   2805e:	610a      	str	r2, [r1, #16]
}
   28060:	bd10      	pop	{r4, pc}
   28062:	bf00      	nop
   28064:	20027730 	.word	0x20027730
   28068:	20027764 	.word	0x20027764
   2806c:	20027770 	.word	0x20027770
   28070:	2002776c 	.word	0x2002776c
   28074:	00033c08 	.word	0x00033c08

00028078 <z_remove_thread_from_ready_q>:
{
   28078:	b538      	push	{r3, r4, r5, lr}
   2807a:	4604      	mov	r4, r0
	__asm__ volatile(
   2807c:	f04f 0320 	mov.w	r3, #32
   28080:	f3ef 8511 	mrs	r5, BASEPRI
   28084:	f383 8811 	msr	BASEPRI, r3
   28088:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2808c:	481d      	ldr	r0, [pc, #116]	; (28104 <z_remove_thread_from_ready_q+0x8c>)
   2808e:	f000 fd33 	bl	28af8 <z_spin_lock_valid>
   28092:	b960      	cbnz	r0, 280ae <z_remove_thread_from_ready_q+0x36>
   28094:	491c      	ldr	r1, [pc, #112]	; (28108 <z_remove_thread_from_ready_q+0x90>)
   28096:	234e      	movs	r3, #78	; 0x4e
   28098:	4a1c      	ldr	r2, [pc, #112]	; (2810c <z_remove_thread_from_ready_q+0x94>)
   2809a:	481d      	ldr	r0, [pc, #116]	; (28110 <z_remove_thread_from_ready_q+0x98>)
   2809c:	f006 fac9 	bl	2e632 <printk>
   280a0:	481c      	ldr	r0, [pc, #112]	; (28114 <z_remove_thread_from_ready_q+0x9c>)
   280a2:	f006 fac6 	bl	2e632 <printk>
   280a6:	214e      	movs	r1, #78	; 0x4e
   280a8:	4818      	ldr	r0, [pc, #96]	; (2810c <z_remove_thread_from_ready_q+0x94>)
   280aa:	f006 facf 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   280ae:	4815      	ldr	r0, [pc, #84]	; (28104 <z_remove_thread_from_ready_q+0x8c>)
   280b0:	f000 fd40 	bl	28b34 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   280b4:	7b63      	ldrb	r3, [r4, #13]
   280b6:	065a      	lsls	r2, r3, #25
   280b8:	d507      	bpl.n	280ca <z_remove_thread_from_ready_q+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   280ba:	4621      	mov	r1, r4
   280bc:	4816      	ldr	r0, [pc, #88]	; (28118 <z_remove_thread_from_ready_q+0xa0>)
   280be:	f7ff fcf9 	bl	27ab4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   280c2:	7b63      	ldrb	r3, [r4, #13]
   280c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   280c8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   280ca:	4b14      	ldr	r3, [pc, #80]	; (2811c <z_remove_thread_from_ready_q+0xa4>)
   280cc:	6898      	ldr	r0, [r3, #8]
   280ce:	1b03      	subs	r3, r0, r4
   280d0:	4258      	negs	r0, r3
   280d2:	4158      	adcs	r0, r3
   280d4:	f7ff fd72 	bl	27bbc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   280d8:	480a      	ldr	r0, [pc, #40]	; (28104 <z_remove_thread_from_ready_q+0x8c>)
   280da:	f000 fd1b 	bl	28b14 <z_spin_unlock_valid>
   280de:	b960      	cbnz	r0, 280fa <z_remove_thread_from_ready_q+0x82>
   280e0:	490f      	ldr	r1, [pc, #60]	; (28120 <z_remove_thread_from_ready_q+0xa8>)
   280e2:	2361      	movs	r3, #97	; 0x61
   280e4:	4a09      	ldr	r2, [pc, #36]	; (2810c <z_remove_thread_from_ready_q+0x94>)
   280e6:	480a      	ldr	r0, [pc, #40]	; (28110 <z_remove_thread_from_ready_q+0x98>)
   280e8:	f006 faa3 	bl	2e632 <printk>
   280ec:	480d      	ldr	r0, [pc, #52]	; (28124 <z_remove_thread_from_ready_q+0xac>)
   280ee:	f006 faa0 	bl	2e632 <printk>
   280f2:	2161      	movs	r1, #97	; 0x61
   280f4:	4805      	ldr	r0, [pc, #20]	; (2810c <z_remove_thread_from_ready_q+0x94>)
   280f6:	f006 faa9 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   280fa:	f385 8811 	msr	BASEPRI, r5
   280fe:	f3bf 8f6f 	isb	sy
}
   28102:	bd38      	pop	{r3, r4, r5, pc}
   28104:	20027768 	.word	0x20027768
   28108:	0003494a 	.word	0x0003494a
   2810c:	0003491e 	.word	0x0003491e
   28110:	0003452c 	.word	0x0003452c
   28114:	0003495f 	.word	0x0003495f
   28118:	20027758 	.word	0x20027758
   2811c:	20027730 	.word	0x20027730
   28120:	00034974 	.word	0x00034974
   28124:	0003498b 	.word	0x0003498b

00028128 <pend>:
{
   28128:	b570      	push	{r4, r5, r6, lr}
   2812a:	4604      	mov	r4, r0
   2812c:	460d      	mov	r5, r1
   2812e:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   28130:	f7ff ffa2 	bl	28078 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   28134:	7b63      	ldrb	r3, [r4, #13]
   28136:	f043 0302 	orr.w	r3, r3, #2
   2813a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2813c:	2d00      	cmp	r5, #0
   2813e:	d02d      	beq.n	2819c <pend+0x74>
	return thread == _idle_thread;
   28140:	4b21      	ldr	r3, [pc, #132]	; (281c8 <pend+0xa0>)
		thread->base.pended_on = wait_q;
   28142:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!is_idle(thread));
   28144:	681b      	ldr	r3, [r3, #0]
   28146:	429c      	cmp	r4, r3
   28148:	d10b      	bne.n	28162 <pend+0x3a>
   2814a:	4920      	ldr	r1, [pc, #128]	; (281cc <pend+0xa4>)
   2814c:	4820      	ldr	r0, [pc, #128]	; (281d0 <pend+0xa8>)
   2814e:	f240 2376 	movw	r3, #630	; 0x276
   28152:	4a20      	ldr	r2, [pc, #128]	; (281d4 <pend+0xac>)
   28154:	f006 fa6d 	bl	2e632 <printk>
   28158:	f240 2176 	movw	r1, #630	; 0x276
   2815c:	481d      	ldr	r0, [pc, #116]	; (281d4 <pend+0xac>)
   2815e:	f006 fa75 	bl	2e64c <assert_post_action>
	return list->head == list;
   28162:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28164:	429d      	cmp	r5, r3
   28166:	d00c      	beq.n	28182 <pend+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   28168:	b15b      	cbz	r3, 28182 <pend+0x5a>
	if (t1->base.prio < t2->base.prio) {
   2816a:	f994 200e 	ldrsb.w	r2, [r4, #14]
   2816e:	f993 100e 	ldrsb.w	r1, [r3, #14]
   28172:	4291      	cmp	r1, r2
   28174:	dc0c      	bgt.n	28190 <pend+0x68>
	return (node == list->tail) ? NULL : node->next;
   28176:	6869      	ldr	r1, [r5, #4]
   28178:	428b      	cmp	r3, r1
   2817a:	d002      	beq.n	28182 <pend+0x5a>
   2817c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2817e:	2b00      	cmp	r3, #0
   28180:	d1f5      	bne.n	2816e <pend+0x46>
	node->prev = list->tail;
   28182:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   28184:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   28186:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   28188:	686b      	ldr	r3, [r5, #4]
   2818a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2818c:	606c      	str	r4, [r5, #4]
   2818e:	e005      	b.n	2819c <pend+0x74>
	node->prev = successor->prev;
   28190:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   28192:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   28196:	685a      	ldr	r2, [r3, #4]
   28198:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2819a:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   2819c:	1c73      	adds	r3, r6, #1
   2819e:	d012      	beq.n	281c6 <pend+0x9e>
   281a0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   281a4:	2100      	movs	r1, #0
   281a6:	480c      	ldr	r0, [pc, #48]	; (281d8 <pend+0xb0>)
   281a8:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
   281ac:	fbc5 0106 	smlal	r0, r1, r5, r6
   281b0:	2300      	movs	r3, #0
   281b2:	f7e4 fc47 	bl	ca44 <__aeabi_ldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   281b6:	4909      	ldr	r1, [pc, #36]	; (281dc <pend+0xb4>)
   281b8:	1c42      	adds	r2, r0, #1
   281ba:	f104 0018 	add.w	r0, r4, #24
}
   281be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   281c2:	f000 bf17 	b.w	28ff4 <z_add_timeout>
   281c6:	bd70      	pop	{r4, r5, r6, pc}
   281c8:	00033c08 	.word	0x00033c08
   281cc:	00035ec1 	.word	0x00035ec1
   281d0:	0003452c 	.word	0x0003452c
   281d4:	00035e58 	.word	0x00035e58
   281d8:	0003e7ff 	.word	0x0003e7ff
   281dc:	00027e2d 	.word	0x00027e2d

000281e0 <z_pend_curr_irqlock>:
{
   281e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   281e2:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   281e4:	4d21      	ldr	r5, [pc, #132]	; (2826c <z_pend_curr_irqlock+0x8c>)
	pending_current = _current;
   281e6:	4c22      	ldr	r4, [pc, #136]	; (28270 <z_pend_curr_irqlock+0x90>)
	pend(_current, wait_q, timeout);
   281e8:	68a8      	ldr	r0, [r5, #8]
   281ea:	f7ff ff9d 	bl	28128 <pend>
	pending_current = _current;
   281ee:	68ab      	ldr	r3, [r5, #8]
   281f0:	4630      	mov	r0, r6
   281f2:	6023      	str	r3, [r4, #0]
   281f4:	f7eb fbc2 	bl	1397c <__swap>
   281f8:	4606      	mov	r6, r0
	__asm__ volatile(
   281fa:	f04f 0320 	mov.w	r3, #32
   281fe:	f3ef 8711 	mrs	r7, BASEPRI
   28202:	f383 8811 	msr	BASEPRI, r3
   28206:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2820a:	481a      	ldr	r0, [pc, #104]	; (28274 <z_pend_curr_irqlock+0x94>)
   2820c:	f000 fc74 	bl	28af8 <z_spin_lock_valid>
   28210:	b960      	cbnz	r0, 2822c <z_pend_curr_irqlock+0x4c>
   28212:	4919      	ldr	r1, [pc, #100]	; (28278 <z_pend_curr_irqlock+0x98>)
   28214:	234e      	movs	r3, #78	; 0x4e
   28216:	4a19      	ldr	r2, [pc, #100]	; (2827c <z_pend_curr_irqlock+0x9c>)
   28218:	4819      	ldr	r0, [pc, #100]	; (28280 <z_pend_curr_irqlock+0xa0>)
   2821a:	f006 fa0a 	bl	2e632 <printk>
   2821e:	4819      	ldr	r0, [pc, #100]	; (28284 <z_pend_curr_irqlock+0xa4>)
   28220:	f006 fa07 	bl	2e632 <printk>
   28224:	214e      	movs	r1, #78	; 0x4e
   28226:	4815      	ldr	r0, [pc, #84]	; (2827c <z_pend_curr_irqlock+0x9c>)
   28228:	f006 fa10 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   2822c:	4811      	ldr	r0, [pc, #68]	; (28274 <z_pend_curr_irqlock+0x94>)
   2822e:	f000 fc81 	bl	28b34 <z_spin_lock_set_owner>
		if (pending_current == _current) {
   28232:	6823      	ldr	r3, [r4, #0]
   28234:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   28236:	480f      	ldr	r0, [pc, #60]	; (28274 <z_pend_curr_irqlock+0x94>)
   28238:	429a      	cmp	r2, r3
			pending_current = NULL;
   2823a:	bf04      	itt	eq
   2823c:	2300      	moveq	r3, #0
   2823e:	6023      	streq	r3, [r4, #0]
   28240:	f000 fc68 	bl	28b14 <z_spin_unlock_valid>
   28244:	b960      	cbnz	r0, 28260 <z_pend_curr_irqlock+0x80>
   28246:	4910      	ldr	r1, [pc, #64]	; (28288 <z_pend_curr_irqlock+0xa8>)
   28248:	2361      	movs	r3, #97	; 0x61
   2824a:	4a0c      	ldr	r2, [pc, #48]	; (2827c <z_pend_curr_irqlock+0x9c>)
   2824c:	480c      	ldr	r0, [pc, #48]	; (28280 <z_pend_curr_irqlock+0xa0>)
   2824e:	f006 f9f0 	bl	2e632 <printk>
   28252:	480e      	ldr	r0, [pc, #56]	; (2828c <z_pend_curr_irqlock+0xac>)
   28254:	f006 f9ed 	bl	2e632 <printk>
   28258:	2161      	movs	r1, #97	; 0x61
   2825a:	4808      	ldr	r0, [pc, #32]	; (2827c <z_pend_curr_irqlock+0x9c>)
   2825c:	f006 f9f6 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   28260:	f387 8811 	msr	BASEPRI, r7
   28264:	f3bf 8f6f 	isb	sy
}
   28268:	4630      	mov	r0, r6
   2826a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2826c:	20027730 	.word	0x20027730
   28270:	20027764 	.word	0x20027764
   28274:	20027768 	.word	0x20027768
   28278:	0003494a 	.word	0x0003494a
   2827c:	0003491e 	.word	0x0003491e
   28280:	0003452c 	.word	0x0003452c
   28284:	0003495f 	.word	0x0003495f
   28288:	00034974 	.word	0x00034974
   2828c:	0003498b 	.word	0x0003498b

00028290 <z_pend_curr>:
{
   28290:	b538      	push	{r3, r4, r5, lr}
   28292:	4605      	mov	r5, r0
   28294:	460c      	mov	r4, r1
   28296:	4611      	mov	r1, r2
	pending_current = _current;
   28298:	4a0e      	ldr	r2, [pc, #56]	; (282d4 <z_pend_curr+0x44>)
   2829a:	6890      	ldr	r0, [r2, #8]
   2829c:	4a0e      	ldr	r2, [pc, #56]	; (282d8 <z_pend_curr+0x48>)
   2829e:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   282a0:	461a      	mov	r2, r3
   282a2:	f7ff ff41 	bl	28128 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   282a6:	4628      	mov	r0, r5
   282a8:	f000 fc34 	bl	28b14 <z_spin_unlock_valid>
   282ac:	b960      	cbnz	r0, 282c8 <z_pend_curr+0x38>
   282ae:	490b      	ldr	r1, [pc, #44]	; (282dc <z_pend_curr+0x4c>)
   282b0:	2378      	movs	r3, #120	; 0x78
   282b2:	4a0b      	ldr	r2, [pc, #44]	; (282e0 <z_pend_curr+0x50>)
   282b4:	480b      	ldr	r0, [pc, #44]	; (282e4 <z_pend_curr+0x54>)
   282b6:	f006 f9bc 	bl	2e632 <printk>
   282ba:	480b      	ldr	r0, [pc, #44]	; (282e8 <z_pend_curr+0x58>)
   282bc:	f006 f9b9 	bl	2e632 <printk>
   282c0:	2178      	movs	r1, #120	; 0x78
   282c2:	4807      	ldr	r0, [pc, #28]	; (282e0 <z_pend_curr+0x50>)
   282c4:	f006 f9c2 	bl	2e64c <assert_post_action>
   282c8:	4620      	mov	r0, r4
}
   282ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   282ce:	f7eb bb55 	b.w	1397c <__swap>
   282d2:	bf00      	nop
   282d4:	20027730 	.word	0x20027730
   282d8:	20027764 	.word	0x20027764
   282dc:	00034974 	.word	0x00034974
   282e0:	0003491e 	.word	0x0003491e
   282e4:	0003452c 	.word	0x0003452c
   282e8:	0003498b 	.word	0x0003498b

000282ec <z_thread_priority_set>:
{
   282ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   282ee:	4604      	mov	r4, r0
   282f0:	460d      	mov	r5, r1
	__asm__ volatile(
   282f2:	f04f 0320 	mov.w	r3, #32
   282f6:	f3ef 8611 	mrs	r6, BASEPRI
   282fa:	f383 8811 	msr	BASEPRI, r3
   282fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   28302:	4839      	ldr	r0, [pc, #228]	; (283e8 <z_thread_priority_set+0xfc>)
   28304:	f000 fbf8 	bl	28af8 <z_spin_lock_valid>
   28308:	b960      	cbnz	r0, 28324 <z_thread_priority_set+0x38>
   2830a:	4938      	ldr	r1, [pc, #224]	; (283ec <z_thread_priority_set+0x100>)
   2830c:	234e      	movs	r3, #78	; 0x4e
   2830e:	4a38      	ldr	r2, [pc, #224]	; (283f0 <z_thread_priority_set+0x104>)
   28310:	4838      	ldr	r0, [pc, #224]	; (283f4 <z_thread_priority_set+0x108>)
   28312:	f006 f98e 	bl	2e632 <printk>
   28316:	4838      	ldr	r0, [pc, #224]	; (283f8 <z_thread_priority_set+0x10c>)
   28318:	f006 f98b 	bl	2e632 <printk>
   2831c:	214e      	movs	r1, #78	; 0x4e
   2831e:	4834      	ldr	r0, [pc, #208]	; (283f0 <z_thread_priority_set+0x104>)
   28320:	f006 f994 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   28324:	4830      	ldr	r0, [pc, #192]	; (283e8 <z_thread_priority_set+0xfc>)
   28326:	f000 fc05 	bl	28b34 <z_spin_lock_set_owner>
		need_sched = z_is_thread_ready(thread);
   2832a:	4620      	mov	r0, r4
   2832c:	f008 faa7 	bl	3087e <z_is_thread_ready>
   28330:	b26d      	sxtb	r5, r5
		if (need_sched) {
   28332:	4607      	mov	r7, r0
   28334:	2800      	cmp	r0, #0
   28336:	d054      	beq.n	283e2 <z_thread_priority_set+0xf6>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   28338:	4621      	mov	r1, r4
   2833a:	4830      	ldr	r0, [pc, #192]	; (283fc <z_thread_priority_set+0x110>)
   2833c:	f7ff fbba 	bl	27ab4 <z_priq_dumb_remove>
	return thread == _idle_thread;
   28340:	4b2f      	ldr	r3, [pc, #188]	; (28400 <z_thread_priority_set+0x114>)
			thread->base.prio = prio;
   28342:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!is_idle(thread));
   28344:	681b      	ldr	r3, [r3, #0]
   28346:	429c      	cmp	r4, r3
   28348:	d10b      	bne.n	28362 <z_thread_priority_set+0x76>
   2834a:	492e      	ldr	r1, [pc, #184]	; (28404 <z_thread_priority_set+0x118>)
   2834c:	4829      	ldr	r0, [pc, #164]	; (283f4 <z_thread_priority_set+0x108>)
   2834e:	f240 2376 	movw	r3, #630	; 0x276
   28352:	4a2d      	ldr	r2, [pc, #180]	; (28408 <z_thread_priority_set+0x11c>)
   28354:	f006 f96d 	bl	2e632 <printk>
   28358:	f240 2176 	movw	r1, #630	; 0x276
   2835c:	482a      	ldr	r0, [pc, #168]	; (28408 <z_thread_priority_set+0x11c>)
   2835e:	f006 f975 	bl	2e64c <assert_post_action>
	return list->head == list;
   28362:	4a2a      	ldr	r2, [pc, #168]	; (2840c <z_thread_priority_set+0x120>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28364:	f102 0128 	add.w	r1, r2, #40	; 0x28
   28368:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   2836c:	428b      	cmp	r3, r1
   2836e:	d00b      	beq.n	28388 <z_thread_priority_set+0x9c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   28370:	b153      	cbz	r3, 28388 <z_thread_priority_set+0x9c>
	if (t1->base.prio < t2->base.prio) {
   28372:	f994 500e 	ldrsb.w	r5, [r4, #14]
   28376:	f993 c00e 	ldrsb.w	ip, [r3, #14]
   2837a:	45ac      	cmp	ip, r5
   2837c:	dc0a      	bgt.n	28394 <z_thread_priority_set+0xa8>
	return (node == list->tail) ? NULL : node->next;
   2837e:	4283      	cmp	r3, r0
   28380:	d002      	beq.n	28388 <z_thread_priority_set+0x9c>
   28382:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   28384:	2b00      	cmp	r3, #0
   28386:	d1f6      	bne.n	28376 <z_thread_priority_set+0x8a>
	node->prev = list->tail;
   28388:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   2838c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2838e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   28390:	62d4      	str	r4, [r2, #44]	; 0x2c
   28392:	e005      	b.n	283a0 <z_thread_priority_set+0xb4>
	node->prev = successor->prev;
   28394:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   28396:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2839a:	685a      	ldr	r2, [r3, #4]
   2839c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2839e:	605c      	str	r4, [r3, #4]
			update_cache(1);
   283a0:	2001      	movs	r0, #1
   283a2:	f7ff fc0b 	bl	27bbc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   283a6:	4810      	ldr	r0, [pc, #64]	; (283e8 <z_thread_priority_set+0xfc>)
   283a8:	f000 fbb4 	bl	28b14 <z_spin_unlock_valid>
   283ac:	b960      	cbnz	r0, 283c8 <z_thread_priority_set+0xdc>
   283ae:	4918      	ldr	r1, [pc, #96]	; (28410 <z_thread_priority_set+0x124>)
   283b0:	2361      	movs	r3, #97	; 0x61
   283b2:	4a0f      	ldr	r2, [pc, #60]	; (283f0 <z_thread_priority_set+0x104>)
   283b4:	480f      	ldr	r0, [pc, #60]	; (283f4 <z_thread_priority_set+0x108>)
   283b6:	f006 f93c 	bl	2e632 <printk>
   283ba:	4816      	ldr	r0, [pc, #88]	; (28414 <z_thread_priority_set+0x128>)
   283bc:	f006 f939 	bl	2e632 <printk>
   283c0:	2161      	movs	r1, #97	; 0x61
   283c2:	480b      	ldr	r0, [pc, #44]	; (283f0 <z_thread_priority_set+0x104>)
   283c4:	f006 f942 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   283c8:	f386 8811 	msr	BASEPRI, r6
   283cc:	f3bf 8f6f 	isb	sy
	if (need_sched && _current->base.sched_locked == 0) {
   283d0:	b14f      	cbz	r7, 283e6 <z_thread_priority_set+0xfa>
   283d2:	4b0e      	ldr	r3, [pc, #56]	; (2840c <z_thread_priority_set+0x120>)
   283d4:	689b      	ldr	r3, [r3, #8]
   283d6:	7bdb      	ldrb	r3, [r3, #15]
   283d8:	b92b      	cbnz	r3, 283e6 <z_thread_priority_set+0xfa>
}
   283da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule_unlocked();
   283de:	f008 ba6f 	b.w	308c0 <z_reschedule_unlocked>
			thread->base.prio = prio;
   283e2:	73a5      	strb	r5, [r4, #14]
   283e4:	e7df      	b.n	283a6 <z_thread_priority_set+0xba>
}
   283e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   283e8:	20027768 	.word	0x20027768
   283ec:	0003494a 	.word	0x0003494a
   283f0:	0003491e 	.word	0x0003491e
   283f4:	0003452c 	.word	0x0003452c
   283f8:	0003495f 	.word	0x0003495f
   283fc:	20027758 	.word	0x20027758
   28400:	00033c08 	.word	0x00033c08
   28404:	00035ec1 	.word	0x00035ec1
   28408:	00035e58 	.word	0x00035e58
   2840c:	20027730 	.word	0x20027730
   28410:	00034974 	.word	0x00034974
   28414:	0003498b 	.word	0x0003498b

00028418 <z_unpend_first_thread>:
{
   28418:	b538      	push	{r3, r4, r5, lr}
   2841a:	4604      	mov	r4, r0
	__asm__ volatile(
   2841c:	f04f 0320 	mov.w	r3, #32
   28420:	f3ef 8511 	mrs	r5, BASEPRI
   28424:	f383 8811 	msr	BASEPRI, r3
   28428:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2842c:	4839      	ldr	r0, [pc, #228]	; (28514 <z_unpend_first_thread+0xfc>)
   2842e:	f000 fb63 	bl	28af8 <z_spin_lock_valid>
   28432:	b960      	cbnz	r0, 2844e <z_unpend_first_thread+0x36>
   28434:	4938      	ldr	r1, [pc, #224]	; (28518 <z_unpend_first_thread+0x100>)
   28436:	234e      	movs	r3, #78	; 0x4e
   28438:	4a38      	ldr	r2, [pc, #224]	; (2851c <z_unpend_first_thread+0x104>)
   2843a:	4839      	ldr	r0, [pc, #228]	; (28520 <z_unpend_first_thread+0x108>)
   2843c:	f006 f8f9 	bl	2e632 <printk>
   28440:	4838      	ldr	r0, [pc, #224]	; (28524 <z_unpend_first_thread+0x10c>)
   28442:	f006 f8f6 	bl	2e632 <printk>
   28446:	214e      	movs	r1, #78	; 0x4e
   28448:	4834      	ldr	r0, [pc, #208]	; (2851c <z_unpend_first_thread+0x104>)
   2844a:	f006 f8ff 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   2844e:	4831      	ldr	r0, [pc, #196]	; (28514 <z_unpend_first_thread+0xfc>)
   28450:	f000 fb70 	bl	28b34 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   28454:	4620      	mov	r0, r4
   28456:	f008 fa3d 	bl	308d4 <z_priq_dumb_best>
   2845a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2845c:	482d      	ldr	r0, [pc, #180]	; (28514 <z_unpend_first_thread+0xfc>)
   2845e:	f000 fb59 	bl	28b14 <z_spin_unlock_valid>
   28462:	b960      	cbnz	r0, 2847e <z_unpend_first_thread+0x66>
   28464:	4930      	ldr	r1, [pc, #192]	; (28528 <z_unpend_first_thread+0x110>)
   28466:	2361      	movs	r3, #97	; 0x61
   28468:	4a2c      	ldr	r2, [pc, #176]	; (2851c <z_unpend_first_thread+0x104>)
   2846a:	482d      	ldr	r0, [pc, #180]	; (28520 <z_unpend_first_thread+0x108>)
   2846c:	f006 f8e1 	bl	2e632 <printk>
   28470:	482e      	ldr	r0, [pc, #184]	; (2852c <z_unpend_first_thread+0x114>)
   28472:	f006 f8de 	bl	2e632 <printk>
   28476:	2161      	movs	r1, #97	; 0x61
   28478:	4828      	ldr	r0, [pc, #160]	; (2851c <z_unpend_first_thread+0x104>)
   2847a:	f006 f8e7 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   2847e:	f385 8811 	msr	BASEPRI, r5
   28482:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   28486:	2c00      	cmp	r4, #0
   28488:	d041      	beq.n	2850e <z_unpend_first_thread+0xf6>
	__asm__ volatile(
   2848a:	f04f 0320 	mov.w	r3, #32
   2848e:	f3ef 8511 	mrs	r5, BASEPRI
   28492:	f383 8811 	msr	BASEPRI, r3
   28496:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2849a:	481e      	ldr	r0, [pc, #120]	; (28514 <z_unpend_first_thread+0xfc>)
   2849c:	f000 fb2c 	bl	28af8 <z_spin_lock_valid>
   284a0:	b960      	cbnz	r0, 284bc <z_unpend_first_thread+0xa4>
   284a2:	491d      	ldr	r1, [pc, #116]	; (28518 <z_unpend_first_thread+0x100>)
   284a4:	234e      	movs	r3, #78	; 0x4e
   284a6:	4a1d      	ldr	r2, [pc, #116]	; (2851c <z_unpend_first_thread+0x104>)
   284a8:	481d      	ldr	r0, [pc, #116]	; (28520 <z_unpend_first_thread+0x108>)
   284aa:	f006 f8c2 	bl	2e632 <printk>
   284ae:	481d      	ldr	r0, [pc, #116]	; (28524 <z_unpend_first_thread+0x10c>)
   284b0:	f006 f8bf 	bl	2e632 <printk>
   284b4:	214e      	movs	r1, #78	; 0x4e
   284b6:	4819      	ldr	r0, [pc, #100]	; (2851c <z_unpend_first_thread+0x104>)
   284b8:	f006 f8c8 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   284bc:	4815      	ldr	r0, [pc, #84]	; (28514 <z_unpend_first_thread+0xfc>)
   284be:	f000 fb39 	bl	28b34 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   284c2:	f104 0008 	add.w	r0, r4, #8
   284c6:	f7ff f975 	bl	277b4 <pended_on.isra.15>
   284ca:	4621      	mov	r1, r4
   284cc:	f7ff faf2 	bl	27ab4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   284d0:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   284d2:	4810      	ldr	r0, [pc, #64]	; (28514 <z_unpend_first_thread+0xfc>)
   284d4:	f023 0302 	bic.w	r3, r3, #2
   284d8:	7363      	strb	r3, [r4, #13]
   284da:	f000 fb1b 	bl	28b14 <z_spin_unlock_valid>
   284de:	b960      	cbnz	r0, 284fa <z_unpend_first_thread+0xe2>
   284e0:	4911      	ldr	r1, [pc, #68]	; (28528 <z_unpend_first_thread+0x110>)
   284e2:	2361      	movs	r3, #97	; 0x61
   284e4:	4a0d      	ldr	r2, [pc, #52]	; (2851c <z_unpend_first_thread+0x104>)
   284e6:	480e      	ldr	r0, [pc, #56]	; (28520 <z_unpend_first_thread+0x108>)
   284e8:	f006 f8a3 	bl	2e632 <printk>
   284ec:	480f      	ldr	r0, [pc, #60]	; (2852c <z_unpend_first_thread+0x114>)
   284ee:	f006 f8a0 	bl	2e632 <printk>
   284f2:	2161      	movs	r1, #97	; 0x61
   284f4:	4809      	ldr	r0, [pc, #36]	; (2851c <z_unpend_first_thread+0x104>)
   284f6:	f006 f8a9 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   284fa:	f385 8811 	msr	BASEPRI, r5
   284fe:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   28502:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   28504:	f104 0018 	add.w	r0, r4, #24
   28508:	60a3      	str	r3, [r4, #8]
   2850a:	f000 fe19 	bl	29140 <z_abort_timeout>
}
   2850e:	4620      	mov	r0, r4
   28510:	bd38      	pop	{r3, r4, r5, pc}
   28512:	bf00      	nop
   28514:	20027768 	.word	0x20027768
   28518:	0003494a 	.word	0x0003494a
   2851c:	0003491e 	.word	0x0003491e
   28520:	0003452c 	.word	0x0003452c
   28524:	0003495f 	.word	0x0003495f
   28528:	00034974 	.word	0x00034974
   2852c:	0003498b 	.word	0x0003498b

00028530 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   28530:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   28532:	4b04      	ldr	r3, [pc, #16]	; (28544 <z_sched_init+0x14>)
   28534:	4608      	mov	r0, r1
   28536:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   2853a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   2853e:	f7ff b951 	b.w	277e4 <k_sched_time_slice_set>
   28542:	bf00      	nop
   28544:	20027730 	.word	0x20027730

00028548 <z_impl_k_yield>:
}
#endif
#endif

void z_impl_k_yield(void)
{
   28548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2854a:	f3ef 8305 	mrs	r3, IPSR
   2854e:	2b0d      	cmp	r3, #13
   28550:	d804      	bhi.n	2855c <z_impl_k_yield+0x14>
   28552:	b193      	cbz	r3, 2857a <z_impl_k_yield+0x32>
   28554:	4b44      	ldr	r3, [pc, #272]	; (28668 <z_impl_k_yield+0x120>)
   28556:	685b      	ldr	r3, [r3, #4]
   28558:	051b      	lsls	r3, r3, #20
   2855a:	d40e      	bmi.n	2857a <z_impl_k_yield+0x32>
	__ASSERT(!z_is_in_isr(), "");
   2855c:	4943      	ldr	r1, [pc, #268]	; (2866c <z_impl_k_yield+0x124>)
   2855e:	f240 337e 	movw	r3, #894	; 0x37e
   28562:	4a43      	ldr	r2, [pc, #268]	; (28670 <z_impl_k_yield+0x128>)
   28564:	4843      	ldr	r0, [pc, #268]	; (28674 <z_impl_k_yield+0x12c>)
   28566:	f006 f864 	bl	2e632 <printk>
   2856a:	4843      	ldr	r0, [pc, #268]	; (28678 <z_impl_k_yield+0x130>)
   2856c:	f006 f861 	bl	2e632 <printk>
   28570:	f240 317e 	movw	r1, #894	; 0x37e
   28574:	483e      	ldr	r0, [pc, #248]	; (28670 <z_impl_k_yield+0x128>)
   28576:	f006 f869 	bl	2e64c <assert_post_action>

	if (!is_idle(_current)) {
   2857a:	4d40      	ldr	r5, [pc, #256]	; (2867c <z_impl_k_yield+0x134>)
	return thread == _idle_thread;
   2857c:	4e40      	ldr	r6, [pc, #256]	; (28680 <z_impl_k_yield+0x138>)
	if (!is_idle(_current)) {
   2857e:	68a9      	ldr	r1, [r5, #8]
   28580:	6832      	ldr	r2, [r6, #0]
   28582:	4291      	cmp	r1, r2
   28584:	d064      	beq.n	28650 <z_impl_k_yield+0x108>
	__asm__ volatile(
   28586:	f04f 0320 	mov.w	r3, #32
   2858a:	f3ef 8711 	mrs	r7, BASEPRI
   2858e:	f383 8811 	msr	BASEPRI, r3
   28592:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   28596:	483b      	ldr	r0, [pc, #236]	; (28684 <z_impl_k_yield+0x13c>)
   28598:	f000 faae 	bl	28af8 <z_spin_lock_valid>
   2859c:	b960      	cbnz	r0, 285b8 <z_impl_k_yield+0x70>
   2859e:	493a      	ldr	r1, [pc, #232]	; (28688 <z_impl_k_yield+0x140>)
   285a0:	234e      	movs	r3, #78	; 0x4e
   285a2:	4a3a      	ldr	r2, [pc, #232]	; (2868c <z_impl_k_yield+0x144>)
   285a4:	4833      	ldr	r0, [pc, #204]	; (28674 <z_impl_k_yield+0x12c>)
   285a6:	f006 f844 	bl	2e632 <printk>
   285aa:	4839      	ldr	r0, [pc, #228]	; (28690 <z_impl_k_yield+0x148>)
   285ac:	f006 f841 	bl	2e632 <printk>
   285b0:	214e      	movs	r1, #78	; 0x4e
   285b2:	4836      	ldr	r0, [pc, #216]	; (2868c <z_impl_k_yield+0x144>)
   285b4:	f006 f84a 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   285b8:	4832      	ldr	r0, [pc, #200]	; (28684 <z_impl_k_yield+0x13c>)
   285ba:	f000 fabb 	bl	28b34 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   285be:	68a9      	ldr	r1, [r5, #8]
   285c0:	4834      	ldr	r0, [pc, #208]	; (28694 <z_impl_k_yield+0x14c>)
   285c2:	f7ff fa77 	bl	27ab4 <z_priq_dumb_remove>
						 _current);
				_priq_run_add(&_kernel.ready_q.runq,
   285c6:	68ac      	ldr	r4, [r5, #8]
	__ASSERT_NO_MSG(!is_idle(thread));
   285c8:	6833      	ldr	r3, [r6, #0]
   285ca:	429c      	cmp	r4, r3
   285cc:	d10b      	bne.n	285e6 <z_impl_k_yield+0x9e>
   285ce:	4932      	ldr	r1, [pc, #200]	; (28698 <z_impl_k_yield+0x150>)
   285d0:	4828      	ldr	r0, [pc, #160]	; (28674 <z_impl_k_yield+0x12c>)
   285d2:	f240 2376 	movw	r3, #630	; 0x276
   285d6:	4a26      	ldr	r2, [pc, #152]	; (28670 <z_impl_k_yield+0x128>)
   285d8:	f006 f82b 	bl	2e632 <printk>
   285dc:	f240 2176 	movw	r1, #630	; 0x276
   285e0:	4823      	ldr	r0, [pc, #140]	; (28670 <z_impl_k_yield+0x128>)
   285e2:	f006 f833 	bl	2e64c <assert_post_action>
   285e6:	e9d5 310a 	ldrd	r3, r1, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   285ea:	4a2a      	ldr	r2, [pc, #168]	; (28694 <z_impl_k_yield+0x14c>)
   285ec:	4293      	cmp	r3, r2
   285ee:	d00b      	beq.n	28608 <z_impl_k_yield+0xc0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   285f0:	b153      	cbz	r3, 28608 <z_impl_k_yield+0xc0>
	if (t1->base.prio < t2->base.prio) {
   285f2:	f994 000e 	ldrsb.w	r0, [r4, #14]
   285f6:	f993 600e 	ldrsb.w	r6, [r3, #14]
   285fa:	4286      	cmp	r6, r0
   285fc:	dc0a      	bgt.n	28614 <z_impl_k_yield+0xcc>
	return (node == list->tail) ? NULL : node->next;
   285fe:	4299      	cmp	r1, r3
   28600:	d002      	beq.n	28608 <z_impl_k_yield+0xc0>
   28602:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   28604:	2b00      	cmp	r3, #0
   28606:	d1f6      	bne.n	285f6 <z_impl_k_yield+0xae>
	node->prev = list->tail;
   28608:	e9c4 2100 	strd	r2, r1, [r4]
	list->tail->next = node;
   2860c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2860e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   28610:	62ec      	str	r4, [r5, #44]	; 0x2c
   28612:	e005      	b.n	28620 <z_impl_k_yield+0xd8>
	node->prev = successor->prev;
   28614:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   28616:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2861a:	685a      	ldr	r2, [r3, #4]
   2861c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2861e:	605c      	str	r4, [r3, #4]
					      _current);
			}
			update_cache(1);
   28620:	2001      	movs	r0, #1
   28622:	f7ff facb 	bl	27bbc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   28626:	4817      	ldr	r0, [pc, #92]	; (28684 <z_impl_k_yield+0x13c>)
   28628:	f000 fa74 	bl	28b14 <z_spin_unlock_valid>
   2862c:	b960      	cbnz	r0, 28648 <z_impl_k_yield+0x100>
   2862e:	491b      	ldr	r1, [pc, #108]	; (2869c <z_impl_k_yield+0x154>)
   28630:	2361      	movs	r3, #97	; 0x61
   28632:	4a16      	ldr	r2, [pc, #88]	; (2868c <z_impl_k_yield+0x144>)
   28634:	480f      	ldr	r0, [pc, #60]	; (28674 <z_impl_k_yield+0x12c>)
   28636:	f005 fffc 	bl	2e632 <printk>
   2863a:	4819      	ldr	r0, [pc, #100]	; (286a0 <z_impl_k_yield+0x158>)
   2863c:	f005 fff9 	bl	2e632 <printk>
   28640:	2161      	movs	r1, #97	; 0x61
   28642:	4812      	ldr	r0, [pc, #72]	; (2868c <z_impl_k_yield+0x144>)
   28644:	f006 f802 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   28648:	f387 8811 	msr	BASEPRI, r7
   2864c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   28650:	f04f 0320 	mov.w	r3, #32
   28654:	f3ef 8011 	mrs	r0, BASEPRI
   28658:	f383 8811 	msr	BASEPRI, r3
   2865c:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   28660:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   28664:	f7eb b98a 	b.w	1397c <__swap>
   28668:	e000ed00 	.word	0xe000ed00
   2866c:	00035dfb 	.word	0x00035dfb
   28670:	00035e58 	.word	0x00035e58
   28674:	0003452c 	.word	0x0003452c
   28678:	000346b0 	.word	0x000346b0
   2867c:	20027730 	.word	0x20027730
   28680:	00033c08 	.word	0x00033c08
   28684:	20027768 	.word	0x20027768
   28688:	0003494a 	.word	0x0003494a
   2868c:	0003491e 	.word	0x0003491e
   28690:	0003495f 	.word	0x0003495f
   28694:	20027758 	.word	0x20027758
   28698:	00035ec1 	.word	0x00035ec1
   2869c:	00034974 	.word	0x00034974
   286a0:	0003498b 	.word	0x0003498b

000286a4 <z_tick_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   286a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   286a8:	4604      	mov	r4, r0
   286aa:	f3ef 8305 	mrs	r3, IPSR
   286ae:	2b0d      	cmp	r3, #13
   286b0:	d804      	bhi.n	286bc <z_tick_sleep+0x18>
   286b2:	b193      	cbz	r3, 286da <z_tick_sleep+0x36>
   286b4:	4b3e      	ldr	r3, [pc, #248]	; (287b0 <z_tick_sleep+0x10c>)
   286b6:	685b      	ldr	r3, [r3, #4]
   286b8:	051a      	lsls	r2, r3, #20
   286ba:	d40e      	bmi.n	286da <z_tick_sleep+0x36>
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!z_is_in_isr(), "");
   286bc:	493d      	ldr	r1, [pc, #244]	; (287b4 <z_tick_sleep+0x110>)
   286be:	f44f 7366 	mov.w	r3, #920	; 0x398
   286c2:	4a3d      	ldr	r2, [pc, #244]	; (287b8 <z_tick_sleep+0x114>)
   286c4:	483d      	ldr	r0, [pc, #244]	; (287bc <z_tick_sleep+0x118>)
   286c6:	f005 ffb4 	bl	2e632 <printk>
   286ca:	483d      	ldr	r0, [pc, #244]	; (287c0 <z_tick_sleep+0x11c>)
   286cc:	f005 ffb1 	bl	2e632 <printk>
   286d0:	f44f 7166 	mov.w	r1, #920	; 0x398
   286d4:	4838      	ldr	r0, [pc, #224]	; (287b8 <z_tick_sleep+0x114>)
   286d6:	f005 ffb9 	bl	2e64c <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   286da:	b92c      	cbnz	r4, 286e8 <z_tick_sleep+0x44>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   286dc:	f7ff ff34 	bl	28548 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   286e0:	4620      	mov	r0, r4
   286e2:	b002      	add	sp, #8
   286e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   286e8:	f008 f962 	bl	309b0 <z_tick_get_32>
	struct k_spinlock local_lock = {};
   286ec:	2300      	movs	r3, #0
	ticks += _TICK_ALIGN;
   286ee:	f104 0801 	add.w	r8, r4, #1
	struct k_spinlock local_lock = {};
   286f2:	ae02      	add	r6, sp, #8
	expected_wakeup_time = ticks + z_tick_get_32();
   286f4:	eb08 0400 	add.w	r4, r8, r0
	struct k_spinlock local_lock = {};
   286f8:	f846 3d04 	str.w	r3, [r6, #-4]!
   286fc:	f04f 0320 	mov.w	r3, #32
   28700:	f3ef 8711 	mrs	r7, BASEPRI
   28704:	f383 8811 	msr	BASEPRI, r3
   28708:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2870c:	4630      	mov	r0, r6
   2870e:	f000 f9f3 	bl	28af8 <z_spin_lock_valid>
   28712:	b960      	cbnz	r0, 2872e <z_tick_sleep+0x8a>
   28714:	492b      	ldr	r1, [pc, #172]	; (287c4 <z_tick_sleep+0x120>)
   28716:	234e      	movs	r3, #78	; 0x4e
   28718:	4a2b      	ldr	r2, [pc, #172]	; (287c8 <z_tick_sleep+0x124>)
   2871a:	4828      	ldr	r0, [pc, #160]	; (287bc <z_tick_sleep+0x118>)
   2871c:	f005 ff89 	bl	2e632 <printk>
   28720:	482a      	ldr	r0, [pc, #168]	; (287cc <z_tick_sleep+0x128>)
   28722:	f005 ff86 	bl	2e632 <printk>
   28726:	214e      	movs	r1, #78	; 0x4e
   28728:	4827      	ldr	r0, [pc, #156]	; (287c8 <z_tick_sleep+0x124>)
   2872a:	f005 ff8f 	bl	2e64c <assert_post_action>
	pending_current = _current;
   2872e:	4d28      	ldr	r5, [pc, #160]	; (287d0 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   28730:	4630      	mov	r0, r6
   28732:	f000 f9ff 	bl	28b34 <z_spin_lock_set_owner>
   28736:	4b27      	ldr	r3, [pc, #156]	; (287d4 <z_tick_sleep+0x130>)
   28738:	68a8      	ldr	r0, [r5, #8]
   2873a:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   2873c:	f7ff fc9c 	bl	28078 <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   28740:	68a8      	ldr	r0, [r5, #8]
   28742:	4642      	mov	r2, r8
   28744:	3018      	adds	r0, #24
   28746:	4924      	ldr	r1, [pc, #144]	; (287d8 <z_tick_sleep+0x134>)
   28748:	f000 fc54 	bl	28ff4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2874c:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2874e:	4630      	mov	r0, r6
	thread->base.thread_state |= _THREAD_SUSPENDED;
   28750:	7b53      	ldrb	r3, [r2, #13]
   28752:	f043 0310 	orr.w	r3, r3, #16
   28756:	7353      	strb	r3, [r2, #13]
   28758:	f000 f9dc 	bl	28b14 <z_spin_unlock_valid>
   2875c:	b960      	cbnz	r0, 28778 <z_tick_sleep+0xd4>
   2875e:	491f      	ldr	r1, [pc, #124]	; (287dc <z_tick_sleep+0x138>)
   28760:	2378      	movs	r3, #120	; 0x78
   28762:	4a19      	ldr	r2, [pc, #100]	; (287c8 <z_tick_sleep+0x124>)
   28764:	4815      	ldr	r0, [pc, #84]	; (287bc <z_tick_sleep+0x118>)
   28766:	f005 ff64 	bl	2e632 <printk>
   2876a:	481d      	ldr	r0, [pc, #116]	; (287e0 <z_tick_sleep+0x13c>)
   2876c:	f005 ff61 	bl	2e632 <printk>
   28770:	2178      	movs	r1, #120	; 0x78
   28772:	4815      	ldr	r0, [pc, #84]	; (287c8 <z_tick_sleep+0x124>)
   28774:	f005 ff6a 	bl	2e64c <assert_post_action>
   28778:	4638      	mov	r0, r7
   2877a:	f7eb f8ff 	bl	1397c <__swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   2877e:	68ab      	ldr	r3, [r5, #8]
   28780:	7b5b      	ldrb	r3, [r3, #13]
   28782:	06db      	lsls	r3, r3, #27
   28784:	d50e      	bpl.n	287a4 <z_tick_sleep+0x100>
   28786:	4917      	ldr	r1, [pc, #92]	; (287e4 <z_tick_sleep+0x140>)
   28788:	f240 33b5 	movw	r3, #949	; 0x3b5
   2878c:	4a0a      	ldr	r2, [pc, #40]	; (287b8 <z_tick_sleep+0x114>)
   2878e:	480b      	ldr	r0, [pc, #44]	; (287bc <z_tick_sleep+0x118>)
   28790:	f005 ff4f 	bl	2e632 <printk>
   28794:	480a      	ldr	r0, [pc, #40]	; (287c0 <z_tick_sleep+0x11c>)
   28796:	f005 ff4c 	bl	2e632 <printk>
   2879a:	f240 31b5 	movw	r1, #949	; 0x3b5
   2879e:	4806      	ldr	r0, [pc, #24]	; (287b8 <z_tick_sleep+0x114>)
   287a0:	f005 ff54 	bl	2e64c <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   287a4:	f008 f904 	bl	309b0 <z_tick_get_32>
   287a8:	1a24      	subs	r4, r4, r0
   287aa:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   287ae:	e797      	b.n	286e0 <z_tick_sleep+0x3c>
   287b0:	e000ed00 	.word	0xe000ed00
   287b4:	00035dfb 	.word	0x00035dfb
   287b8:	00035e58 	.word	0x00035e58
   287bc:	0003452c 	.word	0x0003452c
   287c0:	000346b0 	.word	0x000346b0
   287c4:	0003494a 	.word	0x0003494a
   287c8:	0003491e 	.word	0x0003491e
   287cc:	0003495f 	.word	0x0003495f
   287d0:	20027730 	.word	0x20027730
   287d4:	20027764 	.word	0x20027764
   287d8:	00027e2d 	.word	0x00027e2d
   287dc:	00034974 	.word	0x00034974
   287e0:	0003498b 	.word	0x0003498b
   287e4:	00035ed2 	.word	0x00035ed2

000287e8 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   287e8:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	__ASSERT(ms != K_FOREVER, "");
   287ea:	1c43      	adds	r3, r0, #1
{
   287ec:	4604      	mov	r4, r0
	__ASSERT(ms != K_FOREVER, "");
   287ee:	d10e      	bne.n	2880e <z_impl_k_sleep+0x26>
   287f0:	4911      	ldr	r1, [pc, #68]	; (28838 <z_impl_k_sleep+0x50>)
   287f2:	f44f 7371 	mov.w	r3, #964	; 0x3c4
   287f6:	4a11      	ldr	r2, [pc, #68]	; (2883c <z_impl_k_sleep+0x54>)
   287f8:	4811      	ldr	r0, [pc, #68]	; (28840 <z_impl_k_sleep+0x58>)
   287fa:	f005 ff1a 	bl	2e632 <printk>
   287fe:	4811      	ldr	r0, [pc, #68]	; (28844 <z_impl_k_sleep+0x5c>)
   28800:	f005 ff17 	bl	2e632 <printk>
   28804:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   28808:	480c      	ldr	r0, [pc, #48]	; (2883c <z_impl_k_sleep+0x54>)
   2880a:	f005 ff1f 	bl	2e64c <assert_post_action>
   2880e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   28812:	2100      	movs	r1, #0
   28814:	480c      	ldr	r0, [pc, #48]	; (28848 <z_impl_k_sleep+0x60>)
   28816:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
   2881a:	2300      	movs	r3, #0
   2881c:	fbc5 0104 	smlal	r0, r1, r5, r4
   28820:	f7e4 f910 	bl	ca44 <__aeabi_ldivmod>

	ticks = z_ms_to_ticks(ms);
	ticks = z_tick_sleep(ticks);
   28824:	f7ff ff3e 	bl	286a4 <z_tick_sleep>
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return (u64_t)ticks * MSEC_PER_SEC /
   28828:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2882c:	fb80 2302 	smull	r2, r3, r0, r2
   28830:	09d0      	lsrs	r0, r2, #7
	return __ticks_to_ms(ticks);
}
   28832:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
   28836:	bd38      	pop	{r3, r4, r5, pc}
   28838:	00035eb6 	.word	0x00035eb6
   2883c:	00035e58 	.word	0x00035e58
   28840:	0003452c 	.word	0x0003452c
   28844:	000346b0 	.word	0x000346b0
   28848:	0003e7ff 	.word	0x0003e7ff

0002884c <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   2884c:	4b01      	ldr	r3, [pc, #4]	; (28854 <z_impl_k_current_get+0x8>)
   2884e:	6898      	ldr	r0, [r3, #8]
   28850:	4770      	bx	lr
   28852:	bf00      	nop
   28854:	20027730 	.word	0x20027730

00028858 <z_impl_k_sem_init>:

#endif /* CONFIG_OBJECT_TRACING */

void z_impl_k_sem_init(struct k_sem *sem, unsigned int initial_count,
		      unsigned int limit)
{
   28858:	b570      	push	{r4, r5, r6, lr}
   2885a:	4604      	mov	r4, r0
   2885c:	460e      	mov	r6, r1
	__ASSERT(limit != 0U, "limit cannot be zero");
   2885e:	4615      	mov	r5, r2
   28860:	b962      	cbnz	r2, 2887c <z_impl_k_sem_init+0x24>
   28862:	4912      	ldr	r1, [pc, #72]	; (288ac <z_impl_k_sem_init+0x54>)
   28864:	2346      	movs	r3, #70	; 0x46
   28866:	4a12      	ldr	r2, [pc, #72]	; (288b0 <z_impl_k_sem_init+0x58>)
   28868:	4812      	ldr	r0, [pc, #72]	; (288b4 <z_impl_k_sem_init+0x5c>)
   2886a:	f005 fee2 	bl	2e632 <printk>
   2886e:	4812      	ldr	r0, [pc, #72]	; (288b8 <z_impl_k_sem_init+0x60>)
   28870:	f005 fedf 	bl	2e632 <printk>
   28874:	2146      	movs	r1, #70	; 0x46
   28876:	480e      	ldr	r0, [pc, #56]	; (288b0 <z_impl_k_sem_init+0x58>)
   28878:	f005 fee8 	bl	2e64c <assert_post_action>
	__ASSERT(initial_count <= limit, "count cannot be greater than limit");
   2887c:	42b5      	cmp	r5, r6
   2887e:	d20c      	bcs.n	2889a <z_impl_k_sem_init+0x42>
   28880:	490e      	ldr	r1, [pc, #56]	; (288bc <z_impl_k_sem_init+0x64>)
   28882:	2347      	movs	r3, #71	; 0x47
   28884:	4a0a      	ldr	r2, [pc, #40]	; (288b0 <z_impl_k_sem_init+0x58>)
   28886:	480b      	ldr	r0, [pc, #44]	; (288b4 <z_impl_k_sem_init+0x5c>)
   28888:	f005 fed3 	bl	2e632 <printk>
   2888c:	480c      	ldr	r0, [pc, #48]	; (288c0 <z_impl_k_sem_init+0x68>)
   2888e:	f005 fed0 	bl	2e632 <printk>
   28892:	2147      	movs	r1, #71	; 0x47
   28894:	4806      	ldr	r0, [pc, #24]	; (288b0 <z_impl_k_sem_init+0x58>)
   28896:	f005 fed9 	bl	2e64c <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SEMA_INIT);
	sem->count = initial_count;
	sem->limit = limit;
	z_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   2889a:	f104 0310 	add.w	r3, r4, #16
	sem->limit = limit;
   2889e:	e9c4 6502 	strd	r6, r5, [r4, #8]
	list->tail = (sys_dnode_t *)list;
   288a2:	e9c4 4400 	strd	r4, r4, [r4]
   288a6:	e9c4 3304 	strd	r3, r3, [r4, #16]

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	z_object_init(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_INIT);
}
   288aa:	bd70      	pop	{r4, r5, r6, pc}
   288ac:	00035f30 	.word	0x00035f30
   288b0:	00035f0a 	.word	0x00035f0a
   288b4:	0003452c 	.word	0x0003452c
   288b8:	00035f3c 	.word	0x00035f3c
   288bc:	00035f53 	.word	0x00035f53
   288c0:	00035f6a 	.word	0x00035f6a

000288c4 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   288c4:	b570      	push	{r4, r5, r6, lr}
   288c6:	4604      	mov	r4, r0
   288c8:	f04f 0320 	mov.w	r3, #32
   288cc:	f3ef 8611 	mrs	r6, BASEPRI
   288d0:	f383 8811 	msr	BASEPRI, r3
   288d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   288d8:	4819      	ldr	r0, [pc, #100]	; (28940 <z_impl_k_sem_give+0x7c>)
   288da:	f000 f90d 	bl	28af8 <z_spin_lock_valid>
   288de:	b960      	cbnz	r0, 288fa <z_impl_k_sem_give+0x36>
   288e0:	4918      	ldr	r1, [pc, #96]	; (28944 <z_impl_k_sem_give+0x80>)
   288e2:	234e      	movs	r3, #78	; 0x4e
   288e4:	4a18      	ldr	r2, [pc, #96]	; (28948 <z_impl_k_sem_give+0x84>)
   288e6:	4819      	ldr	r0, [pc, #100]	; (2894c <z_impl_k_sem_give+0x88>)
   288e8:	f005 fea3 	bl	2e632 <printk>
   288ec:	4818      	ldr	r0, [pc, #96]	; (28950 <z_impl_k_sem_give+0x8c>)
   288ee:	f005 fea0 	bl	2e632 <printk>
   288f2:	214e      	movs	r1, #78	; 0x4e
   288f4:	4814      	ldr	r0, [pc, #80]	; (28948 <z_impl_k_sem_give+0x84>)
   288f6:	f005 fea9 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   288fa:	4811      	ldr	r0, [pc, #68]	; (28940 <z_impl_k_sem_give+0x7c>)
   288fc:	f000 f91a 	bl	28b34 <z_spin_lock_set_owner>
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   28900:	4620      	mov	r0, r4
   28902:	f7ff fd89 	bl	28418 <z_unpend_first_thread>
	if (thread != NULL) {
   28906:	4605      	mov	r5, r0
   28908:	b170      	cbz	r0, 28928 <z_impl_k_sem_give+0x64>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2890a:	7b43      	ldrb	r3, [r0, #13]
   2890c:	06db      	lsls	r3, r3, #27
   2890e:	d103      	bne.n	28918 <z_impl_k_sem_give+0x54>
	if (z_is_thread_ready(thread)) {
   28910:	6983      	ldr	r3, [r0, #24]
   28912:	b90b      	cbnz	r3, 28918 <z_impl_k_sem_give+0x54>
		z_add_thread_to_ready_q(thread);
   28914:	f7ff fa0a 	bl	27d2c <z_add_thread_to_ready_q>
   28918:	2300      	movs	r3, #0
   2891a:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   2891c:	4631      	mov	r1, r6
}
   2891e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   28922:	4807      	ldr	r0, [pc, #28]	; (28940 <z_impl_k_sem_give+0x7c>)
   28924:	f7ff b80e 	b.w	27944 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   28928:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2892c:	429a      	cmp	r2, r3
   2892e:	bf18      	it	ne
   28930:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   28932:	2102      	movs	r1, #2
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   28934:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   28936:	f104 0010 	add.w	r0, r4, #16
   2893a:	f008 f885 	bl	30a48 <z_handle_obj_poll_events>
   2893e:	e7ed      	b.n	2891c <z_impl_k_sem_give+0x58>
   28940:	20027774 	.word	0x20027774
   28944:	0003494a 	.word	0x0003494a
   28948:	0003491e 	.word	0x0003491e
   2894c:	0003452c 	.word	0x0003452c
   28950:	0003495f 	.word	0x0003495f

00028954 <z_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   28954:	b570      	push	{r4, r5, r6, lr}
   28956:	4605      	mov	r5, r0
   28958:	460e      	mov	r6, r1
   2895a:	f3ef 8305 	mrs	r3, IPSR
   2895e:	2b0d      	cmp	r3, #13
   28960:	d804      	bhi.n	2896c <z_impl_k_sem_take+0x18>
   28962:	b18b      	cbz	r3, 28988 <z_impl_k_sem_take+0x34>
   28964:	4b34      	ldr	r3, [pc, #208]	; (28a38 <z_impl_k_sem_take+0xe4>)
   28966:	685b      	ldr	r3, [r3, #4]
   28968:	051b      	lsls	r3, r3, #20
   2896a:	d40d      	bmi.n	28988 <z_impl_k_sem_take+0x34>
	__ASSERT(((z_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");
   2896c:	b166      	cbz	r6, 28988 <z_impl_k_sem_take+0x34>
   2896e:	4933      	ldr	r1, [pc, #204]	; (28a3c <z_impl_k_sem_take+0xe8>)
   28970:	238c      	movs	r3, #140	; 0x8c
   28972:	4a33      	ldr	r2, [pc, #204]	; (28a40 <z_impl_k_sem_take+0xec>)
   28974:	4833      	ldr	r0, [pc, #204]	; (28a44 <z_impl_k_sem_take+0xf0>)
   28976:	f005 fe5c 	bl	2e632 <printk>
   2897a:	4833      	ldr	r0, [pc, #204]	; (28a48 <z_impl_k_sem_take+0xf4>)
   2897c:	f005 fe59 	bl	2e632 <printk>
   28980:	218c      	movs	r1, #140	; 0x8c
   28982:	482f      	ldr	r0, [pc, #188]	; (28a40 <z_impl_k_sem_take+0xec>)
   28984:	f005 fe62 	bl	2e64c <assert_post_action>
   28988:	f04f 0320 	mov.w	r3, #32
   2898c:	f3ef 8411 	mrs	r4, BASEPRI
   28990:	f383 8811 	msr	BASEPRI, r3
   28994:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   28998:	482c      	ldr	r0, [pc, #176]	; (28a4c <z_impl_k_sem_take+0xf8>)
   2899a:	f000 f8ad 	bl	28af8 <z_spin_lock_valid>
   2899e:	b960      	cbnz	r0, 289ba <z_impl_k_sem_take+0x66>
   289a0:	492b      	ldr	r1, [pc, #172]	; (28a50 <z_impl_k_sem_take+0xfc>)
   289a2:	234e      	movs	r3, #78	; 0x4e
   289a4:	4a2b      	ldr	r2, [pc, #172]	; (28a54 <z_impl_k_sem_take+0x100>)
   289a6:	4827      	ldr	r0, [pc, #156]	; (28a44 <z_impl_k_sem_take+0xf0>)
   289a8:	f005 fe43 	bl	2e632 <printk>
   289ac:	482a      	ldr	r0, [pc, #168]	; (28a58 <z_impl_k_sem_take+0x104>)
   289ae:	f005 fe40 	bl	2e632 <printk>
   289b2:	214e      	movs	r1, #78	; 0x4e
   289b4:	4827      	ldr	r0, [pc, #156]	; (28a54 <z_impl_k_sem_take+0x100>)
   289b6:	f005 fe49 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   289ba:	4824      	ldr	r0, [pc, #144]	; (28a4c <z_impl_k_sem_take+0xf8>)
   289bc:	f000 f8ba 	bl	28b34 <z_spin_lock_set_owner>

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   289c0:	68ab      	ldr	r3, [r5, #8]
   289c2:	b1c3      	cbz	r3, 289f6 <z_impl_k_sem_take+0xa2>
		sem->count--;
   289c4:	3b01      	subs	r3, #1
   289c6:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   289c8:	4820      	ldr	r0, [pc, #128]	; (28a4c <z_impl_k_sem_take+0xf8>)
   289ca:	f000 f8a3 	bl	28b14 <z_spin_unlock_valid>
   289ce:	b960      	cbnz	r0, 289ea <z_impl_k_sem_take+0x96>
   289d0:	4922      	ldr	r1, [pc, #136]	; (28a5c <z_impl_k_sem_take+0x108>)
   289d2:	2361      	movs	r3, #97	; 0x61
   289d4:	4a1f      	ldr	r2, [pc, #124]	; (28a54 <z_impl_k_sem_take+0x100>)
   289d6:	481b      	ldr	r0, [pc, #108]	; (28a44 <z_impl_k_sem_take+0xf0>)
   289d8:	f005 fe2b 	bl	2e632 <printk>
   289dc:	4820      	ldr	r0, [pc, #128]	; (28a60 <z_impl_k_sem_take+0x10c>)
   289de:	f005 fe28 	bl	2e632 <printk>
   289e2:	2161      	movs	r1, #97	; 0x61
   289e4:	481b      	ldr	r0, [pc, #108]	; (28a54 <z_impl_k_sem_take+0x100>)
   289e6:	f005 fe31 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   289ea:	f384 8811 	msr	BASEPRI, r4
   289ee:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   289f2:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   289f4:	bd70      	pop	{r4, r5, r6, pc}
	if (timeout == K_NO_WAIT) {
   289f6:	b9be      	cbnz	r6, 28a28 <z_impl_k_sem_take+0xd4>
   289f8:	4814      	ldr	r0, [pc, #80]	; (28a4c <z_impl_k_sem_take+0xf8>)
   289fa:	f000 f88b 	bl	28b14 <z_spin_unlock_valid>
   289fe:	b960      	cbnz	r0, 28a1a <z_impl_k_sem_take+0xc6>
   28a00:	4916      	ldr	r1, [pc, #88]	; (28a5c <z_impl_k_sem_take+0x108>)
   28a02:	2361      	movs	r3, #97	; 0x61
   28a04:	4a13      	ldr	r2, [pc, #76]	; (28a54 <z_impl_k_sem_take+0x100>)
   28a06:	480f      	ldr	r0, [pc, #60]	; (28a44 <z_impl_k_sem_take+0xf0>)
   28a08:	f005 fe13 	bl	2e632 <printk>
   28a0c:	4814      	ldr	r0, [pc, #80]	; (28a60 <z_impl_k_sem_take+0x10c>)
   28a0e:	f005 fe10 	bl	2e632 <printk>
   28a12:	2161      	movs	r1, #97	; 0x61
   28a14:	480f      	ldr	r0, [pc, #60]	; (28a54 <z_impl_k_sem_take+0x100>)
   28a16:	f005 fe19 	bl	2e64c <assert_post_action>
   28a1a:	f384 8811 	msr	BASEPRI, r4
   28a1e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   28a22:	f06f 000f 	mvn.w	r0, #15
   28a26:	e7e5      	b.n	289f4 <z_impl_k_sem_take+0xa0>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   28a28:	4633      	mov	r3, r6
   28a2a:	462a      	mov	r2, r5
   28a2c:	4621      	mov	r1, r4
}
   28a2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   28a32:	4806      	ldr	r0, [pc, #24]	; (28a4c <z_impl_k_sem_take+0xf8>)
   28a34:	f7ff bc2c 	b.w	28290 <z_pend_curr>
   28a38:	e000ed00 	.word	0xe000ed00
   28a3c:	00035f8f 	.word	0x00035f8f
   28a40:	00035f0a 	.word	0x00035f0a
   28a44:	0003452c 	.word	0x0003452c
   28a48:	000346b0 	.word	0x000346b0
   28a4c:	20027774 	.word	0x20027774
   28a50:	0003494a 	.word	0x0003494a
   28a54:	0003491e 	.word	0x0003491e
   28a58:	0003495f 	.word	0x0003495f
   28a5c:	00034974 	.word	0x00034974
   28a60:	0003498b 	.word	0x0003498b

00028a64 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   28a64:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   28a66:	4c08      	ldr	r4, [pc, #32]	; (28a88 <k_sys_work_q_init+0x24>)
   28a68:	f04f 33ff 	mov.w	r3, #4294967295
   28a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   28a70:	4620      	mov	r0, r4
   28a72:	4906      	ldr	r1, [pc, #24]	; (28a8c <k_sys_work_q_init+0x28>)
   28a74:	f000 f9c8 	bl	28e08 <k_work_q_start>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   28a78:	f104 0014 	add.w	r0, r4, #20
   28a7c:	4904      	ldr	r1, [pc, #16]	; (28a90 <k_sys_work_q_init+0x2c>)
   28a7e:	f007 ff4e 	bl	3091e <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   28a82:	2000      	movs	r0, #0
   28a84:	bd10      	pop	{r4, pc}
   28a86:	bf00      	nop
   28a88:	20027778 	.word	0x20027778
   28a8c:	2002b6c0 	.word	0x2002b6c0
   28a90:	00035fb6 	.word	0x00035fb6

00028a94 <k_is_in_isr>:
   28a94:	f3ef 8005 	mrs	r0, IPSR
   28a98:	280d      	cmp	r0, #13
   28a9a:	d807      	bhi.n	28aac <k_is_in_isr+0x18>
   28a9c:	b138      	cbz	r0, 28aae <k_is_in_isr+0x1a>
   28a9e:	4b04      	ldr	r3, [pc, #16]	; (28ab0 <k_is_in_isr+0x1c>)
   28aa0:	6858      	ldr	r0, [r3, #4]
   28aa2:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   28aa6:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   28aaa:	4770      	bx	lr
   28aac:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_is_in_isr();
}
   28aae:	4770      	bx	lr
   28ab0:	e000ed00 	.word	0xe000ed00

00028ab4 <z_is_thread_essential>:
 *
 * Returns true if current thread is essential, false if it is not.
 */
bool z_is_thread_essential(void)
{
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
   28ab4:	4b02      	ldr	r3, [pc, #8]	; (28ac0 <z_is_thread_essential+0xc>)
   28ab6:	689b      	ldr	r3, [r3, #8]
   28ab8:	7b18      	ldrb	r0, [r3, #12]
}
   28aba:	f000 0001 	and.w	r0, r0, #1
   28abe:	4770      	bx	lr
   28ac0:	20027730 	.word	0x20027730

00028ac4 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   28ac4:	b530      	push	{r4, r5, lr}
   28ac6:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   28ac8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   28aca:	4604      	mov	r4, r0
	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   28acc:	9504      	str	r5, [sp, #16]
   28ace:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   28ad0:	9503      	str	r5, [sp, #12]
   28ad2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   28ad4:	9502      	str	r5, [sp, #8]
   28ad6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   28ad8:	9501      	str	r5, [sp, #4]
   28ada:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   28adc:	9500      	str	r5, [sp, #0]
   28ade:	f7eb f94b 	bl	13d78 <z_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   28ae2:	4b04      	ldr	r3, [pc, #16]	; (28af4 <z_setup_new_thread+0x30>)
   28ae4:	689b      	ldr	r3, [r3, #8]
   28ae6:	b913      	cbnz	r3, 28aee <z_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   28ae8:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   28aea:	b007      	add	sp, #28
   28aec:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   28aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   28af0:	e7fa      	b.n	28ae8 <z_setup_new_thread+0x24>
   28af2:	bf00      	nop
   28af4:	20027730 	.word	0x20027730

00028af8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu) {
   28af8:	6800      	ldr	r0, [r0, #0]
   28afa:	b138      	cbz	r0, 28b0c <z_spin_lock_valid+0x14>
		if ((l->thread_cpu & 3) == _current_cpu->id) {
   28afc:	4b04      	ldr	r3, [pc, #16]	; (28b10 <z_spin_lock_valid+0x18>)
   28afe:	f000 0003 	and.w	r0, r0, #3
   28b02:	7d1b      	ldrb	r3, [r3, #20]
   28b04:	1ac0      	subs	r0, r0, r3
   28b06:	bf18      	it	ne
   28b08:	2001      	movne	r0, #1
   28b0a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   28b0c:	2001      	movs	r0, #1
}
   28b0e:	4770      	bx	lr
   28b10:	20027730 	.word	0x20027730

00028b14 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   28b14:	4a06      	ldr	r2, [pc, #24]	; (28b30 <z_spin_unlock_valid+0x1c>)
   28b16:	7d11      	ldrb	r1, [r2, #20]
   28b18:	6893      	ldr	r3, [r2, #8]
   28b1a:	6802      	ldr	r2, [r0, #0]
   28b1c:	430b      	orrs	r3, r1
   28b1e:	429a      	cmp	r2, r3
   28b20:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   28b24:	bf06      	itte	eq
   28b26:	6003      	streq	r3, [r0, #0]
	return true;
   28b28:	2001      	moveq	r0, #1
		return false;
   28b2a:	4618      	movne	r0, r3
}
   28b2c:	4770      	bx	lr
   28b2e:	bf00      	nop
   28b30:	20027730 	.word	0x20027730

00028b34 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   28b34:	4a02      	ldr	r2, [pc, #8]	; (28b40 <z_spin_lock_set_owner+0xc>)
   28b36:	7d11      	ldrb	r1, [r2, #20]
   28b38:	6893      	ldr	r3, [r2, #8]
   28b3a:	430b      	orrs	r3, r1
   28b3c:	6003      	str	r3, [r0, #0]
}
   28b3e:	4770      	bx	lr
   28b40:	20027730 	.word	0x20027730

00028b44 <z_impl_k_thread_start>:
{
   28b44:	b538      	push	{r3, r4, r5, lr}
   28b46:	4604      	mov	r4, r0
	__asm__ volatile(
   28b48:	f04f 0320 	mov.w	r3, #32
   28b4c:	f3ef 8511 	mrs	r5, BASEPRI
   28b50:	f383 8811 	msr	BASEPRI, r3
   28b54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   28b58:	481e      	ldr	r0, [pc, #120]	; (28bd4 <z_impl_k_thread_start+0x90>)
   28b5a:	f7ff ffcd 	bl	28af8 <z_spin_lock_valid>
   28b5e:	b960      	cbnz	r0, 28b7a <z_impl_k_thread_start+0x36>
   28b60:	491d      	ldr	r1, [pc, #116]	; (28bd8 <z_impl_k_thread_start+0x94>)
   28b62:	234e      	movs	r3, #78	; 0x4e
   28b64:	4a1d      	ldr	r2, [pc, #116]	; (28bdc <z_impl_k_thread_start+0x98>)
   28b66:	481e      	ldr	r0, [pc, #120]	; (28be0 <z_impl_k_thread_start+0x9c>)
   28b68:	f005 fd63 	bl	2e632 <printk>
   28b6c:	481d      	ldr	r0, [pc, #116]	; (28be4 <z_impl_k_thread_start+0xa0>)
   28b6e:	f005 fd60 	bl	2e632 <printk>
   28b72:	214e      	movs	r1, #78	; 0x4e
   28b74:	4819      	ldr	r0, [pc, #100]	; (28bdc <z_impl_k_thread_start+0x98>)
   28b76:	f005 fd69 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   28b7a:	4816      	ldr	r0, [pc, #88]	; (28bd4 <z_impl_k_thread_start+0x90>)
   28b7c:	f7ff ffda 	bl	28b34 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   28b80:	7b63      	ldrb	r3, [r4, #13]
   28b82:	075a      	lsls	r2, r3, #29
   28b84:	d415      	bmi.n	28bb2 <z_impl_k_thread_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   28b86:	4813      	ldr	r0, [pc, #76]	; (28bd4 <z_impl_k_thread_start+0x90>)
   28b88:	f7ff ffc4 	bl	28b14 <z_spin_unlock_valid>
   28b8c:	b960      	cbnz	r0, 28ba8 <z_impl_k_thread_start+0x64>
   28b8e:	4916      	ldr	r1, [pc, #88]	; (28be8 <z_impl_k_thread_start+0xa4>)
   28b90:	2361      	movs	r3, #97	; 0x61
   28b92:	4a12      	ldr	r2, [pc, #72]	; (28bdc <z_impl_k_thread_start+0x98>)
   28b94:	4812      	ldr	r0, [pc, #72]	; (28be0 <z_impl_k_thread_start+0x9c>)
   28b96:	f005 fd4c 	bl	2e632 <printk>
   28b9a:	4814      	ldr	r0, [pc, #80]	; (28bec <z_impl_k_thread_start+0xa8>)
   28b9c:	f005 fd49 	bl	2e632 <printk>
   28ba0:	2161      	movs	r1, #97	; 0x61
   28ba2:	480e      	ldr	r0, [pc, #56]	; (28bdc <z_impl_k_thread_start+0x98>)
   28ba4:	f005 fd52 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   28ba8:	f385 8811 	msr	BASEPRI, r5
   28bac:	f3bf 8f6f 	isb	sy
}
   28bb0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28bb2:	f023 0304 	bic.w	r3, r3, #4
   28bb6:	7363      	strb	r3, [r4, #13]
	if (z_is_thread_ready(thread)) {
   28bb8:	4620      	mov	r0, r4
   28bba:	f007 fea7 	bl	3090c <z_is_thread_ready>
   28bbe:	b110      	cbz	r0, 28bc6 <z_impl_k_thread_start+0x82>
		z_add_thread_to_ready_q(thread);
   28bc0:	4620      	mov	r0, r4
   28bc2:	f7ff f8b3 	bl	27d2c <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   28bc6:	4629      	mov	r1, r5
}
   28bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   28bcc:	4801      	ldr	r0, [pc, #4]	; (28bd4 <z_impl_k_thread_start+0x90>)
   28bce:	f7fe beb9 	b.w	27944 <z_reschedule>
   28bd2:	bf00      	nop
   28bd4:	2002783c 	.word	0x2002783c
   28bd8:	0003494a 	.word	0x0003494a
   28bdc:	0003491e 	.word	0x0003491e
   28be0:	0003452c 	.word	0x0003452c
   28be4:	0003495f 	.word	0x0003495f
   28be8:	00034974 	.word	0x00034974
   28bec:	0003498b 	.word	0x0003498b

00028bf0 <z_impl_k_thread_create>:
{
   28bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28bf4:	b086      	sub	sp, #24
   28bf6:	4604      	mov	r4, r0
   28bf8:	460e      	mov	r6, r1
   28bfa:	4617      	mov	r7, r2
   28bfc:	4698      	mov	r8, r3
   28bfe:	9d11      	ldr	r5, [sp, #68]	; 0x44
   28c00:	f3ef 8305 	mrs	r3, IPSR
   28c04:	2b0d      	cmp	r3, #13
   28c06:	d804      	bhi.n	28c12 <z_impl_k_thread_create+0x22>
   28c08:	b193      	cbz	r3, 28c30 <z_impl_k_thread_create+0x40>
   28c0a:	4b20      	ldr	r3, [pc, #128]	; (28c8c <z_impl_k_thread_create+0x9c>)
   28c0c:	685b      	ldr	r3, [r3, #4]
   28c0e:	051a      	lsls	r2, r3, #20
   28c10:	d40e      	bmi.n	28c30 <z_impl_k_thread_create+0x40>
	__ASSERT(!z_is_in_isr(), "Threads may not be created in ISRs");
   28c12:	491f      	ldr	r1, [pc, #124]	; (28c90 <z_impl_k_thread_create+0xa0>)
   28c14:	f240 13b3 	movw	r3, #435	; 0x1b3
   28c18:	4a1e      	ldr	r2, [pc, #120]	; (28c94 <z_impl_k_thread_create+0xa4>)
   28c1a:	481f      	ldr	r0, [pc, #124]	; (28c98 <z_impl_k_thread_create+0xa8>)
   28c1c:	f005 fd09 	bl	2e632 <printk>
   28c20:	481e      	ldr	r0, [pc, #120]	; (28c9c <z_impl_k_thread_create+0xac>)
   28c22:	f005 fd06 	bl	2e632 <printk>
   28c26:	f240 11b3 	movw	r1, #435	; 0x1b3
   28c2a:	481a      	ldr	r0, [pc, #104]	; (28c94 <z_impl_k_thread_create+0xa4>)
   28c2c:	f005 fd0e 	bl	2e64c <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   28c30:	2300      	movs	r3, #0
   28c32:	9305      	str	r3, [sp, #20]
   28c34:	9b10      	ldr	r3, [sp, #64]	; 0x40
   28c36:	463a      	mov	r2, r7
   28c38:	9304      	str	r3, [sp, #16]
   28c3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   28c3c:	4631      	mov	r1, r6
   28c3e:	9303      	str	r3, [sp, #12]
   28c40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   28c42:	4620      	mov	r0, r4
   28c44:	9302      	str	r3, [sp, #8]
   28c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28c48:	9301      	str	r3, [sp, #4]
   28c4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   28c4c:	9300      	str	r3, [sp, #0]
   28c4e:	4643      	mov	r3, r8
   28c50:	f7ff ff38 	bl	28ac4 <z_setup_new_thread>
	if (delay != K_FOREVER) {
   28c54:	1c6b      	adds	r3, r5, #1
   28c56:	d003      	beq.n	28c60 <z_impl_k_thread_create+0x70>
	if (delay == 0) {
   28c58:	b935      	cbnz	r5, 28c68 <z_impl_k_thread_create+0x78>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
   28c5a:	4620      	mov	r0, r4
   28c5c:	f7ff ff72 	bl	28b44 <z_impl_k_thread_start>
}
   28c60:	4620      	mov	r0, r4
   28c62:	b006      	add	sp, #24
   28c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
   28c68:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   28c6c:	2100      	movs	r1, #0
   28c6e:	480c      	ldr	r0, [pc, #48]	; (28ca0 <z_impl_k_thread_create+0xb0>)
   28c70:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
   28c74:	2300      	movs	r3, #0
   28c76:	fbc6 0105 	smlal	r0, r1, r6, r5
   28c7a:	f7e3 fee3 	bl	ca44 <__aeabi_ldivmod>
   28c7e:	4909      	ldr	r1, [pc, #36]	; (28ca4 <z_impl_k_thread_create+0xb4>)
   28c80:	1c42      	adds	r2, r0, #1
   28c82:	f104 0018 	add.w	r0, r4, #24
   28c86:	f000 f9b5 	bl	28ff4 <z_add_timeout>
   28c8a:	e7e9      	b.n	28c60 <z_impl_k_thread_create+0x70>
   28c8c:	e000ed00 	.word	0xe000ed00
   28c90:	00035dfb 	.word	0x00035dfb
   28c94:	00035fbf 	.word	0x00035fbf
   28c98:	0003452c 	.word	0x0003452c
   28c9c:	00035fe8 	.word	0x00035fe8
   28ca0:	0003e7ff 	.word	0x0003e7ff
   28ca4:	00027e2d 	.word	0x00027e2d

00028ca8 <z_init_static_threads>:
{
   28ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   28cac:	4e28      	ldr	r6, [pc, #160]	; (28d50 <z_init_static_threads+0xa8>)
   28cae:	4d29      	ldr	r5, [pc, #164]	; (28d54 <z_init_static_threads+0xac>)
   28cb0:	46b0      	mov	r8, r6
{
   28cb2:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   28cb4:	42b5      	cmp	r5, r6
   28cb6:	f105 0430 	add.w	r4, r5, #48	; 0x30
   28cba:	d30f      	bcc.n	28cdc <z_init_static_threads+0x34>
	k_sched_lock();
   28cbc:	f7fe fe7c 	bl	279b8 <k_sched_lock>
   28cc0:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   28cc4:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   28cc6:	4c23      	ldr	r4, [pc, #140]	; (28d54 <z_init_static_threads+0xac>)
   28cc8:	4e23      	ldr	r6, [pc, #140]	; (28d58 <z_init_static_threads+0xb0>)
   28cca:	f8df a090 	ldr.w	sl, [pc, #144]	; 28d5c <z_init_static_threads+0xb4>
   28cce:	4544      	cmp	r4, r8
   28cd0:	d321      	bcc.n	28d16 <z_init_static_threads+0x6e>
}
   28cd2:	b007      	add	sp, #28
   28cd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   28cd8:	f7fe bfa6 	b.w	27c28 <k_sched_unlock>
		z_setup_new_thread(
   28cdc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   28ce0:	9305      	str	r3, [sp, #20]
   28ce2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   28ce6:	9304      	str	r3, [sp, #16]
   28ce8:	f854 3c14 	ldr.w	r3, [r4, #-20]
   28cec:	9303      	str	r3, [sp, #12]
   28cee:	f854 3c18 	ldr.w	r3, [r4, #-24]
   28cf2:	9302      	str	r3, [sp, #8]
   28cf4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   28cf8:	9301      	str	r3, [sp, #4]
   28cfa:	f854 3c20 	ldr.w	r3, [r4, #-32]
   28cfe:	9300      	str	r3, [sp, #0]
   28d00:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   28d04:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   28d08:	f7ff fedc 	bl	28ac4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   28d0c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   28d10:	64dd      	str	r5, [r3, #76]	; 0x4c
   28d12:	4625      	mov	r5, r4
   28d14:	e7ce      	b.n	28cb4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   28d16:	6a61      	ldr	r1, [r4, #36]	; 0x24
   28d18:	1c4b      	adds	r3, r1, #1
   28d1a:	d004      	beq.n	28d26 <z_init_static_threads+0x7e>
			schedule_new_thread(thread_data->init_thread,
   28d1c:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   28d1e:	b921      	cbnz	r1, 28d2a <z_init_static_threads+0x82>
   28d20:	4628      	mov	r0, r5
   28d22:	f7ff ff0f 	bl	28b44 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   28d26:	3430      	adds	r4, #48	; 0x30
   28d28:	e7d1      	b.n	28cce <z_init_static_threads+0x26>
   28d2a:	46b3      	mov	fp, r6
   28d2c:	46bc      	mov	ip, r7
   28d2e:	fbc9 bc01 	smlal	fp, ip, r9, r1
   28d32:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
   28d36:	2300      	movs	r3, #0
   28d38:	4658      	mov	r0, fp
   28d3a:	4661      	mov	r1, ip
   28d3c:	f7e3 fe82 	bl	ca44 <__aeabi_ldivmod>
   28d40:	4651      	mov	r1, sl
   28d42:	1c42      	adds	r2, r0, #1
   28d44:	f105 0018 	add.w	r0, r5, #24
   28d48:	f000 f954 	bl	28ff4 <z_add_timeout>
   28d4c:	e7eb      	b.n	28d26 <z_init_static_threads+0x7e>
   28d4e:	bf00      	nop
   28d50:	2002def8 	.word	0x2002def8
   28d54:	2002def8 	.word	0x2002def8
   28d58:	0003e7ff 	.word	0x0003e7ff
   28d5c:	00027e2d 	.word	0x00027e2d

00028d60 <work_cancel>:
	work->work_q = NULL;
}

static int work_cancel(struct k_delayed_work *work)
{
	__ASSERT(work->work_q != NULL, "");
   28d60:	69c3      	ldr	r3, [r0, #28]
{
   28d62:	b570      	push	{r4, r5, r6, lr}
   28d64:	4604      	mov	r4, r0
	__ASSERT(work->work_q != NULL, "");
   28d66:	b963      	cbnz	r3, 28d82 <work_cancel+0x22>
   28d68:	4923      	ldr	r1, [pc, #140]	; (28df8 <work_cancel+0x98>)
   28d6a:	2339      	movs	r3, #57	; 0x39
   28d6c:	4a23      	ldr	r2, [pc, #140]	; (28dfc <work_cancel+0x9c>)
   28d6e:	4824      	ldr	r0, [pc, #144]	; (28e00 <work_cancel+0xa0>)
   28d70:	f005 fc5f 	bl	2e632 <printk>
   28d74:	4823      	ldr	r0, [pc, #140]	; (28e04 <work_cancel+0xa4>)
   28d76:	f005 fc5c 	bl	2e632 <printk>
   28d7a:	2139      	movs	r1, #57	; 0x39
   28d7c:	481f      	ldr	r0, [pc, #124]	; (28dfc <work_cancel+0x9c>)
   28d7e:	f005 fc65 	bl	2e64c <assert_post_action>
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   28d82:	f104 0508 	add.w	r5, r4, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28d86:	e8d5 3faf 	lda	r3, [r5]

	if (k_work_pending(&work->work)) {
   28d8a:	07db      	lsls	r3, r3, #31
   28d8c:	d52f      	bpl.n	28dee <work_cancel+0x8e>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   28d8e:	2100      	movs	r1, #0
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   28d90:	69e2      	ldr	r2, [r4, #28]
   28d92:	6813      	ldr	r3, [r2, #0]
   28d94:	b913      	cbnz	r3, 28d9c <work_cancel+0x3c>
			return -EINVAL;
   28d96:	f06f 0015 	mvn.w	r0, #21
	work->work_q = NULL;

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);

	return 0;
}
   28d9a:	bd70      	pop	{r4, r5, r6, pc}
   28d9c:	429c      	cmp	r4, r3
   28d9e:	d121      	bne.n	28de4 <work_cancel+0x84>
   28da0:	6823      	ldr	r3, [r4, #0]
   28da2:	6856      	ldr	r6, [r2, #4]
   28da4:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   28da8:	b991      	cbnz	r1, 28dd0 <work_cancel+0x70>
   28daa:	42b4      	cmp	r4, r6
	list->head = node;
   28dac:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   28dae:	d100      	bne.n	28db2 <work_cancel+0x52>
	list->tail = node;
   28db0:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28db2:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   28db4:	f003 0303 	and.w	r3, r3, #3
   28db8:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   28dba:	2000      	movs	r0, #0
   28dbc:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28dbe:	e8d5 3fef 	ldaex	r3, [r5]
   28dc2:	f023 0301 	bic.w	r3, r3, #1
   28dc6:	e8c5 3fe2 	stlex	r2, r3, [r5]
   28dca:	2a00      	cmp	r2, #0
   28dcc:	d0e5      	beq.n	28d9a <work_cancel+0x3a>
   28dce:	e7f6      	b.n	28dbe <work_cancel+0x5e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28dd0:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   28dd2:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   28dd4:	f003 0303 	and.w	r3, r3, #3
   28dd8:	ea43 0300 	orr.w	r3, r3, r0
   28ddc:	600b      	str	r3, [r1, #0]
	list->tail = node;
   28dde:	bf08      	it	eq
   28de0:	6051      	streq	r1, [r2, #4]
   28de2:	e7e6      	b.n	28db2 <work_cancel+0x52>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   28de4:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   28de6:	4619      	mov	r1, r3
   28de8:	f020 0303 	bic.w	r3, r0, #3
   28dec:	e7d2      	b.n	28d94 <work_cancel+0x34>
		(void)z_abort_timeout(&work->timeout);
   28dee:	f104 000c 	add.w	r0, r4, #12
   28df2:	f000 f9a5 	bl	29140 <z_abort_timeout>
   28df6:	e7e0      	b.n	28dba <work_cancel+0x5a>
   28df8:	00036040 	.word	0x00036040
   28dfc:	00036017 	.word	0x00036017
   28e00:	0003452c 	.word	0x0003452c
   28e04:	000346b0 	.word	0x000346b0

00028e08 <k_work_q_start>:
{
   28e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28e0c:	4605      	mov	r5, r0
   28e0e:	b086      	sub	sp, #24
   28e10:	4698      	mov	r8, r3
   28e12:	460e      	mov	r6, r1
   28e14:	4617      	mov	r7, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
   28e16:	f007 fd24 	bl	30862 <z_impl_k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   28e1a:	2000      	movs	r0, #0
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   28e1c:	f105 0414 	add.w	r4, r5, #20
   28e20:	e9cd 0004 	strd	r0, r0, [sp, #16]
   28e24:	e9cd 0802 	strd	r0, r8, [sp, #8]
   28e28:	e9cd 5000 	strd	r5, r0, [sp]
   28e2c:	4631      	mov	r1, r6
   28e2e:	4b06      	ldr	r3, [pc, #24]	; (28e48 <k_work_q_start+0x40>)
   28e30:	463a      	mov	r2, r7
   28e32:	4620      	mov	r0, r4
   28e34:	f7ff fedc 	bl	28bf0 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   28e38:	4620      	mov	r0, r4
   28e3a:	4904      	ldr	r1, [pc, #16]	; (28e4c <k_work_q_start+0x44>)
}
   28e3c:	b006      	add	sp, #24
   28e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   28e42:	f007 bd6c 	b.w	3091e <z_impl_k_thread_name_set>
   28e46:	bf00      	nop
   28e48:	0002e325 	.word	0x0002e325
   28e4c:	0003600d 	.word	0x0003600d

00028e50 <k_delayed_work_submit_to_queue>:

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   28e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28e54:	4606      	mov	r6, r0
   28e56:	460d      	mov	r5, r1
   28e58:	4690      	mov	r8, r2
	__asm__ volatile(
   28e5a:	f04f 0320 	mov.w	r3, #32
   28e5e:	f3ef 8711 	mrs	r7, BASEPRI
   28e62:	f383 8811 	msr	BASEPRI, r3
   28e66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   28e6a:	4835      	ldr	r0, [pc, #212]	; (28f40 <k_delayed_work_submit_to_queue+0xf0>)
   28e6c:	f7ff fe44 	bl	28af8 <z_spin_lock_valid>
   28e70:	b960      	cbnz	r0, 28e8c <k_delayed_work_submit_to_queue+0x3c>
   28e72:	4934      	ldr	r1, [pc, #208]	; (28f44 <k_delayed_work_submit_to_queue+0xf4>)
   28e74:	234e      	movs	r3, #78	; 0x4e
   28e76:	4a34      	ldr	r2, [pc, #208]	; (28f48 <k_delayed_work_submit_to_queue+0xf8>)
   28e78:	4834      	ldr	r0, [pc, #208]	; (28f4c <k_delayed_work_submit_to_queue+0xfc>)
   28e7a:	f005 fbda 	bl	2e632 <printk>
   28e7e:	4834      	ldr	r0, [pc, #208]	; (28f50 <k_delayed_work_submit_to_queue+0x100>)
   28e80:	f005 fbd7 	bl	2e632 <printk>
   28e84:	214e      	movs	r1, #78	; 0x4e
   28e86:	4830      	ldr	r0, [pc, #192]	; (28f48 <k_delayed_work_submit_to_queue+0xf8>)
   28e88:	f005 fbe0 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   28e8c:	482c      	ldr	r0, [pc, #176]	; (28f40 <k_delayed_work_submit_to_queue+0xf0>)
   28e8e:	f7ff fe51 	bl	28b34 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   28e92:	69ec      	ldr	r4, [r5, #28]
   28e94:	b1e4      	cbz	r4, 28ed0 <k_delayed_work_submit_to_queue+0x80>
   28e96:	42b4      	cmp	r4, r6
   28e98:	d14f      	bne.n	28f3a <k_delayed_work_submit_to_queue+0xea>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   28e9a:	4628      	mov	r0, r5
   28e9c:	f7ff ff60 	bl	28d60 <work_cancel>
		if (err < 0) {
   28ea0:	1e04      	subs	r4, r0, #0
   28ea2:	da17      	bge.n	28ed4 <k_delayed_work_submit_to_queue+0x84>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   28ea4:	4826      	ldr	r0, [pc, #152]	; (28f40 <k_delayed_work_submit_to_queue+0xf0>)
   28ea6:	f7ff fe35 	bl	28b14 <z_spin_unlock_valid>
   28eaa:	b960      	cbnz	r0, 28ec6 <k_delayed_work_submit_to_queue+0x76>
   28eac:	4929      	ldr	r1, [pc, #164]	; (28f54 <k_delayed_work_submit_to_queue+0x104>)
   28eae:	2361      	movs	r3, #97	; 0x61
   28eb0:	4a25      	ldr	r2, [pc, #148]	; (28f48 <k_delayed_work_submit_to_queue+0xf8>)
   28eb2:	4826      	ldr	r0, [pc, #152]	; (28f4c <k_delayed_work_submit_to_queue+0xfc>)
   28eb4:	f005 fbbd 	bl	2e632 <printk>
   28eb8:	4827      	ldr	r0, [pc, #156]	; (28f58 <k_delayed_work_submit_to_queue+0x108>)
   28eba:	f005 fbba 	bl	2e632 <printk>
   28ebe:	2161      	movs	r1, #97	; 0x61
   28ec0:	4821      	ldr	r0, [pc, #132]	; (28f48 <k_delayed_work_submit_to_queue+0xf8>)
   28ec2:	f005 fbc3 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   28ec6:	f387 8811 	msr	BASEPRI, r7
   28eca:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + z_ms_to_ticks(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   28ece:	e01f      	b.n	28f10 <k_delayed_work_submit_to_queue+0xc0>
	if (work->work_q == work_q) {
   28ed0:	2e00      	cmp	r6, #0
   28ed2:	d0e2      	beq.n	28e9a <k_delayed_work_submit_to_queue+0x4a>
	work->work_q = work_q;
   28ed4:	61ee      	str	r6, [r5, #28]
	if (delay == 0) {
   28ed6:	f1b8 0f00 	cmp.w	r8, #0
   28eda:	d11c      	bne.n	28f16 <k_delayed_work_submit_to_queue+0xc6>
   28edc:	4818      	ldr	r0, [pc, #96]	; (28f40 <k_delayed_work_submit_to_queue+0xf0>)
   28ede:	f7ff fe19 	bl	28b14 <z_spin_unlock_valid>
   28ee2:	b960      	cbnz	r0, 28efe <k_delayed_work_submit_to_queue+0xae>
   28ee4:	491b      	ldr	r1, [pc, #108]	; (28f54 <k_delayed_work_submit_to_queue+0x104>)
   28ee6:	2361      	movs	r3, #97	; 0x61
   28ee8:	4a17      	ldr	r2, [pc, #92]	; (28f48 <k_delayed_work_submit_to_queue+0xf8>)
   28eea:	4818      	ldr	r0, [pc, #96]	; (28f4c <k_delayed_work_submit_to_queue+0xfc>)
   28eec:	f005 fba1 	bl	2e632 <printk>
   28ef0:	4819      	ldr	r0, [pc, #100]	; (28f58 <k_delayed_work_submit_to_queue+0x108>)
   28ef2:	f005 fb9e 	bl	2e632 <printk>
   28ef6:	2161      	movs	r1, #97	; 0x61
   28ef8:	4813      	ldr	r0, [pc, #76]	; (28f48 <k_delayed_work_submit_to_queue+0xf8>)
   28efa:	f005 fba7 	bl	2e64c <assert_post_action>
   28efe:	f387 8811 	msr	BASEPRI, r7
   28f02:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   28f06:	4629      	mov	r1, r5
   28f08:	4630      	mov	r0, r6
   28f0a:	f007 fd30 	bl	3096e <k_work_submit_to_queue>
		return 0;
   28f0e:	2400      	movs	r4, #0
}
   28f10:	4620      	mov	r0, r4
   28f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28f16:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   28f1a:	2100      	movs	r1, #0
   28f1c:	480f      	ldr	r0, [pc, #60]	; (28f5c <k_delayed_work_submit_to_queue+0x10c>)
   28f1e:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
   28f22:	2300      	movs	r3, #0
   28f24:	fbc6 0108 	smlal	r0, r1, r6, r8
   28f28:	f7e3 fd8c 	bl	ca44 <__aeabi_ldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   28f2c:	490c      	ldr	r1, [pc, #48]	; (28f60 <k_delayed_work_submit_to_queue+0x110>)
   28f2e:	1c42      	adds	r2, r0, #1
   28f30:	f105 000c 	add.w	r0, r5, #12
   28f34:	f000 f85e 	bl	28ff4 <z_add_timeout>
   28f38:	e7b4      	b.n	28ea4 <k_delayed_work_submit_to_queue+0x54>
		err = -EADDRINUSE;
   28f3a:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   28f3e:	e7b1      	b.n	28ea4 <k_delayed_work_submit_to_queue+0x54>
   28f40:	20027840 	.word	0x20027840
   28f44:	0003494a 	.word	0x0003494a
   28f48:	0003491e 	.word	0x0003491e
   28f4c:	0003452c 	.word	0x0003452c
   28f50:	0003495f 	.word	0x0003495f
   28f54:	00034974 	.word	0x00034974
   28f58:	0003498b 	.word	0x0003498b
   28f5c:	0003e7ff 	.word	0x0003e7ff
   28f60:	00030997 	.word	0x00030997

00028f64 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   28f64:	4b03      	ldr	r3, [pc, #12]	; (28f74 <elapsed+0x10>)
   28f66:	681b      	ldr	r3, [r3, #0]
   28f68:	b90b      	cbnz	r3, 28f6e <elapsed+0xa>
   28f6a:	f7ea bb9b 	b.w	136a4 <z_clock_elapsed>
}
   28f6e:	2000      	movs	r0, #0
   28f70:	4770      	bx	lr
   28f72:	bf00      	nop
   28f74:	20027844 	.word	0x20027844

00028f78 <next_timeout>:

static s32_t next_timeout(void)
{
   28f78:	b538      	push	{r3, r4, r5, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
   28f7a:	4b10      	ldr	r3, [pc, #64]	; (28fbc <next_timeout+0x44>)
   28f7c:	781b      	ldrb	r3, [r3, #0]
   28f7e:	2b00      	cmp	r3, #0
	return list->head == list;
   28f80:	4b0f      	ldr	r3, [pc, #60]	; (28fc0 <next_timeout+0x48>)
   28f82:	bf18      	it	ne
   28f84:	f04f 30ff 	movne.w	r0, #4294967295
   28f88:	681c      	ldr	r4, [r3, #0]
   28f8a:	bf08      	it	eq
   28f8c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28f90:	429c      	cmp	r4, r3
   28f92:	d00a      	beq.n	28faa <next_timeout+0x32>
	struct _timeout *to = first();
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
   28f94:	b14c      	cbz	r4, 28faa <next_timeout+0x32>
   28f96:	68a5      	ldr	r5, [r4, #8]
   28f98:	f7ff ffe4 	bl	28f64 <elapsed>
   28f9c:	1a28      	subs	r0, r5, r0
   28f9e:	2800      	cmp	r0, #0
   28fa0:	db0a      	blt.n	28fb8 <next_timeout+0x40>
   28fa2:	68a4      	ldr	r4, [r4, #8]
   28fa4:	f7ff ffde 	bl	28f64 <elapsed>
   28fa8:	1a20      	subs	r0, r4, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   28faa:	4b06      	ldr	r3, [pc, #24]	; (28fc4 <next_timeout+0x4c>)
   28fac:	691b      	ldr	r3, [r3, #16]
   28fae:	b113      	cbz	r3, 28fb6 <next_timeout+0x3e>
   28fb0:	4298      	cmp	r0, r3
   28fb2:	bfa8      	it	ge
   28fb4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   28fb6:	bd38      	pop	{r3, r4, r5, pc}
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
   28fb8:	2000      	movs	r0, #0
   28fba:	e7f6      	b.n	28faa <next_timeout+0x32>
   28fbc:	20027da1 	.word	0x20027da1
   28fc0:	2002d880 	.word	0x2002d880
   28fc4:	20027730 	.word	0x20027730

00028fc8 <remove_timeout>:
{
   28fc8:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28fca:	b140      	cbz	r0, 28fde <remove_timeout+0x16>
   28fcc:	4a08      	ldr	r2, [pc, #32]	; (28ff0 <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
   28fce:	6852      	ldr	r2, [r2, #4]
   28fd0:	4290      	cmp	r0, r2
   28fd2:	d004      	beq.n	28fde <remove_timeout+0x16>
	if (next(t) != NULL) {
   28fd4:	b11b      	cbz	r3, 28fde <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   28fd6:	689a      	ldr	r2, [r3, #8]
   28fd8:	6881      	ldr	r1, [r0, #8]
   28fda:	440a      	add	r2, r1
   28fdc:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   28fde:	6842      	ldr	r2, [r0, #4]
   28fe0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   28fe2:	6803      	ldr	r3, [r0, #0]
   28fe4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   28fe6:	2300      	movs	r3, #0
	node->prev = NULL;
   28fe8:	e9c0 3300 	strd	r3, r3, [r0]
}
   28fec:	4770      	bx	lr
   28fee:	bf00      	nop
   28ff0:	2002d880 	.word	0x2002d880

00028ff4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   28ff4:	6803      	ldr	r3, [r0, #0]
{
   28ff6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28ffa:	4604      	mov	r4, r0
   28ffc:	460e      	mov	r6, r1
   28ffe:	4615      	mov	r5, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   29000:	b163      	cbz	r3, 2901c <z_add_timeout+0x28>
   29002:	4943      	ldr	r1, [pc, #268]	; (29110 <z_add_timeout+0x11c>)
   29004:	2354      	movs	r3, #84	; 0x54
   29006:	4a43      	ldr	r2, [pc, #268]	; (29114 <z_add_timeout+0x120>)
   29008:	4843      	ldr	r0, [pc, #268]	; (29118 <z_add_timeout+0x124>)
   2900a:	f005 fb12 	bl	2e632 <printk>
   2900e:	4843      	ldr	r0, [pc, #268]	; (2911c <z_add_timeout+0x128>)
   29010:	f005 fb0f 	bl	2e632 <printk>
   29014:	2154      	movs	r1, #84	; 0x54
   29016:	483f      	ldr	r0, [pc, #252]	; (29114 <z_add_timeout+0x120>)
   29018:	f005 fb18 	bl	2e64c <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   2901c:	2d01      	cmp	r5, #1
   2901e:	bfb8      	it	lt
   29020:	2501      	movlt	r5, #1
	to->fn = fn;
   29022:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   29024:	f04f 0320 	mov.w	r3, #32
   29028:	f3ef 8811 	mrs	r8, BASEPRI
   2902c:	f383 8811 	msr	BASEPRI, r3
   29030:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   29034:	483a      	ldr	r0, [pc, #232]	; (29120 <z_add_timeout+0x12c>)
   29036:	f7ff fd5f 	bl	28af8 <z_spin_lock_valid>
   2903a:	b960      	cbnz	r0, 29056 <z_add_timeout+0x62>
   2903c:	4939      	ldr	r1, [pc, #228]	; (29124 <z_add_timeout+0x130>)
   2903e:	234e      	movs	r3, #78	; 0x4e
   29040:	4a39      	ldr	r2, [pc, #228]	; (29128 <z_add_timeout+0x134>)
   29042:	4835      	ldr	r0, [pc, #212]	; (29118 <z_add_timeout+0x124>)
   29044:	f005 faf5 	bl	2e632 <printk>
   29048:	4838      	ldr	r0, [pc, #224]	; (2912c <z_add_timeout+0x138>)
   2904a:	f005 faf2 	bl	2e632 <printk>
   2904e:	214e      	movs	r1, #78	; 0x4e
   29050:	4835      	ldr	r0, [pc, #212]	; (29128 <z_add_timeout+0x134>)
   29052:	f005 fafb 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   29056:	4832      	ldr	r0, [pc, #200]	; (29120 <z_add_timeout+0x12c>)
   29058:	f7ff fd6c 	bl	28b34 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   2905c:	f7ff ff82 	bl	28f64 <elapsed>
	return list->head == list;
   29060:	4e33      	ldr	r6, [pc, #204]	; (29130 <z_add_timeout+0x13c>)
   29062:	4428      	add	r0, r5
   29064:	6835      	ldr	r5, [r6, #0]
   29066:	60a0      	str	r0, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29068:	42b5      	cmp	r5, r6
   2906a:	d005      	beq.n	29078 <z_add_timeout+0x84>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   2906c:	4f29      	ldr	r7, [pc, #164]	; (29114 <z_add_timeout+0x120>)
   2906e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 2913c <z_add_timeout+0x148>
   29072:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 29118 <z_add_timeout+0x124>
		for (t = first(); t != NULL; t = next(t)) {
   29076:	b935      	cbnz	r5, 29086 <z_add_timeout+0x92>
	node->prev = list->tail;
   29078:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   2907a:	6026      	str	r6, [r4, #0]
	node->prev = list->tail;
   2907c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2907e:	6873      	ldr	r3, [r6, #4]
   29080:	601c      	str	r4, [r3, #0]
	list->tail = node;
   29082:	6074      	str	r4, [r6, #4]
   29084:	e01b      	b.n	290be <z_add_timeout+0xca>
			__ASSERT(t->dticks >= 0, "");
   29086:	68ab      	ldr	r3, [r5, #8]
   29088:	2b00      	cmp	r3, #0
   2908a:	da0c      	bge.n	290a6 <z_add_timeout+0xb2>
   2908c:	4649      	mov	r1, r9
   2908e:	235d      	movs	r3, #93	; 0x5d
   29090:	463a      	mov	r2, r7
   29092:	4650      	mov	r0, sl
   29094:	f005 facd 	bl	2e632 <printk>
   29098:	4820      	ldr	r0, [pc, #128]	; (2911c <z_add_timeout+0x128>)
   2909a:	f005 faca 	bl	2e632 <printk>
   2909e:	215d      	movs	r1, #93	; 0x5d
   290a0:	4638      	mov	r0, r7
   290a2:	f005 fad3 	bl	2e64c <assert_post_action>

			if (t->dticks > to->dticks) {
   290a6:	68aa      	ldr	r2, [r5, #8]
   290a8:	68a3      	ldr	r3, [r4, #8]
   290aa:	429a      	cmp	r2, r3
   290ac:	dd28      	ble.n	29100 <z_add_timeout+0x10c>
				t->dticks -= to->dticks;
   290ae:	1ad3      	subs	r3, r2, r3
   290b0:	60ab      	str	r3, [r5, #8]
	node->prev = successor->prev;
   290b2:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   290b4:	e9c4 5300 	strd	r5, r3, [r4]
	successor->prev->next = node;
   290b8:	686b      	ldr	r3, [r5, #4]
   290ba:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   290bc:	606c      	str	r4, [r5, #4]
	return list->head == list;
   290be:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   290c0:	42b3      	cmp	r3, r6
   290c2:	d006      	beq.n	290d2 <z_add_timeout+0xde>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   290c4:	429c      	cmp	r4, r3
   290c6:	d104      	bne.n	290d2 <z_add_timeout+0xde>
			z_clock_set_timeout(next_timeout(), false);
   290c8:	f7ff ff56 	bl	28f78 <next_timeout>
   290cc:	2100      	movs	r1, #0
   290ce:	f7ea fa7f 	bl	135d0 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   290d2:	4813      	ldr	r0, [pc, #76]	; (29120 <z_add_timeout+0x12c>)
   290d4:	f7ff fd1e 	bl	28b14 <z_spin_unlock_valid>
   290d8:	b960      	cbnz	r0, 290f4 <z_add_timeout+0x100>
   290da:	4916      	ldr	r1, [pc, #88]	; (29134 <z_add_timeout+0x140>)
   290dc:	2361      	movs	r3, #97	; 0x61
   290de:	4a12      	ldr	r2, [pc, #72]	; (29128 <z_add_timeout+0x134>)
   290e0:	480d      	ldr	r0, [pc, #52]	; (29118 <z_add_timeout+0x124>)
   290e2:	f005 faa6 	bl	2e632 <printk>
   290e6:	4814      	ldr	r0, [pc, #80]	; (29138 <z_add_timeout+0x144>)
   290e8:	f005 faa3 	bl	2e632 <printk>
   290ec:	2161      	movs	r1, #97	; 0x61
   290ee:	480e      	ldr	r0, [pc, #56]	; (29128 <z_add_timeout+0x134>)
   290f0:	f005 faac 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   290f4:	f388 8811 	msr	BASEPRI, r8
   290f8:	f3bf 8f6f 	isb	sy
		}
	}
}
   290fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   29100:	1a9b      	subs	r3, r3, r2
   29102:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   29104:	6873      	ldr	r3, [r6, #4]
   29106:	42ab      	cmp	r3, r5
   29108:	d0b6      	beq.n	29078 <z_add_timeout+0x84>
   2910a:	682d      	ldr	r5, [r5, #0]
   2910c:	e7b3      	b.n	29076 <z_add_timeout+0x82>
   2910e:	bf00      	nop
   29110:	00036086 	.word	0x00036086
   29114:	0003605c 	.word	0x0003605c
   29118:	0003452c 	.word	0x0003452c
   2911c:	000346b0 	.word	0x000346b0
   29120:	20027848 	.word	0x20027848
   29124:	0003494a 	.word	0x0003494a
   29128:	0003491e 	.word	0x0003491e
   2912c:	0003495f 	.word	0x0003495f
   29130:	2002d880 	.word	0x2002d880
   29134:	00034974 	.word	0x00034974
   29138:	0003498b 	.word	0x0003498b
   2913c:	000360a6 	.word	0x000360a6

00029140 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   29140:	b538      	push	{r3, r4, r5, lr}
   29142:	4604      	mov	r4, r0
	__asm__ volatile(
   29144:	f04f 0320 	mov.w	r3, #32
   29148:	f3ef 8511 	mrs	r5, BASEPRI
   2914c:	f383 8811 	msr	BASEPRI, r3
   29150:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   29154:	4819      	ldr	r0, [pc, #100]	; (291bc <z_abort_timeout+0x7c>)
   29156:	f7ff fccf 	bl	28af8 <z_spin_lock_valid>
   2915a:	b960      	cbnz	r0, 29176 <z_abort_timeout+0x36>
   2915c:	4918      	ldr	r1, [pc, #96]	; (291c0 <z_abort_timeout+0x80>)
   2915e:	234e      	movs	r3, #78	; 0x4e
   29160:	4a18      	ldr	r2, [pc, #96]	; (291c4 <z_abort_timeout+0x84>)
   29162:	4819      	ldr	r0, [pc, #100]	; (291c8 <z_abort_timeout+0x88>)
   29164:	f005 fa65 	bl	2e632 <printk>
   29168:	4818      	ldr	r0, [pc, #96]	; (291cc <z_abort_timeout+0x8c>)
   2916a:	f005 fa62 	bl	2e632 <printk>
   2916e:	214e      	movs	r1, #78	; 0x4e
   29170:	4814      	ldr	r0, [pc, #80]	; (291c4 <z_abort_timeout+0x84>)
   29172:	f005 fa6b 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   29176:	4811      	ldr	r0, [pc, #68]	; (291bc <z_abort_timeout+0x7c>)
   29178:	f7ff fcdc 	bl	28b34 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   2917c:	6823      	ldr	r3, [r4, #0]
   2917e:	b1d3      	cbz	r3, 291b6 <z_abort_timeout+0x76>
			remove_timeout(to);
   29180:	4620      	mov	r0, r4
   29182:	f7ff ff21 	bl	28fc8 <remove_timeout>
			ret = 0;
   29186:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   29188:	480c      	ldr	r0, [pc, #48]	; (291bc <z_abort_timeout+0x7c>)
   2918a:	f7ff fcc3 	bl	28b14 <z_spin_unlock_valid>
   2918e:	b960      	cbnz	r0, 291aa <z_abort_timeout+0x6a>
   29190:	490f      	ldr	r1, [pc, #60]	; (291d0 <z_abort_timeout+0x90>)
   29192:	2361      	movs	r3, #97	; 0x61
   29194:	4a0b      	ldr	r2, [pc, #44]	; (291c4 <z_abort_timeout+0x84>)
   29196:	480c      	ldr	r0, [pc, #48]	; (291c8 <z_abort_timeout+0x88>)
   29198:	f005 fa4b 	bl	2e632 <printk>
   2919c:	480d      	ldr	r0, [pc, #52]	; (291d4 <z_abort_timeout+0x94>)
   2919e:	f005 fa48 	bl	2e632 <printk>
   291a2:	2161      	movs	r1, #97	; 0x61
   291a4:	4807      	ldr	r0, [pc, #28]	; (291c4 <z_abort_timeout+0x84>)
   291a6:	f005 fa51 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   291aa:	f385 8811 	msr	BASEPRI, r5
   291ae:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   291b2:	4620      	mov	r0, r4
   291b4:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   291b6:	f06f 0415 	mvn.w	r4, #21
   291ba:	e7e5      	b.n	29188 <z_abort_timeout+0x48>
   291bc:	20027848 	.word	0x20027848
   291c0:	0003494a 	.word	0x0003494a
   291c4:	0003491e 	.word	0x0003491e
   291c8:	0003452c 	.word	0x0003452c
   291cc:	0003495f 	.word	0x0003495f
   291d0:	00034974 	.word	0x00034974
   291d4:	0003498b 	.word	0x0003498b

000291d8 <z_get_next_timeout_expiry>:

	return ticks - elapsed();
}

s32_t z_get_next_timeout_expiry(void)
{
   291d8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   291da:	f04f 0320 	mov.w	r3, #32
   291de:	f3ef 8511 	mrs	r5, BASEPRI
   291e2:	f383 8811 	msr	BASEPRI, r3
   291e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   291ea:	4817      	ldr	r0, [pc, #92]	; (29248 <z_get_next_timeout_expiry+0x70>)
   291ec:	f7ff fc84 	bl	28af8 <z_spin_lock_valid>
   291f0:	b960      	cbnz	r0, 2920c <z_get_next_timeout_expiry+0x34>
   291f2:	4916      	ldr	r1, [pc, #88]	; (2924c <z_get_next_timeout_expiry+0x74>)
   291f4:	234e      	movs	r3, #78	; 0x4e
   291f6:	4a16      	ldr	r2, [pc, #88]	; (29250 <z_get_next_timeout_expiry+0x78>)
   291f8:	4816      	ldr	r0, [pc, #88]	; (29254 <z_get_next_timeout_expiry+0x7c>)
   291fa:	f005 fa1a 	bl	2e632 <printk>
   291fe:	4816      	ldr	r0, [pc, #88]	; (29258 <z_get_next_timeout_expiry+0x80>)
   29200:	f005 fa17 	bl	2e632 <printk>
   29204:	214e      	movs	r1, #78	; 0x4e
   29206:	4812      	ldr	r0, [pc, #72]	; (29250 <z_get_next_timeout_expiry+0x78>)
   29208:	f005 fa20 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   2920c:	480e      	ldr	r0, [pc, #56]	; (29248 <z_get_next_timeout_expiry+0x70>)
   2920e:	f7ff fc91 	bl	28b34 <z_spin_lock_set_owner>
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   29212:	f7ff feb1 	bl	28f78 <next_timeout>
   29216:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   29218:	480b      	ldr	r0, [pc, #44]	; (29248 <z_get_next_timeout_expiry+0x70>)
   2921a:	f7ff fc7b 	bl	28b14 <z_spin_unlock_valid>
   2921e:	b960      	cbnz	r0, 2923a <z_get_next_timeout_expiry+0x62>
   29220:	490e      	ldr	r1, [pc, #56]	; (2925c <z_get_next_timeout_expiry+0x84>)
   29222:	2361      	movs	r3, #97	; 0x61
   29224:	4a0a      	ldr	r2, [pc, #40]	; (29250 <z_get_next_timeout_expiry+0x78>)
   29226:	480b      	ldr	r0, [pc, #44]	; (29254 <z_get_next_timeout_expiry+0x7c>)
   29228:	f005 fa03 	bl	2e632 <printk>
   2922c:	480c      	ldr	r0, [pc, #48]	; (29260 <z_get_next_timeout_expiry+0x88>)
   2922e:	f005 fa00 	bl	2e632 <printk>
   29232:	2161      	movs	r1, #97	; 0x61
   29234:	4806      	ldr	r0, [pc, #24]	; (29250 <z_get_next_timeout_expiry+0x78>)
   29236:	f005 fa09 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   2923a:	f385 8811 	msr	BASEPRI, r5
   2923e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   29242:	4620      	mov	r0, r4
   29244:	bd38      	pop	{r3, r4, r5, pc}
   29246:	bf00      	nop
   29248:	20027848 	.word	0x20027848
   2924c:	0003494a 	.word	0x0003494a
   29250:	0003491e 	.word	0x0003491e
   29254:	0003452c 	.word	0x0003452c
   29258:	0003495f 	.word	0x0003495f
   2925c:	00034974 	.word	0x00034974
   29260:	0003498b 	.word	0x0003498b

00029264 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   29264:	b570      	push	{r4, r5, r6, lr}
   29266:	4604      	mov	r4, r0
   29268:	460e      	mov	r6, r1
	__asm__ volatile(
   2926a:	f04f 0320 	mov.w	r3, #32
   2926e:	f3ef 8511 	mrs	r5, BASEPRI
   29272:	f383 8811 	msr	BASEPRI, r3
   29276:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2927a:	481a      	ldr	r0, [pc, #104]	; (292e4 <z_set_timeout_expiry+0x80>)
   2927c:	f7ff fc3c 	bl	28af8 <z_spin_lock_valid>
   29280:	b960      	cbnz	r0, 2929c <z_set_timeout_expiry+0x38>
   29282:	4919      	ldr	r1, [pc, #100]	; (292e8 <z_set_timeout_expiry+0x84>)
   29284:	234e      	movs	r3, #78	; 0x4e
   29286:	4a19      	ldr	r2, [pc, #100]	; (292ec <z_set_timeout_expiry+0x88>)
   29288:	4819      	ldr	r0, [pc, #100]	; (292f0 <z_set_timeout_expiry+0x8c>)
   2928a:	f005 f9d2 	bl	2e632 <printk>
   2928e:	4819      	ldr	r0, [pc, #100]	; (292f4 <z_set_timeout_expiry+0x90>)
   29290:	f005 f9cf 	bl	2e632 <printk>
   29294:	214e      	movs	r1, #78	; 0x4e
   29296:	4815      	ldr	r0, [pc, #84]	; (292ec <z_set_timeout_expiry+0x88>)
   29298:	f005 f9d8 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   2929c:	4811      	ldr	r0, [pc, #68]	; (292e4 <z_set_timeout_expiry+0x80>)
   2929e:	f7ff fc49 	bl	28b34 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   292a2:	f7ff fe69 	bl	28f78 <next_timeout>
		 * what we have.  Also don't try to set a timeout when
		 * one is about to expire: drivers have internal logic
		 * that will bump the timeout to the "next" tick if
		 * it's not considered to be settable as directed.
		 */
		if (sooner && !imminent) {
   292a6:	42a0      	cmp	r0, r4
   292a8:	dd05      	ble.n	292b6 <z_set_timeout_expiry+0x52>
   292aa:	2801      	cmp	r0, #1
   292ac:	dd03      	ble.n	292b6 <z_set_timeout_expiry+0x52>
			z_clock_set_timeout(ticks, idle);
   292ae:	4631      	mov	r1, r6
   292b0:	4620      	mov	r0, r4
   292b2:	f7ea f98d 	bl	135d0 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   292b6:	480b      	ldr	r0, [pc, #44]	; (292e4 <z_set_timeout_expiry+0x80>)
   292b8:	f7ff fc2c 	bl	28b14 <z_spin_unlock_valid>
   292bc:	b960      	cbnz	r0, 292d8 <z_set_timeout_expiry+0x74>
   292be:	490e      	ldr	r1, [pc, #56]	; (292f8 <z_set_timeout_expiry+0x94>)
   292c0:	2361      	movs	r3, #97	; 0x61
   292c2:	4a0a      	ldr	r2, [pc, #40]	; (292ec <z_set_timeout_expiry+0x88>)
   292c4:	480a      	ldr	r0, [pc, #40]	; (292f0 <z_set_timeout_expiry+0x8c>)
   292c6:	f005 f9b4 	bl	2e632 <printk>
   292ca:	480c      	ldr	r0, [pc, #48]	; (292fc <z_set_timeout_expiry+0x98>)
   292cc:	f005 f9b1 	bl	2e632 <printk>
   292d0:	2161      	movs	r1, #97	; 0x61
   292d2:	4806      	ldr	r0, [pc, #24]	; (292ec <z_set_timeout_expiry+0x88>)
   292d4:	f005 f9ba 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   292d8:	f385 8811 	msr	BASEPRI, r5
   292dc:	f3bf 8f6f 	isb	sy
		}
	}
}
   292e0:	bd70      	pop	{r4, r5, r6, pc}
   292e2:	bf00      	nop
   292e4:	20027848 	.word	0x20027848
   292e8:	0003494a 	.word	0x0003494a
   292ec:	0003491e 	.word	0x0003491e
   292f0:	0003452c 	.word	0x0003452c
   292f4:	0003495f 	.word	0x0003495f
   292f8:	00034974 	.word	0x00034974
   292fc:	0003498b 	.word	0x0003498b

00029300 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   29300:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   29304:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   29306:	f7fe fe83 	bl	28010 <z_time_slice>
	__asm__ volatile(
   2930a:	f04f 0320 	mov.w	r3, #32
   2930e:	f3ef 8511 	mrs	r5, BASEPRI
   29312:	f383 8811 	msr	BASEPRI, r3
   29316:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2931a:	4846      	ldr	r0, [pc, #280]	; (29434 <z_clock_announce+0x134>)
   2931c:	f7ff fbec 	bl	28af8 <z_spin_lock_valid>
   29320:	b960      	cbnz	r0, 2933c <z_clock_announce+0x3c>
   29322:	4945      	ldr	r1, [pc, #276]	; (29438 <z_clock_announce+0x138>)
   29324:	234e      	movs	r3, #78	; 0x4e
   29326:	4a45      	ldr	r2, [pc, #276]	; (2943c <z_clock_announce+0x13c>)
   29328:	4845      	ldr	r0, [pc, #276]	; (29440 <z_clock_announce+0x140>)
   2932a:	f005 f982 	bl	2e632 <printk>
   2932e:	4845      	ldr	r0, [pc, #276]	; (29444 <z_clock_announce+0x144>)
   29330:	f005 f97f 	bl	2e632 <printk>
   29334:	214e      	movs	r1, #78	; 0x4e
   29336:	4841      	ldr	r0, [pc, #260]	; (2943c <z_clock_announce+0x13c>)
   29338:	f005 f988 	bl	2e64c <assert_post_action>
   2933c:	4f42      	ldr	r7, [pc, #264]	; (29448 <z_clock_announce+0x148>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   2933e:	4e43      	ldr	r6, [pc, #268]	; (2944c <z_clock_announce+0x14c>)
   29340:	46b9      	mov	r9, r7
	z_spin_lock_set_owner(l);
   29342:	483c      	ldr	r0, [pc, #240]	; (29434 <z_clock_announce+0x134>)
	return list->head == list;
   29344:	f8df 8110 	ldr.w	r8, [pc, #272]	; 29458 <z_clock_announce+0x158>
   29348:	f7ff fbf4 	bl	28b34 <z_spin_lock_set_owner>
   2934c:	6034      	str	r4, [r6, #0]
   2934e:	f8d8 4000 	ldr.w	r4, [r8]
   29352:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29354:	4544      	cmp	r4, r8
   29356:	e9d7 bc00 	ldrd	fp, ip, [r7]
   2935a:	d005      	beq.n	29368 <z_clock_announce+0x68>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   2935c:	b124      	cbz	r4, 29368 <z_clock_announce+0x68>
   2935e:	68a3      	ldr	r3, [r4, #8]
   29360:	4293      	cmp	r3, r2
   29362:	dd25      	ble.n	293b0 <z_clock_announce+0xb0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   29364:	1a9b      	subs	r3, r3, r2
   29366:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   29368:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2936a:	eb1b 0002 	adds.w	r0, fp, r2
   2936e:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   29372:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   29376:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   29378:	f7ff fdfe 	bl	28f78 <next_timeout>
   2937c:	4621      	mov	r1, r4
   2937e:	f7ea f927 	bl	135d0 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   29382:	482c      	ldr	r0, [pc, #176]	; (29434 <z_clock_announce+0x134>)
   29384:	f7ff fbc6 	bl	28b14 <z_spin_unlock_valid>
   29388:	b960      	cbnz	r0, 293a4 <z_clock_announce+0xa4>
   2938a:	4931      	ldr	r1, [pc, #196]	; (29450 <z_clock_announce+0x150>)
   2938c:	2361      	movs	r3, #97	; 0x61
   2938e:	4a2b      	ldr	r2, [pc, #172]	; (2943c <z_clock_announce+0x13c>)
   29390:	482b      	ldr	r0, [pc, #172]	; (29440 <z_clock_announce+0x140>)
   29392:	f005 f94e 	bl	2e632 <printk>
   29396:	482f      	ldr	r0, [pc, #188]	; (29454 <z_clock_announce+0x154>)
   29398:	f005 f94b 	bl	2e632 <printk>
   2939c:	2161      	movs	r1, #97	; 0x61
   2939e:	4827      	ldr	r0, [pc, #156]	; (2943c <z_clock_announce+0x13c>)
   293a0:	f005 f954 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   293a4:	f385 8811 	msr	BASEPRI, r5
   293a8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   293ac:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   293b0:	eb1b 0003 	adds.w	r0, fp, r3
   293b4:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   293b8:	1ad3      	subs	r3, r2, r3
   293ba:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   293bc:	2300      	movs	r3, #0
		curr_tick += dt;
   293be:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   293c2:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   293c4:	4620      	mov	r0, r4
   293c6:	f7ff fdff 	bl	28fc8 <remove_timeout>
   293ca:	481a      	ldr	r0, [pc, #104]	; (29434 <z_clock_announce+0x134>)
   293cc:	f7ff fba2 	bl	28b14 <z_spin_unlock_valid>
   293d0:	b960      	cbnz	r0, 293ec <z_clock_announce+0xec>
   293d2:	491f      	ldr	r1, [pc, #124]	; (29450 <z_clock_announce+0x150>)
   293d4:	2361      	movs	r3, #97	; 0x61
   293d6:	4a19      	ldr	r2, [pc, #100]	; (2943c <z_clock_announce+0x13c>)
   293d8:	4819      	ldr	r0, [pc, #100]	; (29440 <z_clock_announce+0x140>)
   293da:	f005 f92a 	bl	2e632 <printk>
   293de:	481d      	ldr	r0, [pc, #116]	; (29454 <z_clock_announce+0x154>)
   293e0:	f005 f927 	bl	2e632 <printk>
   293e4:	2161      	movs	r1, #97	; 0x61
   293e6:	4815      	ldr	r0, [pc, #84]	; (2943c <z_clock_announce+0x13c>)
   293e8:	f005 f930 	bl	2e64c <assert_post_action>
   293ec:	f385 8811 	msr	BASEPRI, r5
   293f0:	f3bf 8f6f 	isb	sy
		t->fn(t);
   293f4:	68e3      	ldr	r3, [r4, #12]
   293f6:	4620      	mov	r0, r4
   293f8:	4798      	blx	r3
	__asm__ volatile(
   293fa:	f04f 0320 	mov.w	r3, #32
   293fe:	f3ef 8511 	mrs	r5, BASEPRI
   29402:	f383 8811 	msr	BASEPRI, r3
   29406:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2940a:	480a      	ldr	r0, [pc, #40]	; (29434 <z_clock_announce+0x134>)
   2940c:	f7ff fb74 	bl	28af8 <z_spin_lock_valid>
   29410:	b960      	cbnz	r0, 2942c <z_clock_announce+0x12c>
   29412:	4909      	ldr	r1, [pc, #36]	; (29438 <z_clock_announce+0x138>)
   29414:	234e      	movs	r3, #78	; 0x4e
   29416:	4a09      	ldr	r2, [pc, #36]	; (2943c <z_clock_announce+0x13c>)
   29418:	4809      	ldr	r0, [pc, #36]	; (29440 <z_clock_announce+0x140>)
   2941a:	f005 f90a 	bl	2e632 <printk>
   2941e:	4809      	ldr	r0, [pc, #36]	; (29444 <z_clock_announce+0x144>)
   29420:	f005 f907 	bl	2e632 <printk>
   29424:	214e      	movs	r1, #78	; 0x4e
   29426:	4805      	ldr	r0, [pc, #20]	; (2943c <z_clock_announce+0x13c>)
   29428:	f005 f910 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   2942c:	4801      	ldr	r0, [pc, #4]	; (29434 <z_clock_announce+0x134>)
   2942e:	f7ff fb81 	bl	28b34 <z_spin_lock_set_owner>
   29432:	e78c      	b.n	2934e <z_clock_announce+0x4e>
   29434:	20027848 	.word	0x20027848
   29438:	0003494a 	.word	0x0003494a
   2943c:	0003491e 	.word	0x0003491e
   29440:	0003452c 	.word	0x0003452c
   29444:	0003495f 	.word	0x0003495f
   29448:	20020838 	.word	0x20020838
   2944c:	20027844 	.word	0x20027844
   29450:	00034974 	.word	0x00034974
   29454:	0003498b 	.word	0x0003498b
   29458:	2002d880 	.word	0x2002d880

0002945c <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
   2945c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29460:	f04f 0320 	mov.w	r3, #32
   29464:	f3ef 8611 	mrs	r6, BASEPRI
   29468:	f383 8811 	msr	BASEPRI, r3
   2946c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   29470:	481a      	ldr	r0, [pc, #104]	; (294dc <z_tick_get+0x80>)
   29472:	f7ff fb41 	bl	28af8 <z_spin_lock_valid>
   29476:	b960      	cbnz	r0, 29492 <z_tick_get+0x36>
   29478:	4919      	ldr	r1, [pc, #100]	; (294e0 <z_tick_get+0x84>)
   2947a:	234e      	movs	r3, #78	; 0x4e
   2947c:	4a19      	ldr	r2, [pc, #100]	; (294e4 <z_tick_get+0x88>)
   2947e:	481a      	ldr	r0, [pc, #104]	; (294e8 <z_tick_get+0x8c>)
   29480:	f005 f8d7 	bl	2e632 <printk>
   29484:	4819      	ldr	r0, [pc, #100]	; (294ec <z_tick_get+0x90>)
   29486:	f005 f8d4 	bl	2e632 <printk>
   2948a:	214e      	movs	r1, #78	; 0x4e
   2948c:	4815      	ldr	r0, [pc, #84]	; (294e4 <z_tick_get+0x88>)
   2948e:	f005 f8dd 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   29492:	4812      	ldr	r0, [pc, #72]	; (294dc <z_tick_get+0x80>)
   29494:	f7ff fb4e 	bl	28b34 <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   29498:	f7ea f904 	bl	136a4 <z_clock_elapsed>
   2949c:	4b14      	ldr	r3, [pc, #80]	; (294f0 <z_tick_get+0x94>)
   2949e:	e9d3 4500 	ldrd	r4, r5, [r3]
   294a2:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   294a4:	480d      	ldr	r0, [pc, #52]	; (294dc <z_tick_get+0x80>)
   294a6:	f145 0800 	adc.w	r8, r5, #0
   294aa:	f7ff fb33 	bl	28b14 <z_spin_unlock_valid>
   294ae:	b960      	cbnz	r0, 294ca <z_tick_get+0x6e>
   294b0:	4910      	ldr	r1, [pc, #64]	; (294f4 <z_tick_get+0x98>)
   294b2:	2361      	movs	r3, #97	; 0x61
   294b4:	4a0b      	ldr	r2, [pc, #44]	; (294e4 <z_tick_get+0x88>)
   294b6:	480c      	ldr	r0, [pc, #48]	; (294e8 <z_tick_get+0x8c>)
   294b8:	f005 f8bb 	bl	2e632 <printk>
   294bc:	480e      	ldr	r0, [pc, #56]	; (294f8 <z_tick_get+0x9c>)
   294be:	f005 f8b8 	bl	2e632 <printk>
   294c2:	2161      	movs	r1, #97	; 0x61
   294c4:	4807      	ldr	r0, [pc, #28]	; (294e4 <z_tick_get+0x88>)
   294c6:	f005 f8c1 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   294ca:	f386 8811 	msr	BASEPRI, r6
   294ce:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   294d2:	4638      	mov	r0, r7
   294d4:	4641      	mov	r1, r8
   294d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   294da:	bf00      	nop
   294dc:	20027848 	.word	0x20027848
   294e0:	0003494a 	.word	0x0003494a
   294e4:	0003491e 	.word	0x0003491e
   294e8:	0003452c 	.word	0x0003452c
   294ec:	0003495f 	.word	0x0003495f
   294f0:	20020838 	.word	0x20020838
   294f4:	00034974 	.word	0x00034974
   294f8:	0003498b 	.word	0x0003498b

000294fc <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      k_spinlock_key_t key)
{
   294fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29500:	2414      	movs	r4, #20
   29502:	460f      	mov	r7, r1
   29504:	4690      	mov	r8, r2
   29506:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   2950a:	4d45      	ldr	r5, [pc, #276]	; (29620 <clear_event_registrations+0x124>)
   2950c:	f8df 914c 	ldr.w	r9, [pc, #332]	; 2965c <clear_event_registrations+0x160>
   29510:	4e44      	ldr	r6, [pc, #272]	; (29624 <clear_event_registrations+0x128>)
	for (; last_registered >= 0; last_registered--) {
   29512:	2f00      	cmp	r7, #0
   29514:	da01      	bge.n	2951a <clear_event_registrations+0x1e>
		clear_event_registration(&events[last_registered]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   29516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   2951a:	2300      	movs	r3, #0
   2951c:	60a3      	str	r3, [r4, #8]
	switch (event->type) {
   2951e:	7b63      	ldrb	r3, [r4, #13]
   29520:	f003 030f 	and.w	r3, r3, #15
   29524:	2b04      	cmp	r3, #4
   29526:	d839      	bhi.n	2959c <clear_event_registrations+0xa0>
   29528:	e8df f003 	tbb	[pc, r3]
   2952c:	38032a45 	.word	0x38032a45
   29530:	1c          	.byte	0x1c
   29531:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   29532:	6923      	ldr	r3, [r4, #16]
   29534:	b963      	cbnz	r3, 29550 <clear_event_registrations+0x54>
   29536:	493c      	ldr	r1, [pc, #240]	; (29628 <clear_event_registrations+0x12c>)
   29538:	2396      	movs	r3, #150	; 0x96
   2953a:	462a      	mov	r2, r5
   2953c:	4630      	mov	r0, r6
   2953e:	f005 f878 	bl	2e632 <printk>
   29542:	483a      	ldr	r0, [pc, #232]	; (2962c <clear_event_registrations+0x130>)
   29544:	f005 f875 	bl	2e632 <printk>
   29548:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2954a:	4628      	mov	r0, r5
   2954c:	f005 f87e 	bl	2e64c <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   29550:	6822      	ldr	r2, [r4, #0]
   29552:	b382      	cbz	r2, 295b6 <clear_event_registrations+0xba>
	node->prev->next = node->next;
   29554:	6863      	ldr	r3, [r4, #4]
   29556:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29558:	6822      	ldr	r2, [r4, #0]
   2955a:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   2955c:	2300      	movs	r3, #0
	node->prev = NULL;
   2955e:	e9c4 3300 	strd	r3, r3, [r4]
   29562:	e028      	b.n	295b6 <clear_event_registrations+0xba>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   29564:	6923      	ldr	r3, [r4, #16]
   29566:	2b00      	cmp	r3, #0
   29568:	d1f2      	bne.n	29550 <clear_event_registrations+0x54>
   2956a:	4931      	ldr	r1, [pc, #196]	; (29630 <clear_event_registrations+0x134>)
   2956c:	239a      	movs	r3, #154	; 0x9a
   2956e:	462a      	mov	r2, r5
   29570:	4630      	mov	r0, r6
   29572:	f005 f85e 	bl	2e632 <printk>
   29576:	482f      	ldr	r0, [pc, #188]	; (29634 <clear_event_registrations+0x138>)
   29578:	f005 f85b 	bl	2e632 <printk>
   2957c:	219a      	movs	r1, #154	; 0x9a
   2957e:	e7e4      	b.n	2954a <clear_event_registrations+0x4e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   29580:	6923      	ldr	r3, [r4, #16]
   29582:	2b00      	cmp	r3, #0
   29584:	d1e4      	bne.n	29550 <clear_event_registrations+0x54>
   29586:	492c      	ldr	r1, [pc, #176]	; (29638 <clear_event_registrations+0x13c>)
   29588:	239e      	movs	r3, #158	; 0x9e
   2958a:	462a      	mov	r2, r5
   2958c:	4630      	mov	r0, r6
   2958e:	f005 f850 	bl	2e632 <printk>
   29592:	482a      	ldr	r0, [pc, #168]	; (2963c <clear_event_registrations+0x140>)
   29594:	f005 f84d 	bl	2e632 <printk>
   29598:	219e      	movs	r1, #158	; 0x9e
   2959a:	e7d6      	b.n	2954a <clear_event_registrations+0x4e>
		__ASSERT(false, "invalid event type\n");
   2959c:	4649      	mov	r1, r9
   2959e:	23a5      	movs	r3, #165	; 0xa5
   295a0:	462a      	mov	r2, r5
   295a2:	4630      	mov	r0, r6
   295a4:	f005 f845 	bl	2e632 <printk>
   295a8:	4825      	ldr	r0, [pc, #148]	; (29640 <clear_event_registrations+0x144>)
   295aa:	f005 f842 	bl	2e632 <printk>
   295ae:	21a5      	movs	r1, #165	; 0xa5
   295b0:	4628      	mov	r0, r5
   295b2:	f005 f84b 	bl	2e64c <assert_post_action>
   295b6:	4823      	ldr	r0, [pc, #140]	; (29644 <clear_event_registrations+0x148>)
   295b8:	f7ff faac 	bl	28b14 <z_spin_unlock_valid>
   295bc:	b960      	cbnz	r0, 295d8 <clear_event_registrations+0xdc>
   295be:	4922      	ldr	r1, [pc, #136]	; (29648 <clear_event_registrations+0x14c>)
   295c0:	2361      	movs	r3, #97	; 0x61
   295c2:	4a22      	ldr	r2, [pc, #136]	; (2964c <clear_event_registrations+0x150>)
   295c4:	4630      	mov	r0, r6
   295c6:	f005 f834 	bl	2e632 <printk>
   295ca:	4821      	ldr	r0, [pc, #132]	; (29650 <clear_event_registrations+0x154>)
   295cc:	f005 f831 	bl	2e632 <printk>
   295d0:	2161      	movs	r1, #97	; 0x61
   295d2:	481e      	ldr	r0, [pc, #120]	; (2964c <clear_event_registrations+0x150>)
   295d4:	f005 f83a 	bl	2e64c <assert_post_action>
   295d8:	f388 8811 	msr	BASEPRI, r8
   295dc:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   295e0:	f04f 0320 	mov.w	r3, #32
   295e4:	f3ef 8811 	mrs	r8, BASEPRI
   295e8:	f383 8811 	msr	BASEPRI, r3
   295ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   295f0:	4814      	ldr	r0, [pc, #80]	; (29644 <clear_event_registrations+0x148>)
   295f2:	f7ff fa81 	bl	28af8 <z_spin_lock_valid>
   295f6:	b960      	cbnz	r0, 29612 <clear_event_registrations+0x116>
   295f8:	4916      	ldr	r1, [pc, #88]	; (29654 <clear_event_registrations+0x158>)
   295fa:	234e      	movs	r3, #78	; 0x4e
   295fc:	4a13      	ldr	r2, [pc, #76]	; (2964c <clear_event_registrations+0x150>)
   295fe:	4630      	mov	r0, r6
   29600:	f005 f817 	bl	2e632 <printk>
   29604:	4814      	ldr	r0, [pc, #80]	; (29658 <clear_event_registrations+0x15c>)
   29606:	f005 f814 	bl	2e632 <printk>
   2960a:	214e      	movs	r1, #78	; 0x4e
   2960c:	480f      	ldr	r0, [pc, #60]	; (2964c <clear_event_registrations+0x150>)
   2960e:	f005 f81d 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   29612:	480c      	ldr	r0, [pc, #48]	; (29644 <clear_event_registrations+0x148>)
   29614:	f7ff fa8e 	bl	28b34 <z_spin_lock_set_owner>
	for (; last_registered >= 0; last_registered--) {
   29618:	3f01      	subs	r7, #1
   2961a:	3c14      	subs	r4, #20
   2961c:	e779      	b.n	29512 <clear_event_registrations+0x16>
   2961e:	bf00      	nop
   29620:	000360b5 	.word	0x000360b5
   29624:	0003452c 	.word	0x0003452c
   29628:	000360dc 	.word	0x000360dc
   2962c:	000360f6 	.word	0x000360f6
   29630:	0003610b 	.word	0x0003610b
   29634:	00036127 	.word	0x00036127
   29638:	00036138 	.word	0x00036138
   2963c:	00036155 	.word	0x00036155
   29640:	0003616c 	.word	0x0003616c
   29644:	2002784c 	.word	0x2002784c
   29648:	00034974 	.word	0x00034974
   2964c:	0003491e 	.word	0x0003491e
   29650:	0003498b 	.word	0x0003498b
   29654:	0003494a 	.word	0x0003494a
   29658:	0003495f 	.word	0x0003495f
   2965c:	00035e56 	.word	0x00035e56

00029660 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   29660:	6883      	ldr	r3, [r0, #8]
{
   29662:	b570      	push	{r4, r5, r6, lr}
   29664:	4605      	mov	r5, r0
   29666:	460e      	mov	r6, r1
	if (!event->poller) {
   29668:	b353      	cbz	r3, 296c0 <signal_poll_event+0x60>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   2966a:	681c      	ldr	r4, [r3, #0]

	__ASSERT(event->poller->thread != NULL,
   2966c:	b974      	cbnz	r4, 2968c <signal_poll_event+0x2c>
   2966e:	491b      	ldr	r1, [pc, #108]	; (296dc <signal_poll_event+0x7c>)
   29670:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   29674:	4a1a      	ldr	r2, [pc, #104]	; (296e0 <signal_poll_event+0x80>)
   29676:	481b      	ldr	r0, [pc, #108]	; (296e4 <signal_poll_event+0x84>)
   29678:	f004 ffdb 	bl	2e632 <printk>
   2967c:	481a      	ldr	r0, [pc, #104]	; (296e8 <signal_poll_event+0x88>)
   2967e:	f004 ffd8 	bl	2e632 <printk>
   29682:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   29686:	4816      	ldr	r0, [pc, #88]	; (296e0 <signal_poll_event+0x80>)
   29688:	f004 ffe0 	bl	2e64c <assert_post_action>
		 "poller should have a thread\n");

	event->poller->is_polling = false;
   2968c:	2200      	movs	r2, #0
   2968e:	68ab      	ldr	r3, [r5, #8]
   29690:	711a      	strb	r2, [r3, #4]

	if (!z_is_thread_pending(thread)) {
   29692:	7b63      	ldrb	r3, [r4, #13]
   29694:	079a      	lsls	r2, r3, #30
   29696:	d513      	bpl.n	296c0 <signal_poll_event+0x60>
		goto ready_event;
	}

	if (z_is_thread_timeout_expired(thread)) {
   29698:	6a23      	ldr	r3, [r4, #32]
   2969a:	3302      	adds	r3, #2
   2969c:	d01a      	beq.n	296d4 <signal_poll_event+0x74>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   2969e:	4620      	mov	r0, r4
   296a0:	f7fe fa38 	bl	27b14 <z_unpend_thread>
	z_set_thread_return_value(thread,
   296a4:	2e08      	cmp	r6, #8
   296a6:	bf0c      	ite	eq
   296a8:	f06f 0303 	mvneq.w	r3, #3
   296ac:	2300      	movne	r3, #0
   296ae:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   296b0:	7b63      	ldrb	r3, [r4, #13]
   296b2:	06db      	lsls	r3, r3, #27
   296b4:	d104      	bne.n	296c0 <signal_poll_event+0x60>
				 state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
   296b6:	69a3      	ldr	r3, [r4, #24]
   296b8:	b913      	cbnz	r3, 296c0 <signal_poll_event+0x60>
		z_add_thread_to_ready_q(thread);
   296ba:	4620      	mov	r0, r4
   296bc:	f7fe fb36 	bl	27d2c <z_add_thread_to_ready_q>
	event->poller = NULL;
   296c0:	2000      	movs	r0, #0
	event->state |= state;
   296c2:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   296c4:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   296c6:	f3c3 3204 	ubfx	r2, r3, #12, #5
   296ca:	4316      	orrs	r6, r2
   296cc:	f366 3310 	bfi	r3, r6, #12, #5
   296d0:	60eb      	str	r3, [r5, #12]
	z_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
}
   296d2:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   296d4:	f06f 000a 	mvn.w	r0, #10
   296d8:	e7fb      	b.n	296d2 <signal_poll_event+0x72>
   296da:	bf00      	nop
   296dc:	00036229 	.word	0x00036229
   296e0:	000360b5 	.word	0x000360b5
   296e4:	0003452c 	.word	0x0003452c
   296e8:	0003624e 	.word	0x0003624e

000296ec <k_poll_event_init>:
{
   296ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   296ee:	4604      	mov	r4, r0
   296f0:	460f      	mov	r7, r1
   296f2:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   296f4:	4616      	mov	r6, r2
   296f6:	b162      	cbz	r2, 29712 <k_poll_event_init+0x26>
   296f8:	491f      	ldr	r1, [pc, #124]	; (29778 <k_poll_event_init+0x8c>)
   296fa:	232a      	movs	r3, #42	; 0x2a
   296fc:	4a1f      	ldr	r2, [pc, #124]	; (2977c <k_poll_event_init+0x90>)
   296fe:	4820      	ldr	r0, [pc, #128]	; (29780 <k_poll_event_init+0x94>)
   29700:	f004 ff97 	bl	2e632 <printk>
   29704:	481f      	ldr	r0, [pc, #124]	; (29784 <k_poll_event_init+0x98>)
   29706:	f004 ff94 	bl	2e632 <printk>
   2970a:	212a      	movs	r1, #42	; 0x2a
   2970c:	481b      	ldr	r0, [pc, #108]	; (2977c <k_poll_event_init+0x90>)
   2970e:	f004 ff9d 	bl	2e64c <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   29712:	2f0f      	cmp	r7, #15
   29714:	d90c      	bls.n	29730 <k_poll_event_init+0x44>
   29716:	491c      	ldr	r1, [pc, #112]	; (29788 <k_poll_event_init+0x9c>)
   29718:	232b      	movs	r3, #43	; 0x2b
   2971a:	4a18      	ldr	r2, [pc, #96]	; (2977c <k_poll_event_init+0x90>)
   2971c:	4818      	ldr	r0, [pc, #96]	; (29780 <k_poll_event_init+0x94>)
   2971e:	f004 ff88 	bl	2e632 <printk>
   29722:	481a      	ldr	r0, [pc, #104]	; (2978c <k_poll_event_init+0xa0>)
   29724:	f004 ff85 	bl	2e632 <printk>
   29728:	212b      	movs	r1, #43	; 0x2b
   2972a:	4814      	ldr	r0, [pc, #80]	; (2977c <k_poll_event_init+0x90>)
   2972c:	f004 ff8e 	bl	2e64c <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   29730:	b965      	cbnz	r5, 2974c <k_poll_event_init+0x60>
   29732:	4917      	ldr	r1, [pc, #92]	; (29790 <k_poll_event_init+0xa4>)
   29734:	232c      	movs	r3, #44	; 0x2c
   29736:	4a11      	ldr	r2, [pc, #68]	; (2977c <k_poll_event_init+0x90>)
   29738:	4811      	ldr	r0, [pc, #68]	; (29780 <k_poll_event_init+0x94>)
   2973a:	f004 ff7a 	bl	2e632 <printk>
   2973e:	4815      	ldr	r0, [pc, #84]	; (29794 <k_poll_event_init+0xa8>)
   29740:	f004 ff77 	bl	2e632 <printk>
   29744:	212c      	movs	r1, #44	; 0x2c
   29746:	480d      	ldr	r0, [pc, #52]	; (2977c <k_poll_event_init+0x90>)
   29748:	f004 ff80 	bl	2e64c <assert_post_action>
	event->poller = NULL;
   2974c:	2200      	movs	r2, #0
	event->type = type;
   2974e:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
   29750:	60a2      	str	r2, [r4, #8]
	event->type = type;
   29752:	f367 0303 	bfi	r3, r7, #0, #4
   29756:	7363      	strb	r3, [r4, #13]
	event->state = K_POLL_STATE_NOT_READY;
   29758:	68e3      	ldr	r3, [r4, #12]
	event->obj = obj;
   2975a:	6125      	str	r5, [r4, #16]
	event->state = K_POLL_STATE_NOT_READY;
   2975c:	f362 3310 	bfi	r3, r2, #12, #5
   29760:	60e3      	str	r3, [r4, #12]
	event->mode = mode;
   29762:	f3c3 4307 	ubfx	r3, r3, #16, #8
   29766:	f366 0341 	bfi	r3, r6, #1, #1
   2976a:	73a3      	strb	r3, [r4, #14]
	event->unused = 0U;
   2976c:	89e3      	ldrh	r3, [r4, #14]
   2976e:	f362 038f 	bfi	r3, r2, #2, #14
   29772:	81e3      	strh	r3, [r4, #14]
}
   29774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29776:	bf00      	nop
   29778:	00036182 	.word	0x00036182
   2977c:	000360b5 	.word	0x000360b5
   29780:	0003452c 	.word	0x0003452c
   29784:	000361a2 	.word	0x000361a2
   29788:	000361c8 	.word	0x000361c8
   2978c:	000361ec 	.word	0x000361ec
   29790:	000361fc 	.word	0x000361fc
   29794:	0003620f 	.word	0x0003620f

00029798 <z_impl_k_poll>:
{
   29798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2979c:	4605      	mov	r5, r0
   2979e:	b087      	sub	sp, #28
   297a0:	468b      	mov	fp, r1
   297a2:	4690      	mov	r8, r2
   297a4:	f3ef 8305 	mrs	r3, IPSR
   297a8:	2b0d      	cmp	r3, #13
   297aa:	d804      	bhi.n	297b6 <z_impl_k_poll+0x1e>
   297ac:	b183      	cbz	r3, 297d0 <z_impl_k_poll+0x38>
   297ae:	4ba6      	ldr	r3, [pc, #664]	; (29a48 <z_impl_k_poll+0x2b0>)
   297b0:	685b      	ldr	r3, [r3, #4]
   297b2:	051b      	lsls	r3, r3, #20
   297b4:	d40c      	bmi.n	297d0 <z_impl_k_poll+0x38>
	__ASSERT(!z_is_in_isr(), "");
   297b6:	49a5      	ldr	r1, [pc, #660]	; (29a4c <z_impl_k_poll+0x2b4>)
   297b8:	23c1      	movs	r3, #193	; 0xc1
   297ba:	4aa5      	ldr	r2, [pc, #660]	; (29a50 <z_impl_k_poll+0x2b8>)
   297bc:	48a5      	ldr	r0, [pc, #660]	; (29a54 <z_impl_k_poll+0x2bc>)
   297be:	f004 ff38 	bl	2e632 <printk>
   297c2:	48a5      	ldr	r0, [pc, #660]	; (29a58 <z_impl_k_poll+0x2c0>)
   297c4:	f004 ff35 	bl	2e632 <printk>
   297c8:	21c1      	movs	r1, #193	; 0xc1
   297ca:	48a1      	ldr	r0, [pc, #644]	; (29a50 <z_impl_k_poll+0x2b8>)
   297cc:	f004 ff3e 	bl	2e64c <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   297d0:	b965      	cbnz	r5, 297ec <z_impl_k_poll+0x54>
   297d2:	49a2      	ldr	r1, [pc, #648]	; (29a5c <z_impl_k_poll+0x2c4>)
   297d4:	23c2      	movs	r3, #194	; 0xc2
   297d6:	4a9e      	ldr	r2, [pc, #632]	; (29a50 <z_impl_k_poll+0x2b8>)
   297d8:	489e      	ldr	r0, [pc, #632]	; (29a54 <z_impl_k_poll+0x2bc>)
   297da:	f004 ff2a 	bl	2e632 <printk>
   297de:	48a0      	ldr	r0, [pc, #640]	; (29a60 <z_impl_k_poll+0x2c8>)
   297e0:	f004 ff27 	bl	2e632 <printk>
   297e4:	21c2      	movs	r1, #194	; 0xc2
   297e6:	489a      	ldr	r0, [pc, #616]	; (29a50 <z_impl_k_poll+0x2b8>)
   297e8:	f004 ff30 	bl	2e64c <assert_post_action>
	__ASSERT(num_events > 0, "zero events\n");
   297ec:	f1bb 0f00 	cmp.w	fp, #0
   297f0:	dc0c      	bgt.n	2980c <z_impl_k_poll+0x74>
   297f2:	499c      	ldr	r1, [pc, #624]	; (29a64 <z_impl_k_poll+0x2cc>)
   297f4:	23c3      	movs	r3, #195	; 0xc3
   297f6:	4a96      	ldr	r2, [pc, #600]	; (29a50 <z_impl_k_poll+0x2b8>)
   297f8:	4896      	ldr	r0, [pc, #600]	; (29a54 <z_impl_k_poll+0x2bc>)
   297fa:	f004 ff1a 	bl	2e632 <printk>
   297fe:	489a      	ldr	r0, [pc, #616]	; (29a68 <z_impl_k_poll+0x2d0>)
   29800:	f004 ff17 	bl	2e632 <printk>
   29804:	21c3      	movs	r1, #195	; 0xc3
   29806:	4892      	ldr	r0, [pc, #584]	; (29a50 <z_impl_k_poll+0x2b8>)
   29808:	f004 ff20 	bl	2e64c <assert_post_action>
	struct _poller poller = { .thread = _current, .is_polling = true, };
   2980c:	4b97      	ldr	r3, [pc, #604]	; (29a6c <z_impl_k_poll+0x2d4>)
   2980e:	462c      	mov	r4, r5
   29810:	689b      	ldr	r3, [r3, #8]
	for (int ii = 0; ii < num_events; ii++) {
   29812:	f04f 0900 	mov.w	r9, #0
	struct _poller poller = { .thread = _current, .is_polling = true, };
   29816:	9302      	str	r3, [sp, #8]
   29818:	2301      	movs	r3, #1
	int last_registered = -1, rc;
   2981a:	f04f 36ff 	mov.w	r6, #4294967295
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2981e:	f8df a254 	ldr.w	sl, [pc, #596]	; 29a74 <z_impl_k_poll+0x2dc>
   29822:	4f93      	ldr	r7, [pc, #588]	; (29a70 <z_impl_k_poll+0x2d8>)
	struct _poller poller = { .thread = _current, .is_polling = true, };
   29824:	f88d 300c 	strb.w	r3, [sp, #12]
	for (int ii = 0; ii < num_events; ii++) {
   29828:	45d9      	cmp	r9, fp
   2982a:	db3f      	blt.n	298ac <z_impl_k_poll+0x114>
   2982c:	f04f 0320 	mov.w	r3, #32
   29830:	f3ef 8411 	mrs	r4, BASEPRI
   29834:	f383 8811 	msr	BASEPRI, r3
   29838:	f3bf 8f6f 	isb	sy
   2983c:	488d      	ldr	r0, [pc, #564]	; (29a74 <z_impl_k_poll+0x2dc>)
   2983e:	f7ff f95b 	bl	28af8 <z_spin_lock_valid>
   29842:	b960      	cbnz	r0, 2985e <z_impl_k_poll+0xc6>
   29844:	498c      	ldr	r1, [pc, #560]	; (29a78 <z_impl_k_poll+0x2e0>)
   29846:	234e      	movs	r3, #78	; 0x4e
   29848:	4a89      	ldr	r2, [pc, #548]	; (29a70 <z_impl_k_poll+0x2d8>)
   2984a:	4882      	ldr	r0, [pc, #520]	; (29a54 <z_impl_k_poll+0x2bc>)
   2984c:	f004 fef1 	bl	2e632 <printk>
   29850:	488a      	ldr	r0, [pc, #552]	; (29a7c <z_impl_k_poll+0x2e4>)
   29852:	f004 feee 	bl	2e632 <printk>
   29856:	214e      	movs	r1, #78	; 0x4e
   29858:	4885      	ldr	r0, [pc, #532]	; (29a70 <z_impl_k_poll+0x2d8>)
   2985a:	f004 fef7 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   2985e:	4885      	ldr	r0, [pc, #532]	; (29a74 <z_impl_k_poll+0x2dc>)
   29860:	f7ff f968 	bl	28b34 <z_spin_lock_set_owner>
	if (!poller.is_polling) {
   29864:	f89d 300c 	ldrb.w	r3, [sp, #12]
   29868:	2b00      	cmp	r3, #0
   2986a:	f040 811f 	bne.w	29aac <z_impl_k_poll+0x314>
		clear_event_registrations(events, last_registered, key);
   2986e:	4628      	mov	r0, r5
   29870:	4622      	mov	r2, r4
   29872:	4631      	mov	r1, r6
   29874:	f7ff fe42 	bl	294fc <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   29878:	487e      	ldr	r0, [pc, #504]	; (29a74 <z_impl_k_poll+0x2dc>)
   2987a:	f7ff f94b 	bl	28b14 <z_spin_unlock_valid>
   2987e:	b960      	cbnz	r0, 2989a <z_impl_k_poll+0x102>
   29880:	497f      	ldr	r1, [pc, #508]	; (29a80 <z_impl_k_poll+0x2e8>)
   29882:	2361      	movs	r3, #97	; 0x61
   29884:	4a7a      	ldr	r2, [pc, #488]	; (29a70 <z_impl_k_poll+0x2d8>)
   29886:	4873      	ldr	r0, [pc, #460]	; (29a54 <z_impl_k_poll+0x2bc>)
   29888:	f004 fed3 	bl	2e632 <printk>
   2988c:	487d      	ldr	r0, [pc, #500]	; (29a84 <z_impl_k_poll+0x2ec>)
   2988e:	f004 fed0 	bl	2e632 <printk>
   29892:	2161      	movs	r1, #97	; 0x61
   29894:	4876      	ldr	r0, [pc, #472]	; (29a70 <z_impl_k_poll+0x2d8>)
   29896:	f004 fed9 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   2989a:	f384 8811 	msr	BASEPRI, r4
   2989e:	f3bf 8f6f 	isb	sy
		return 0;
   298a2:	2400      	movs	r4, #0
}
   298a4:	4620      	mov	r0, r4
   298a6:	b007      	add	sp, #28
   298a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   298ac:	f04f 0320 	mov.w	r3, #32
   298b0:	f3ef 8211 	mrs	r2, BASEPRI
   298b4:	f383 8811 	msr	BASEPRI, r3
   298b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   298bc:	4650      	mov	r0, sl
   298be:	9201      	str	r2, [sp, #4]
   298c0:	f7ff f91a 	bl	28af8 <z_spin_lock_valid>
   298c4:	b960      	cbnz	r0, 298e0 <z_impl_k_poll+0x148>
   298c6:	496c      	ldr	r1, [pc, #432]	; (29a78 <z_impl_k_poll+0x2e0>)
   298c8:	234e      	movs	r3, #78	; 0x4e
   298ca:	463a      	mov	r2, r7
   298cc:	4861      	ldr	r0, [pc, #388]	; (29a54 <z_impl_k_poll+0x2bc>)
   298ce:	f004 feb0 	bl	2e632 <printk>
   298d2:	486a      	ldr	r0, [pc, #424]	; (29a7c <z_impl_k_poll+0x2e4>)
   298d4:	f004 fead 	bl	2e632 <printk>
   298d8:	214e      	movs	r1, #78	; 0x4e
   298da:	4638      	mov	r0, r7
   298dc:	f004 feb6 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   298e0:	4650      	mov	r0, sl
   298e2:	f7ff f927 	bl	28b34 <z_spin_lock_set_owner>
	switch (event->type) {
   298e6:	7b63      	ldrb	r3, [r4, #13]
   298e8:	f003 030f 	and.w	r3, r3, #15
   298ec:	2b04      	cmp	r3, #4
   298ee:	d826      	bhi.n	2993e <z_impl_k_poll+0x1a6>
   298f0:	e8df f003 	tbb	[pc, r3]
   298f4:	25031f07 	.word	0x25031f07
   298f8:	19          	.byte	0x19
   298f9:	00          	.byte	0x00
K_SYSCALL_DECLARE1(K_SYSCALL_K_SEM_COUNT_GET, k_sem_count_get, unsigned int, struct k_sem *, sem)
   298fa:	6923      	ldr	r3, [r4, #16]
		if (k_sem_count_get(event->sem) > 0) {
   298fc:	689b      	ldr	r3, [r3, #8]
   298fe:	2b00      	cmp	r3, #0
   29900:	d12e      	bne.n	29960 <z_impl_k_poll+0x1c8>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   29902:	f1b8 0f00 	cmp.w	r8, #0
   29906:	d037      	beq.n	29978 <z_impl_k_poll+0x1e0>
   29908:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2990c:	2b00      	cmp	r3, #0
   2990e:	d033      	beq.n	29978 <z_impl_k_poll+0x1e0>
	switch (event->type) {
   29910:	7b63      	ldrb	r3, [r4, #13]
   29912:	f003 030f 	and.w	r3, r3, #15
   29916:	2b04      	cmp	r3, #4
   29918:	f200 8088 	bhi.w	29a2c <z_impl_k_poll+0x294>
   2991c:	e8df f003 	tbb	[pc, r3]
   29920:	8646735b 	.word	0x8646735b
   29924:	5f          	.byte	0x5f
   29925:	00          	.byte	0x00
Z_GENLIST_IS_EMPTY(sflist)
   29926:	6923      	ldr	r3, [r4, #16]
		if (!k_queue_is_empty(event->queue)) {
   29928:	681b      	ldr	r3, [r3, #0]
   2992a:	2b00      	cmp	r3, #0
   2992c:	d0e9      	beq.n	29902 <z_impl_k_poll+0x16a>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2992e:	2204      	movs	r2, #4
   29930:	e017      	b.n	29962 <z_impl_k_poll+0x1ca>
		if (event->signal->signaled != 0U) {
   29932:	6923      	ldr	r3, [r4, #16]
   29934:	689b      	ldr	r3, [r3, #8]
   29936:	2b00      	cmp	r3, #0
   29938:	d0e3      	beq.n	29902 <z_impl_k_poll+0x16a>
			*state = K_POLL_STATE_SIGNALED;
   2993a:	2201      	movs	r2, #1
   2993c:	e011      	b.n	29962 <z_impl_k_poll+0x1ca>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   2993e:	2350      	movs	r3, #80	; 0x50
   29940:	4a43      	ldr	r2, [pc, #268]	; (29a50 <z_impl_k_poll+0x2b8>)
   29942:	4951      	ldr	r1, [pc, #324]	; (29a88 <z_impl_k_poll+0x2f0>)
   29944:	4843      	ldr	r0, [pc, #268]	; (29a54 <z_impl_k_poll+0x2bc>)
   29946:	f004 fe74 	bl	2e632 <printk>
   2994a:	7b61      	ldrb	r1, [r4, #13]
   2994c:	484f      	ldr	r0, [pc, #316]	; (29a8c <z_impl_k_poll+0x2f4>)
   2994e:	f001 010f 	and.w	r1, r1, #15
   29952:	f004 fe6e 	bl	2e632 <printk>
   29956:	2150      	movs	r1, #80	; 0x50
   29958:	483d      	ldr	r0, [pc, #244]	; (29a50 <z_impl_k_poll+0x2b8>)
   2995a:	f004 fe77 	bl	2e64c <assert_post_action>
   2995e:	e7d0      	b.n	29902 <z_impl_k_poll+0x16a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   29960:	2202      	movs	r2, #2
	event->poller = NULL;
   29962:	2100      	movs	r1, #0
	event->state |= state;
   29964:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   29966:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   29968:	f3c3 3004 	ubfx	r0, r3, #12, #5
   2996c:	4302      	orrs	r2, r0
   2996e:	f362 3310 	bfi	r3, r2, #12, #5
   29972:	60e3      	str	r3, [r4, #12]
			poller.is_polling = false;
   29974:	f88d 100c 	strb.w	r1, [sp, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   29978:	4650      	mov	r0, sl
   2997a:	f7ff f8cb 	bl	28b14 <z_spin_unlock_valid>
   2997e:	b960      	cbnz	r0, 2999a <z_impl_k_poll+0x202>
   29980:	493f      	ldr	r1, [pc, #252]	; (29a80 <z_impl_k_poll+0x2e8>)
   29982:	2361      	movs	r3, #97	; 0x61
   29984:	463a      	mov	r2, r7
   29986:	4833      	ldr	r0, [pc, #204]	; (29a54 <z_impl_k_poll+0x2bc>)
   29988:	f004 fe53 	bl	2e632 <printk>
   2998c:	483d      	ldr	r0, [pc, #244]	; (29a84 <z_impl_k_poll+0x2ec>)
   2998e:	f004 fe50 	bl	2e632 <printk>
   29992:	2161      	movs	r1, #97	; 0x61
   29994:	4638      	mov	r0, r7
   29996:	f004 fe59 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   2999a:	9b01      	ldr	r3, [sp, #4]
   2999c:	f383 8811 	msr	BASEPRI, r3
   299a0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   299a4:	f109 0901 	add.w	r9, r9, #1
   299a8:	3414      	adds	r4, #20
   299aa:	e73d      	b.n	29828 <z_impl_k_poll+0x90>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   299ac:	6923      	ldr	r3, [r4, #16]
   299ae:	b963      	cbnz	r3, 299ca <z_impl_k_poll+0x232>
   299b0:	4937      	ldr	r1, [pc, #220]	; (29a90 <z_impl_k_poll+0x2f8>)
   299b2:	2375      	movs	r3, #117	; 0x75
   299b4:	4a26      	ldr	r2, [pc, #152]	; (29a50 <z_impl_k_poll+0x2b8>)
   299b6:	4827      	ldr	r0, [pc, #156]	; (29a54 <z_impl_k_poll+0x2bc>)
   299b8:	f004 fe3b 	bl	2e632 <printk>
   299bc:	4835      	ldr	r0, [pc, #212]	; (29a94 <z_impl_k_poll+0x2fc>)
   299be:	f004 fe38 	bl	2e632 <printk>
   299c2:	2175      	movs	r1, #117	; 0x75
   299c4:	4822      	ldr	r0, [pc, #136]	; (29a50 <z_impl_k_poll+0x2b8>)
   299c6:	f004 fe41 	bl	2e64c <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   299ca:	4621      	mov	r1, r4
   299cc:	6920      	ldr	r0, [r4, #16]
   299ce:	aa02      	add	r2, sp, #8
   299d0:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   299d2:	f007 f80a 	bl	309ea <add_event>
	event->poller = poller;
   299d6:	ab02      	add	r3, sp, #8
   299d8:	60a3      	str	r3, [r4, #8]
				++last_registered;
   299da:	3601      	adds	r6, #1
   299dc:	e7cc      	b.n	29978 <z_impl_k_poll+0x1e0>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   299de:	6923      	ldr	r3, [r4, #16]
   299e0:	b963      	cbnz	r3, 299fc <z_impl_k_poll+0x264>
   299e2:	492d      	ldr	r1, [pc, #180]	; (29a98 <z_impl_k_poll+0x300>)
   299e4:	2379      	movs	r3, #121	; 0x79
   299e6:	4a1a      	ldr	r2, [pc, #104]	; (29a50 <z_impl_k_poll+0x2b8>)
   299e8:	481a      	ldr	r0, [pc, #104]	; (29a54 <z_impl_k_poll+0x2bc>)
   299ea:	f004 fe22 	bl	2e632 <printk>
   299ee:	482b      	ldr	r0, [pc, #172]	; (29a9c <z_impl_k_poll+0x304>)
   299f0:	f004 fe1f 	bl	2e632 <printk>
   299f4:	2179      	movs	r1, #121	; 0x79
   299f6:	4816      	ldr	r0, [pc, #88]	; (29a50 <z_impl_k_poll+0x2b8>)
   299f8:	f004 fe28 	bl	2e64c <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   299fc:	6920      	ldr	r0, [r4, #16]
   299fe:	aa02      	add	r2, sp, #8
   29a00:	4621      	mov	r1, r4
   29a02:	300c      	adds	r0, #12
   29a04:	e7e5      	b.n	299d2 <z_impl_k_poll+0x23a>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   29a06:	6923      	ldr	r3, [r4, #16]
   29a08:	b963      	cbnz	r3, 29a24 <z_impl_k_poll+0x28c>
   29a0a:	4925      	ldr	r1, [pc, #148]	; (29aa0 <z_impl_k_poll+0x308>)
   29a0c:	237d      	movs	r3, #125	; 0x7d
   29a0e:	4a10      	ldr	r2, [pc, #64]	; (29a50 <z_impl_k_poll+0x2b8>)
   29a10:	4810      	ldr	r0, [pc, #64]	; (29a54 <z_impl_k_poll+0x2bc>)
   29a12:	f004 fe0e 	bl	2e632 <printk>
   29a16:	4823      	ldr	r0, [pc, #140]	; (29aa4 <z_impl_k_poll+0x30c>)
   29a18:	f004 fe0b 	bl	2e632 <printk>
   29a1c:	217d      	movs	r1, #125	; 0x7d
   29a1e:	480c      	ldr	r0, [pc, #48]	; (29a50 <z_impl_k_poll+0x2b8>)
   29a20:	f004 fe14 	bl	2e64c <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   29a24:	aa02      	add	r2, sp, #8
   29a26:	4621      	mov	r1, r4
   29a28:	6920      	ldr	r0, [r4, #16]
   29a2a:	e7d2      	b.n	299d2 <z_impl_k_poll+0x23a>
		__ASSERT(false, "invalid event type\n");
   29a2c:	2384      	movs	r3, #132	; 0x84
   29a2e:	4a08      	ldr	r2, [pc, #32]	; (29a50 <z_impl_k_poll+0x2b8>)
   29a30:	4915      	ldr	r1, [pc, #84]	; (29a88 <z_impl_k_poll+0x2f0>)
   29a32:	4808      	ldr	r0, [pc, #32]	; (29a54 <z_impl_k_poll+0x2bc>)
   29a34:	f004 fdfd 	bl	2e632 <printk>
   29a38:	481b      	ldr	r0, [pc, #108]	; (29aa8 <z_impl_k_poll+0x310>)
   29a3a:	f004 fdfa 	bl	2e632 <printk>
   29a3e:	2184      	movs	r1, #132	; 0x84
   29a40:	4803      	ldr	r0, [pc, #12]	; (29a50 <z_impl_k_poll+0x2b8>)
   29a42:	f004 fe03 	bl	2e64c <assert_post_action>
   29a46:	e7c6      	b.n	299d6 <z_impl_k_poll+0x23e>
   29a48:	e000ed00 	.word	0xe000ed00
   29a4c:	00035dfb 	.word	0x00035dfb
   29a50:	000360b5 	.word	0x000360b5
   29a54:	0003452c 	.word	0x0003452c
   29a58:	000346b0 	.word	0x000346b0
   29a5c:	0003626d 	.word	0x0003626d
   29a60:	00036283 	.word	0x00036283
   29a64:	00036292 	.word	0x00036292
   29a68:	000362a1 	.word	0x000362a1
   29a6c:	20027730 	.word	0x20027730
   29a70:	0003491e 	.word	0x0003491e
   29a74:	2002784c 	.word	0x2002784c
   29a78:	0003494a 	.word	0x0003494a
   29a7c:	0003495f 	.word	0x0003495f
   29a80:	00034974 	.word	0x00034974
   29a84:	0003498b 	.word	0x0003498b
   29a88:	00035e56 	.word	0x00035e56
   29a8c:	000362b0 	.word	0x000362b0
   29a90:	000360dc 	.word	0x000360dc
   29a94:	000360f6 	.word	0x000360f6
   29a98:	0003610b 	.word	0x0003610b
   29a9c:	00036127 	.word	0x00036127
   29aa0:	00036138 	.word	0x00036138
   29aa4:	00036155 	.word	0x00036155
   29aa8:	0003616c 	.word	0x0003616c
	poller.is_polling = false;
   29aac:	2300      	movs	r3, #0
   29aae:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   29ab2:	f1b8 0f00 	cmp.w	r8, #0
   29ab6:	d117      	bne.n	29ae8 <z_impl_k_poll+0x350>
   29ab8:	482b      	ldr	r0, [pc, #172]	; (29b68 <z_impl_k_poll+0x3d0>)
   29aba:	f7ff f82b 	bl	28b14 <z_spin_unlock_valid>
   29abe:	b960      	cbnz	r0, 29ada <z_impl_k_poll+0x342>
   29ac0:	492a      	ldr	r1, [pc, #168]	; (29b6c <z_impl_k_poll+0x3d4>)
   29ac2:	2361      	movs	r3, #97	; 0x61
   29ac4:	4a2a      	ldr	r2, [pc, #168]	; (29b70 <z_impl_k_poll+0x3d8>)
   29ac6:	482b      	ldr	r0, [pc, #172]	; (29b74 <z_impl_k_poll+0x3dc>)
   29ac8:	f004 fdb3 	bl	2e632 <printk>
   29acc:	482a      	ldr	r0, [pc, #168]	; (29b78 <z_impl_k_poll+0x3e0>)
   29ace:	f004 fdb0 	bl	2e632 <printk>
   29ad2:	2161      	movs	r1, #97	; 0x61
   29ad4:	4826      	ldr	r0, [pc, #152]	; (29b70 <z_impl_k_poll+0x3d8>)
   29ad6:	f004 fdb9 	bl	2e64c <assert_post_action>
   29ada:	f384 8811 	msr	BASEPRI, r4
   29ade:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   29ae2:	f06f 040a 	mvn.w	r4, #10
   29ae6:	e6dd      	b.n	298a4 <z_impl_k_poll+0x10c>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   29ae8:	aa04      	add	r2, sp, #16
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   29aea:	4621      	mov	r1, r4
   29aec:	4643      	mov	r3, r8
   29aee:	481e      	ldr	r0, [pc, #120]	; (29b68 <z_impl_k_poll+0x3d0>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   29af0:	e9cd 2204 	strd	r2, r2, [sp, #16]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   29af4:	f7fe fbcc 	bl	28290 <z_pend_curr>
   29af8:	4604      	mov	r4, r0
	__asm__ volatile(
   29afa:	f04f 0320 	mov.w	r3, #32
   29afe:	f3ef 8711 	mrs	r7, BASEPRI
   29b02:	f383 8811 	msr	BASEPRI, r3
   29b06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   29b0a:	4817      	ldr	r0, [pc, #92]	; (29b68 <z_impl_k_poll+0x3d0>)
   29b0c:	f7fe fff4 	bl	28af8 <z_spin_lock_valid>
   29b10:	b960      	cbnz	r0, 29b2c <z_impl_k_poll+0x394>
   29b12:	491a      	ldr	r1, [pc, #104]	; (29b7c <z_impl_k_poll+0x3e4>)
   29b14:	234e      	movs	r3, #78	; 0x4e
   29b16:	4a16      	ldr	r2, [pc, #88]	; (29b70 <z_impl_k_poll+0x3d8>)
   29b18:	4816      	ldr	r0, [pc, #88]	; (29b74 <z_impl_k_poll+0x3dc>)
   29b1a:	f004 fd8a 	bl	2e632 <printk>
   29b1e:	4818      	ldr	r0, [pc, #96]	; (29b80 <z_impl_k_poll+0x3e8>)
   29b20:	f004 fd87 	bl	2e632 <printk>
   29b24:	214e      	movs	r1, #78	; 0x4e
   29b26:	4812      	ldr	r0, [pc, #72]	; (29b70 <z_impl_k_poll+0x3d8>)
   29b28:	f004 fd90 	bl	2e64c <assert_post_action>
	z_spin_lock_set_owner(l);
   29b2c:	480e      	ldr	r0, [pc, #56]	; (29b68 <z_impl_k_poll+0x3d0>)
   29b2e:	f7ff f801 	bl	28b34 <z_spin_lock_set_owner>
	clear_event_registrations(events, last_registered, key);
   29b32:	4628      	mov	r0, r5
   29b34:	463a      	mov	r2, r7
   29b36:	4631      	mov	r1, r6
   29b38:	f7ff fce0 	bl	294fc <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   29b3c:	480a      	ldr	r0, [pc, #40]	; (29b68 <z_impl_k_poll+0x3d0>)
   29b3e:	f7fe ffe9 	bl	28b14 <z_spin_unlock_valid>
   29b42:	b960      	cbnz	r0, 29b5e <z_impl_k_poll+0x3c6>
   29b44:	4909      	ldr	r1, [pc, #36]	; (29b6c <z_impl_k_poll+0x3d4>)
   29b46:	2361      	movs	r3, #97	; 0x61
   29b48:	4a09      	ldr	r2, [pc, #36]	; (29b70 <z_impl_k_poll+0x3d8>)
   29b4a:	480a      	ldr	r0, [pc, #40]	; (29b74 <z_impl_k_poll+0x3dc>)
   29b4c:	f004 fd71 	bl	2e632 <printk>
   29b50:	4809      	ldr	r0, [pc, #36]	; (29b78 <z_impl_k_poll+0x3e0>)
   29b52:	f004 fd6e 	bl	2e632 <printk>
   29b56:	2161      	movs	r1, #97	; 0x61
   29b58:	4805      	ldr	r0, [pc, #20]	; (29b70 <z_impl_k_poll+0x3d8>)
   29b5a:	f004 fd77 	bl	2e64c <assert_post_action>
	__asm__ volatile(
   29b5e:	f387 8811 	msr	BASEPRI, r7
   29b62:	f3bf 8f6f 	isb	sy
	return swap_rc;
   29b66:	e69d      	b.n	298a4 <z_impl_k_poll+0x10c>
   29b68:	2002784c 	.word	0x2002784c
   29b6c:	00034974 	.word	0x00034974
   29b70:	0003491e 	.word	0x0003491e
   29b74:	0003452c 	.word	0x0003452c
   29b78:	0003498b 	.word	0x0003498b
   29b7c:	0003494a 	.word	0x0003494a
   29b80:	0003495f 	.word	0x0003495f

00029b84 <ocrypto_ecdsa_p256_public_key>:
   29b84:	b530      	push	{r4, r5, lr}
   29b86:	b099      	sub	sp, #100	; 0x64
   29b88:	4605      	mov	r5, r0
   29b8a:	4668      	mov	r0, sp
   29b8c:	f000 f8f2 	bl	29d74 <ocrypto_sc_p256_from32bytes>
   29b90:	4669      	mov	r1, sp
   29b92:	a808      	add	r0, sp, #32
   29b94:	f000 fae6 	bl	2a164 <ocrypto_curve_p256_scalarmult_base>
   29b98:	4604      	mov	r4, r0
   29b9a:	a908      	add	r1, sp, #32
   29b9c:	4628      	mov	r0, r5
   29b9e:	f000 fa21 	bl	29fe4 <ocrypto_curve_p256_to64bytes>
   29ba2:	4620      	mov	r0, r4
   29ba4:	b019      	add	sp, #100	; 0x64
   29ba6:	bd30      	pop	{r4, r5, pc}

00029ba8 <ocrypto_mod_p256_cneg>:
   29ba8:	b570      	push	{r4, r5, r6, lr}
   29baa:	b088      	sub	sp, #32
   29bac:	4604      	mov	r4, r0
   29bae:	460d      	mov	r5, r1
   29bb0:	4668      	mov	r0, sp
   29bb2:	2120      	movs	r1, #32
   29bb4:	4616      	mov	r6, r2
   29bb6:	f7e3 fc9a 	bl	d4ee <ocrypto_constant_time_fill_zero>
   29bba:	2300      	movs	r3, #0
   29bbc:	4629      	mov	r1, r5
   29bbe:	4620      	mov	r0, r4
   29bc0:	2220      	movs	r2, #32
   29bc2:	9300      	str	r3, [sp, #0]
   29bc4:	f7e3 fc8c 	bl	d4e0 <ocrypto_constant_time_copy>
   29bc8:	462a      	mov	r2, r5
   29bca:	4669      	mov	r1, sp
   29bcc:	4668      	mov	r0, sp
   29bce:	f7e3 fcd4 	bl	d57a <ocrypto_mod_p256_sub>
   29bd2:	4632      	mov	r2, r6
   29bd4:	4669      	mov	r1, sp
   29bd6:	4620      	mov	r0, r4
   29bd8:	f7e3 f9df 	bl	cf9a <ocrypto_bigint_cswap256>
   29bdc:	b008      	add	sp, #32
   29bde:	bd70      	pop	{r4, r5, r6, pc}

00029be0 <ocrypto_mod_p256_toBytes>:
   29be0:	69cb      	ldr	r3, [r1, #28]
   29be2:	ba1b      	rev	r3, r3
   29be4:	6003      	str	r3, [r0, #0]
   29be6:	698b      	ldr	r3, [r1, #24]
   29be8:	ba1b      	rev	r3, r3
   29bea:	6043      	str	r3, [r0, #4]
   29bec:	694b      	ldr	r3, [r1, #20]
   29bee:	ba1b      	rev	r3, r3
   29bf0:	6083      	str	r3, [r0, #8]
   29bf2:	690b      	ldr	r3, [r1, #16]
   29bf4:	ba1b      	rev	r3, r3
   29bf6:	60c3      	str	r3, [r0, #12]
   29bf8:	68cb      	ldr	r3, [r1, #12]
   29bfa:	ba1b      	rev	r3, r3
   29bfc:	6103      	str	r3, [r0, #16]
   29bfe:	688b      	ldr	r3, [r1, #8]
   29c00:	ba1b      	rev	r3, r3
   29c02:	6143      	str	r3, [r0, #20]
   29c04:	684b      	ldr	r3, [r1, #4]
   29c06:	ba1b      	rev	r3, r3
   29c08:	6183      	str	r3, [r0, #24]
   29c0a:	680b      	ldr	r3, [r1, #0]
   29c0c:	ba1b      	rev	r3, r3
   29c0e:	61c3      	str	r3, [r0, #28]
   29c10:	4770      	bx	lr
   29c12:	bf00      	nop

00029c14 <ocrypto_mod_p256_invert>:
   29c14:	b570      	push	{r4, r5, r6, lr}
   29c16:	460d      	mov	r5, r1
   29c18:	2405      	movs	r4, #5
   29c1a:	b098      	sub	sp, #96	; 0x60
   29c1c:	4606      	mov	r6, r0
   29c1e:	a810      	add	r0, sp, #64	; 0x40
   29c20:	f7e3 fcd8 	bl	d5d4 <ocrypto_mod_p256_square>
   29c24:	462a      	mov	r2, r5
   29c26:	a910      	add	r1, sp, #64	; 0x40
   29c28:	4668      	mov	r0, sp
   29c2a:	f7e3 fcd4 	bl	d5d6 <ocrypto_mod_p256_mul>
   29c2e:	4669      	mov	r1, sp
   29c30:	a810      	add	r0, sp, #64	; 0x40
   29c32:	f7e3 fccf 	bl	d5d4 <ocrypto_mod_p256_square>
   29c36:	a910      	add	r1, sp, #64	; 0x40
   29c38:	4608      	mov	r0, r1
   29c3a:	f7e3 fccb 	bl	d5d4 <ocrypto_mod_p256_square>
   29c3e:	466a      	mov	r2, sp
   29c40:	a910      	add	r1, sp, #64	; 0x40
   29c42:	a808      	add	r0, sp, #32
   29c44:	f7e3 fcc7 	bl	d5d6 <ocrypto_mod_p256_mul>
   29c48:	a908      	add	r1, sp, #32
   29c4a:	a810      	add	r0, sp, #64	; 0x40
   29c4c:	f7e3 fcc2 	bl	d5d4 <ocrypto_mod_p256_square>
   29c50:	a910      	add	r1, sp, #64	; 0x40
   29c52:	4608      	mov	r0, r1
   29c54:	f7e3 fcbe 	bl	d5d4 <ocrypto_mod_p256_square>
   29c58:	a910      	add	r1, sp, #64	; 0x40
   29c5a:	4608      	mov	r0, r1
   29c5c:	f7e3 fcba 	bl	d5d4 <ocrypto_mod_p256_square>
   29c60:	a910      	add	r1, sp, #64	; 0x40
   29c62:	4608      	mov	r0, r1
   29c64:	f7e3 fcb6 	bl	d5d4 <ocrypto_mod_p256_square>
   29c68:	a910      	add	r1, sp, #64	; 0x40
   29c6a:	aa08      	add	r2, sp, #32
   29c6c:	4608      	mov	r0, r1
   29c6e:	f7e3 fcb2 	bl	d5d6 <ocrypto_mod_p256_mul>
   29c72:	a910      	add	r1, sp, #64	; 0x40
   29c74:	4608      	mov	r0, r1
   29c76:	f7e3 fcad 	bl	d5d4 <ocrypto_mod_p256_square>
   29c7a:	a910      	add	r1, sp, #64	; 0x40
   29c7c:	4608      	mov	r0, r1
   29c7e:	f7e3 fca9 	bl	d5d4 <ocrypto_mod_p256_square>
   29c82:	a910      	add	r1, sp, #64	; 0x40
   29c84:	466a      	mov	r2, sp
   29c86:	a808      	add	r0, sp, #32
   29c88:	f7e3 fca5 	bl	d5d6 <ocrypto_mod_p256_mul>
   29c8c:	a908      	add	r1, sp, #32
   29c8e:	a810      	add	r0, sp, #64	; 0x40
   29c90:	f7e3 fca0 	bl	d5d4 <ocrypto_mod_p256_square>
   29c94:	a910      	add	r1, sp, #64	; 0x40
   29c96:	4608      	mov	r0, r1
   29c98:	f7e3 fc9c 	bl	d5d4 <ocrypto_mod_p256_square>
   29c9c:	3c01      	subs	r4, #1
   29c9e:	a910      	add	r1, sp, #64	; 0x40
   29ca0:	d1f5      	bne.n	29c8e <ocrypto_mod_p256_invert+0x7a>
   29ca2:	aa08      	add	r2, sp, #32
   29ca4:	4608      	mov	r0, r1
   29ca6:	f7e3 fc96 	bl	d5d6 <ocrypto_mod_p256_mul>
   29caa:	2405      	movs	r4, #5
   29cac:	a910      	add	r1, sp, #64	; 0x40
   29cae:	4608      	mov	r0, r1
   29cb0:	f7e3 fc90 	bl	d5d4 <ocrypto_mod_p256_square>
   29cb4:	a910      	add	r1, sp, #64	; 0x40
   29cb6:	4608      	mov	r0, r1
   29cb8:	f7e3 fc8c 	bl	d5d4 <ocrypto_mod_p256_square>
   29cbc:	3c01      	subs	r4, #1
   29cbe:	d1f5      	bne.n	29cac <ocrypto_mod_p256_invert+0x98>
   29cc0:	a910      	add	r1, sp, #64	; 0x40
   29cc2:	aa08      	add	r2, sp, #32
   29cc4:	4608      	mov	r0, r1
   29cc6:	f7e3 fc86 	bl	d5d6 <ocrypto_mod_p256_mul>
   29cca:	a910      	add	r1, sp, #64	; 0x40
   29ccc:	a808      	add	r0, sp, #32
   29cce:	f7e3 fc81 	bl	d5d4 <ocrypto_mod_p256_square>
   29cd2:	a908      	add	r1, sp, #32
   29cd4:	4608      	mov	r0, r1
   29cd6:	f7e3 fc7d 	bl	d5d4 <ocrypto_mod_p256_square>
   29cda:	a908      	add	r1, sp, #32
   29cdc:	466a      	mov	r2, sp
   29cde:	4668      	mov	r0, sp
   29ce0:	f7e3 fc79 	bl	d5d6 <ocrypto_mod_p256_mul>
   29ce4:	2410      	movs	r4, #16
   29ce6:	4669      	mov	r1, sp
   29ce8:	a810      	add	r0, sp, #64	; 0x40
   29cea:	f7e3 fc73 	bl	d5d4 <ocrypto_mod_p256_square>
   29cee:	a910      	add	r1, sp, #64	; 0x40
   29cf0:	4608      	mov	r0, r1
   29cf2:	f7e3 fc6f 	bl	d5d4 <ocrypto_mod_p256_square>
   29cf6:	3c01      	subs	r4, #1
   29cf8:	a910      	add	r1, sp, #64	; 0x40
   29cfa:	d1f5      	bne.n	29ce8 <ocrypto_mod_p256_invert+0xd4>
   29cfc:	462a      	mov	r2, r5
   29cfe:	4608      	mov	r0, r1
   29d00:	f7e3 fc69 	bl	d5d6 <ocrypto_mod_p256_mul>
   29d04:	2440      	movs	r4, #64	; 0x40
   29d06:	a910      	add	r1, sp, #64	; 0x40
   29d08:	4608      	mov	r0, r1
   29d0a:	f7e3 fc63 	bl	d5d4 <ocrypto_mod_p256_square>
   29d0e:	a910      	add	r1, sp, #64	; 0x40
   29d10:	4608      	mov	r0, r1
   29d12:	f7e3 fc5f 	bl	d5d4 <ocrypto_mod_p256_square>
   29d16:	3c01      	subs	r4, #1
   29d18:	d1f5      	bne.n	29d06 <ocrypto_mod_p256_invert+0xf2>
   29d1a:	a910      	add	r1, sp, #64	; 0x40
   29d1c:	466a      	mov	r2, sp
   29d1e:	4608      	mov	r0, r1
   29d20:	f7e3 fc59 	bl	d5d6 <ocrypto_mod_p256_mul>
   29d24:	2410      	movs	r4, #16
   29d26:	a910      	add	r1, sp, #64	; 0x40
   29d28:	4608      	mov	r0, r1
   29d2a:	f7e3 fc53 	bl	d5d4 <ocrypto_mod_p256_square>
   29d2e:	a910      	add	r1, sp, #64	; 0x40
   29d30:	4608      	mov	r0, r1
   29d32:	f7e3 fc4f 	bl	d5d4 <ocrypto_mod_p256_square>
   29d36:	3c01      	subs	r4, #1
   29d38:	d1f5      	bne.n	29d26 <ocrypto_mod_p256_invert+0x112>
   29d3a:	a910      	add	r1, sp, #64	; 0x40
   29d3c:	466a      	mov	r2, sp
   29d3e:	4608      	mov	r0, r1
   29d40:	f7e3 fc49 	bl	d5d6 <ocrypto_mod_p256_mul>
   29d44:	2410      	movs	r4, #16
   29d46:	a910      	add	r1, sp, #64	; 0x40
   29d48:	4608      	mov	r0, r1
   29d4a:	f7e3 fc43 	bl	d5d4 <ocrypto_mod_p256_square>
   29d4e:	a910      	add	r1, sp, #64	; 0x40
   29d50:	4608      	mov	r0, r1
   29d52:	f7e3 fc3f 	bl	d5d4 <ocrypto_mod_p256_square>
   29d56:	3c01      	subs	r4, #1
   29d58:	d1f5      	bne.n	29d46 <ocrypto_mod_p256_invert+0x132>
   29d5a:	a910      	add	r1, sp, #64	; 0x40
   29d5c:	aa08      	add	r2, sp, #32
   29d5e:	4608      	mov	r0, r1
   29d60:	f7e3 fc39 	bl	d5d6 <ocrypto_mod_p256_mul>
   29d64:	462a      	mov	r2, r5
   29d66:	a910      	add	r1, sp, #64	; 0x40
   29d68:	4630      	mov	r0, r6
   29d6a:	f7e3 fc34 	bl	d5d6 <ocrypto_mod_p256_mul>
   29d6e:	b018      	add	sp, #96	; 0x60
   29d70:	bd70      	pop	{r4, r5, r6, pc}
   29d72:	bf00      	nop

00029d74 <ocrypto_sc_p256_from32bytes>:
   29d74:	b538      	push	{r3, r4, r5, lr}
   29d76:	460b      	mov	r3, r1
   29d78:	680a      	ldr	r2, [r1, #0]
   29d7a:	4d12      	ldr	r5, [pc, #72]	; (29dc4 <ocrypto_sc_p256_from32bytes+0x50>)
   29d7c:	ba12      	rev	r2, r2
   29d7e:	61c2      	str	r2, [r0, #28]
   29d80:	684a      	ldr	r2, [r1, #4]
   29d82:	4601      	mov	r1, r0
   29d84:	ba12      	rev	r2, r2
   29d86:	6182      	str	r2, [r0, #24]
   29d88:	689a      	ldr	r2, [r3, #8]
   29d8a:	4604      	mov	r4, r0
   29d8c:	ba12      	rev	r2, r2
   29d8e:	6142      	str	r2, [r0, #20]
   29d90:	68da      	ldr	r2, [r3, #12]
   29d92:	ba12      	rev	r2, r2
   29d94:	6102      	str	r2, [r0, #16]
   29d96:	691a      	ldr	r2, [r3, #16]
   29d98:	ba12      	rev	r2, r2
   29d9a:	60c2      	str	r2, [r0, #12]
   29d9c:	695a      	ldr	r2, [r3, #20]
   29d9e:	ba12      	rev	r2, r2
   29da0:	6082      	str	r2, [r0, #8]
   29da2:	699a      	ldr	r2, [r3, #24]
   29da4:	ba12      	rev	r2, r2
   29da6:	6042      	str	r2, [r0, #4]
   29da8:	69db      	ldr	r3, [r3, #28]
   29daa:	462a      	mov	r2, r5
   29dac:	ba1b      	rev	r3, r3
   29dae:	6003      	str	r3, [r0, #0]
   29db0:	f7e3 f868 	bl	ce84 <ocrypto_bigint_sub256>
   29db4:	4629      	mov	r1, r5
   29db6:	4602      	mov	r2, r0
   29db8:	4620      	mov	r0, r4
   29dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29dbe:	f7e3 b881 	b.w	cec4 <ocrypto_bigint_cadd256>
   29dc2:	bf00      	nop
   29dc4:	00033c0c 	.word	0x00033c0c

00029dc8 <p256_zdblu>:
   29dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29dcc:	4607      	mov	r7, r0
   29dce:	460d      	mov	r5, r1
   29dd0:	4690      	mov	r8, r2
   29dd2:	b088      	sub	sp, #32
   29dd4:	f102 0120 	add.w	r1, r2, #32
   29dd8:	4668      	mov	r0, sp
   29dda:	f107 0620 	add.w	r6, r7, #32
   29dde:	f7e3 fbf9 	bl	d5d4 <ocrypto_mod_p256_square>
   29de2:	466a      	mov	r2, sp
   29de4:	4669      	mov	r1, sp
   29de6:	4668      	mov	r0, sp
   29de8:	f7e3 fb88 	bl	d4fc <ocrypto_mod_p256_add>
   29dec:	4630      	mov	r0, r6
   29dee:	4669      	mov	r1, sp
   29df0:	f7e3 fbf0 	bl	d5d4 <ocrypto_mod_p256_square>
   29df4:	4632      	mov	r2, r6
   29df6:	4631      	mov	r1, r6
   29df8:	4630      	mov	r0, r6
   29dfa:	f105 0420 	add.w	r4, r5, #32
   29dfe:	f7e3 fb7d 	bl	d4fc <ocrypto_mod_p256_add>
   29e02:	466a      	mov	r2, sp
   29e04:	4669      	mov	r1, sp
   29e06:	4668      	mov	r0, sp
   29e08:	f7e3 fb78 	bl	d4fc <ocrypto_mod_p256_add>
   29e0c:	4620      	mov	r0, r4
   29e0e:	4641      	mov	r1, r8
   29e10:	f7e3 fbe0 	bl	d5d4 <ocrypto_mod_p256_square>
   29e14:	466a      	mov	r2, sp
   29e16:	4641      	mov	r1, r8
   29e18:	4638      	mov	r0, r7
   29e1a:	f7e3 fbdc 	bl	d5d6 <ocrypto_mod_p256_mul>
   29e1e:	4622      	mov	r2, r4
   29e20:	4621      	mov	r1, r4
   29e22:	4668      	mov	r0, sp
   29e24:	f7e3 fb6a 	bl	d4fc <ocrypto_mod_p256_add>
   29e28:	4622      	mov	r2, r4
   29e2a:	4669      	mov	r1, sp
   29e2c:	4668      	mov	r0, sp
   29e2e:	f7e3 fb65 	bl	d4fc <ocrypto_mod_p256_add>
   29e32:	4669      	mov	r1, sp
   29e34:	4668      	mov	r0, sp
   29e36:	4a11      	ldr	r2, [pc, #68]	; (29e7c <p256_zdblu+0xb4>)
   29e38:	f7e3 fb60 	bl	d4fc <ocrypto_mod_p256_add>
   29e3c:	4669      	mov	r1, sp
   29e3e:	4628      	mov	r0, r5
   29e40:	f7e3 fbc8 	bl	d5d4 <ocrypto_mod_p256_square>
   29e44:	463a      	mov	r2, r7
   29e46:	4629      	mov	r1, r5
   29e48:	4628      	mov	r0, r5
   29e4a:	f7e3 fb96 	bl	d57a <ocrypto_mod_p256_sub>
   29e4e:	463a      	mov	r2, r7
   29e50:	4629      	mov	r1, r5
   29e52:	4628      	mov	r0, r5
   29e54:	f7e3 fb91 	bl	d57a <ocrypto_mod_p256_sub>
   29e58:	462a      	mov	r2, r5
   29e5a:	4639      	mov	r1, r7
   29e5c:	4620      	mov	r0, r4
   29e5e:	f7e3 fb8c 	bl	d57a <ocrypto_mod_p256_sub>
   29e62:	466a      	mov	r2, sp
   29e64:	4621      	mov	r1, r4
   29e66:	4620      	mov	r0, r4
   29e68:	f7e3 fbb5 	bl	d5d6 <ocrypto_mod_p256_mul>
   29e6c:	4632      	mov	r2, r6
   29e6e:	4621      	mov	r1, r4
   29e70:	4620      	mov	r0, r4
   29e72:	f7e3 fb82 	bl	d57a <ocrypto_mod_p256_sub>
   29e76:	b008      	add	sp, #32
   29e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29e7c:	00033cac 	.word	0x00033cac

00029e80 <p256_zaddc>:
   29e80:	b5f0      	push	{r4, r5, r6, r7, lr}
   29e82:	4604      	mov	r4, r0
   29e84:	460e      	mov	r6, r1
   29e86:	b099      	sub	sp, #100	; 0x64
   29e88:	460a      	mov	r2, r1
   29e8a:	4601      	mov	r1, r0
   29e8c:	4668      	mov	r0, sp
   29e8e:	f7e3 fb74 	bl	d57a <ocrypto_mod_p256_sub>
   29e92:	4669      	mov	r1, sp
   29e94:	4668      	mov	r0, sp
   29e96:	f7e3 fb9d 	bl	d5d4 <ocrypto_mod_p256_square>
   29e9a:	466a      	mov	r2, sp
   29e9c:	4621      	mov	r1, r4
   29e9e:	a808      	add	r0, sp, #32
   29ea0:	f106 0520 	add.w	r5, r6, #32
   29ea4:	f104 0720 	add.w	r7, r4, #32
   29ea8:	f7e3 fb95 	bl	d5d6 <ocrypto_mod_p256_mul>
   29eac:	466a      	mov	r2, sp
   29eae:	4631      	mov	r1, r6
   29eb0:	4668      	mov	r0, sp
   29eb2:	f7e3 fb90 	bl	d5d6 <ocrypto_mod_p256_mul>
   29eb6:	4639      	mov	r1, r7
   29eb8:	462a      	mov	r2, r5
   29eba:	a810      	add	r0, sp, #64	; 0x40
   29ebc:	f7e3 fb1e 	bl	d4fc <ocrypto_mod_p256_add>
   29ec0:	462a      	mov	r2, r5
   29ec2:	4639      	mov	r1, r7
   29ec4:	4628      	mov	r0, r5
   29ec6:	f7e3 fb58 	bl	d57a <ocrypto_mod_p256_sub>
   29eca:	4629      	mov	r1, r5
   29ecc:	4630      	mov	r0, r6
   29ece:	f7e3 fb81 	bl	d5d4 <ocrypto_mod_p256_square>
   29ed2:	466a      	mov	r2, sp
   29ed4:	a908      	add	r1, sp, #32
   29ed6:	4620      	mov	r0, r4
   29ed8:	f7e3 fb10 	bl	d4fc <ocrypto_mod_p256_add>
   29edc:	4622      	mov	r2, r4
   29ede:	4631      	mov	r1, r6
   29ee0:	4630      	mov	r0, r6
   29ee2:	f7e3 fb4a 	bl	d57a <ocrypto_mod_p256_sub>
   29ee6:	466a      	mov	r2, sp
   29ee8:	a908      	add	r1, sp, #32
   29eea:	4668      	mov	r0, sp
   29eec:	f7e3 fb45 	bl	d57a <ocrypto_mod_p256_sub>
   29ef0:	466a      	mov	r2, sp
   29ef2:	4639      	mov	r1, r7
   29ef4:	4638      	mov	r0, r7
   29ef6:	f7e3 fb6e 	bl	d5d6 <ocrypto_mod_p256_mul>
   29efa:	4632      	mov	r2, r6
   29efc:	a908      	add	r1, sp, #32
   29efe:	4668      	mov	r0, sp
   29f00:	f7e3 fb3b 	bl	d57a <ocrypto_mod_p256_sub>
   29f04:	466a      	mov	r2, sp
   29f06:	4629      	mov	r1, r5
   29f08:	4628      	mov	r0, r5
   29f0a:	f7e3 fb64 	bl	d5d6 <ocrypto_mod_p256_mul>
   29f0e:	463a      	mov	r2, r7
   29f10:	4629      	mov	r1, r5
   29f12:	4628      	mov	r0, r5
   29f14:	f7e3 fb31 	bl	d57a <ocrypto_mod_p256_sub>
   29f18:	a910      	add	r1, sp, #64	; 0x40
   29f1a:	4668      	mov	r0, sp
   29f1c:	f7e3 fb5a 	bl	d5d4 <ocrypto_mod_p256_square>
   29f20:	4622      	mov	r2, r4
   29f22:	4669      	mov	r1, sp
   29f24:	4620      	mov	r0, r4
   29f26:	f7e3 fb28 	bl	d57a <ocrypto_mod_p256_sub>
   29f2a:	a908      	add	r1, sp, #32
   29f2c:	4622      	mov	r2, r4
   29f2e:	4608      	mov	r0, r1
   29f30:	f7e3 fb23 	bl	d57a <ocrypto_mod_p256_sub>
   29f34:	a910      	add	r1, sp, #64	; 0x40
   29f36:	aa08      	add	r2, sp, #32
   29f38:	4608      	mov	r0, r1
   29f3a:	f7e3 fb4c 	bl	d5d6 <ocrypto_mod_p256_mul>
   29f3e:	463a      	mov	r2, r7
   29f40:	a910      	add	r1, sp, #64	; 0x40
   29f42:	4638      	mov	r0, r7
   29f44:	f7e3 fb19 	bl	d57a <ocrypto_mod_p256_sub>
   29f48:	b019      	add	sp, #100	; 0x64
   29f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029f4c <p256_zaddu>:
   29f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29f50:	460c      	mov	r4, r1
   29f52:	4605      	mov	r5, r0
   29f54:	4690      	mov	r8, r2
   29f56:	b088      	sub	sp, #32
   29f58:	4622      	mov	r2, r4
   29f5a:	4601      	mov	r1, r0
   29f5c:	4668      	mov	r0, sp
   29f5e:	f7e3 fb0c 	bl	d57a <ocrypto_mod_p256_sub>
   29f62:	4669      	mov	r1, sp
   29f64:	4668      	mov	r0, sp
   29f66:	f7e3 fb35 	bl	d5d4 <ocrypto_mod_p256_square>
   29f6a:	466a      	mov	r2, sp
   29f6c:	4629      	mov	r1, r5
   29f6e:	4628      	mov	r0, r5
   29f70:	f104 0620 	add.w	r6, r4, #32
   29f74:	f7e3 fb2f 	bl	d5d6 <ocrypto_mod_p256_mul>
   29f78:	f105 0720 	add.w	r7, r5, #32
   29f7c:	466a      	mov	r2, sp
   29f7e:	4621      	mov	r1, r4
   29f80:	4668      	mov	r0, sp
   29f82:	f7e3 fb28 	bl	d5d6 <ocrypto_mod_p256_mul>
   29f86:	4632      	mov	r2, r6
   29f88:	4630      	mov	r0, r6
   29f8a:	4639      	mov	r1, r7
   29f8c:	f7e3 faf5 	bl	d57a <ocrypto_mod_p256_sub>
   29f90:	4631      	mov	r1, r6
   29f92:	4620      	mov	r0, r4
   29f94:	f7e3 fb1e 	bl	d5d4 <ocrypto_mod_p256_square>
   29f98:	462a      	mov	r2, r5
   29f9a:	4621      	mov	r1, r4
   29f9c:	4620      	mov	r0, r4
   29f9e:	f7e3 faec 	bl	d57a <ocrypto_mod_p256_sub>
   29fa2:	466a      	mov	r2, sp
   29fa4:	4621      	mov	r1, r4
   29fa6:	4620      	mov	r0, r4
   29fa8:	f7e3 fae7 	bl	d57a <ocrypto_mod_p256_sub>
   29fac:	466a      	mov	r2, sp
   29fae:	4629      	mov	r1, r5
   29fb0:	4640      	mov	r0, r8
   29fb2:	f7e3 fae2 	bl	d57a <ocrypto_mod_p256_sub>
   29fb6:	4642      	mov	r2, r8
   29fb8:	4639      	mov	r1, r7
   29fba:	4638      	mov	r0, r7
   29fbc:	f7e3 fb0b 	bl	d5d6 <ocrypto_mod_p256_mul>
   29fc0:	4622      	mov	r2, r4
   29fc2:	4629      	mov	r1, r5
   29fc4:	4668      	mov	r0, sp
   29fc6:	f7e3 fad8 	bl	d57a <ocrypto_mod_p256_sub>
   29fca:	466a      	mov	r2, sp
   29fcc:	4631      	mov	r1, r6
   29fce:	4630      	mov	r0, r6
   29fd0:	f7e3 fb01 	bl	d5d6 <ocrypto_mod_p256_mul>
   29fd4:	463a      	mov	r2, r7
   29fd6:	4631      	mov	r1, r6
   29fd8:	4630      	mov	r0, r6
   29fda:	f7e3 face 	bl	d57a <ocrypto_mod_p256_sub>
   29fde:	b008      	add	sp, #32
   29fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029fe4 <ocrypto_curve_p256_to64bytes>:
   29fe4:	b538      	push	{r3, r4, r5, lr}
   29fe6:	4604      	mov	r4, r0
   29fe8:	460d      	mov	r5, r1
   29fea:	f7ff fdf9 	bl	29be0 <ocrypto_mod_p256_toBytes>
   29fee:	f105 0120 	add.w	r1, r5, #32
   29ff2:	f104 0020 	add.w	r0, r4, #32
   29ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29ffa:	f7ff bdf1 	b.w	29be0 <ocrypto_mod_p256_toBytes>
   29ffe:	bf00      	nop

0002a000 <ocrypto_curve_p256_scalarmult>:
   2a000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a004:	b0b8      	sub	sp, #224	; 0xe0
   2a006:	468a      	mov	sl, r1
   2a008:	4681      	mov	r9, r0
   2a00a:	4611      	mov	r1, r2
   2a00c:	a810      	add	r0, sp, #64	; 0x40
   2a00e:	4a51      	ldr	r2, [pc, #324]	; (2a154 <ocrypto_curve_p256_scalarmult+0x154>)
   2a010:	f7e2 ff38 	bl	ce84 <ocrypto_bigint_sub256>
   2a014:	4950      	ldr	r1, [pc, #320]	; (2a158 <ocrypto_curve_p256_scalarmult+0x158>)
   2a016:	4602      	mov	r2, r0
   2a018:	a810      	add	r0, sp, #64	; 0x40
   2a01a:	f7e2 ff53 	bl	cec4 <ocrypto_bigint_cadd256>
   2a01e:	4680      	mov	r8, r0
   2a020:	9f17      	ldr	r7, [sp, #92]	; 0x5c
   2a022:	494c      	ldr	r1, [pc, #304]	; (2a154 <ocrypto_curve_p256_scalarmult+0x154>)
   2a024:	ea08 77d7 	and.w	r7, r8, r7, lsr #31
   2a028:	f1c7 0201 	rsb	r2, r7, #1
   2a02c:	a810      	add	r0, sp, #64	; 0x40
   2a02e:	f7e2 ff49 	bl	cec4 <ocrypto_bigint_cadd256>
   2a032:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   2a034:	4652      	mov	r2, sl
   2a036:	43ed      	mvns	r5, r5
   2a038:	a928      	add	r1, sp, #160	; 0xa0
   2a03a:	a818      	add	r0, sp, #96	; 0x60
   2a03c:	f7ff fec4 	bl	29dc8 <p256_zdblu>
   2a040:	0fed      	lsrs	r5, r5, #31
   2a042:	a920      	add	r1, sp, #128	; 0x80
   2a044:	f1c5 0201 	rsb	r2, r5, #1
   2a048:	4608      	mov	r0, r1
   2a04a:	f7ff fdad 	bl	29ba8 <ocrypto_mod_p256_cneg>
   2a04e:	26fe      	movs	r6, #254	; 0xfe
   2a050:	f1c8 0801 	rsb	r8, r8, #1
   2a054:	466a      	mov	r2, sp
   2a056:	a918      	add	r1, sp, #96	; 0x60
   2a058:	a828      	add	r0, sp, #160	; 0xa0
   2a05a:	f7ff ff77 	bl	29f4c <p256_zaddu>
   2a05e:	1173      	asrs	r3, r6, #5
   2a060:	aa38      	add	r2, sp, #224	; 0xe0
   2a062:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2a066:	f853 4ca0 	ldr.w	r4, [r3, #-160]
   2a06a:	f006 031f 	and.w	r3, r6, #31
   2a06e:	40dc      	lsrs	r4, r3
   2a070:	f004 0401 	and.w	r4, r4, #1
   2a074:	4065      	eors	r5, r4
   2a076:	462a      	mov	r2, r5
   2a078:	a928      	add	r1, sp, #160	; 0xa0
   2a07a:	a818      	add	r0, sp, #96	; 0x60
   2a07c:	f7e2 ff8d 	bl	cf9a <ocrypto_bigint_cswap256>
   2a080:	462a      	mov	r2, r5
   2a082:	a930      	add	r1, sp, #192	; 0xc0
   2a084:	a820      	add	r0, sp, #128	; 0x80
   2a086:	f7e2 ff88 	bl	cf9a <ocrypto_bigint_cswap256>
   2a08a:	3e01      	subs	r6, #1
   2a08c:	a928      	add	r1, sp, #160	; 0xa0
   2a08e:	a818      	add	r0, sp, #96	; 0x60
   2a090:	f7ff fef6 	bl	29e80 <p256_zaddc>
   2a094:	1c73      	adds	r3, r6, #1
   2a096:	4625      	mov	r5, r4
   2a098:	d1dc      	bne.n	2a054 <ocrypto_curve_p256_scalarmult+0x54>
   2a09a:	f1c4 0201 	rsb	r2, r4, #1
   2a09e:	a808      	add	r0, sp, #32
   2a0a0:	a920      	add	r1, sp, #128	; 0x80
   2a0a2:	f7ff fd81 	bl	29ba8 <ocrypto_mod_p256_cneg>
   2a0a6:	407d      	eors	r5, r7
   2a0a8:	466a      	mov	r2, sp
   2a0aa:	a918      	add	r1, sp, #96	; 0x60
   2a0ac:	a828      	add	r0, sp, #160	; 0xa0
   2a0ae:	f7ff ff4d 	bl	29f4c <p256_zaddu>
   2a0b2:	a928      	add	r1, sp, #160	; 0xa0
   2a0b4:	462a      	mov	r2, r5
   2a0b6:	a818      	add	r0, sp, #96	; 0x60
   2a0b8:	f7e2 ff6f 	bl	cf9a <ocrypto_bigint_cswap256>
   2a0bc:	462a      	mov	r2, r5
   2a0be:	a930      	add	r1, sp, #192	; 0xc0
   2a0c0:	a820      	add	r0, sp, #128	; 0x80
   2a0c2:	f7e2 ff6a 	bl	cf9a <ocrypto_bigint_cswap256>
   2a0c6:	a908      	add	r1, sp, #32
   2a0c8:	466a      	mov	r2, sp
   2a0ca:	4608      	mov	r0, r1
   2a0cc:	f7e3 fa83 	bl	d5d6 <ocrypto_mod_p256_mul>
   2a0d0:	a908      	add	r1, sp, #32
   2a0d2:	4608      	mov	r0, r1
   2a0d4:	f7ff fd9e 	bl	29c14 <ocrypto_mod_p256_invert>
   2a0d8:	a908      	add	r1, sp, #32
   2a0da:	f109 0420 	add.w	r4, r9, #32
   2a0de:	f10a 0220 	add.w	r2, sl, #32
   2a0e2:	4608      	mov	r0, r1
   2a0e4:	f7e3 fa77 	bl	d5d6 <ocrypto_mod_p256_mul>
   2a0e8:	a920      	add	r1, sp, #128	; 0x80
   2a0ea:	aa08      	add	r2, sp, #32
   2a0ec:	4620      	mov	r0, r4
   2a0ee:	f7e3 fa72 	bl	d5d6 <ocrypto_mod_p256_mul>
   2a0f2:	aa08      	add	r2, sp, #32
   2a0f4:	a918      	add	r1, sp, #96	; 0x60
   2a0f6:	4668      	mov	r0, sp
   2a0f8:	f7e3 fa6d 	bl	d5d6 <ocrypto_mod_p256_mul>
   2a0fc:	4669      	mov	r1, sp
   2a0fe:	4668      	mov	r0, sp
   2a100:	f7e3 fa68 	bl	d5d4 <ocrypto_mod_p256_square>
   2a104:	aa18      	add	r2, sp, #96	; 0x60
   2a106:	4669      	mov	r1, sp
   2a108:	a808      	add	r0, sp, #32
   2a10a:	f7e3 fa64 	bl	d5d6 <ocrypto_mod_p256_mul>
   2a10e:	4621      	mov	r1, r4
   2a110:	4668      	mov	r0, sp
   2a112:	f7e3 fa5f 	bl	d5d4 <ocrypto_mod_p256_square>
   2a116:	aa08      	add	r2, sp, #32
   2a118:	4669      	mov	r1, sp
   2a11a:	4610      	mov	r0, r2
   2a11c:	f7e3 fa2d 	bl	d57a <ocrypto_mod_p256_sub>
   2a120:	a908      	add	r1, sp, #32
   2a122:	4a0e      	ldr	r2, [pc, #56]	; (2a15c <ocrypto_curve_p256_scalarmult+0x15c>)
   2a124:	4668      	mov	r0, sp
   2a126:	f7e3 fa28 	bl	d57a <ocrypto_mod_p256_sub>
   2a12a:	4620      	mov	r0, r4
   2a12c:	2120      	movs	r1, #32
   2a12e:	f7e3 f9ca 	bl	d4c6 <ocrypto_constant_time_is_zero>
   2a132:	a908      	add	r1, sp, #32
   2a134:	4243      	negs	r3, r0
   2a136:	4602      	mov	r2, r0
   2a138:	4668      	mov	r0, sp
   2a13a:	ea43 0808 	orr.w	r8, r3, r8
   2a13e:	f7e2 ff2c 	bl	cf9a <ocrypto_bigint_cswap256>
   2a142:	4648      	mov	r0, r9
   2a144:	4669      	mov	r1, sp
   2a146:	4a06      	ldr	r2, [pc, #24]	; (2a160 <ocrypto_curve_p256_scalarmult+0x160>)
   2a148:	f7e3 fa45 	bl	d5d6 <ocrypto_mod_p256_mul>
   2a14c:	4640      	mov	r0, r8
   2a14e:	b038      	add	sp, #224	; 0xe0
   2a150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a154:	00033cec 	.word	0x00033cec
   2a158:	00033c6c 	.word	0x00033c6c
   2a15c:	00033ccc 	.word	0x00033ccc
   2a160:	00033c8c 	.word	0x00033c8c

0002a164 <ocrypto_curve_p256_scalarmult_base>:
   2a164:	460a      	mov	r2, r1
   2a166:	4901      	ldr	r1, [pc, #4]	; (2a16c <ocrypto_curve_p256_scalarmult_base+0x8>)
   2a168:	f7ff bf4a 	b.w	2a000 <ocrypto_curve_p256_scalarmult>
   2a16c:	00033c2c 	.word	0x00033c2c

0002a170 <__assert_func>:
   2a170:	4c0a      	ldr	r4, [pc, #40]	; (2a19c <__assert_func+0x2c>)
   2a172:	461d      	mov	r5, r3
   2a174:	4606      	mov	r6, r0
   2a176:	6823      	ldr	r3, [r4, #0]
   2a178:	b500      	push	{lr}
   2a17a:	68d8      	ldr	r0, [r3, #12]
   2a17c:	b085      	sub	sp, #20
   2a17e:	b152      	cbz	r2, 2a196 <__assert_func+0x26>
   2a180:	4c07      	ldr	r4, [pc, #28]	; (2a1a0 <__assert_func+0x30>)
   2a182:	9202      	str	r2, [sp, #8]
   2a184:	4633      	mov	r3, r6
   2a186:	462a      	mov	r2, r5
   2a188:	9100      	str	r1, [sp, #0]
   2a18a:	9401      	str	r4, [sp, #4]
   2a18c:	4905      	ldr	r1, [pc, #20]	; (2a1a4 <__assert_func+0x34>)
   2a18e:	f000 f811 	bl	2a1b4 <fiprintf>
   2a192:	f002 f939 	bl	2c408 <abort>
   2a196:	4c04      	ldr	r4, [pc, #16]	; (2a1a8 <__assert_func+0x38>)
   2a198:	4622      	mov	r2, r4
   2a19a:	e7f2      	b.n	2a182 <__assert_func+0x12>
   2a19c:	2002d888 	.word	0x2002d888
   2a1a0:	00033d0c 	.word	0x00033d0c
   2a1a4:	00033d1c 	.word	0x00033d1c
   2a1a8:	0003378c 	.word	0x0003378c

0002a1ac <atoi>:
   2a1ac:	220a      	movs	r2, #10
   2a1ae:	2100      	movs	r1, #0
   2a1b0:	f001 b920 	b.w	2b3f4 <strtol>

0002a1b4 <fiprintf>:
   2a1b4:	b40e      	push	{r1, r2, r3}
   2a1b6:	b510      	push	{r4, lr}
   2a1b8:	b083      	sub	sp, #12
   2a1ba:	4b07      	ldr	r3, [pc, #28]	; (2a1d8 <fiprintf+0x24>)
   2a1bc:	4601      	mov	r1, r0
   2a1be:	ac05      	add	r4, sp, #20
   2a1c0:	6818      	ldr	r0, [r3, #0]
   2a1c2:	f854 2b04 	ldr.w	r2, [r4], #4
   2a1c6:	4623      	mov	r3, r4
   2a1c8:	9401      	str	r4, [sp, #4]
   2a1ca:	f001 f963 	bl	2b494 <_vfiprintf_r>
   2a1ce:	b003      	add	sp, #12
   2a1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a1d4:	b003      	add	sp, #12
   2a1d6:	4770      	bx	lr
   2a1d8:	2002d888 	.word	0x2002d888

0002a1dc <__locale_mb_cur_max>:
   2a1dc:	4b04      	ldr	r3, [pc, #16]	; (2a1f0 <__locale_mb_cur_max+0x14>)
   2a1de:	4a05      	ldr	r2, [pc, #20]	; (2a1f4 <__locale_mb_cur_max+0x18>)
   2a1e0:	681b      	ldr	r3, [r3, #0]
   2a1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2a1e4:	2b00      	cmp	r3, #0
   2a1e6:	bf08      	it	eq
   2a1e8:	4613      	moveq	r3, r2
   2a1ea:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   2a1ee:	4770      	bx	lr
   2a1f0:	2002d888 	.word	0x2002d888
   2a1f4:	2002d88c 	.word	0x2002d88c

0002a1f8 <__locale_ctype_ptr_l>:
   2a1f8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2a1fc:	4770      	bx	lr
   2a1fe:	bf00      	nop

0002a200 <__locale_ctype_ptr>:
   2a200:	4b04      	ldr	r3, [pc, #16]	; (2a214 <__locale_ctype_ptr+0x14>)
   2a202:	4a05      	ldr	r2, [pc, #20]	; (2a218 <__locale_ctype_ptr+0x18>)
   2a204:	681b      	ldr	r3, [r3, #0]
   2a206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2a208:	2b00      	cmp	r3, #0
   2a20a:	bf08      	it	eq
   2a20c:	4613      	moveq	r3, r2
   2a20e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   2a212:	4770      	bx	lr
   2a214:	2002d888 	.word	0x2002d888
   2a218:	2002d88c 	.word	0x2002d88c

0002a21c <malloc>:
   2a21c:	4b02      	ldr	r3, [pc, #8]	; (2a228 <malloc+0xc>)
   2a21e:	4601      	mov	r1, r0
   2a220:	6818      	ldr	r0, [r3, #0]
   2a222:	f000 b80b 	b.w	2a23c <_malloc_r>
   2a226:	bf00      	nop
   2a228:	2002d888 	.word	0x2002d888

0002a22c <free>:
   2a22c:	4b02      	ldr	r3, [pc, #8]	; (2a238 <free+0xc>)
   2a22e:	4601      	mov	r1, r0
   2a230:	6818      	ldr	r0, [r3, #0]
   2a232:	f002 bbbd 	b.w	2c9b0 <_free_r>
   2a236:	bf00      	nop
   2a238:	2002d888 	.word	0x2002d888

0002a23c <_malloc_r>:
   2a23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a240:	f101 050b 	add.w	r5, r1, #11
   2a244:	b083      	sub	sp, #12
   2a246:	4606      	mov	r6, r0
   2a248:	2d16      	cmp	r5, #22
   2a24a:	d824      	bhi.n	2a296 <_malloc_r+0x5a>
   2a24c:	2910      	cmp	r1, #16
   2a24e:	f200 80d1 	bhi.w	2a3f4 <_malloc_r+0x1b8>
   2a252:	f000 fb91 	bl	2a978 <__malloc_lock>
   2a256:	2510      	movs	r5, #16
   2a258:	2218      	movs	r2, #24
   2a25a:	2402      	movs	r4, #2
   2a25c:	4fca      	ldr	r7, [pc, #808]	; (2a588 <_malloc_r+0x34c>)
   2a25e:	443a      	add	r2, r7
   2a260:	6853      	ldr	r3, [r2, #4]
   2a262:	f1a2 0108 	sub.w	r1, r2, #8
   2a266:	428b      	cmp	r3, r1
   2a268:	f000 8187 	beq.w	2a57a <_malloc_r+0x33e>
   2a26c:	685a      	ldr	r2, [r3, #4]
   2a26e:	f103 0908 	add.w	r9, r3, #8
   2a272:	68d9      	ldr	r1, [r3, #12]
   2a274:	4630      	mov	r0, r6
   2a276:	f022 0203 	bic.w	r2, r2, #3
   2a27a:	689d      	ldr	r5, [r3, #8]
   2a27c:	4413      	add	r3, r2
   2a27e:	60e9      	str	r1, [r5, #12]
   2a280:	608d      	str	r5, [r1, #8]
   2a282:	685a      	ldr	r2, [r3, #4]
   2a284:	f042 0201 	orr.w	r2, r2, #1
   2a288:	605a      	str	r2, [r3, #4]
   2a28a:	f000 fb7b 	bl	2a984 <__malloc_unlock>
   2a28e:	4648      	mov	r0, r9
   2a290:	b003      	add	sp, #12
   2a292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a296:	f035 0507 	bics.w	r5, r5, #7
   2a29a:	f100 80ab 	bmi.w	2a3f4 <_malloc_r+0x1b8>
   2a29e:	42a9      	cmp	r1, r5
   2a2a0:	f200 80a8 	bhi.w	2a3f4 <_malloc_r+0x1b8>
   2a2a4:	f000 fb68 	bl	2a978 <__malloc_lock>
   2a2a8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   2a2ac:	f0c0 8192 	bcc.w	2a5d4 <_malloc_r+0x398>
   2a2b0:	0a6b      	lsrs	r3, r5, #9
   2a2b2:	d00b      	beq.n	2a2cc <_malloc_r+0x90>
   2a2b4:	2b04      	cmp	r3, #4
   2a2b6:	f240 8096 	bls.w	2a3e6 <_malloc_r+0x1aa>
   2a2ba:	2b14      	cmp	r3, #20
   2a2bc:	f200 81c7 	bhi.w	2a64e <_malloc_r+0x412>
   2a2c0:	f103 045c 	add.w	r4, r3, #92	; 0x5c
   2a2c4:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   2a2c8:	00e3      	lsls	r3, r4, #3
   2a2ca:	e004      	b.n	2a2d6 <_malloc_r+0x9a>
   2a2cc:	f44f 7300 	mov.w	r3, #512	; 0x200
   2a2d0:	2440      	movs	r4, #64	; 0x40
   2a2d2:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   2a2d6:	4fac      	ldr	r7, [pc, #688]	; (2a588 <_malloc_r+0x34c>)
   2a2d8:	443b      	add	r3, r7
   2a2da:	f1a3 0008 	sub.w	r0, r3, #8
   2a2de:	685b      	ldr	r3, [r3, #4]
   2a2e0:	4298      	cmp	r0, r3
   2a2e2:	d106      	bne.n	2a2f2 <_malloc_r+0xb6>
   2a2e4:	e00c      	b.n	2a300 <_malloc_r+0xc4>
   2a2e6:	2900      	cmp	r1, #0
   2a2e8:	f280 8135 	bge.w	2a556 <_malloc_r+0x31a>
   2a2ec:	68db      	ldr	r3, [r3, #12]
   2a2ee:	4298      	cmp	r0, r3
   2a2f0:	d006      	beq.n	2a300 <_malloc_r+0xc4>
   2a2f2:	685a      	ldr	r2, [r3, #4]
   2a2f4:	f022 0203 	bic.w	r2, r2, #3
   2a2f8:	1b51      	subs	r1, r2, r5
   2a2fa:	290f      	cmp	r1, #15
   2a2fc:	ddf3      	ble.n	2a2e6 <_malloc_r+0xaa>
   2a2fe:	4664      	mov	r4, ip
   2a300:	693a      	ldr	r2, [r7, #16]
   2a302:	f8df c29c 	ldr.w	ip, [pc, #668]	; 2a5a0 <_malloc_r+0x364>
   2a306:	4562      	cmp	r2, ip
   2a308:	d07c      	beq.n	2a404 <_malloc_r+0x1c8>
   2a30a:	6853      	ldr	r3, [r2, #4]
   2a30c:	f023 0303 	bic.w	r3, r3, #3
   2a310:	1b59      	subs	r1, r3, r5
   2a312:	290f      	cmp	r1, #15
   2a314:	f300 8148 	bgt.w	2a5a8 <_malloc_r+0x36c>
   2a318:	2900      	cmp	r1, #0
   2a31a:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   2a31e:	da54      	bge.n	2a3ca <_malloc_r+0x18e>
   2a320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2a324:	f080 8172 	bcs.w	2a60c <_malloc_r+0x3d0>
   2a328:	08db      	lsrs	r3, r3, #3
   2a32a:	2101      	movs	r1, #1
   2a32c:	1098      	asrs	r0, r3, #2
   2a32e:	eb03 0e01 	add.w	lr, r3, r1
   2a332:	4081      	lsls	r1, r0
   2a334:	eb07 08ce 	add.w	r8, r7, lr, lsl #3
   2a338:	6878      	ldr	r0, [r7, #4]
   2a33a:	f857 303e 	ldr.w	r3, [r7, lr, lsl #3]
   2a33e:	4301      	orrs	r1, r0
   2a340:	f1a8 0008 	sub.w	r0, r8, #8
   2a344:	6093      	str	r3, [r2, #8]
   2a346:	60d0      	str	r0, [r2, #12]
   2a348:	6079      	str	r1, [r7, #4]
   2a34a:	f847 203e 	str.w	r2, [r7, lr, lsl #3]
   2a34e:	60da      	str	r2, [r3, #12]
   2a350:	10a3      	asrs	r3, r4, #2
   2a352:	2001      	movs	r0, #1
   2a354:	4098      	lsls	r0, r3
   2a356:	4288      	cmp	r0, r1
   2a358:	d85a      	bhi.n	2a410 <_malloc_r+0x1d4>
   2a35a:	4208      	tst	r0, r1
   2a35c:	d105      	bne.n	2a36a <_malloc_r+0x12e>
   2a35e:	f024 0403 	bic.w	r4, r4, #3
   2a362:	0040      	lsls	r0, r0, #1
   2a364:	3404      	adds	r4, #4
   2a366:	4208      	tst	r0, r1
   2a368:	d0fb      	beq.n	2a362 <_malloc_r+0x126>
   2a36a:	eb07 09c4 	add.w	r9, r7, r4, lsl #3
   2a36e:	46a0      	mov	r8, r4
   2a370:	46ce      	mov	lr, r9
   2a372:	f8de 300c 	ldr.w	r3, [lr, #12]
   2a376:	459e      	cmp	lr, r3
   2a378:	d107      	bne.n	2a38a <_malloc_r+0x14e>
   2a37a:	e12f      	b.n	2a5dc <_malloc_r+0x3a0>
   2a37c:	2a00      	cmp	r2, #0
   2a37e:	f280 8136 	bge.w	2a5ee <_malloc_r+0x3b2>
   2a382:	68db      	ldr	r3, [r3, #12]
   2a384:	459e      	cmp	lr, r3
   2a386:	f000 8129 	beq.w	2a5dc <_malloc_r+0x3a0>
   2a38a:	6859      	ldr	r1, [r3, #4]
   2a38c:	f021 0103 	bic.w	r1, r1, #3
   2a390:	1b4a      	subs	r2, r1, r5
   2a392:	2a0f      	cmp	r2, #15
   2a394:	ddf2      	ble.n	2a37c <_malloc_r+0x140>
   2a396:	f8d3 e00c 	ldr.w	lr, [r3, #12]
   2a39a:	f045 0401 	orr.w	r4, r5, #1
   2a39e:	f042 0801 	orr.w	r8, r2, #1
   2a3a2:	441d      	add	r5, r3
   2a3a4:	4630      	mov	r0, r6
   2a3a6:	689e      	ldr	r6, [r3, #8]
   2a3a8:	605c      	str	r4, [r3, #4]
   2a3aa:	f103 0908 	add.w	r9, r3, #8
   2a3ae:	f8c6 e00c 	str.w	lr, [r6, #12]
   2a3b2:	f8ce 6008 	str.w	r6, [lr, #8]
   2a3b6:	e9c7 5504 	strd	r5, r5, [r7, #16]
   2a3ba:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   2a3be:	f8c5 8004 	str.w	r8, [r5, #4]
   2a3c2:	505a      	str	r2, [r3, r1]
   2a3c4:	f000 fade 	bl	2a984 <__malloc_unlock>
   2a3c8:	e761      	b.n	2a28e <_malloc_r+0x52>
   2a3ca:	4413      	add	r3, r2
   2a3cc:	f102 0908 	add.w	r9, r2, #8
   2a3d0:	4630      	mov	r0, r6
   2a3d2:	685a      	ldr	r2, [r3, #4]
   2a3d4:	f042 0201 	orr.w	r2, r2, #1
   2a3d8:	605a      	str	r2, [r3, #4]
   2a3da:	f000 fad3 	bl	2a984 <__malloc_unlock>
   2a3de:	4648      	mov	r0, r9
   2a3e0:	b003      	add	sp, #12
   2a3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a3e6:	09ab      	lsrs	r3, r5, #6
   2a3e8:	f103 0439 	add.w	r4, r3, #57	; 0x39
   2a3ec:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   2a3f0:	00e3      	lsls	r3, r4, #3
   2a3f2:	e770      	b.n	2a2d6 <_malloc_r+0x9a>
   2a3f4:	f04f 0900 	mov.w	r9, #0
   2a3f8:	230c      	movs	r3, #12
   2a3fa:	4648      	mov	r0, r9
   2a3fc:	6033      	str	r3, [r6, #0]
   2a3fe:	b003      	add	sp, #12
   2a400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a404:	10a3      	asrs	r3, r4, #2
   2a406:	2001      	movs	r0, #1
   2a408:	6879      	ldr	r1, [r7, #4]
   2a40a:	4098      	lsls	r0, r3
   2a40c:	4288      	cmp	r0, r1
   2a40e:	d9a4      	bls.n	2a35a <_malloc_r+0x11e>
   2a410:	f8d7 9008 	ldr.w	r9, [r7, #8]
   2a414:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2a418:	f023 0803 	bic.w	r8, r3, #3
   2a41c:	eba8 0205 	sub.w	r2, r8, r5
   2a420:	2a0f      	cmp	r2, #15
   2a422:	dd13      	ble.n	2a44c <_malloc_r+0x210>
   2a424:	45a8      	cmp	r8, r5
   2a426:	d311      	bcc.n	2a44c <_malloc_r+0x210>
   2a428:	f045 0301 	orr.w	r3, r5, #1
   2a42c:	f042 0201 	orr.w	r2, r2, #1
   2a430:	444d      	add	r5, r9
   2a432:	f109 0908 	add.w	r9, r9, #8
   2a436:	f849 3c04 	str.w	r3, [r9, #-4]
   2a43a:	4630      	mov	r0, r6
   2a43c:	60bd      	str	r5, [r7, #8]
   2a43e:	606a      	str	r2, [r5, #4]
   2a440:	f000 faa0 	bl	2a984 <__malloc_unlock>
   2a444:	4648      	mov	r0, r9
   2a446:	b003      	add	sp, #12
   2a448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a44c:	f8df b154 	ldr.w	fp, [pc, #340]	; 2a5a4 <_malloc_r+0x368>
   2a450:	4b4e      	ldr	r3, [pc, #312]	; (2a58c <_malloc_r+0x350>)
   2a452:	f8db 2000 	ldr.w	r2, [fp]
   2a456:	681b      	ldr	r3, [r3, #0]
   2a458:	3201      	adds	r2, #1
   2a45a:	442b      	add	r3, r5
   2a45c:	f000 8135 	beq.w	2a6ca <_malloc_r+0x48e>
   2a460:	f241 020f 	movw	r2, #4111	; 0x100f
   2a464:	4c4a      	ldr	r4, [pc, #296]	; (2a590 <_malloc_r+0x354>)
   2a466:	441a      	add	r2, r3
   2a468:	4014      	ands	r4, r2
   2a46a:	4621      	mov	r1, r4
   2a46c:	4630      	mov	r0, r6
   2a46e:	f000 fab5 	bl	2a9dc <_sbrk_r>
   2a472:	f1b0 3fff 	cmp.w	r0, #4294967295
   2a476:	4682      	mov	sl, r0
   2a478:	f000 80f7 	beq.w	2a66a <_malloc_r+0x42e>
   2a47c:	eb09 0008 	add.w	r0, r9, r8
   2a480:	4550      	cmp	r0, sl
   2a482:	f200 80f0 	bhi.w	2a666 <_malloc_r+0x42a>
   2a486:	4b43      	ldr	r3, [pc, #268]	; (2a594 <_malloc_r+0x358>)
   2a488:	681a      	ldr	r2, [r3, #0]
   2a48a:	4422      	add	r2, r4
   2a48c:	601a      	str	r2, [r3, #0]
   2a48e:	f000 8133 	beq.w	2a6f8 <_malloc_r+0x4bc>
   2a492:	f8db 1000 	ldr.w	r1, [fp]
   2a496:	3101      	adds	r1, #1
   2a498:	f000 814c 	beq.w	2a734 <_malloc_r+0x4f8>
   2a49c:	ebaa 0000 	sub.w	r0, sl, r0
   2a4a0:	4402      	add	r2, r0
   2a4a2:	601a      	str	r2, [r3, #0]
   2a4a4:	f01a 0207 	ands.w	r2, sl, #7
   2a4a8:	f000 811b 	beq.w	2a6e2 <_malloc_r+0x4a6>
   2a4ac:	f1c2 0008 	rsb	r0, r2, #8
   2a4b0:	f241 0108 	movw	r1, #4104	; 0x1008
   2a4b4:	4482      	add	sl, r0
   2a4b6:	1a89      	subs	r1, r1, r2
   2a4b8:	4454      	add	r4, sl
   2a4ba:	4630      	mov	r0, r6
   2a4bc:	9301      	str	r3, [sp, #4]
   2a4be:	f3c4 020b 	ubfx	r2, r4, #0, #12
   2a4c2:	1a8c      	subs	r4, r1, r2
   2a4c4:	4621      	mov	r1, r4
   2a4c6:	f000 fa89 	bl	2a9dc <_sbrk_r>
   2a4ca:	1c43      	adds	r3, r0, #1
   2a4cc:	9b01      	ldr	r3, [sp, #4]
   2a4ce:	f000 812e 	beq.w	2a72e <_malloc_r+0x4f2>
   2a4d2:	eba0 010a 	sub.w	r1, r0, sl
   2a4d6:	4421      	add	r1, r4
   2a4d8:	f041 0101 	orr.w	r1, r1, #1
   2a4dc:	681a      	ldr	r2, [r3, #0]
   2a4de:	45b9      	cmp	r9, r7
   2a4e0:	f8c7 a008 	str.w	sl, [r7, #8]
   2a4e4:	4422      	add	r2, r4
   2a4e6:	f8ca 1004 	str.w	r1, [sl, #4]
   2a4ea:	601a      	str	r2, [r3, #0]
   2a4ec:	d017      	beq.n	2a51e <_malloc_r+0x2e2>
   2a4ee:	f1b8 0f0f 	cmp.w	r8, #15
   2a4f2:	f240 8118 	bls.w	2a726 <_malloc_r+0x4ea>
   2a4f6:	f8d9 0004 	ldr.w	r0, [r9, #4]
   2a4fa:	f1a8 010c 	sub.w	r1, r8, #12
   2a4fe:	f04f 0c05 	mov.w	ip, #5
   2a502:	f021 0107 	bic.w	r1, r1, #7
   2a506:	f000 0001 	and.w	r0, r0, #1
   2a50a:	eb09 0401 	add.w	r4, r9, r1
   2a50e:	4308      	orrs	r0, r1
   2a510:	290f      	cmp	r1, #15
   2a512:	f8c9 0004 	str.w	r0, [r9, #4]
   2a516:	e9c4 cc01 	strd	ip, ip, [r4, #4]
   2a51a:	f200 8122 	bhi.w	2a762 <_malloc_r+0x526>
   2a51e:	4b1e      	ldr	r3, [pc, #120]	; (2a598 <_malloc_r+0x35c>)
   2a520:	481e      	ldr	r0, [pc, #120]	; (2a59c <_malloc_r+0x360>)
   2a522:	6819      	ldr	r1, [r3, #0]
   2a524:	f8d7 9008 	ldr.w	r9, [r7, #8]
   2a528:	428a      	cmp	r2, r1
   2a52a:	6801      	ldr	r1, [r0, #0]
   2a52c:	bf88      	it	hi
   2a52e:	601a      	strhi	r2, [r3, #0]
   2a530:	428a      	cmp	r2, r1
   2a532:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2a536:	bf88      	it	hi
   2a538:	6002      	strhi	r2, [r0, #0]
   2a53a:	f023 0303 	bic.w	r3, r3, #3
   2a53e:	1b5a      	subs	r2, r3, r5
   2a540:	2a0f      	cmp	r2, #15
   2a542:	dd02      	ble.n	2a54a <_malloc_r+0x30e>
   2a544:	429d      	cmp	r5, r3
   2a546:	f67f af6f 	bls.w	2a428 <_malloc_r+0x1ec>
   2a54a:	4630      	mov	r0, r6
   2a54c:	f04f 0900 	mov.w	r9, #0
   2a550:	f000 fa18 	bl	2a984 <__malloc_unlock>
   2a554:	e69b      	b.n	2a28e <_malloc_r+0x52>
   2a556:	441a      	add	r2, r3
   2a558:	f103 0908 	add.w	r9, r3, #8
   2a55c:	4630      	mov	r0, r6
   2a55e:	6851      	ldr	r1, [r2, #4]
   2a560:	e9d3 7502 	ldrd	r7, r5, [r3, #8]
   2a564:	f041 0101 	orr.w	r1, r1, #1
   2a568:	60fd      	str	r5, [r7, #12]
   2a56a:	60af      	str	r7, [r5, #8]
   2a56c:	6051      	str	r1, [r2, #4]
   2a56e:	f000 fa09 	bl	2a984 <__malloc_unlock>
   2a572:	4648      	mov	r0, r9
   2a574:	b003      	add	sp, #12
   2a576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a57a:	68d3      	ldr	r3, [r2, #12]
   2a57c:	429a      	cmp	r2, r3
   2a57e:	f47f ae75 	bne.w	2a26c <_malloc_r+0x30>
   2a582:	3402      	adds	r4, #2
   2a584:	e6bc      	b.n	2a300 <_malloc_r+0xc4>
   2a586:	bf00      	nop
   2a588:	2002d9f8 	.word	0x2002d9f8
   2a58c:	20027880 	.word	0x20027880
   2a590:	fffff000 	.word	0xfffff000
   2a594:	20027850 	.word	0x20027850
   2a598:	20027878 	.word	0x20027878
   2a59c:	2002787c 	.word	0x2002787c
   2a5a0:	2002da00 	.word	0x2002da00
   2a5a4:	2002de00 	.word	0x2002de00
   2a5a8:	f045 0401 	orr.w	r4, r5, #1
   2a5ac:	f041 0e01 	orr.w	lr, r1, #1
   2a5b0:	4415      	add	r5, r2
   2a5b2:	f102 0908 	add.w	r9, r2, #8
   2a5b6:	6054      	str	r4, [r2, #4]
   2a5b8:	4630      	mov	r0, r6
   2a5ba:	e9c7 5504 	strd	r5, r5, [r7, #16]
   2a5be:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   2a5c2:	f8c5 e004 	str.w	lr, [r5, #4]
   2a5c6:	50d1      	str	r1, [r2, r3]
   2a5c8:	f000 f9dc 	bl	2a984 <__malloc_unlock>
   2a5cc:	4648      	mov	r0, r9
   2a5ce:	b003      	add	sp, #12
   2a5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a5d4:	08ec      	lsrs	r4, r5, #3
   2a5d6:	f105 0208 	add.w	r2, r5, #8
   2a5da:	e63f      	b.n	2a25c <_malloc_r+0x20>
   2a5dc:	f108 0801 	add.w	r8, r8, #1
   2a5e0:	f10e 0e08 	add.w	lr, lr, #8
   2a5e4:	f018 0f03 	tst.w	r8, #3
   2a5e8:	f47f aec3 	bne.w	2a372 <_malloc_r+0x136>
   2a5ec:	e055      	b.n	2a69a <_malloc_r+0x45e>
   2a5ee:	4419      	add	r1, r3
   2a5f0:	68da      	ldr	r2, [r3, #12]
   2a5f2:	4699      	mov	r9, r3
   2a5f4:	4630      	mov	r0, r6
   2a5f6:	684b      	ldr	r3, [r1, #4]
   2a5f8:	f859 5f08 	ldr.w	r5, [r9, #8]!
   2a5fc:	f043 0301 	orr.w	r3, r3, #1
   2a600:	604b      	str	r3, [r1, #4]
   2a602:	60ea      	str	r2, [r5, #12]
   2a604:	6095      	str	r5, [r2, #8]
   2a606:	f000 f9bd 	bl	2a984 <__malloc_unlock>
   2a60a:	e640      	b.n	2a28e <_malloc_r+0x52>
   2a60c:	0a59      	lsrs	r1, r3, #9
   2a60e:	2904      	cmp	r1, #4
   2a610:	d932      	bls.n	2a678 <_malloc_r+0x43c>
   2a612:	2914      	cmp	r1, #20
   2a614:	d868      	bhi.n	2a6e8 <_malloc_r+0x4ac>
   2a616:	f101 005c 	add.w	r0, r1, #92	; 0x5c
   2a61a:	315b      	adds	r1, #91	; 0x5b
   2a61c:	00c0      	lsls	r0, r0, #3
   2a61e:	eb07 0e00 	add.w	lr, r7, r0
   2a622:	5838      	ldr	r0, [r7, r0]
   2a624:	f1ae 0e08 	sub.w	lr, lr, #8
   2a628:	4586      	cmp	lr, r0
   2a62a:	d051      	beq.n	2a6d0 <_malloc_r+0x494>
   2a62c:	6841      	ldr	r1, [r0, #4]
   2a62e:	f021 0103 	bic.w	r1, r1, #3
   2a632:	4299      	cmp	r1, r3
   2a634:	d902      	bls.n	2a63c <_malloc_r+0x400>
   2a636:	6880      	ldr	r0, [r0, #8]
   2a638:	4586      	cmp	lr, r0
   2a63a:	d1f7      	bne.n	2a62c <_malloc_r+0x3f0>
   2a63c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   2a640:	6879      	ldr	r1, [r7, #4]
   2a642:	e9c2 0e02 	strd	r0, lr, [r2, #8]
   2a646:	f8ce 2008 	str.w	r2, [lr, #8]
   2a64a:	60c2      	str	r2, [r0, #12]
   2a64c:	e680      	b.n	2a350 <_malloc_r+0x114>
   2a64e:	2b54      	cmp	r3, #84	; 0x54
   2a650:	d918      	bls.n	2a684 <_malloc_r+0x448>
   2a652:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   2a656:	d85b      	bhi.n	2a710 <_malloc_r+0x4d4>
   2a658:	0beb      	lsrs	r3, r5, #15
   2a65a:	f103 0478 	add.w	r4, r3, #120	; 0x78
   2a65e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   2a662:	00e3      	lsls	r3, r4, #3
   2a664:	e637      	b.n	2a2d6 <_malloc_r+0x9a>
   2a666:	45b9      	cmp	r9, r7
   2a668:	d067      	beq.n	2a73a <_malloc_r+0x4fe>
   2a66a:	f8d7 9008 	ldr.w	r9, [r7, #8]
   2a66e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2a672:	f023 0303 	bic.w	r3, r3, #3
   2a676:	e762      	b.n	2a53e <_malloc_r+0x302>
   2a678:	0999      	lsrs	r1, r3, #6
   2a67a:	f101 0039 	add.w	r0, r1, #57	; 0x39
   2a67e:	3138      	adds	r1, #56	; 0x38
   2a680:	00c0      	lsls	r0, r0, #3
   2a682:	e7cc      	b.n	2a61e <_malloc_r+0x3e2>
   2a684:	0b2b      	lsrs	r3, r5, #12
   2a686:	f103 046f 	add.w	r4, r3, #111	; 0x6f
   2a68a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   2a68e:	00e3      	lsls	r3, r4, #3
   2a690:	e621      	b.n	2a2d6 <_malloc_r+0x9a>
   2a692:	f8d9 9000 	ldr.w	r9, [r9]
   2a696:	4599      	cmp	r9, r3
   2a698:	d17a      	bne.n	2a790 <_malloc_r+0x554>
   2a69a:	f014 0f03 	tst.w	r4, #3
   2a69e:	f1a9 0308 	sub.w	r3, r9, #8
   2a6a2:	f104 34ff 	add.w	r4, r4, #4294967295
   2a6a6:	d1f4      	bne.n	2a692 <_malloc_r+0x456>
   2a6a8:	687b      	ldr	r3, [r7, #4]
   2a6aa:	ea23 0300 	bic.w	r3, r3, r0
   2a6ae:	607b      	str	r3, [r7, #4]
   2a6b0:	0040      	lsls	r0, r0, #1
   2a6b2:	4298      	cmp	r0, r3
   2a6b4:	f63f aeac 	bhi.w	2a410 <_malloc_r+0x1d4>
   2a6b8:	b918      	cbnz	r0, 2a6c2 <_malloc_r+0x486>
   2a6ba:	e6a9      	b.n	2a410 <_malloc_r+0x1d4>
   2a6bc:	0040      	lsls	r0, r0, #1
   2a6be:	f108 0804 	add.w	r8, r8, #4
   2a6c2:	4218      	tst	r0, r3
   2a6c4:	d0fa      	beq.n	2a6bc <_malloc_r+0x480>
   2a6c6:	4644      	mov	r4, r8
   2a6c8:	e64f      	b.n	2a36a <_malloc_r+0x12e>
   2a6ca:	f103 0410 	add.w	r4, r3, #16
   2a6ce:	e6cc      	b.n	2a46a <_malloc_r+0x22e>
   2a6d0:	1089      	asrs	r1, r1, #2
   2a6d2:	f04f 0801 	mov.w	r8, #1
   2a6d6:	687b      	ldr	r3, [r7, #4]
   2a6d8:	fa08 f101 	lsl.w	r1, r8, r1
   2a6dc:	4319      	orrs	r1, r3
   2a6de:	6079      	str	r1, [r7, #4]
   2a6e0:	e7af      	b.n	2a642 <_malloc_r+0x406>
   2a6e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   2a6e6:	e6e7      	b.n	2a4b8 <_malloc_r+0x27c>
   2a6e8:	2954      	cmp	r1, #84	; 0x54
   2a6ea:	d82b      	bhi.n	2a744 <_malloc_r+0x508>
   2a6ec:	0b19      	lsrs	r1, r3, #12
   2a6ee:	f101 006f 	add.w	r0, r1, #111	; 0x6f
   2a6f2:	316e      	adds	r1, #110	; 0x6e
   2a6f4:	00c0      	lsls	r0, r0, #3
   2a6f6:	e792      	b.n	2a61e <_malloc_r+0x3e2>
   2a6f8:	f3c0 010b 	ubfx	r1, r0, #0, #12
   2a6fc:	2900      	cmp	r1, #0
   2a6fe:	f47f aec8 	bne.w	2a492 <_malloc_r+0x256>
   2a702:	eb08 0304 	add.w	r3, r8, r4
   2a706:	68b9      	ldr	r1, [r7, #8]
   2a708:	f043 0301 	orr.w	r3, r3, #1
   2a70c:	604b      	str	r3, [r1, #4]
   2a70e:	e706      	b.n	2a51e <_malloc_r+0x2e2>
   2a710:	f240 5254 	movw	r2, #1364	; 0x554
   2a714:	4293      	cmp	r3, r2
   2a716:	d81e      	bhi.n	2a756 <_malloc_r+0x51a>
   2a718:	0cab      	lsrs	r3, r5, #18
   2a71a:	f103 047d 	add.w	r4, r3, #125	; 0x7d
   2a71e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   2a722:	00e3      	lsls	r3, r4, #3
   2a724:	e5d7      	b.n	2a2d6 <_malloc_r+0x9a>
   2a726:	2301      	movs	r3, #1
   2a728:	f8ca 3004 	str.w	r3, [sl, #4]
   2a72c:	e70d      	b.n	2a54a <_malloc_r+0x30e>
   2a72e:	2101      	movs	r1, #1
   2a730:	2400      	movs	r4, #0
   2a732:	e6d3      	b.n	2a4dc <_malloc_r+0x2a0>
   2a734:	f8cb a000 	str.w	sl, [fp]
   2a738:	e6b4      	b.n	2a4a4 <_malloc_r+0x268>
   2a73a:	4b16      	ldr	r3, [pc, #88]	; (2a794 <_malloc_r+0x558>)
   2a73c:	681a      	ldr	r2, [r3, #0]
   2a73e:	4422      	add	r2, r4
   2a740:	601a      	str	r2, [r3, #0]
   2a742:	e6a6      	b.n	2a492 <_malloc_r+0x256>
   2a744:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
   2a748:	d814      	bhi.n	2a774 <_malloc_r+0x538>
   2a74a:	0bd9      	lsrs	r1, r3, #15
   2a74c:	f101 0078 	add.w	r0, r1, #120	; 0x78
   2a750:	3177      	adds	r1, #119	; 0x77
   2a752:	00c0      	lsls	r0, r0, #3
   2a754:	e763      	b.n	2a61e <_malloc_r+0x3e2>
   2a756:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   2a75a:	247f      	movs	r4, #127	; 0x7f
   2a75c:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   2a760:	e5b9      	b.n	2a2d6 <_malloc_r+0x9a>
   2a762:	f109 0108 	add.w	r1, r9, #8
   2a766:	4630      	mov	r0, r6
   2a768:	9301      	str	r3, [sp, #4]
   2a76a:	f002 f921 	bl	2c9b0 <_free_r>
   2a76e:	9b01      	ldr	r3, [sp, #4]
   2a770:	681a      	ldr	r2, [r3, #0]
   2a772:	e6d4      	b.n	2a51e <_malloc_r+0x2e2>
   2a774:	f240 5054 	movw	r0, #1364	; 0x554
   2a778:	4281      	cmp	r1, r0
   2a77a:	d805      	bhi.n	2a788 <_malloc_r+0x54c>
   2a77c:	0c99      	lsrs	r1, r3, #18
   2a77e:	f101 007d 	add.w	r0, r1, #125	; 0x7d
   2a782:	317c      	adds	r1, #124	; 0x7c
   2a784:	00c0      	lsls	r0, r0, #3
   2a786:	e74a      	b.n	2a61e <_malloc_r+0x3e2>
   2a788:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
   2a78c:	217e      	movs	r1, #126	; 0x7e
   2a78e:	e746      	b.n	2a61e <_malloc_r+0x3e2>
   2a790:	687b      	ldr	r3, [r7, #4]
   2a792:	e78d      	b.n	2a6b0 <_malloc_r+0x474>
   2a794:	20027850 	.word	0x20027850

0002a798 <__ascii_mbtowc>:
   2a798:	b082      	sub	sp, #8
   2a79a:	b149      	cbz	r1, 2a7b0 <__ascii_mbtowc+0x18>
   2a79c:	b15a      	cbz	r2, 2a7b6 <__ascii_mbtowc+0x1e>
   2a79e:	b16b      	cbz	r3, 2a7bc <__ascii_mbtowc+0x24>
   2a7a0:	7813      	ldrb	r3, [r2, #0]
   2a7a2:	600b      	str	r3, [r1, #0]
   2a7a4:	7812      	ldrb	r2, [r2, #0]
   2a7a6:	1c10      	adds	r0, r2, #0
   2a7a8:	bf18      	it	ne
   2a7aa:	2001      	movne	r0, #1
   2a7ac:	b002      	add	sp, #8
   2a7ae:	4770      	bx	lr
   2a7b0:	a901      	add	r1, sp, #4
   2a7b2:	2a00      	cmp	r2, #0
   2a7b4:	d1f3      	bne.n	2a79e <__ascii_mbtowc+0x6>
   2a7b6:	4610      	mov	r0, r2
   2a7b8:	b002      	add	sp, #8
   2a7ba:	4770      	bx	lr
   2a7bc:	f06f 0001 	mvn.w	r0, #1
   2a7c0:	e7f4      	b.n	2a7ac <__ascii_mbtowc+0x14>
   2a7c2:	bf00      	nop

0002a7c4 <memcmp>:
   2a7c4:	2a03      	cmp	r2, #3
   2a7c6:	b470      	push	{r4, r5, r6}
   2a7c8:	d912      	bls.n	2a7f0 <memcmp+0x2c>
   2a7ca:	ea40 0501 	orr.w	r5, r0, r1
   2a7ce:	4604      	mov	r4, r0
   2a7d0:	460b      	mov	r3, r1
   2a7d2:	07ad      	lsls	r5, r5, #30
   2a7d4:	d11f      	bne.n	2a816 <memcmp+0x52>
   2a7d6:	4619      	mov	r1, r3
   2a7d8:	4620      	mov	r0, r4
   2a7da:	3304      	adds	r3, #4
   2a7dc:	3404      	adds	r4, #4
   2a7de:	680d      	ldr	r5, [r1, #0]
   2a7e0:	6806      	ldr	r6, [r0, #0]
   2a7e2:	42ae      	cmp	r6, r5
   2a7e4:	d117      	bne.n	2a816 <memcmp+0x52>
   2a7e6:	3a04      	subs	r2, #4
   2a7e8:	4620      	mov	r0, r4
   2a7ea:	4619      	mov	r1, r3
   2a7ec:	2a03      	cmp	r2, #3
   2a7ee:	d8f2      	bhi.n	2a7d6 <memcmp+0x12>
   2a7f0:	1e54      	subs	r4, r2, #1
   2a7f2:	b16a      	cbz	r2, 2a810 <memcmp+0x4c>
   2a7f4:	7802      	ldrb	r2, [r0, #0]
   2a7f6:	780b      	ldrb	r3, [r1, #0]
   2a7f8:	429a      	cmp	r2, r3
   2a7fa:	d10e      	bne.n	2a81a <memcmp+0x56>
   2a7fc:	440c      	add	r4, r1
   2a7fe:	e005      	b.n	2a80c <memcmp+0x48>
   2a800:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   2a804:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2a808:	429a      	cmp	r2, r3
   2a80a:	d106      	bne.n	2a81a <memcmp+0x56>
   2a80c:	42a1      	cmp	r1, r4
   2a80e:	d1f7      	bne.n	2a800 <memcmp+0x3c>
   2a810:	2000      	movs	r0, #0
   2a812:	bc70      	pop	{r4, r5, r6}
   2a814:	4770      	bx	lr
   2a816:	1e54      	subs	r4, r2, #1
   2a818:	e7ec      	b.n	2a7f4 <memcmp+0x30>
   2a81a:	1ad0      	subs	r0, r2, r3
   2a81c:	bc70      	pop	{r4, r5, r6}
   2a81e:	4770      	bx	lr

0002a820 <memmove>:
   2a820:	4288      	cmp	r0, r1
   2a822:	b4f0      	push	{r4, r5, r6, r7}
   2a824:	d90d      	bls.n	2a842 <memmove+0x22>
   2a826:	188b      	adds	r3, r1, r2
   2a828:	4283      	cmp	r3, r0
   2a82a:	d90a      	bls.n	2a842 <memmove+0x22>
   2a82c:	1884      	adds	r4, r0, r2
   2a82e:	b132      	cbz	r2, 2a83e <memmove+0x1e>
   2a830:	4622      	mov	r2, r4
   2a832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2a836:	4299      	cmp	r1, r3
   2a838:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2a83c:	d1f9      	bne.n	2a832 <memmove+0x12>
   2a83e:	bcf0      	pop	{r4, r5, r6, r7}
   2a840:	4770      	bx	lr
   2a842:	2a0f      	cmp	r2, #15
   2a844:	d948      	bls.n	2a8d8 <memmove+0xb8>
   2a846:	ea40 0301 	orr.w	r3, r0, r1
   2a84a:	079b      	lsls	r3, r3, #30
   2a84c:	d146      	bne.n	2a8dc <memmove+0xbc>
   2a84e:	f1a2 0310 	sub.w	r3, r2, #16
   2a852:	f101 0720 	add.w	r7, r1, #32
   2a856:	f101 0410 	add.w	r4, r1, #16
   2a85a:	f100 0510 	add.w	r5, r0, #16
   2a85e:	091b      	lsrs	r3, r3, #4
   2a860:	eb07 1703 	add.w	r7, r7, r3, lsl #4
   2a864:	f854 6c10 	ldr.w	r6, [r4, #-16]
   2a868:	3410      	adds	r4, #16
   2a86a:	3510      	adds	r5, #16
   2a86c:	f845 6c20 	str.w	r6, [r5, #-32]
   2a870:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   2a874:	f845 6c1c 	str.w	r6, [r5, #-28]
   2a878:	f854 6c18 	ldr.w	r6, [r4, #-24]
   2a87c:	f845 6c18 	str.w	r6, [r5, #-24]
   2a880:	f854 6c14 	ldr.w	r6, [r4, #-20]
   2a884:	42bc      	cmp	r4, r7
   2a886:	f845 6c14 	str.w	r6, [r5, #-20]
   2a88a:	d1eb      	bne.n	2a864 <memmove+0x44>
   2a88c:	3301      	adds	r3, #1
   2a88e:	f002 050f 	and.w	r5, r2, #15
   2a892:	011b      	lsls	r3, r3, #4
   2a894:	2d03      	cmp	r5, #3
   2a896:	4419      	add	r1, r3
   2a898:	4403      	add	r3, r0
   2a89a:	d921      	bls.n	2a8e0 <memmove+0xc0>
   2a89c:	1f1f      	subs	r7, r3, #4
   2a89e:	460e      	mov	r6, r1
   2a8a0:	462c      	mov	r4, r5
   2a8a2:	3c04      	subs	r4, #4
   2a8a4:	f856 cb04 	ldr.w	ip, [r6], #4
   2a8a8:	2c03      	cmp	r4, #3
   2a8aa:	f847 cf04 	str.w	ip, [r7, #4]!
   2a8ae:	d8f8      	bhi.n	2a8a2 <memmove+0x82>
   2a8b0:	1f2c      	subs	r4, r5, #4
   2a8b2:	f002 0203 	and.w	r2, r2, #3
   2a8b6:	f024 0403 	bic.w	r4, r4, #3
   2a8ba:	3404      	adds	r4, #4
   2a8bc:	4423      	add	r3, r4
   2a8be:	4421      	add	r1, r4
   2a8c0:	2a00      	cmp	r2, #0
   2a8c2:	d0bc      	beq.n	2a83e <memmove+0x1e>
   2a8c4:	3b01      	subs	r3, #1
   2a8c6:	440a      	add	r2, r1
   2a8c8:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a8cc:	4291      	cmp	r1, r2
   2a8ce:	f803 4f01 	strb.w	r4, [r3, #1]!
   2a8d2:	d1f9      	bne.n	2a8c8 <memmove+0xa8>
   2a8d4:	bcf0      	pop	{r4, r5, r6, r7}
   2a8d6:	4770      	bx	lr
   2a8d8:	4603      	mov	r3, r0
   2a8da:	e7f1      	b.n	2a8c0 <memmove+0xa0>
   2a8dc:	4603      	mov	r3, r0
   2a8de:	e7f1      	b.n	2a8c4 <memmove+0xa4>
   2a8e0:	462a      	mov	r2, r5
   2a8e2:	e7ed      	b.n	2a8c0 <memmove+0xa0>

0002a8e4 <memset>:
   2a8e4:	b4f0      	push	{r4, r5, r6, r7}
   2a8e6:	0786      	lsls	r6, r0, #30
   2a8e8:	d043      	beq.n	2a972 <memset+0x8e>
   2a8ea:	1e54      	subs	r4, r2, #1
   2a8ec:	2a00      	cmp	r2, #0
   2a8ee:	d03e      	beq.n	2a96e <memset+0x8a>
   2a8f0:	b2ca      	uxtb	r2, r1
   2a8f2:	4603      	mov	r3, r0
   2a8f4:	e002      	b.n	2a8fc <memset+0x18>
   2a8f6:	f114 34ff 	adds.w	r4, r4, #4294967295
   2a8fa:	d338      	bcc.n	2a96e <memset+0x8a>
   2a8fc:	f803 2b01 	strb.w	r2, [r3], #1
   2a900:	079d      	lsls	r5, r3, #30
   2a902:	d1f8      	bne.n	2a8f6 <memset+0x12>
   2a904:	2c03      	cmp	r4, #3
   2a906:	d92b      	bls.n	2a960 <memset+0x7c>
   2a908:	b2cd      	uxtb	r5, r1
   2a90a:	2c0f      	cmp	r4, #15
   2a90c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   2a910:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   2a914:	d916      	bls.n	2a944 <memset+0x60>
   2a916:	f1a4 0710 	sub.w	r7, r4, #16
   2a91a:	f103 0620 	add.w	r6, r3, #32
   2a91e:	f103 0210 	add.w	r2, r3, #16
   2a922:	093f      	lsrs	r7, r7, #4
   2a924:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   2a928:	e942 5504 	strd	r5, r5, [r2, #-16]
   2a92c:	e942 5502 	strd	r5, r5, [r2, #-8]
   2a930:	3210      	adds	r2, #16
   2a932:	42b2      	cmp	r2, r6
   2a934:	d1f8      	bne.n	2a928 <memset+0x44>
   2a936:	f004 040f 	and.w	r4, r4, #15
   2a93a:	3701      	adds	r7, #1
   2a93c:	2c03      	cmp	r4, #3
   2a93e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   2a942:	d90d      	bls.n	2a960 <memset+0x7c>
   2a944:	461e      	mov	r6, r3
   2a946:	4622      	mov	r2, r4
   2a948:	3a04      	subs	r2, #4
   2a94a:	f846 5b04 	str.w	r5, [r6], #4
   2a94e:	2a03      	cmp	r2, #3
   2a950:	d8fa      	bhi.n	2a948 <memset+0x64>
   2a952:	1f22      	subs	r2, r4, #4
   2a954:	f004 0403 	and.w	r4, r4, #3
   2a958:	f022 0203 	bic.w	r2, r2, #3
   2a95c:	3204      	adds	r2, #4
   2a95e:	4413      	add	r3, r2
   2a960:	b12c      	cbz	r4, 2a96e <memset+0x8a>
   2a962:	b2c9      	uxtb	r1, r1
   2a964:	441c      	add	r4, r3
   2a966:	f803 1b01 	strb.w	r1, [r3], #1
   2a96a:	429c      	cmp	r4, r3
   2a96c:	d1fb      	bne.n	2a966 <memset+0x82>
   2a96e:	bcf0      	pop	{r4, r5, r6, r7}
   2a970:	4770      	bx	lr
   2a972:	4614      	mov	r4, r2
   2a974:	4603      	mov	r3, r0
   2a976:	e7c5      	b.n	2a904 <memset+0x20>

0002a978 <__malloc_lock>:
   2a978:	4801      	ldr	r0, [pc, #4]	; (2a980 <__malloc_lock+0x8>)
   2a97a:	f002 bad1 	b.w	2cf20 <__retarget_lock_acquire_recursive>
   2a97e:	bf00      	nop
   2a980:	20027ed4 	.word	0x20027ed4

0002a984 <__malloc_unlock>:
   2a984:	4801      	ldr	r0, [pc, #4]	; (2a98c <__malloc_unlock+0x8>)
   2a986:	f002 bacd 	b.w	2cf24 <__retarget_lock_release_recursive>
   2a98a:	bf00      	nop
   2a98c:	20027ed4 	.word	0x20027ed4

0002a990 <srand>:
   2a990:	4b02      	ldr	r3, [pc, #8]	; (2a99c <srand+0xc>)
   2a992:	2200      	movs	r2, #0
   2a994:	681b      	ldr	r3, [r3, #0]
   2a996:	e9c3 022a 	strd	r0, r2, [r3, #168]	; 0xa8
   2a99a:	4770      	bx	lr
   2a99c:	2002d888 	.word	0x2002d888

0002a9a0 <rand>:
   2a9a0:	4b0b      	ldr	r3, [pc, #44]	; (2a9d0 <rand+0x30>)
   2a9a2:	6819      	ldr	r1, [r3, #0]
   2a9a4:	b430      	push	{r4, r5}
   2a9a6:	e9d1 202a 	ldrd	r2, r0, [r1, #168]	; 0xa8
   2a9aa:	4c0a      	ldr	r4, [pc, #40]	; (2a9d4 <rand+0x34>)
   2a9ac:	4d0a      	ldr	r5, [pc, #40]	; (2a9d8 <rand+0x38>)
   2a9ae:	fb04 f402 	mul.w	r4, r4, r2
   2a9b2:	fba2 2305 	umull	r2, r3, r2, r5
   2a9b6:	fb05 4000 	mla	r0, r5, r0, r4
   2a9ba:	1c54      	adds	r4, r2, #1
   2a9bc:	4403      	add	r3, r0
   2a9be:	f143 0500 	adc.w	r5, r3, #0
   2a9c2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
   2a9c6:	e9c1 452a 	strd	r4, r5, [r1, #168]	; 0xa8
   2a9ca:	bc30      	pop	{r4, r5}
   2a9cc:	4770      	bx	lr
   2a9ce:	bf00      	nop
   2a9d0:	2002d888 	.word	0x2002d888
   2a9d4:	5851f42d 	.word	0x5851f42d
   2a9d8:	4c957f2d 	.word	0x4c957f2d

0002a9dc <_sbrk_r>:
   2a9dc:	b538      	push	{r3, r4, r5, lr}
   2a9de:	2300      	movs	r3, #0
   2a9e0:	4c06      	ldr	r4, [pc, #24]	; (2a9fc <_sbrk_r+0x20>)
   2a9e2:	4605      	mov	r5, r0
   2a9e4:	4608      	mov	r0, r1
   2a9e6:	6023      	str	r3, [r4, #0]
   2a9e8:	f7e9 fd4a 	bl	14480 <_sbrk>
   2a9ec:	1c43      	adds	r3, r0, #1
   2a9ee:	d000      	beq.n	2a9f2 <_sbrk_r+0x16>
   2a9f0:	bd38      	pop	{r3, r4, r5, pc}
   2a9f2:	6823      	ldr	r3, [r4, #0]
   2a9f4:	2b00      	cmp	r3, #0
   2a9f6:	d0fb      	beq.n	2a9f0 <_sbrk_r+0x14>
   2a9f8:	602b      	str	r3, [r5, #0]
   2a9fa:	bd38      	pop	{r3, r4, r5, pc}
   2a9fc:	20027ee8 	.word	0x20027ee8

0002aa00 <snprintf>:
   2aa00:	b40c      	push	{r2, r3}
   2aa02:	4b22      	ldr	r3, [pc, #136]	; (2aa8c <snprintf+0x8c>)
   2aa04:	b5f0      	push	{r4, r5, r6, r7, lr}
   2aa06:	1e0c      	subs	r4, r1, #0
   2aa08:	b09d      	sub	sp, #116	; 0x74
   2aa0a:	681d      	ldr	r5, [r3, #0]
   2aa0c:	db39      	blt.n	2aa82 <snprintf+0x82>
   2aa0e:	f44f 7302 	mov.w	r3, #520	; 0x208
   2aa12:	9002      	str	r0, [sp, #8]
   2aa14:	9006      	str	r0, [sp, #24]
   2aa16:	f8ad 3014 	strh.w	r3, [sp, #20]
   2aa1a:	d01a      	beq.n	2aa52 <snprintf+0x52>
   2aa1c:	a823      	add	r0, sp, #140	; 0x8c
   2aa1e:	3c01      	subs	r4, #1
   2aa20:	f64f 76ff 	movw	r6, #65535	; 0xffff
   2aa24:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2aa26:	4603      	mov	r3, r0
   2aa28:	9001      	str	r0, [sp, #4]
   2aa2a:	a902      	add	r1, sp, #8
   2aa2c:	4628      	mov	r0, r5
   2aa2e:	9404      	str	r4, [sp, #16]
   2aa30:	9407      	str	r4, [sp, #28]
   2aa32:	f8ad 6016 	strh.w	r6, [sp, #22]
   2aa36:	f7e3 fdaf 	bl	e598 <_svfprintf_r>
   2aa3a:	1c42      	adds	r2, r0, #1
   2aa3c:	da01      	bge.n	2aa42 <snprintf+0x42>
   2aa3e:	238b      	movs	r3, #139	; 0x8b
   2aa40:	602b      	str	r3, [r5, #0]
   2aa42:	9b02      	ldr	r3, [sp, #8]
   2aa44:	2200      	movs	r2, #0
   2aa46:	701a      	strb	r2, [r3, #0]
   2aa48:	b01d      	add	sp, #116	; 0x74
   2aa4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2aa4e:	b002      	add	sp, #8
   2aa50:	4770      	bx	lr
   2aa52:	ae23      	add	r6, sp, #140	; 0x8c
   2aa54:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2aa58:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2aa5a:	a902      	add	r1, sp, #8
   2aa5c:	4633      	mov	r3, r6
   2aa5e:	4628      	mov	r0, r5
   2aa60:	9404      	str	r4, [sp, #16]
   2aa62:	9407      	str	r4, [sp, #28]
   2aa64:	9601      	str	r6, [sp, #4]
   2aa66:	f8ad 7016 	strh.w	r7, [sp, #22]
   2aa6a:	f7e3 fd95 	bl	e598 <_svfprintf_r>
   2aa6e:	1c43      	adds	r3, r0, #1
   2aa70:	db04      	blt.n	2aa7c <snprintf+0x7c>
   2aa72:	b01d      	add	sp, #116	; 0x74
   2aa74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2aa78:	b002      	add	sp, #8
   2aa7a:	4770      	bx	lr
   2aa7c:	238b      	movs	r3, #139	; 0x8b
   2aa7e:	602b      	str	r3, [r5, #0]
   2aa80:	e7f7      	b.n	2aa72 <snprintf+0x72>
   2aa82:	238b      	movs	r3, #139	; 0x8b
   2aa84:	f04f 30ff 	mov.w	r0, #4294967295
   2aa88:	602b      	str	r3, [r5, #0]
   2aa8a:	e7f2      	b.n	2aa72 <snprintf+0x72>
   2aa8c:	2002d888 	.word	0x2002d888

0002aa90 <sprintf>:
   2aa90:	b40e      	push	{r1, r2, r3}
   2aa92:	b570      	push	{r4, r5, r6, lr}
   2aa94:	b09d      	sub	sp, #116	; 0x74
   2aa96:	4e0d      	ldr	r6, [pc, #52]	; (2aacc <sprintf+0x3c>)
   2aa98:	4603      	mov	r3, r0
   2aa9a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   2aa9e:	ac21      	add	r4, sp, #132	; 0x84
   2aaa0:	6830      	ldr	r0, [r6, #0]
   2aaa2:	4e0b      	ldr	r6, [pc, #44]	; (2aad0 <sprintf+0x40>)
   2aaa4:	a902      	add	r1, sp, #8
   2aaa6:	f854 2b04 	ldr.w	r2, [r4], #4
   2aaaa:	9302      	str	r3, [sp, #8]
   2aaac:	9306      	str	r3, [sp, #24]
   2aaae:	4623      	mov	r3, r4
   2aab0:	9401      	str	r4, [sp, #4]
   2aab2:	9507      	str	r5, [sp, #28]
   2aab4:	e9cd 5604 	strd	r5, r6, [sp, #16]
   2aab8:	f7e3 fd6e 	bl	e598 <_svfprintf_r>
   2aabc:	9b02      	ldr	r3, [sp, #8]
   2aabe:	2200      	movs	r2, #0
   2aac0:	701a      	strb	r2, [r3, #0]
   2aac2:	b01d      	add	sp, #116	; 0x74
   2aac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2aac8:	b003      	add	sp, #12
   2aaca:	4770      	bx	lr
   2aacc:	2002d888 	.word	0x2002d888
   2aad0:	ffff0208 	.word	0xffff0208

0002aad4 <__sprintf_chk>:
   2aad4:	b408      	push	{r3}
   2aad6:	b510      	push	{r4, lr}
   2aad8:	b083      	sub	sp, #12
   2aada:	1e14      	subs	r4, r2, #0
   2aadc:	ab05      	add	r3, sp, #20
   2aade:	f853 1b04 	ldr.w	r1, [r3], #4
   2aae2:	9301      	str	r3, [sp, #4]
   2aae4:	db0c      	blt.n	2ab00 <__sprintf_chk+0x2c>
   2aae6:	460a      	mov	r2, r1
   2aae8:	4621      	mov	r1, r4
   2aaea:	f001 fbe9 	bl	2c2c0 <vsnprintf>
   2aaee:	2800      	cmp	r0, #0
   2aaf0:	db01      	blt.n	2aaf6 <__sprintf_chk+0x22>
   2aaf2:	42a0      	cmp	r0, r4
   2aaf4:	d20c      	bcs.n	2ab10 <__sprintf_chk+0x3c>
   2aaf6:	b003      	add	sp, #12
   2aaf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2aafc:	b001      	add	sp, #4
   2aafe:	4770      	bx	lr
   2ab00:	461a      	mov	r2, r3
   2ab02:	f001 fc03 	bl	2c30c <vsprintf>
   2ab06:	b003      	add	sp, #12
   2ab08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2ab0c:	b001      	add	sp, #4
   2ab0e:	4770      	bx	lr
   2ab10:	f001 fc82 	bl	2c418 <__chk_fail>

0002ab14 <strchr>:
   2ab14:	b2c9      	uxtb	r1, r1
   2ab16:	f000 0303 	and.w	r3, r0, #3
   2ab1a:	2900      	cmp	r1, #0
   2ab1c:	d043      	beq.n	2aba6 <strchr+0x92>
   2ab1e:	b17b      	cbz	r3, 2ab40 <strchr+0x2c>
   2ab20:	7803      	ldrb	r3, [r0, #0]
   2ab22:	2b00      	cmp	r3, #0
   2ab24:	d069      	beq.n	2abfa <strchr+0xe6>
   2ab26:	4299      	cmp	r1, r3
   2ab28:	d03c      	beq.n	2aba4 <strchr+0x90>
   2ab2a:	1c43      	adds	r3, r0, #1
   2ab2c:	e005      	b.n	2ab3a <strchr+0x26>
   2ab2e:	f813 2b01 	ldrb.w	r2, [r3], #1
   2ab32:	2a00      	cmp	r2, #0
   2ab34:	d05f      	beq.n	2abf6 <strchr+0xe2>
   2ab36:	428a      	cmp	r2, r1
   2ab38:	d034      	beq.n	2aba4 <strchr+0x90>
   2ab3a:	079a      	lsls	r2, r3, #30
   2ab3c:	4618      	mov	r0, r3
   2ab3e:	d1f6      	bne.n	2ab2e <strchr+0x1a>
   2ab40:	b470      	push	{r4, r5, r6}
   2ab42:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   2ab46:	6803      	ldr	r3, [r0, #0]
   2ab48:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   2ab4c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2ab50:	ea86 0403 	eor.w	r4, r6, r3
   2ab54:	ea22 0203 	bic.w	r2, r2, r3
   2ab58:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   2ab5c:	ea23 0304 	bic.w	r3, r3, r4
   2ab60:	4313      	orrs	r3, r2
   2ab62:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2ab66:	d10f      	bne.n	2ab88 <strchr+0x74>
   2ab68:	f850 4f04 	ldr.w	r4, [r0, #4]!
   2ab6c:	ea84 0506 	eor.w	r5, r4, r6
   2ab70:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   2ab74:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   2ab78:	ea23 0304 	bic.w	r3, r3, r4
   2ab7c:	ea22 0205 	bic.w	r2, r2, r5
   2ab80:	4313      	orrs	r3, r2
   2ab82:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2ab86:	d0ef      	beq.n	2ab68 <strchr+0x54>
   2ab88:	7803      	ldrb	r3, [r0, #0]
   2ab8a:	b143      	cbz	r3, 2ab9e <strchr+0x8a>
   2ab8c:	4299      	cmp	r1, r3
   2ab8e:	d102      	bne.n	2ab96 <strchr+0x82>
   2ab90:	e006      	b.n	2aba0 <strchr+0x8c>
   2ab92:	428b      	cmp	r3, r1
   2ab94:	d004      	beq.n	2aba0 <strchr+0x8c>
   2ab96:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2ab9a:	2b00      	cmp	r3, #0
   2ab9c:	d1f9      	bne.n	2ab92 <strchr+0x7e>
   2ab9e:	4618      	mov	r0, r3
   2aba0:	bc70      	pop	{r4, r5, r6}
   2aba2:	4770      	bx	lr
   2aba4:	4770      	bx	lr
   2aba6:	b16b      	cbz	r3, 2abc4 <strchr+0xb0>
   2aba8:	7803      	ldrb	r3, [r0, #0]
   2abaa:	2b00      	cmp	r3, #0
   2abac:	d0fa      	beq.n	2aba4 <strchr+0x90>
   2abae:	1c43      	adds	r3, r0, #1
   2abb0:	e002      	b.n	2abb8 <strchr+0xa4>
   2abb2:	7802      	ldrb	r2, [r0, #0]
   2abb4:	2a00      	cmp	r2, #0
   2abb6:	d0f5      	beq.n	2aba4 <strchr+0x90>
   2abb8:	f013 0f03 	tst.w	r3, #3
   2abbc:	4618      	mov	r0, r3
   2abbe:	f103 0301 	add.w	r3, r3, #1
   2abc2:	d1f6      	bne.n	2abb2 <strchr+0x9e>
   2abc4:	6802      	ldr	r2, [r0, #0]
   2abc6:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2abca:	ea23 0302 	bic.w	r3, r3, r2
   2abce:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2abd2:	d108      	bne.n	2abe6 <strchr+0xd2>
   2abd4:	f850 2f04 	ldr.w	r2, [r0, #4]!
   2abd8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2abdc:	ea23 0302 	bic.w	r3, r3, r2
   2abe0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2abe4:	d0f6      	beq.n	2abd4 <strchr+0xc0>
   2abe6:	7803      	ldrb	r3, [r0, #0]
   2abe8:	2b00      	cmp	r3, #0
   2abea:	d0db      	beq.n	2aba4 <strchr+0x90>
   2abec:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2abf0:	2b00      	cmp	r3, #0
   2abf2:	d1fb      	bne.n	2abec <strchr+0xd8>
   2abf4:	4770      	bx	lr
   2abf6:	4610      	mov	r0, r2
   2abf8:	4770      	bx	lr
   2abfa:	4618      	mov	r0, r3
   2abfc:	4770      	bx	lr
   2abfe:	bf00      	nop

0002ac00 <strcpy>:
   2ac00:	ea80 0201 	eor.w	r2, r0, r1
   2ac04:	4684      	mov	ip, r0
   2ac06:	f012 0f03 	tst.w	r2, #3
   2ac0a:	d14f      	bne.n	2acac <strcpy+0xac>
   2ac0c:	f011 0f03 	tst.w	r1, #3
   2ac10:	d132      	bne.n	2ac78 <strcpy+0x78>
   2ac12:	f84d 4d04 	str.w	r4, [sp, #-4]!
   2ac16:	f011 0f04 	tst.w	r1, #4
   2ac1a:	f851 3b04 	ldr.w	r3, [r1], #4
   2ac1e:	d00b      	beq.n	2ac38 <strcpy+0x38>
   2ac20:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2ac24:	439a      	bics	r2, r3
   2ac26:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ac2a:	bf04      	itt	eq
   2ac2c:	f84c 3b04 	streq.w	r3, [ip], #4
   2ac30:	f851 3b04 	ldreq.w	r3, [r1], #4
   2ac34:	d116      	bne.n	2ac64 <strcpy+0x64>
   2ac36:	bf00      	nop
   2ac38:	f851 4b04 	ldr.w	r4, [r1], #4
   2ac3c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2ac40:	439a      	bics	r2, r3
   2ac42:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ac46:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   2ac4a:	d10b      	bne.n	2ac64 <strcpy+0x64>
   2ac4c:	f84c 3b04 	str.w	r3, [ip], #4
   2ac50:	43a2      	bics	r2, r4
   2ac52:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ac56:	bf04      	itt	eq
   2ac58:	f851 3b04 	ldreq.w	r3, [r1], #4
   2ac5c:	f84c 4b04 	streq.w	r4, [ip], #4
   2ac60:	d0ea      	beq.n	2ac38 <strcpy+0x38>
   2ac62:	4623      	mov	r3, r4
   2ac64:	f80c 3b01 	strb.w	r3, [ip], #1
   2ac68:	f013 0fff 	tst.w	r3, #255	; 0xff
   2ac6c:	ea4f 2333 	mov.w	r3, r3, ror #8
   2ac70:	d1f8      	bne.n	2ac64 <strcpy+0x64>
   2ac72:	f85d 4b04 	ldr.w	r4, [sp], #4
   2ac76:	4770      	bx	lr
   2ac78:	f011 0f01 	tst.w	r1, #1
   2ac7c:	d006      	beq.n	2ac8c <strcpy+0x8c>
   2ac7e:	f811 2b01 	ldrb.w	r2, [r1], #1
   2ac82:	f80c 2b01 	strb.w	r2, [ip], #1
   2ac86:	2a00      	cmp	r2, #0
   2ac88:	bf08      	it	eq
   2ac8a:	4770      	bxeq	lr
   2ac8c:	f011 0f02 	tst.w	r1, #2
   2ac90:	d0bf      	beq.n	2ac12 <strcpy+0x12>
   2ac92:	f831 2b02 	ldrh.w	r2, [r1], #2
   2ac96:	f012 0fff 	tst.w	r2, #255	; 0xff
   2ac9a:	bf16      	itet	ne
   2ac9c:	f82c 2b02 	strhne.w	r2, [ip], #2
   2aca0:	f88c 2000 	strbeq.w	r2, [ip]
   2aca4:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   2aca8:	d1b3      	bne.n	2ac12 <strcpy+0x12>
   2acaa:	4770      	bx	lr
   2acac:	f811 2b01 	ldrb.w	r2, [r1], #1
   2acb0:	f80c 2b01 	strb.w	r2, [ip], #1
   2acb4:	2a00      	cmp	r2, #0
   2acb6:	d1f9      	bne.n	2acac <strcpy+0xac>
   2acb8:	4770      	bx	lr
   2acba:	bf00      	nop

0002acbc <strlen>:
   2acbc:	f020 0103 	bic.w	r1, r0, #3
   2acc0:	f010 0003 	ands.w	r0, r0, #3
   2acc4:	f1c0 0000 	rsb	r0, r0, #0
   2acc8:	f851 3b04 	ldr.w	r3, [r1], #4
   2accc:	f100 0c04 	add.w	ip, r0, #4
   2acd0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   2acd4:	f06f 0200 	mvn.w	r2, #0
   2acd8:	bf1c      	itt	ne
   2acda:	fa22 f20c 	lsrne.w	r2, r2, ip
   2acde:	4313      	orrne	r3, r2
   2ace0:	f04f 0c01 	mov.w	ip, #1
   2ace4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   2ace8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   2acec:	eba3 020c 	sub.w	r2, r3, ip
   2acf0:	ea22 0203 	bic.w	r2, r2, r3
   2acf4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   2acf8:	bf04      	itt	eq
   2acfa:	f851 3b04 	ldreq.w	r3, [r1], #4
   2acfe:	3004      	addeq	r0, #4
   2ad00:	d0f4      	beq.n	2acec <strlen+0x30>
   2ad02:	f1c2 0100 	rsb	r1, r2, #0
   2ad06:	ea02 0201 	and.w	r2, r2, r1
   2ad0a:	fab2 f282 	clz	r2, r2
   2ad0e:	f1c2 021f 	rsb	r2, r2, #31
   2ad12:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   2ad16:	4770      	bx	lr

0002ad18 <strncmp>:
   2ad18:	2a00      	cmp	r2, #0
   2ad1a:	d03e      	beq.n	2ad9a <strncmp+0x82>
   2ad1c:	ea40 0301 	orr.w	r3, r0, r1
   2ad20:	f013 0303 	ands.w	r3, r3, #3
   2ad24:	b4f0      	push	{r4, r5, r6, r7}
   2ad26:	d125      	bne.n	2ad74 <strncmp+0x5c>
   2ad28:	2a03      	cmp	r2, #3
   2ad2a:	d923      	bls.n	2ad74 <strncmp+0x5c>
   2ad2c:	6804      	ldr	r4, [r0, #0]
   2ad2e:	680d      	ldr	r5, [r1, #0]
   2ad30:	42ac      	cmp	r4, r5
   2ad32:	d11f      	bne.n	2ad74 <strncmp+0x5c>
   2ad34:	3a04      	subs	r2, #4
   2ad36:	d02d      	beq.n	2ad94 <strncmp+0x7c>
   2ad38:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   2ad3c:	ea25 0404 	bic.w	r4, r5, r4
   2ad40:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2ad44:	d126      	bne.n	2ad94 <strncmp+0x7c>
   2ad46:	1d06      	adds	r6, r0, #4
   2ad48:	1d0d      	adds	r5, r1, #4
   2ad4a:	e00d      	b.n	2ad68 <strncmp+0x50>
   2ad4c:	f856 3b04 	ldr.w	r3, [r6], #4
   2ad50:	680f      	ldr	r7, [r1, #0]
   2ad52:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   2ad56:	42bb      	cmp	r3, r7
   2ad58:	ea24 0303 	bic.w	r3, r4, r3
   2ad5c:	d10a      	bne.n	2ad74 <strncmp+0x5c>
   2ad5e:	3a04      	subs	r2, #4
   2ad60:	d018      	beq.n	2ad94 <strncmp+0x7c>
   2ad62:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2ad66:	d115      	bne.n	2ad94 <strncmp+0x7c>
   2ad68:	2a03      	cmp	r2, #3
   2ad6a:	4629      	mov	r1, r5
   2ad6c:	4630      	mov	r0, r6
   2ad6e:	f105 0504 	add.w	r5, r5, #4
   2ad72:	d8eb      	bhi.n	2ad4c <strncmp+0x34>
   2ad74:	7804      	ldrb	r4, [r0, #0]
   2ad76:	3a01      	subs	r2, #1
   2ad78:	780b      	ldrb	r3, [r1, #0]
   2ad7a:	42a3      	cmp	r3, r4
   2ad7c:	d10f      	bne.n	2ad9e <strncmp+0x86>
   2ad7e:	b14b      	cbz	r3, 2ad94 <strncmp+0x7c>
   2ad80:	b142      	cbz	r2, 2ad94 <strncmp+0x7c>
   2ad82:	f810 4f01 	ldrb.w	r4, [r0, #1]!
   2ad86:	3a01      	subs	r2, #1
   2ad88:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2ad8c:	429c      	cmp	r4, r3
   2ad8e:	d106      	bne.n	2ad9e <strncmp+0x86>
   2ad90:	2c00      	cmp	r4, #0
   2ad92:	d1f5      	bne.n	2ad80 <strncmp+0x68>
   2ad94:	2000      	movs	r0, #0
   2ad96:	bcf0      	pop	{r4, r5, r6, r7}
   2ad98:	4770      	bx	lr
   2ad9a:	4610      	mov	r0, r2
   2ad9c:	4770      	bx	lr
   2ad9e:	1ae0      	subs	r0, r4, r3
   2ada0:	bcf0      	pop	{r4, r5, r6, r7}
   2ada2:	4770      	bx	lr

0002ada4 <strncpy>:
   2ada4:	b470      	push	{r4, r5, r6}
   2ada6:	ea40 0401 	orr.w	r4, r0, r1
   2adaa:	07a3      	lsls	r3, r4, #30
   2adac:	d101      	bne.n	2adb2 <strncpy+0xe>
   2adae:	2a03      	cmp	r2, #3
   2adb0:	d817      	bhi.n	2ade2 <strncpy+0x3e>
   2adb2:	4606      	mov	r6, r0
   2adb4:	b19a      	cbz	r2, 2adde <strncpy+0x3a>
   2adb6:	780c      	ldrb	r4, [r1, #0]
   2adb8:	3a01      	subs	r2, #1
   2adba:	1c73      	adds	r3, r6, #1
   2adbc:	7034      	strb	r4, [r6, #0]
   2adbe:	b13c      	cbz	r4, 2add0 <strncpy+0x2c>
   2adc0:	b16a      	cbz	r2, 2adde <strncpy+0x3a>
   2adc2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2adc6:	3a01      	subs	r2, #1
   2adc8:	f803 4b01 	strb.w	r4, [r3], #1
   2adcc:	2c00      	cmp	r4, #0
   2adce:	d1f7      	bne.n	2adc0 <strncpy+0x1c>
   2add0:	b12a      	cbz	r2, 2adde <strncpy+0x3a>
   2add2:	441a      	add	r2, r3
   2add4:	2100      	movs	r1, #0
   2add6:	f803 1b01 	strb.w	r1, [r3], #1
   2adda:	4293      	cmp	r3, r2
   2addc:	d1fb      	bne.n	2add6 <strncpy+0x32>
   2adde:	bc70      	pop	{r4, r5, r6}
   2ade0:	4770      	bx	lr
   2ade2:	460b      	mov	r3, r1
   2ade4:	4606      	mov	r6, r0
   2ade6:	4619      	mov	r1, r3
   2ade8:	f853 5b04 	ldr.w	r5, [r3], #4
   2adec:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   2adf0:	ea24 0405 	bic.w	r4, r4, r5
   2adf4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2adf8:	d1dd      	bne.n	2adb6 <strncpy+0x12>
   2adfa:	3a04      	subs	r2, #4
   2adfc:	f846 5b04 	str.w	r5, [r6], #4
   2ae00:	4619      	mov	r1, r3
   2ae02:	2a03      	cmp	r2, #3
   2ae04:	d8ef      	bhi.n	2ade6 <strncpy+0x42>
   2ae06:	e7d5      	b.n	2adb4 <strncpy+0x10>

0002ae08 <critical_factorization>:
   2ae08:	f04f 0c01 	mov.w	ip, #1
   2ae0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ae10:	4664      	mov	r4, ip
   2ae12:	2600      	movs	r6, #0
   2ae14:	f04f 35ff 	mov.w	r5, #4294967295
   2ae18:	1933      	adds	r3, r6, r4
   2ae1a:	1947      	adds	r7, r0, r5
   2ae1c:	428b      	cmp	r3, r1
   2ae1e:	d20c      	bcs.n	2ae3a <critical_factorization+0x32>
   2ae20:	5d3f      	ldrb	r7, [r7, r4]
   2ae22:	f810 e003 	ldrb.w	lr, [r0, r3]
   2ae26:	45be      	cmp	lr, r7
   2ae28:	d22c      	bcs.n	2ae84 <critical_factorization+0x7c>
   2ae2a:	461e      	mov	r6, r3
   2ae2c:	2401      	movs	r4, #1
   2ae2e:	eba3 0c05 	sub.w	ip, r3, r5
   2ae32:	1947      	adds	r7, r0, r5
   2ae34:	1933      	adds	r3, r6, r4
   2ae36:	428b      	cmp	r3, r1
   2ae38:	d3f2      	bcc.n	2ae20 <critical_factorization+0x18>
   2ae3a:	f04f 0801 	mov.w	r8, #1
   2ae3e:	2600      	movs	r6, #0
   2ae40:	f04f 37ff 	mov.w	r7, #4294967295
   2ae44:	f8c2 c000 	str.w	ip, [r2]
   2ae48:	4644      	mov	r4, r8
   2ae4a:	1933      	adds	r3, r6, r4
   2ae4c:	eb00 0c07 	add.w	ip, r0, r7
   2ae50:	428b      	cmp	r3, r1
   2ae52:	d20e      	bcs.n	2ae72 <critical_factorization+0x6a>
   2ae54:	f81c c004 	ldrb.w	ip, [ip, r4]
   2ae58:	f810 e003 	ldrb.w	lr, [r0, r3]
   2ae5c:	45e6      	cmp	lr, ip
   2ae5e:	d918      	bls.n	2ae92 <critical_factorization+0x8a>
   2ae60:	461e      	mov	r6, r3
   2ae62:	2401      	movs	r4, #1
   2ae64:	eba3 0807 	sub.w	r8, r3, r7
   2ae68:	eb00 0c07 	add.w	ip, r0, r7
   2ae6c:	1933      	adds	r3, r6, r4
   2ae6e:	428b      	cmp	r3, r1
   2ae70:	d3f0      	bcc.n	2ae54 <critical_factorization+0x4c>
   2ae72:	3701      	adds	r7, #1
   2ae74:	1c68      	adds	r0, r5, #1
   2ae76:	4287      	cmp	r7, r0
   2ae78:	d302      	bcc.n	2ae80 <critical_factorization+0x78>
   2ae7a:	4638      	mov	r0, r7
   2ae7c:	f8c2 8000 	str.w	r8, [r2]
   2ae80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ae84:	d00c      	beq.n	2aea0 <critical_factorization+0x98>
   2ae86:	f04f 0c01 	mov.w	ip, #1
   2ae8a:	4635      	mov	r5, r6
   2ae8c:	4664      	mov	r4, ip
   2ae8e:	4466      	add	r6, ip
   2ae90:	e7c2      	b.n	2ae18 <critical_factorization+0x10>
   2ae92:	d00c      	beq.n	2aeae <critical_factorization+0xa6>
   2ae94:	f04f 0801 	mov.w	r8, #1
   2ae98:	4637      	mov	r7, r6
   2ae9a:	4644      	mov	r4, r8
   2ae9c:	4446      	add	r6, r8
   2ae9e:	e7d4      	b.n	2ae4a <critical_factorization+0x42>
   2aea0:	4564      	cmp	r4, ip
   2aea2:	f104 0401 	add.w	r4, r4, #1
   2aea6:	d1b7      	bne.n	2ae18 <critical_factorization+0x10>
   2aea8:	461e      	mov	r6, r3
   2aeaa:	2401      	movs	r4, #1
   2aeac:	e7b4      	b.n	2ae18 <critical_factorization+0x10>
   2aeae:	4544      	cmp	r4, r8
   2aeb0:	f104 0401 	add.w	r4, r4, #1
   2aeb4:	d1c9      	bne.n	2ae4a <critical_factorization+0x42>
   2aeb6:	461e      	mov	r6, r3
   2aeb8:	2401      	movs	r4, #1
   2aeba:	e7c6      	b.n	2ae4a <critical_factorization+0x42>

0002aebc <two_way_long_needle>:
   2aebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aec0:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
   2aec4:	4691      	mov	r9, r2
   2aec6:	4605      	mov	r5, r0
   2aec8:	468b      	mov	fp, r1
   2aeca:	4610      	mov	r0, r2
   2aecc:	4619      	mov	r1, r3
   2aece:	aa05      	add	r2, sp, #20
   2aed0:	461c      	mov	r4, r3
   2aed2:	f7ff ff99 	bl	2ae08 <critical_factorization>
   2aed6:	ab05      	add	r3, sp, #20
   2aed8:	4680      	mov	r8, r0
   2aeda:	f20d 4214 	addw	r2, sp, #1044	; 0x414
   2aede:	f843 4f04 	str.w	r4, [r3, #4]!
   2aee2:	4293      	cmp	r3, r2
   2aee4:	d1fb      	bne.n	2aede <two_way_long_needle+0x22>
   2aee6:	9b05      	ldr	r3, [sp, #20]
   2aee8:	eb09 0103 	add.w	r1, r9, r3
   2aeec:	2c00      	cmp	r4, #0
   2aeee:	f000 80e0 	beq.w	2b0b2 <_flash_used+0x16a>
   2aef2:	f104 3aff 	add.w	sl, r4, #4294967295
   2aef6:	f109 32ff 	add.w	r2, r9, #4294967295
   2aefa:	4653      	mov	r3, sl
   2aefc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2af00:	ae06      	add	r6, sp, #24
   2af02:	f846 3020 	str.w	r3, [r6, r0, lsl #2]
   2af06:	f113 33ff 	adds.w	r3, r3, #4294967295
   2af0a:	d2f7      	bcs.n	2aefc <two_way_long_needle+0x40>
   2af0c:	4642      	mov	r2, r8
   2af0e:	4648      	mov	r0, r9
   2af10:	f7ff fc58 	bl	2a7c4 <memcmp>
   2af14:	2800      	cmp	r0, #0
   2af16:	d063      	beq.n	2afe0 <_flash_used+0x98>
   2af18:	eba4 0208 	sub.w	r2, r4, r8
   2af1c:	f108 37ff 	add.w	r7, r8, #4294967295
   2af20:	f04f 0a00 	mov.w	sl, #0
   2af24:	4542      	cmp	r2, r8
   2af26:	eb09 0307 	add.w	r3, r9, r7
   2af2a:	bf38      	it	cc
   2af2c:	4642      	movcc	r2, r8
   2af2e:	3201      	adds	r2, #1
   2af30:	9205      	str	r2, [sp, #20]
   2af32:	465a      	mov	r2, fp
   2af34:	46c3      	mov	fp, r8
   2af36:	4698      	mov	r8, r3
   2af38:	eb0a 0604 	add.w	r6, sl, r4
   2af3c:	18a8      	adds	r0, r5, r2
   2af3e:	2100      	movs	r1, #0
   2af40:	1ab2      	subs	r2, r6, r2
   2af42:	f002 f869 	bl	2d018 <memchr>
   2af46:	2e00      	cmp	r6, #0
   2af48:	d045      	beq.n	2afd6 <_flash_used+0x8e>
   2af4a:	2800      	cmp	r0, #0
   2af4c:	d143      	bne.n	2afd6 <_flash_used+0x8e>
   2af4e:	19ab      	adds	r3, r5, r6
   2af50:	aa06      	add	r2, sp, #24
   2af52:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2af56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2af5a:	bb9b      	cbnz	r3, 2afc4 <_flash_used+0x7c>
   2af5c:	1e61      	subs	r1, r4, #1
   2af5e:	458b      	cmp	fp, r1
   2af60:	d215      	bcs.n	2af8e <_flash_used+0x46>
   2af62:	eb0a 020b 	add.w	r2, sl, fp
   2af66:	f819 300b 	ldrb.w	r3, [r9, fp]
   2af6a:	eb09 000b 	add.w	r0, r9, fp
   2af6e:	f815 c002 	ldrb.w	ip, [r5, r2]
   2af72:	442a      	add	r2, r5
   2af74:	4563      	cmp	r3, ip
   2af76:	465b      	mov	r3, fp
   2af78:	d006      	beq.n	2af88 <_flash_used+0x40>
   2af7a:	e026      	b.n	2afca <_flash_used+0x82>
   2af7c:	f810 ef01 	ldrb.w	lr, [r0, #1]!
   2af80:	f812 cf01 	ldrb.w	ip, [r2, #1]!
   2af84:	45e6      	cmp	lr, ip
   2af86:	d120      	bne.n	2afca <_flash_used+0x82>
   2af88:	3301      	adds	r3, #1
   2af8a:	428b      	cmp	r3, r1
   2af8c:	d3f6      	bcc.n	2af7c <_flash_used+0x34>
   2af8e:	1c7b      	adds	r3, r7, #1
   2af90:	d011      	beq.n	2afb6 <_flash_used+0x6e>
   2af92:	eb0a 0307 	add.w	r3, sl, r7
   2af96:	f898 0000 	ldrb.w	r0, [r8]
   2af9a:	5ce9      	ldrb	r1, [r5, r3]
   2af9c:	18ea      	adds	r2, r5, r3
   2af9e:	4288      	cmp	r0, r1
   2afa0:	d10f      	bne.n	2afc2 <_flash_used+0x7a>
   2afa2:	4643      	mov	r3, r8
   2afa4:	e005      	b.n	2afb2 <_flash_used+0x6a>
   2afa6:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2afaa:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2afae:	4288      	cmp	r0, r1
   2afb0:	d107      	bne.n	2afc2 <_flash_used+0x7a>
   2afb2:	4599      	cmp	r9, r3
   2afb4:	d1f7      	bne.n	2afa6 <_flash_used+0x5e>
   2afb6:	eb05 000a 	add.w	r0, r5, sl
   2afba:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   2afbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2afc2:	9b05      	ldr	r3, [sp, #20]
   2afc4:	449a      	add	sl, r3
   2afc6:	4632      	mov	r2, r6
   2afc8:	e7b6      	b.n	2af38 <two_way_long_needle+0x7c>
   2afca:	f1cb 0201 	rsb	r2, fp, #1
   2afce:	4492      	add	sl, r2
   2afd0:	4632      	mov	r2, r6
   2afd2:	449a      	add	sl, r3
   2afd4:	e7b0      	b.n	2af38 <two_way_long_needle+0x7c>
   2afd6:	2000      	movs	r0, #0
   2afd8:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   2afdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2afe0:	f108 33ff 	add.w	r3, r8, #4294967295
   2afe4:	f8cd 9004 	str.w	r9, [sp, #4]
   2afe8:	4606      	mov	r6, r0
   2afea:	465a      	mov	r2, fp
   2afec:	9303      	str	r3, [sp, #12]
   2afee:	444b      	add	r3, r9
   2aff0:	46a1      	mov	r9, r4
   2aff2:	4604      	mov	r4, r0
   2aff4:	9302      	str	r3, [sp, #8]
   2aff6:	eb06 0709 	add.w	r7, r6, r9
   2affa:	18a8      	adds	r0, r5, r2
   2affc:	2100      	movs	r1, #0
   2affe:	1aba      	subs	r2, r7, r2
   2b000:	f002 f80a 	bl	2d018 <memchr>
   2b004:	2800      	cmp	r0, #0
   2b006:	d1e6      	bne.n	2afd6 <_flash_used+0x8e>
   2b008:	2f00      	cmp	r7, #0
   2b00a:	d0e4      	beq.n	2afd6 <_flash_used+0x8e>
   2b00c:	19eb      	adds	r3, r5, r7
   2b00e:	aa06      	add	r2, sp, #24
   2b010:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2b014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2b018:	b14b      	cbz	r3, 2b02e <_flash_used+0xe6>
   2b01a:	b124      	cbz	r4, 2b026 <_flash_used+0xde>
   2b01c:	9a05      	ldr	r2, [sp, #20]
   2b01e:	429a      	cmp	r2, r3
   2b020:	bf88      	it	hi
   2b022:	eba9 0302 	subhi.w	r3, r9, r2
   2b026:	441e      	add	r6, r3
   2b028:	2400      	movs	r4, #0
   2b02a:	463a      	mov	r2, r7
   2b02c:	e7e3      	b.n	2aff6 <_flash_used+0xae>
   2b02e:	4544      	cmp	r4, r8
   2b030:	4623      	mov	r3, r4
   2b032:	bf38      	it	cc
   2b034:	4643      	movcc	r3, r8
   2b036:	4553      	cmp	r3, sl
   2b038:	d212      	bcs.n	2b060 <_flash_used+0x118>
   2b03a:	18f2      	adds	r2, r6, r3
   2b03c:	9901      	ldr	r1, [sp, #4]
   2b03e:	5ca8      	ldrb	r0, [r5, r2]
   2b040:	442a      	add	r2, r5
   2b042:	f811 c003 	ldrb.w	ip, [r1, r3]
   2b046:	4419      	add	r1, r3
   2b048:	4584      	cmp	ip, r0
   2b04a:	d006      	beq.n	2b05a <_flash_used+0x112>
   2b04c:	e02a      	b.n	2b0a4 <_flash_used+0x15c>
   2b04e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   2b052:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2b056:	4584      	cmp	ip, r0
   2b058:	d124      	bne.n	2b0a4 <_flash_used+0x15c>
   2b05a:	3301      	adds	r3, #1
   2b05c:	4553      	cmp	r3, sl
   2b05e:	d1f6      	bne.n	2b04e <_flash_used+0x106>
   2b060:	9b03      	ldr	r3, [sp, #12]
   2b062:	4544      	cmp	r4, r8
   2b064:	4619      	mov	r1, r3
   2b066:	d234      	bcs.n	2b0d2 <_flash_used+0x18a>
   2b068:	18f3      	adds	r3, r6, r3
   2b06a:	9a02      	ldr	r2, [sp, #8]
   2b06c:	5ce8      	ldrb	r0, [r5, r3]
   2b06e:	442b      	add	r3, r5
   2b070:	7812      	ldrb	r2, [r2, #0]
   2b072:	4290      	cmp	r0, r2
   2b074:	d12d      	bne.n	2b0d2 <_flash_used+0x18a>
   2b076:	9802      	ldr	r0, [sp, #8]
   2b078:	f104 3bff 	add.w	fp, r4, #4294967295
   2b07c:	e006      	b.n	2b08c <_flash_used+0x144>
   2b07e:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
   2b082:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   2b086:	45e6      	cmp	lr, ip
   2b088:	d103      	bne.n	2b092 <_flash_used+0x14a>
   2b08a:	4611      	mov	r1, r2
   2b08c:	1e4a      	subs	r2, r1, #1
   2b08e:	4593      	cmp	fp, r2
   2b090:	d1f5      	bne.n	2b07e <_flash_used+0x136>
   2b092:	3401      	adds	r4, #1
   2b094:	428c      	cmp	r4, r1
   2b096:	d81e      	bhi.n	2b0d6 <_flash_used+0x18e>
   2b098:	9c05      	ldr	r4, [sp, #20]
   2b09a:	463a      	mov	r2, r7
   2b09c:	4426      	add	r6, r4
   2b09e:	eba9 0404 	sub.w	r4, r9, r4
   2b0a2:	e7a8      	b.n	2aff6 <_flash_used+0xae>
   2b0a4:	f1c8 0201 	rsb	r2, r8, #1
   2b0a8:	2400      	movs	r4, #0
   2b0aa:	4416      	add	r6, r2
   2b0ac:	463a      	mov	r2, r7
   2b0ae:	441e      	add	r6, r3
   2b0b0:	e7a1      	b.n	2aff6 <_flash_used+0xae>
   2b0b2:	4642      	mov	r2, r8
   2b0b4:	4648      	mov	r0, r9
   2b0b6:	f7ff fb85 	bl	2a7c4 <memcmp>
   2b0ba:	2800      	cmp	r0, #0
   2b0bc:	f47f af2c 	bne.w	2af18 <two_way_long_needle+0x5c>
   2b0c0:	eb05 000b 	add.w	r0, r5, fp
   2b0c4:	f1cb 0200 	rsb	r2, fp, #0
   2b0c8:	4621      	mov	r1, r4
   2b0ca:	f001 ffa5 	bl	2d018 <memchr>
   2b0ce:	4620      	mov	r0, r4
   2b0d0:	e782      	b.n	2afd8 <_flash_used+0x90>
   2b0d2:	4641      	mov	r1, r8
   2b0d4:	e7dd      	b.n	2b092 <_flash_used+0x14a>
   2b0d6:	19a8      	adds	r0, r5, r6
   2b0d8:	e77e      	b.n	2afd8 <_flash_used+0x90>
   2b0da:	bf00      	nop

0002b0dc <strstr>:
   2b0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b0e0:	7802      	ldrb	r2, [r0, #0]
   2b0e2:	460e      	mov	r6, r1
   2b0e4:	b085      	sub	sp, #20
   2b0e6:	4605      	mov	r5, r0
   2b0e8:	7809      	ldrb	r1, [r1, #0]
   2b0ea:	2a00      	cmp	r2, #0
   2b0ec:	f000 809a 	beq.w	2b224 <strstr+0x148>
   2b0f0:	b1a1      	cbz	r1, 2b11c <strstr+0x40>
   2b0f2:	4684      	mov	ip, r0
   2b0f4:	1c74      	adds	r4, r6, #1
   2b0f6:	4608      	mov	r0, r1
   2b0f8:	2701      	movs	r7, #1
   2b0fa:	e001      	b.n	2b100 <strstr+0x24>
   2b0fc:	b168      	cbz	r0, 2b11a <strstr+0x3e>
   2b0fe:	461c      	mov	r4, r3
   2b100:	4290      	cmp	r0, r2
   2b102:	bf14      	ite	ne
   2b104:	2700      	movne	r7, #0
   2b106:	f007 0701 	andeq.w	r7, r7, #1
   2b10a:	4623      	mov	r3, r4
   2b10c:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
   2b110:	f813 0b01 	ldrb.w	r0, [r3], #1
   2b114:	2a00      	cmp	r2, #0
   2b116:	d1f1      	bne.n	2b0fc <strstr+0x20>
   2b118:	bb08      	cbnz	r0, 2b15e <strstr+0x82>
   2b11a:	b11f      	cbz	r7, 2b124 <strstr+0x48>
   2b11c:	4628      	mov	r0, r5
   2b11e:	b005      	add	sp, #20
   2b120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b124:	1c68      	adds	r0, r5, #1
   2b126:	1ba4      	subs	r4, r4, r6
   2b128:	f7ff fcf4 	bl	2ab14 <strchr>
   2b12c:	4607      	mov	r7, r0
   2b12e:	b188      	cbz	r0, 2b154 <strstr+0x78>
   2b130:	2c01      	cmp	r4, #1
   2b132:	d00f      	beq.n	2b154 <strstr+0x78>
   2b134:	4425      	add	r5, r4
   2b136:	4285      	cmp	r5, r0
   2b138:	bf2c      	ite	cs
   2b13a:	eba5 0900 	subcs.w	r9, r5, r0
   2b13e:	f04f 0901 	movcc.w	r9, #1
   2b142:	2c1f      	cmp	r4, #31
   2b144:	d910      	bls.n	2b168 <strstr+0x8c>
   2b146:	4623      	mov	r3, r4
   2b148:	4632      	mov	r2, r6
   2b14a:	4649      	mov	r1, r9
   2b14c:	f7ff feb6 	bl	2aebc <two_way_long_needle>
   2b150:	4605      	mov	r5, r0
   2b152:	e7e3      	b.n	2b11c <strstr+0x40>
   2b154:	463d      	mov	r5, r7
   2b156:	4628      	mov	r0, r5
   2b158:	b005      	add	sp, #20
   2b15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b15e:	2500      	movs	r5, #0
   2b160:	4628      	mov	r0, r5
   2b162:	b005      	add	sp, #20
   2b164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b168:	aa03      	add	r2, sp, #12
   2b16a:	4621      	mov	r1, r4
   2b16c:	4630      	mov	r0, r6
   2b16e:	f7ff fe4b 	bl	2ae08 <critical_factorization>
   2b172:	9903      	ldr	r1, [sp, #12]
   2b174:	4680      	mov	r8, r0
   2b176:	4630      	mov	r0, r6
   2b178:	4431      	add	r1, r6
   2b17a:	4642      	mov	r2, r8
   2b17c:	f7ff fb22 	bl	2a7c4 <memcmp>
   2b180:	2800      	cmp	r0, #0
   2b182:	d153      	bne.n	2b22c <strstr+0x150>
   2b184:	f108 33ff 	add.w	r3, r8, #4294967295
   2b188:	4682      	mov	sl, r0
   2b18a:	4605      	mov	r5, r0
   2b18c:	464a      	mov	r2, r9
   2b18e:	9301      	str	r3, [sp, #4]
   2b190:	46b3      	mov	fp, r6
   2b192:	18f3      	adds	r3, r6, r3
   2b194:	9300      	str	r3, [sp, #0]
   2b196:	1966      	adds	r6, r4, r5
   2b198:	18b8      	adds	r0, r7, r2
   2b19a:	2100      	movs	r1, #0
   2b19c:	1ab2      	subs	r2, r6, r2
   2b19e:	f001 ff3b 	bl	2d018 <memchr>
   2b1a2:	2800      	cmp	r0, #0
   2b1a4:	d1db      	bne.n	2b15e <strstr+0x82>
   2b1a6:	2e00      	cmp	r6, #0
   2b1a8:	d0d9      	beq.n	2b15e <strstr+0x82>
   2b1aa:	45d0      	cmp	r8, sl
   2b1ac:	4643      	mov	r3, r8
   2b1ae:	bf38      	it	cc
   2b1b0:	4653      	movcc	r3, sl
   2b1b2:	429c      	cmp	r4, r3
   2b1b4:	d913      	bls.n	2b1de <strstr+0x102>
   2b1b6:	195a      	adds	r2, r3, r5
   2b1b8:	f81b 0003 	ldrb.w	r0, [fp, r3]
   2b1bc:	eb0b 0103 	add.w	r1, fp, r3
   2b1c0:	f817 c002 	ldrb.w	ip, [r7, r2]
   2b1c4:	443a      	add	r2, r7
   2b1c6:	4584      	cmp	ip, r0
   2b1c8:	d006      	beq.n	2b1d8 <strstr+0xfc>
   2b1ca:	e077      	b.n	2b2bc <strstr+0x1e0>
   2b1cc:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   2b1d0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2b1d4:	4584      	cmp	ip, r0
   2b1d6:	d171      	bne.n	2b2bc <strstr+0x1e0>
   2b1d8:	3301      	adds	r3, #1
   2b1da:	429c      	cmp	r4, r3
   2b1dc:	d1f6      	bne.n	2b1cc <strstr+0xf0>
   2b1de:	9b01      	ldr	r3, [sp, #4]
   2b1e0:	45d0      	cmp	r8, sl
   2b1e2:	4619      	mov	r1, r3
   2b1e4:	d97c      	bls.n	2b2e0 <strstr+0x204>
   2b1e6:	18eb      	adds	r3, r5, r3
   2b1e8:	9a00      	ldr	r2, [sp, #0]
   2b1ea:	5cf8      	ldrb	r0, [r7, r3]
   2b1ec:	443b      	add	r3, r7
   2b1ee:	7812      	ldrb	r2, [r2, #0]
   2b1f0:	4282      	cmp	r2, r0
   2b1f2:	d175      	bne.n	2b2e0 <strstr+0x204>
   2b1f4:	9800      	ldr	r0, [sp, #0]
   2b1f6:	f10a 39ff 	add.w	r9, sl, #4294967295
   2b1fa:	e006      	b.n	2b20a <strstr+0x12e>
   2b1fc:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
   2b200:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   2b204:	45e6      	cmp	lr, ip
   2b206:	d103      	bne.n	2b210 <strstr+0x134>
   2b208:	4611      	mov	r1, r2
   2b20a:	1e4a      	subs	r2, r1, #1
   2b20c:	454a      	cmp	r2, r9
   2b20e:	d1f5      	bne.n	2b1fc <strstr+0x120>
   2b210:	f10a 0a01 	add.w	sl, sl, #1
   2b214:	458a      	cmp	sl, r1
   2b216:	d84f      	bhi.n	2b2b8 <strstr+0x1dc>
   2b218:	9b03      	ldr	r3, [sp, #12]
   2b21a:	4632      	mov	r2, r6
   2b21c:	441d      	add	r5, r3
   2b21e:	eba4 0a03 	sub.w	sl, r4, r3
   2b222:	e7b8      	b.n	2b196 <strstr+0xba>
   2b224:	2900      	cmp	r1, #0
   2b226:	bf18      	it	ne
   2b228:	2500      	movne	r5, #0
   2b22a:	e777      	b.n	2b11c <strstr+0x40>
   2b22c:	eba4 0308 	sub.w	r3, r4, r8
   2b230:	f108 3aff 	add.w	sl, r8, #4294967295
   2b234:	464a      	mov	r2, r9
   2b236:	2500      	movs	r5, #0
   2b238:	4543      	cmp	r3, r8
   2b23a:	eb06 010a 	add.w	r1, r6, sl
   2b23e:	46b3      	mov	fp, r6
   2b240:	bf38      	it	cc
   2b242:	4643      	movcc	r3, r8
   2b244:	4689      	mov	r9, r1
   2b246:	3301      	adds	r3, #1
   2b248:	9303      	str	r3, [sp, #12]
   2b24a:	1966      	adds	r6, r4, r5
   2b24c:	18b8      	adds	r0, r7, r2
   2b24e:	2100      	movs	r1, #0
   2b250:	1ab2      	subs	r2, r6, r2
   2b252:	f001 fee1 	bl	2d018 <memchr>
   2b256:	2e00      	cmp	r6, #0
   2b258:	d081      	beq.n	2b15e <strstr+0x82>
   2b25a:	2800      	cmp	r0, #0
   2b25c:	f47f af7f 	bne.w	2b15e <strstr+0x82>
   2b260:	4544      	cmp	r4, r8
   2b262:	d914      	bls.n	2b28e <strstr+0x1b2>
   2b264:	eb08 0205 	add.w	r2, r8, r5
   2b268:	f81b 0008 	ldrb.w	r0, [fp, r8]
   2b26c:	eb0b 0108 	add.w	r1, fp, r8
   2b270:	5cbb      	ldrb	r3, [r7, r2]
   2b272:	443a      	add	r2, r7
   2b274:	4298      	cmp	r0, r3
   2b276:	4643      	mov	r3, r8
   2b278:	d006      	beq.n	2b288 <strstr+0x1ac>
   2b27a:	e027      	b.n	2b2cc <strstr+0x1f0>
   2b27c:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   2b280:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2b284:	4584      	cmp	ip, r0
   2b286:	d121      	bne.n	2b2cc <strstr+0x1f0>
   2b288:	3301      	adds	r3, #1
   2b28a:	429c      	cmp	r4, r3
   2b28c:	d1f6      	bne.n	2b27c <strstr+0x1a0>
   2b28e:	f1ba 3fff 	cmp.w	sl, #4294967295
   2b292:	d011      	beq.n	2b2b8 <strstr+0x1dc>
   2b294:	eb05 030a 	add.w	r3, r5, sl
   2b298:	f899 2000 	ldrb.w	r2, [r9]
   2b29c:	5cf9      	ldrb	r1, [r7, r3]
   2b29e:	443b      	add	r3, r7
   2b2a0:	4291      	cmp	r1, r2
   2b2a2:	d119      	bne.n	2b2d8 <strstr+0x1fc>
   2b2a4:	464a      	mov	r2, r9
   2b2a6:	e005      	b.n	2b2b4 <strstr+0x1d8>
   2b2a8:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   2b2ac:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   2b2b0:	4288      	cmp	r0, r1
   2b2b2:	d111      	bne.n	2b2d8 <strstr+0x1fc>
   2b2b4:	455a      	cmp	r2, fp
   2b2b6:	d1f7      	bne.n	2b2a8 <strstr+0x1cc>
   2b2b8:	443d      	add	r5, r7
   2b2ba:	e72f      	b.n	2b11c <strstr+0x40>
   2b2bc:	f1c8 0201 	rsb	r2, r8, #1
   2b2c0:	f04f 0a00 	mov.w	sl, #0
   2b2c4:	4415      	add	r5, r2
   2b2c6:	4632      	mov	r2, r6
   2b2c8:	441d      	add	r5, r3
   2b2ca:	e764      	b.n	2b196 <strstr+0xba>
   2b2cc:	f1c8 0201 	rsb	r2, r8, #1
   2b2d0:	4415      	add	r5, r2
   2b2d2:	4632      	mov	r2, r6
   2b2d4:	441d      	add	r5, r3
   2b2d6:	e7b8      	b.n	2b24a <strstr+0x16e>
   2b2d8:	9b03      	ldr	r3, [sp, #12]
   2b2da:	4632      	mov	r2, r6
   2b2dc:	441d      	add	r5, r3
   2b2de:	e7b4      	b.n	2b24a <strstr+0x16e>
   2b2e0:	4641      	mov	r1, r8
   2b2e2:	e795      	b.n	2b210 <strstr+0x134>

0002b2e4 <_strtol_l.isra.0>:
   2b2e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b2e8:	460e      	mov	r6, r1
   2b2ea:	4680      	mov	r8, r0
   2b2ec:	4617      	mov	r7, r2
   2b2ee:	4699      	mov	r9, r3
   2b2f0:	460d      	mov	r5, r1
   2b2f2:	e000      	b.n	2b2f6 <_strtol_l.isra.0+0x12>
   2b2f4:	4625      	mov	r5, r4
   2b2f6:	462c      	mov	r4, r5
   2b2f8:	980a      	ldr	r0, [sp, #40]	; 0x28
   2b2fa:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b2fe:	f7fe ff7b 	bl	2a1f8 <__locale_ctype_ptr_l>
   2b302:	4458      	add	r0, fp
   2b304:	7841      	ldrb	r1, [r0, #1]
   2b306:	f011 0108 	ands.w	r1, r1, #8
   2b30a:	d1f3      	bne.n	2b2f4 <_strtol_l.isra.0+0x10>
   2b30c:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   2b310:	d053      	beq.n	2b3ba <_strtol_l.isra.0+0xd6>
   2b312:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   2b316:	d045      	beq.n	2b3a4 <_strtol_l.isra.0+0xc0>
   2b318:	f039 0310 	bics.w	r3, r9, #16
   2b31c:	d107      	bne.n	2b32e <_strtol_l.isra.0+0x4a>
   2b31e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2b322:	d04f      	beq.n	2b3c4 <_strtol_l.isra.0+0xe0>
   2b324:	f1b9 0f00 	cmp.w	r9, #0
   2b328:	d101      	bne.n	2b32e <_strtol_l.isra.0+0x4a>
   2b32a:	f04f 090a 	mov.w	r9, #10
   2b32e:	464b      	mov	r3, r9
   2b330:	2900      	cmp	r1, #0
   2b332:	f04f 0500 	mov.w	r5, #0
   2b336:	bf0c      	ite	eq
   2b338:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
   2b33c:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
   2b340:	4628      	mov	r0, r5
   2b342:	fbba fcf3 	udiv	ip, sl, r3
   2b346:	fb03 ae1c 	mls	lr, r3, ip, sl
   2b34a:	e00e      	b.n	2b36a <_strtol_l.isra.0+0x86>
   2b34c:	f1ab 0237 	sub.w	r2, fp, #55	; 0x37
   2b350:	4591      	cmp	r9, r2
   2b352:	dd1a      	ble.n	2b38a <_strtol_l.isra.0+0xa6>
   2b354:	2d00      	cmp	r5, #0
   2b356:	db04      	blt.n	2b362 <_strtol_l.isra.0+0x7e>
   2b358:	4584      	cmp	ip, r0
   2b35a:	d302      	bcc.n	2b362 <_strtol_l.isra.0+0x7e>
   2b35c:	d11e      	bne.n	2b39c <_strtol_l.isra.0+0xb8>
   2b35e:	4596      	cmp	lr, r2
   2b360:	da1c      	bge.n	2b39c <_strtol_l.isra.0+0xb8>
   2b362:	f04f 35ff 	mov.w	r5, #4294967295
   2b366:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b36a:	f1ab 0230 	sub.w	r2, fp, #48	; 0x30
   2b36e:	2a09      	cmp	r2, #9
   2b370:	d9ee      	bls.n	2b350 <_strtol_l.isra.0+0x6c>
   2b372:	f1ab 0241 	sub.w	r2, fp, #65	; 0x41
   2b376:	2a19      	cmp	r2, #25
   2b378:	d9e8      	bls.n	2b34c <_strtol_l.isra.0+0x68>
   2b37a:	f1ab 0261 	sub.w	r2, fp, #97	; 0x61
   2b37e:	2a19      	cmp	r2, #25
   2b380:	d803      	bhi.n	2b38a <_strtol_l.isra.0+0xa6>
   2b382:	f1ab 0257 	sub.w	r2, fp, #87	; 0x57
   2b386:	4591      	cmp	r9, r2
   2b388:	dce4      	bgt.n	2b354 <_strtol_l.isra.0+0x70>
   2b38a:	1c6b      	adds	r3, r5, #1
   2b38c:	d00e      	beq.n	2b3ac <_strtol_l.isra.0+0xc8>
   2b38e:	b101      	cbz	r1, 2b392 <_strtol_l.isra.0+0xae>
   2b390:	4240      	negs	r0, r0
   2b392:	b10f      	cbz	r7, 2b398 <_strtol_l.isra.0+0xb4>
   2b394:	bb15      	cbnz	r5, 2b3dc <_strtol_l.isra.0+0xf8>
   2b396:	603e      	str	r6, [r7, #0]
   2b398:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b39c:	fb03 2000 	mla	r0, r3, r0, r2
   2b3a0:	2501      	movs	r5, #1
   2b3a2:	e7e0      	b.n	2b366 <_strtol_l.isra.0+0x82>
   2b3a4:	1cac      	adds	r4, r5, #2
   2b3a6:	f895 b001 	ldrb.w	fp, [r5, #1]
   2b3aa:	e7b5      	b.n	2b318 <_strtol_l.isra.0+0x34>
   2b3ac:	2322      	movs	r3, #34	; 0x22
   2b3ae:	f8c8 3000 	str.w	r3, [r8]
   2b3b2:	b1af      	cbz	r7, 2b3e0 <_strtol_l.isra.0+0xfc>
   2b3b4:	1e66      	subs	r6, r4, #1
   2b3b6:	4650      	mov	r0, sl
   2b3b8:	e7ed      	b.n	2b396 <_strtol_l.isra.0+0xb2>
   2b3ba:	1cac      	adds	r4, r5, #2
   2b3bc:	f895 b001 	ldrb.w	fp, [r5, #1]
   2b3c0:	2101      	movs	r1, #1
   2b3c2:	e7a9      	b.n	2b318 <_strtol_l.isra.0+0x34>
   2b3c4:	7823      	ldrb	r3, [r4, #0]
   2b3c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b3ca:	2b58      	cmp	r3, #88	; 0x58
   2b3cc:	d10a      	bne.n	2b3e4 <_strtol_l.isra.0+0x100>
   2b3ce:	f04f 0910 	mov.w	r9, #16
   2b3d2:	f894 b001 	ldrb.w	fp, [r4, #1]
   2b3d6:	3402      	adds	r4, #2
   2b3d8:	464b      	mov	r3, r9
   2b3da:	e7a9      	b.n	2b330 <_strtol_l.isra.0+0x4c>
   2b3dc:	4682      	mov	sl, r0
   2b3de:	e7e9      	b.n	2b3b4 <_strtol_l.isra.0+0xd0>
   2b3e0:	4650      	mov	r0, sl
   2b3e2:	e7d9      	b.n	2b398 <_strtol_l.isra.0+0xb4>
   2b3e4:	f1b9 0f00 	cmp.w	r9, #0
   2b3e8:	d1a1      	bne.n	2b32e <_strtol_l.isra.0+0x4a>
   2b3ea:	f04f 0908 	mov.w	r9, #8
   2b3ee:	464b      	mov	r3, r9
   2b3f0:	e79e      	b.n	2b330 <_strtol_l.isra.0+0x4c>
   2b3f2:	bf00      	nop

0002b3f4 <strtol>:
   2b3f4:	b570      	push	{r4, r5, r6, lr}
   2b3f6:	4c08      	ldr	r4, [pc, #32]	; (2b418 <strtol+0x24>)
   2b3f8:	b082      	sub	sp, #8
   2b3fa:	4e08      	ldr	r6, [pc, #32]	; (2b41c <strtol+0x28>)
   2b3fc:	4613      	mov	r3, r2
   2b3fe:	6825      	ldr	r5, [r4, #0]
   2b400:	460a      	mov	r2, r1
   2b402:	4601      	mov	r1, r0
   2b404:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2b406:	4628      	mov	r0, r5
   2b408:	2c00      	cmp	r4, #0
   2b40a:	bf08      	it	eq
   2b40c:	4634      	moveq	r4, r6
   2b40e:	9400      	str	r4, [sp, #0]
   2b410:	f7ff ff68 	bl	2b2e4 <_strtol_l.isra.0>
   2b414:	b002      	add	sp, #8
   2b416:	bd70      	pop	{r4, r5, r6, pc}
   2b418:	2002d888 	.word	0x2002d888
   2b41c:	2002d88c 	.word	0x2002d88c

0002b420 <__sprint_r.part.0>:
   2b420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b424:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   2b426:	4692      	mov	sl, r2
   2b428:	049c      	lsls	r4, r3, #18
   2b42a:	d52c      	bpl.n	2b486 <__sprint_r.part.0+0x66>
   2b42c:	6893      	ldr	r3, [r2, #8]
   2b42e:	6812      	ldr	r2, [r2, #0]
   2b430:	b33b      	cbz	r3, 2b482 <__sprint_r.part.0+0x62>
   2b432:	460e      	mov	r6, r1
   2b434:	4607      	mov	r7, r0
   2b436:	f102 0908 	add.w	r9, r2, #8
   2b43a:	e959 5b02 	ldrd	r5, fp, [r9, #-8]
   2b43e:	ea5f 089b 	movs.w	r8, fp, lsr #2
   2b442:	d014      	beq.n	2b46e <__sprint_r.part.0+0x4e>
   2b444:	3d04      	subs	r5, #4
   2b446:	2400      	movs	r4, #0
   2b448:	e001      	b.n	2b44e <__sprint_r.part.0+0x2e>
   2b44a:	45a0      	cmp	r8, r4
   2b44c:	d00d      	beq.n	2b46a <__sprint_r.part.0+0x4a>
   2b44e:	4632      	mov	r2, r6
   2b450:	f855 1f04 	ldr.w	r1, [r5, #4]!
   2b454:	4638      	mov	r0, r7
   2b456:	3401      	adds	r4, #1
   2b458:	f001 fa28 	bl	2c8ac <_fputwc_r>
   2b45c:	1c43      	adds	r3, r0, #1
   2b45e:	d1f4      	bne.n	2b44a <__sprint_r.part.0+0x2a>
   2b460:	2300      	movs	r3, #0
   2b462:	e9ca 3301 	strd	r3, r3, [sl, #4]
   2b466:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b46a:	f8da 3008 	ldr.w	r3, [sl, #8]
   2b46e:	f02b 0b03 	bic.w	fp, fp, #3
   2b472:	f109 0908 	add.w	r9, r9, #8
   2b476:	eba3 030b 	sub.w	r3, r3, fp
   2b47a:	f8ca 3008 	str.w	r3, [sl, #8]
   2b47e:	2b00      	cmp	r3, #0
   2b480:	d1db      	bne.n	2b43a <__sprint_r.part.0+0x1a>
   2b482:	2000      	movs	r0, #0
   2b484:	e7ec      	b.n	2b460 <__sprint_r.part.0+0x40>
   2b486:	f001 fb85 	bl	2cb94 <__sfvwrite_r>
   2b48a:	2300      	movs	r3, #0
   2b48c:	e9ca 3301 	strd	r3, r3, [sl, #4]
   2b490:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b494 <_vfiprintf_r>:
   2b494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b498:	b0bf      	sub	sp, #252	; 0xfc
   2b49a:	461c      	mov	r4, r3
   2b49c:	4692      	mov	sl, r2
   2b49e:	9102      	str	r1, [sp, #8]
   2b4a0:	e9cd 0305 	strd	r0, r3, [sp, #20]
   2b4a4:	b118      	cbz	r0, 2b4ae <_vfiprintf_r+0x1a>
   2b4a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2b4a8:	2b00      	cmp	r3, #0
   2b4aa:	f000 83f0 	beq.w	2bc8e <_vfiprintf_r+0x7fa>
   2b4ae:	9b02      	ldr	r3, [sp, #8]
   2b4b0:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   2b4b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   2b4b6:	b28a      	uxth	r2, r1
   2b4b8:	07df      	lsls	r7, r3, #31
   2b4ba:	d402      	bmi.n	2b4c2 <_vfiprintf_r+0x2e>
   2b4bc:	0596      	lsls	r6, r2, #22
   2b4be:	f140 8540 	bpl.w	2bf42 <_vfiprintf_r+0xaae>
   2b4c2:	0495      	lsls	r5, r2, #18
   2b4c4:	d408      	bmi.n	2b4d8 <_vfiprintf_r+0x44>
   2b4c6:	9802      	ldr	r0, [sp, #8]
   2b4c8:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   2b4cc:	6e43      	ldr	r3, [r0, #100]	; 0x64
   2b4ce:	b28a      	uxth	r2, r1
   2b4d0:	8181      	strh	r1, [r0, #12]
   2b4d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   2b4d6:	6643      	str	r3, [r0, #100]	; 0x64
   2b4d8:	0710      	lsls	r0, r2, #28
   2b4da:	f140 80d5 	bpl.w	2b688 <_vfiprintf_r+0x1f4>
   2b4de:	9b02      	ldr	r3, [sp, #8]
   2b4e0:	691b      	ldr	r3, [r3, #16]
   2b4e2:	2b00      	cmp	r3, #0
   2b4e4:	f000 80d0 	beq.w	2b688 <_vfiprintf_r+0x1f4>
   2b4e8:	f002 031a 	and.w	r3, r2, #26
   2b4ec:	2b0a      	cmp	r3, #10
   2b4ee:	f000 83b5 	beq.w	2bc5c <_vfiprintf_r+0x7c8>
   2b4f2:	f10d 0b54 	add.w	fp, sp, #84	; 0x54
   2b4f6:	2300      	movs	r3, #0
   2b4f8:	46d9      	mov	r9, fp
   2b4fa:	930b      	str	r3, [sp, #44]	; 0x2c
   2b4fc:	9314      	str	r3, [sp, #80]	; 0x50
   2b4fe:	930c      	str	r3, [sp, #48]	; 0x30
   2b500:	9304      	str	r3, [sp, #16]
   2b502:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   2b506:	e9cd b312 	strd	fp, r3, [sp, #72]	; 0x48
   2b50a:	f89a 3000 	ldrb.w	r3, [sl]
   2b50e:	4654      	mov	r4, sl
   2b510:	2b25      	cmp	r3, #37	; 0x25
   2b512:	d01c      	beq.n	2b54e <_vfiprintf_r+0xba>
   2b514:	b913      	cbnz	r3, 2b51c <_vfiprintf_r+0x88>
   2b516:	e01a      	b.n	2b54e <_vfiprintf_r+0xba>
   2b518:	2b25      	cmp	r3, #37	; 0x25
   2b51a:	d003      	beq.n	2b524 <_vfiprintf_r+0x90>
   2b51c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2b520:	2b00      	cmp	r3, #0
   2b522:	d1f9      	bne.n	2b518 <_vfiprintf_r+0x84>
   2b524:	ebb4 050a 	subs.w	r5, r4, sl
   2b528:	d011      	beq.n	2b54e <_vfiprintf_r+0xba>
   2b52a:	f8c9 a000 	str.w	sl, [r9]
   2b52e:	f8c9 5004 	str.w	r5, [r9, #4]
   2b532:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   2b536:	3301      	adds	r3, #1
   2b538:	442a      	add	r2, r5
   2b53a:	2b07      	cmp	r3, #7
   2b53c:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
   2b540:	f300 80b9 	bgt.w	2b6b6 <_vfiprintf_r+0x222>
   2b544:	f109 0908 	add.w	r9, r9, #8
   2b548:	9b04      	ldr	r3, [sp, #16]
   2b54a:	442b      	add	r3, r5
   2b54c:	9304      	str	r3, [sp, #16]
   2b54e:	7823      	ldrb	r3, [r4, #0]
   2b550:	2b00      	cmp	r3, #0
   2b552:	f000 8478 	beq.w	2be46 <_vfiprintf_r+0x9b2>
   2b556:	f04f 0300 	mov.w	r3, #0
   2b55a:	2700      	movs	r7, #0
   2b55c:	f104 0a01 	add.w	sl, r4, #1
   2b560:	f04f 38ff 	mov.w	r8, #4294967295
   2b564:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   2b568:	463e      	mov	r6, r7
   2b56a:	7863      	ldrb	r3, [r4, #1]
   2b56c:	252b      	movs	r5, #43	; 0x2b
   2b56e:	f10a 0a01 	add.w	sl, sl, #1
   2b572:	f1a3 0220 	sub.w	r2, r3, #32
   2b576:	2a5a      	cmp	r2, #90	; 0x5a
   2b578:	f200 838c 	bhi.w	2bc94 <_vfiprintf_r+0x800>
   2b57c:	e8df f012 	tbh	[pc, r2, lsl #1]
   2b580:	038a0320 	.word	0x038a0320
   2b584:	031b038a 	.word	0x031b038a
   2b588:	038a038a 	.word	0x038a038a
   2b58c:	032b038a 	.word	0x032b038a
   2b590:	038a038a 	.word	0x038a038a
   2b594:	02fc0249 	.word	0x02fc0249
   2b598:	02f7038a 	.word	0x02f7038a
   2b59c:	038a02dd 	.word	0x038a02dd
   2b5a0:	010502d8 	.word	0x010502d8
   2b5a4:	01050105 	.word	0x01050105
   2b5a8:	01050105 	.word	0x01050105
   2b5ac:	01050105 	.word	0x01050105
   2b5b0:	01050105 	.word	0x01050105
   2b5b4:	038a038a 	.word	0x038a038a
   2b5b8:	038a038a 	.word	0x038a038a
   2b5bc:	038a038a 	.word	0x038a038a
   2b5c0:	038a038a 	.word	0x038a038a
   2b5c4:	0125038a 	.word	0x0125038a
   2b5c8:	038a0301 	.word	0x038a0301
   2b5cc:	038a038a 	.word	0x038a038a
   2b5d0:	038a038a 	.word	0x038a038a
   2b5d4:	038a038a 	.word	0x038a038a
   2b5d8:	038a038a 	.word	0x038a038a
   2b5dc:	0071038a 	.word	0x0071038a
   2b5e0:	038a038a 	.word	0x038a038a
   2b5e4:	02ba038a 	.word	0x02ba038a
   2b5e8:	0060038a 	.word	0x0060038a
   2b5ec:	038a038a 	.word	0x038a038a
   2b5f0:	038a0113 	.word	0x038a0113
   2b5f4:	038a038a 	.word	0x038a038a
   2b5f8:	038a038a 	.word	0x038a038a
   2b5fc:	038a038a 	.word	0x038a038a
   2b600:	038a038a 	.word	0x038a038a
   2b604:	0125038a 	.word	0x0125038a
   2b608:	038a00bf 	.word	0x038a00bf
   2b60c:	038a038a 	.word	0x038a038a
   2b610:	00bf02b2 	.word	0x00bf02b2
   2b614:	038a005b 	.word	0x038a005b
   2b618:	038a02aa 	.word	0x038a02aa
   2b61c:	00730297 	.word	0x00730297
   2b620:	005b0253 	.word	0x005b0253
   2b624:	02ba038a 	.word	0x02ba038a
   2b628:	0062005d 	.word	0x0062005d
   2b62c:	038a038a 	.word	0x038a038a
   2b630:	038a00a1 	.word	0x038a00a1
   2b634:	005d      	.short	0x005d
   2b636:	f046 0620 	orr.w	r6, r6, #32
   2b63a:	f89a 3000 	ldrb.w	r3, [sl]
   2b63e:	e796      	b.n	2b56e <_vfiprintf_r+0xda>
   2b640:	f046 0610 	orr.w	r6, r6, #16
   2b644:	06b5      	lsls	r5, r6, #26
   2b646:	f140 82f9 	bpl.w	2bc3c <_vfiprintf_r+0x7a8>
   2b64a:	9c06      	ldr	r4, [sp, #24]
   2b64c:	2301      	movs	r3, #1
   2b64e:	9601      	str	r6, [sp, #4]
   2b650:	3407      	adds	r4, #7
   2b652:	f024 0207 	bic.w	r2, r4, #7
   2b656:	f102 0108 	add.w	r1, r2, #8
   2b65a:	e9d2 4500 	ldrd	r4, r5, [r2]
   2b65e:	9106      	str	r1, [sp, #24]
   2b660:	e1f1      	b.n	2ba46 <_vfiprintf_r+0x5b2>
   2b662:	f046 0610 	orr.w	r6, r6, #16
   2b666:	06b5      	lsls	r5, r6, #26
   2b668:	f140 82da 	bpl.w	2bc20 <_vfiprintf_r+0x78c>
   2b66c:	9c06      	ldr	r4, [sp, #24]
   2b66e:	3407      	adds	r4, #7
   2b670:	f024 0307 	bic.w	r3, r4, #7
   2b674:	f103 0208 	add.w	r2, r3, #8
   2b678:	e9d3 4500 	ldrd	r4, r5, [r3]
   2b67c:	9206      	str	r2, [sp, #24]
   2b67e:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   2b682:	9301      	str	r3, [sp, #4]
   2b684:	2300      	movs	r3, #0
   2b686:	e1de      	b.n	2ba46 <_vfiprintf_r+0x5b2>
   2b688:	9d02      	ldr	r5, [sp, #8]
   2b68a:	9805      	ldr	r0, [sp, #20]
   2b68c:	4629      	mov	r1, r5
   2b68e:	f000 fe55 	bl	2c33c <__swsetup_r>
   2b692:	2800      	cmp	r0, #0
   2b694:	f000 82bd 	beq.w	2bc12 <_vfiprintf_r+0x77e>
   2b698:	9a02      	ldr	r2, [sp, #8]
   2b69a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   2b69c:	07d9      	lsls	r1, r3, #31
   2b69e:	d403      	bmi.n	2b6a8 <_vfiprintf_r+0x214>
   2b6a0:	8993      	ldrh	r3, [r2, #12]
   2b6a2:	059b      	lsls	r3, r3, #22
   2b6a4:	f140 84fb 	bpl.w	2c09e <_vfiprintf_r+0xc0a>
   2b6a8:	f04f 33ff 	mov.w	r3, #4294967295
   2b6ac:	9304      	str	r3, [sp, #16]
   2b6ae:	9804      	ldr	r0, [sp, #16]
   2b6b0:	b03f      	add	sp, #252	; 0xfc
   2b6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b6b6:	2a00      	cmp	r2, #0
   2b6b8:	f040 8414 	bne.w	2bee4 <_vfiprintf_r+0xa50>
   2b6bc:	9213      	str	r2, [sp, #76]	; 0x4c
   2b6be:	46d9      	mov	r9, fp
   2b6c0:	e742      	b.n	2b548 <_vfiprintf_r+0xb4>
   2b6c2:	4ab3      	ldr	r2, [pc, #716]	; (2b990 <_vfiprintf_r+0x4fc>)
   2b6c4:	920b      	str	r2, [sp, #44]	; 0x2c
   2b6c6:	06b2      	lsls	r2, r6, #26
   2b6c8:	d571      	bpl.n	2b7ae <_vfiprintf_r+0x31a>
   2b6ca:	9c06      	ldr	r4, [sp, #24]
   2b6cc:	3407      	adds	r4, #7
   2b6ce:	f024 0207 	bic.w	r2, r4, #7
   2b6d2:	f102 0108 	add.w	r1, r2, #8
   2b6d6:	e9d2 4500 	ldrd	r4, r5, [r2]
   2b6da:	9106      	str	r1, [sp, #24]
   2b6dc:	ea54 0205 	orrs.w	r2, r4, r5
   2b6e0:	d008      	beq.n	2b6f4 <_vfiprintf_r+0x260>
   2b6e2:	07f2      	lsls	r2, r6, #31
   2b6e4:	d506      	bpl.n	2b6f4 <_vfiprintf_r+0x260>
   2b6e6:	2230      	movs	r2, #48	; 0x30
   2b6e8:	f046 0602 	orr.w	r6, r6, #2
   2b6ec:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
   2b6f0:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
   2b6f4:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   2b6f8:	9301      	str	r3, [sp, #4]
   2b6fa:	2302      	movs	r3, #2
   2b6fc:	e1a3      	b.n	2ba46 <_vfiprintf_r+0x5b2>
   2b6fe:	9601      	str	r6, [sp, #4]
   2b700:	9b01      	ldr	r3, [sp, #4]
   2b702:	069d      	lsls	r5, r3, #26
   2b704:	f140 8244 	bpl.w	2bb90 <_vfiprintf_r+0x6fc>
   2b708:	9c06      	ldr	r4, [sp, #24]
   2b70a:	3407      	adds	r4, #7
   2b70c:	f024 0407 	bic.w	r4, r4, #7
   2b710:	e9d4 2300 	ldrd	r2, r3, [r4]
   2b714:	f104 0108 	add.w	r1, r4, #8
   2b718:	461d      	mov	r5, r3
   2b71a:	4614      	mov	r4, r2
   2b71c:	9106      	str	r1, [sp, #24]
   2b71e:	2a00      	cmp	r2, #0
   2b720:	f173 0300 	sbcs.w	r3, r3, #0
   2b724:	da06      	bge.n	2b734 <_vfiprintf_r+0x2a0>
   2b726:	4264      	negs	r4, r4
   2b728:	f04f 032d 	mov.w	r3, #45	; 0x2d
   2b72c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   2b730:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   2b734:	ab3e      	add	r3, sp, #248	; 0xf8
   2b736:	f1b8 3fff 	cmp.w	r8, #4294967295
   2b73a:	9303      	str	r3, [sp, #12]
   2b73c:	f000 83c5 	beq.w	2beca <_vfiprintf_r+0xa36>
   2b740:	9a01      	ldr	r2, [sp, #4]
   2b742:	2301      	movs	r3, #1
   2b744:	f022 0680 	bic.w	r6, r2, #128	; 0x80
   2b748:	ea54 0205 	orrs.w	r2, r4, r5
   2b74c:	f000 818c 	beq.w	2ba68 <_vfiprintf_r+0x5d4>
   2b750:	9601      	str	r6, [sp, #4]
   2b752:	2b01      	cmp	r3, #1
   2b754:	f000 83b9 	beq.w	2beca <_vfiprintf_r+0xa36>
   2b758:	2b02      	cmp	r3, #2
   2b75a:	f040 8389 	bne.w	2be70 <_vfiprintf_r+0x9dc>
   2b75e:	aa3e      	add	r2, sp, #248	; 0xf8
   2b760:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2b762:	0923      	lsrs	r3, r4, #4
   2b764:	f004 000f 	and.w	r0, r4, #15
   2b768:	0929      	lsrs	r1, r5, #4
   2b76a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   2b76e:	460d      	mov	r5, r1
   2b770:	461c      	mov	r4, r3
   2b772:	5c33      	ldrb	r3, [r6, r0]
   2b774:	f802 3d01 	strb.w	r3, [r2, #-1]!
   2b778:	ea54 0305 	orrs.w	r3, r4, r5
   2b77c:	d1f1      	bne.n	2b762 <_vfiprintf_r+0x2ce>
   2b77e:	9b03      	ldr	r3, [sp, #12]
   2b780:	9209      	str	r2, [sp, #36]	; 0x24
   2b782:	1a9b      	subs	r3, r3, r2
   2b784:	9e01      	ldr	r6, [sp, #4]
   2b786:	9303      	str	r3, [sp, #12]
   2b788:	e184      	b.n	2ba94 <_vfiprintf_r+0x600>
   2b78a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   2b78e:	2700      	movs	r7, #0
   2b790:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   2b794:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2b798:	eb02 0747 	add.w	r7, r2, r7, lsl #1
   2b79c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   2b7a0:	2a09      	cmp	r2, #9
   2b7a2:	d9f5      	bls.n	2b790 <_vfiprintf_r+0x2fc>
   2b7a4:	e6e5      	b.n	2b572 <_vfiprintf_r+0xde>
   2b7a6:	4a7b      	ldr	r2, [pc, #492]	; (2b994 <_vfiprintf_r+0x500>)
   2b7a8:	920b      	str	r2, [sp, #44]	; 0x2c
   2b7aa:	06b2      	lsls	r2, r6, #26
   2b7ac:	d48d      	bmi.n	2b6ca <_vfiprintf_r+0x236>
   2b7ae:	9906      	ldr	r1, [sp, #24]
   2b7b0:	06f5      	lsls	r5, r6, #27
   2b7b2:	f101 0204 	add.w	r2, r1, #4
   2b7b6:	f100 83d0 	bmi.w	2bf5a <_vfiprintf_r+0xac6>
   2b7ba:	0674      	lsls	r4, r6, #25
   2b7bc:	9906      	ldr	r1, [sp, #24]
   2b7be:	f140 83c9 	bpl.w	2bf54 <_vfiprintf_r+0xac0>
   2b7c2:	880c      	ldrh	r4, [r1, #0]
   2b7c4:	2500      	movs	r5, #0
   2b7c6:	9206      	str	r2, [sp, #24]
   2b7c8:	e788      	b.n	2b6dc <_vfiprintf_r+0x248>
   2b7ca:	9a06      	ldr	r2, [sp, #24]
   2b7cc:	2101      	movs	r1, #1
   2b7ce:	f04f 0000 	mov.w	r0, #0
   2b7d2:	6813      	ldr	r3, [r2, #0]
   2b7d4:	3204      	adds	r2, #4
   2b7d6:	9101      	str	r1, [sp, #4]
   2b7d8:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
   2b7dc:	ab25      	add	r3, sp, #148	; 0x94
   2b7de:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   2b7e2:	9206      	str	r2, [sp, #24]
   2b7e4:	9103      	str	r1, [sp, #12]
   2b7e6:	9309      	str	r3, [sp, #36]	; 0x24
   2b7e8:	f04f 0800 	mov.w	r8, #0
   2b7ec:	f016 0302 	ands.w	r3, r6, #2
   2b7f0:	9308      	str	r3, [sp, #32]
   2b7f2:	d002      	beq.n	2b7fa <_vfiprintf_r+0x366>
   2b7f4:	9b01      	ldr	r3, [sp, #4]
   2b7f6:	3302      	adds	r3, #2
   2b7f8:	9301      	str	r3, [sp, #4]
   2b7fa:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   2b7fe:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	; 0x4c
   2b802:	9307      	str	r3, [sp, #28]
   2b804:	f101 0c01 	add.w	ip, r1, #1
   2b808:	4660      	mov	r0, ip
   2b80a:	d141      	bne.n	2b890 <_vfiprintf_r+0x3fc>
   2b80c:	9b01      	ldr	r3, [sp, #4]
   2b80e:	1afc      	subs	r4, r7, r3
   2b810:	2c00      	cmp	r4, #0
   2b812:	dd3d      	ble.n	2b890 <_vfiprintf_r+0x3fc>
   2b814:	2c10      	cmp	r4, #16
   2b816:	f340 8481 	ble.w	2c11c <_vfiprintf_r+0xc88>
   2b81a:	4d5f      	ldr	r5, [pc, #380]	; (2b998 <_vfiprintf_r+0x504>)
   2b81c:	2310      	movs	r3, #16
   2b81e:	e007      	b.n	2b830 <_vfiprintf_r+0x39c>
   2b820:	4611      	mov	r1, r2
   2b822:	f04f 0e01 	mov.w	lr, #1
   2b826:	46d9      	mov	r9, fp
   2b828:	3c10      	subs	r4, #16
   2b82a:	1c48      	adds	r0, r1, #1
   2b82c:	2c10      	cmp	r4, #16
   2b82e:	dd21      	ble.n	2b874 <_vfiprintf_r+0x3e0>
   2b830:	3210      	adds	r2, #16
   2b832:	2807      	cmp	r0, #7
   2b834:	f101 0e02 	add.w	lr, r1, #2
   2b838:	9013      	str	r0, [sp, #76]	; 0x4c
   2b83a:	9214      	str	r2, [sp, #80]	; 0x50
   2b83c:	4601      	mov	r1, r0
   2b83e:	e9c9 5300 	strd	r5, r3, [r9]
   2b842:	f109 0908 	add.w	r9, r9, #8
   2b846:	ddef      	ble.n	2b828 <_vfiprintf_r+0x394>
   2b848:	2a00      	cmp	r2, #0
   2b84a:	d0e9      	beq.n	2b820 <_vfiprintf_r+0x38c>
   2b84c:	aa12      	add	r2, sp, #72	; 0x48
   2b84e:	9902      	ldr	r1, [sp, #8]
   2b850:	9805      	ldr	r0, [sp, #20]
   2b852:	46d9      	mov	r9, fp
   2b854:	930a      	str	r3, [sp, #40]	; 0x28
   2b856:	f7ff fde3 	bl	2b420 <__sprint_r.part.0>
   2b85a:	2800      	cmp	r0, #0
   2b85c:	f040 82f9 	bne.w	2be52 <_vfiprintf_r+0x9be>
   2b860:	3c10      	subs	r4, #16
   2b862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b864:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	; 0x4c
   2b868:	2c10      	cmp	r4, #16
   2b86a:	f101 0e01 	add.w	lr, r1, #1
   2b86e:	f101 0001 	add.w	r0, r1, #1
   2b872:	dcdd      	bgt.n	2b830 <_vfiprintf_r+0x39c>
   2b874:	4422      	add	r2, r4
   2b876:	f1be 0f07 	cmp.w	lr, #7
   2b87a:	e9c9 5400 	strd	r5, r4, [r9]
   2b87e:	e9cd e213 	strd	lr, r2, [sp, #76]	; 0x4c
   2b882:	f300 82ab 	bgt.w	2bddc <_vfiprintf_r+0x948>
   2b886:	f109 0908 	add.w	r9, r9, #8
   2b88a:	f10e 0001 	add.w	r0, lr, #1
   2b88e:	4671      	mov	r1, lr
   2b890:	f89d 4043 	ldrb.w	r4, [sp, #67]	; 0x43
   2b894:	f109 0c08 	add.w	ip, r9, #8
   2b898:	2c00      	cmp	r4, #0
   2b89a:	f000 8218 	beq.w	2bcce <_vfiprintf_r+0x83a>
   2b89e:	3201      	adds	r2, #1
   2b8a0:	f10d 0443 	add.w	r4, sp, #67	; 0x43
   2b8a4:	2101      	movs	r1, #1
   2b8a6:	2807      	cmp	r0, #7
   2b8a8:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   2b8ac:	e9c9 4100 	strd	r4, r1, [r9]
   2b8b0:	f340 82a4 	ble.w	2bdfc <_vfiprintf_r+0x968>
   2b8b4:	2a00      	cmp	r2, #0
   2b8b6:	f040 81fc 	bne.w	2bcb2 <_vfiprintf_r+0x81e>
   2b8ba:	9b08      	ldr	r3, [sp, #32]
   2b8bc:	2b00      	cmp	r3, #0
   2b8be:	f040 82a3 	bne.w	2be08 <_vfiprintf_r+0x974>
   2b8c2:	4608      	mov	r0, r1
   2b8c4:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   2b8c8:	4611      	mov	r1, r2
   2b8ca:	46d9      	mov	r9, fp
   2b8cc:	9b07      	ldr	r3, [sp, #28]
   2b8ce:	2b80      	cmp	r3, #128	; 0x80
   2b8d0:	f000 8217 	beq.w	2bd02 <_vfiprintf_r+0x86e>
   2b8d4:	9b03      	ldr	r3, [sp, #12]
   2b8d6:	eba8 0403 	sub.w	r4, r8, r3
   2b8da:	2c00      	cmp	r4, #0
   2b8dc:	dd3a      	ble.n	2b954 <_vfiprintf_r+0x4c0>
   2b8de:	2c10      	cmp	r4, #16
   2b8e0:	f340 840d 	ble.w	2c0fe <_vfiprintf_r+0xc6a>
   2b8e4:	4d2d      	ldr	r5, [pc, #180]	; (2b99c <_vfiprintf_r+0x508>)
   2b8e6:	f04f 0810 	mov.w	r8, #16
   2b8ea:	e005      	b.n	2b8f8 <_vfiprintf_r+0x464>
   2b8ec:	2001      	movs	r0, #1
   2b8ee:	4611      	mov	r1, r2
   2b8f0:	46d9      	mov	r9, fp
   2b8f2:	3c10      	subs	r4, #16
   2b8f4:	2c10      	cmp	r4, #16
   2b8f6:	dd1f      	ble.n	2b938 <_vfiprintf_r+0x4a4>
   2b8f8:	1c4b      	adds	r3, r1, #1
   2b8fa:	3210      	adds	r2, #16
   2b8fc:	f8c9 5000 	str.w	r5, [r9]
   2b900:	1c88      	adds	r0, r1, #2
   2b902:	2b07      	cmp	r3, #7
   2b904:	f8c9 8004 	str.w	r8, [r9, #4]
   2b908:	9214      	str	r2, [sp, #80]	; 0x50
   2b90a:	4619      	mov	r1, r3
   2b90c:	f109 0908 	add.w	r9, r9, #8
   2b910:	9313      	str	r3, [sp, #76]	; 0x4c
   2b912:	ddee      	ble.n	2b8f2 <_vfiprintf_r+0x45e>
   2b914:	2a00      	cmp	r2, #0
   2b916:	d0e9      	beq.n	2b8ec <_vfiprintf_r+0x458>
   2b918:	aa12      	add	r2, sp, #72	; 0x48
   2b91a:	9902      	ldr	r1, [sp, #8]
   2b91c:	9805      	ldr	r0, [sp, #20]
   2b91e:	46d9      	mov	r9, fp
   2b920:	f7ff fd7e 	bl	2b420 <__sprint_r.part.0>
   2b924:	2800      	cmp	r0, #0
   2b926:	f040 8294 	bne.w	2be52 <_vfiprintf_r+0x9be>
   2b92a:	3c10      	subs	r4, #16
   2b92c:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	; 0x4c
   2b930:	2c10      	cmp	r4, #16
   2b932:	f101 0001 	add.w	r0, r1, #1
   2b936:	dcdf      	bgt.n	2b8f8 <_vfiprintf_r+0x464>
   2b938:	f109 0308 	add.w	r3, r9, #8
   2b93c:	4422      	add	r2, r4
   2b93e:	2807      	cmp	r0, #7
   2b940:	e9c9 5400 	strd	r5, r4, [r9]
   2b944:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   2b948:	f300 826c 	bgt.w	2be24 <_vfiprintf_r+0x990>
   2b94c:	3001      	adds	r0, #1
   2b94e:	f103 0c08 	add.w	ip, r3, #8
   2b952:	4699      	mov	r9, r3
   2b954:	9b03      	ldr	r3, [sp, #12]
   2b956:	2807      	cmp	r0, #7
   2b958:	9909      	ldr	r1, [sp, #36]	; 0x24
   2b95a:	441a      	add	r2, r3
   2b95c:	e9c9 1300 	strd	r1, r3, [r9]
   2b960:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   2b964:	f340 821f 	ble.w	2bda6 <_vfiprintf_r+0x912>
   2b968:	2a00      	cmp	r2, #0
   2b96a:	f040 8213 	bne.w	2bd94 <_vfiprintf_r+0x900>
   2b96e:	0774      	lsls	r4, r6, #29
   2b970:	9213      	str	r2, [sp, #76]	; 0x4c
   2b972:	d546      	bpl.n	2ba02 <_vfiprintf_r+0x56e>
   2b974:	9b01      	ldr	r3, [sp, #4]
   2b976:	1afc      	subs	r4, r7, r3
   2b978:	2c00      	cmp	r4, #0
   2b97a:	dd42      	ble.n	2ba02 <_vfiprintf_r+0x56e>
   2b97c:	46dc      	mov	ip, fp
   2b97e:	2c10      	cmp	r4, #16
   2b980:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2b982:	f340 83cf 	ble.w	2c124 <_vfiprintf_r+0xc90>
   2b986:	4d04      	ldr	r5, [pc, #16]	; (2b998 <_vfiprintf_r+0x504>)
   2b988:	2610      	movs	r6, #16
   2b98a:	f8dd 8014 	ldr.w	r8, [sp, #20]
   2b98e:	e00d      	b.n	2b9ac <_vfiprintf_r+0x518>
   2b990:	00033d6c 	.word	0x00033d6c
   2b994:	00033d80 	.word	0x00033d80
   2b998:	00033dc0 	.word	0x00033dc0
   2b99c:	00033dd0 	.word	0x00033dd0
   2b9a0:	2001      	movs	r0, #1
   2b9a2:	4611      	mov	r1, r2
   2b9a4:	46dc      	mov	ip, fp
   2b9a6:	3c10      	subs	r4, #16
   2b9a8:	2c10      	cmp	r4, #16
   2b9aa:	dd1f      	ble.n	2b9ec <_vfiprintf_r+0x558>
   2b9ac:	1c4b      	adds	r3, r1, #1
   2b9ae:	3210      	adds	r2, #16
   2b9b0:	f8cc 5000 	str.w	r5, [ip]
   2b9b4:	1c88      	adds	r0, r1, #2
   2b9b6:	2b07      	cmp	r3, #7
   2b9b8:	f8cc 6004 	str.w	r6, [ip, #4]
   2b9bc:	9214      	str	r2, [sp, #80]	; 0x50
   2b9be:	4619      	mov	r1, r3
   2b9c0:	f10c 0c08 	add.w	ip, ip, #8
   2b9c4:	9313      	str	r3, [sp, #76]	; 0x4c
   2b9c6:	ddee      	ble.n	2b9a6 <_vfiprintf_r+0x512>
   2b9c8:	2a00      	cmp	r2, #0
   2b9ca:	d0e9      	beq.n	2b9a0 <_vfiprintf_r+0x50c>
   2b9cc:	aa12      	add	r2, sp, #72	; 0x48
   2b9ce:	9902      	ldr	r1, [sp, #8]
   2b9d0:	4640      	mov	r0, r8
   2b9d2:	f7ff fd25 	bl	2b420 <__sprint_r.part.0>
   2b9d6:	46dc      	mov	ip, fp
   2b9d8:	2800      	cmp	r0, #0
   2b9da:	f040 823a 	bne.w	2be52 <_vfiprintf_r+0x9be>
   2b9de:	3c10      	subs	r4, #16
   2b9e0:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	; 0x4c
   2b9e4:	2c10      	cmp	r4, #16
   2b9e6:	f101 0001 	add.w	r0, r1, #1
   2b9ea:	dcdf      	bgt.n	2b9ac <_vfiprintf_r+0x518>
   2b9ec:	4422      	add	r2, r4
   2b9ee:	2807      	cmp	r0, #7
   2b9f0:	e9cc 5400 	strd	r5, r4, [ip]
   2b9f4:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   2b9f8:	f340 81dc 	ble.w	2bdb4 <_vfiprintf_r+0x920>
   2b9fc:	2a00      	cmp	r2, #0
   2b9fe:	f040 832e 	bne.w	2c05e <_vfiprintf_r+0xbca>
   2ba02:	9b04      	ldr	r3, [sp, #16]
   2ba04:	9a01      	ldr	r2, [sp, #4]
   2ba06:	4297      	cmp	r7, r2
   2ba08:	bfac      	ite	ge
   2ba0a:	19db      	addge	r3, r3, r7
   2ba0c:	189b      	addlt	r3, r3, r2
   2ba0e:	9304      	str	r3, [sp, #16]
   2ba10:	e1df      	b.n	2bdd2 <_vfiprintf_r+0x93e>
   2ba12:	9b06      	ldr	r3, [sp, #24]
   2ba14:	681f      	ldr	r7, [r3, #0]
   2ba16:	1d1a      	adds	r2, r3, #4
   2ba18:	f89a 3000 	ldrb.w	r3, [sl]
   2ba1c:	2f00      	cmp	r7, #0
   2ba1e:	f2c0 831b 	blt.w	2c058 <_vfiprintf_r+0xbc4>
   2ba22:	9206      	str	r2, [sp, #24]
   2ba24:	e5a3      	b.n	2b56e <_vfiprintf_r+0xda>
   2ba26:	f647 0330 	movw	r3, #30768	; 0x7830
   2ba2a:	9a06      	ldr	r2, [sp, #24]
   2ba2c:	f046 0102 	orr.w	r1, r6, #2
   2ba30:	2500      	movs	r5, #0
   2ba32:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
   2ba36:	3204      	adds	r2, #4
   2ba38:	4bb7      	ldr	r3, [pc, #732]	; (2bd18 <_vfiprintf_r+0x884>)
   2ba3a:	f852 4c04 	ldr.w	r4, [r2, #-4]
   2ba3e:	930b      	str	r3, [sp, #44]	; 0x2c
   2ba40:	2302      	movs	r3, #2
   2ba42:	9101      	str	r1, [sp, #4]
   2ba44:	9206      	str	r2, [sp, #24]
   2ba46:	f04f 0200 	mov.w	r2, #0
   2ba4a:	f1b8 3fff 	cmp.w	r8, #4294967295
   2ba4e:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
   2ba52:	aa3e      	add	r2, sp, #248	; 0xf8
   2ba54:	9203      	str	r2, [sp, #12]
   2ba56:	f43f ae7c 	beq.w	2b752 <_vfiprintf_r+0x2be>
   2ba5a:	9a01      	ldr	r2, [sp, #4]
   2ba5c:	f022 0680 	bic.w	r6, r2, #128	; 0x80
   2ba60:	ea54 0205 	orrs.w	r2, r4, r5
   2ba64:	f47f ae74 	bne.w	2b750 <_vfiprintf_r+0x2bc>
   2ba68:	f118 0200 	adds.w	r2, r8, #0
   2ba6c:	bf18      	it	ne
   2ba6e:	2201      	movne	r2, #1
   2ba70:	2a00      	cmp	r2, #0
   2ba72:	f47f ae6d 	bne.w	2b750 <_vfiprintf_r+0x2bc>
   2ba76:	2b00      	cmp	r3, #0
   2ba78:	f040 81e0 	bne.w	2be3c <_vfiprintf_r+0x9a8>
   2ba7c:	9a01      	ldr	r2, [sp, #4]
   2ba7e:	f012 0201 	ands.w	r2, r2, #1
   2ba82:	9203      	str	r2, [sp, #12]
   2ba84:	f000 821d 	beq.w	2bec2 <_vfiprintf_r+0xa2e>
   2ba88:	a93e      	add	r1, sp, #248	; 0xf8
   2ba8a:	2230      	movs	r2, #48	; 0x30
   2ba8c:	4698      	mov	r8, r3
   2ba8e:	f801 2d01 	strb.w	r2, [r1, #-1]!
   2ba92:	9109      	str	r1, [sp, #36]	; 0x24
   2ba94:	9a03      	ldr	r2, [sp, #12]
   2ba96:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   2ba9a:	4542      	cmp	r2, r8
   2ba9c:	bfb8      	it	lt
   2ba9e:	4642      	movlt	r2, r8
   2baa0:	9201      	str	r2, [sp, #4]
   2baa2:	2b00      	cmp	r3, #0
   2baa4:	f43f aea2 	beq.w	2b7ec <_vfiprintf_r+0x358>
   2baa8:	3201      	adds	r2, #1
   2baaa:	9201      	str	r2, [sp, #4]
   2baac:	e69e      	b.n	2b7ec <_vfiprintf_r+0x358>
   2baae:	9a06      	ldr	r2, [sp, #24]
   2bab0:	06b1      	lsls	r1, r6, #26
   2bab2:	f852 3b04 	ldr.w	r3, [r2], #4
   2bab6:	9206      	str	r2, [sp, #24]
   2bab8:	f100 8273 	bmi.w	2bfa2 <_vfiprintf_r+0xb0e>
   2babc:	06f2      	lsls	r2, r6, #27
   2babe:	f100 8321 	bmi.w	2c104 <_vfiprintf_r+0xc70>
   2bac2:	0677      	lsls	r7, r6, #25
   2bac4:	f100 834a 	bmi.w	2c15c <_vfiprintf_r+0xcc8>
   2bac8:	05b6      	lsls	r6, r6, #22
   2baca:	f140 831b 	bpl.w	2c104 <_vfiprintf_r+0xc70>
   2bace:	9a04      	ldr	r2, [sp, #16]
   2bad0:	701a      	strb	r2, [r3, #0]
   2bad2:	e51a      	b.n	2b50a <_vfiprintf_r+0x76>
   2bad4:	f89a 3000 	ldrb.w	r3, [sl]
   2bad8:	2b6c      	cmp	r3, #108	; 0x6c
   2bada:	f000 82d0 	beq.w	2c07e <_vfiprintf_r+0xbea>
   2bade:	f046 0610 	orr.w	r6, r6, #16
   2bae2:	e544      	b.n	2b56e <_vfiprintf_r+0xda>
   2bae4:	f89a 3000 	ldrb.w	r3, [sl]
   2bae8:	2b68      	cmp	r3, #104	; 0x68
   2baea:	f000 82d0 	beq.w	2c08e <_vfiprintf_r+0xbfa>
   2baee:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   2baf2:	e53c      	b.n	2b56e <_vfiprintf_r+0xda>
   2baf4:	9a06      	ldr	r2, [sp, #24]
   2baf6:	6813      	ldr	r3, [r2, #0]
   2baf8:	1d14      	adds	r4, r2, #4
   2bafa:	f04f 0200 	mov.w	r2, #0
   2bafe:	9309      	str	r3, [sp, #36]	; 0x24
   2bb00:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
   2bb04:	2b00      	cmp	r3, #0
   2bb06:	f000 82d1 	beq.w	2c0ac <_vfiprintf_r+0xc18>
   2bb0a:	f1b8 3fff 	cmp.w	r8, #4294967295
   2bb0e:	f000 82fd 	beq.w	2c10c <_vfiprintf_r+0xc78>
   2bb12:	9d09      	ldr	r5, [sp, #36]	; 0x24
   2bb14:	4642      	mov	r2, r8
   2bb16:	2100      	movs	r1, #0
   2bb18:	4628      	mov	r0, r5
   2bb1a:	f001 fa7d 	bl	2d018 <memchr>
   2bb1e:	2800      	cmp	r0, #0
   2bb20:	f000 8324 	beq.w	2c16c <_vfiprintf_r+0xcd8>
   2bb24:	1b43      	subs	r3, r0, r5
   2bb26:	9406      	str	r4, [sp, #24]
   2bb28:	f04f 0800 	mov.w	r8, #0
   2bb2c:	9303      	str	r3, [sp, #12]
   2bb2e:	e7b1      	b.n	2ba94 <_vfiprintf_r+0x600>
   2bb30:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   2bb34:	f89a 3000 	ldrb.w	r3, [sl]
   2bb38:	e519      	b.n	2b56e <_vfiprintf_r+0xda>
   2bb3a:	f89a 3000 	ldrb.w	r3, [sl]
   2bb3e:	f10a 0101 	add.w	r1, sl, #1
   2bb42:	2b2a      	cmp	r3, #42	; 0x2a
   2bb44:	f000 8330 	beq.w	2c1a8 <_vfiprintf_r+0xd14>
   2bb48:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   2bb4c:	468a      	mov	sl, r1
   2bb4e:	f04f 0800 	mov.w	r8, #0
   2bb52:	2a09      	cmp	r2, #9
   2bb54:	f63f ad0d 	bhi.w	2b572 <_vfiprintf_r+0xde>
   2bb58:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   2bb5c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2bb60:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   2bb64:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   2bb68:	2a09      	cmp	r2, #9
   2bb6a:	d9f5      	bls.n	2bb58 <_vfiprintf_r+0x6c4>
   2bb6c:	e501      	b.n	2b572 <_vfiprintf_r+0xde>
   2bb6e:	f89a 3000 	ldrb.w	r3, [sl]
   2bb72:	f046 0604 	orr.w	r6, r6, #4
   2bb76:	e4fa      	b.n	2b56e <_vfiprintf_r+0xda>
   2bb78:	f88d 5043 	strb.w	r5, [sp, #67]	; 0x43
   2bb7c:	f89a 3000 	ldrb.w	r3, [sl]
   2bb80:	e4f5      	b.n	2b56e <_vfiprintf_r+0xda>
   2bb82:	f046 0310 	orr.w	r3, r6, #16
   2bb86:	9301      	str	r3, [sp, #4]
   2bb88:	9b01      	ldr	r3, [sp, #4]
   2bb8a:	069d      	lsls	r5, r3, #26
   2bb8c:	f53f adbc 	bmi.w	2b708 <_vfiprintf_r+0x274>
   2bb90:	9901      	ldr	r1, [sp, #4]
   2bb92:	9a06      	ldr	r2, [sp, #24]
   2bb94:	06cc      	lsls	r4, r1, #27
   2bb96:	f102 0304 	add.w	r3, r2, #4
   2bb9a:	f100 81e9 	bmi.w	2bf70 <_vfiprintf_r+0xadc>
   2bb9e:	9a01      	ldr	r2, [sp, #4]
   2bba0:	0650      	lsls	r0, r2, #25
   2bba2:	f140 81df 	bpl.w	2bf64 <_vfiprintf_r+0xad0>
   2bba6:	9a06      	ldr	r2, [sp, #24]
   2bba8:	9306      	str	r3, [sp, #24]
   2bbaa:	f9b2 4000 	ldrsh.w	r4, [r2]
   2bbae:	17e5      	asrs	r5, r4, #31
   2bbb0:	4622      	mov	r2, r4
   2bbb2:	462b      	mov	r3, r5
   2bbb4:	e5b3      	b.n	2b71e <_vfiprintf_r+0x28a>
   2bbb6:	f046 0601 	orr.w	r6, r6, #1
   2bbba:	f89a 3000 	ldrb.w	r3, [sl]
   2bbbe:	e4d6      	b.n	2b56e <_vfiprintf_r+0xda>
   2bbc0:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   2bbc4:	f89a 3000 	ldrb.w	r3, [sl]
   2bbc8:	2a00      	cmp	r2, #0
   2bbca:	f47f acd0 	bne.w	2b56e <_vfiprintf_r+0xda>
   2bbce:	2220      	movs	r2, #32
   2bbd0:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
   2bbd4:	e4cb      	b.n	2b56e <_vfiprintf_r+0xda>
   2bbd6:	9805      	ldr	r0, [sp, #20]
   2bbd8:	f001 f990 	bl	2cefc <_localeconv_r>
   2bbdc:	6843      	ldr	r3, [r0, #4]
   2bbde:	4618      	mov	r0, r3
   2bbe0:	930d      	str	r3, [sp, #52]	; 0x34
   2bbe2:	f7ff f86b 	bl	2acbc <strlen>
   2bbe6:	900e      	str	r0, [sp, #56]	; 0x38
   2bbe8:	4604      	mov	r4, r0
   2bbea:	9805      	ldr	r0, [sp, #20]
   2bbec:	f001 f986 	bl	2cefc <_localeconv_r>
   2bbf0:	6883      	ldr	r3, [r0, #8]
   2bbf2:	930c      	str	r3, [sp, #48]	; 0x30
   2bbf4:	2c00      	cmp	r4, #0
   2bbf6:	f43f ad20 	beq.w	2b63a <_vfiprintf_r+0x1a6>
   2bbfa:	2b00      	cmp	r3, #0
   2bbfc:	f43f ad1d 	beq.w	2b63a <_vfiprintf_r+0x1a6>
   2bc00:	781a      	ldrb	r2, [r3, #0]
   2bc02:	f89a 3000 	ldrb.w	r3, [sl]
   2bc06:	2a00      	cmp	r2, #0
   2bc08:	f43f acb1 	beq.w	2b56e <_vfiprintf_r+0xda>
   2bc0c:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   2bc10:	e4ad      	b.n	2b56e <_vfiprintf_r+0xda>
   2bc12:	89aa      	ldrh	r2, [r5, #12]
   2bc14:	f002 031a 	and.w	r3, r2, #26
   2bc18:	2b0a      	cmp	r3, #10
   2bc1a:	f47f ac6a 	bne.w	2b4f2 <_vfiprintf_r+0x5e>
   2bc1e:	e01d      	b.n	2bc5c <_vfiprintf_r+0x7c8>
   2bc20:	9a06      	ldr	r2, [sp, #24]
   2bc22:	06f4      	lsls	r4, r6, #27
   2bc24:	f102 0304 	add.w	r3, r2, #4
   2bc28:	f100 81b6 	bmi.w	2bf98 <_vfiprintf_r+0xb04>
   2bc2c:	0670      	lsls	r0, r6, #25
   2bc2e:	9a06      	ldr	r2, [sp, #24]
   2bc30:	f140 81af 	bpl.w	2bf92 <_vfiprintf_r+0xafe>
   2bc34:	8814      	ldrh	r4, [r2, #0]
   2bc36:	2500      	movs	r5, #0
   2bc38:	9306      	str	r3, [sp, #24]
   2bc3a:	e520      	b.n	2b67e <_vfiprintf_r+0x1ea>
   2bc3c:	9b06      	ldr	r3, [sp, #24]
   2bc3e:	06f4      	lsls	r4, r6, #27
   2bc40:	f103 0204 	add.w	r2, r3, #4
   2bc44:	f100 819f 	bmi.w	2bf86 <_vfiprintf_r+0xaf2>
   2bc48:	0670      	lsls	r0, r6, #25
   2bc4a:	f140 8198 	bpl.w	2bf7e <_vfiprintf_r+0xaea>
   2bc4e:	9b06      	ldr	r3, [sp, #24]
   2bc50:	2500      	movs	r5, #0
   2bc52:	9601      	str	r6, [sp, #4]
   2bc54:	881c      	ldrh	r4, [r3, #0]
   2bc56:	2301      	movs	r3, #1
   2bc58:	9206      	str	r2, [sp, #24]
   2bc5a:	e6f4      	b.n	2ba46 <_vfiprintf_r+0x5b2>
   2bc5c:	9902      	ldr	r1, [sp, #8]
   2bc5e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   2bc62:	2b00      	cmp	r3, #0
   2bc64:	f6ff ac45 	blt.w	2b4f2 <_vfiprintf_r+0x5e>
   2bc68:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   2bc6a:	07df      	lsls	r7, r3, #31
   2bc6c:	d404      	bmi.n	2bc78 <_vfiprintf_r+0x7e4>
   2bc6e:	0596      	lsls	r6, r2, #22
   2bc70:	d402      	bmi.n	2bc78 <_vfiprintf_r+0x7e4>
   2bc72:	6d88      	ldr	r0, [r1, #88]	; 0x58
   2bc74:	f001 f956 	bl	2cf24 <__retarget_lock_release_recursive>
   2bc78:	4623      	mov	r3, r4
   2bc7a:	4652      	mov	r2, sl
   2bc7c:	9902      	ldr	r1, [sp, #8]
   2bc7e:	9805      	ldr	r0, [sp, #20]
   2bc80:	f000 faa4 	bl	2c1cc <__sbprintf>
   2bc84:	9004      	str	r0, [sp, #16]
   2bc86:	9804      	ldr	r0, [sp, #16]
   2bc88:	b03f      	add	sp, #252	; 0xfc
   2bc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bc8e:	f000 fd81 	bl	2c794 <__sinit>
   2bc92:	e40c      	b.n	2b4ae <_vfiprintf_r+0x1a>
   2bc94:	2b00      	cmp	r3, #0
   2bc96:	f000 80d6 	beq.w	2be46 <_vfiprintf_r+0x9b2>
   2bc9a:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
   2bc9e:	f04f 0300 	mov.w	r3, #0
   2bca2:	2201      	movs	r2, #1
   2bca4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   2bca8:	ab25      	add	r3, sp, #148	; 0x94
   2bcaa:	9201      	str	r2, [sp, #4]
   2bcac:	9309      	str	r3, [sp, #36]	; 0x24
   2bcae:	9203      	str	r2, [sp, #12]
   2bcb0:	e59a      	b.n	2b7e8 <_vfiprintf_r+0x354>
   2bcb2:	aa12      	add	r2, sp, #72	; 0x48
   2bcb4:	9902      	ldr	r1, [sp, #8]
   2bcb6:	9805      	ldr	r0, [sp, #20]
   2bcb8:	f7ff fbb2 	bl	2b420 <__sprint_r.part.0>
   2bcbc:	2800      	cmp	r0, #0
   2bcbe:	f040 80c8 	bne.w	2be52 <_vfiprintf_r+0x9be>
   2bcc2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2bcc4:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   2bcc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2bcca:	46d9      	mov	r9, fp
   2bccc:	1c48      	adds	r0, r1, #1
   2bcce:	9b08      	ldr	r3, [sp, #32]
   2bcd0:	2b00      	cmp	r3, #0
   2bcd2:	f43f adfb 	beq.w	2b8cc <_vfiprintf_r+0x438>
   2bcd6:	3202      	adds	r2, #2
   2bcd8:	a911      	add	r1, sp, #68	; 0x44
   2bcda:	2302      	movs	r3, #2
   2bcdc:	2807      	cmp	r0, #7
   2bcde:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   2bce2:	e9c9 1300 	strd	r1, r3, [r9]
   2bce6:	f340 8097 	ble.w	2be18 <_vfiprintf_r+0x984>
   2bcea:	2a00      	cmp	r2, #0
   2bcec:	f040 8104 	bne.w	2bef8 <_vfiprintf_r+0xa64>
   2bcf0:	9b07      	ldr	r3, [sp, #28]
   2bcf2:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   2bcf6:	2001      	movs	r0, #1
   2bcf8:	4611      	mov	r1, r2
   2bcfa:	2b80      	cmp	r3, #128	; 0x80
   2bcfc:	46d9      	mov	r9, fp
   2bcfe:	f47f ade9 	bne.w	2b8d4 <_vfiprintf_r+0x440>
   2bd02:	9b01      	ldr	r3, [sp, #4]
   2bd04:	1afc      	subs	r4, r7, r3
   2bd06:	2c00      	cmp	r4, #0
   2bd08:	f77f ade4 	ble.w	2b8d4 <_vfiprintf_r+0x440>
   2bd0c:	2c10      	cmp	r4, #16
   2bd0e:	f340 8229 	ble.w	2c164 <_vfiprintf_r+0xcd0>
   2bd12:	4d02      	ldr	r5, [pc, #8]	; (2bd1c <_vfiprintf_r+0x888>)
   2bd14:	e00b      	b.n	2bd2e <_vfiprintf_r+0x89a>
   2bd16:	bf00      	nop
   2bd18:	00033d6c 	.word	0x00033d6c
   2bd1c:	00033dd0 	.word	0x00033dd0
   2bd20:	f04f 0c01 	mov.w	ip, #1
   2bd24:	4611      	mov	r1, r2
   2bd26:	46d9      	mov	r9, fp
   2bd28:	3c10      	subs	r4, #16
   2bd2a:	2c10      	cmp	r4, #16
   2bd2c:	dd20      	ble.n	2bd70 <_vfiprintf_r+0x8dc>
   2bd2e:	1c4b      	adds	r3, r1, #1
   2bd30:	3210      	adds	r2, #16
   2bd32:	2010      	movs	r0, #16
   2bd34:	f8c9 5000 	str.w	r5, [r9]
   2bd38:	2b07      	cmp	r3, #7
   2bd3a:	f101 0c02 	add.w	ip, r1, #2
   2bd3e:	f8c9 0004 	str.w	r0, [r9, #4]
   2bd42:	4619      	mov	r1, r3
   2bd44:	9214      	str	r2, [sp, #80]	; 0x50
   2bd46:	f109 0908 	add.w	r9, r9, #8
   2bd4a:	9313      	str	r3, [sp, #76]	; 0x4c
   2bd4c:	ddec      	ble.n	2bd28 <_vfiprintf_r+0x894>
   2bd4e:	2a00      	cmp	r2, #0
   2bd50:	d0e6      	beq.n	2bd20 <_vfiprintf_r+0x88c>
   2bd52:	aa12      	add	r2, sp, #72	; 0x48
   2bd54:	9902      	ldr	r1, [sp, #8]
   2bd56:	9805      	ldr	r0, [sp, #20]
   2bd58:	46d9      	mov	r9, fp
   2bd5a:	f7ff fb61 	bl	2b420 <__sprint_r.part.0>
   2bd5e:	2800      	cmp	r0, #0
   2bd60:	d177      	bne.n	2be52 <_vfiprintf_r+0x9be>
   2bd62:	3c10      	subs	r4, #16
   2bd64:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	; 0x4c
   2bd68:	2c10      	cmp	r4, #16
   2bd6a:	f101 0c01 	add.w	ip, r1, #1
   2bd6e:	dcde      	bgt.n	2bd2e <_vfiprintf_r+0x89a>
   2bd70:	f109 0308 	add.w	r3, r9, #8
   2bd74:	4422      	add	r2, r4
   2bd76:	f1bc 0f07 	cmp.w	ip, #7
   2bd7a:	e9c9 5400 	strd	r5, r4, [r9]
   2bd7e:	e9cd c213 	strd	ip, r2, [sp, #76]	; 0x4c
   2bd82:	f300 80c7 	bgt.w	2bf14 <_vfiprintf_r+0xa80>
   2bd86:	f10c 0001 	add.w	r0, ip, #1
   2bd8a:	4661      	mov	r1, ip
   2bd8c:	4699      	mov	r9, r3
   2bd8e:	f103 0c08 	add.w	ip, r3, #8
   2bd92:	e59f      	b.n	2b8d4 <_vfiprintf_r+0x440>
   2bd94:	aa12      	add	r2, sp, #72	; 0x48
   2bd96:	9902      	ldr	r1, [sp, #8]
   2bd98:	9805      	ldr	r0, [sp, #20]
   2bd9a:	f7ff fb41 	bl	2b420 <__sprint_r.part.0>
   2bd9e:	2800      	cmp	r0, #0
   2bda0:	d157      	bne.n	2be52 <_vfiprintf_r+0x9be>
   2bda2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2bda4:	46dc      	mov	ip, fp
   2bda6:	0770      	lsls	r0, r6, #29
   2bda8:	d504      	bpl.n	2bdb4 <_vfiprintf_r+0x920>
   2bdaa:	9b01      	ldr	r3, [sp, #4]
   2bdac:	1afc      	subs	r4, r7, r3
   2bdae:	2c00      	cmp	r4, #0
   2bdb0:	f73f ade5 	bgt.w	2b97e <_vfiprintf_r+0x4ea>
   2bdb4:	9b04      	ldr	r3, [sp, #16]
   2bdb6:	9901      	ldr	r1, [sp, #4]
   2bdb8:	428f      	cmp	r7, r1
   2bdba:	bfac      	ite	ge
   2bdbc:	19db      	addge	r3, r3, r7
   2bdbe:	185b      	addlt	r3, r3, r1
   2bdc0:	9304      	str	r3, [sp, #16]
   2bdc2:	b132      	cbz	r2, 2bdd2 <_vfiprintf_r+0x93e>
   2bdc4:	aa12      	add	r2, sp, #72	; 0x48
   2bdc6:	9902      	ldr	r1, [sp, #8]
   2bdc8:	9805      	ldr	r0, [sp, #20]
   2bdca:	f7ff fb29 	bl	2b420 <__sprint_r.part.0>
   2bdce:	2800      	cmp	r0, #0
   2bdd0:	d13f      	bne.n	2be52 <_vfiprintf_r+0x9be>
   2bdd2:	2300      	movs	r3, #0
   2bdd4:	46d9      	mov	r9, fp
   2bdd6:	9313      	str	r3, [sp, #76]	; 0x4c
   2bdd8:	f7ff bb97 	b.w	2b50a <_vfiprintf_r+0x76>
   2bddc:	2a00      	cmp	r2, #0
   2bdde:	f040 8180 	bne.w	2c0e2 <_vfiprintf_r+0xc4e>
   2bde2:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
   2bde6:	2900      	cmp	r1, #0
   2bde8:	f000 80e2 	beq.w	2bfb0 <_vfiprintf_r+0xb1c>
   2bdec:	2201      	movs	r2, #1
   2bdee:	f10d 0143 	add.w	r1, sp, #67	; 0x43
   2bdf2:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   2bdf6:	4610      	mov	r0, r2
   2bdf8:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
   2bdfc:	4601      	mov	r1, r0
   2bdfe:	46e1      	mov	r9, ip
   2be00:	3001      	adds	r0, #1
   2be02:	f10c 0c08 	add.w	ip, ip, #8
   2be06:	e762      	b.n	2bcce <_vfiprintf_r+0x83a>
   2be08:	aa11      	add	r2, sp, #68	; 0x44
   2be0a:	2302      	movs	r3, #2
   2be0c:	2001      	movs	r0, #1
   2be0e:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   2be12:	9215      	str	r2, [sp, #84]	; 0x54
   2be14:	461a      	mov	r2, r3
   2be16:	9316      	str	r3, [sp, #88]	; 0x58
   2be18:	4601      	mov	r1, r0
   2be1a:	46e1      	mov	r9, ip
   2be1c:	3001      	adds	r0, #1
   2be1e:	f10c 0c08 	add.w	ip, ip, #8
   2be22:	e553      	b.n	2b8cc <_vfiprintf_r+0x438>
   2be24:	2a00      	cmp	r2, #0
   2be26:	d17e      	bne.n	2bf26 <_vfiprintf_r+0xa92>
   2be28:	9a03      	ldr	r2, [sp, #12]
   2be2a:	2301      	movs	r3, #1
   2be2c:	9909      	ldr	r1, [sp, #36]	; 0x24
   2be2e:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   2be32:	9216      	str	r2, [sp, #88]	; 0x58
   2be34:	9115      	str	r1, [sp, #84]	; 0x54
   2be36:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
   2be3a:	e7b4      	b.n	2bda6 <_vfiprintf_r+0x912>
   2be3c:	ab3e      	add	r3, sp, #248	; 0xf8
   2be3e:	4690      	mov	r8, r2
   2be40:	9203      	str	r2, [sp, #12]
   2be42:	9309      	str	r3, [sp, #36]	; 0x24
   2be44:	e626      	b.n	2ba94 <_vfiprintf_r+0x600>
   2be46:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2be48:	2b00      	cmp	r3, #0
   2be4a:	f040 8194 	bne.w	2c176 <_vfiprintf_r+0xce2>
   2be4e:	2300      	movs	r3, #0
   2be50:	9313      	str	r3, [sp, #76]	; 0x4c
   2be52:	9b02      	ldr	r3, [sp, #8]
   2be54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   2be56:	899b      	ldrh	r3, [r3, #12]
   2be58:	07d1      	lsls	r1, r2, #31
   2be5a:	d402      	bmi.n	2be62 <_vfiprintf_r+0x9ce>
   2be5c:	059a      	lsls	r2, r3, #22
   2be5e:	f140 8108 	bpl.w	2c072 <_vfiprintf_r+0xbde>
   2be62:	065b      	lsls	r3, r3, #25
   2be64:	f53f ac20 	bmi.w	2b6a8 <_vfiprintf_r+0x214>
   2be68:	9804      	ldr	r0, [sp, #16]
   2be6a:	b03f      	add	sp, #252	; 0xfc
   2be6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2be70:	a93e      	add	r1, sp, #248	; 0xf8
   2be72:	e000      	b.n	2be76 <_vfiprintf_r+0x9e2>
   2be74:	4611      	mov	r1, r2
   2be76:	08e2      	lsrs	r2, r4, #3
   2be78:	f004 0307 	and.w	r3, r4, #7
   2be7c:	08e8      	lsrs	r0, r5, #3
   2be7e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   2be82:	3330      	adds	r3, #48	; 0x30
   2be84:	4605      	mov	r5, r0
   2be86:	4614      	mov	r4, r2
   2be88:	f801 3c01 	strb.w	r3, [r1, #-1]
   2be8c:	1e4a      	subs	r2, r1, #1
   2be8e:	ea54 0005 	orrs.w	r0, r4, r5
   2be92:	d1ef      	bne.n	2be74 <_vfiprintf_r+0x9e0>
   2be94:	2b30      	cmp	r3, #48	; 0x30
   2be96:	9209      	str	r2, [sp, #36]	; 0x24
   2be98:	d00d      	beq.n	2beb6 <_vfiprintf_r+0xa22>
   2be9a:	9b01      	ldr	r3, [sp, #4]
   2be9c:	07dd      	lsls	r5, r3, #31
   2be9e:	d50a      	bpl.n	2beb6 <_vfiprintf_r+0xa22>
   2bea0:	3902      	subs	r1, #2
   2bea2:	9a03      	ldr	r2, [sp, #12]
   2bea4:	2330      	movs	r3, #48	; 0x30
   2bea6:	9e01      	ldr	r6, [sp, #4]
   2bea8:	1a52      	subs	r2, r2, r1
   2beaa:	9203      	str	r2, [sp, #12]
   2beac:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2beae:	9109      	str	r1, [sp, #36]	; 0x24
   2beb0:	f802 3c01 	strb.w	r3, [r2, #-1]
   2beb4:	e5ee      	b.n	2ba94 <_vfiprintf_r+0x600>
   2beb6:	9b03      	ldr	r3, [sp, #12]
   2beb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2beba:	9e01      	ldr	r6, [sp, #4]
   2bebc:	1a9b      	subs	r3, r3, r2
   2bebe:	9303      	str	r3, [sp, #12]
   2bec0:	e5e8      	b.n	2ba94 <_vfiprintf_r+0x600>
   2bec2:	4698      	mov	r8, r3
   2bec4:	ab3e      	add	r3, sp, #248	; 0xf8
   2bec6:	9309      	str	r3, [sp, #36]	; 0x24
   2bec8:	e5e4      	b.n	2ba94 <_vfiprintf_r+0x600>
   2beca:	2d00      	cmp	r5, #0
   2becc:	bf08      	it	eq
   2bece:	2c0a      	cmpeq	r4, #10
   2bed0:	d278      	bcs.n	2bfc4 <_vfiprintf_r+0xb30>
   2bed2:	ab3e      	add	r3, sp, #248	; 0xf8
   2bed4:	3430      	adds	r4, #48	; 0x30
   2bed6:	2201      	movs	r2, #1
   2bed8:	9e01      	ldr	r6, [sp, #4]
   2beda:	f803 4d01 	strb.w	r4, [r3, #-1]!
   2bede:	9203      	str	r2, [sp, #12]
   2bee0:	9309      	str	r3, [sp, #36]	; 0x24
   2bee2:	e5d7      	b.n	2ba94 <_vfiprintf_r+0x600>
   2bee4:	aa12      	add	r2, sp, #72	; 0x48
   2bee6:	9902      	ldr	r1, [sp, #8]
   2bee8:	9805      	ldr	r0, [sp, #20]
   2beea:	f7ff fa99 	bl	2b420 <__sprint_r.part.0>
   2beee:	2800      	cmp	r0, #0
   2bef0:	d1af      	bne.n	2be52 <_vfiprintf_r+0x9be>
   2bef2:	46d9      	mov	r9, fp
   2bef4:	f7ff bb28 	b.w	2b548 <_vfiprintf_r+0xb4>
   2bef8:	aa12      	add	r2, sp, #72	; 0x48
   2befa:	9902      	ldr	r1, [sp, #8]
   2befc:	9805      	ldr	r0, [sp, #20]
   2befe:	f7ff fa8f 	bl	2b420 <__sprint_r.part.0>
   2bf02:	2800      	cmp	r0, #0
   2bf04:	d1a5      	bne.n	2be52 <_vfiprintf_r+0x9be>
   2bf06:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2bf08:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   2bf0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2bf0e:	46d9      	mov	r9, fp
   2bf10:	1c48      	adds	r0, r1, #1
   2bf12:	e4db      	b.n	2b8cc <_vfiprintf_r+0x438>
   2bf14:	2a00      	cmp	r2, #0
   2bf16:	f040 80d4 	bne.w	2c0c2 <_vfiprintf_r+0xc2e>
   2bf1a:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   2bf1e:	2001      	movs	r0, #1
   2bf20:	4611      	mov	r1, r2
   2bf22:	46d9      	mov	r9, fp
   2bf24:	e4d6      	b.n	2b8d4 <_vfiprintf_r+0x440>
   2bf26:	aa12      	add	r2, sp, #72	; 0x48
   2bf28:	9902      	ldr	r1, [sp, #8]
   2bf2a:	9805      	ldr	r0, [sp, #20]
   2bf2c:	f7ff fa78 	bl	2b420 <__sprint_r.part.0>
   2bf30:	2800      	cmp	r0, #0
   2bf32:	d18e      	bne.n	2be52 <_vfiprintf_r+0x9be>
   2bf34:	9813      	ldr	r0, [sp, #76]	; 0x4c
   2bf36:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   2bf3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2bf3c:	46d9      	mov	r9, fp
   2bf3e:	3001      	adds	r0, #1
   2bf40:	e508      	b.n	2b954 <_vfiprintf_r+0x4c0>
   2bf42:	9d02      	ldr	r5, [sp, #8]
   2bf44:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2bf46:	f000 ffeb 	bl	2cf20 <__retarget_lock_acquire_recursive>
   2bf4a:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   2bf4e:	b28a      	uxth	r2, r1
   2bf50:	f7ff bab7 	b.w	2b4c2 <_vfiprintf_r+0x2e>
   2bf54:	05b0      	lsls	r0, r6, #22
   2bf56:	f100 80fc 	bmi.w	2c152 <_vfiprintf_r+0xcbe>
   2bf5a:	680c      	ldr	r4, [r1, #0]
   2bf5c:	2500      	movs	r5, #0
   2bf5e:	9206      	str	r2, [sp, #24]
   2bf60:	f7ff bbbc 	b.w	2b6dc <_vfiprintf_r+0x248>
   2bf64:	9a01      	ldr	r2, [sp, #4]
   2bf66:	f412 7f00 	tst.w	r2, #512	; 0x200
   2bf6a:	9a06      	ldr	r2, [sp, #24]
   2bf6c:	f040 80e9 	bne.w	2c142 <_vfiprintf_r+0xcae>
   2bf70:	6814      	ldr	r4, [r2, #0]
   2bf72:	9306      	str	r3, [sp, #24]
   2bf74:	17e5      	asrs	r5, r4, #31
   2bf76:	4622      	mov	r2, r4
   2bf78:	462b      	mov	r3, r5
   2bf7a:	f7ff bbd0 	b.w	2b71e <_vfiprintf_r+0x28a>
   2bf7e:	05b1      	lsls	r1, r6, #22
   2bf80:	f100 80d3 	bmi.w	2c12a <_vfiprintf_r+0xc96>
   2bf84:	9b06      	ldr	r3, [sp, #24]
   2bf86:	681c      	ldr	r4, [r3, #0]
   2bf88:	2500      	movs	r5, #0
   2bf8a:	9601      	str	r6, [sp, #4]
   2bf8c:	2301      	movs	r3, #1
   2bf8e:	9206      	str	r2, [sp, #24]
   2bf90:	e559      	b.n	2ba46 <_vfiprintf_r+0x5b2>
   2bf92:	05b1      	lsls	r1, r6, #22
   2bf94:	f100 80d0 	bmi.w	2c138 <_vfiprintf_r+0xca4>
   2bf98:	6814      	ldr	r4, [r2, #0]
   2bf9a:	2500      	movs	r5, #0
   2bf9c:	9306      	str	r3, [sp, #24]
   2bf9e:	f7ff bb6e 	b.w	2b67e <_vfiprintf_r+0x1ea>
   2bfa2:	9a04      	ldr	r2, [sp, #16]
   2bfa4:	4610      	mov	r0, r2
   2bfa6:	17d1      	asrs	r1, r2, #31
   2bfa8:	e9c3 0100 	strd	r0, r1, [r3]
   2bfac:	f7ff baad 	b.w	2b50a <_vfiprintf_r+0x76>
   2bfb0:	9b08      	ldr	r3, [sp, #32]
   2bfb2:	2b00      	cmp	r3, #0
   2bfb4:	f47f af28 	bne.w	2be08 <_vfiprintf_r+0x974>
   2bfb8:	4611      	mov	r1, r2
   2bfba:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   2bfbe:	2001      	movs	r0, #1
   2bfc0:	46d9      	mov	r9, fp
   2bfc2:	e487      	b.n	2b8d4 <_vfiprintf_r+0x440>
   2bfc4:	9b01      	ldr	r3, [sp, #4]
   2bfc6:	2200      	movs	r2, #0
   2bfc8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   2bfcc:	ae3e      	add	r6, sp, #248	; 0xf8
   2bfce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   2bfd2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   2bfd6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   2bfda:	4699      	mov	r9, r3
   2bfdc:	e9cd 7807 	strd	r7, r8, [sp, #28]
   2bfe0:	4617      	mov	r7, r2
   2bfe2:	220a      	movs	r2, #10
   2bfe4:	2300      	movs	r3, #0
   2bfe6:	4620      	mov	r0, r4
   2bfe8:	4629      	mov	r1, r5
   2bfea:	f7e0 fd7b 	bl	cae4 <__aeabi_uldivmod>
   2bfee:	3230      	adds	r2, #48	; 0x30
   2bff0:	3701      	adds	r7, #1
   2bff2:	f106 38ff 	add.w	r8, r6, #4294967295
   2bff6:	f806 2c01 	strb.w	r2, [r6, #-1]
   2bffa:	f1b9 0f00 	cmp.w	r9, #0
   2bffe:	d010      	beq.n	2c022 <_vfiprintf_r+0xb8e>
   2c000:	2d00      	cmp	r5, #0
   2c002:	f89a 2000 	ldrb.w	r2, [sl]
   2c006:	bf08      	it	eq
   2c008:	2c0a      	cmpeq	r4, #10
   2c00a:	bf2c      	ite	cs
   2c00c:	2301      	movcs	r3, #1
   2c00e:	2300      	movcc	r3, #0
   2c010:	2aff      	cmp	r2, #255	; 0xff
   2c012:	bf0c      	ite	eq
   2c014:	2300      	moveq	r3, #0
   2c016:	f003 0301 	andne.w	r3, r3, #1
   2c01a:	b113      	cbz	r3, 2c022 <_vfiprintf_r+0xb8e>
   2c01c:	42ba      	cmp	r2, r7
   2c01e:	f000 80b3 	beq.w	2c188 <_vfiprintf_r+0xcf4>
   2c022:	4620      	mov	r0, r4
   2c024:	4629      	mov	r1, r5
   2c026:	2300      	movs	r3, #0
   2c028:	220a      	movs	r2, #10
   2c02a:	f7e0 fd5b 	bl	cae4 <__aeabi_uldivmod>
   2c02e:	4604      	mov	r4, r0
   2c030:	460d      	mov	r5, r1
   2c032:	4646      	mov	r6, r8
   2c034:	ea54 0305 	orrs.w	r3, r4, r5
   2c038:	d1d3      	bne.n	2bfe2 <_vfiprintf_r+0xb4e>
   2c03a:	9b03      	ldr	r3, [sp, #12]
   2c03c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   2c040:	1b9b      	subs	r3, r3, r6
   2c042:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
   2c046:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2c04a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
   2c04e:	9303      	str	r3, [sp, #12]
   2c050:	9e01      	ldr	r6, [sp, #4]
   2c052:	e9dd 7807 	ldrd	r7, r8, [sp, #28]
   2c056:	e51d      	b.n	2ba94 <_vfiprintf_r+0x600>
   2c058:	427f      	negs	r7, r7
   2c05a:	9206      	str	r2, [sp, #24]
   2c05c:	e589      	b.n	2bb72 <_vfiprintf_r+0x6de>
   2c05e:	aa12      	add	r2, sp, #72	; 0x48
   2c060:	9902      	ldr	r1, [sp, #8]
   2c062:	9805      	ldr	r0, [sp, #20]
   2c064:	f7ff f9dc 	bl	2b420 <__sprint_r.part.0>
   2c068:	2800      	cmp	r0, #0
   2c06a:	f47f aef2 	bne.w	2be52 <_vfiprintf_r+0x9be>
   2c06e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2c070:	e6a0      	b.n	2bdb4 <_vfiprintf_r+0x920>
   2c072:	9c02      	ldr	r4, [sp, #8]
   2c074:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c076:	f000 ff55 	bl	2cf24 <__retarget_lock_release_recursive>
   2c07a:	89a3      	ldrh	r3, [r4, #12]
   2c07c:	e6f1      	b.n	2be62 <_vfiprintf_r+0x9ce>
   2c07e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   2c082:	f046 0620 	orr.w	r6, r6, #32
   2c086:	f10a 0a01 	add.w	sl, sl, #1
   2c08a:	f7ff ba70 	b.w	2b56e <_vfiprintf_r+0xda>
   2c08e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   2c092:	f446 7600 	orr.w	r6, r6, #512	; 0x200
   2c096:	f10a 0a01 	add.w	sl, sl, #1
   2c09a:	f7ff ba68 	b.w	2b56e <_vfiprintf_r+0xda>
   2c09e:	f04f 33ff 	mov.w	r3, #4294967295
   2c0a2:	6d90      	ldr	r0, [r2, #88]	; 0x58
   2c0a4:	9304      	str	r3, [sp, #16]
   2c0a6:	f000 ff3d 	bl	2cf24 <__retarget_lock_release_recursive>
   2c0aa:	e6dd      	b.n	2be68 <_vfiprintf_r+0x9d4>
   2c0ac:	4643      	mov	r3, r8
   2c0ae:	4a44      	ldr	r2, [pc, #272]	; (2c1c0 <_vfiprintf_r+0xd2c>)
   2c0b0:	9406      	str	r4, [sp, #24]
   2c0b2:	2b06      	cmp	r3, #6
   2c0b4:	9209      	str	r2, [sp, #36]	; 0x24
   2c0b6:	bf28      	it	cs
   2c0b8:	2306      	movcs	r3, #6
   2c0ba:	9303      	str	r3, [sp, #12]
   2c0bc:	9301      	str	r3, [sp, #4]
   2c0be:	f7ff bb93 	b.w	2b7e8 <_vfiprintf_r+0x354>
   2c0c2:	aa12      	add	r2, sp, #72	; 0x48
   2c0c4:	9902      	ldr	r1, [sp, #8]
   2c0c6:	9805      	ldr	r0, [sp, #20]
   2c0c8:	f7ff f9aa 	bl	2b420 <__sprint_r.part.0>
   2c0cc:	2800      	cmp	r0, #0
   2c0ce:	f47f aec0 	bne.w	2be52 <_vfiprintf_r+0x9be>
   2c0d2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2c0d4:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   2c0d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2c0da:	46d9      	mov	r9, fp
   2c0dc:	1c48      	adds	r0, r1, #1
   2c0de:	f7ff bbf9 	b.w	2b8d4 <_vfiprintf_r+0x440>
   2c0e2:	aa12      	add	r2, sp, #72	; 0x48
   2c0e4:	9902      	ldr	r1, [sp, #8]
   2c0e6:	9805      	ldr	r0, [sp, #20]
   2c0e8:	f7ff f99a 	bl	2b420 <__sprint_r.part.0>
   2c0ec:	2800      	cmp	r0, #0
   2c0ee:	f47f aeb0 	bne.w	2be52 <_vfiprintf_r+0x9be>
   2c0f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2c0f4:	46d9      	mov	r9, fp
   2c0f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2c0f8:	1c48      	adds	r0, r1, #1
   2c0fa:	f7ff bbc9 	b.w	2b890 <_vfiprintf_r+0x3fc>
   2c0fe:	4663      	mov	r3, ip
   2c100:	4d30      	ldr	r5, [pc, #192]	; (2c1c4 <_vfiprintf_r+0xd30>)
   2c102:	e41b      	b.n	2b93c <_vfiprintf_r+0x4a8>
   2c104:	9a04      	ldr	r2, [sp, #16]
   2c106:	601a      	str	r2, [r3, #0]
   2c108:	f7ff b9ff 	b.w	2b50a <_vfiprintf_r+0x76>
   2c10c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2c10e:	f04f 0800 	mov.w	r8, #0
   2c112:	9406      	str	r4, [sp, #24]
   2c114:	f7fe fdd2 	bl	2acbc <strlen>
   2c118:	9003      	str	r0, [sp, #12]
   2c11a:	e4bb      	b.n	2ba94 <_vfiprintf_r+0x600>
   2c11c:	46e6      	mov	lr, ip
   2c11e:	4d2a      	ldr	r5, [pc, #168]	; (2c1c8 <_vfiprintf_r+0xd34>)
   2c120:	f7ff bba8 	b.w	2b874 <_vfiprintf_r+0x3e0>
   2c124:	1c48      	adds	r0, r1, #1
   2c126:	4d28      	ldr	r5, [pc, #160]	; (2c1c8 <_vfiprintf_r+0xd34>)
   2c128:	e460      	b.n	2b9ec <_vfiprintf_r+0x558>
   2c12a:	9b06      	ldr	r3, [sp, #24]
   2c12c:	2500      	movs	r5, #0
   2c12e:	9601      	str	r6, [sp, #4]
   2c130:	781c      	ldrb	r4, [r3, #0]
   2c132:	2301      	movs	r3, #1
   2c134:	9206      	str	r2, [sp, #24]
   2c136:	e486      	b.n	2ba46 <_vfiprintf_r+0x5b2>
   2c138:	7814      	ldrb	r4, [r2, #0]
   2c13a:	2500      	movs	r5, #0
   2c13c:	9306      	str	r3, [sp, #24]
   2c13e:	f7ff ba9e 	b.w	2b67e <_vfiprintf_r+0x1ea>
   2c142:	f992 4000 	ldrsb.w	r4, [r2]
   2c146:	9306      	str	r3, [sp, #24]
   2c148:	17e5      	asrs	r5, r4, #31
   2c14a:	4622      	mov	r2, r4
   2c14c:	462b      	mov	r3, r5
   2c14e:	f7ff bae6 	b.w	2b71e <_vfiprintf_r+0x28a>
   2c152:	780c      	ldrb	r4, [r1, #0]
   2c154:	2500      	movs	r5, #0
   2c156:	9206      	str	r2, [sp, #24]
   2c158:	f7ff bac0 	b.w	2b6dc <_vfiprintf_r+0x248>
   2c15c:	9a04      	ldr	r2, [sp, #16]
   2c15e:	801a      	strh	r2, [r3, #0]
   2c160:	f7ff b9d3 	b.w	2b50a <_vfiprintf_r+0x76>
   2c164:	4663      	mov	r3, ip
   2c166:	4d17      	ldr	r5, [pc, #92]	; (2c1c4 <_vfiprintf_r+0xd30>)
   2c168:	4684      	mov	ip, r0
   2c16a:	e603      	b.n	2bd74 <_vfiprintf_r+0x8e0>
   2c16c:	f8cd 800c 	str.w	r8, [sp, #12]
   2c170:	4680      	mov	r8, r0
   2c172:	9406      	str	r4, [sp, #24]
   2c174:	e48e      	b.n	2ba94 <_vfiprintf_r+0x600>
   2c176:	9805      	ldr	r0, [sp, #20]
   2c178:	aa12      	add	r2, sp, #72	; 0x48
   2c17a:	9902      	ldr	r1, [sp, #8]
   2c17c:	f7ff f950 	bl	2b420 <__sprint_r.part.0>
   2c180:	2800      	cmp	r0, #0
   2c182:	f43f ae64 	beq.w	2be4e <_vfiprintf_r+0x9ba>
   2c186:	e664      	b.n	2be52 <_vfiprintf_r+0x9be>
   2c188:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2c18a:	2700      	movs	r7, #0
   2c18c:	990d      	ldr	r1, [sp, #52]	; 0x34
   2c18e:	eba8 0802 	sub.w	r8, r8, r2
   2c192:	4640      	mov	r0, r8
   2c194:	f7fe fe06 	bl	2ada4 <strncpy>
   2c198:	f89a 3001 	ldrb.w	r3, [sl, #1]
   2c19c:	b113      	cbz	r3, 2c1a4 <_vfiprintf_r+0xd10>
   2c19e:	f10a 0a01 	add.w	sl, sl, #1
   2c1a2:	e73e      	b.n	2c022 <_vfiprintf_r+0xb8e>
   2c1a4:	461f      	mov	r7, r3
   2c1a6:	e73c      	b.n	2c022 <_vfiprintf_r+0xb8e>
   2c1a8:	9b06      	ldr	r3, [sp, #24]
   2c1aa:	681a      	ldr	r2, [r3, #0]
   2c1ac:	3304      	adds	r3, #4
   2c1ae:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
   2c1b2:	9306      	str	r3, [sp, #24]
   2c1b4:	f89a 3001 	ldrb.w	r3, [sl, #1]
   2c1b8:	468a      	mov	sl, r1
   2c1ba:	f7ff b9d8 	b.w	2b56e <_vfiprintf_r+0xda>
   2c1be:	bf00      	nop
   2c1c0:	00033d94 	.word	0x00033d94
   2c1c4:	00033dd0 	.word	0x00033dd0
   2c1c8:	00033dc0 	.word	0x00033dc0

0002c1cc <__sbprintf>:
   2c1cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c1d0:	460c      	mov	r4, r1
   2c1d2:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   2c1d6:	4699      	mov	r9, r3
   2c1d8:	2500      	movs	r5, #0
   2c1da:	89e3      	ldrh	r3, [r4, #14]
   2c1dc:	4607      	mov	r7, r0
   2c1de:	8989      	ldrh	r1, [r1, #12]
   2c1e0:	ae1a      	add	r6, sp, #104	; 0x68
   2c1e2:	f8ad 300e 	strh.w	r3, [sp, #14]
   2c1e6:	4690      	mov	r8, r2
   2c1e8:	69e3      	ldr	r3, [r4, #28]
   2c1ea:	f021 0102 	bic.w	r1, r1, #2
   2c1ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2c1f0:	a816      	add	r0, sp, #88	; 0x58
   2c1f2:	9506      	str	r5, [sp, #24]
   2c1f4:	f44f 6580 	mov.w	r5, #1024	; 0x400
   2c1f8:	9307      	str	r3, [sp, #28]
   2c1fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c1fc:	f8ad 100c 	strh.w	r1, [sp, #12]
   2c200:	9219      	str	r2, [sp, #100]	; 0x64
   2c202:	9502      	str	r5, [sp, #8]
   2c204:	9309      	str	r3, [sp, #36]	; 0x24
   2c206:	9505      	str	r5, [sp, #20]
   2c208:	9600      	str	r6, [sp, #0]
   2c20a:	9604      	str	r6, [sp, #16]
   2c20c:	f000 fe84 	bl	2cf18 <__retarget_lock_init_recursive>
   2c210:	464b      	mov	r3, r9
   2c212:	4642      	mov	r2, r8
   2c214:	4669      	mov	r1, sp
   2c216:	4638      	mov	r0, r7
   2c218:	f7ff f93c 	bl	2b494 <_vfiprintf_r>
   2c21c:	1e05      	subs	r5, r0, #0
   2c21e:	db07      	blt.n	2c230 <__sbprintf+0x64>
   2c220:	4638      	mov	r0, r7
   2c222:	4669      	mov	r1, sp
   2c224:	f000 fa5a 	bl	2c6dc <_fflush_r>
   2c228:	2800      	cmp	r0, #0
   2c22a:	bf18      	it	ne
   2c22c:	f04f 35ff 	movne.w	r5, #4294967295
   2c230:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2c234:	065b      	lsls	r3, r3, #25
   2c236:	d503      	bpl.n	2c240 <__sbprintf+0x74>
   2c238:	89a3      	ldrh	r3, [r4, #12]
   2c23a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c23e:	81a3      	strh	r3, [r4, #12]
   2c240:	9816      	ldr	r0, [sp, #88]	; 0x58
   2c242:	f000 fe6b 	bl	2cf1c <__retarget_lock_close_recursive>
   2c246:	4628      	mov	r0, r5
   2c248:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   2c24c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002c250 <_vsnprintf_r>:
   2c250:	b570      	push	{r4, r5, r6, lr}
   2c252:	1e14      	subs	r4, r2, #0
   2c254:	b09a      	sub	sp, #104	; 0x68
   2c256:	4605      	mov	r5, r0
   2c258:	db2c      	blt.n	2c2b4 <_vsnprintf_r+0x64>
   2c25a:	461a      	mov	r2, r3
   2c25c:	f44f 7302 	mov.w	r3, #520	; 0x208
   2c260:	9100      	str	r1, [sp, #0]
   2c262:	9104      	str	r1, [sp, #16]
   2c264:	f8ad 300c 	strh.w	r3, [sp, #12]
   2c268:	d013      	beq.n	2c292 <_vsnprintf_r+0x42>
   2c26a:	3c01      	subs	r4, #1
   2c26c:	f64f 76ff 	movw	r6, #65535	; 0xffff
   2c270:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2c272:	4669      	mov	r1, sp
   2c274:	9402      	str	r4, [sp, #8]
   2c276:	9405      	str	r4, [sp, #20]
   2c278:	f8ad 600e 	strh.w	r6, [sp, #14]
   2c27c:	f7e2 f98c 	bl	e598 <_svfprintf_r>
   2c280:	1c42      	adds	r2, r0, #1
   2c282:	da01      	bge.n	2c288 <_vsnprintf_r+0x38>
   2c284:	238b      	movs	r3, #139	; 0x8b
   2c286:	602b      	str	r3, [r5, #0]
   2c288:	9b00      	ldr	r3, [sp, #0]
   2c28a:	2200      	movs	r2, #0
   2c28c:	701a      	strb	r2, [r3, #0]
   2c28e:	b01a      	add	sp, #104	; 0x68
   2c290:	bd70      	pop	{r4, r5, r6, pc}
   2c292:	f64f 76ff 	movw	r6, #65535	; 0xffff
   2c296:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2c298:	4669      	mov	r1, sp
   2c29a:	9402      	str	r4, [sp, #8]
   2c29c:	9405      	str	r4, [sp, #20]
   2c29e:	f8ad 600e 	strh.w	r6, [sp, #14]
   2c2a2:	f7e2 f979 	bl	e598 <_svfprintf_r>
   2c2a6:	1c43      	adds	r3, r0, #1
   2c2a8:	db01      	blt.n	2c2ae <_vsnprintf_r+0x5e>
   2c2aa:	b01a      	add	sp, #104	; 0x68
   2c2ac:	bd70      	pop	{r4, r5, r6, pc}
   2c2ae:	238b      	movs	r3, #139	; 0x8b
   2c2b0:	602b      	str	r3, [r5, #0]
   2c2b2:	e7fa      	b.n	2c2aa <_vsnprintf_r+0x5a>
   2c2b4:	238b      	movs	r3, #139	; 0x8b
   2c2b6:	f04f 30ff 	mov.w	r0, #4294967295
   2c2ba:	602b      	str	r3, [r5, #0]
   2c2bc:	e7f5      	b.n	2c2aa <_vsnprintf_r+0x5a>
   2c2be:	bf00      	nop

0002c2c0 <vsnprintf>:
   2c2c0:	b510      	push	{r4, lr}
   2c2c2:	4c06      	ldr	r4, [pc, #24]	; (2c2dc <vsnprintf+0x1c>)
   2c2c4:	b082      	sub	sp, #8
   2c2c6:	9300      	str	r3, [sp, #0]
   2c2c8:	4613      	mov	r3, r2
   2c2ca:	6824      	ldr	r4, [r4, #0]
   2c2cc:	460a      	mov	r2, r1
   2c2ce:	4601      	mov	r1, r0
   2c2d0:	4620      	mov	r0, r4
   2c2d2:	f7ff ffbd 	bl	2c250 <_vsnprintf_r>
   2c2d6:	b002      	add	sp, #8
   2c2d8:	bd10      	pop	{r4, pc}
   2c2da:	bf00      	nop
   2c2dc:	2002d888 	.word	0x2002d888

0002c2e0 <_vsprintf_r>:
   2c2e0:	b570      	push	{r4, r5, r6, lr}
   2c2e2:	b09a      	sub	sp, #104	; 0x68
   2c2e4:	460d      	mov	r5, r1
   2c2e6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   2c2ea:	4e07      	ldr	r6, [pc, #28]	; (2c308 <_vsprintf_r+0x28>)
   2c2ec:	4669      	mov	r1, sp
   2c2ee:	9500      	str	r5, [sp, #0]
   2c2f0:	e9cd 5404 	strd	r5, r4, [sp, #16]
   2c2f4:	e9cd 4602 	strd	r4, r6, [sp, #8]
   2c2f8:	f7e2 f94e 	bl	e598 <_svfprintf_r>
   2c2fc:	9b00      	ldr	r3, [sp, #0]
   2c2fe:	2200      	movs	r2, #0
   2c300:	701a      	strb	r2, [r3, #0]
   2c302:	b01a      	add	sp, #104	; 0x68
   2c304:	bd70      	pop	{r4, r5, r6, pc}
   2c306:	bf00      	nop
   2c308:	ffff0208 	.word	0xffff0208

0002c30c <vsprintf>:
   2c30c:	b410      	push	{r4}
   2c30e:	4c04      	ldr	r4, [pc, #16]	; (2c320 <vsprintf+0x14>)
   2c310:	4613      	mov	r3, r2
   2c312:	460a      	mov	r2, r1
   2c314:	4601      	mov	r1, r0
   2c316:	6820      	ldr	r0, [r4, #0]
   2c318:	f85d 4b04 	ldr.w	r4, [sp], #4
   2c31c:	f7ff bfe0 	b.w	2c2e0 <_vsprintf_r>
   2c320:	2002d888 	.word	0x2002d888

0002c324 <__ascii_wctomb>:
   2c324:	b119      	cbz	r1, 2c32e <__ascii_wctomb+0xa>
   2c326:	2aff      	cmp	r2, #255	; 0xff
   2c328:	d803      	bhi.n	2c332 <__ascii_wctomb+0xe>
   2c32a:	700a      	strb	r2, [r1, #0]
   2c32c:	2101      	movs	r1, #1
   2c32e:	4608      	mov	r0, r1
   2c330:	4770      	bx	lr
   2c332:	238a      	movs	r3, #138	; 0x8a
   2c334:	f04f 31ff 	mov.w	r1, #4294967295
   2c338:	6003      	str	r3, [r0, #0]
   2c33a:	e7f8      	b.n	2c32e <__ascii_wctomb+0xa>

0002c33c <__swsetup_r>:
   2c33c:	b538      	push	{r3, r4, r5, lr}
   2c33e:	4b31      	ldr	r3, [pc, #196]	; (2c404 <__swsetup_r+0xc8>)
   2c340:	4605      	mov	r5, r0
   2c342:	460c      	mov	r4, r1
   2c344:	6818      	ldr	r0, [r3, #0]
   2c346:	b110      	cbz	r0, 2c34e <__swsetup_r+0x12>
   2c348:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2c34a:	2b00      	cmp	r3, #0
   2c34c:	d03a      	beq.n	2c3c4 <__swsetup_r+0x88>
   2c34e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2c352:	b293      	uxth	r3, r2
   2c354:	0718      	lsls	r0, r3, #28
   2c356:	d50c      	bpl.n	2c372 <__swsetup_r+0x36>
   2c358:	6920      	ldr	r0, [r4, #16]
   2c35a:	b1a8      	cbz	r0, 2c388 <__swsetup_r+0x4c>
   2c35c:	f013 0201 	ands.w	r2, r3, #1
   2c360:	d020      	beq.n	2c3a4 <__swsetup_r+0x68>
   2c362:	6963      	ldr	r3, [r4, #20]
   2c364:	2200      	movs	r2, #0
   2c366:	425b      	negs	r3, r3
   2c368:	60a2      	str	r2, [r4, #8]
   2c36a:	61a3      	str	r3, [r4, #24]
   2c36c:	b300      	cbz	r0, 2c3b0 <__swsetup_r+0x74>
   2c36e:	2000      	movs	r0, #0
   2c370:	bd38      	pop	{r3, r4, r5, pc}
   2c372:	06d9      	lsls	r1, r3, #27
   2c374:	d53d      	bpl.n	2c3f2 <__swsetup_r+0xb6>
   2c376:	0758      	lsls	r0, r3, #29
   2c378:	d427      	bmi.n	2c3ca <__swsetup_r+0x8e>
   2c37a:	6920      	ldr	r0, [r4, #16]
   2c37c:	f042 0208 	orr.w	r2, r2, #8
   2c380:	b293      	uxth	r3, r2
   2c382:	81a2      	strh	r2, [r4, #12]
   2c384:	2800      	cmp	r0, #0
   2c386:	d1e9      	bne.n	2c35c <__swsetup_r+0x20>
   2c388:	f403 7220 	and.w	r2, r3, #640	; 0x280
   2c38c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   2c390:	d0e4      	beq.n	2c35c <__swsetup_r+0x20>
   2c392:	4628      	mov	r0, r5
   2c394:	4621      	mov	r1, r4
   2c396:	f000 fdf5 	bl	2cf84 <__smakebuf_r>
   2c39a:	89a3      	ldrh	r3, [r4, #12]
   2c39c:	6920      	ldr	r0, [r4, #16]
   2c39e:	f013 0201 	ands.w	r2, r3, #1
   2c3a2:	d1de      	bne.n	2c362 <__swsetup_r+0x26>
   2c3a4:	0799      	lsls	r1, r3, #30
   2c3a6:	bf58      	it	pl
   2c3a8:	6962      	ldrpl	r2, [r4, #20]
   2c3aa:	60a2      	str	r2, [r4, #8]
   2c3ac:	2800      	cmp	r0, #0
   2c3ae:	d1de      	bne.n	2c36e <__swsetup_r+0x32>
   2c3b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c3b4:	061a      	lsls	r2, r3, #24
   2c3b6:	d5db      	bpl.n	2c370 <__swsetup_r+0x34>
   2c3b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c3bc:	f04f 30ff 	mov.w	r0, #4294967295
   2c3c0:	81a3      	strh	r3, [r4, #12]
   2c3c2:	bd38      	pop	{r3, r4, r5, pc}
   2c3c4:	f000 f9e6 	bl	2c794 <__sinit>
   2c3c8:	e7c1      	b.n	2c34e <__swsetup_r+0x12>
   2c3ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2c3cc:	b151      	cbz	r1, 2c3e4 <__swsetup_r+0xa8>
   2c3ce:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2c3d2:	4299      	cmp	r1, r3
   2c3d4:	d004      	beq.n	2c3e0 <__swsetup_r+0xa4>
   2c3d6:	4628      	mov	r0, r5
   2c3d8:	f000 faea 	bl	2c9b0 <_free_r>
   2c3dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2c3e0:	2300      	movs	r3, #0
   2c3e2:	6323      	str	r3, [r4, #48]	; 0x30
   2c3e4:	2300      	movs	r3, #0
   2c3e6:	6920      	ldr	r0, [r4, #16]
   2c3e8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   2c3ec:	e9c4 0300 	strd	r0, r3, [r4]
   2c3f0:	e7c4      	b.n	2c37c <__swsetup_r+0x40>
   2c3f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2c3f6:	2309      	movs	r3, #9
   2c3f8:	f04f 30ff 	mov.w	r0, #4294967295
   2c3fc:	602b      	str	r3, [r5, #0]
   2c3fe:	81a2      	strh	r2, [r4, #12]
   2c400:	bd38      	pop	{r3, r4, r5, pc}
   2c402:	bf00      	nop
   2c404:	2002d888 	.word	0x2002d888

0002c408 <abort>:
   2c408:	b508      	push	{r3, lr}
   2c40a:	2006      	movs	r0, #6
   2c40c:	f001 fb7c 	bl	2db08 <raise>
   2c410:	2001      	movs	r0, #1
   2c412:	f7e8 f82d 	bl	14470 <_exit>
   2c416:	bf00      	nop

0002c418 <__chk_fail>:
   2c418:	b500      	push	{lr}
   2c41a:	4d0c      	ldr	r5, [pc, #48]	; (2c44c <__chk_fail+0x34>)
   2c41c:	b08d      	sub	sp, #52	; 0x34
   2c41e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2c420:	466c      	mov	r4, sp
   2c422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2c424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2c426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2c428:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2c42c:	c407      	stmia	r4!, {r0, r1, r2}
   2c42e:	4668      	mov	r0, sp
   2c430:	8023      	strh	r3, [r4, #0]
   2c432:	f7fe fc43 	bl	2acbc <strlen>
   2c436:	4669      	mov	r1, sp
   2c438:	4602      	mov	r2, r0
   2c43a:	2002      	movs	r0, #2
   2c43c:	f002 f971 	bl	2e722 <_write>
   2c440:	2006      	movs	r0, #6
   2c442:	f001 fb61 	bl	2db08 <raise>
   2c446:	207f      	movs	r0, #127	; 0x7f
   2c448:	f7e8 f812 	bl	14470 <_exit>
   2c44c:	00033de0 	.word	0x00033de0

0002c450 <quorem>:
   2c450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c454:	6903      	ldr	r3, [r0, #16]
   2c456:	b085      	sub	sp, #20
   2c458:	690e      	ldr	r6, [r1, #16]
   2c45a:	9101      	str	r1, [sp, #4]
   2c45c:	42b3      	cmp	r3, r6
   2c45e:	f2c0 808f 	blt.w	2c580 <quorem+0x130>
   2c462:	3e01      	subs	r6, #1
   2c464:	f101 0814 	add.w	r8, r1, #20
   2c468:	f100 0914 	add.w	r9, r0, #20
   2c46c:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
   2c470:	00b2      	lsls	r2, r6, #2
   2c472:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
   2c476:	3301      	adds	r3, #1
   2c478:	9202      	str	r2, [sp, #8]
   2c47a:	eb08 0a02 	add.w	sl, r8, r2
   2c47e:	444a      	add	r2, r9
   2c480:	fbb7 f7f3 	udiv	r7, r7, r3
   2c484:	9203      	str	r2, [sp, #12]
   2c486:	2f00      	cmp	r7, #0
   2c488:	d03e      	beq.n	2c508 <quorem+0xb8>
   2c48a:	2400      	movs	r4, #0
   2c48c:	46c6      	mov	lr, r8
   2c48e:	46cc      	mov	ip, r9
   2c490:	46a3      	mov	fp, r4
   2c492:	f85e 3b04 	ldr.w	r3, [lr], #4
   2c496:	f8dc 1000 	ldr.w	r1, [ip]
   2c49a:	b29a      	uxth	r2, r3
   2c49c:	45f2      	cmp	sl, lr
   2c49e:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2c4a2:	fb07 4202 	mla	r2, r7, r2, r4
   2c4a6:	b28d      	uxth	r5, r1
   2c4a8:	ea4f 4412 	mov.w	r4, r2, lsr #16
   2c4ac:	b292      	uxth	r2, r2
   2c4ae:	fb07 4403 	mla	r4, r7, r3, r4
   2c4b2:	ebab 0302 	sub.w	r3, fp, r2
   2c4b6:	fa1f fb84 	uxth.w	fp, r4
   2c4ba:	442b      	add	r3, r5
   2c4bc:	ea4f 4414 	mov.w	r4, r4, lsr #16
   2c4c0:	ebcb 4b11 	rsb	fp, fp, r1, lsr #16
   2c4c4:	b29a      	uxth	r2, r3
   2c4c6:	eb0b 4b23 	add.w	fp, fp, r3, asr #16
   2c4ca:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
   2c4ce:	ea4f 4b2b 	mov.w	fp, fp, asr #16
   2c4d2:	f84c 2b04 	str.w	r2, [ip], #4
   2c4d6:	d2dc      	bcs.n	2c492 <quorem+0x42>
   2c4d8:	9b02      	ldr	r3, [sp, #8]
   2c4da:	f859 3003 	ldr.w	r3, [r9, r3]
   2c4de:	b99b      	cbnz	r3, 2c508 <quorem+0xb8>
   2c4e0:	9a03      	ldr	r2, [sp, #12]
   2c4e2:	1f13      	subs	r3, r2, #4
   2c4e4:	4599      	cmp	r9, r3
   2c4e6:	d20e      	bcs.n	2c506 <quorem+0xb6>
   2c4e8:	f852 3c04 	ldr.w	r3, [r2, #-4]
   2c4ec:	b95b      	cbnz	r3, 2c506 <quorem+0xb6>
   2c4ee:	f1a2 0308 	sub.w	r3, r2, #8
   2c4f2:	e001      	b.n	2c4f8 <quorem+0xa8>
   2c4f4:	6812      	ldr	r2, [r2, #0]
   2c4f6:	b932      	cbnz	r2, 2c506 <quorem+0xb6>
   2c4f8:	4599      	cmp	r9, r3
   2c4fa:	461a      	mov	r2, r3
   2c4fc:	f106 36ff 	add.w	r6, r6, #4294967295
   2c500:	f1a3 0304 	sub.w	r3, r3, #4
   2c504:	d3f6      	bcc.n	2c4f4 <quorem+0xa4>
   2c506:	6106      	str	r6, [r0, #16]
   2c508:	9901      	ldr	r1, [sp, #4]
   2c50a:	4604      	mov	r4, r0
   2c50c:	f000 ffea 	bl	2d4e4 <__mcmp>
   2c510:	2800      	cmp	r0, #0
   2c512:	db31      	blt.n	2c578 <quorem+0x128>
   2c514:	2000      	movs	r0, #0
   2c516:	3701      	adds	r7, #1
   2c518:	464d      	mov	r5, r9
   2c51a:	4684      	mov	ip, r0
   2c51c:	f858 3b04 	ldr.w	r3, [r8], #4
   2c520:	682a      	ldr	r2, [r5, #0]
   2c522:	b298      	uxth	r0, r3
   2c524:	45c2      	cmp	sl, r8
   2c526:	b291      	uxth	r1, r2
   2c528:	ebac 0000 	sub.w	r0, ip, r0
   2c52c:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2c530:	4408      	add	r0, r1
   2c532:	ebc3 4312 	rsb	r3, r3, r2, lsr #16
   2c536:	eb03 4220 	add.w	r2, r3, r0, asr #16
   2c53a:	b283      	uxth	r3, r0
   2c53c:	ea4f 4c22 	mov.w	ip, r2, asr #16
   2c540:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2c544:	f845 3b04 	str.w	r3, [r5], #4
   2c548:	d2e8      	bcs.n	2c51c <quorem+0xcc>
   2c54a:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
   2c54e:	eb09 0386 	add.w	r3, r9, r6, lsl #2
   2c552:	b98a      	cbnz	r2, 2c578 <quorem+0x128>
   2c554:	1f1a      	subs	r2, r3, #4
   2c556:	4591      	cmp	r9, r2
   2c558:	d20d      	bcs.n	2c576 <quorem+0x126>
   2c55a:	f853 2c04 	ldr.w	r2, [r3, #-4]
   2c55e:	b952      	cbnz	r2, 2c576 <quorem+0x126>
   2c560:	3b08      	subs	r3, #8
   2c562:	e001      	b.n	2c568 <quorem+0x118>
   2c564:	6812      	ldr	r2, [r2, #0]
   2c566:	b932      	cbnz	r2, 2c576 <quorem+0x126>
   2c568:	4599      	cmp	r9, r3
   2c56a:	461a      	mov	r2, r3
   2c56c:	f106 36ff 	add.w	r6, r6, #4294967295
   2c570:	f1a3 0304 	sub.w	r3, r3, #4
   2c574:	d3f6      	bcc.n	2c564 <quorem+0x114>
   2c576:	6126      	str	r6, [r4, #16]
   2c578:	4638      	mov	r0, r7
   2c57a:	b005      	add	sp, #20
   2c57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c580:	2000      	movs	r0, #0
   2c582:	b005      	add	sp, #20
   2c584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002c588 <__sflush_r>:
   2c588:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   2c58c:	b29a      	uxth	r2, r3
   2c58e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c592:	460c      	mov	r4, r1
   2c594:	0711      	lsls	r1, r2, #28
   2c596:	4680      	mov	r8, r0
   2c598:	d444      	bmi.n	2c624 <__sflush_r+0x9c>
   2c59a:	6862      	ldr	r2, [r4, #4]
   2c59c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2c5a0:	2a00      	cmp	r2, #0
   2c5a2:	81a3      	strh	r3, [r4, #12]
   2c5a4:	dd59      	ble.n	2c65a <__sflush_r+0xd2>
   2c5a6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   2c5a8:	2d00      	cmp	r5, #0
   2c5aa:	d053      	beq.n	2c654 <__sflush_r+0xcc>
   2c5ac:	2200      	movs	r2, #0
   2c5ae:	b29b      	uxth	r3, r3
   2c5b0:	f8d8 6000 	ldr.w	r6, [r8]
   2c5b4:	69e1      	ldr	r1, [r4, #28]
   2c5b6:	f8c8 2000 	str.w	r2, [r8]
   2c5ba:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   2c5be:	f040 8083 	bne.w	2c6c8 <__sflush_r+0x140>
   2c5c2:	2301      	movs	r3, #1
   2c5c4:	4640      	mov	r0, r8
   2c5c6:	47a8      	blx	r5
   2c5c8:	1c42      	adds	r2, r0, #1
   2c5ca:	d04a      	beq.n	2c662 <__sflush_r+0xda>
   2c5cc:	89a3      	ldrh	r3, [r4, #12]
   2c5ce:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   2c5d0:	69e1      	ldr	r1, [r4, #28]
   2c5d2:	075b      	lsls	r3, r3, #29
   2c5d4:	d505      	bpl.n	2c5e2 <__sflush_r+0x5a>
   2c5d6:	6862      	ldr	r2, [r4, #4]
   2c5d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2c5da:	1a80      	subs	r0, r0, r2
   2c5dc:	b10b      	cbz	r3, 2c5e2 <__sflush_r+0x5a>
   2c5de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2c5e0:	1ac0      	subs	r0, r0, r3
   2c5e2:	4602      	mov	r2, r0
   2c5e4:	2300      	movs	r3, #0
   2c5e6:	4640      	mov	r0, r8
   2c5e8:	47a8      	blx	r5
   2c5ea:	1c47      	adds	r7, r0, #1
   2c5ec:	d045      	beq.n	2c67a <__sflush_r+0xf2>
   2c5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c5f2:	2100      	movs	r1, #0
   2c5f4:	6922      	ldr	r2, [r4, #16]
   2c5f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   2c5fa:	81a3      	strh	r3, [r4, #12]
   2c5fc:	04db      	lsls	r3, r3, #19
   2c5fe:	e9c4 2100 	strd	r2, r1, [r4]
   2c602:	d500      	bpl.n	2c606 <__sflush_r+0x7e>
   2c604:	6520      	str	r0, [r4, #80]	; 0x50
   2c606:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2c608:	f8c8 6000 	str.w	r6, [r8]
   2c60c:	b311      	cbz	r1, 2c654 <__sflush_r+0xcc>
   2c60e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2c612:	4299      	cmp	r1, r3
   2c614:	d002      	beq.n	2c61c <__sflush_r+0x94>
   2c616:	4640      	mov	r0, r8
   2c618:	f000 f9ca 	bl	2c9b0 <_free_r>
   2c61c:	2000      	movs	r0, #0
   2c61e:	6320      	str	r0, [r4, #48]	; 0x30
   2c620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c624:	6926      	ldr	r6, [r4, #16]
   2c626:	b1ae      	cbz	r6, 2c654 <__sflush_r+0xcc>
   2c628:	0792      	lsls	r2, r2, #30
   2c62a:	6825      	ldr	r5, [r4, #0]
   2c62c:	6026      	str	r6, [r4, #0]
   2c62e:	bf0c      	ite	eq
   2c630:	6963      	ldreq	r3, [r4, #20]
   2c632:	2300      	movne	r3, #0
   2c634:	1bad      	subs	r5, r5, r6
   2c636:	60a3      	str	r3, [r4, #8]
   2c638:	e00a      	b.n	2c650 <__sflush_r+0xc8>
   2c63a:	462b      	mov	r3, r5
   2c63c:	4632      	mov	r2, r6
   2c63e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   2c640:	4640      	mov	r0, r8
   2c642:	69e1      	ldr	r1, [r4, #28]
   2c644:	47b8      	blx	r7
   2c646:	2800      	cmp	r0, #0
   2c648:	eba5 0500 	sub.w	r5, r5, r0
   2c64c:	4406      	add	r6, r0
   2c64e:	dd2b      	ble.n	2c6a8 <__sflush_r+0x120>
   2c650:	2d00      	cmp	r5, #0
   2c652:	dcf2      	bgt.n	2c63a <__sflush_r+0xb2>
   2c654:	2000      	movs	r0, #0
   2c656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c65a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   2c65c:	2a00      	cmp	r2, #0
   2c65e:	dca2      	bgt.n	2c5a6 <__sflush_r+0x1e>
   2c660:	e7f8      	b.n	2c654 <__sflush_r+0xcc>
   2c662:	f8d8 3000 	ldr.w	r3, [r8]
   2c666:	2b00      	cmp	r3, #0
   2c668:	d0b0      	beq.n	2c5cc <__sflush_r+0x44>
   2c66a:	2b1d      	cmp	r3, #29
   2c66c:	d001      	beq.n	2c672 <__sflush_r+0xea>
   2c66e:	2b16      	cmp	r3, #22
   2c670:	d12c      	bne.n	2c6cc <__sflush_r+0x144>
   2c672:	f8c8 6000 	str.w	r6, [r8]
   2c676:	2000      	movs	r0, #0
   2c678:	e7ed      	b.n	2c656 <__sflush_r+0xce>
   2c67a:	f8d8 1000 	ldr.w	r1, [r8]
   2c67e:	291d      	cmp	r1, #29
   2c680:	d81a      	bhi.n	2c6b8 <__sflush_r+0x130>
   2c682:	4b15      	ldr	r3, [pc, #84]	; (2c6d8 <__sflush_r+0x150>)
   2c684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2c688:	40cb      	lsrs	r3, r1
   2c68a:	43db      	mvns	r3, r3
   2c68c:	f013 0301 	ands.w	r3, r3, #1
   2c690:	d114      	bne.n	2c6bc <__sflush_r+0x134>
   2c692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   2c696:	6925      	ldr	r5, [r4, #16]
   2c698:	6063      	str	r3, [r4, #4]
   2c69a:	6025      	str	r5, [r4, #0]
   2c69c:	04d5      	lsls	r5, r2, #19
   2c69e:	81a2      	strh	r2, [r4, #12]
   2c6a0:	d5b1      	bpl.n	2c606 <__sflush_r+0x7e>
   2c6a2:	2900      	cmp	r1, #0
   2c6a4:	d1af      	bne.n	2c606 <__sflush_r+0x7e>
   2c6a6:	e7ad      	b.n	2c604 <__sflush_r+0x7c>
   2c6a8:	89a3      	ldrh	r3, [r4, #12]
   2c6aa:	f04f 30ff 	mov.w	r0, #4294967295
   2c6ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c6b2:	81a3      	strh	r3, [r4, #12]
   2c6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c6b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2c6bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2c6c0:	f04f 30ff 	mov.w	r0, #4294967295
   2c6c4:	81a2      	strh	r2, [r4, #12]
   2c6c6:	e7c6      	b.n	2c656 <__sflush_r+0xce>
   2c6c8:	6d20      	ldr	r0, [r4, #80]	; 0x50
   2c6ca:	e782      	b.n	2c5d2 <__sflush_r+0x4a>
   2c6cc:	89a3      	ldrh	r3, [r4, #12]
   2c6ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c6d2:	81a3      	strh	r3, [r4, #12]
   2c6d4:	e7bf      	b.n	2c656 <__sflush_r+0xce>
   2c6d6:	bf00      	nop
   2c6d8:	20400001 	.word	0x20400001

0002c6dc <_fflush_r>:
   2c6dc:	b538      	push	{r3, r4, r5, lr}
   2c6de:	460d      	mov	r5, r1
   2c6e0:	4604      	mov	r4, r0
   2c6e2:	b108      	cbz	r0, 2c6e8 <_fflush_r+0xc>
   2c6e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2c6e6:	b1a3      	cbz	r3, 2c712 <_fflush_r+0x36>
   2c6e8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   2c6ec:	b1b8      	cbz	r0, 2c71e <_fflush_r+0x42>
   2c6ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2c6f0:	07db      	lsls	r3, r3, #31
   2c6f2:	d401      	bmi.n	2c6f8 <_fflush_r+0x1c>
   2c6f4:	0581      	lsls	r1, r0, #22
   2c6f6:	d51a      	bpl.n	2c72e <_fflush_r+0x52>
   2c6f8:	4620      	mov	r0, r4
   2c6fa:	4629      	mov	r1, r5
   2c6fc:	f7ff ff44 	bl	2c588 <__sflush_r>
   2c700:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2c702:	4604      	mov	r4, r0
   2c704:	07da      	lsls	r2, r3, #31
   2c706:	d402      	bmi.n	2c70e <_fflush_r+0x32>
   2c708:	89ab      	ldrh	r3, [r5, #12]
   2c70a:	059b      	lsls	r3, r3, #22
   2c70c:	d50a      	bpl.n	2c724 <_fflush_r+0x48>
   2c70e:	4620      	mov	r0, r4
   2c710:	bd38      	pop	{r3, r4, r5, pc}
   2c712:	f000 f83f 	bl	2c794 <__sinit>
   2c716:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   2c71a:	2800      	cmp	r0, #0
   2c71c:	d1e7      	bne.n	2c6ee <_fflush_r+0x12>
   2c71e:	4604      	mov	r4, r0
   2c720:	4620      	mov	r0, r4
   2c722:	bd38      	pop	{r3, r4, r5, pc}
   2c724:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2c726:	f000 fbfd 	bl	2cf24 <__retarget_lock_release_recursive>
   2c72a:	4620      	mov	r0, r4
   2c72c:	bd38      	pop	{r3, r4, r5, pc}
   2c72e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2c730:	f000 fbf6 	bl	2cf20 <__retarget_lock_acquire_recursive>
   2c734:	e7e0      	b.n	2c6f8 <_fflush_r+0x1c>
   2c736:	bf00      	nop

0002c738 <std>:
   2c738:	b538      	push	{r3, r4, r5, lr}
   2c73a:	4604      	mov	r4, r0
   2c73c:	2300      	movs	r3, #0
   2c73e:	8181      	strh	r1, [r0, #12]
   2c740:	305c      	adds	r0, #92	; 0x5c
   2c742:	81e2      	strh	r2, [r4, #14]
   2c744:	4619      	mov	r1, r3
   2c746:	6023      	str	r3, [r4, #0]
   2c748:	2208      	movs	r2, #8
   2c74a:	6663      	str	r3, [r4, #100]	; 0x64
   2c74c:	61a3      	str	r3, [r4, #24]
   2c74e:	4d0a      	ldr	r5, [pc, #40]	; (2c778 <std+0x40>)
   2c750:	e9c4 3301 	strd	r3, r3, [r4, #4]
   2c754:	e9c4 3304 	strd	r3, r3, [r4, #16]
   2c758:	f7fe f8c4 	bl	2a8e4 <memset>
   2c75c:	4b07      	ldr	r3, [pc, #28]	; (2c77c <std+0x44>)
   2c75e:	4908      	ldr	r1, [pc, #32]	; (2c780 <std+0x48>)
   2c760:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2c764:	4a07      	ldr	r2, [pc, #28]	; (2c784 <std+0x4c>)
   2c766:	62e3      	str	r3, [r4, #44]	; 0x2c
   2c768:	e9c4 4507 	strd	r4, r5, [r4, #28]
   2c76c:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   2c770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2c774:	f000 bbd0 	b.w	2cf18 <__retarget_lock_init_recursive>
   2c778:	0002db45 	.word	0x0002db45
   2c77c:	0002dbc9 	.word	0x0002dbc9
   2c780:	0002db69 	.word	0x0002db69
   2c784:	0002dba5 	.word	0x0002dba5

0002c788 <_cleanup_r>:
   2c788:	4901      	ldr	r1, [pc, #4]	; (2c790 <_cleanup_r+0x8>)
   2c78a:	f000 bb8f 	b.w	2ceac <_fwalk_reent>
   2c78e:	bf00      	nop
   2c790:	0002de9d 	.word	0x0002de9d

0002c794 <__sinit>:
   2c794:	b510      	push	{r4, lr}
   2c796:	4604      	mov	r4, r0
   2c798:	4814      	ldr	r0, [pc, #80]	; (2c7ec <__sinit+0x58>)
   2c79a:	f000 fbc1 	bl	2cf20 <__retarget_lock_acquire_recursive>
   2c79e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2c7a0:	b9fa      	cbnz	r2, 2c7e2 <__sinit+0x4e>
   2c7a2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   2c7a6:	4812      	ldr	r0, [pc, #72]	; (2c7f0 <__sinit+0x5c>)
   2c7a8:	2103      	movs	r1, #3
   2c7aa:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   2c7ae:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   2c7b2:	63e0      	str	r0, [r4, #60]	; 0x3c
   2c7b4:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   2c7b8:	2104      	movs	r1, #4
   2c7ba:	6860      	ldr	r0, [r4, #4]
   2c7bc:	f7ff ffbc 	bl	2c738 <std>
   2c7c0:	68a0      	ldr	r0, [r4, #8]
   2c7c2:	2201      	movs	r2, #1
   2c7c4:	2109      	movs	r1, #9
   2c7c6:	f7ff ffb7 	bl	2c738 <std>
   2c7ca:	68e0      	ldr	r0, [r4, #12]
   2c7cc:	2202      	movs	r2, #2
   2c7ce:	2112      	movs	r1, #18
   2c7d0:	f7ff ffb2 	bl	2c738 <std>
   2c7d4:	2301      	movs	r3, #1
   2c7d6:	4805      	ldr	r0, [pc, #20]	; (2c7ec <__sinit+0x58>)
   2c7d8:	63a3      	str	r3, [r4, #56]	; 0x38
   2c7da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c7de:	f000 bba1 	b.w	2cf24 <__retarget_lock_release_recursive>
   2c7e2:	4802      	ldr	r0, [pc, #8]	; (2c7ec <__sinit+0x58>)
   2c7e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c7e8:	f000 bb9c 	b.w	2cf24 <__retarget_lock_release_recursive>
   2c7ec:	20027ed0 	.word	0x20027ed0
   2c7f0:	0002c789 	.word	0x0002c789

0002c7f4 <__sfp_lock_acquire>:
   2c7f4:	4801      	ldr	r0, [pc, #4]	; (2c7fc <__sfp_lock_acquire+0x8>)
   2c7f6:	f000 bb93 	b.w	2cf20 <__retarget_lock_acquire_recursive>
   2c7fa:	bf00      	nop
   2c7fc:	20027ee4 	.word	0x20027ee4

0002c800 <__sfp_lock_release>:
   2c800:	4801      	ldr	r0, [pc, #4]	; (2c808 <__sfp_lock_release+0x8>)
   2c802:	f000 bb8f 	b.w	2cf24 <__retarget_lock_release_recursive>
   2c806:	bf00      	nop
   2c808:	20027ee4 	.word	0x20027ee4

0002c80c <__fputwc>:
   2c80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c810:	b082      	sub	sp, #8
   2c812:	4681      	mov	r9, r0
   2c814:	4688      	mov	r8, r1
   2c816:	4614      	mov	r4, r2
   2c818:	f7fd fce0 	bl	2a1dc <__locale_mb_cur_max>
   2c81c:	2801      	cmp	r0, #1
   2c81e:	d103      	bne.n	2c828 <__fputwc+0x1c>
   2c820:	f108 33ff 	add.w	r3, r8, #4294967295
   2c824:	2bfe      	cmp	r3, #254	; 0xfe
   2c826:	d92f      	bls.n	2c888 <__fputwc+0x7c>
   2c828:	4642      	mov	r2, r8
   2c82a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   2c82e:	a901      	add	r1, sp, #4
   2c830:	4648      	mov	r0, r9
   2c832:	f001 faab 	bl	2dd8c <_wcrtomb_r>
   2c836:	1c42      	adds	r2, r0, #1
   2c838:	4606      	mov	r6, r0
   2c83a:	d02f      	beq.n	2c89c <__fputwc+0x90>
   2c83c:	b350      	cbz	r0, 2c894 <__fputwc+0x88>
   2c83e:	f89d c004 	ldrb.w	ip, [sp, #4]
   2c842:	2500      	movs	r5, #0
   2c844:	f10d 0a04 	add.w	sl, sp, #4
   2c848:	e009      	b.n	2c85e <__fputwc+0x52>
   2c84a:	6823      	ldr	r3, [r4, #0]
   2c84c:	1c5a      	adds	r2, r3, #1
   2c84e:	6022      	str	r2, [r4, #0]
   2c850:	f883 c000 	strb.w	ip, [r3]
   2c854:	3501      	adds	r5, #1
   2c856:	42b5      	cmp	r5, r6
   2c858:	d21c      	bcs.n	2c894 <__fputwc+0x88>
   2c85a:	f815 c00a 	ldrb.w	ip, [r5, sl]
   2c85e:	68a3      	ldr	r3, [r4, #8]
   2c860:	3b01      	subs	r3, #1
   2c862:	2b00      	cmp	r3, #0
   2c864:	60a3      	str	r3, [r4, #8]
   2c866:	daf0      	bge.n	2c84a <__fputwc+0x3e>
   2c868:	69a7      	ldr	r7, [r4, #24]
   2c86a:	4661      	mov	r1, ip
   2c86c:	4622      	mov	r2, r4
   2c86e:	4648      	mov	r0, r9
   2c870:	42bb      	cmp	r3, r7
   2c872:	db02      	blt.n	2c87a <__fputwc+0x6e>
   2c874:	f1bc 0f0a 	cmp.w	ip, #10
   2c878:	d1e7      	bne.n	2c84a <__fputwc+0x3e>
   2c87a:	f001 fa2f 	bl	2dcdc <__swbuf_r>
   2c87e:	1c43      	adds	r3, r0, #1
   2c880:	d1e8      	bne.n	2c854 <__fputwc+0x48>
   2c882:	b002      	add	sp, #8
   2c884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c888:	fa5f fc88 	uxtb.w	ip, r8
   2c88c:	4606      	mov	r6, r0
   2c88e:	f88d c004 	strb.w	ip, [sp, #4]
   2c892:	e7d6      	b.n	2c842 <__fputwc+0x36>
   2c894:	4640      	mov	r0, r8
   2c896:	b002      	add	sp, #8
   2c898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c89c:	89a3      	ldrh	r3, [r4, #12]
   2c89e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c8a2:	81a3      	strh	r3, [r4, #12]
   2c8a4:	b002      	add	sp, #8
   2c8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c8aa:	bf00      	nop

0002c8ac <_fputwc_r>:
   2c8ac:	b530      	push	{r4, r5, lr}
   2c8ae:	4605      	mov	r5, r0
   2c8b0:	6e50      	ldr	r0, [r2, #100]	; 0x64
   2c8b2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   2c8b6:	4614      	mov	r4, r2
   2c8b8:	07c0      	lsls	r0, r0, #31
   2c8ba:	b083      	sub	sp, #12
   2c8bc:	b29a      	uxth	r2, r3
   2c8be:	d401      	bmi.n	2c8c4 <_fputwc_r+0x18>
   2c8c0:	0590      	lsls	r0, r2, #22
   2c8c2:	d51c      	bpl.n	2c8fe <_fputwc_r+0x52>
   2c8c4:	0490      	lsls	r0, r2, #18
   2c8c6:	d406      	bmi.n	2c8d6 <_fputwc_r+0x2a>
   2c8c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2c8ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2c8ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2c8d2:	81a3      	strh	r3, [r4, #12]
   2c8d4:	6662      	str	r2, [r4, #100]	; 0x64
   2c8d6:	4628      	mov	r0, r5
   2c8d8:	4622      	mov	r2, r4
   2c8da:	f7ff ff97 	bl	2c80c <__fputwc>
   2c8de:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2c8e0:	4605      	mov	r5, r0
   2c8e2:	07da      	lsls	r2, r3, #31
   2c8e4:	d402      	bmi.n	2c8ec <_fputwc_r+0x40>
   2c8e6:	89a3      	ldrh	r3, [r4, #12]
   2c8e8:	059b      	lsls	r3, r3, #22
   2c8ea:	d502      	bpl.n	2c8f2 <_fputwc_r+0x46>
   2c8ec:	4628      	mov	r0, r5
   2c8ee:	b003      	add	sp, #12
   2c8f0:	bd30      	pop	{r4, r5, pc}
   2c8f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c8f4:	f000 fb16 	bl	2cf24 <__retarget_lock_release_recursive>
   2c8f8:	4628      	mov	r0, r5
   2c8fa:	b003      	add	sp, #12
   2c8fc:	bd30      	pop	{r4, r5, pc}
   2c8fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c900:	9101      	str	r1, [sp, #4]
   2c902:	f000 fb0d 	bl	2cf20 <__retarget_lock_acquire_recursive>
   2c906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c90a:	9901      	ldr	r1, [sp, #4]
   2c90c:	b29a      	uxth	r2, r3
   2c90e:	e7d9      	b.n	2c8c4 <_fputwc_r+0x18>

0002c910 <_malloc_trim_r>:
   2c910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c912:	4f23      	ldr	r7, [pc, #140]	; (2c9a0 <_malloc_trim_r+0x90>)
   2c914:	460d      	mov	r5, r1
   2c916:	4606      	mov	r6, r0
   2c918:	f7fe f82e 	bl	2a978 <__malloc_lock>
   2c91c:	68b9      	ldr	r1, [r7, #8]
   2c91e:	f640 73ef 	movw	r3, #4079	; 0xfef
   2c922:	4a20      	ldr	r2, [pc, #128]	; (2c9a4 <_malloc_trim_r+0x94>)
   2c924:	684c      	ldr	r4, [r1, #4]
   2c926:	1b5b      	subs	r3, r3, r5
   2c928:	f024 0403 	bic.w	r4, r4, #3
   2c92c:	4423      	add	r3, r4
   2c92e:	401a      	ands	r2, r3
   2c930:	f5a2 5580 	sub.w	r5, r2, #4096	; 0x1000
   2c934:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2c938:	db07      	blt.n	2c94a <_malloc_trim_r+0x3a>
   2c93a:	2100      	movs	r1, #0
   2c93c:	4630      	mov	r0, r6
   2c93e:	f7fe f84d 	bl	2a9dc <_sbrk_r>
   2c942:	68bb      	ldr	r3, [r7, #8]
   2c944:	4423      	add	r3, r4
   2c946:	4298      	cmp	r0, r3
   2c948:	d004      	beq.n	2c954 <_malloc_trim_r+0x44>
   2c94a:	4630      	mov	r0, r6
   2c94c:	f7fe f81a 	bl	2a984 <__malloc_unlock>
   2c950:	2000      	movs	r0, #0
   2c952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c954:	4269      	negs	r1, r5
   2c956:	4630      	mov	r0, r6
   2c958:	f7fe f840 	bl	2a9dc <_sbrk_r>
   2c95c:	3001      	adds	r0, #1
   2c95e:	d00d      	beq.n	2c97c <_malloc_trim_r+0x6c>
   2c960:	4b11      	ldr	r3, [pc, #68]	; (2c9a8 <_malloc_trim_r+0x98>)
   2c962:	1b64      	subs	r4, r4, r5
   2c964:	68b9      	ldr	r1, [r7, #8]
   2c966:	4630      	mov	r0, r6
   2c968:	681a      	ldr	r2, [r3, #0]
   2c96a:	f044 0401 	orr.w	r4, r4, #1
   2c96e:	1b52      	subs	r2, r2, r5
   2c970:	604c      	str	r4, [r1, #4]
   2c972:	601a      	str	r2, [r3, #0]
   2c974:	f7fe f806 	bl	2a984 <__malloc_unlock>
   2c978:	2001      	movs	r0, #1
   2c97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c97c:	2100      	movs	r1, #0
   2c97e:	4630      	mov	r0, r6
   2c980:	f7fe f82c 	bl	2a9dc <_sbrk_r>
   2c984:	68ba      	ldr	r2, [r7, #8]
   2c986:	1a83      	subs	r3, r0, r2
   2c988:	2b0f      	cmp	r3, #15
   2c98a:	ddde      	ble.n	2c94a <_malloc_trim_r+0x3a>
   2c98c:	4c07      	ldr	r4, [pc, #28]	; (2c9ac <_malloc_trim_r+0x9c>)
   2c98e:	f043 0301 	orr.w	r3, r3, #1
   2c992:	4905      	ldr	r1, [pc, #20]	; (2c9a8 <_malloc_trim_r+0x98>)
   2c994:	6824      	ldr	r4, [r4, #0]
   2c996:	6053      	str	r3, [r2, #4]
   2c998:	1b00      	subs	r0, r0, r4
   2c99a:	6008      	str	r0, [r1, #0]
   2c99c:	e7d5      	b.n	2c94a <_malloc_trim_r+0x3a>
   2c99e:	bf00      	nop
   2c9a0:	2002d9f8 	.word	0x2002d9f8
   2c9a4:	fffff000 	.word	0xfffff000
   2c9a8:	20027850 	.word	0x20027850
   2c9ac:	2002de00 	.word	0x2002de00

0002c9b0 <_free_r>:
   2c9b0:	2900      	cmp	r1, #0
   2c9b2:	d052      	beq.n	2ca5a <_free_r+0xaa>
   2c9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c9b6:	460d      	mov	r5, r1
   2c9b8:	4606      	mov	r6, r0
   2c9ba:	f7fd ffdd 	bl	2a978 <__malloc_lock>
   2c9be:	4f71      	ldr	r7, [pc, #452]	; (2cb84 <_free_r+0x1d4>)
   2c9c0:	f855 cc04 	ldr.w	ip, [r5, #-4]
   2c9c4:	f1a5 0108 	sub.w	r1, r5, #8
   2c9c8:	68b8      	ldr	r0, [r7, #8]
   2c9ca:	f02c 0301 	bic.w	r3, ip, #1
   2c9ce:	18ca      	adds	r2, r1, r3
   2c9d0:	6854      	ldr	r4, [r2, #4]
   2c9d2:	4290      	cmp	r0, r2
   2c9d4:	f024 0403 	bic.w	r4, r4, #3
   2c9d8:	d052      	beq.n	2ca80 <_free_r+0xd0>
   2c9da:	f01c 0f01 	tst.w	ip, #1
   2c9de:	6054      	str	r4, [r2, #4]
   2c9e0:	eb02 0004 	add.w	r0, r2, r4
   2c9e4:	d13a      	bne.n	2ca5c <_free_r+0xac>
   2c9e6:	f855 5c08 	ldr.w	r5, [r5, #-8]
   2c9ea:	f107 0c08 	add.w	ip, r7, #8
   2c9ee:	6840      	ldr	r0, [r0, #4]
   2c9f0:	1b49      	subs	r1, r1, r5
   2c9f2:	442b      	add	r3, r5
   2c9f4:	f000 0001 	and.w	r0, r0, #1
   2c9f8:	688d      	ldr	r5, [r1, #8]
   2c9fa:	4565      	cmp	r5, ip
   2c9fc:	d075      	beq.n	2caea <_free_r+0x13a>
   2c9fe:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   2ca02:	f8c5 c00c 	str.w	ip, [r5, #12]
   2ca06:	f8cc 5008 	str.w	r5, [ip, #8]
   2ca0a:	b360      	cbz	r0, 2ca66 <_free_r+0xb6>
   2ca0c:	f043 0201 	orr.w	r2, r3, #1
   2ca10:	604a      	str	r2, [r1, #4]
   2ca12:	50cb      	str	r3, [r1, r3]
   2ca14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2ca18:	d350      	bcc.n	2cabc <_free_r+0x10c>
   2ca1a:	0a5a      	lsrs	r2, r3, #9
   2ca1c:	2a04      	cmp	r2, #4
   2ca1e:	d870      	bhi.n	2cb02 <_free_r+0x152>
   2ca20:	099a      	lsrs	r2, r3, #6
   2ca22:	f102 0439 	add.w	r4, r2, #57	; 0x39
   2ca26:	f102 0038 	add.w	r0, r2, #56	; 0x38
   2ca2a:	00e2      	lsls	r2, r4, #3
   2ca2c:	18bc      	adds	r4, r7, r2
   2ca2e:	58ba      	ldr	r2, [r7, r2]
   2ca30:	3c08      	subs	r4, #8
   2ca32:	4294      	cmp	r4, r2
   2ca34:	d078      	beq.n	2cb28 <_free_r+0x178>
   2ca36:	6850      	ldr	r0, [r2, #4]
   2ca38:	f020 0003 	bic.w	r0, r0, #3
   2ca3c:	4298      	cmp	r0, r3
   2ca3e:	d971      	bls.n	2cb24 <_free_r+0x174>
   2ca40:	6892      	ldr	r2, [r2, #8]
   2ca42:	4294      	cmp	r4, r2
   2ca44:	d1f7      	bne.n	2ca36 <_free_r+0x86>
   2ca46:	68e3      	ldr	r3, [r4, #12]
   2ca48:	4630      	mov	r0, r6
   2ca4a:	e9c1 4302 	strd	r4, r3, [r1, #8]
   2ca4e:	6099      	str	r1, [r3, #8]
   2ca50:	60e1      	str	r1, [r4, #12]
   2ca52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2ca56:	f7fd bf95 	b.w	2a984 <__malloc_unlock>
   2ca5a:	4770      	bx	lr
   2ca5c:	6840      	ldr	r0, [r0, #4]
   2ca5e:	f000 0001 	and.w	r0, r0, #1
   2ca62:	2800      	cmp	r0, #0
   2ca64:	d1d2      	bne.n	2ca0c <_free_r+0x5c>
   2ca66:	6890      	ldr	r0, [r2, #8]
   2ca68:	4423      	add	r3, r4
   2ca6a:	4d47      	ldr	r5, [pc, #284]	; (2cb88 <_free_r+0x1d8>)
   2ca6c:	f043 0401 	orr.w	r4, r3, #1
   2ca70:	42a8      	cmp	r0, r5
   2ca72:	d062      	beq.n	2cb3a <_free_r+0x18a>
   2ca74:	68d2      	ldr	r2, [r2, #12]
   2ca76:	60c2      	str	r2, [r0, #12]
   2ca78:	6090      	str	r0, [r2, #8]
   2ca7a:	604c      	str	r4, [r1, #4]
   2ca7c:	50cb      	str	r3, [r1, r3]
   2ca7e:	e7c9      	b.n	2ca14 <_free_r+0x64>
   2ca80:	f01c 0f01 	tst.w	ip, #1
   2ca84:	4423      	add	r3, r4
   2ca86:	d107      	bne.n	2ca98 <_free_r+0xe8>
   2ca88:	f855 2c08 	ldr.w	r2, [r5, #-8]
   2ca8c:	1a89      	subs	r1, r1, r2
   2ca8e:	4413      	add	r3, r2
   2ca90:	e9d1 0202 	ldrd	r0, r2, [r1, #8]
   2ca94:	60c2      	str	r2, [r0, #12]
   2ca96:	6090      	str	r0, [r2, #8]
   2ca98:	4a3c      	ldr	r2, [pc, #240]	; (2cb8c <_free_r+0x1dc>)
   2ca9a:	f043 0001 	orr.w	r0, r3, #1
   2ca9e:	6812      	ldr	r2, [r2, #0]
   2caa0:	6048      	str	r0, [r1, #4]
   2caa2:	429a      	cmp	r2, r3
   2caa4:	60b9      	str	r1, [r7, #8]
   2caa6:	d804      	bhi.n	2cab2 <_free_r+0x102>
   2caa8:	4b39      	ldr	r3, [pc, #228]	; (2cb90 <_free_r+0x1e0>)
   2caaa:	4630      	mov	r0, r6
   2caac:	6819      	ldr	r1, [r3, #0]
   2caae:	f7ff ff2f 	bl	2c910 <_malloc_trim_r>
   2cab2:	4630      	mov	r0, r6
   2cab4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2cab8:	f7fd bf64 	b.w	2a984 <__malloc_unlock>
   2cabc:	08db      	lsrs	r3, r3, #3
   2cabe:	2201      	movs	r2, #1
   2cac0:	687c      	ldr	r4, [r7, #4]
   2cac2:	1098      	asrs	r0, r3, #2
   2cac4:	4413      	add	r3, r2
   2cac6:	4082      	lsls	r2, r0
   2cac8:	eb07 00c3 	add.w	r0, r7, r3, lsl #3
   2cacc:	4322      	orrs	r2, r4
   2cace:	3808      	subs	r0, #8
   2cad0:	f857 4033 	ldr.w	r4, [r7, r3, lsl #3]
   2cad4:	607a      	str	r2, [r7, #4]
   2cad6:	e9c1 4002 	strd	r4, r0, [r1, #8]
   2cada:	f847 1033 	str.w	r1, [r7, r3, lsl #3]
   2cade:	4630      	mov	r0, r6
   2cae0:	60e1      	str	r1, [r4, #12]
   2cae2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2cae6:	f7fd bf4d 	b.w	2a984 <__malloc_unlock>
   2caea:	2800      	cmp	r0, #0
   2caec:	d145      	bne.n	2cb7a <_free_r+0x1ca>
   2caee:	4423      	add	r3, r4
   2caf0:	e9d2 0202 	ldrd	r0, r2, [r2, #8]
   2caf4:	f043 0401 	orr.w	r4, r3, #1
   2caf8:	60c2      	str	r2, [r0, #12]
   2cafa:	6090      	str	r0, [r2, #8]
   2cafc:	604c      	str	r4, [r1, #4]
   2cafe:	50cb      	str	r3, [r1, r3]
   2cb00:	e7d7      	b.n	2cab2 <_free_r+0x102>
   2cb02:	2a14      	cmp	r2, #20
   2cb04:	d908      	bls.n	2cb18 <_free_r+0x168>
   2cb06:	2a54      	cmp	r2, #84	; 0x54
   2cb08:	d81e      	bhi.n	2cb48 <_free_r+0x198>
   2cb0a:	0b1a      	lsrs	r2, r3, #12
   2cb0c:	f102 046f 	add.w	r4, r2, #111	; 0x6f
   2cb10:	f102 006e 	add.w	r0, r2, #110	; 0x6e
   2cb14:	00e2      	lsls	r2, r4, #3
   2cb16:	e789      	b.n	2ca2c <_free_r+0x7c>
   2cb18:	f102 045c 	add.w	r4, r2, #92	; 0x5c
   2cb1c:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   2cb20:	00e2      	lsls	r2, r4, #3
   2cb22:	e783      	b.n	2ca2c <_free_r+0x7c>
   2cb24:	4614      	mov	r4, r2
   2cb26:	e78e      	b.n	2ca46 <_free_r+0x96>
   2cb28:	1082      	asrs	r2, r0, #2
   2cb2a:	2001      	movs	r0, #1
   2cb2c:	687d      	ldr	r5, [r7, #4]
   2cb2e:	4623      	mov	r3, r4
   2cb30:	fa00 f202 	lsl.w	r2, r0, r2
   2cb34:	432a      	orrs	r2, r5
   2cb36:	607a      	str	r2, [r7, #4]
   2cb38:	e786      	b.n	2ca48 <_free_r+0x98>
   2cb3a:	e9c7 1104 	strd	r1, r1, [r7, #16]
   2cb3e:	e9c1 0002 	strd	r0, r0, [r1, #8]
   2cb42:	604c      	str	r4, [r1, #4]
   2cb44:	50cb      	str	r3, [r1, r3]
   2cb46:	e7b4      	b.n	2cab2 <_free_r+0x102>
   2cb48:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2cb4c:	d806      	bhi.n	2cb5c <_free_r+0x1ac>
   2cb4e:	0bda      	lsrs	r2, r3, #15
   2cb50:	f102 0478 	add.w	r4, r2, #120	; 0x78
   2cb54:	f102 0077 	add.w	r0, r2, #119	; 0x77
   2cb58:	00e2      	lsls	r2, r4, #3
   2cb5a:	e767      	b.n	2ca2c <_free_r+0x7c>
   2cb5c:	f240 5054 	movw	r0, #1364	; 0x554
   2cb60:	4282      	cmp	r2, r0
   2cb62:	d806      	bhi.n	2cb72 <_free_r+0x1c2>
   2cb64:	0c9a      	lsrs	r2, r3, #18
   2cb66:	f102 047d 	add.w	r4, r2, #125	; 0x7d
   2cb6a:	f102 007c 	add.w	r0, r2, #124	; 0x7c
   2cb6e:	00e2      	lsls	r2, r4, #3
   2cb70:	e75c      	b.n	2ca2c <_free_r+0x7c>
   2cb72:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
   2cb76:	207e      	movs	r0, #126	; 0x7e
   2cb78:	e758      	b.n	2ca2c <_free_r+0x7c>
   2cb7a:	f043 0001 	orr.w	r0, r3, #1
   2cb7e:	6048      	str	r0, [r1, #4]
   2cb80:	6013      	str	r3, [r2, #0]
   2cb82:	e796      	b.n	2cab2 <_free_r+0x102>
   2cb84:	2002d9f8 	.word	0x2002d9f8
   2cb88:	2002da00 	.word	0x2002da00
   2cb8c:	2002de04 	.word	0x2002de04
   2cb90:	20027880 	.word	0x20027880

0002cb94 <__sfvwrite_r>:
   2cb94:	6893      	ldr	r3, [r2, #8]
   2cb96:	2b00      	cmp	r3, #0
   2cb98:	f000 80f0 	beq.w	2cd7c <__sfvwrite_r+0x1e8>
   2cb9c:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
   2cba0:	fa1f fc8c 	uxth.w	ip, ip
   2cba4:	f01c 0f08 	tst.w	ip, #8
   2cba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cbac:	460c      	mov	r4, r1
   2cbae:	b083      	sub	sp, #12
   2cbb0:	4681      	mov	r9, r0
   2cbb2:	4690      	mov	r8, r2
   2cbb4:	d035      	beq.n	2cc22 <__sfvwrite_r+0x8e>
   2cbb6:	690b      	ldr	r3, [r1, #16]
   2cbb8:	b39b      	cbz	r3, 2cc22 <__sfvwrite_r+0x8e>
   2cbba:	f01c 0302 	ands.w	r3, ip, #2
   2cbbe:	f8d8 7000 	ldr.w	r7, [r8]
   2cbc2:	d03e      	beq.n	2cc42 <__sfvwrite_r+0xae>
   2cbc4:	2600      	movs	r6, #0
   2cbc6:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
   2cbca:	f8d4 c01c 	ldr.w	ip, [r4, #28]
   2cbce:	4635      	mov	r5, r6
   2cbd0:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 2cea8 <__sfvwrite_r+0x314>
   2cbd4:	4555      	cmp	r5, sl
   2cbd6:	462b      	mov	r3, r5
   2cbd8:	4632      	mov	r2, r6
   2cbda:	4661      	mov	r1, ip
   2cbdc:	bf28      	it	cs
   2cbde:	4653      	movcs	r3, sl
   2cbe0:	4648      	mov	r0, r9
   2cbe2:	b1d5      	cbz	r5, 2cc1a <__sfvwrite_r+0x86>
   2cbe4:	47d8      	blx	fp
   2cbe6:	2800      	cmp	r0, #0
   2cbe8:	f340 80d0 	ble.w	2cd8c <__sfvwrite_r+0x1f8>
   2cbec:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2cbf0:	4406      	add	r6, r0
   2cbf2:	1a2d      	subs	r5, r5, r0
   2cbf4:	1a18      	subs	r0, r3, r0
   2cbf6:	f8c8 0008 	str.w	r0, [r8, #8]
   2cbfa:	2800      	cmp	r0, #0
   2cbfc:	f000 80ba 	beq.w	2cd74 <__sfvwrite_r+0x1e0>
   2cc00:	f8d4 c01c 	ldr.w	ip, [r4, #28]
   2cc04:	4555      	cmp	r5, sl
   2cc06:	462b      	mov	r3, r5
   2cc08:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
   2cc0c:	bf28      	it	cs
   2cc0e:	4653      	movcs	r3, sl
   2cc10:	4632      	mov	r2, r6
   2cc12:	4661      	mov	r1, ip
   2cc14:	4648      	mov	r0, r9
   2cc16:	2d00      	cmp	r5, #0
   2cc18:	d1e4      	bne.n	2cbe4 <__sfvwrite_r+0x50>
   2cc1a:	e9d7 6500 	ldrd	r6, r5, [r7]
   2cc1e:	3708      	adds	r7, #8
   2cc20:	e7d8      	b.n	2cbd4 <__sfvwrite_r+0x40>
   2cc22:	4621      	mov	r1, r4
   2cc24:	4648      	mov	r0, r9
   2cc26:	f7ff fb89 	bl	2c33c <__swsetup_r>
   2cc2a:	2800      	cmp	r0, #0
   2cc2c:	f040 8137 	bne.w	2ce9e <__sfvwrite_r+0x30a>
   2cc30:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   2cc34:	f8d8 7000 	ldr.w	r7, [r8]
   2cc38:	fa1f fc8c 	uxth.w	ip, ip
   2cc3c:	f01c 0302 	ands.w	r3, ip, #2
   2cc40:	d1c0      	bne.n	2cbc4 <__sfvwrite_r+0x30>
   2cc42:	f01c 0a01 	ands.w	sl, ip, #1
   2cc46:	d166      	bne.n	2cd16 <__sfvwrite_r+0x182>
   2cc48:	f8d4 b008 	ldr.w	fp, [r4, #8]
   2cc4c:	4656      	mov	r6, sl
   2cc4e:	6820      	ldr	r0, [r4, #0]
   2cc50:	2e00      	cmp	r6, #0
   2cc52:	d05c      	beq.n	2cd0e <__sfvwrite_r+0x17a>
   2cc54:	f41c 7f00 	tst.w	ip, #512	; 0x200
   2cc58:	f000 80a2 	beq.w	2cda0 <__sfvwrite_r+0x20c>
   2cc5c:	45b3      	cmp	fp, r6
   2cc5e:	465b      	mov	r3, fp
   2cc60:	f200 80e2 	bhi.w	2ce28 <__sfvwrite_r+0x294>
   2cc64:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   2cc68:	d031      	beq.n	2ccce <__sfvwrite_r+0x13a>
   2cc6a:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   2cc6e:	eb15 0545 	adds.w	r5, r5, r5, lsl #1
   2cc72:	eba0 0b01 	sub.w	fp, r0, r1
   2cc76:	f106 0001 	add.w	r0, r6, #1
   2cc7a:	bf48      	it	mi
   2cc7c:	3501      	addmi	r5, #1
   2cc7e:	4458      	add	r0, fp
   2cc80:	106d      	asrs	r5, r5, #1
   2cc82:	42a8      	cmp	r0, r5
   2cc84:	462a      	mov	r2, r5
   2cc86:	d901      	bls.n	2cc8c <__sfvwrite_r+0xf8>
   2cc88:	4605      	mov	r5, r0
   2cc8a:	4602      	mov	r2, r0
   2cc8c:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   2cc90:	f000 80db 	beq.w	2ce4a <__sfvwrite_r+0x2b6>
   2cc94:	4611      	mov	r1, r2
   2cc96:	4648      	mov	r0, r9
   2cc98:	f7fd fad0 	bl	2a23c <_malloc_r>
   2cc9c:	2800      	cmp	r0, #0
   2cc9e:	f000 80f8 	beq.w	2ce92 <__sfvwrite_r+0x2fe>
   2cca2:	465a      	mov	r2, fp
   2cca4:	6921      	ldr	r1, [r4, #16]
   2cca6:	9001      	str	r0, [sp, #4]
   2cca8:	f7e0 ff96 	bl	dbd8 <memcpy>
   2ccac:	89a2      	ldrh	r2, [r4, #12]
   2ccae:	9b01      	ldr	r3, [sp, #4]
   2ccb0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2ccb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2ccb8:	81a2      	strh	r2, [r4, #12]
   2ccba:	eb03 000b 	add.w	r0, r3, fp
   2ccbe:	eba5 020b 	sub.w	r2, r5, fp
   2ccc2:	6123      	str	r3, [r4, #16]
   2ccc4:	46b3      	mov	fp, r6
   2ccc6:	4633      	mov	r3, r6
   2ccc8:	6020      	str	r0, [r4, #0]
   2ccca:	60a2      	str	r2, [r4, #8]
   2cccc:	6165      	str	r5, [r4, #20]
   2ccce:	461a      	mov	r2, r3
   2ccd0:	4651      	mov	r1, sl
   2ccd2:	9301      	str	r3, [sp, #4]
   2ccd4:	f7fd fda4 	bl	2a820 <memmove>
   2ccd8:	68a1      	ldr	r1, [r4, #8]
   2ccda:	4635      	mov	r5, r6
   2ccdc:	6822      	ldr	r2, [r4, #0]
   2ccde:	2600      	movs	r6, #0
   2cce0:	9b01      	ldr	r3, [sp, #4]
   2cce2:	eba1 010b 	sub.w	r1, r1, fp
   2cce6:	4413      	add	r3, r2
   2cce8:	60a1      	str	r1, [r4, #8]
   2ccea:	6023      	str	r3, [r4, #0]
   2ccec:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2ccf0:	44aa      	add	sl, r5
   2ccf2:	1b40      	subs	r0, r0, r5
   2ccf4:	f8c8 0008 	str.w	r0, [r8, #8]
   2ccf8:	2800      	cmp	r0, #0
   2ccfa:	d03b      	beq.n	2cd74 <__sfvwrite_r+0x1e0>
   2ccfc:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   2cd00:	f8d4 b008 	ldr.w	fp, [r4, #8]
   2cd04:	fa1f fc8c 	uxth.w	ip, ip
   2cd08:	6820      	ldr	r0, [r4, #0]
   2cd0a:	2e00      	cmp	r6, #0
   2cd0c:	d1a2      	bne.n	2cc54 <__sfvwrite_r+0xc0>
   2cd0e:	e9d7 a600 	ldrd	sl, r6, [r7]
   2cd12:	3708      	adds	r7, #8
   2cd14:	e79c      	b.n	2cc50 <__sfvwrite_r+0xbc>
   2cd16:	469a      	mov	sl, r3
   2cd18:	4618      	mov	r0, r3
   2cd1a:	461e      	mov	r6, r3
   2cd1c:	463b      	mov	r3, r7
   2cd1e:	4657      	mov	r7, sl
   2cd20:	469b      	mov	fp, r3
   2cd22:	2e00      	cmp	r6, #0
   2cd24:	d06c      	beq.n	2ce00 <__sfvwrite_r+0x26c>
   2cd26:	2800      	cmp	r0, #0
   2cd28:	d074      	beq.n	2ce14 <__sfvwrite_r+0x280>
   2cd2a:	45b2      	cmp	sl, r6
   2cd2c:	6820      	ldr	r0, [r4, #0]
   2cd2e:	6921      	ldr	r1, [r4, #16]
   2cd30:	4653      	mov	r3, sl
   2cd32:	6962      	ldr	r2, [r4, #20]
   2cd34:	bf28      	it	cs
   2cd36:	4633      	movcs	r3, r6
   2cd38:	68a5      	ldr	r5, [r4, #8]
   2cd3a:	4288      	cmp	r0, r1
   2cd3c:	4415      	add	r5, r2
   2cd3e:	d901      	bls.n	2cd44 <__sfvwrite_r+0x1b0>
   2cd40:	42ab      	cmp	r3, r5
   2cd42:	dc74      	bgt.n	2ce2e <__sfvwrite_r+0x29a>
   2cd44:	429a      	cmp	r2, r3
   2cd46:	f300 8096 	bgt.w	2ce76 <__sfvwrite_r+0x2e2>
   2cd4a:	4613      	mov	r3, r2
   2cd4c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   2cd4e:	463a      	mov	r2, r7
   2cd50:	69e1      	ldr	r1, [r4, #28]
   2cd52:	4648      	mov	r0, r9
   2cd54:	47a8      	blx	r5
   2cd56:	1e05      	subs	r5, r0, #0
   2cd58:	dd18      	ble.n	2cd8c <__sfvwrite_r+0x1f8>
   2cd5a:	ebba 0a05 	subs.w	sl, sl, r5
   2cd5e:	d00f      	beq.n	2cd80 <__sfvwrite_r+0x1ec>
   2cd60:	2001      	movs	r0, #1
   2cd62:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2cd66:	442f      	add	r7, r5
   2cd68:	1b76      	subs	r6, r6, r5
   2cd6a:	1b5d      	subs	r5, r3, r5
   2cd6c:	f8c8 5008 	str.w	r5, [r8, #8]
   2cd70:	2d00      	cmp	r5, #0
   2cd72:	d1d6      	bne.n	2cd22 <__sfvwrite_r+0x18e>
   2cd74:	2000      	movs	r0, #0
   2cd76:	b003      	add	sp, #12
   2cd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cd7c:	2000      	movs	r0, #0
   2cd7e:	4770      	bx	lr
   2cd80:	4621      	mov	r1, r4
   2cd82:	4648      	mov	r0, r9
   2cd84:	f7ff fcaa 	bl	2c6dc <_fflush_r>
   2cd88:	2800      	cmp	r0, #0
   2cd8a:	d0ea      	beq.n	2cd62 <__sfvwrite_r+0x1ce>
   2cd8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2cd90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2cd94:	f04f 30ff 	mov.w	r0, #4294967295
   2cd98:	81a3      	strh	r3, [r4, #12]
   2cd9a:	b003      	add	sp, #12
   2cd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cda0:	6923      	ldr	r3, [r4, #16]
   2cda2:	4283      	cmp	r3, r0
   2cda4:	d315      	bcc.n	2cdd2 <__sfvwrite_r+0x23e>
   2cda6:	6963      	ldr	r3, [r4, #20]
   2cda8:	42b3      	cmp	r3, r6
   2cdaa:	d812      	bhi.n	2cdd2 <__sfvwrite_r+0x23e>
   2cdac:	4a3d      	ldr	r2, [pc, #244]	; (2cea4 <__sfvwrite_r+0x310>)
   2cdae:	4648      	mov	r0, r9
   2cdb0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   2cdb2:	4296      	cmp	r6, r2
   2cdb4:	69e1      	ldr	r1, [r4, #28]
   2cdb6:	4652      	mov	r2, sl
   2cdb8:	bf94      	ite	ls
   2cdba:	46b4      	movls	ip, r6
   2cdbc:	f06f 4c00 	mvnhi.w	ip, #2147483648	; 0x80000000
   2cdc0:	fb9c fcf3 	sdiv	ip, ip, r3
   2cdc4:	fb03 f30c 	mul.w	r3, r3, ip
   2cdc8:	47a8      	blx	r5
   2cdca:	1e05      	subs	r5, r0, #0
   2cdcc:	ddde      	ble.n	2cd8c <__sfvwrite_r+0x1f8>
   2cdce:	1b76      	subs	r6, r6, r5
   2cdd0:	e78c      	b.n	2ccec <__sfvwrite_r+0x158>
   2cdd2:	45b3      	cmp	fp, r6
   2cdd4:	465d      	mov	r5, fp
   2cdd6:	4651      	mov	r1, sl
   2cdd8:	bf28      	it	cs
   2cdda:	4635      	movcs	r5, r6
   2cddc:	462a      	mov	r2, r5
   2cdde:	f7fd fd1f 	bl	2a820 <memmove>
   2cde2:	68a3      	ldr	r3, [r4, #8]
   2cde4:	6822      	ldr	r2, [r4, #0]
   2cde6:	1b5b      	subs	r3, r3, r5
   2cde8:	442a      	add	r2, r5
   2cdea:	60a3      	str	r3, [r4, #8]
   2cdec:	6022      	str	r2, [r4, #0]
   2cdee:	2b00      	cmp	r3, #0
   2cdf0:	d1ed      	bne.n	2cdce <__sfvwrite_r+0x23a>
   2cdf2:	4621      	mov	r1, r4
   2cdf4:	4648      	mov	r0, r9
   2cdf6:	f7ff fc71 	bl	2c6dc <_fflush_r>
   2cdfa:	2800      	cmp	r0, #0
   2cdfc:	d0e7      	beq.n	2cdce <__sfvwrite_r+0x23a>
   2cdfe:	e7c5      	b.n	2cd8c <__sfvwrite_r+0x1f8>
   2ce00:	f10b 0308 	add.w	r3, fp, #8
   2ce04:	f853 6c04 	ldr.w	r6, [r3, #-4]
   2ce08:	469b      	mov	fp, r3
   2ce0a:	f853 7c08 	ldr.w	r7, [r3, #-8]
   2ce0e:	3308      	adds	r3, #8
   2ce10:	2e00      	cmp	r6, #0
   2ce12:	d0f7      	beq.n	2ce04 <__sfvwrite_r+0x270>
   2ce14:	4632      	mov	r2, r6
   2ce16:	210a      	movs	r1, #10
   2ce18:	4638      	mov	r0, r7
   2ce1a:	f000 f8fd 	bl	2d018 <memchr>
   2ce1e:	b338      	cbz	r0, 2ce70 <__sfvwrite_r+0x2dc>
   2ce20:	3001      	adds	r0, #1
   2ce22:	eba0 0a07 	sub.w	sl, r0, r7
   2ce26:	e780      	b.n	2cd2a <__sfvwrite_r+0x196>
   2ce28:	46b3      	mov	fp, r6
   2ce2a:	4633      	mov	r3, r6
   2ce2c:	e74f      	b.n	2ccce <__sfvwrite_r+0x13a>
   2ce2e:	4639      	mov	r1, r7
   2ce30:	462a      	mov	r2, r5
   2ce32:	f7fd fcf5 	bl	2a820 <memmove>
   2ce36:	6823      	ldr	r3, [r4, #0]
   2ce38:	4621      	mov	r1, r4
   2ce3a:	4648      	mov	r0, r9
   2ce3c:	442b      	add	r3, r5
   2ce3e:	6023      	str	r3, [r4, #0]
   2ce40:	f7ff fc4c 	bl	2c6dc <_fflush_r>
   2ce44:	2800      	cmp	r0, #0
   2ce46:	d088      	beq.n	2cd5a <__sfvwrite_r+0x1c6>
   2ce48:	e7a0      	b.n	2cd8c <__sfvwrite_r+0x1f8>
   2ce4a:	4648      	mov	r0, r9
   2ce4c:	f000 fc46 	bl	2d6dc <_realloc_r>
   2ce50:	4603      	mov	r3, r0
   2ce52:	2800      	cmp	r0, #0
   2ce54:	f47f af31 	bne.w	2ccba <__sfvwrite_r+0x126>
   2ce58:	6921      	ldr	r1, [r4, #16]
   2ce5a:	4648      	mov	r0, r9
   2ce5c:	f7ff fda8 	bl	2c9b0 <_free_r>
   2ce60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2ce64:	220c      	movs	r2, #12
   2ce66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2ce6a:	f8c9 2000 	str.w	r2, [r9]
   2ce6e:	e78f      	b.n	2cd90 <__sfvwrite_r+0x1fc>
   2ce70:	f106 0a01 	add.w	sl, r6, #1
   2ce74:	e759      	b.n	2cd2a <__sfvwrite_r+0x196>
   2ce76:	461a      	mov	r2, r3
   2ce78:	4639      	mov	r1, r7
   2ce7a:	9301      	str	r3, [sp, #4]
   2ce7c:	461d      	mov	r5, r3
   2ce7e:	f7fd fccf 	bl	2a820 <memmove>
   2ce82:	68a1      	ldr	r1, [r4, #8]
   2ce84:	6822      	ldr	r2, [r4, #0]
   2ce86:	9b01      	ldr	r3, [sp, #4]
   2ce88:	1ac9      	subs	r1, r1, r3
   2ce8a:	4413      	add	r3, r2
   2ce8c:	60a1      	str	r1, [r4, #8]
   2ce8e:	6023      	str	r3, [r4, #0]
   2ce90:	e763      	b.n	2cd5a <__sfvwrite_r+0x1c6>
   2ce92:	220c      	movs	r2, #12
   2ce94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2ce98:	f8c9 2000 	str.w	r2, [r9]
   2ce9c:	e778      	b.n	2cd90 <__sfvwrite_r+0x1fc>
   2ce9e:	f04f 30ff 	mov.w	r0, #4294967295
   2cea2:	e768      	b.n	2cd76 <__sfvwrite_r+0x1e2>
   2cea4:	7ffffffe 	.word	0x7ffffffe
   2cea8:	7ffffc00 	.word	0x7ffffc00

0002ceac <_fwalk_reent>:
   2ceac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ceb0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   2ceb4:	d01e      	beq.n	2cef4 <_fwalk_reent+0x48>
   2ceb6:	4688      	mov	r8, r1
   2ceb8:	4606      	mov	r6, r0
   2ceba:	f04f 0900 	mov.w	r9, #0
   2cebe:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
   2cec2:	3d01      	subs	r5, #1
   2cec4:	d410      	bmi.n	2cee8 <_fwalk_reent+0x3c>
   2cec6:	89a3      	ldrh	r3, [r4, #12]
   2cec8:	3d01      	subs	r5, #1
   2ceca:	4621      	mov	r1, r4
   2cecc:	4630      	mov	r0, r6
   2cece:	2b01      	cmp	r3, #1
   2ced0:	d906      	bls.n	2cee0 <_fwalk_reent+0x34>
   2ced2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   2ced6:	3301      	adds	r3, #1
   2ced8:	d002      	beq.n	2cee0 <_fwalk_reent+0x34>
   2ceda:	47c0      	blx	r8
   2cedc:	ea49 0900 	orr.w	r9, r9, r0
   2cee0:	1c6b      	adds	r3, r5, #1
   2cee2:	f104 0468 	add.w	r4, r4, #104	; 0x68
   2cee6:	d1ee      	bne.n	2cec6 <_fwalk_reent+0x1a>
   2cee8:	683f      	ldr	r7, [r7, #0]
   2ceea:	2f00      	cmp	r7, #0
   2ceec:	d1e7      	bne.n	2cebe <_fwalk_reent+0x12>
   2ceee:	4648      	mov	r0, r9
   2cef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2cef4:	46b9      	mov	r9, r7
   2cef6:	4648      	mov	r0, r9
   2cef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002cefc <_localeconv_r>:
   2cefc:	4a04      	ldr	r2, [pc, #16]	; (2cf10 <_localeconv_r+0x14>)
   2cefe:	4b05      	ldr	r3, [pc, #20]	; (2cf14 <_localeconv_r+0x18>)
   2cf00:	6812      	ldr	r2, [r2, #0]
   2cf02:	6b50      	ldr	r0, [r2, #52]	; 0x34
   2cf04:	2800      	cmp	r0, #0
   2cf06:	bf08      	it	eq
   2cf08:	4618      	moveq	r0, r3
   2cf0a:	30f0      	adds	r0, #240	; 0xf0
   2cf0c:	4770      	bx	lr
   2cf0e:	bf00      	nop
   2cf10:	2002d888 	.word	0x2002d888
   2cf14:	2002d88c 	.word	0x2002d88c

0002cf18 <__retarget_lock_init_recursive>:
   2cf18:	4770      	bx	lr
   2cf1a:	bf00      	nop

0002cf1c <__retarget_lock_close_recursive>:
   2cf1c:	4770      	bx	lr
   2cf1e:	bf00      	nop

0002cf20 <__retarget_lock_acquire_recursive>:
   2cf20:	4770      	bx	lr
   2cf22:	bf00      	nop

0002cf24 <__retarget_lock_release_recursive>:
   2cf24:	4770      	bx	lr
   2cf26:	bf00      	nop

0002cf28 <__swhatbuf_r>:
   2cf28:	b570      	push	{r4, r5, r6, lr}
   2cf2a:	460c      	mov	r4, r1
   2cf2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2cf30:	b096      	sub	sp, #88	; 0x58
   2cf32:	4615      	mov	r5, r2
   2cf34:	2900      	cmp	r1, #0
   2cf36:	461e      	mov	r6, r3
   2cf38:	da0f      	bge.n	2cf5a <__swhatbuf_r+0x32>
   2cf3a:	89a2      	ldrh	r2, [r4, #12]
   2cf3c:	2300      	movs	r3, #0
   2cf3e:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   2cf42:	6033      	str	r3, [r6, #0]
   2cf44:	d104      	bne.n	2cf50 <__swhatbuf_r+0x28>
   2cf46:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2cf4a:	602b      	str	r3, [r5, #0]
   2cf4c:	b016      	add	sp, #88	; 0x58
   2cf4e:	bd70      	pop	{r4, r5, r6, pc}
   2cf50:	2240      	movs	r2, #64	; 0x40
   2cf52:	4618      	mov	r0, r3
   2cf54:	602a      	str	r2, [r5, #0]
   2cf56:	b016      	add	sp, #88	; 0x58
   2cf58:	bd70      	pop	{r4, r5, r6, pc}
   2cf5a:	466a      	mov	r2, sp
   2cf5c:	f001 f806 	bl	2df6c <_fstat_r>
   2cf60:	2800      	cmp	r0, #0
   2cf62:	dbea      	blt.n	2cf3a <__swhatbuf_r+0x12>
   2cf64:	9b01      	ldr	r3, [sp, #4]
   2cf66:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2cf6a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   2cf6e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   2cf72:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   2cf76:	fab3 f383 	clz	r3, r3
   2cf7a:	095b      	lsrs	r3, r3, #5
   2cf7c:	6033      	str	r3, [r6, #0]
   2cf7e:	602a      	str	r2, [r5, #0]
   2cf80:	b016      	add	sp, #88	; 0x58
   2cf82:	bd70      	pop	{r4, r5, r6, pc}

0002cf84 <__smakebuf_r>:
   2cf84:	898a      	ldrh	r2, [r1, #12]
   2cf86:	460b      	mov	r3, r1
   2cf88:	0792      	lsls	r2, r2, #30
   2cf8a:	d506      	bpl.n	2cf9a <__smakebuf_r+0x16>
   2cf8c:	f101 0243 	add.w	r2, r1, #67	; 0x43
   2cf90:	2101      	movs	r1, #1
   2cf92:	601a      	str	r2, [r3, #0]
   2cf94:	e9c3 2104 	strd	r2, r1, [r3, #16]
   2cf98:	4770      	bx	lr
   2cf9a:	b570      	push	{r4, r5, r6, lr}
   2cf9c:	b082      	sub	sp, #8
   2cf9e:	4605      	mov	r5, r0
   2cfa0:	460c      	mov	r4, r1
   2cfa2:	ab01      	add	r3, sp, #4
   2cfa4:	466a      	mov	r2, sp
   2cfa6:	f7ff ffbf 	bl	2cf28 <__swhatbuf_r>
   2cfaa:	9900      	ldr	r1, [sp, #0]
   2cfac:	4606      	mov	r6, r0
   2cfae:	4628      	mov	r0, r5
   2cfb0:	f7fd f944 	bl	2a23c <_malloc_r>
   2cfb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2cfb8:	b1d8      	cbz	r0, 2cff2 <__smakebuf_r+0x6e>
   2cfba:	4a16      	ldr	r2, [pc, #88]	; (2d014 <__smakebuf_r+0x90>)
   2cfbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2cfc0:	9900      	ldr	r1, [sp, #0]
   2cfc2:	63ea      	str	r2, [r5, #60]	; 0x3c
   2cfc4:	9a01      	ldr	r2, [sp, #4]
   2cfc6:	81a3      	strh	r3, [r4, #12]
   2cfc8:	6020      	str	r0, [r4, #0]
   2cfca:	e9c4 0104 	strd	r0, r1, [r4, #16]
   2cfce:	b91a      	cbnz	r2, 2cfd8 <__smakebuf_r+0x54>
   2cfd0:	4333      	orrs	r3, r6
   2cfd2:	81a3      	strh	r3, [r4, #12]
   2cfd4:	b002      	add	sp, #8
   2cfd6:	bd70      	pop	{r4, r5, r6, pc}
   2cfd8:	4628      	mov	r0, r5
   2cfda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2cfde:	f000 ffd9 	bl	2df94 <_isatty_r>
   2cfe2:	b1a0      	cbz	r0, 2d00e <__smakebuf_r+0x8a>
   2cfe4:	89a3      	ldrh	r3, [r4, #12]
   2cfe6:	f023 0303 	bic.w	r3, r3, #3
   2cfea:	f043 0301 	orr.w	r3, r3, #1
   2cfee:	b21b      	sxth	r3, r3
   2cff0:	e7ee      	b.n	2cfd0 <__smakebuf_r+0x4c>
   2cff2:	059a      	lsls	r2, r3, #22
   2cff4:	d4ee      	bmi.n	2cfd4 <__smakebuf_r+0x50>
   2cff6:	f023 0303 	bic.w	r3, r3, #3
   2cffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2cffe:	2101      	movs	r1, #1
   2d000:	f043 0302 	orr.w	r3, r3, #2
   2d004:	6022      	str	r2, [r4, #0]
   2d006:	6122      	str	r2, [r4, #16]
   2d008:	81a3      	strh	r3, [r4, #12]
   2d00a:	6161      	str	r1, [r4, #20]
   2d00c:	e7e2      	b.n	2cfd4 <__smakebuf_r+0x50>
   2d00e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2d012:	e7dd      	b.n	2cfd0 <__smakebuf_r+0x4c>
   2d014:	0002c789 	.word	0x0002c789

0002d018 <memchr>:
   2d018:	0783      	lsls	r3, r0, #30
   2d01a:	b470      	push	{r4, r5, r6}
   2d01c:	b2cd      	uxtb	r5, r1
   2d01e:	d03b      	beq.n	2d098 <memchr+0x80>
   2d020:	1e54      	subs	r4, r2, #1
   2d022:	b302      	cbz	r2, 2d066 <memchr+0x4e>
   2d024:	7803      	ldrb	r3, [r0, #0]
   2d026:	42ab      	cmp	r3, r5
   2d028:	d01e      	beq.n	2d068 <memchr+0x50>
   2d02a:	1c43      	adds	r3, r0, #1
   2d02c:	e005      	b.n	2d03a <memchr+0x22>
   2d02e:	f114 34ff 	adds.w	r4, r4, #4294967295
   2d032:	d318      	bcc.n	2d066 <memchr+0x4e>
   2d034:	7802      	ldrb	r2, [r0, #0]
   2d036:	42aa      	cmp	r2, r5
   2d038:	d016      	beq.n	2d068 <memchr+0x50>
   2d03a:	f013 0f03 	tst.w	r3, #3
   2d03e:	4618      	mov	r0, r3
   2d040:	f103 0301 	add.w	r3, r3, #1
   2d044:	d1f3      	bne.n	2d02e <memchr+0x16>
   2d046:	2c03      	cmp	r4, #3
   2d048:	d810      	bhi.n	2d06c <memchr+0x54>
   2d04a:	b33c      	cbz	r4, 2d09c <memchr+0x84>
   2d04c:	7803      	ldrb	r3, [r0, #0]
   2d04e:	42ab      	cmp	r3, r5
   2d050:	d00a      	beq.n	2d068 <memchr+0x50>
   2d052:	4404      	add	r4, r0
   2d054:	1c43      	adds	r3, r0, #1
   2d056:	e002      	b.n	2d05e <memchr+0x46>
   2d058:	7802      	ldrb	r2, [r0, #0]
   2d05a:	42aa      	cmp	r2, r5
   2d05c:	d004      	beq.n	2d068 <memchr+0x50>
   2d05e:	4618      	mov	r0, r3
   2d060:	3301      	adds	r3, #1
   2d062:	4284      	cmp	r4, r0
   2d064:	d1f8      	bne.n	2d058 <memchr+0x40>
   2d066:	2000      	movs	r0, #0
   2d068:	bc70      	pop	{r4, r5, r6}
   2d06a:	4770      	bx	lr
   2d06c:	020a      	lsls	r2, r1, #8
   2d06e:	4601      	mov	r1, r0
   2d070:	b292      	uxth	r2, r2
   2d072:	432a      	orrs	r2, r5
   2d074:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   2d078:	4608      	mov	r0, r1
   2d07a:	3104      	adds	r1, #4
   2d07c:	6803      	ldr	r3, [r0, #0]
   2d07e:	4053      	eors	r3, r2
   2d080:	f1a3 3601 	sub.w	r6, r3, #16843009	; 0x1010101
   2d084:	ea26 0303 	bic.w	r3, r6, r3
   2d088:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2d08c:	d1de      	bne.n	2d04c <memchr+0x34>
   2d08e:	3c04      	subs	r4, #4
   2d090:	4608      	mov	r0, r1
   2d092:	2c03      	cmp	r4, #3
   2d094:	d8f0      	bhi.n	2d078 <memchr+0x60>
   2d096:	e7d8      	b.n	2d04a <memchr+0x32>
   2d098:	4614      	mov	r4, r2
   2d09a:	e7d4      	b.n	2d046 <memchr+0x2e>
   2d09c:	4620      	mov	r0, r4
   2d09e:	e7e3      	b.n	2d068 <memchr+0x50>

0002d0a0 <_Balloc>:
   2d0a0:	b538      	push	{r3, r4, r5, lr}
   2d0a2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2d0a4:	4605      	mov	r5, r0
   2d0a6:	460c      	mov	r4, r1
   2d0a8:	b14b      	cbz	r3, 2d0be <_Balloc+0x1e>
   2d0aa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2d0ae:	b180      	cbz	r0, 2d0d2 <_Balloc+0x32>
   2d0b0:	6802      	ldr	r2, [r0, #0]
   2d0b2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2d0b6:	2300      	movs	r3, #0
   2d0b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   2d0bc:	bd38      	pop	{r3, r4, r5, pc}
   2d0be:	2221      	movs	r2, #33	; 0x21
   2d0c0:	2104      	movs	r1, #4
   2d0c2:	f000 fea3 	bl	2de0c <_calloc_r>
   2d0c6:	4603      	mov	r3, r0
   2d0c8:	64e8      	str	r0, [r5, #76]	; 0x4c
   2d0ca:	2800      	cmp	r0, #0
   2d0cc:	d1ed      	bne.n	2d0aa <_Balloc+0xa>
   2d0ce:	2000      	movs	r0, #0
   2d0d0:	bd38      	pop	{r3, r4, r5, pc}
   2d0d2:	2101      	movs	r1, #1
   2d0d4:	4628      	mov	r0, r5
   2d0d6:	fa01 f504 	lsl.w	r5, r1, r4
   2d0da:	1d6a      	adds	r2, r5, #5
   2d0dc:	0092      	lsls	r2, r2, #2
   2d0de:	f000 fe95 	bl	2de0c <_calloc_r>
   2d0e2:	2800      	cmp	r0, #0
   2d0e4:	d0f3      	beq.n	2d0ce <_Balloc+0x2e>
   2d0e6:	e9c0 4501 	strd	r4, r5, [r0, #4]
   2d0ea:	e7e4      	b.n	2d0b6 <_Balloc+0x16>

0002d0ec <_Bfree>:
   2d0ec:	b131      	cbz	r1, 2d0fc <_Bfree+0x10>
   2d0ee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2d0f0:	684a      	ldr	r2, [r1, #4]
   2d0f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2d0f6:	6008      	str	r0, [r1, #0]
   2d0f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   2d0fc:	4770      	bx	lr
   2d0fe:	bf00      	nop

0002d100 <__multadd>:
   2d100:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d102:	f101 0c14 	add.w	ip, r1, #20
   2d106:	b083      	sub	sp, #12
   2d108:	460c      	mov	r4, r1
   2d10a:	4605      	mov	r5, r0
   2d10c:	690e      	ldr	r6, [r1, #16]
   2d10e:	2700      	movs	r7, #0
   2d110:	f8dc 0000 	ldr.w	r0, [ip]
   2d114:	3701      	adds	r7, #1
   2d116:	b281      	uxth	r1, r0
   2d118:	42be      	cmp	r6, r7
   2d11a:	ea4f 4010 	mov.w	r0, r0, lsr #16
   2d11e:	fb02 3301 	mla	r3, r2, r1, r3
   2d122:	ea4f 4113 	mov.w	r1, r3, lsr #16
   2d126:	b29b      	uxth	r3, r3
   2d128:	fb02 1000 	mla	r0, r2, r0, r1
   2d12c:	eb03 4100 	add.w	r1, r3, r0, lsl #16
   2d130:	ea4f 4310 	mov.w	r3, r0, lsr #16
   2d134:	f84c 1b04 	str.w	r1, [ip], #4
   2d138:	dcea      	bgt.n	2d110 <__multadd+0x10>
   2d13a:	b13b      	cbz	r3, 2d14c <__multadd+0x4c>
   2d13c:	68a2      	ldr	r2, [r4, #8]
   2d13e:	42b2      	cmp	r2, r6
   2d140:	dd07      	ble.n	2d152 <__multadd+0x52>
   2d142:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   2d146:	3601      	adds	r6, #1
   2d148:	6153      	str	r3, [r2, #20]
   2d14a:	6126      	str	r6, [r4, #16]
   2d14c:	4620      	mov	r0, r4
   2d14e:	b003      	add	sp, #12
   2d150:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d152:	6861      	ldr	r1, [r4, #4]
   2d154:	4628      	mov	r0, r5
   2d156:	9301      	str	r3, [sp, #4]
   2d158:	3101      	adds	r1, #1
   2d15a:	f7ff ffa1 	bl	2d0a0 <_Balloc>
   2d15e:	6922      	ldr	r2, [r4, #16]
   2d160:	f104 010c 	add.w	r1, r4, #12
   2d164:	4607      	mov	r7, r0
   2d166:	3202      	adds	r2, #2
   2d168:	300c      	adds	r0, #12
   2d16a:	0092      	lsls	r2, r2, #2
   2d16c:	f7e0 fd34 	bl	dbd8 <memcpy>
   2d170:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   2d172:	6861      	ldr	r1, [r4, #4]
   2d174:	9b01      	ldr	r3, [sp, #4]
   2d176:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2d17a:	6020      	str	r0, [r4, #0]
   2d17c:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   2d180:	463c      	mov	r4, r7
   2d182:	e7de      	b.n	2d142 <__multadd+0x42>

0002d184 <__hi0bits>:
   2d184:	4a0f      	ldr	r2, [pc, #60]	; (2d1c4 <__hi0bits+0x40>)
   2d186:	4603      	mov	r3, r0
   2d188:	4002      	ands	r2, r0
   2d18a:	b9c2      	cbnz	r2, 2d1be <__hi0bits+0x3a>
   2d18c:	0403      	lsls	r3, r0, #16
   2d18e:	2010      	movs	r0, #16
   2d190:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   2d194:	d101      	bne.n	2d19a <__hi0bits+0x16>
   2d196:	3008      	adds	r0, #8
   2d198:	021b      	lsls	r3, r3, #8
   2d19a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2d19e:	d101      	bne.n	2d1a4 <__hi0bits+0x20>
   2d1a0:	3004      	adds	r0, #4
   2d1a2:	011b      	lsls	r3, r3, #4
   2d1a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   2d1a8:	d101      	bne.n	2d1ae <__hi0bits+0x2a>
   2d1aa:	3002      	adds	r0, #2
   2d1ac:	009b      	lsls	r3, r3, #2
   2d1ae:	2b00      	cmp	r3, #0
   2d1b0:	db04      	blt.n	2d1bc <__hi0bits+0x38>
   2d1b2:	005b      	lsls	r3, r3, #1
   2d1b4:	d501      	bpl.n	2d1ba <__hi0bits+0x36>
   2d1b6:	3001      	adds	r0, #1
   2d1b8:	4770      	bx	lr
   2d1ba:	2020      	movs	r0, #32
   2d1bc:	4770      	bx	lr
   2d1be:	2000      	movs	r0, #0
   2d1c0:	e7e6      	b.n	2d190 <__hi0bits+0xc>
   2d1c2:	bf00      	nop
   2d1c4:	ffff0000 	.word	0xffff0000

0002d1c8 <__lo0bits>:
   2d1c8:	6803      	ldr	r3, [r0, #0]
   2d1ca:	4601      	mov	r1, r0
   2d1cc:	f013 0207 	ands.w	r2, r3, #7
   2d1d0:	d007      	beq.n	2d1e2 <__lo0bits+0x1a>
   2d1d2:	07da      	lsls	r2, r3, #31
   2d1d4:	d41f      	bmi.n	2d216 <__lo0bits+0x4e>
   2d1d6:	0798      	lsls	r0, r3, #30
   2d1d8:	d51f      	bpl.n	2d21a <__lo0bits+0x52>
   2d1da:	085b      	lsrs	r3, r3, #1
   2d1dc:	2001      	movs	r0, #1
   2d1de:	600b      	str	r3, [r1, #0]
   2d1e0:	4770      	bx	lr
   2d1e2:	b298      	uxth	r0, r3
   2d1e4:	b1a0      	cbz	r0, 2d210 <__lo0bits+0x48>
   2d1e6:	4610      	mov	r0, r2
   2d1e8:	f013 0fff 	tst.w	r3, #255	; 0xff
   2d1ec:	d101      	bne.n	2d1f2 <__lo0bits+0x2a>
   2d1ee:	3008      	adds	r0, #8
   2d1f0:	0a1b      	lsrs	r3, r3, #8
   2d1f2:	071a      	lsls	r2, r3, #28
   2d1f4:	d101      	bne.n	2d1fa <__lo0bits+0x32>
   2d1f6:	3004      	adds	r0, #4
   2d1f8:	091b      	lsrs	r3, r3, #4
   2d1fa:	079a      	lsls	r2, r3, #30
   2d1fc:	d101      	bne.n	2d202 <__lo0bits+0x3a>
   2d1fe:	3002      	adds	r0, #2
   2d200:	089b      	lsrs	r3, r3, #2
   2d202:	07da      	lsls	r2, r3, #31
   2d204:	d402      	bmi.n	2d20c <__lo0bits+0x44>
   2d206:	085b      	lsrs	r3, r3, #1
   2d208:	d00b      	beq.n	2d222 <__lo0bits+0x5a>
   2d20a:	3001      	adds	r0, #1
   2d20c:	600b      	str	r3, [r1, #0]
   2d20e:	4770      	bx	lr
   2d210:	0c1b      	lsrs	r3, r3, #16
   2d212:	2010      	movs	r0, #16
   2d214:	e7e8      	b.n	2d1e8 <__lo0bits+0x20>
   2d216:	2000      	movs	r0, #0
   2d218:	4770      	bx	lr
   2d21a:	089b      	lsrs	r3, r3, #2
   2d21c:	2002      	movs	r0, #2
   2d21e:	600b      	str	r3, [r1, #0]
   2d220:	4770      	bx	lr
   2d222:	2020      	movs	r0, #32
   2d224:	4770      	bx	lr
   2d226:	bf00      	nop

0002d228 <__i2b>:
   2d228:	b510      	push	{r4, lr}
   2d22a:	460c      	mov	r4, r1
   2d22c:	2101      	movs	r1, #1
   2d22e:	f7ff ff37 	bl	2d0a0 <_Balloc>
   2d232:	2201      	movs	r2, #1
   2d234:	e9c0 2404 	strd	r2, r4, [r0, #16]
   2d238:	bd10      	pop	{r4, pc}
   2d23a:	bf00      	nop

0002d23c <__multiply>:
   2d23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d240:	690d      	ldr	r5, [r1, #16]
   2d242:	b085      	sub	sp, #20
   2d244:	6914      	ldr	r4, [r2, #16]
   2d246:	460e      	mov	r6, r1
   2d248:	4691      	mov	r9, r2
   2d24a:	42a5      	cmp	r5, r4
   2d24c:	da04      	bge.n	2d258 <__multiply+0x1c>
   2d24e:	462a      	mov	r2, r5
   2d250:	464e      	mov	r6, r9
   2d252:	4625      	mov	r5, r4
   2d254:	4689      	mov	r9, r1
   2d256:	4614      	mov	r4, r2
   2d258:	eb05 0804 	add.w	r8, r5, r4
   2d25c:	e9d6 1301 	ldrd	r1, r3, [r6, #4]
   2d260:	4543      	cmp	r3, r8
   2d262:	bfb8      	it	lt
   2d264:	3101      	addlt	r1, #1
   2d266:	f7ff ff1b 	bl	2d0a0 <_Balloc>
   2d26a:	f100 0b14 	add.w	fp, r0, #20
   2d26e:	9001      	str	r0, [sp, #4]
   2d270:	eb0b 0a88 	add.w	sl, fp, r8, lsl #2
   2d274:	45d3      	cmp	fp, sl
   2d276:	d205      	bcs.n	2d284 <__multiply+0x48>
   2d278:	465b      	mov	r3, fp
   2d27a:	2200      	movs	r2, #0
   2d27c:	f843 2b04 	str.w	r2, [r3], #4
   2d280:	459a      	cmp	sl, r3
   2d282:	d8fb      	bhi.n	2d27c <__multiply+0x40>
   2d284:	f109 0314 	add.w	r3, r9, #20
   2d288:	f106 0214 	add.w	r2, r6, #20
   2d28c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2d290:	eb02 0e85 	add.w	lr, r2, r5, lsl #2
   2d294:	42a3      	cmp	r3, r4
   2d296:	d264      	bcs.n	2d362 <__multiply+0x126>
   2d298:	eba4 0409 	sub.w	r4, r4, r9
   2d29c:	f109 0910 	add.w	r9, r9, #16
   2d2a0:	3c15      	subs	r4, #21
   2d2a2:	f024 0403 	bic.w	r4, r4, #3
   2d2a6:	4423      	add	r3, r4
   2d2a8:	e9cd a802 	strd	sl, r8, [sp, #8]
   2d2ac:	4690      	mov	r8, r2
   2d2ae:	469a      	mov	sl, r3
   2d2b0:	e005      	b.n	2d2be <__multiply+0x82>
   2d2b2:	0c00      	lsrs	r0, r0, #16
   2d2b4:	d12e      	bne.n	2d314 <__multiply+0xd8>
   2d2b6:	45ca      	cmp	sl, r9
   2d2b8:	f10b 0b04 	add.w	fp, fp, #4
   2d2bc:	d04f      	beq.n	2d35e <__multiply+0x122>
   2d2be:	f859 0f04 	ldr.w	r0, [r9, #4]!
   2d2c2:	fa1f fc80 	uxth.w	ip, r0
   2d2c6:	f1bc 0f00 	cmp.w	ip, #0
   2d2ca:	d0f2      	beq.n	2d2b2 <__multiply+0x76>
   2d2cc:	4647      	mov	r7, r8
   2d2ce:	465e      	mov	r6, fp
   2d2d0:	2100      	movs	r1, #0
   2d2d2:	e000      	b.n	2d2d6 <__multiply+0x9a>
   2d2d4:	4606      	mov	r6, r0
   2d2d6:	f857 3b04 	ldr.w	r3, [r7], #4
   2d2da:	4630      	mov	r0, r6
   2d2dc:	6834      	ldr	r4, [r6, #0]
   2d2de:	b29a      	uxth	r2, r3
   2d2e0:	45be      	cmp	lr, r7
   2d2e2:	b2a5      	uxth	r5, r4
   2d2e4:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2d2e8:	fb0c 5202 	mla	r2, ip, r2, r5
   2d2ec:	ea4f 4414 	mov.w	r4, r4, lsr #16
   2d2f0:	440a      	add	r2, r1
   2d2f2:	fb0c 4103 	mla	r1, ip, r3, r4
   2d2f6:	b293      	uxth	r3, r2
   2d2f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   2d2fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2d300:	ea4f 4111 	mov.w	r1, r1, lsr #16
   2d304:	f840 3b04 	str.w	r3, [r0], #4
   2d308:	d8e4      	bhi.n	2d2d4 <__multiply+0x98>
   2d30a:	6071      	str	r1, [r6, #4]
   2d30c:	f8d9 0000 	ldr.w	r0, [r9]
   2d310:	0c00      	lsrs	r0, r0, #16
   2d312:	d0d0      	beq.n	2d2b6 <__multiply+0x7a>
   2d314:	f8db 3000 	ldr.w	r3, [fp]
   2d318:	4644      	mov	r4, r8
   2d31a:	465e      	mov	r6, fp
   2d31c:	2700      	movs	r7, #0
   2d31e:	461a      	mov	r2, r3
   2d320:	e000      	b.n	2d324 <__multiply+0xe8>
   2d322:	460e      	mov	r6, r1
   2d324:	0c15      	lsrs	r5, r2, #16
   2d326:	8822      	ldrh	r2, [r4, #0]
   2d328:	b29b      	uxth	r3, r3
   2d32a:	4631      	mov	r1, r6
   2d32c:	fb00 5202 	mla	r2, r0, r2, r5
   2d330:	4417      	add	r7, r2
   2d332:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   2d336:	f841 3b04 	str.w	r3, [r1], #4
   2d33a:	f854 3b04 	ldr.w	r3, [r4], #4
   2d33e:	6872      	ldr	r2, [r6, #4]
   2d340:	0c1b      	lsrs	r3, r3, #16
   2d342:	45a6      	cmp	lr, r4
   2d344:	b295      	uxth	r5, r2
   2d346:	fb00 5303 	mla	r3, r0, r3, r5
   2d34a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   2d34e:	ea4f 4713 	mov.w	r7, r3, lsr #16
   2d352:	d8e6      	bhi.n	2d322 <__multiply+0xe6>
   2d354:	45ca      	cmp	sl, r9
   2d356:	6073      	str	r3, [r6, #4]
   2d358:	f10b 0b04 	add.w	fp, fp, #4
   2d35c:	d1af      	bne.n	2d2be <__multiply+0x82>
   2d35e:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   2d362:	f1b8 0f00 	cmp.w	r8, #0
   2d366:	dd0b      	ble.n	2d380 <__multiply+0x144>
   2d368:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   2d36c:	f1aa 0a04 	sub.w	sl, sl, #4
   2d370:	b11b      	cbz	r3, 2d37a <__multiply+0x13e>
   2d372:	e005      	b.n	2d380 <__multiply+0x144>
   2d374:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   2d378:	b913      	cbnz	r3, 2d380 <__multiply+0x144>
   2d37a:	f1b8 0801 	subs.w	r8, r8, #1
   2d37e:	d1f9      	bne.n	2d374 <__multiply+0x138>
   2d380:	9801      	ldr	r0, [sp, #4]
   2d382:	f8c0 8010 	str.w	r8, [r0, #16]
   2d386:	b005      	add	sp, #20
   2d388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d38c <__pow5mult>:
   2d38c:	f012 0303 	ands.w	r3, r2, #3
   2d390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d394:	4614      	mov	r4, r2
   2d396:	4607      	mov	r7, r0
   2d398:	d12e      	bne.n	2d3f8 <__pow5mult+0x6c>
   2d39a:	460d      	mov	r5, r1
   2d39c:	10a4      	asrs	r4, r4, #2
   2d39e:	d01c      	beq.n	2d3da <__pow5mult+0x4e>
   2d3a0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   2d3a2:	b396      	cbz	r6, 2d40a <__pow5mult+0x7e>
   2d3a4:	07e3      	lsls	r3, r4, #31
   2d3a6:	f04f 0800 	mov.w	r8, #0
   2d3aa:	d406      	bmi.n	2d3ba <__pow5mult+0x2e>
   2d3ac:	1064      	asrs	r4, r4, #1
   2d3ae:	d014      	beq.n	2d3da <__pow5mult+0x4e>
   2d3b0:	6830      	ldr	r0, [r6, #0]
   2d3b2:	b1a8      	cbz	r0, 2d3e0 <__pow5mult+0x54>
   2d3b4:	4606      	mov	r6, r0
   2d3b6:	07e3      	lsls	r3, r4, #31
   2d3b8:	d5f8      	bpl.n	2d3ac <__pow5mult+0x20>
   2d3ba:	4632      	mov	r2, r6
   2d3bc:	4629      	mov	r1, r5
   2d3be:	4638      	mov	r0, r7
   2d3c0:	f7ff ff3c 	bl	2d23c <__multiply>
   2d3c4:	b1b5      	cbz	r5, 2d3f4 <__pow5mult+0x68>
   2d3c6:	686a      	ldr	r2, [r5, #4]
   2d3c8:	1064      	asrs	r4, r4, #1
   2d3ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2d3cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2d3d0:	6029      	str	r1, [r5, #0]
   2d3d2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   2d3d6:	4605      	mov	r5, r0
   2d3d8:	d1ea      	bne.n	2d3b0 <__pow5mult+0x24>
   2d3da:	4628      	mov	r0, r5
   2d3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d3e0:	4632      	mov	r2, r6
   2d3e2:	4631      	mov	r1, r6
   2d3e4:	4638      	mov	r0, r7
   2d3e6:	f7ff ff29 	bl	2d23c <__multiply>
   2d3ea:	6030      	str	r0, [r6, #0]
   2d3ec:	f8c0 8000 	str.w	r8, [r0]
   2d3f0:	4606      	mov	r6, r0
   2d3f2:	e7e0      	b.n	2d3b6 <__pow5mult+0x2a>
   2d3f4:	4605      	mov	r5, r0
   2d3f6:	e7d9      	b.n	2d3ac <__pow5mult+0x20>
   2d3f8:	1e5a      	subs	r2, r3, #1
   2d3fa:	4d0b      	ldr	r5, [pc, #44]	; (2d428 <__pow5mult+0x9c>)
   2d3fc:	2300      	movs	r3, #0
   2d3fe:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   2d402:	f7ff fe7d 	bl	2d100 <__multadd>
   2d406:	4605      	mov	r5, r0
   2d408:	e7c8      	b.n	2d39c <__pow5mult+0x10>
   2d40a:	2101      	movs	r1, #1
   2d40c:	4638      	mov	r0, r7
   2d40e:	f7ff fe47 	bl	2d0a0 <_Balloc>
   2d412:	f240 2171 	movw	r1, #625	; 0x271
   2d416:	2201      	movs	r2, #1
   2d418:	2300      	movs	r3, #0
   2d41a:	4606      	mov	r6, r0
   2d41c:	e9c0 2104 	strd	r2, r1, [r0, #16]
   2d420:	64b8      	str	r0, [r7, #72]	; 0x48
   2d422:	6003      	str	r3, [r0, #0]
   2d424:	e7be      	b.n	2d3a4 <__pow5mult+0x18>
   2d426:	bf00      	nop
   2d428:	00033f24 	.word	0x00033f24

0002d42c <__lshift>:
   2d42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d430:	690f      	ldr	r7, [r1, #16]
   2d432:	ea4f 1962 	mov.w	r9, r2, asr #5
   2d436:	688b      	ldr	r3, [r1, #8]
   2d438:	460d      	mov	r5, r1
   2d43a:	444f      	add	r7, r9
   2d43c:	4690      	mov	r8, r2
   2d43e:	4606      	mov	r6, r0
   2d440:	6849      	ldr	r1, [r1, #4]
   2d442:	1c7c      	adds	r4, r7, #1
   2d444:	429c      	cmp	r4, r3
   2d446:	dd03      	ble.n	2d450 <__lshift+0x24>
   2d448:	005b      	lsls	r3, r3, #1
   2d44a:	3101      	adds	r1, #1
   2d44c:	429c      	cmp	r4, r3
   2d44e:	dcfb      	bgt.n	2d448 <__lshift+0x1c>
   2d450:	4630      	mov	r0, r6
   2d452:	f7ff fe25 	bl	2d0a0 <_Balloc>
   2d456:	f1b9 0f00 	cmp.w	r9, #0
   2d45a:	4684      	mov	ip, r0
   2d45c:	f100 0314 	add.w	r3, r0, #20
   2d460:	dd3d      	ble.n	2d4de <__lshift+0xb2>
   2d462:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   2d466:	2200      	movs	r2, #0
   2d468:	f843 2b04 	str.w	r2, [r3], #4
   2d46c:	428b      	cmp	r3, r1
   2d46e:	d1fb      	bne.n	2d468 <__lshift+0x3c>
   2d470:	f105 0314 	add.w	r3, r5, #20
   2d474:	6928      	ldr	r0, [r5, #16]
   2d476:	f018 081f 	ands.w	r8, r8, #31
   2d47a:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
   2d47e:	d026      	beq.n	2d4ce <__lshift+0xa2>
   2d480:	f1c8 0220 	rsb	r2, r8, #32
   2d484:	f04f 0a00 	mov.w	sl, #0
   2d488:	e000      	b.n	2d48c <__lshift+0x60>
   2d48a:	4649      	mov	r1, r9
   2d48c:	6818      	ldr	r0, [r3, #0]
   2d48e:	4689      	mov	r9, r1
   2d490:	fa00 f008 	lsl.w	r0, r0, r8
   2d494:	ea40 000a 	orr.w	r0, r0, sl
   2d498:	f849 0b04 	str.w	r0, [r9], #4
   2d49c:	f853 0b04 	ldr.w	r0, [r3], #4
   2d4a0:	4573      	cmp	r3, lr
   2d4a2:	fa20 fa02 	lsr.w	sl, r0, r2
   2d4a6:	d3f0      	bcc.n	2d48a <__lshift+0x5e>
   2d4a8:	f8c1 a004 	str.w	sl, [r1, #4]
   2d4ac:	f1ba 0f00 	cmp.w	sl, #0
   2d4b0:	d000      	beq.n	2d4b4 <__lshift+0x88>
   2d4b2:	1cbc      	adds	r4, r7, #2
   2d4b4:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   2d4b6:	3c01      	subs	r4, #1
   2d4b8:	686a      	ldr	r2, [r5, #4]
   2d4ba:	4660      	mov	r0, ip
   2d4bc:	f8cc 4010 	str.w	r4, [ip, #16]
   2d4c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2d4c4:	6029      	str	r1, [r5, #0]
   2d4c6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   2d4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d4ce:	3904      	subs	r1, #4
   2d4d0:	f853 2b04 	ldr.w	r2, [r3], #4
   2d4d4:	459e      	cmp	lr, r3
   2d4d6:	f841 2f04 	str.w	r2, [r1, #4]!
   2d4da:	d8f9      	bhi.n	2d4d0 <__lshift+0xa4>
   2d4dc:	e7ea      	b.n	2d4b4 <__lshift+0x88>
   2d4de:	4619      	mov	r1, r3
   2d4e0:	e7c6      	b.n	2d470 <__lshift+0x44>
   2d4e2:	bf00      	nop

0002d4e4 <__mcmp>:
   2d4e4:	b430      	push	{r4, r5}
   2d4e6:	690a      	ldr	r2, [r1, #16]
   2d4e8:	4605      	mov	r5, r0
   2d4ea:	6900      	ldr	r0, [r0, #16]
   2d4ec:	1a80      	subs	r0, r0, r2
   2d4ee:	d10f      	bne.n	2d510 <__mcmp+0x2c>
   2d4f0:	0092      	lsls	r2, r2, #2
   2d4f2:	3514      	adds	r5, #20
   2d4f4:	3114      	adds	r1, #20
   2d4f6:	18ab      	adds	r3, r5, r2
   2d4f8:	4411      	add	r1, r2
   2d4fa:	e001      	b.n	2d500 <__mcmp+0x1c>
   2d4fc:	429d      	cmp	r5, r3
   2d4fe:	d207      	bcs.n	2d510 <__mcmp+0x2c>
   2d500:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   2d504:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2d508:	4294      	cmp	r4, r2
   2d50a:	d0f7      	beq.n	2d4fc <__mcmp+0x18>
   2d50c:	d302      	bcc.n	2d514 <__mcmp+0x30>
   2d50e:	2001      	movs	r0, #1
   2d510:	bc30      	pop	{r4, r5}
   2d512:	4770      	bx	lr
   2d514:	f04f 30ff 	mov.w	r0, #4294967295
   2d518:	e7fa      	b.n	2d510 <__mcmp+0x2c>
   2d51a:	bf00      	nop

0002d51c <__mdiff>:
   2d51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d520:	690c      	ldr	r4, [r1, #16]
   2d522:	460f      	mov	r7, r1
   2d524:	6913      	ldr	r3, [r2, #16]
   2d526:	4616      	mov	r6, r2
   2d528:	f101 0514 	add.w	r5, r1, #20
   2d52c:	f102 0814 	add.w	r8, r2, #20
   2d530:	1ae4      	subs	r4, r4, r3
   2d532:	2c00      	cmp	r4, #0
   2d534:	d114      	bne.n	2d560 <__mdiff+0x44>
   2d536:	009b      	lsls	r3, r3, #2
   2d538:	18ea      	adds	r2, r5, r3
   2d53a:	4443      	add	r3, r8
   2d53c:	e001      	b.n	2d542 <__mdiff+0x26>
   2d53e:	42aa      	cmp	r2, r5
   2d540:	d962      	bls.n	2d608 <__mdiff+0xec>
   2d542:	f852 cd04 	ldr.w	ip, [r2, #-4]!
   2d546:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2d54a:	458c      	cmp	ip, r1
   2d54c:	d0f7      	beq.n	2d53e <__mdiff+0x22>
   2d54e:	d209      	bcs.n	2d564 <__mdiff+0x48>
   2d550:	462a      	mov	r2, r5
   2d552:	463b      	mov	r3, r7
   2d554:	4645      	mov	r5, r8
   2d556:	4637      	mov	r7, r6
   2d558:	4690      	mov	r8, r2
   2d55a:	461e      	mov	r6, r3
   2d55c:	2401      	movs	r4, #1
   2d55e:	e001      	b.n	2d564 <__mdiff+0x48>
   2d560:	dbf6      	blt.n	2d550 <__mdiff+0x34>
   2d562:	2400      	movs	r4, #0
   2d564:	6879      	ldr	r1, [r7, #4]
   2d566:	f7ff fd9b 	bl	2d0a0 <_Balloc>
   2d56a:	f8d7 e010 	ldr.w	lr, [r7, #16]
   2d56e:	6933      	ldr	r3, [r6, #16]
   2d570:	4647      	mov	r7, r8
   2d572:	462e      	mov	r6, r5
   2d574:	eb05 0c8e 	add.w	ip, r5, lr, lsl #2
   2d578:	eb08 0883 	add.w	r8, r8, r3, lsl #2
   2d57c:	f100 0514 	add.w	r5, r0, #20
   2d580:	2200      	movs	r2, #0
   2d582:	60c4      	str	r4, [r0, #12]
   2d584:	f856 3b04 	ldr.w	r3, [r6], #4
   2d588:	f857 1b04 	ldr.w	r1, [r7], #4
   2d58c:	b29c      	uxth	r4, r3
   2d58e:	fa1f f981 	uxth.w	r9, r1
   2d592:	45b8      	cmp	r8, r7
   2d594:	4422      	add	r2, r4
   2d596:	ea4f 4111 	mov.w	r1, r1, lsr #16
   2d59a:	eba2 0409 	sub.w	r4, r2, r9
   2d59e:	ebc1 4213 	rsb	r2, r1, r3, lsr #16
   2d5a2:	b2a3      	uxth	r3, r4
   2d5a4:	eb02 4224 	add.w	r2, r2, r4, asr #16
   2d5a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2d5ac:	ea4f 4222 	mov.w	r2, r2, asr #16
   2d5b0:	f845 3b04 	str.w	r3, [r5], #4
   2d5b4:	d8e6      	bhi.n	2d584 <__mdiff+0x68>
   2d5b6:	45b4      	cmp	ip, r6
   2d5b8:	d91a      	bls.n	2d5f0 <__mdiff+0xd4>
   2d5ba:	462f      	mov	r7, r5
   2d5bc:	4634      	mov	r4, r6
   2d5be:	f854 8b04 	ldr.w	r8, [r4], #4
   2d5c2:	fa1f f388 	uxth.w	r3, r8
   2d5c6:	45a4      	cmp	ip, r4
   2d5c8:	441a      	add	r2, r3
   2d5ca:	ea4f 4122 	mov.w	r1, r2, asr #16
   2d5ce:	b293      	uxth	r3, r2
   2d5d0:	eb01 4218 	add.w	r2, r1, r8, lsr #16
   2d5d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2d5d8:	ea4f 4222 	mov.w	r2, r2, asr #16
   2d5dc:	f847 3b04 	str.w	r3, [r7], #4
   2d5e0:	d8ed      	bhi.n	2d5be <__mdiff+0xa2>
   2d5e2:	43f6      	mvns	r6, r6
   2d5e4:	44b4      	add	ip, r6
   2d5e6:	f02c 0c03 	bic.w	ip, ip, #3
   2d5ea:	f10c 0c04 	add.w	ip, ip, #4
   2d5ee:	4465      	add	r5, ip
   2d5f0:	3d04      	subs	r5, #4
   2d5f2:	b92b      	cbnz	r3, 2d600 <__mdiff+0xe4>
   2d5f4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   2d5f8:	f10e 3eff 	add.w	lr, lr, #4294967295
   2d5fc:	2b00      	cmp	r3, #0
   2d5fe:	d0f9      	beq.n	2d5f4 <__mdiff+0xd8>
   2d600:	f8c0 e010 	str.w	lr, [r0, #16]
   2d604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2d608:	2100      	movs	r1, #0
   2d60a:	f7ff fd49 	bl	2d0a0 <_Balloc>
   2d60e:	2201      	movs	r2, #1
   2d610:	2300      	movs	r3, #0
   2d612:	e9c0 2304 	strd	r2, r3, [r0, #16]
   2d616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2d61a:	bf00      	nop

0002d61c <__d2b>:
   2d61c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d620:	ec55 4b10 	vmov	r4, r5, d0
   2d624:	f3c5 580a 	ubfx	r8, r5, #20, #11
   2d628:	b083      	sub	sp, #12
   2d62a:	460f      	mov	r7, r1
   2d62c:	2101      	movs	r1, #1
   2d62e:	4616      	mov	r6, r2
   2d630:	f7ff fd36 	bl	2d0a0 <_Balloc>
   2d634:	f3c5 0313 	ubfx	r3, r5, #0, #20
   2d638:	4681      	mov	r9, r0
   2d63a:	f1b8 0f00 	cmp.w	r8, #0
   2d63e:	d001      	beq.n	2d644 <__d2b+0x28>
   2d640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2d644:	2c00      	cmp	r4, #0
   2d646:	9301      	str	r3, [sp, #4]
   2d648:	d024      	beq.n	2d694 <__d2b+0x78>
   2d64a:	a802      	add	r0, sp, #8
   2d64c:	f840 4d08 	str.w	r4, [r0, #-8]!
   2d650:	f7ff fdba 	bl	2d1c8 <__lo0bits>
   2d654:	2800      	cmp	r0, #0
   2d656:	d134      	bne.n	2d6c2 <__d2b+0xa6>
   2d658:	e9dd 2300 	ldrd	r2, r3, [sp]
   2d65c:	f8c9 2014 	str.w	r2, [r9, #20]
   2d660:	2b00      	cmp	r3, #0
   2d662:	f8c9 3018 	str.w	r3, [r9, #24]
   2d666:	bf0c      	ite	eq
   2d668:	2101      	moveq	r1, #1
   2d66a:	2102      	movne	r1, #2
   2d66c:	f8c9 1010 	str.w	r1, [r9, #16]
   2d670:	f1b8 0f00 	cmp.w	r8, #0
   2d674:	d11a      	bne.n	2d6ac <__d2b+0x90>
   2d676:	eb09 0381 	add.w	r3, r9, r1, lsl #2
   2d67a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2d67e:	6038      	str	r0, [r7, #0]
   2d680:	6918      	ldr	r0, [r3, #16]
   2d682:	f7ff fd7f 	bl	2d184 <__hi0bits>
   2d686:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   2d68a:	6030      	str	r0, [r6, #0]
   2d68c:	4648      	mov	r0, r9
   2d68e:	b003      	add	sp, #12
   2d690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2d694:	a801      	add	r0, sp, #4
   2d696:	f7ff fd97 	bl	2d1c8 <__lo0bits>
   2d69a:	2301      	movs	r3, #1
   2d69c:	9a01      	ldr	r2, [sp, #4]
   2d69e:	3020      	adds	r0, #32
   2d6a0:	4619      	mov	r1, r3
   2d6a2:	e9c9 3204 	strd	r3, r2, [r9, #16]
   2d6a6:	f1b8 0f00 	cmp.w	r8, #0
   2d6aa:	d0e4      	beq.n	2d676 <__d2b+0x5a>
   2d6ac:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
   2d6b0:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
   2d6b4:	4440      	add	r0, r8
   2d6b6:	6038      	str	r0, [r7, #0]
   2d6b8:	4648      	mov	r0, r9
   2d6ba:	6033      	str	r3, [r6, #0]
   2d6bc:	b003      	add	sp, #12
   2d6be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2d6c2:	9b01      	ldr	r3, [sp, #4]
   2d6c4:	f1c0 0220 	rsb	r2, r0, #32
   2d6c8:	9900      	ldr	r1, [sp, #0]
   2d6ca:	fa03 f202 	lsl.w	r2, r3, r2
   2d6ce:	40c3      	lsrs	r3, r0
   2d6d0:	430a      	orrs	r2, r1
   2d6d2:	9301      	str	r3, [sp, #4]
   2d6d4:	f8c9 2014 	str.w	r2, [r9, #20]
   2d6d8:	e7c2      	b.n	2d660 <__d2b+0x44>
   2d6da:	bf00      	nop

0002d6dc <_realloc_r>:
   2d6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d6e0:	4692      	mov	sl, r2
   2d6e2:	b083      	sub	sp, #12
   2d6e4:	2900      	cmp	r1, #0
   2d6e6:	d07a      	beq.n	2d7de <_realloc_r+0x102>
   2d6e8:	460d      	mov	r5, r1
   2d6ea:	f10a 040b 	add.w	r4, sl, #11
   2d6ee:	4680      	mov	r8, r0
   2d6f0:	f7fd f942 	bl	2a978 <__malloc_lock>
   2d6f4:	f855 1c04 	ldr.w	r1, [r5, #-4]
   2d6f8:	2c16      	cmp	r4, #22
   2d6fa:	f1a5 0708 	sub.w	r7, r5, #8
   2d6fe:	f021 0603 	bic.w	r6, r1, #3
   2d702:	d842      	bhi.n	2d78a <_realloc_r+0xae>
   2d704:	2210      	movs	r2, #16
   2d706:	2300      	movs	r3, #0
   2d708:	4614      	mov	r4, r2
   2d70a:	4554      	cmp	r4, sl
   2d70c:	f0c0 80f7 	bcc.w	2d8fe <_realloc_r+0x222>
   2d710:	2b00      	cmp	r3, #0
   2d712:	f040 80f4 	bne.w	2d8fe <_realloc_r+0x222>
   2d716:	4296      	cmp	r6, r2
   2d718:	eb07 0906 	add.w	r9, r7, r6
   2d71c:	da49      	bge.n	2d7b2 <_realloc_r+0xd6>
   2d71e:	4bc4      	ldr	r3, [pc, #784]	; (2da30 <_realloc_r+0x354>)
   2d720:	6898      	ldr	r0, [r3, #8]
   2d722:	4548      	cmp	r0, r9
   2d724:	d073      	beq.n	2d80e <_realloc_r+0x132>
   2d726:	f8d9 0004 	ldr.w	r0, [r9, #4]
   2d72a:	f020 0301 	bic.w	r3, r0, #1
   2d72e:	444b      	add	r3, r9
   2d730:	685b      	ldr	r3, [r3, #4]
   2d732:	07db      	lsls	r3, r3, #31
   2d734:	d52e      	bpl.n	2d794 <_realloc_r+0xb8>
   2d736:	07c9      	lsls	r1, r1, #31
   2d738:	f140 8109 	bpl.w	2d94e <_realloc_r+0x272>
   2d73c:	4651      	mov	r1, sl
   2d73e:	4640      	mov	r0, r8
   2d740:	f7fc fd7c 	bl	2a23c <_malloc_r>
   2d744:	4682      	mov	sl, r0
   2d746:	b1e0      	cbz	r0, 2d782 <_realloc_r+0xa6>
   2d748:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2d74c:	f1a0 0208 	sub.w	r2, r0, #8
   2d750:	f023 0301 	bic.w	r3, r3, #1
   2d754:	443b      	add	r3, r7
   2d756:	4293      	cmp	r3, r2
   2d758:	f000 8102 	beq.w	2d960 <_realloc_r+0x284>
   2d75c:	1f32      	subs	r2, r6, #4
   2d75e:	2a24      	cmp	r2, #36	; 0x24
   2d760:	f200 810e 	bhi.w	2d980 <_realloc_r+0x2a4>
   2d764:	2a13      	cmp	r2, #19
   2d766:	6829      	ldr	r1, [r5, #0]
   2d768:	f200 80e6 	bhi.w	2d938 <_realloc_r+0x25c>
   2d76c:	4603      	mov	r3, r0
   2d76e:	462a      	mov	r2, r5
   2d770:	6019      	str	r1, [r3, #0]
   2d772:	6851      	ldr	r1, [r2, #4]
   2d774:	6059      	str	r1, [r3, #4]
   2d776:	6892      	ldr	r2, [r2, #8]
   2d778:	609a      	str	r2, [r3, #8]
   2d77a:	4629      	mov	r1, r5
   2d77c:	4640      	mov	r0, r8
   2d77e:	f7ff f917 	bl	2c9b0 <_free_r>
   2d782:	4640      	mov	r0, r8
   2d784:	f7fd f8fe 	bl	2a984 <__malloc_unlock>
   2d788:	e025      	b.n	2d7d6 <_realloc_r+0xfa>
   2d78a:	f024 0407 	bic.w	r4, r4, #7
   2d78e:	4622      	mov	r2, r4
   2d790:	0fe3      	lsrs	r3, r4, #31
   2d792:	e7ba      	b.n	2d70a <_realloc_r+0x2e>
   2d794:	f020 0003 	bic.w	r0, r0, #3
   2d798:	1833      	adds	r3, r6, r0
   2d79a:	4293      	cmp	r3, r2
   2d79c:	f2c0 8081 	blt.w	2d8a2 <_realloc_r+0x1c6>
   2d7a0:	f8d9 200c 	ldr.w	r2, [r9, #12]
   2d7a4:	461e      	mov	r6, r3
   2d7a6:	f8d9 1008 	ldr.w	r1, [r9, #8]
   2d7aa:	eb07 0903 	add.w	r9, r7, r3
   2d7ae:	60ca      	str	r2, [r1, #12]
   2d7b0:	6091      	str	r1, [r2, #8]
   2d7b2:	1b33      	subs	r3, r6, r4
   2d7b4:	687a      	ldr	r2, [r7, #4]
   2d7b6:	2b0f      	cmp	r3, #15
   2d7b8:	f002 0201 	and.w	r2, r2, #1
   2d7bc:	d815      	bhi.n	2d7ea <_realloc_r+0x10e>
   2d7be:	4332      	orrs	r2, r6
   2d7c0:	607a      	str	r2, [r7, #4]
   2d7c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2d7c6:	f043 0301 	orr.w	r3, r3, #1
   2d7ca:	f8c9 3004 	str.w	r3, [r9, #4]
   2d7ce:	4640      	mov	r0, r8
   2d7d0:	46aa      	mov	sl, r5
   2d7d2:	f7fd f8d7 	bl	2a984 <__malloc_unlock>
   2d7d6:	4650      	mov	r0, sl
   2d7d8:	b003      	add	sp, #12
   2d7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d7de:	4611      	mov	r1, r2
   2d7e0:	b003      	add	sp, #12
   2d7e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d7e6:	f7fc bd29 	b.w	2a23c <_malloc_r>
   2d7ea:	4322      	orrs	r2, r4
   2d7ec:	f043 0301 	orr.w	r3, r3, #1
   2d7f0:	443c      	add	r4, r7
   2d7f2:	4640      	mov	r0, r8
   2d7f4:	607a      	str	r2, [r7, #4]
   2d7f6:	6063      	str	r3, [r4, #4]
   2d7f8:	f104 0108 	add.w	r1, r4, #8
   2d7fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2d800:	f043 0301 	orr.w	r3, r3, #1
   2d804:	f8c9 3004 	str.w	r3, [r9, #4]
   2d808:	f7ff f8d2 	bl	2c9b0 <_free_r>
   2d80c:	e7df      	b.n	2d7ce <_realloc_r+0xf2>
   2d80e:	f8d0 9004 	ldr.w	r9, [r0, #4]
   2d812:	f104 0010 	add.w	r0, r4, #16
   2d816:	f029 0903 	bic.w	r9, r9, #3
   2d81a:	44b1      	add	r9, r6
   2d81c:	4581      	cmp	r9, r0
   2d81e:	f280 80b3 	bge.w	2d988 <_realloc_r+0x2ac>
   2d822:	07c9      	lsls	r1, r1, #31
   2d824:	d48a      	bmi.n	2d73c <_realloc_r+0x60>
   2d826:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2d82a:	eba7 0b01 	sub.w	fp, r7, r1
   2d82e:	f8db 1004 	ldr.w	r1, [fp, #4]
   2d832:	f021 0103 	bic.w	r1, r1, #3
   2d836:	4489      	add	r9, r1
   2d838:	4548      	cmp	r0, r9
   2d83a:	dc41      	bgt.n	2d8c0 <_realloc_r+0x1e4>
   2d83c:	46da      	mov	sl, fp
   2d83e:	1f32      	subs	r2, r6, #4
   2d840:	f8db 100c 	ldr.w	r1, [fp, #12]
   2d844:	f85a 0f08 	ldr.w	r0, [sl, #8]!
   2d848:	2a24      	cmp	r2, #36	; 0x24
   2d84a:	60c1      	str	r1, [r0, #12]
   2d84c:	6088      	str	r0, [r1, #8]
   2d84e:	f200 80dc 	bhi.w	2da0a <_realloc_r+0x32e>
   2d852:	2a13      	cmp	r2, #19
   2d854:	6829      	ldr	r1, [r5, #0]
   2d856:	f240 80d6 	bls.w	2da06 <_realloc_r+0x32a>
   2d85a:	f8cb 1008 	str.w	r1, [fp, #8]
   2d85e:	2a1b      	cmp	r2, #27
   2d860:	6869      	ldr	r1, [r5, #4]
   2d862:	f8cb 100c 	str.w	r1, [fp, #12]
   2d866:	68a9      	ldr	r1, [r5, #8]
   2d868:	f200 80d6 	bhi.w	2da18 <_realloc_r+0x33c>
   2d86c:	f10b 0210 	add.w	r2, fp, #16
   2d870:	3508      	adds	r5, #8
   2d872:	6011      	str	r1, [r2, #0]
   2d874:	6869      	ldr	r1, [r5, #4]
   2d876:	6051      	str	r1, [r2, #4]
   2d878:	68a9      	ldr	r1, [r5, #8]
   2d87a:	6091      	str	r1, [r2, #8]
   2d87c:	eba9 0904 	sub.w	r9, r9, r4
   2d880:	eb0b 0104 	add.w	r1, fp, r4
   2d884:	4640      	mov	r0, r8
   2d886:	f049 0201 	orr.w	r2, r9, #1
   2d88a:	6099      	str	r1, [r3, #8]
   2d88c:	604a      	str	r2, [r1, #4]
   2d88e:	f8db 3004 	ldr.w	r3, [fp, #4]
   2d892:	f003 0301 	and.w	r3, r3, #1
   2d896:	431c      	orrs	r4, r3
   2d898:	f8cb 4004 	str.w	r4, [fp, #4]
   2d89c:	f7fd f872 	bl	2a984 <__malloc_unlock>
   2d8a0:	e799      	b.n	2d7d6 <_realloc_r+0xfa>
   2d8a2:	07cb      	lsls	r3, r1, #31
   2d8a4:	f53f af4a 	bmi.w	2d73c <_realloc_r+0x60>
   2d8a8:	f855 3c08 	ldr.w	r3, [r5, #-8]
   2d8ac:	eba7 0b03 	sub.w	fp, r7, r3
   2d8b0:	f8db 1004 	ldr.w	r1, [fp, #4]
   2d8b4:	f021 0103 	bic.w	r1, r1, #3
   2d8b8:	4408      	add	r0, r1
   2d8ba:	1983      	adds	r3, r0, r6
   2d8bc:	4293      	cmp	r3, r2
   2d8be:	da24      	bge.n	2d90a <_realloc_r+0x22e>
   2d8c0:	1873      	adds	r3, r6, r1
   2d8c2:	4293      	cmp	r3, r2
   2d8c4:	f6ff af3a 	blt.w	2d73c <_realloc_r+0x60>
   2d8c8:	46da      	mov	sl, fp
   2d8ca:	1f32      	subs	r2, r6, #4
   2d8cc:	f8db 100c 	ldr.w	r1, [fp, #12]
   2d8d0:	eb0b 0903 	add.w	r9, fp, r3
   2d8d4:	f85a 0f08 	ldr.w	r0, [sl, #8]!
   2d8d8:	2a24      	cmp	r2, #36	; 0x24
   2d8da:	60c1      	str	r1, [r0, #12]
   2d8dc:	6088      	str	r0, [r1, #8]
   2d8de:	d847      	bhi.n	2d970 <_realloc_r+0x294>
   2d8e0:	2a13      	cmp	r2, #19
   2d8e2:	6829      	ldr	r1, [r5, #0]
   2d8e4:	d91e      	bls.n	2d924 <_realloc_r+0x248>
   2d8e6:	f8cb 1008 	str.w	r1, [fp, #8]
   2d8ea:	2a1b      	cmp	r2, #27
   2d8ec:	6869      	ldr	r1, [r5, #4]
   2d8ee:	f8cb 100c 	str.w	r1, [fp, #12]
   2d8f2:	68a9      	ldr	r1, [r5, #8]
   2d8f4:	d85b      	bhi.n	2d9ae <_realloc_r+0x2d2>
   2d8f6:	f10b 0210 	add.w	r2, fp, #16
   2d8fa:	3508      	adds	r5, #8
   2d8fc:	e013      	b.n	2d926 <_realloc_r+0x24a>
   2d8fe:	230c      	movs	r3, #12
   2d900:	f04f 0a00 	mov.w	sl, #0
   2d904:	f8c8 3000 	str.w	r3, [r8]
   2d908:	e765      	b.n	2d7d6 <_realloc_r+0xfa>
   2d90a:	f8d9 100c 	ldr.w	r1, [r9, #12]
   2d90e:	46da      	mov	sl, fp
   2d910:	f8d9 0008 	ldr.w	r0, [r9, #8]
   2d914:	1f32      	subs	r2, r6, #4
   2d916:	eb0b 0903 	add.w	r9, fp, r3
   2d91a:	60c1      	str	r1, [r0, #12]
   2d91c:	6088      	str	r0, [r1, #8]
   2d91e:	f8db 100c 	ldr.w	r1, [fp, #12]
   2d922:	e7d7      	b.n	2d8d4 <_realloc_r+0x1f8>
   2d924:	4652      	mov	r2, sl
   2d926:	6011      	str	r1, [r2, #0]
   2d928:	461e      	mov	r6, r3
   2d92a:	686b      	ldr	r3, [r5, #4]
   2d92c:	465f      	mov	r7, fp
   2d92e:	6053      	str	r3, [r2, #4]
   2d930:	68ab      	ldr	r3, [r5, #8]
   2d932:	4655      	mov	r5, sl
   2d934:	6093      	str	r3, [r2, #8]
   2d936:	e73c      	b.n	2d7b2 <_realloc_r+0xd6>
   2d938:	6001      	str	r1, [r0, #0]
   2d93a:	2a1b      	cmp	r2, #27
   2d93c:	686b      	ldr	r3, [r5, #4]
   2d93e:	6043      	str	r3, [r0, #4]
   2d940:	d841      	bhi.n	2d9c6 <_realloc_r+0x2ea>
   2d942:	f105 0208 	add.w	r2, r5, #8
   2d946:	f100 0308 	add.w	r3, r0, #8
   2d94a:	68a9      	ldr	r1, [r5, #8]
   2d94c:	e710      	b.n	2d770 <_realloc_r+0x94>
   2d94e:	f855 3c08 	ldr.w	r3, [r5, #-8]
   2d952:	eba7 0b03 	sub.w	fp, r7, r3
   2d956:	f8db 1004 	ldr.w	r1, [fp, #4]
   2d95a:	f021 0103 	bic.w	r1, r1, #3
   2d95e:	e7af      	b.n	2d8c0 <_realloc_r+0x1e4>
   2d960:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2d964:	f023 0303 	bic.w	r3, r3, #3
   2d968:	441e      	add	r6, r3
   2d96a:	eb07 0906 	add.w	r9, r7, r6
   2d96e:	e720      	b.n	2d7b2 <_realloc_r+0xd6>
   2d970:	4629      	mov	r1, r5
   2d972:	4650      	mov	r0, sl
   2d974:	461e      	mov	r6, r3
   2d976:	465f      	mov	r7, fp
   2d978:	f7fc ff52 	bl	2a820 <memmove>
   2d97c:	4655      	mov	r5, sl
   2d97e:	e718      	b.n	2d7b2 <_realloc_r+0xd6>
   2d980:	4629      	mov	r1, r5
   2d982:	f7fc ff4d 	bl	2a820 <memmove>
   2d986:	e6f8      	b.n	2d77a <_realloc_r+0x9e>
   2d988:	eba9 0904 	sub.w	r9, r9, r4
   2d98c:	4427      	add	r7, r4
   2d98e:	4640      	mov	r0, r8
   2d990:	46aa      	mov	sl, r5
   2d992:	f049 0201 	orr.w	r2, r9, #1
   2d996:	609f      	str	r7, [r3, #8]
   2d998:	607a      	str	r2, [r7, #4]
   2d99a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2d99e:	f003 0301 	and.w	r3, r3, #1
   2d9a2:	431c      	orrs	r4, r3
   2d9a4:	f845 4c04 	str.w	r4, [r5, #-4]
   2d9a8:	f7fc ffec 	bl	2a984 <__malloc_unlock>
   2d9ac:	e713      	b.n	2d7d6 <_realloc_r+0xfa>
   2d9ae:	f8cb 1010 	str.w	r1, [fp, #16]
   2d9b2:	2a24      	cmp	r2, #36	; 0x24
   2d9b4:	68e9      	ldr	r1, [r5, #12]
   2d9b6:	f8cb 1014 	str.w	r1, [fp, #20]
   2d9ba:	6929      	ldr	r1, [r5, #16]
   2d9bc:	d00f      	beq.n	2d9de <_realloc_r+0x302>
   2d9be:	f10b 0218 	add.w	r2, fp, #24
   2d9c2:	3510      	adds	r5, #16
   2d9c4:	e7af      	b.n	2d926 <_realloc_r+0x24a>
   2d9c6:	68ab      	ldr	r3, [r5, #8]
   2d9c8:	2a24      	cmp	r2, #36	; 0x24
   2d9ca:	6083      	str	r3, [r0, #8]
   2d9cc:	68eb      	ldr	r3, [r5, #12]
   2d9ce:	60c3      	str	r3, [r0, #12]
   2d9d0:	d00f      	beq.n	2d9f2 <_realloc_r+0x316>
   2d9d2:	f105 0210 	add.w	r2, r5, #16
   2d9d6:	f100 0310 	add.w	r3, r0, #16
   2d9da:	6929      	ldr	r1, [r5, #16]
   2d9dc:	e6c8      	b.n	2d770 <_realloc_r+0x94>
   2d9de:	f8cb 1018 	str.w	r1, [fp, #24]
   2d9e2:	f10b 0220 	add.w	r2, fp, #32
   2d9e6:	6969      	ldr	r1, [r5, #20]
   2d9e8:	3518      	adds	r5, #24
   2d9ea:	f8cb 101c 	str.w	r1, [fp, #28]
   2d9ee:	6829      	ldr	r1, [r5, #0]
   2d9f0:	e799      	b.n	2d926 <_realloc_r+0x24a>
   2d9f2:	6929      	ldr	r1, [r5, #16]
   2d9f4:	f105 0218 	add.w	r2, r5, #24
   2d9f8:	f100 0318 	add.w	r3, r0, #24
   2d9fc:	6101      	str	r1, [r0, #16]
   2d9fe:	6969      	ldr	r1, [r5, #20]
   2da00:	6141      	str	r1, [r0, #20]
   2da02:	69a9      	ldr	r1, [r5, #24]
   2da04:	e6b4      	b.n	2d770 <_realloc_r+0x94>
   2da06:	4652      	mov	r2, sl
   2da08:	e733      	b.n	2d872 <_realloc_r+0x196>
   2da0a:	4629      	mov	r1, r5
   2da0c:	4650      	mov	r0, sl
   2da0e:	9301      	str	r3, [sp, #4]
   2da10:	f7fc ff06 	bl	2a820 <memmove>
   2da14:	9b01      	ldr	r3, [sp, #4]
   2da16:	e731      	b.n	2d87c <_realloc_r+0x1a0>
   2da18:	f8cb 1010 	str.w	r1, [fp, #16]
   2da1c:	2a24      	cmp	r2, #36	; 0x24
   2da1e:	68e9      	ldr	r1, [r5, #12]
   2da20:	f8cb 1014 	str.w	r1, [fp, #20]
   2da24:	6929      	ldr	r1, [r5, #16]
   2da26:	d005      	beq.n	2da34 <_realloc_r+0x358>
   2da28:	f10b 0218 	add.w	r2, fp, #24
   2da2c:	3510      	adds	r5, #16
   2da2e:	e720      	b.n	2d872 <_realloc_r+0x196>
   2da30:	2002d9f8 	.word	0x2002d9f8
   2da34:	f8cb 1018 	str.w	r1, [fp, #24]
   2da38:	f10b 0220 	add.w	r2, fp, #32
   2da3c:	6969      	ldr	r1, [r5, #20]
   2da3e:	3518      	adds	r5, #24
   2da40:	f8cb 101c 	str.w	r1, [fp, #28]
   2da44:	6829      	ldr	r1, [r5, #0]
   2da46:	e714      	b.n	2d872 <_realloc_r+0x196>

0002da48 <frexp>:
   2da48:	b570      	push	{r4, r5, r6, lr}
   2da4a:	ec55 4b10 	vmov	r4, r5, d0
   2da4e:	4606      	mov	r6, r0
   2da50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   2da54:	4812      	ldr	r0, [pc, #72]	; (2daa0 <frexp+0x58>)
   2da56:	2200      	movs	r2, #0
   2da58:	4283      	cmp	r3, r0
   2da5a:	6032      	str	r2, [r6, #0]
   2da5c:	dc1d      	bgt.n	2da9a <frexp+0x52>
   2da5e:	ee10 0a10 	vmov	r0, s0
   2da62:	4318      	orrs	r0, r3
   2da64:	d019      	beq.n	2da9a <frexp+0x52>
   2da66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2da6a:	4629      	mov	r1, r5
   2da6c:	da0a      	bge.n	2da84 <frexp+0x3c>
   2da6e:	2200      	movs	r2, #0
   2da70:	4b0c      	ldr	r3, [pc, #48]	; (2daa4 <frexp+0x5c>)
   2da72:	ee10 0a10 	vmov	r0, s0
   2da76:	f7de fd23 	bl	c4c0 <__aeabi_dmul>
   2da7a:	f06f 0235 	mvn.w	r2, #53	; 0x35
   2da7e:	4604      	mov	r4, r0
   2da80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   2da84:	4808      	ldr	r0, [pc, #32]	; (2daa8 <frexp+0x60>)
   2da86:	151b      	asrs	r3, r3, #20
   2da88:	4008      	ands	r0, r1
   2da8a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   2da8e:	f040 557f 	orr.w	r5, r0, #1069547520	; 0x3fc00000
   2da92:	4413      	add	r3, r2
   2da94:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   2da98:	6033      	str	r3, [r6, #0]
   2da9a:	ec45 4b10 	vmov	d0, r4, r5
   2da9e:	bd70      	pop	{r4, r5, r6, pc}
   2daa0:	7fefffff 	.word	0x7fefffff
   2daa4:	43500000 	.word	0x43500000
   2daa8:	800fffff 	.word	0x800fffff

0002daac <_raise_r>:
   2daac:	291f      	cmp	r1, #31
   2daae:	b538      	push	{r3, r4, r5, lr}
   2dab0:	d824      	bhi.n	2dafc <_raise_r+0x50>
   2dab2:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
   2dab6:	4605      	mov	r5, r0
   2dab8:	460c      	mov	r4, r1
   2daba:	b173      	cbz	r3, 2dada <_raise_r+0x2e>
   2dabc:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   2dac0:	b15a      	cbz	r2, 2dada <_raise_r+0x2e>
   2dac2:	2a01      	cmp	r2, #1
   2dac4:	d013      	beq.n	2daee <_raise_r+0x42>
   2dac6:	1c51      	adds	r1, r2, #1
   2dac8:	d014      	beq.n	2daf4 <_raise_r+0x48>
   2daca:	2500      	movs	r5, #0
   2dacc:	4620      	mov	r0, r4
   2dace:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
   2dad2:	4790      	blx	r2
   2dad4:	462b      	mov	r3, r5
   2dad6:	4618      	mov	r0, r3
   2dad8:	bd38      	pop	{r3, r4, r5, pc}
   2dada:	4628      	mov	r0, r5
   2dadc:	f000 f830 	bl	2db40 <_getpid_r>
   2dae0:	4622      	mov	r2, r4
   2dae2:	4601      	mov	r1, r0
   2dae4:	4628      	mov	r0, r5
   2dae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2daea:	f000 b815 	b.w	2db18 <_kill_r>
   2daee:	2300      	movs	r3, #0
   2daf0:	4618      	mov	r0, r3
   2daf2:	bd38      	pop	{r3, r4, r5, pc}
   2daf4:	2216      	movs	r2, #22
   2daf6:	2301      	movs	r3, #1
   2daf8:	6002      	str	r2, [r0, #0]
   2dafa:	e7ec      	b.n	2dad6 <_raise_r+0x2a>
   2dafc:	2216      	movs	r2, #22
   2dafe:	f04f 33ff 	mov.w	r3, #4294967295
   2db02:	6002      	str	r2, [r0, #0]
   2db04:	e7e7      	b.n	2dad6 <_raise_r+0x2a>
   2db06:	bf00      	nop

0002db08 <raise>:
   2db08:	4b02      	ldr	r3, [pc, #8]	; (2db14 <raise+0xc>)
   2db0a:	4601      	mov	r1, r0
   2db0c:	6818      	ldr	r0, [r3, #0]
   2db0e:	f7ff bfcd 	b.w	2daac <_raise_r>
   2db12:	bf00      	nop
   2db14:	2002d888 	.word	0x2002d888

0002db18 <_kill_r>:
   2db18:	b570      	push	{r4, r5, r6, lr}
   2db1a:	460d      	mov	r5, r1
   2db1c:	2300      	movs	r3, #0
   2db1e:	4c07      	ldr	r4, [pc, #28]	; (2db3c <_kill_r+0x24>)
   2db20:	4606      	mov	r6, r0
   2db22:	4611      	mov	r1, r2
   2db24:	4628      	mov	r0, r5
   2db26:	6023      	str	r3, [r4, #0]
   2db28:	f000 fe06 	bl	2e738 <_kill>
   2db2c:	1c43      	adds	r3, r0, #1
   2db2e:	d000      	beq.n	2db32 <_kill_r+0x1a>
   2db30:	bd70      	pop	{r4, r5, r6, pc}
   2db32:	6823      	ldr	r3, [r4, #0]
   2db34:	2b00      	cmp	r3, #0
   2db36:	d0fb      	beq.n	2db30 <_kill_r+0x18>
   2db38:	6033      	str	r3, [r6, #0]
   2db3a:	bd70      	pop	{r4, r5, r6, pc}
   2db3c:	20027ee8 	.word	0x20027ee8

0002db40 <_getpid_r>:
   2db40:	f000 bdfc 	b.w	2e73c <_getpid>

0002db44 <__sread>:
   2db44:	b510      	push	{r4, lr}
   2db46:	460c      	mov	r4, r1
   2db48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2db4c:	f000 fa4a 	bl	2dfe4 <_read_r>
   2db50:	2800      	cmp	r0, #0
   2db52:	db03      	blt.n	2db5c <__sread+0x18>
   2db54:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2db56:	4403      	add	r3, r0
   2db58:	6523      	str	r3, [r4, #80]	; 0x50
   2db5a:	bd10      	pop	{r4, pc}
   2db5c:	89a3      	ldrh	r3, [r4, #12]
   2db5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2db62:	81a3      	strh	r3, [r4, #12]
   2db64:	bd10      	pop	{r4, pc}
   2db66:	bf00      	nop

0002db68 <__swrite>:
   2db68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2db6c:	461f      	mov	r7, r3
   2db6e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   2db72:	4616      	mov	r6, r2
   2db74:	460c      	mov	r4, r1
   2db76:	05da      	lsls	r2, r3, #23
   2db78:	4605      	mov	r5, r0
   2db7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2db7e:	d507      	bpl.n	2db90 <__swrite+0x28>
   2db80:	2302      	movs	r3, #2
   2db82:	2200      	movs	r2, #0
   2db84:	f000 fa18 	bl	2dfb8 <_lseek_r>
   2db88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2db8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2db90:	f423 5080 	bic.w	r0, r3, #4096	; 0x1000
   2db94:	4632      	mov	r2, r6
   2db96:	463b      	mov	r3, r7
   2db98:	81a0      	strh	r0, [r4, #12]
   2db9a:	4628      	mov	r0, r5
   2db9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2dba0:	f000 b91e 	b.w	2dde0 <_write_r>

0002dba4 <__sseek>:
   2dba4:	b510      	push	{r4, lr}
   2dba6:	460c      	mov	r4, r1
   2dba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2dbac:	f000 fa04 	bl	2dfb8 <_lseek_r>
   2dbb0:	1c42      	adds	r2, r0, #1
   2dbb2:	89a3      	ldrh	r3, [r4, #12]
   2dbb4:	d004      	beq.n	2dbc0 <__sseek+0x1c>
   2dbb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   2dbba:	6520      	str	r0, [r4, #80]	; 0x50
   2dbbc:	81a3      	strh	r3, [r4, #12]
   2dbbe:	bd10      	pop	{r4, pc}
   2dbc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2dbc4:	81a3      	strh	r3, [r4, #12]
   2dbc6:	bd10      	pop	{r4, pc}

0002dbc8 <__sclose>:
   2dbc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2dbcc:	f000 b954 	b.w	2de78 <_close_r>

0002dbd0 <__ssprint_r>:
   2dbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dbd4:	6893      	ldr	r3, [r2, #8]
   2dbd6:	b083      	sub	sp, #12
   2dbd8:	4692      	mov	sl, r2
   2dbda:	9001      	str	r0, [sp, #4]
   2dbdc:	2b00      	cmp	r3, #0
   2dbde:	d072      	beq.n	2dcc6 <__ssprint_r+0xf6>
   2dbe0:	6817      	ldr	r7, [r2, #0]
   2dbe2:	460c      	mov	r4, r1
   2dbe4:	6808      	ldr	r0, [r1, #0]
   2dbe6:	3708      	adds	r7, #8
   2dbe8:	688d      	ldr	r5, [r1, #8]
   2dbea:	e047      	b.n	2dc7c <__ssprint_r+0xac>
   2dbec:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   2dbf0:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   2dbf4:	d031      	beq.n	2dc5a <__ssprint_r+0x8a>
   2dbf6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2dbfa:	eb12 0242 	adds.w	r2, r2, r2, lsl #1
   2dbfe:	eba0 0501 	sub.w	r5, r0, r1
   2dc02:	f106 0001 	add.w	r0, r6, #1
   2dc06:	bf48      	it	mi
   2dc08:	3201      	addmi	r2, #1
   2dc0a:	4428      	add	r0, r5
   2dc0c:	ea4f 0962 	mov.w	r9, r2, asr #1
   2dc10:	4548      	cmp	r0, r9
   2dc12:	464a      	mov	r2, r9
   2dc14:	d901      	bls.n	2dc1a <__ssprint_r+0x4a>
   2dc16:	4681      	mov	r9, r0
   2dc18:	4602      	mov	r2, r0
   2dc1a:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   2dc1e:	d039      	beq.n	2dc94 <__ssprint_r+0xc4>
   2dc20:	4611      	mov	r1, r2
   2dc22:	9801      	ldr	r0, [sp, #4]
   2dc24:	f7fc fb0a 	bl	2a23c <_malloc_r>
   2dc28:	4680      	mov	r8, r0
   2dc2a:	2800      	cmp	r0, #0
   2dc2c:	d051      	beq.n	2dcd2 <__ssprint_r+0x102>
   2dc2e:	462a      	mov	r2, r5
   2dc30:	6921      	ldr	r1, [r4, #16]
   2dc32:	f7df ffd1 	bl	dbd8 <memcpy>
   2dc36:	89a2      	ldrh	r2, [r4, #12]
   2dc38:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2dc3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2dc40:	81a2      	strh	r2, [r4, #12]
   2dc42:	eb08 0005 	add.w	r0, r8, r5
   2dc46:	eba9 0205 	sub.w	r2, r9, r5
   2dc4a:	f8c4 8010 	str.w	r8, [r4, #16]
   2dc4e:	4635      	mov	r5, r6
   2dc50:	46b0      	mov	r8, r6
   2dc52:	6020      	str	r0, [r4, #0]
   2dc54:	60a2      	str	r2, [r4, #8]
   2dc56:	f8c4 9014 	str.w	r9, [r4, #20]
   2dc5a:	4642      	mov	r2, r8
   2dc5c:	4659      	mov	r1, fp
   2dc5e:	f7fc fddf 	bl	2a820 <memmove>
   2dc62:	f8da 3008 	ldr.w	r3, [sl, #8]
   2dc66:	68a2      	ldr	r2, [r4, #8]
   2dc68:	6820      	ldr	r0, [r4, #0]
   2dc6a:	1b9e      	subs	r6, r3, r6
   2dc6c:	1b55      	subs	r5, r2, r5
   2dc6e:	4440      	add	r0, r8
   2dc70:	60a5      	str	r5, [r4, #8]
   2dc72:	6020      	str	r0, [r4, #0]
   2dc74:	f8ca 6008 	str.w	r6, [sl, #8]
   2dc78:	b32e      	cbz	r6, 2dcc6 <__ssprint_r+0xf6>
   2dc7a:	3708      	adds	r7, #8
   2dc7c:	f857 6c04 	ldr.w	r6, [r7, #-4]
   2dc80:	46a8      	mov	r8, r5
   2dc82:	f857 bc08 	ldr.w	fp, [r7, #-8]
   2dc86:	2e00      	cmp	r6, #0
   2dc88:	d0f7      	beq.n	2dc7a <__ssprint_r+0xaa>
   2dc8a:	42ae      	cmp	r6, r5
   2dc8c:	d2ae      	bcs.n	2dbec <__ssprint_r+0x1c>
   2dc8e:	4635      	mov	r5, r6
   2dc90:	46b0      	mov	r8, r6
   2dc92:	e7e2      	b.n	2dc5a <__ssprint_r+0x8a>
   2dc94:	9801      	ldr	r0, [sp, #4]
   2dc96:	f7ff fd21 	bl	2d6dc <_realloc_r>
   2dc9a:	4680      	mov	r8, r0
   2dc9c:	2800      	cmp	r0, #0
   2dc9e:	d1d0      	bne.n	2dc42 <__ssprint_r+0x72>
   2dca0:	9d01      	ldr	r5, [sp, #4]
   2dca2:	6921      	ldr	r1, [r4, #16]
   2dca4:	4628      	mov	r0, r5
   2dca6:	f7fe fe83 	bl	2c9b0 <_free_r>
   2dcaa:	230c      	movs	r3, #12
   2dcac:	602b      	str	r3, [r5, #0]
   2dcae:	89a3      	ldrh	r3, [r4, #12]
   2dcb0:	2200      	movs	r2, #0
   2dcb2:	f04f 30ff 	mov.w	r0, #4294967295
   2dcb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2dcba:	81a3      	strh	r3, [r4, #12]
   2dcbc:	e9ca 2201 	strd	r2, r2, [sl, #4]
   2dcc0:	b003      	add	sp, #12
   2dcc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dcc6:	2000      	movs	r0, #0
   2dcc8:	f8ca 0004 	str.w	r0, [sl, #4]
   2dccc:	b003      	add	sp, #12
   2dcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dcd2:	230c      	movs	r3, #12
   2dcd4:	9a01      	ldr	r2, [sp, #4]
   2dcd6:	6013      	str	r3, [r2, #0]
   2dcd8:	e7e9      	b.n	2dcae <__ssprint_r+0xde>
   2dcda:	bf00      	nop

0002dcdc <__swbuf_r>:
   2dcdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dcde:	460d      	mov	r5, r1
   2dce0:	4614      	mov	r4, r2
   2dce2:	4606      	mov	r6, r0
   2dce4:	b110      	cbz	r0, 2dcec <__swbuf_r+0x10>
   2dce6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2dce8:	2b00      	cmp	r3, #0
   2dcea:	d043      	beq.n	2dd74 <__swbuf_r+0x98>
   2dcec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2dcf0:	69a3      	ldr	r3, [r4, #24]
   2dcf2:	b291      	uxth	r1, r2
   2dcf4:	60a3      	str	r3, [r4, #8]
   2dcf6:	0708      	lsls	r0, r1, #28
   2dcf8:	d51b      	bpl.n	2dd32 <__swbuf_r+0x56>
   2dcfa:	6923      	ldr	r3, [r4, #16]
   2dcfc:	b1cb      	cbz	r3, 2dd32 <__swbuf_r+0x56>
   2dcfe:	b2ed      	uxtb	r5, r5
   2dd00:	0489      	lsls	r1, r1, #18
   2dd02:	462f      	mov	r7, r5
   2dd04:	d522      	bpl.n	2dd4c <__swbuf_r+0x70>
   2dd06:	6822      	ldr	r2, [r4, #0]
   2dd08:	6961      	ldr	r1, [r4, #20]
   2dd0a:	1ad3      	subs	r3, r2, r3
   2dd0c:	4299      	cmp	r1, r3
   2dd0e:	dd29      	ble.n	2dd64 <__swbuf_r+0x88>
   2dd10:	3301      	adds	r3, #1
   2dd12:	68a1      	ldr	r1, [r4, #8]
   2dd14:	1c50      	adds	r0, r2, #1
   2dd16:	3901      	subs	r1, #1
   2dd18:	6020      	str	r0, [r4, #0]
   2dd1a:	60a1      	str	r1, [r4, #8]
   2dd1c:	7015      	strb	r5, [r2, #0]
   2dd1e:	6962      	ldr	r2, [r4, #20]
   2dd20:	429a      	cmp	r2, r3
   2dd22:	d02a      	beq.n	2dd7a <__swbuf_r+0x9e>
   2dd24:	2d0a      	cmp	r5, #10
   2dd26:	d102      	bne.n	2dd2e <__swbuf_r+0x52>
   2dd28:	7b23      	ldrb	r3, [r4, #12]
   2dd2a:	07db      	lsls	r3, r3, #31
   2dd2c:	d425      	bmi.n	2dd7a <__swbuf_r+0x9e>
   2dd2e:	4638      	mov	r0, r7
   2dd30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2dd32:	4621      	mov	r1, r4
   2dd34:	4630      	mov	r0, r6
   2dd36:	f7fe fb01 	bl	2c33c <__swsetup_r>
   2dd3a:	bb20      	cbnz	r0, 2dd86 <__swbuf_r+0xaa>
   2dd3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2dd40:	b2ed      	uxtb	r5, r5
   2dd42:	6923      	ldr	r3, [r4, #16]
   2dd44:	b291      	uxth	r1, r2
   2dd46:	462f      	mov	r7, r5
   2dd48:	0489      	lsls	r1, r1, #18
   2dd4a:	d4dc      	bmi.n	2dd06 <__swbuf_r+0x2a>
   2dd4c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   2dd4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2dd52:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   2dd56:	81a2      	strh	r2, [r4, #12]
   2dd58:	6822      	ldr	r2, [r4, #0]
   2dd5a:	6661      	str	r1, [r4, #100]	; 0x64
   2dd5c:	1ad3      	subs	r3, r2, r3
   2dd5e:	6961      	ldr	r1, [r4, #20]
   2dd60:	4299      	cmp	r1, r3
   2dd62:	dcd5      	bgt.n	2dd10 <__swbuf_r+0x34>
   2dd64:	4621      	mov	r1, r4
   2dd66:	4630      	mov	r0, r6
   2dd68:	f7fe fcb8 	bl	2c6dc <_fflush_r>
   2dd6c:	b958      	cbnz	r0, 2dd86 <__swbuf_r+0xaa>
   2dd6e:	6822      	ldr	r2, [r4, #0]
   2dd70:	2301      	movs	r3, #1
   2dd72:	e7ce      	b.n	2dd12 <__swbuf_r+0x36>
   2dd74:	f7fe fd0e 	bl	2c794 <__sinit>
   2dd78:	e7b8      	b.n	2dcec <__swbuf_r+0x10>
   2dd7a:	4621      	mov	r1, r4
   2dd7c:	4630      	mov	r0, r6
   2dd7e:	f7fe fcad 	bl	2c6dc <_fflush_r>
   2dd82:	2800      	cmp	r0, #0
   2dd84:	d0d3      	beq.n	2dd2e <__swbuf_r+0x52>
   2dd86:	f04f 37ff 	mov.w	r7, #4294967295
   2dd8a:	e7d0      	b.n	2dd2e <__swbuf_r+0x52>

0002dd8c <_wcrtomb_r>:
   2dd8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dd8e:	4c12      	ldr	r4, [pc, #72]	; (2ddd8 <_wcrtomb_r+0x4c>)
   2dd90:	b085      	sub	sp, #20
   2dd92:	4606      	mov	r6, r0
   2dd94:	461f      	mov	r7, r3
   2dd96:	6824      	ldr	r4, [r4, #0]
   2dd98:	6b64      	ldr	r4, [r4, #52]	; 0x34
   2dd9a:	b151      	cbz	r1, 2ddb2 <_wcrtomb_r+0x26>
   2dd9c:	4d0f      	ldr	r5, [pc, #60]	; (2dddc <_wcrtomb_r+0x50>)
   2dd9e:	2c00      	cmp	r4, #0
   2dda0:	bf08      	it	eq
   2dda2:	462c      	moveq	r4, r5
   2dda4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   2dda8:	47a0      	blx	r4
   2ddaa:	1c43      	adds	r3, r0, #1
   2ddac:	d00d      	beq.n	2ddca <_wcrtomb_r+0x3e>
   2ddae:	b005      	add	sp, #20
   2ddb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ddb2:	f8df c028 	ldr.w	ip, [pc, #40]	; 2dddc <_wcrtomb_r+0x50>
   2ddb6:	460a      	mov	r2, r1
   2ddb8:	a901      	add	r1, sp, #4
   2ddba:	2c00      	cmp	r4, #0
   2ddbc:	bf08      	it	eq
   2ddbe:	4664      	moveq	r4, ip
   2ddc0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   2ddc4:	47a0      	blx	r4
   2ddc6:	1c43      	adds	r3, r0, #1
   2ddc8:	d1f1      	bne.n	2ddae <_wcrtomb_r+0x22>
   2ddca:	2200      	movs	r2, #0
   2ddcc:	238a      	movs	r3, #138	; 0x8a
   2ddce:	603a      	str	r2, [r7, #0]
   2ddd0:	6033      	str	r3, [r6, #0]
   2ddd2:	b005      	add	sp, #20
   2ddd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ddd6:	bf00      	nop
   2ddd8:	2002d888 	.word	0x2002d888
   2dddc:	2002d88c 	.word	0x2002d88c

0002dde0 <_write_r>:
   2dde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dde2:	460e      	mov	r6, r1
   2dde4:	4c08      	ldr	r4, [pc, #32]	; (2de08 <_write_r+0x28>)
   2dde6:	2500      	movs	r5, #0
   2dde8:	4611      	mov	r1, r2
   2ddea:	4607      	mov	r7, r0
   2ddec:	461a      	mov	r2, r3
   2ddee:	4630      	mov	r0, r6
   2ddf0:	6025      	str	r5, [r4, #0]
   2ddf2:	f000 fc96 	bl	2e722 <_write>
   2ddf6:	1c43      	adds	r3, r0, #1
   2ddf8:	d000      	beq.n	2ddfc <_write_r+0x1c>
   2ddfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ddfc:	6823      	ldr	r3, [r4, #0]
   2ddfe:	2b00      	cmp	r3, #0
   2de00:	d0fb      	beq.n	2ddfa <_write_r+0x1a>
   2de02:	603b      	str	r3, [r7, #0]
   2de04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2de06:	bf00      	nop
   2de08:	20027ee8 	.word	0x20027ee8

0002de0c <_calloc_r>:
   2de0c:	b510      	push	{r4, lr}
   2de0e:	fb02 f101 	mul.w	r1, r2, r1
   2de12:	f7fc fa13 	bl	2a23c <_malloc_r>
   2de16:	4604      	mov	r4, r0
   2de18:	b1c8      	cbz	r0, 2de4e <_calloc_r+0x42>
   2de1a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   2de1e:	f022 0203 	bic.w	r2, r2, #3
   2de22:	3a04      	subs	r2, #4
   2de24:	2a24      	cmp	r2, #36	; 0x24
   2de26:	d81b      	bhi.n	2de60 <_calloc_r+0x54>
   2de28:	2a13      	cmp	r2, #19
   2de2a:	d912      	bls.n	2de52 <_calloc_r+0x46>
   2de2c:	2300      	movs	r3, #0
   2de2e:	2a1b      	cmp	r2, #27
   2de30:	e9c0 3300 	strd	r3, r3, [r0]
   2de34:	d919      	bls.n	2de6a <_calloc_r+0x5e>
   2de36:	2a24      	cmp	r2, #36	; 0x24
   2de38:	e9c0 3302 	strd	r3, r3, [r0, #8]
   2de3c:	d118      	bne.n	2de70 <_calloc_r+0x64>
   2de3e:	6103      	str	r3, [r0, #16]
   2de40:	f100 0218 	add.w	r2, r0, #24
   2de44:	6143      	str	r3, [r0, #20]
   2de46:	2300      	movs	r3, #0
   2de48:	e9c2 3300 	strd	r3, r3, [r2]
   2de4c:	6093      	str	r3, [r2, #8]
   2de4e:	4620      	mov	r0, r4
   2de50:	bd10      	pop	{r4, pc}
   2de52:	4602      	mov	r2, r0
   2de54:	2300      	movs	r3, #0
   2de56:	4620      	mov	r0, r4
   2de58:	e9c2 3300 	strd	r3, r3, [r2]
   2de5c:	6093      	str	r3, [r2, #8]
   2de5e:	bd10      	pop	{r4, pc}
   2de60:	2100      	movs	r1, #0
   2de62:	f7fc fd3f 	bl	2a8e4 <memset>
   2de66:	4620      	mov	r0, r4
   2de68:	bd10      	pop	{r4, pc}
   2de6a:	f100 0208 	add.w	r2, r0, #8
   2de6e:	e7f1      	b.n	2de54 <_calloc_r+0x48>
   2de70:	f100 0210 	add.w	r2, r0, #16
   2de74:	e7ee      	b.n	2de54 <_calloc_r+0x48>
   2de76:	bf00      	nop

0002de78 <_close_r>:
   2de78:	b538      	push	{r3, r4, r5, lr}
   2de7a:	2300      	movs	r3, #0
   2de7c:	4c06      	ldr	r4, [pc, #24]	; (2de98 <_close_r+0x20>)
   2de7e:	4605      	mov	r5, r0
   2de80:	4608      	mov	r0, r1
   2de82:	6023      	str	r3, [r4, #0]
   2de84:	f000 fc51 	bl	2e72a <_close>
   2de88:	1c43      	adds	r3, r0, #1
   2de8a:	d000      	beq.n	2de8e <_close_r+0x16>
   2de8c:	bd38      	pop	{r3, r4, r5, pc}
   2de8e:	6823      	ldr	r3, [r4, #0]
   2de90:	2b00      	cmp	r3, #0
   2de92:	d0fb      	beq.n	2de8c <_close_r+0x14>
   2de94:	602b      	str	r3, [r5, #0]
   2de96:	bd38      	pop	{r3, r4, r5, pc}
   2de98:	20027ee8 	.word	0x20027ee8

0002de9c <_fclose_r>:
   2de9c:	b570      	push	{r4, r5, r6, lr}
   2de9e:	2900      	cmp	r1, #0
   2dea0:	d048      	beq.n	2df34 <_fclose_r+0x98>
   2dea2:	4605      	mov	r5, r0
   2dea4:	460c      	mov	r4, r1
   2dea6:	b110      	cbz	r0, 2deae <_fclose_r+0x12>
   2dea8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2deaa:	2b00      	cmp	r3, #0
   2deac:	d048      	beq.n	2df40 <_fclose_r+0xa4>
   2deae:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2deb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2deb4:	07d0      	lsls	r0, r2, #31
   2deb6:	d440      	bmi.n	2df3a <_fclose_r+0x9e>
   2deb8:	0599      	lsls	r1, r3, #22
   2deba:	d530      	bpl.n	2df1e <_fclose_r+0x82>
   2debc:	4621      	mov	r1, r4
   2debe:	4628      	mov	r0, r5
   2dec0:	f7fe fb62 	bl	2c588 <__sflush_r>
   2dec4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2dec6:	4606      	mov	r6, r0
   2dec8:	b133      	cbz	r3, 2ded8 <_fclose_r+0x3c>
   2deca:	69e1      	ldr	r1, [r4, #28]
   2decc:	4628      	mov	r0, r5
   2dece:	4798      	blx	r3
   2ded0:	2800      	cmp	r0, #0
   2ded2:	bfb8      	it	lt
   2ded4:	f04f 36ff 	movlt.w	r6, #4294967295
   2ded8:	89a3      	ldrh	r3, [r4, #12]
   2deda:	061a      	lsls	r2, r3, #24
   2dedc:	d43c      	bmi.n	2df58 <_fclose_r+0xbc>
   2dede:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2dee0:	b141      	cbz	r1, 2def4 <_fclose_r+0x58>
   2dee2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2dee6:	4299      	cmp	r1, r3
   2dee8:	d002      	beq.n	2def0 <_fclose_r+0x54>
   2deea:	4628      	mov	r0, r5
   2deec:	f7fe fd60 	bl	2c9b0 <_free_r>
   2def0:	2300      	movs	r3, #0
   2def2:	6323      	str	r3, [r4, #48]	; 0x30
   2def4:	6c61      	ldr	r1, [r4, #68]	; 0x44
   2def6:	b121      	cbz	r1, 2df02 <_fclose_r+0x66>
   2def8:	4628      	mov	r0, r5
   2defa:	f7fe fd59 	bl	2c9b0 <_free_r>
   2defe:	2300      	movs	r3, #0
   2df00:	6463      	str	r3, [r4, #68]	; 0x44
   2df02:	f7fe fc77 	bl	2c7f4 <__sfp_lock_acquire>
   2df06:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2df08:	2200      	movs	r2, #0
   2df0a:	07db      	lsls	r3, r3, #31
   2df0c:	81a2      	strh	r2, [r4, #12]
   2df0e:	d51f      	bpl.n	2df50 <_fclose_r+0xb4>
   2df10:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2df12:	f7ff f803 	bl	2cf1c <__retarget_lock_close_recursive>
   2df16:	f7fe fc73 	bl	2c800 <__sfp_lock_release>
   2df1a:	4630      	mov	r0, r6
   2df1c:	bd70      	pop	{r4, r5, r6, pc}
   2df1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2df20:	f7fe fffe 	bl	2cf20 <__retarget_lock_acquire_recursive>
   2df24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2df28:	2b00      	cmp	r3, #0
   2df2a:	d1c7      	bne.n	2debc <_fclose_r+0x20>
   2df2c:	6e66      	ldr	r6, [r4, #100]	; 0x64
   2df2e:	f016 0601 	ands.w	r6, r6, #1
   2df32:	d016      	beq.n	2df62 <_fclose_r+0xc6>
   2df34:	2600      	movs	r6, #0
   2df36:	4630      	mov	r0, r6
   2df38:	bd70      	pop	{r4, r5, r6, pc}
   2df3a:	2b00      	cmp	r3, #0
   2df3c:	d0fa      	beq.n	2df34 <_fclose_r+0x98>
   2df3e:	e7bd      	b.n	2debc <_fclose_r+0x20>
   2df40:	f7fe fc28 	bl	2c794 <__sinit>
   2df44:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2df46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2df4a:	07d0      	lsls	r0, r2, #31
   2df4c:	d4f5      	bmi.n	2df3a <_fclose_r+0x9e>
   2df4e:	e7b3      	b.n	2deb8 <_fclose_r+0x1c>
   2df50:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2df52:	f7fe ffe7 	bl	2cf24 <__retarget_lock_release_recursive>
   2df56:	e7db      	b.n	2df10 <_fclose_r+0x74>
   2df58:	6921      	ldr	r1, [r4, #16]
   2df5a:	4628      	mov	r0, r5
   2df5c:	f7fe fd28 	bl	2c9b0 <_free_r>
   2df60:	e7bd      	b.n	2dede <_fclose_r+0x42>
   2df62:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2df64:	f7fe ffde 	bl	2cf24 <__retarget_lock_release_recursive>
   2df68:	4630      	mov	r0, r6
   2df6a:	bd70      	pop	{r4, r5, r6, pc}

0002df6c <_fstat_r>:
   2df6c:	b570      	push	{r4, r5, r6, lr}
   2df6e:	460d      	mov	r5, r1
   2df70:	2300      	movs	r3, #0
   2df72:	4c07      	ldr	r4, [pc, #28]	; (2df90 <_fstat_r+0x24>)
   2df74:	4606      	mov	r6, r0
   2df76:	4611      	mov	r1, r2
   2df78:	4628      	mov	r0, r5
   2df7a:	6023      	str	r3, [r4, #0]
   2df7c:	f000 fbe0 	bl	2e740 <_fstat>
   2df80:	1c43      	adds	r3, r0, #1
   2df82:	d000      	beq.n	2df86 <_fstat_r+0x1a>
   2df84:	bd70      	pop	{r4, r5, r6, pc}
   2df86:	6823      	ldr	r3, [r4, #0]
   2df88:	2b00      	cmp	r3, #0
   2df8a:	d0fb      	beq.n	2df84 <_fstat_r+0x18>
   2df8c:	6033      	str	r3, [r6, #0]
   2df8e:	bd70      	pop	{r4, r5, r6, pc}
   2df90:	20027ee8 	.word	0x20027ee8

0002df94 <_isatty_r>:
   2df94:	b538      	push	{r3, r4, r5, lr}
   2df96:	2300      	movs	r3, #0
   2df98:	4c06      	ldr	r4, [pc, #24]	; (2dfb4 <_isatty_r+0x20>)
   2df9a:	4605      	mov	r5, r0
   2df9c:	4608      	mov	r0, r1
   2df9e:	6023      	str	r3, [r4, #0]
   2dfa0:	f000 fbc8 	bl	2e734 <_isatty>
   2dfa4:	1c43      	adds	r3, r0, #1
   2dfa6:	d000      	beq.n	2dfaa <_isatty_r+0x16>
   2dfa8:	bd38      	pop	{r3, r4, r5, pc}
   2dfaa:	6823      	ldr	r3, [r4, #0]
   2dfac:	2b00      	cmp	r3, #0
   2dfae:	d0fb      	beq.n	2dfa8 <_isatty_r+0x14>
   2dfb0:	602b      	str	r3, [r5, #0]
   2dfb2:	bd38      	pop	{r3, r4, r5, pc}
   2dfb4:	20027ee8 	.word	0x20027ee8

0002dfb8 <_lseek_r>:
   2dfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dfba:	460e      	mov	r6, r1
   2dfbc:	4c08      	ldr	r4, [pc, #32]	; (2dfe0 <_lseek_r+0x28>)
   2dfbe:	2500      	movs	r5, #0
   2dfc0:	4611      	mov	r1, r2
   2dfc2:	4607      	mov	r7, r0
   2dfc4:	461a      	mov	r2, r3
   2dfc6:	4630      	mov	r0, r6
   2dfc8:	6025      	str	r5, [r4, #0]
   2dfca:	f000 fbb1 	bl	2e730 <_lseek>
   2dfce:	1c43      	adds	r3, r0, #1
   2dfd0:	d000      	beq.n	2dfd4 <_lseek_r+0x1c>
   2dfd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2dfd4:	6823      	ldr	r3, [r4, #0]
   2dfd6:	2b00      	cmp	r3, #0
   2dfd8:	d0fb      	beq.n	2dfd2 <_lseek_r+0x1a>
   2dfda:	603b      	str	r3, [r7, #0]
   2dfdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2dfde:	bf00      	nop
   2dfe0:	20027ee8 	.word	0x20027ee8

0002dfe4 <_read_r>:
   2dfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dfe6:	460e      	mov	r6, r1
   2dfe8:	4c08      	ldr	r4, [pc, #32]	; (2e00c <_read_r+0x28>)
   2dfea:	2500      	movs	r5, #0
   2dfec:	4611      	mov	r1, r2
   2dfee:	4607      	mov	r7, r0
   2dff0:	461a      	mov	r2, r3
   2dff2:	4630      	mov	r0, r6
   2dff4:	6025      	str	r5, [r4, #0]
   2dff6:	f000 fb90 	bl	2e71a <_read>
   2dffa:	1c43      	adds	r3, r0, #1
   2dffc:	d000      	beq.n	2e000 <_read_r+0x1c>
   2dffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e000:	6823      	ldr	r3, [r4, #0]
   2e002:	2b00      	cmp	r3, #0
   2e004:	d0fb      	beq.n	2dffe <_read_r+0x1a>
   2e006:	603b      	str	r3, [r7, #0]
   2e008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e00a:	bf00      	nop
   2e00c:	20027ee8 	.word	0x20027ee8

0002e010 <fabs>:
   2e010:	ec51 0b10 	vmov	r0, r1, d0
   2e014:	ee10 2a10 	vmov	r2, s0
   2e018:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   2e01c:	ec43 2b10 	vmov	d0, r2, r3
   2e020:	4770      	bx	lr
   2e022:	bf00      	nop

0002e024 <copysign>:
   2e024:	ee11 0a90 	vmov	r0, s3
   2e028:	ec53 2b10 	vmov	r2, r3, d0
   2e02c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   2e030:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   2e034:	ea41 0300 	orr.w	r3, r1, r0
   2e038:	ec43 2b10 	vmov	d0, r2, r3
   2e03c:	4770      	bx	lr
   2e03e:	bf00      	nop

0002e040 <nrf_cloud_error_handler>:
	error_handler(ERROR_NRF_CLOUD, err);
   2e040:	4601      	mov	r1, r0
   2e042:	2000      	movs	r0, #0
   2e044:	f7e4 ba8a 	b.w	1255c <error_handler>

0002e048 <bsd_recoverable_error_handler>:
	sys_reboot(SYS_REBOOT_COLD);
   2e048:	2001      	movs	r0, #1
   2e04a:	f7e5 b893 	b.w	13174 <sys_reboot>

0002e04e <bsd_irrecoverable_error_handler>:
   2e04e:	2001      	movs	r0, #1
   2e050:	f7e5 b890 	b.w	13174 <sys_reboot>

0002e054 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2e054:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   2e058:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2e05c:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   2e05e:	bf08      	it	eq
   2e060:	f06f 0015 	mvneq.w	r0, #21
   2e064:	4770      	bx	lr

0002e066 <get_bit_ptr>:
{
   2e066:	b570      	push	{r4, r5, r6, lr}
   2e068:	250c      	movs	r5, #12
   2e06a:	434d      	muls	r5, r1
   2e06c:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   2e06e:	f990 000b 	ldrsb.w	r0, [r0, #11]
   2e072:	1974      	adds	r4, r6, r5
		&p->levels[level].bits : p->levels[level].bits_p;
   2e074:	4288      	cmp	r0, r1
   2e076:	bfa8      	it	ge
   2e078:	4621      	movge	r1, r4
	*word = &bitarray[bn / 32];
   2e07a:	f04f 0420 	mov.w	r4, #32
   2e07e:	fb92 f4f4 	sdiv	r4, r2, r4
		&p->levels[level].bits : p->levels[level].bits_p;
   2e082:	bfb8      	it	lt
   2e084:	5971      	ldrlt	r1, [r6, r5]
}
   2e086:	f002 001f 	and.w	r0, r2, #31
	*word = &bitarray[bn / 32];
   2e08a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   2e08e:	6019      	str	r1, [r3, #0]
}
   2e090:	bd70      	pop	{r4, r5, r6, pc}

0002e092 <set_free_bit>:
{
   2e092:	b507      	push	{r0, r1, r2, lr}
	int bit = get_bit_ptr(p, level, bn, &word);
   2e094:	ab01      	add	r3, sp, #4
   2e096:	f7ff ffe6 	bl	2e066 <get_bit_ptr>
	*word |= (1<<bit);
   2e09a:	2301      	movs	r3, #1
   2e09c:	9a01      	ldr	r2, [sp, #4]
   2e09e:	fa03 f000 	lsl.w	r0, r3, r0
   2e0a2:	6813      	ldr	r3, [r2, #0]
   2e0a4:	4303      	orrs	r3, r0
   2e0a6:	6013      	str	r3, [r2, #0]
}
   2e0a8:	b003      	add	sp, #12
   2e0aa:	f85d fb04 	ldr.w	pc, [sp], #4

0002e0ae <clear_free_bit>:
{
   2e0ae:	b507      	push	{r0, r1, r2, lr}
	int bit = get_bit_ptr(p, level, bn, &word);
   2e0b0:	ab01      	add	r3, sp, #4
   2e0b2:	f7ff ffd8 	bl	2e066 <get_bit_ptr>
	*word &= ~(1<<bit);
   2e0b6:	2301      	movs	r3, #1
   2e0b8:	9a01      	ldr	r2, [sp, #4]
   2e0ba:	fa03 f000 	lsl.w	r0, r3, r0
   2e0be:	6813      	ldr	r3, [r2, #0]
   2e0c0:	ea23 0300 	bic.w	r3, r3, r0
   2e0c4:	6013      	str	r3, [r2, #0]
}
   2e0c6:	b003      	add	sp, #12
   2e0c8:	f85d fb04 	ldr.w	pc, [sp], #4

0002e0cc <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   2e0cc:	f04f 0320 	mov.w	r3, #32
   2e0d0:	f3ef 8011 	mrs	r0, BASEPRI
   2e0d4:	f383 8811 	msr	BASEPRI, r3
   2e0d8:	f3bf 8f6f 	isb	sy
}
   2e0dc:	4770      	bx	lr

0002e0de <pool_irq_unlock.isra.4>:
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   2e0de:	07c3      	lsls	r3, r0, #31
   2e0e0:	d503      	bpl.n	2e0ea <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   2e0e2:	f381 8811 	msr	BASEPRI, r1
   2e0e6:	f3bf 8f6f 	isb	sy
}
   2e0ea:	4770      	bx	lr

0002e0ec <z_sys_mem_pool_base_init>:
{
   2e0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e0f0:	4604      	mov	r4, r0
	p->max_inline_level = -1;
   2e0f2:	22ff      	movs	r2, #255	; 0xff
	for (i = 0; i < p->n_levels; i++) {
   2e0f4:	2100      	movs	r1, #0
		sys_dlist_init(&p->levels[i].free_list);
   2e0f6:	f04f 0e0c 	mov.w	lr, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   2e0fa:	6843      	ldr	r3, [r0, #4]
   2e0fc:	8905      	ldrh	r5, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   2e0fe:	6800      	ldr	r0, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   2e100:	435d      	muls	r5, r3
	for (i = 0; i < p->n_levels; i++) {
   2e102:	f894 c00a 	ldrb.w	ip, [r4, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   2e106:	4428      	add	r0, r5
	p->max_inline_level = -1;
   2e108:	72e2      	strb	r2, [r4, #11]
	for (i = 0; i < p->n_levels; i++) {
   2e10a:	458c      	cmp	ip, r1
   2e10c:	dc05      	bgt.n	2e11a <z_sys_mem_pool_base_init+0x2e>
	for (i = 0; i < p->n_max; i++) {
   2e10e:	2500      	movs	r5, #0
   2e110:	8923      	ldrh	r3, [r4, #8]
   2e112:	42ab      	cmp	r3, r5
   2e114:	dc22      	bgt.n	2e15c <z_sys_mem_pool_base_init+0x70>
}
   2e116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		int nblocks = buflen / sz;
   2e11a:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
   2e11e:	fb0e f701 	mul.w	r7, lr, r1
   2e122:	f8d4 800c 	ldr.w	r8, [r4, #12]
		if (nblocks < 32) {
   2e126:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
   2e128:	eb08 0607 	add.w	r6, r8, r7
			bits += (nblocks + 31)/32;
   2e12c:	bfc8      	it	gt
   2e12e:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
   2e130:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
   2e134:	f106 0904 	add.w	r9, r6, #4
			bits += (nblocks + 31)/32;
   2e138:	bfc8      	it	gt
   2e13a:	0952      	lsrgt	r2, r2, #5
		sz = _ALIGN4(sz / 4);
   2e13c:	f103 0303 	add.w	r3, r3, #3
	list->tail = (sys_dnode_t *)list;
   2e140:	e9c6 9901 	strd	r9, r9, [r6, #4]
   2e144:	f023 0303 	bic.w	r3, r3, #3
			p->max_inline_level = i;
   2e148:	bfd4      	ite	le
   2e14a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
   2e14c:	f848 0007 	strgt.w	r0, [r8, r7]
	for (i = 0; i < p->n_levels; i++) {
   2e150:	f101 0101 	add.w	r1, r1, #1
			bits += (nblocks + 31)/32;
   2e154:	bfc8      	it	gt
   2e156:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
   2e15a:	e7d6      	b.n	2e10a <z_sys_mem_pool_base_init+0x1e>
	return (u8_t *)p->buf + lsz * block;
   2e15c:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
   2e15e:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
   2e160:	436a      	muls	r2, r5
   2e162:	6820      	ldr	r0, [r4, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   2e164:	1d1e      	adds	r6, r3, #4
	return (u8_t *)p->buf + lsz * block;
   2e166:	1881      	adds	r1, r0, r2
	node->next = list;
   2e168:	5086      	str	r6, [r0, r2]
	node->prev = list->tail;
   2e16a:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
   2e16c:	4620      	mov	r0, r4
   2e16e:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
   2e170:	689a      	ldr	r2, [r3, #8]
   2e172:	6011      	str	r1, [r2, #0]
	list->tail = node;
   2e174:	6099      	str	r1, [r3, #8]
   2e176:	462a      	mov	r2, r5
   2e178:	2100      	movs	r1, #0
   2e17a:	f7ff ff8a 	bl	2e092 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
   2e17e:	3501      	adds	r5, #1
   2e180:	e7c6      	b.n	2e110 <z_sys_mem_pool_base_init+0x24>

0002e182 <z_sys_mem_pool_block_alloc>:
{
   2e182:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e186:	b08b      	sub	sp, #44	; 0x2c
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   2e188:	7a85      	ldrb	r5, [r0, #10]
{
   2e18a:	af00      	add	r7, sp, #0
   2e18c:	e9c7 3202 	strd	r3, r2, [r7, #8]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   2e190:	00ab      	lsls	r3, r5, #2
   2e192:	330a      	adds	r3, #10
   2e194:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   2e198:	ebad 0d03 	sub.w	sp, sp, r3
   2e19c:	46e9      	mov	r9, sp
	lsizes[0] = _ALIGN4(p->max_sz);
   2e19e:	464a      	mov	r2, r9
   2e1a0:	6843      	ldr	r3, [r0, #4]
{
   2e1a2:	4604      	mov	r4, r0
	for (i = 0; i < p->n_levels; i++) {
   2e1a4:	2000      	movs	r0, #0
	lsizes[0] = _ALIGN4(p->max_sz);
   2e1a6:	3303      	adds	r3, #3
   2e1a8:	f023 0303 	bic.w	r3, r3, #3
   2e1ac:	f842 3904 	str.w	r3, [r2], #-4
	for (i = 0; i < p->n_levels; i++) {
   2e1b0:	4285      	cmp	r5, r0
   2e1b2:	f100 3aff 	add.w	sl, r0, #4294967295
   2e1b6:	dd0a      	ble.n	2e1ce <z_sys_mem_pool_block_alloc+0x4c>
		if (i > 0) {
   2e1b8:	b128      	cbz	r0, 2e1c6 <z_sys_mem_pool_block_alloc+0x44>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
   2e1ba:	6813      	ldr	r3, [r2, #0]
   2e1bc:	089b      	lsrs	r3, r3, #2
   2e1be:	3303      	adds	r3, #3
   2e1c0:	f023 0303 	bic.w	r3, r3, #3
   2e1c4:	6053      	str	r3, [r2, #4]
		if (lsizes[i] < size) {
   2e1c6:	f852 3f04 	ldr.w	r3, [r2, #4]!
   2e1ca:	428b      	cmp	r3, r1
   2e1cc:	d208      	bcs.n	2e1e0 <z_sys_mem_pool_block_alloc+0x5e>
	if (alloc_l < 0) {
   2e1ce:	f1ba 3fff 	cmp.w	sl, #4294967295
   2e1d2:	d107      	bne.n	2e1e4 <z_sys_mem_pool_block_alloc+0x62>
		*data_p = NULL;
   2e1d4:	2300      	movs	r3, #0
   2e1d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   2e1d8:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   2e1da:	f06f 000b 	mvn.w	r0, #11
   2e1de:	e043      	b.n	2e268 <z_sys_mem_pool_block_alloc+0xe6>
	for (i = 0; i < p->n_levels; i++) {
   2e1e0:	3001      	adds	r0, #1
   2e1e2:	e7e5      	b.n	2e1b0 <z_sys_mem_pool_block_alloc+0x2e>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   2e1e4:	7c20      	ldrb	r0, [r4, #16]
   2e1e6:	f010 0001 	ands.w	r0, r0, #1
   2e1ea:	d001      	beq.n	2e1f0 <z_sys_mem_pool_block_alloc+0x6e>
   2e1ec:	f7ff ff6e 	bl	2e0cc <pool_irq_lock.isra.2.part.3>
   2e1f0:	230c      	movs	r3, #12
	block = sys_dlist_get(&p->levels[l].free_list);
   2e1f2:	4656      	mov	r6, sl
   2e1f4:	fb03 f30a 	mul.w	r3, r3, sl
   2e1f8:	1d1a      	adds	r2, r3, #4
   2e1fa:	68e3      	ldr	r3, [r4, #12]
	key = pool_irq_lock(p);
   2e1fc:	6238      	str	r0, [r7, #32]
   2e1fe:	4413      	add	r3, r2
	return list->head == list;
   2e200:	681d      	ldr	r5, [r3, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   2e202:	42ab      	cmp	r3, r5
   2e204:	d07c      	beq.n	2e300 <z_sys_mem_pool_block_alloc+0x17e>
	node->prev->next = node->next;
   2e206:	e9d5 1300 	ldrd	r1, r3, [r5]
   2e20a:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
   2e20c:	6829      	ldr	r1, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   2e20e:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
   2e212:	604b      	str	r3, [r1, #4]
	node->next = NULL;
   2e214:	2300      	movs	r3, #0
	node->prev = NULL;
   2e216:	e9c5 3300 	strd	r3, r3, [r5]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   2e21a:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
   2e21c:	4631      	mov	r1, r6
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   2e21e:	1aeb      	subs	r3, r5, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
   2e220:	fb93 f2f2 	sdiv	r2, r3, r2
   2e224:	4620      	mov	r0, r4
   2e226:	f7ff ff42 	bl	2e0ae <clear_free_bit>
   2e22a:	1c73      	adds	r3, r6, #1
   2e22c:	627b      	str	r3, [r7, #36]	; 0x24
   2e22e:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
   2e232:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   2e236:	617b      	str	r3, [r7, #20]
			for (from_l = i; from_l < alloc_l; from_l++) {
   2e238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e23a:	3b01      	subs	r3, #1
   2e23c:	459a      	cmp	sl, r3
   2e23e:	dc17      	bgt.n	2e270 <z_sys_mem_pool_block_alloc+0xee>
	pool_irq_unlock(p, key);
   2e240:	6a39      	ldr	r1, [r7, #32]
   2e242:	7c20      	ldrb	r0, [r4, #16]
   2e244:	f7ff ff4b 	bl	2e0de <pool_irq_unlock.isra.4>
	*data_p = data;
   2e248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   2e24a:	601d      	str	r5, [r3, #0]
	if (data == NULL) {
   2e24c:	2d00      	cmp	r5, #0
   2e24e:	d0c4      	beq.n	2e1da <z_sys_mem_pool_block_alloc+0x58>
	*level_p = alloc_l;
   2e250:	68fb      	ldr	r3, [r7, #12]
	return 0;
   2e252:	2000      	movs	r0, #0
	*level_p = alloc_l;
   2e254:	f8c3 a000 	str.w	sl, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   2e258:	6823      	ldr	r3, [r4, #0]
   2e25a:	1aed      	subs	r5, r5, r3
   2e25c:	f859 302a 	ldr.w	r3, [r9, sl, lsl #2]
   2e260:	fb95 f5f3 	sdiv	r5, r5, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   2e264:	68bb      	ldr	r3, [r7, #8]
   2e266:	601d      	str	r5, [r3, #0]
}
   2e268:	372c      	adds	r7, #44	; 0x2c
   2e26a:	46bd      	mov	sp, r7
   2e26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   2e270:	6823      	ldr	r3, [r4, #0]
	bn = block_num(p, block, lsizes[l]);
   2e272:	f856 2b04 	ldr.w	r2, [r6], #4
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   2e276:	1aeb      	subs	r3, r5, r3
   2e278:	fb93 f3f2 	sdiv	r3, r3, r2
	for (i = 1; i < 4; i++) {
   2e27c:	f04f 0b01 	mov.w	fp, #1
		int lbn = 4*bn + i;
   2e280:	009b      	lsls	r3, r3, #2
   2e282:	697a      	ldr	r2, [r7, #20]
   2e284:	613b      	str	r3, [r7, #16]
   2e286:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   2e28a:	4413      	add	r3, r2
   2e28c:	61bb      	str	r3, [r7, #24]
		int lsz = lsizes[l + 1];
   2e28e:	f8d6 8000 	ldr.w	r8, [r6]
		set_free_bit(p, l + 1, lbn);
   2e292:	6a79      	ldr	r1, [r7, #36]	; 0x24
		void *block2 = (lsz * i) + (char *)block;
   2e294:	fb0b f308 	mul.w	r3, fp, r8
   2e298:	61fb      	str	r3, [r7, #28]
   2e29a:	18eb      	adds	r3, r5, r3
   2e29c:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
   2e29e:	693b      	ldr	r3, [r7, #16]
   2e2a0:	4620      	mov	r0, r4
   2e2a2:	eb0b 0203 	add.w	r2, fp, r3
   2e2a6:	f7ff fef4 	bl	2e092 <set_free_bit>
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
   2e2aa:	687b      	ldr	r3, [r7, #4]
   2e2ac:	6822      	ldr	r2, [r4, #0]
   2e2ae:	f108 38ff 	add.w	r8, r8, #4294967295
   2e2b2:	4498      	add	r8, r3
   2e2b4:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
   2e2b8:	8921      	ldrh	r1, [r4, #8]
   2e2ba:	6862      	ldr	r2, [r4, #4]
   2e2bc:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
   2e2be:	4590      	cmp	r8, r2
   2e2c0:	d20a      	bcs.n	2e2d8 <z_sys_mem_pool_block_alloc+0x156>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
   2e2c2:	68e2      	ldr	r2, [r4, #12]
   2e2c4:	69b9      	ldr	r1, [r7, #24]
	node->next = list;
   2e2c6:	69f8      	ldr	r0, [r7, #28]
   2e2c8:	440a      	add	r2, r1
   2e2ca:	1d11      	adds	r1, r2, #4
   2e2cc:	5029      	str	r1, [r5, r0]
	node->prev = list->tail;
   2e2ce:	6891      	ldr	r1, [r2, #8]
   2e2d0:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
   2e2d2:	6891      	ldr	r1, [r2, #8]
   2e2d4:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2e2d6:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
   2e2d8:	f10b 0b01 	add.w	fp, fp, #1
   2e2dc:	f1bb 0f04 	cmp.w	fp, #4
   2e2e0:	d1d5      	bne.n	2e28e <z_sys_mem_pool_block_alloc+0x10c>
				pool_irq_unlock(p, key);
   2e2e2:	7c20      	ldrb	r0, [r4, #16]
   2e2e4:	6a39      	ldr	r1, [r7, #32]
   2e2e6:	f7ff fefa 	bl	2e0de <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   2e2ea:	7c20      	ldrb	r0, [r4, #16]
   2e2ec:	f010 0001 	ands.w	r0, r0, #1
   2e2f0:	d001      	beq.n	2e2f6 <z_sys_mem_pool_block_alloc+0x174>
   2e2f2:	f7ff feeb 	bl	2e0cc <pool_irq_lock.isra.2.part.3>
   2e2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				key = pool_irq_lock(p);
   2e2f8:	6238      	str	r0, [r7, #32]
   2e2fa:	3301      	adds	r3, #1
   2e2fc:	627b      	str	r3, [r7, #36]	; 0x24
   2e2fe:	e79b      	b.n	2e238 <z_sys_mem_pool_block_alloc+0xb6>
	for (i = alloc_l; i >= 0; i--) {
   2e300:	3e01      	subs	r6, #1
   2e302:	1c72      	adds	r2, r6, #1
   2e304:	f1a5 030c 	sub.w	r3, r5, #12
   2e308:	f47f af7a 	bne.w	2e200 <z_sys_mem_pool_block_alloc+0x7e>
   2e30c:	2500      	movs	r5, #0
   2e30e:	e797      	b.n	2e240 <z_sys_mem_pool_block_alloc+0xbe>

0002e310 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2e310:	b508      	push	{r3, lr}
   2e312:	4604      	mov	r4, r0
   2e314:	4608      	mov	r0, r1
   2e316:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   2e318:	461a      	mov	r2, r3
   2e31a:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   2e31c:	f7fa fa96 	bl	2884c <z_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
   2e320:	f7e5 fdde 	bl	13ee0 <z_impl_k_thread_abort>

0002e324 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   2e324:	b510      	push	{r4, lr}
   2e326:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   2e328:	f04f 31ff 	mov.w	r1, #4294967295
   2e32c:	4620      	mov	r0, r4
   2e32e:	f7f9 f92f 	bl	27590 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   2e332:	4603      	mov	r3, r0
   2e334:	2800      	cmp	r0, #0
   2e336:	d0f7      	beq.n	2e328 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   2e338:	6842      	ldr	r2, [r0, #4]
   2e33a:	3308      	adds	r3, #8
   2e33c:	e8d3 1fef 	ldaex	r1, [r3]
   2e340:	f021 0c01 	bic.w	ip, r1, #1
   2e344:	e8c3 cfee 	stlex	lr, ip, [r3]
   2e348:	f1be 0f00 	cmp.w	lr, #0
   2e34c:	d1f6      	bne.n	2e33c <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   2e34e:	07cb      	lsls	r3, r1, #31
   2e350:	d500      	bpl.n	2e354 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   2e352:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   2e354:	f7fa f8f8 	bl	28548 <z_impl_k_yield>
   2e358:	e7e6      	b.n	2e328 <z_work_q_main+0x4>

0002e35a <z_arch_printk_char_out>:
}
   2e35a:	2000      	movs	r0, #0
   2e35c:	4770      	bx	lr

0002e35e <print_err>:
{
   2e35e:	b570      	push	{r4, r5, r6, lr}
   2e360:	460d      	mov	r5, r1
   2e362:	4604      	mov	r4, r0
	out('E', ctx);
   2e364:	2045      	movs	r0, #69	; 0x45
   2e366:	47a0      	blx	r4
	out('R', ctx);
   2e368:	4629      	mov	r1, r5
   2e36a:	2052      	movs	r0, #82	; 0x52
   2e36c:	47a0      	blx	r4
	out('R', ctx);
   2e36e:	4629      	mov	r1, r5
   2e370:	4623      	mov	r3, r4
}
   2e372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   2e376:	2052      	movs	r0, #82	; 0x52
   2e378:	4718      	bx	r3

0002e37a <z_vprintk>:
{
   2e37a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int long_ctr = 0;
   2e37e:	f04f 0a00 	mov.w	sl, #0
{
   2e382:	4606      	mov	r6, r0
   2e384:	460f      	mov	r7, r1
	int min_width = -1;
   2e386:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
   2e38a:	46d0      	mov	r8, sl
{
   2e38c:	b089      	sub	sp, #36	; 0x24
   2e38e:	461c      	mov	r4, r3
   2e390:	1e53      	subs	r3, r2, #1
   2e392:	9303      	str	r3, [sp, #12]
			might_format = 0;
   2e394:	2500      	movs	r5, #0
						break;
   2e396:	e005      	b.n	2e3a4 <z_vprintk+0x2a>
		if (!might_format) {
   2e398:	b96d      	cbnz	r5, 2e3b6 <z_vprintk+0x3c>
			if (*fmt != '%') {
   2e39a:	2825      	cmp	r0, #37	; 0x25
   2e39c:	f000 813d 	beq.w	2e61a <z_vprintk+0x2a0>
				out((int)*fmt, ctx);
   2e3a0:	4639      	mov	r1, r7
   2e3a2:	47b0      	blx	r6
	while (*fmt) {
   2e3a4:	9b03      	ldr	r3, [sp, #12]
   2e3a6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   2e3aa:	9303      	str	r3, [sp, #12]
   2e3ac:	2800      	cmp	r0, #0
   2e3ae:	d1f3      	bne.n	2e398 <z_vprintk+0x1e>
}
   2e3b0:	b009      	add	sp, #36	; 0x24
   2e3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   2e3b6:	2864      	cmp	r0, #100	; 0x64
   2e3b8:	d062      	beq.n	2e480 <z_vprintk+0x106>
   2e3ba:	d819      	bhi.n	2e3f0 <z_vprintk+0x76>
   2e3bc:	2839      	cmp	r0, #57	; 0x39
   2e3be:	d80a      	bhi.n	2e3d6 <z_vprintk+0x5c>
   2e3c0:	2831      	cmp	r0, #49	; 0x31
   2e3c2:	d251      	bcs.n	2e468 <z_vprintk+0xee>
   2e3c4:	282d      	cmp	r0, #45	; 0x2d
   2e3c6:	d03d      	beq.n	2e444 <z_vprintk+0xca>
   2e3c8:	2830      	cmp	r0, #48	; 0x30
   2e3ca:	d03e      	beq.n	2e44a <z_vprintk+0xd0>
   2e3cc:	2825      	cmp	r0, #37	; 0x25
   2e3ce:	d108      	bne.n	2e3e2 <z_vprintk+0x68>
				out((int)'%', ctx);
   2e3d0:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
   2e3d2:	47b0      	blx	r6
   2e3d4:	e7de      	b.n	2e394 <z_vprintk+0x1a>
			switch (*fmt) {
   2e3d6:	2858      	cmp	r0, #88	; 0x58
   2e3d8:	f000 80a8 	beq.w	2e52c <z_vprintk+0x1b2>
   2e3dc:	2863      	cmp	r0, #99	; 0x63
   2e3de:	f000 8116 	beq.w	2e60e <z_vprintk+0x294>
				out((int)'%', ctx);
   2e3e2:	4639      	mov	r1, r7
   2e3e4:	2025      	movs	r0, #37	; 0x25
   2e3e6:	47b0      	blx	r6
				out((int)*fmt, ctx);
   2e3e8:	9b03      	ldr	r3, [sp, #12]
   2e3ea:	4639      	mov	r1, r7
   2e3ec:	7818      	ldrb	r0, [r3, #0]
   2e3ee:	e7f0      	b.n	2e3d2 <z_vprintk+0x58>
			switch (*fmt) {
   2e3f0:	2870      	cmp	r0, #112	; 0x70
   2e3f2:	f000 8091 	beq.w	2e518 <z_vprintk+0x19e>
   2e3f6:	d806      	bhi.n	2e406 <z_vprintk+0x8c>
   2e3f8:	2869      	cmp	r0, #105	; 0x69
   2e3fa:	d041      	beq.n	2e480 <z_vprintk+0x106>
   2e3fc:	286c      	cmp	r0, #108	; 0x6c
   2e3fe:	d03c      	beq.n	2e47a <z_vprintk+0x100>
   2e400:	2868      	cmp	r0, #104	; 0x68
   2e402:	d0cf      	beq.n	2e3a4 <z_vprintk+0x2a>
   2e404:	e7ed      	b.n	2e3e2 <z_vprintk+0x68>
   2e406:	2875      	cmp	r0, #117	; 0x75
   2e408:	d06d      	beq.n	2e4e6 <z_vprintk+0x16c>
   2e40a:	d817      	bhi.n	2e43c <z_vprintk+0xc2>
   2e40c:	2873      	cmp	r0, #115	; 0x73
   2e40e:	d1e8      	bne.n	2e3e2 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   2e410:	6825      	ldr	r5, [r4, #0]
   2e412:	f104 0b04 	add.w	fp, r4, #4
   2e416:	462b      	mov	r3, r5
				while (*s)
   2e418:	461c      	mov	r4, r3
   2e41a:	f814 0b01 	ldrb.w	r0, [r4], #1
   2e41e:	2800      	cmp	r0, #0
   2e420:	f040 80ec 	bne.w	2e5fc <z_vprintk+0x282>
				if (padding == PAD_SPACE_AFTER) {
   2e424:	f1b8 0f03 	cmp.w	r8, #3
   2e428:	f040 8100 	bne.w	2e62c <z_vprintk+0x2b2>
					int remaining = min_width - (s - start);
   2e42c:	1b5c      	subs	r4, r3, r5
   2e42e:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
   2e432:	2c00      	cmp	r4, #0
   2e434:	f300 80e6 	bgt.w	2e604 <z_vprintk+0x28a>
				char *s = va_arg(ap, char *);
   2e438:	465c      	mov	r4, fp
   2e43a:	e7ab      	b.n	2e394 <z_vprintk+0x1a>
			switch (*fmt) {
   2e43c:	2878      	cmp	r0, #120	; 0x78
   2e43e:	d075      	beq.n	2e52c <z_vprintk+0x1b2>
   2e440:	287a      	cmp	r0, #122	; 0x7a
   2e442:	e7de      	b.n	2e402 <z_vprintk+0x88>
				padding = PAD_SPACE_AFTER;
   2e444:	f04f 0803 	mov.w	r8, #3
   2e448:	e7ac      	b.n	2e3a4 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   2e44a:	f1b9 0f00 	cmp.w	r9, #0
   2e44e:	da0e      	bge.n	2e46e <z_vprintk+0xf4>
   2e450:	f1b8 0f00 	cmp.w	r8, #0
   2e454:	f000 80e7 	beq.w	2e626 <z_vprintk+0x2ac>
					min_width = *fmt - '0';
   2e458:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   2e45c:	f1b8 0f00 	cmp.w	r8, #0
   2e460:	bf08      	it	eq
   2e462:	f04f 0802 	moveq.w	r8, #2
   2e466:	e79d      	b.n	2e3a4 <z_vprintk+0x2a>
				if (min_width < 0) {
   2e468:	f1b9 0f00 	cmp.w	r9, #0
   2e46c:	dbf4      	blt.n	2e458 <z_vprintk+0xde>
					min_width = 10 * min_width + *fmt - '0';
   2e46e:	230a      	movs	r3, #10
   2e470:	fb03 0909 	mla	r9, r3, r9, r0
   2e474:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   2e478:	e7f0      	b.n	2e45c <z_vprintk+0xe2>
				long_ctr++;
   2e47a:	f10a 0a01 	add.w	sl, sl, #1
   2e47e:	e791      	b.n	2e3a4 <z_vprintk+0x2a>
				if (long_ctr == 0) {
   2e480:	f1ba 0f00 	cmp.w	sl, #0
   2e484:	d112      	bne.n	2e4ac <z_vprintk+0x132>
					long ld = va_arg(ap, long);
   2e486:	6825      	ldr	r5, [r4, #0]
   2e488:	3404      	adds	r4, #4
				if (d < 0) {
   2e48a:	2d00      	cmp	r5, #0
   2e48c:	da05      	bge.n	2e49a <z_vprintk+0x120>
					out((int)'-', ctx);
   2e48e:	4639      	mov	r1, r7
   2e490:	202d      	movs	r0, #45	; 0x2d
   2e492:	47b0      	blx	r6
					d = -d;
   2e494:	426d      	negs	r5, r5
					min_width--;
   2e496:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   2e49a:	4643      	mov	r3, r8
   2e49c:	462a      	mov	r2, r5
   2e49e:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   2e4a2:	4639      	mov	r1, r7
   2e4a4:	4630      	mov	r0, r6
   2e4a6:	f7e4 fcdd 	bl	12e64 <_printk_dec_ulong>
   2e4aa:	e773      	b.n	2e394 <z_vprintk+0x1a>
				} else if (long_ctr == 1) {
   2e4ac:	f1ba 0f01 	cmp.w	sl, #1
   2e4b0:	d0e9      	beq.n	2e486 <z_vprintk+0x10c>
					if (lld > INT32_MAX ||
   2e4b2:	f04f 0c00 	mov.w	ip, #0
   2e4b6:	f04f 3bff 	mov.w	fp, #4294967295
					long long lld = va_arg(ap, long long);
   2e4ba:	3407      	adds	r4, #7
   2e4bc:	f024 0307 	bic.w	r3, r4, #7
   2e4c0:	f103 0408 	add.w	r4, r3, #8
   2e4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > INT32_MAX ||
   2e4c8:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
   2e4cc:	f143 0100 	adc.w	r1, r3, #0
   2e4d0:	458c      	cmp	ip, r1
   2e4d2:	bf08      	it	eq
   2e4d4:	4583      	cmpeq	fp, r0
   2e4d6:	d204      	bcs.n	2e4e2 <z_vprintk+0x168>
						print_err(out, ctx);
   2e4d8:	4639      	mov	r1, r7
   2e4da:	4630      	mov	r0, r6
   2e4dc:	f7ff ff3f 	bl	2e35e <print_err>
   2e4e0:	e758      	b.n	2e394 <z_vprintk+0x1a>
					d = (s32_t)lld;
   2e4e2:	4615      	mov	r5, r2
   2e4e4:	e7d1      	b.n	2e48a <z_vprintk+0x110>
				if (long_ctr == 0) {
   2e4e6:	f1ba 0f00 	cmp.w	sl, #0
   2e4ea:	d105      	bne.n	2e4f8 <z_vprintk+0x17e>
					long lu = va_arg(ap, unsigned long);
   2e4ec:	6822      	ldr	r2, [r4, #0]
   2e4ee:	3404      	adds	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
   2e4f0:	f8cd 9000 	str.w	r9, [sp]
   2e4f4:	4643      	mov	r3, r8
   2e4f6:	e7d4      	b.n	2e4a2 <z_vprintk+0x128>
				} else if (long_ctr == 1) {
   2e4f8:	f1ba 0f01 	cmp.w	sl, #1
   2e4fc:	d0f6      	beq.n	2e4ec <z_vprintk+0x172>
					unsigned long long llu =
   2e4fe:	3407      	adds	r4, #7
   2e500:	f024 0307 	bic.w	r3, r4, #7
   2e504:	f103 0408 	add.w	r4, r3, #8
   2e508:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > INT32_MAX) {
   2e50c:	2b00      	cmp	r3, #0
   2e50e:	bf08      	it	eq
   2e510:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
   2e514:	d3ec      	bcc.n	2e4f0 <z_vprintk+0x176>
   2e516:	e7df      	b.n	2e4d8 <z_vprintk+0x15e>
				  out('0', ctx);
   2e518:	4639      	mov	r1, r7
   2e51a:	2030      	movs	r0, #48	; 0x30
   2e51c:	47b0      	blx	r6
				  out('x', ctx);
   2e51e:	4639      	mov	r1, r7
   2e520:	2078      	movs	r0, #120	; 0x78
   2e522:	47b0      	blx	r6
				  min_width = 8;
   2e524:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
   2e528:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
   2e52c:	f1ba 0f01 	cmp.w	sl, #1
   2e530:	dc27      	bgt.n	2e582 <z_vprintk+0x208>
					x = va_arg(ap, unsigned long);
   2e532:	6823      	ldr	r3, [r4, #0]
   2e534:	3404      	adds	r4, #4
   2e536:	9307      	str	r3, [sp, #28]
   2e538:	2300      	movs	r3, #0
   2e53a:	9304      	str	r3, [sp, #16]
	int remaining = 16; /* 16 digits max */
   2e53c:	2210      	movs	r2, #16
	int digits = 0;
   2e53e:	2300      	movs	r3, #0
	int size = sizeof(num) * 2;
   2e540:	4693      	mov	fp, r2
	int digits = 0;
   2e542:	9302      	str	r3, [sp, #8]
	int found_largest_digit = 0;
   2e544:	9306      	str	r3, [sp, #24]
		char nibble = (num >> ((size - 1) << 2) & 0xf);
   2e546:	9b07      	ldr	r3, [sp, #28]
   2e548:	f10b 3bff 	add.w	fp, fp, #4294967295
   2e54c:	ea4f 008b 	mov.w	r0, fp, lsl #2
   2e550:	f1c0 0c20 	rsb	ip, r0, #32
   2e554:	f1a0 0120 	sub.w	r1, r0, #32
   2e558:	fa23 f000 	lsr.w	r0, r3, r0
   2e55c:	9b04      	ldr	r3, [sp, #16]
   2e55e:	fa03 fc0c 	lsl.w	ip, r3, ip
   2e562:	ea40 000c 	orr.w	r0, r0, ip
   2e566:	fa23 f101 	lsr.w	r1, r3, r1
   2e56a:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || size == 1) {
   2e56c:	f010 000f 	ands.w	r0, r0, #15
   2e570:	d113      	bne.n	2e59a <z_vprintk+0x220>
   2e572:	9b06      	ldr	r3, [sp, #24]
   2e574:	b913      	cbnz	r3, 2e57c <z_vprintk+0x202>
   2e576:	f1bb 0f00 	cmp.w	fp, #0
   2e57a:	d12e      	bne.n	2e5da <z_vprintk+0x260>
			nibble += nibble > 9 ? 87 : 48;
   2e57c:	f04f 0c30 	mov.w	ip, #48	; 0x30
   2e580:	e011      	b.n	2e5a6 <z_vprintk+0x22c>
					x = va_arg(ap, unsigned long long);
   2e582:	3407      	adds	r4, #7
   2e584:	f024 0307 	bic.w	r3, r4, #7
   2e588:	681a      	ldr	r2, [r3, #0]
   2e58a:	f103 0408 	add.w	r4, r3, #8
   2e58e:	685b      	ldr	r3, [r3, #4]
   2e590:	9207      	str	r2, [sp, #28]
   2e592:	9304      	str	r3, [sp, #16]
   2e594:	e7d2      	b.n	2e53c <z_vprintk+0x1c2>
	for (; size != 0; size--) {
   2e596:	9a05      	ldr	r2, [sp, #20]
   2e598:	e7d5      	b.n	2e546 <z_vprintk+0x1cc>
			nibble += nibble > 9 ? 87 : 48;
   2e59a:	2809      	cmp	r0, #9
   2e59c:	bf8c      	ite	hi
   2e59e:	f04f 0c57 	movhi.w	ip, #87	; 0x57
   2e5a2:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
   2e5a6:	4639      	mov	r1, r7
   2e5a8:	4460      	add	r0, ip
   2e5aa:	9205      	str	r2, [sp, #20]
   2e5ac:	47b0      	blx	r6
			digits++;
   2e5ae:	9b02      	ldr	r3, [sp, #8]
			found_largest_digit = 1;
   2e5b0:	9506      	str	r5, [sp, #24]
			digits++;
   2e5b2:	3301      	adds	r3, #1
   2e5b4:	9302      	str	r3, [sp, #8]
	for (; size != 0; size--) {
   2e5b6:	f1bb 0f00 	cmp.w	fp, #0
   2e5ba:	d1ec      	bne.n	2e596 <z_vprintk+0x21c>
	if (padding == PAD_SPACE_AFTER) {
   2e5bc:	f1b8 0f03 	cmp.w	r8, #3
   2e5c0:	f47f aee8 	bne.w	2e394 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   2e5c4:	9b02      	ldr	r3, [sp, #8]
   2e5c6:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
   2e5ca:	2d00      	cmp	r5, #0
   2e5cc:	f77f aee2 	ble.w	2e394 <z_vprintk+0x1a>
			out(' ', ctx);
   2e5d0:	4639      	mov	r1, r7
   2e5d2:	2020      	movs	r0, #32
   2e5d4:	47b0      	blx	r6
   2e5d6:	3d01      	subs	r5, #1
   2e5d8:	e7f7      	b.n	2e5ca <z_vprintk+0x250>
		if (remaining-- <= min_width) {
   2e5da:	1e53      	subs	r3, r2, #1
   2e5dc:	4591      	cmp	r9, r2
   2e5de:	9305      	str	r3, [sp, #20]
   2e5e0:	dbe9      	blt.n	2e5b6 <z_vprintk+0x23c>
			if (padding == PAD_ZERO_BEFORE) {
   2e5e2:	f1b8 0f01 	cmp.w	r8, #1
   2e5e6:	d103      	bne.n	2e5f0 <z_vprintk+0x276>
				out('0', ctx);
   2e5e8:	4639      	mov	r1, r7
   2e5ea:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
   2e5ec:	47b0      	blx	r6
   2e5ee:	e7e2      	b.n	2e5b6 <z_vprintk+0x23c>
			} else if (padding == PAD_SPACE_BEFORE) {
   2e5f0:	f1b8 0f02 	cmp.w	r8, #2
   2e5f4:	d1df      	bne.n	2e5b6 <z_vprintk+0x23c>
				out(' ', ctx);
   2e5f6:	4639      	mov	r1, r7
   2e5f8:	2020      	movs	r0, #32
   2e5fa:	e7f7      	b.n	2e5ec <z_vprintk+0x272>
					out((int)(*s++), ctx);
   2e5fc:	4639      	mov	r1, r7
   2e5fe:	47b0      	blx	r6
   2e600:	4623      	mov	r3, r4
   2e602:	e709      	b.n	2e418 <z_vprintk+0x9e>
						out(' ', ctx);
   2e604:	4639      	mov	r1, r7
   2e606:	2020      	movs	r0, #32
   2e608:	47b0      	blx	r6
   2e60a:	3c01      	subs	r4, #1
   2e60c:	e711      	b.n	2e432 <z_vprintk+0xb8>
				out(c, ctx);
   2e60e:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
   2e610:	1d25      	adds	r5, r4, #4
				out(c, ctx);
   2e612:	4639      	mov	r1, r7
   2e614:	47b0      	blx	r6
				int c = va_arg(ap, int);
   2e616:	462c      	mov	r4, r5
   2e618:	e6bc      	b.n	2e394 <z_vprintk+0x1a>
				long_ctr = 0;
   2e61a:	46aa      	mov	sl, r5
				padding = PAD_NONE;
   2e61c:	46a8      	mov	r8, r5
				min_width = -1;
   2e61e:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
   2e622:	2501      	movs	r5, #1
   2e624:	e6be      	b.n	2e3a4 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   2e626:	f04f 0801 	mov.w	r8, #1
   2e62a:	e6bb      	b.n	2e3a4 <z_vprintk+0x2a>
				char *s = va_arg(ap, char *);
   2e62c:	465c      	mov	r4, fp
			might_format = 0;
   2e62e:	4605      	mov	r5, r0
   2e630:	e6b8      	b.n	2e3a4 <z_vprintk+0x2a>

0002e632 <printk>:
{
   2e632:	b40f      	push	{r0, r1, r2, r3}
   2e634:	b507      	push	{r0, r1, r2, lr}
   2e636:	a904      	add	r1, sp, #16
   2e638:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2e63c:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   2e63e:	f7e4 fc65 	bl	12f0c <vprintk>
}
   2e642:	b003      	add	sp, #12
   2e644:	f85d eb04 	ldr.w	lr, [sp], #4
   2e648:	b004      	add	sp, #16
   2e64a:	4770      	bx	lr

0002e64c <assert_post_action>:
__weak void assert_post_action(const char *file, unsigned int line)
{
  ARG_UNUSED(file);
  ARG_UNUSED(line);

  k_panic();
   2e64c:	4040      	eors	r0, r0
   2e64e:	f380 8811 	msr	BASEPRI, r0
   2e652:	f04f 0005 	mov.w	r0, #5
   2e656:	df02      	svc	2

0002e658 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);

GEN_ABS_SYM_END
   2e658:	4770      	bx	lr

0002e65a <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   2e65a:	f7e4 bc7b 	b.w	12f54 <SystemInit>

0002e65e <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2e65e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   2e662:	4770      	bx	lr

0002e664 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2e664:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   2e668:	4770      	bx	lr

0002e66a <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2e66a:	f44f 7080 	mov.w	r0, #256	; 0x100
   2e66e:	4770      	bx	lr

0002e670 <z_impl_uart_poll_out>:
	api->poll_out(dev, out_char);
   2e670:	6843      	ldr	r3, [r0, #4]
   2e672:	685b      	ldr	r3, [r3, #4]
   2e674:	4718      	bx	r3

0002e676 <debug_hook_out_nop>:
}
   2e676:	2000      	movs	r0, #0
   2e678:	4770      	bx	lr

0002e67a <clock_control_init>:

static int clock_control_init(struct device *dev)
{
   2e67a:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(DT_NORDIC_NRF_CLOCK_0_IRQ_0,
   2e67c:	2200      	movs	r2, #0
   2e67e:	2101      	movs	r1, #1
   2e680:	2005      	movs	r0, #5
   2e682:	f7e5 fb39 	bl	13cf8 <z_irq_priority_set>
		    DT_NORDIC_NRF_CLOCK_0_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   2e686:	2005      	movs	r0, #5
   2e688:	f7e5 fb12 	bl	13cb0 <z_arch_irq_enable>

	return 0;
}
   2e68c:	2000      	movs	r0, #0
   2e68e:	bd08      	pop	{r3, pc}

0002e690 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   2e690:	4770      	bx	lr

0002e692 <sys_clock_disable>:
   2e692:	4770      	bx	lr

0002e694 <sys_arch_reboot>:
 * firmware is not allowed to directly reboot the system.
 */
void sys_arch_reboot(int type)
{
	ARG_UNUSED(type);
	spm_request_system_reboot();
   2e694:	f7d9 bca8 	b.w	7fe8 <spm_request_system_reboot>

0002e698 <z_irq_spurious>:
	__reserved();
   2e698:	f7e5 b932 	b.w	13900 <__bus_fault>

0002e69c <z_arch_isr_direct_header>:
#endif

void z_arch_isr_direct_header(void)
{
	z_sys_trace_isr_enter();
}
   2e69c:	4770      	bx	lr

0002e69e <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2e69e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   2e6a0:	f383 880b 	msr	PSPLIM, r3
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(guard_start);
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
}
   2e6a4:	4770      	bx	lr

0002e6a6 <z_do_kernel_oops>:

void z_do_kernel_oops(const NANO_ESF *esf)
{
   2e6a6:	4601      	mov	r1, r0
	z_NanoFatalErrorHandler(esf->basic.r0, esf);
   2e6a8:	6800      	ldr	r0, [r0, #0]
   2e6aa:	f7e5 bbb7 	b.w	13e1c <z_NanoFatalErrorHandler>

0002e6ae <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   2e6ae:	b508      	push	{r3, lr}
	handler();
   2e6b0:	f7e5 fc6c 	bl	13f8c <z_SysNmiOnReset>
	z_ExcExit();
}
   2e6b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_ExcExit();
   2e6b8:	f7e5 b892 	b.w	137e0 <_IntExit>

0002e6bc <z_arch_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   2e6bc:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   2e6be:	2100      	movs	r1, #0
   2e6c0:	a801      	add	r0, sp, #4
   2e6c2:	f7e5 fe65 	bl	14390 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   2e6c6:	b003      	add	sp, #12
   2e6c8:	f85d fb04 	ldr.w	pc, [sp], #4

0002e6cc <mpu_configure_region>:
{
   2e6cc:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   2e6ce:	684b      	ldr	r3, [r1, #4]
{
   2e6d0:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   2e6d2:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   2e6d4:	f89d 2008 	ldrb.w	r2, [sp, #8]
   2e6d8:	890d      	ldrh	r5, [r1, #8]
   2e6da:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   2e6dc:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2e6de:	f024 041f 	bic.w	r4, r4, #31
   2e6e2:	3b01      	subs	r3, #1
   2e6e4:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   2e6e6:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   2e6ea:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2e6ee:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   2e6f2:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   2e6f4:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2e6f8:	9303      	str	r3, [sp, #12]
   2e6fa:	4604      	mov	r4, r0
   2e6fc:	d805      	bhi.n	2e70a <mpu_configure_region+0x3e>
	region_init(index, region_conf);
   2e6fe:	4669      	mov	r1, sp
   2e700:	f7e5 fc9a 	bl	14038 <region_init>
}
   2e704:	4620      	mov	r0, r4
   2e706:	b005      	add	sp, #20
   2e708:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2e70a:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
   2e70e:	e7f9      	b.n	2e704 <mpu_configure_region+0x38>

0002e710 <_stdout_hook_default>:
}
   2e710:	f04f 30ff 	mov.w	r0, #4294967295
   2e714:	4770      	bx	lr

0002e716 <_stdin_hook_default>:
}
   2e716:	2000      	movs	r0, #0
   2e718:	4770      	bx	lr

0002e71a <_read>:
{
   2e71a:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2e71c:	4611      	mov	r1, r2
   2e71e:	f7e5 be77 	b.w	14410 <z_impl_zephyr_read_stdin>

0002e722 <_write>:
{
   2e722:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2e724:	4611      	mov	r1, r2
   2e726:	f7e5 be87 	b.w	14438 <z_impl_zephyr_write_stdout>

0002e72a <_close>:
   2e72a:	f04f 30ff 	mov.w	r0, #4294967295
   2e72e:	4770      	bx	lr

0002e730 <_lseek>:
}
   2e730:	2000      	movs	r0, #0
   2e732:	4770      	bx	lr

0002e734 <_isatty>:
}
   2e734:	2001      	movs	r0, #1
   2e736:	4770      	bx	lr

0002e738 <_kill>:
}
   2e738:	2000      	movs	r0, #0
   2e73a:	4770      	bx	lr

0002e73c <_getpid>:
}
   2e73c:	2000      	movs	r0, #0
   2e73e:	4770      	bx	lr

0002e740 <_fstat>:
	st->st_mode = S_IFCHR;
   2e740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   2e744:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   2e746:	604b      	str	r3, [r1, #4]
}
   2e748:	4770      	bx	lr

0002e74a <__errno>:

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE0(K_SYSCALL_Z_ERRNO, z_errno, int *)
   2e74a:	f7f8 b871 	b.w	26830 <z_impl_z_errno>

0002e74e <fixed_data_unref>:

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   2e74e:	4770      	bx	lr

0002e750 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   2e750:	b508      	push	{r3, lr}
	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   2e752:	f000 f80a 	bl	2e76a <net_pkt_init>

	net_context_init();
   2e756:	f7e5 fecf 	bl	144f8 <net_context_init>
	net_if_init();
   2e75a:	f7e5 ff41 	bl	145e0 <net_if_init>
	net_tc_rx_init();
   2e75e:	f7e5 ff8b 	bl	14678 <net_tc_rx_init>
	net_if_post_init();
   2e762:	f7e5 ff57 	bl	14614 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   2e766:	2000      	movs	r0, #0
   2e768:	bd08      	pop	{r3, pc}

0002e76a <net_pkt_init>:
		(size_t)(k_mem_slab_num_free_get(&tx_pkts) *
			 sizeof(struct net_pkt)),
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
   2e76a:	4770      	bx	lr

0002e76c <gpio_nrfx_write>:
{
   2e76c:	b510      	push	{r4, lr}
	return port->config->config_info;
   2e76e:	6804      	ldr	r4, [r0, #0]
   2e770:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e772:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2e774:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e776:	6824      	ldr	r4, [r4, #0]
   2e778:	69c0      	ldr	r0, [r0, #28]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2e77a:	d103      	bne.n	2e784 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   2e77c:	4058      	eors	r0, r3
    p_reg->OUT = value;
   2e77e:	6060      	str	r0, [r4, #4]
}
   2e780:	2000      	movs	r0, #0
   2e782:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   2e784:	3300      	adds	r3, #0
   2e786:	f04f 0101 	mov.w	r1, #1
   2e78a:	bf18      	it	ne
   2e78c:	2301      	movne	r3, #1
   2e78e:	40d0      	lsrs	r0, r2
   2e790:	f000 0001 	and.w	r0, r0, #1
   2e794:	4091      	lsls	r1, r2
   2e796:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   2e798:	bf14      	ite	ne
   2e79a:	60a1      	strne	r1, [r4, #8]
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   2e79c:	60e1      	streq	r1, [r4, #12]
   2e79e:	e7ef      	b.n	2e780 <gpio_nrfx_write+0x14>

0002e7a0 <gpio_nrfx_read>:
{
   2e7a0:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   2e7a2:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   2e7a4:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e7a6:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   2e7a8:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e7aa:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2e7ac:	2901      	cmp	r1, #1
    return p_reg->DIR;
   2e7ae:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   2e7b0:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   2e7b2:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   2e7b4:	ea80 0004 	eor.w	r0, r0, r4
   2e7b8:	ea84 0405 	eor.w	r4, r4, r5
   2e7bc:	ea04 0406 	and.w	r4, r4, r6
   2e7c0:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   2e7c4:	bf1c      	itt	ne
   2e7c6:	40d0      	lsrne	r0, r2
   2e7c8:	f000 0001 	andne.w	r0, r0, #1
   2e7cc:	6018      	str	r0, [r3, #0]
}
   2e7ce:	2000      	movs	r0, #0
   2e7d0:	bd70      	pop	{r4, r5, r6, pc}

0002e7d2 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2e7d2:	2901      	cmp	r1, #1
{
   2e7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   2e7d8:	bf18      	it	ne
   2e7da:	b2d4      	uxtbne	r4, r2
{
   2e7dc:	4606      	mov	r6, r0
		to_pin   = pin;
   2e7de:	bf12      	itee	ne
   2e7e0:	4625      	movne	r5, r4
		to_pin   = 31U;
   2e7e2:	251f      	moveq	r5, #31
		from_pin = 0U;
   2e7e4:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   2e7e6:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   2e7ea:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2e7ec:	42ac      	cmp	r4, r5
   2e7ee:	d902      	bls.n	2e7f6 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   2e7f0:	2000      	movs	r0, #0
}
   2e7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   2e7f6:	68fb      	ldr	r3, [r7, #12]
   2e7f8:	fa08 f204 	lsl.w	r2, r8, r4
   2e7fc:	ea23 0302 	bic.w	r3, r3, r2
   2e800:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   2e802:	4621      	mov	r1, r4
   2e804:	4630      	mov	r0, r6
   2e806:	f7e5 ffcd 	bl	147a4 <gpiote_pin_int_cfg>
		if (res != 0) {
   2e80a:	2800      	cmp	r0, #0
   2e80c:	d1f1      	bne.n	2e7f2 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2e80e:	3401      	adds	r4, #1
   2e810:	b2e4      	uxtb	r4, r4
   2e812:	e7eb      	b.n	2e7ec <gpio_nrfx_pin_disable_callback+0x1a>

0002e814 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2e814:	2901      	cmp	r1, #1
{
   2e816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   2e81a:	bf18      	it	ne
   2e81c:	b2d4      	uxtbne	r4, r2
{
   2e81e:	4606      	mov	r6, r0
		to_pin   = pin;
   2e820:	bf12      	itee	ne
   2e822:	4625      	movne	r5, r4
		to_pin   = 31U;
   2e824:	251f      	moveq	r5, #31
		from_pin = 0U;
   2e826:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   2e828:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   2e82c:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2e82e:	42ac      	cmp	r4, r5
   2e830:	d902      	bls.n	2e838 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   2e832:	2000      	movs	r0, #0
}
   2e834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   2e838:	68fb      	ldr	r3, [r7, #12]
   2e83a:	fa08 f204 	lsl.w	r2, r8, r4
   2e83e:	4313      	orrs	r3, r2
   2e840:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   2e842:	4621      	mov	r1, r4
   2e844:	4630      	mov	r0, r6
   2e846:	f7e5 ffad 	bl	147a4 <gpiote_pin_int_cfg>
		if (res != 0) {
   2e84a:	2800      	cmp	r0, #0
   2e84c:	d1f2      	bne.n	2e834 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2e84e:	3401      	adds	r4, #1
   2e850:	b2e4      	uxtb	r4, r4
   2e852:	e7ec      	b.n	2e82e <gpio_nrfx_pin_enable_callback+0x1a>

0002e854 <is_regular_addr_valid>:
{
   2e854:	b538      	push	{r3, r4, r5, lr}
   2e856:	4604      	mov	r4, r0
   2e858:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   2e85a:	f7ff ff00 	bl	2e65e <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   2e85e:	4284      	cmp	r4, r0
   2e860:	d209      	bcs.n	2e876 <is_regular_addr_valid+0x22>
   2e862:	2c00      	cmp	r4, #0
   2e864:	db07      	blt.n	2e876 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   2e866:	42a8      	cmp	r0, r5
   2e868:	d305      	bcc.n	2e876 <is_regular_addr_valid+0x22>
	    addr + len > flash_size) {
   2e86a:	442c      	add	r4, r5
	    len > flash_size ||
   2e86c:	4284      	cmp	r4, r0
   2e86e:	bf8c      	ite	hi
   2e870:	2000      	movhi	r0, #0
   2e872:	2001      	movls	r0, #1
}
   2e874:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   2e876:	2000      	movs	r0, #0
   2e878:	e7fc      	b.n	2e874 <is_regular_addr_valid+0x20>

0002e87a <flash_nrf_read>:
{
   2e87a:	b570      	push	{r4, r5, r6, lr}
   2e87c:	460d      	mov	r5, r1
	return is_regular_addr_valid(addr, len) ||
   2e87e:	4619      	mov	r1, r3
   2e880:	4628      	mov	r0, r5
{
   2e882:	4616      	mov	r6, r2
   2e884:	461c      	mov	r4, r3
	return is_regular_addr_valid(addr, len) ||
   2e886:	f7ff ffe5 	bl	2e854 <is_regular_addr_valid>
	if (!is_addr_valid(addr, len)) {
   2e88a:	b138      	cbz	r0, 2e89c <flash_nrf_read+0x22>
	if (!len) {
   2e88c:	b14c      	cbz	r4, 2e8a2 <flash_nrf_read+0x28>
   2e88e:	4622      	mov	r2, r4
   2e890:	4629      	mov	r1, r5
   2e892:	4630      	mov	r0, r6
   2e894:	f7df f9a0 	bl	dbd8 <memcpy>
   2e898:	2000      	movs	r0, #0
}
   2e89a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2e89c:	f06f 0015 	mvn.w	r0, #21
   2e8a0:	e7fb      	b.n	2e89a <flash_nrf_read+0x20>
		return 0;
   2e8a2:	4620      	mov	r0, r4
   2e8a4:	e7f9      	b.n	2e89a <flash_nrf_read+0x20>

0002e8a6 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   2e8a6:	6883      	ldr	r3, [r0, #8]
   2e8a8:	689b      	ldr	r3, [r3, #8]
   2e8aa:	7b9a      	ldrb	r2, [r3, #14]
   2e8ac:	b172      	cbz	r2, 2e8cc <uarte_nrfx_isr_int+0x26>
	return dev->config->config_info;
   2e8ae:	6802      	ldr	r2, [r0, #0]
	return config->uarte_regs;
   2e8b0:	6892      	ldr	r2, [r2, #8]
   2e8b2:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e8b4:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (data->int_driven->disable_tx_irq &&
   2e8b8:	b141      	cbz	r1, 2e8cc <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   2e8ba:	f44f 7180 	mov.w	r1, #256	; 0x100
   2e8be:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e8c2:	2101      	movs	r1, #1
   2e8c4:	60d1      	str	r1, [r2, #12]
		data->int_driven->disable_tx_irq = false;
   2e8c6:	2200      	movs	r2, #0
   2e8c8:	739a      	strb	r2, [r3, #14]
		return;
   2e8ca:	4770      	bx	lr
	if (data->int_driven->cb) {
   2e8cc:	681a      	ldr	r2, [r3, #0]
   2e8ce:	b10a      	cbz	r2, 2e8d4 <uarte_nrfx_isr_int+0x2e>
		data->int_driven->cb(data->int_driven->cb_data);
   2e8d0:	6858      	ldr	r0, [r3, #4]
   2e8d2:	4710      	bx	r2
}
   2e8d4:	4770      	bx	lr

0002e8d6 <uarte_nrfx_config_get>:
{
   2e8d6:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2e8d8:	6882      	ldr	r2, [r0, #8]
   2e8da:	e892 0003 	ldmia.w	r2, {r0, r1}
   2e8de:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2e8e2:	2000      	movs	r0, #0
   2e8e4:	4770      	bx	lr

0002e8e6 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   2e8e6:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2e8e8:	689b      	ldr	r3, [r3, #8]
   2e8ea:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e8ec:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2e8f0:	b118      	cbz	r0, 2e8fa <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2e8f2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2e8f6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2e8fa:	4770      	bx	lr

0002e8fc <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   2e8fc:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2e8fe:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   2e900:	689b      	ldr	r3, [r3, #8]
   2e902:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e904:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e908:	b138      	cbz	r0, 2e91a <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   2e90a:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e90c:	2000      	movs	r0, #0
   2e90e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e910:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e912:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e916:	601a      	str	r2, [r3, #0]
	return 0;
   2e918:	4770      	bx	lr
		return -1;
   2e91a:	f04f 30ff 	mov.w	r0, #4294967295
}
   2e91e:	4770      	bx	lr

0002e920 <uarte_nrfx_poll_out>:
{
   2e920:	b082      	sub	sp, #8
   2e922:	aa02      	add	r2, sp, #8
   2e924:	f802 1d01 	strb.w	r1, [r2, #-1]!
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e928:	2100      	movs	r1, #0
	return dev->config->config_info;
   2e92a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2e92c:	689b      	ldr	r3, [r3, #8]
   2e92e:	681b      	ldr	r3, [r3, #0]
   2e930:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2e934:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2e938:	2201      	movs	r2, #1
   2e93a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e93e:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e940:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2e944:	2900      	cmp	r1, #0
   2e946:	d0fb      	beq.n	2e940 <uarte_nrfx_poll_out+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e948:	60da      	str	r2, [r3, #12]
}
   2e94a:	b002      	add	sp, #8
   2e94c:	4770      	bx	lr

0002e94e <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   2e94e:	6803      	ldr	r3, [r0, #0]
{
   2e950:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2e952:	689b      	ldr	r3, [r3, #8]
   2e954:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e956:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2e95a:	b1bb      	cbz	r3, 2e98c <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2e95c:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   2e95e:	68ab      	ldr	r3, [r5, #8]
   2e960:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e962:	2300      	movs	r3, #0
   2e964:	4290      	cmp	r0, r2
   2e966:	bfa8      	it	ge
   2e968:	4610      	movge	r0, r2
   2e96a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   2e96e:	68aa      	ldr	r2, [r5, #8]
	for (int i = 0; i < len; i++) {
   2e970:	4283      	cmp	r3, r0
   2e972:	6892      	ldr	r2, [r2, #8]
   2e974:	db06      	blt.n	2e984 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e976:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2e978:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2e97c:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e980:	60a3      	str	r3, [r4, #8]
}
   2e982:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   2e984:	5cce      	ldrb	r6, [r1, r3]
   2e986:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   2e988:	3301      	adds	r3, #1
   2e98a:	e7f0      	b.n	2e96e <uarte_nrfx_fifo_fill+0x20>
		return 0;
   2e98c:	4618      	mov	r0, r3
   2e98e:	e7f8      	b.n	2e982 <uarte_nrfx_fifo_fill+0x34>

0002e990 <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   2e990:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2e992:	689b      	ldr	r3, [r3, #8]
   2e994:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e996:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e99a:	b143      	cbz	r3, 2e9ae <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2e99c:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e99e:	2000      	movs	r0, #0
   2e9a0:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e9a4:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   2e9a6:	7b1b      	ldrb	r3, [r3, #12]
   2e9a8:	700b      	strb	r3, [r1, #0]
   2e9aa:	6010      	str	r0, [r2, #0]
   2e9ac:	4770      	bx	lr
	int num_rx = 0;
   2e9ae:	4618      	mov	r0, r3
}
   2e9b0:	4770      	bx	lr

0002e9b2 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   2e9b2:	2100      	movs	r1, #0
	return dev->config->config_info;
   2e9b4:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   2e9b6:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   2e9b8:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   2e9ba:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   2e9bc:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   2e9be:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   2e9c0:	f44f 7280 	mov.w	r2, #256	; 0x100
   2e9c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2e9c8:	4770      	bx	lr

0002e9ca <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2e9ca:	2201      	movs	r2, #1
   2e9cc:	6883      	ldr	r3, [r0, #8]
   2e9ce:	689b      	ldr	r3, [r3, #8]
   2e9d0:	739a      	strb	r2, [r3, #14]
}
   2e9d2:	4770      	bx	lr

0002e9d4 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   2e9d4:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2e9d6:	689b      	ldr	r3, [r3, #8]
   2e9d8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e9da:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   2e9de:	b118      	cbz	r0, 2e9e8 <uarte_nrfx_irq_tx_ready_complete+0x14>
    return (bool)(p_reg->INTENSET & mask);
   2e9e0:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   2e9e4:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   2e9e8:	4770      	bx	lr

0002e9ea <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   2e9ea:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2e9ec:	689b      	ldr	r3, [r3, #8]
   2e9ee:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e9f0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2e9f4:	3000      	adds	r0, #0
   2e9f6:	bf18      	it	ne
   2e9f8:	2001      	movne	r0, #1
   2e9fa:	4770      	bx	lr

0002e9fc <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   2e9fc:	2210      	movs	r2, #16
	return dev->config->config_info;
   2e9fe:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2ea00:	689b      	ldr	r3, [r3, #8]
   2ea02:	681b      	ldr	r3, [r3, #0]
   2ea04:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2ea08:	4770      	bx	lr

0002ea0a <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   2ea0a:	2210      	movs	r2, #16
	return dev->config->config_info;
   2ea0c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2ea0e:	689b      	ldr	r3, [r3, #8]
   2ea10:	681b      	ldr	r3, [r3, #0]
   2ea12:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2ea16:	4770      	bx	lr

0002ea18 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   2ea18:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   2ea1c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2ea1e:	689b      	ldr	r3, [r3, #8]
   2ea20:	681b      	ldr	r3, [r3, #0]
   2ea22:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2ea26:	4770      	bx	lr

0002ea28 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   2ea28:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   2ea2c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2ea2e:	689b      	ldr	r3, [r3, #8]
   2ea30:	681b      	ldr	r3, [r3, #0]
   2ea32:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2ea36:	4770      	bx	lr

0002ea38 <uarte_nrfx_irq_update>:
}
   2ea38:	2001      	movs	r0, #1
   2ea3a:	4770      	bx	lr

0002ea3c <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   2ea3c:	6883      	ldr	r3, [r0, #8]
   2ea3e:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   2ea40:	e9c3 1200 	strd	r1, r2, [r3]
}
   2ea44:	4770      	bx	lr

0002ea46 <uarte_nrfx_irq_is_pending>:
{
   2ea46:	b508      	push	{r3, lr}
	return dev->config->config_info;
   2ea48:	6803      	ldr	r3, [r0, #0]
{
   2ea4a:	4602      	mov	r2, r0
	return config->uarte_regs;
   2ea4c:	689b      	ldr	r3, [r3, #8]
   2ea4e:	6819      	ldr	r1, [r3, #0]
    return (bool)(p_reg->INTENSET & mask);
   2ea50:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   2ea54:	05db      	lsls	r3, r3, #23
   2ea56:	d405      	bmi.n	2ea64 <uarte_nrfx_irq_is_pending+0x1e>
   2ea58:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   2ea5c:	f010 0010 	ands.w	r0, r0, #16
   2ea60:	d106      	bne.n	2ea70 <uarte_nrfx_irq_is_pending+0x2a>
}
   2ea62:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   2ea64:	f7ff ffb6 	bl	2e9d4 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   2ea68:	2800      	cmp	r0, #0
   2ea6a:	d0f5      	beq.n	2ea58 <uarte_nrfx_irq_is_pending+0x12>
		||
   2ea6c:	2001      	movs	r0, #1
   2ea6e:	e7f8      	b.n	2ea62 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   2ea70:	4610      	mov	r0, r2
   2ea72:	f7ff ffba 	bl	2e9ea <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2ea76:	3000      	adds	r0, #0
   2ea78:	bf18      	it	ne
   2ea7a:	2001      	movne	r0, #1
   2ea7c:	e7f1      	b.n	2ea62 <uarte_nrfx_irq_is_pending+0x1c>

0002ea7e <parse_hex4>:
{
   2ea7e:	b510      	push	{r4, lr}
	if (*str >= '0' && *str <= '9')
   2ea80:	7802      	ldrb	r2, [r0, #0]
   2ea82:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   2ea86:	b2d9      	uxtb	r1, r3
   2ea88:	2909      	cmp	r1, #9
   2ea8a:	d905      	bls.n	2ea98 <parse_hex4+0x1a>
	else if (*str >= 'A' && *str <= 'F')
   2ea8c:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   2ea90:	2b05      	cmp	r3, #5
   2ea92:	d81a      	bhi.n	2eaca <parse_hex4+0x4c>
		h += 10 + (*str) - 'A';
   2ea94:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
	if (*str >= '0' && *str <= '9')
   2ea98:	7842      	ldrb	r2, [r0, #1]
	h = h << 4;
   2ea9a:	011b      	lsls	r3, r3, #4
	if (*str >= '0' && *str <= '9')
   2ea9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   2eaa0:	b2cc      	uxtb	r4, r1
   2eaa2:	2c09      	cmp	r4, #9
   2eaa4:	d818      	bhi.n	2ead8 <parse_hex4+0x5a>
		h += (*str) - '0';
   2eaa6:	440b      	add	r3, r1
	if (*str >= '0' && *str <= '9')
   2eaa8:	7882      	ldrb	r2, [r0, #2]
	h = h << 4;
   2eaaa:	011b      	lsls	r3, r3, #4
	if (*str >= '0' && *str <= '9')
   2eaac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   2eab0:	b2cc      	uxtb	r4, r1
   2eab2:	2c09      	cmp	r4, #9
   2eab4:	d81d      	bhi.n	2eaf2 <parse_hex4+0x74>
		h += (*str) - '0';
   2eab6:	440b      	add	r3, r1
	if (*str >= '0' && *str <= '9')
   2eab8:	78c0      	ldrb	r0, [r0, #3]
	h = h << 4;
   2eaba:	011b      	lsls	r3, r3, #4
	if (*str >= '0' && *str <= '9')
   2eabc:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   2eac0:	b2d1      	uxtb	r1, r2
   2eac2:	2909      	cmp	r1, #9
   2eac4:	d822      	bhi.n	2eb0c <parse_hex4+0x8e>
		h += (*str) - '0';
   2eac6:	18d0      	adds	r0, r2, r3
}
   2eac8:	bd10      	pop	{r4, pc}
	else if (*str >= 'a' && *str <= 'f')
   2eaca:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   2eace:	2b05      	cmp	r3, #5
   2ead0:	d829      	bhi.n	2eb26 <parse_hex4+0xa8>
		h += 10 + (*str) - 'a';
   2ead2:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
   2ead6:	e7df      	b.n	2ea98 <parse_hex4+0x1a>
	else if (*str >= 'A' && *str <= 'F')
   2ead8:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   2eadc:	2905      	cmp	r1, #5
   2eade:	d802      	bhi.n	2eae6 <parse_hex4+0x68>
		h += 10 + (*str) - 'A';
   2eae0:	3a37      	subs	r2, #55	; 0x37
		h += 10 + (*str) - 'a';
   2eae2:	4413      	add	r3, r2
   2eae4:	e7e0      	b.n	2eaa8 <parse_hex4+0x2a>
	else if (*str >= 'a' && *str <= 'f')
   2eae6:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   2eaea:	2905      	cmp	r1, #5
   2eaec:	d81b      	bhi.n	2eb26 <parse_hex4+0xa8>
		h += 10 + (*str) - 'a';
   2eaee:	3a57      	subs	r2, #87	; 0x57
   2eaf0:	e7f7      	b.n	2eae2 <parse_hex4+0x64>
	else if (*str >= 'A' && *str <= 'F')
   2eaf2:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   2eaf6:	2905      	cmp	r1, #5
   2eaf8:	d802      	bhi.n	2eb00 <parse_hex4+0x82>
		h += 10 + (*str) - 'A';
   2eafa:	3a37      	subs	r2, #55	; 0x37
		h += 10 + (*str) - 'a';
   2eafc:	4413      	add	r3, r2
   2eafe:	e7db      	b.n	2eab8 <parse_hex4+0x3a>
	else if (*str >= 'a' && *str <= 'f')
   2eb00:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   2eb04:	2905      	cmp	r1, #5
   2eb06:	d80e      	bhi.n	2eb26 <parse_hex4+0xa8>
		h += 10 + (*str) - 'a';
   2eb08:	3a57      	subs	r2, #87	; 0x57
   2eb0a:	e7f7      	b.n	2eafc <parse_hex4+0x7e>
	else if (*str >= 'A' && *str <= 'F')
   2eb0c:	f1a0 0241 	sub.w	r2, r0, #65	; 0x41
   2eb10:	2a05      	cmp	r2, #5
   2eb12:	d802      	bhi.n	2eb1a <parse_hex4+0x9c>
		h += 10 + (*str) - 'A';
   2eb14:	3837      	subs	r0, #55	; 0x37
		h += 10 + (*str) - 'a';
   2eb16:	4418      	add	r0, r3
   2eb18:	e7d6      	b.n	2eac8 <parse_hex4+0x4a>
	else if (*str >= 'a' && *str <= 'f')
   2eb1a:	f1a0 0261 	sub.w	r2, r0, #97	; 0x61
   2eb1e:	2a05      	cmp	r2, #5
   2eb20:	d801      	bhi.n	2eb26 <parse_hex4+0xa8>
		h += 10 + (*str) - 'a';
   2eb22:	3857      	subs	r0, #87	; 0x57
   2eb24:	e7f7      	b.n	2eb16 <parse_hex4+0x98>
		return 0;
   2eb26:	2000      	movs	r0, #0
   2eb28:	e7ce      	b.n	2eac8 <parse_hex4+0x4a>

0002eb2a <skip>:
{
   2eb2a:	4603      	mov	r3, r0
   2eb2c:	4618      	mov	r0, r3
	while (in && *in && (unsigned char)*in <= 32)
   2eb2e:	b123      	cbz	r3, 2eb3a <skip+0x10>
   2eb30:	7802      	ldrb	r2, [r0, #0]
   2eb32:	3301      	adds	r3, #1
   2eb34:	3a01      	subs	r2, #1
   2eb36:	2a1f      	cmp	r2, #31
   2eb38:	d9f8      	bls.n	2eb2c <skip+0x2>
}
   2eb3a:	4770      	bx	lr

0002eb3c <update>:
{
   2eb3c:	b510      	push	{r4, lr}
	if (!p || !p->buffer)
   2eb3e:	b130      	cbz	r0, 2eb4e <update+0x12>
   2eb40:	6803      	ldr	r3, [r0, #0]
   2eb42:	b12b      	cbz	r3, 2eb50 <update+0x14>
	str = p->buffer + p->offset;
   2eb44:	6884      	ldr	r4, [r0, #8]
	return p->offset + strlen(str);
   2eb46:	1918      	adds	r0, r3, r4
   2eb48:	f7fc f8b8 	bl	2acbc <strlen>
   2eb4c:	4420      	add	r0, r4
}
   2eb4e:	bd10      	pop	{r4, pc}
		return 0;
   2eb50:	4618      	mov	r0, r3
   2eb52:	e7fc      	b.n	2eb4e <update+0x12>

0002eb54 <cJSON_strcasecmp>:
{
   2eb54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!s1) {
   2eb58:	b920      	cbnz	r0, 2eb64 <cJSON_strcasecmp+0x10>
		return (s1 == s2) ? 0 : 1;
   2eb5a:	1c08      	adds	r0, r1, #0
   2eb5c:	bf18      	it	ne
   2eb5e:	2001      	movne	r0, #1
}
   2eb60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!s2) {
   2eb64:	2900      	cmp	r1, #0
   2eb66:	d037      	beq.n	2ebd8 <cJSON_strcasecmp+0x84>
   2eb68:	4689      	mov	r9, r1
   2eb6a:	1e47      	subs	r7, r0, #1
	for (; tolower(*(const unsigned char *)s1) ==
   2eb6c:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   2eb70:	f7fb fb46 	bl	2a200 <__locale_ctype_ptr>
   2eb74:	4430      	add	r0, r6
   2eb76:	7843      	ldrb	r3, [r0, #1]
   2eb78:	46c8      	mov	r8, r9
   2eb7a:	f003 0303 	and.w	r3, r3, #3
   2eb7e:	2b01      	cmp	r3, #1
   2eb80:	bf08      	it	eq
   2eb82:	3620      	addeq	r6, #32
	       tolower(*(const unsigned char *)s2);
   2eb84:	f819 5b01 	ldrb.w	r5, [r9], #1
   2eb88:	f7fb fb3a 	bl	2a200 <__locale_ctype_ptr>
   2eb8c:	462b      	mov	r3, r5
   2eb8e:	4428      	add	r0, r5
   2eb90:	7842      	ldrb	r2, [r0, #1]
   2eb92:	783c      	ldrb	r4, [r7, #0]
   2eb94:	f002 0203 	and.w	r2, r2, #3
   2eb98:	2a01      	cmp	r2, #1
   2eb9a:	bf08      	it	eq
   2eb9c:	3320      	addeq	r3, #32
	for (; tolower(*(const unsigned char *)s1) ==
   2eb9e:	429e      	cmp	r6, r3
   2eba0:	d016      	beq.n	2ebd0 <cJSON_strcasecmp+0x7c>
	return tolower(*(const unsigned char *)s1) -
   2eba2:	f7fb fb2d 	bl	2a200 <__locale_ctype_ptr>
   2eba6:	4420      	add	r0, r4
   2eba8:	7843      	ldrb	r3, [r0, #1]
	       tolower(*(const unsigned char *)s2);
   2ebaa:	f898 5000 	ldrb.w	r5, [r8]
	return tolower(*(const unsigned char *)s1) -
   2ebae:	f003 0303 	and.w	r3, r3, #3
   2ebb2:	2b01      	cmp	r3, #1
   2ebb4:	bf08      	it	eq
   2ebb6:	3420      	addeq	r4, #32
	       tolower(*(const unsigned char *)s2);
   2ebb8:	f7fb fb22 	bl	2a200 <__locale_ctype_ptr>
   2ebbc:	4629      	mov	r1, r5
   2ebbe:	4428      	add	r0, r5
   2ebc0:	7843      	ldrb	r3, [r0, #1]
   2ebc2:	f003 0303 	and.w	r3, r3, #3
   2ebc6:	2b01      	cmp	r3, #1
   2ebc8:	bf08      	it	eq
   2ebca:	3120      	addeq	r1, #32
	return tolower(*(const unsigned char *)s1) -
   2ebcc:	1a60      	subs	r0, r4, r1
   2ebce:	e7c7      	b.n	2eb60 <cJSON_strcasecmp+0xc>
		if (*s1 == 0) {
   2ebd0:	2c00      	cmp	r4, #0
   2ebd2:	d1cb      	bne.n	2eb6c <cJSON_strcasecmp+0x18>
			return 0;
   2ebd4:	4620      	mov	r0, r4
   2ebd6:	e7c3      	b.n	2eb60 <cJSON_strcasecmp+0xc>
		return 1;
   2ebd8:	2001      	movs	r0, #1
   2ebda:	e7c1      	b.n	2eb60 <cJSON_strcasecmp+0xc>

0002ebdc <cJSON_Parse>:
	return cJSON_ParseWithOpts(value, 0, 0);
   2ebdc:	2200      	movs	r2, #0
   2ebde:	4611      	mov	r1, r2
   2ebe0:	f7e7 b814 	b.w	15c0c <cJSON_ParseWithOpts>

0002ebe4 <cJSON_PrintUnformatted>:
char *cJSON_PrintUnformatted(cJSON *item) { return print_value(item, 0, 0, 0); }
   2ebe4:	2300      	movs	r3, #0
   2ebe6:	461a      	mov	r2, r3
   2ebe8:	4619      	mov	r1, r3
   2ebea:	f7e6 bd7f 	b.w	156ec <print_value>

0002ebee <cJSON_GetObjectItem>:
{
   2ebee:	b538      	push	{r3, r4, r5, lr}
   2ebf0:	460d      	mov	r5, r1
	cJSON *c = object->child;
   2ebf2:	6884      	ldr	r4, [r0, #8]
	while (c && cJSON_strcasecmp(c->string, string))
   2ebf4:	b124      	cbz	r4, 2ec00 <cJSON_GetObjectItem+0x12>
   2ebf6:	4629      	mov	r1, r5
   2ebf8:	6a20      	ldr	r0, [r4, #32]
   2ebfa:	f7ff ffab 	bl	2eb54 <cJSON_strcasecmp>
   2ebfe:	b908      	cbnz	r0, 2ec04 <cJSON_GetObjectItem+0x16>
}
   2ec00:	4620      	mov	r0, r4
   2ec02:	bd38      	pop	{r3, r4, r5, pc}
		c = c->next;
   2ec04:	6824      	ldr	r4, [r4, #0]
   2ec06:	e7f5      	b.n	2ebf4 <cJSON_GetObjectItem+0x6>

0002ec08 <cJSON_AddItemToArray>:
	if (!item)
   2ec08:	b149      	cbz	r1, 2ec1e <cJSON_AddItemToArray+0x16>
	cJSON *c = array->child;
   2ec0a:	6883      	ldr	r3, [r0, #8]
	if (!c) {
   2ec0c:	b913      	cbnz	r3, 2ec14 <cJSON_AddItemToArray+0xc>
		array->child = item;
   2ec0e:	6081      	str	r1, [r0, #8]
   2ec10:	4770      	bx	lr
   2ec12:	4613      	mov	r3, r2
		while (c && c->next)
   2ec14:	681a      	ldr	r2, [r3, #0]
   2ec16:	2a00      	cmp	r2, #0
   2ec18:	d1fb      	bne.n	2ec12 <cJSON_AddItemToArray+0xa>
	prev->next = item;
   2ec1a:	6019      	str	r1, [r3, #0]
	item->prev = prev;
   2ec1c:	604b      	str	r3, [r1, #4]
}
   2ec1e:	4770      	bx	lr

0002ec20 <cJSON_CreateNull>:
	}
}

/* Create basic types: */
cJSON *cJSON_CreateNull(void)
{
   2ec20:	b508      	push	{r3, lr}
	cJSON *item = cJSON_New_Item();
   2ec22:	f7e6 fa4d 	bl	150c0 <cJSON_New_Item>
	if (item)
   2ec26:	b108      	cbz	r0, 2ec2c <cJSON_CreateNull+0xc>
		item->type = cJSON_NULL;
   2ec28:	2302      	movs	r3, #2
   2ec2a:	60c3      	str	r3, [r0, #12]
	return item;
}
   2ec2c:	bd08      	pop	{r3, pc}

0002ec2e <cJSON_CreateNumber>:
	if (item)
		item->type = b ? cJSON_True : cJSON_False;
	return item;
}
cJSON *cJSON_CreateNumber(double num)
{
   2ec2e:	b513      	push	{r0, r1, r4, lr}
   2ec30:	ed8d 0b00 	vstr	d0, [sp]
	cJSON *item = cJSON_New_Item();
   2ec34:	f7e6 fa44 	bl	150c0 <cJSON_New_Item>
	if (item) {
   2ec38:	4604      	mov	r4, r0
   2ec3a:	b150      	cbz	r0, 2ec52 <cJSON_CreateNumber+0x24>
		item->type = cJSON_Number;
		item->valuedouble = num;
   2ec3c:	ed9d 0b00 	vldr	d0, [sp]
		item->type = cJSON_Number;
   2ec40:	2303      	movs	r3, #3
		item->valuedouble = num;
   2ec42:	ed80 0b06 	vstr	d0, [r0, #24]
		item->type = cJSON_Number;
   2ec46:	60c3      	str	r3, [r0, #12]
		item->valueint = (int)num;
   2ec48:	ec51 0b10 	vmov	r0, r1, d0
   2ec4c:	f7dd fed2 	bl	c9f4 <__aeabi_d2iz>
   2ec50:	6160      	str	r0, [r4, #20]
	}
	return item;
}
   2ec52:	4620      	mov	r0, r4
   2ec54:	b002      	add	sp, #8
   2ec56:	bd10      	pop	{r4, pc}

0002ec58 <cJSON_CreateString>:
cJSON *cJSON_CreateString(const char *string)
{
   2ec58:	b538      	push	{r3, r4, r5, lr}
   2ec5a:	4605      	mov	r5, r0
	cJSON *item = cJSON_New_Item();
   2ec5c:	f7e6 fa30 	bl	150c0 <cJSON_New_Item>
	if (item) {
   2ec60:	4604      	mov	r4, r0
   2ec62:	b128      	cbz	r0, 2ec70 <cJSON_CreateString+0x18>
		item->type = cJSON_String;
   2ec64:	2304      	movs	r3, #4
   2ec66:	60c3      	str	r3, [r0, #12]
		item->valuestring = cJSON_strdup(string);
   2ec68:	4628      	mov	r0, r5
   2ec6a:	f7e6 fb6b 	bl	15344 <cJSON_strdup>
   2ec6e:	6120      	str	r0, [r4, #16]
	}
	return item;
}
   2ec70:	4620      	mov	r0, r4
   2ec72:	bd38      	pop	{r3, r4, r5, pc}

0002ec74 <cJSON_CreateArray>:
cJSON *cJSON_CreateArray(void)
{
   2ec74:	b508      	push	{r3, lr}
	cJSON *item = cJSON_New_Item();
   2ec76:	f7e6 fa23 	bl	150c0 <cJSON_New_Item>
	if (item)
   2ec7a:	b108      	cbz	r0, 2ec80 <cJSON_CreateArray+0xc>
		item->type = cJSON_Array;
   2ec7c:	2305      	movs	r3, #5
   2ec7e:	60c3      	str	r3, [r0, #12]
	return item;
}
   2ec80:	bd08      	pop	{r3, pc}

0002ec82 <cJSON_CreateObject>:
cJSON *cJSON_CreateObject(void)
{
   2ec82:	b508      	push	{r3, lr}
	cJSON *item = cJSON_New_Item();
   2ec84:	f7e6 fa1c 	bl	150c0 <cJSON_New_Item>
	if (item)
   2ec88:	b108      	cbz	r0, 2ec8e <cJSON_CreateObject+0xc>
		item->type = cJSON_Object;
   2ec8a:	2306      	movs	r3, #6
   2ec8c:	60c3      	str	r3, [r0, #12]
	return item;
}
   2ec8e:	bd08      	pop	{r3, pc}

0002ec90 <cJSON_CreateIntArray>:

/* Create Arrays: */
cJSON *cJSON_CreateIntArray(const int *numbers, int count)
{
   2ec90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ec94:	4680      	mov	r8, r0
   2ec96:	460f      	mov	r7, r1
	int i;
	cJSON *n = 0, *p = 0, *a = cJSON_CreateArray();
   2ec98:	2500      	movs	r5, #0
   2ec9a:	f7ff ffeb 	bl	2ec74 <cJSON_CreateArray>
	for (i = 0; a && i < count; i++) {
   2ec9e:	462c      	mov	r4, r5
	cJSON *n = 0, *p = 0, *a = cJSON_CreateArray();
   2eca0:	4606      	mov	r6, r0
	for (i = 0; a && i < count; i++) {
   2eca2:	b10e      	cbz	r6, 2eca8 <cJSON_CreateIntArray+0x18>
   2eca4:	42bc      	cmp	r4, r7
   2eca6:	db02      	blt.n	2ecae <cJSON_CreateIntArray+0x1e>
		else
			suffix_object(p, n);
		p = n;
	}
	return a;
}
   2eca8:	4630      	mov	r0, r6
   2ecaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		n = cJSON_CreateNumber(numbers[i]);
   2ecae:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
   2ecb2:	f7dd fb9b 	bl	c3ec <__aeabi_i2d>
   2ecb6:	ec41 0b10 	vmov	d0, r0, r1
   2ecba:	f7ff ffb8 	bl	2ec2e <cJSON_CreateNumber>
		if (!i)
   2ecbe:	b91c      	cbnz	r4, 2ecc8 <cJSON_CreateIntArray+0x38>
			a->child = n;
   2ecc0:	60b0      	str	r0, [r6, #8]
	for (i = 0; a && i < count; i++) {
   2ecc2:	3401      	adds	r4, #1
		n = cJSON_CreateNumber(numbers[i]);
   2ecc4:	4605      	mov	r5, r0
   2ecc6:	e7ec      	b.n	2eca2 <cJSON_CreateIntArray+0x12>
	prev->next = item;
   2ecc8:	6028      	str	r0, [r5, #0]
	item->prev = prev;
   2ecca:	6045      	str	r5, [r0, #4]
   2eccc:	e7f9      	b.n	2ecc2 <cJSON_CreateIntArray+0x32>

0002ecce <free_fn_hook>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   2ecce:	f001 bd9c 	b.w	3080a <k_free>

0002ecd2 <malloc_fn_hook>:
static void *malloc_fn_hook(size_t sz) { return k_malloc(sz); }
   2ecd2:	f7f8 b8d1 	b.w	26e78 <k_malloc>

0002ecd6 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable here, that is done through bsd_init.
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   2ecd6:	2200      	movs	r2, #0
{
   2ecd8:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   2ecda:	4611      	mov	r1, r2
   2ecdc:	202a      	movs	r0, #42	; 0x2a
   2ecde:	f7e5 f80b 	bl	13cf8 <z_irq_priority_set>
			   ipc_proxy_irq_handler, 0);
	bsd_init();
   2ece2:	f7f2 f9d7 	bl	21094 <bsd_init>

	return 0;
}
   2ece6:	2000      	movs	r0, #0
   2ece8:	bd08      	pop	{r3, pc}

0002ecea <bsdlib_shutdown>:
{
	return _bsdlib_init(NULL);
}

int bsdlib_shutdown(void)
{
   2ecea:	b508      	push	{r3, lr}
	bsd_shutdown();
   2ecec:	f7f2 f9e8 	bl	210c0 <bsd_shutdown>

	return 0;
}
   2ecf0:	2000      	movs	r0, #0
   2ecf2:	bd08      	pop	{r3, pc}

0002ecf4 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   2ecf4:	4668      	mov	r0, sp
   2ecf6:	f020 0107 	bic.w	r1, r0, #7
   2ecfa:	468d      	mov	sp, r1
   2ecfc:	b501      	push	{r0, lr}
   2ecfe:	f7ff fccd 	bl	2e69c <z_arch_isr_direct_header>
	bsd_os_trace_irq_handler();
   2ed02:	f7f2 fbeb 	bl	214dc <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2ed06:	f7e5 f829 	bl	13d5c <_arch_isr_direct_pm>
   2ed0a:	f7e4 fd69 	bl	137e0 <_IntExit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   2ed0e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2ed12:	4685      	mov	sp, r0
   2ed14:	4770      	bx	lr

0002ed16 <bsd_os_errno_set>:
	switch (err_code) {
   2ed16:	282f      	cmp	r0, #47	; 0x2f
{
   2ed18:	b510      	push	{r4, lr}
   2ed1a:	4604      	mov	r4, r0
	switch (err_code) {
   2ed1c:	d072      	beq.n	2ee04 <bsd_os_errno_set+0xee>
   2ed1e:	dc27      	bgt.n	2ed70 <bsd_os_errno_set+0x5a>
   2ed20:	2816      	cmp	r0, #22
   2ed22:	d009      	beq.n	2ed38 <bsd_os_errno_set+0x22>
   2ed24:	dc12      	bgt.n	2ed4c <bsd_os_errno_set+0x36>
   2ed26:	2809      	cmp	r0, #9
   2ed28:	d006      	beq.n	2ed38 <bsd_os_errno_set+0x22>
   2ed2a:	dc09      	bgt.n	2ed40 <bsd_os_errno_set+0x2a>
   2ed2c:	2802      	cmp	r0, #2
   2ed2e:	d003      	beq.n	2ed38 <bsd_os_errno_set+0x22>
   2ed30:	2805      	cmp	r0, #5
   2ed32:	d001      	beq.n	2ed38 <bsd_os_errno_set+0x22>
   2ed34:	2801      	cmp	r0, #1
   2ed36:	d117      	bne.n	2ed68 <bsd_os_errno_set+0x52>
		errno = ENOBUFS;
   2ed38:	f7ff fd07 	bl	2e74a <__errno>
   2ed3c:	6004      	str	r4, [r0, #0]
}
   2ed3e:	bd10      	pop	{r4, pc}
	switch (err_code) {
   2ed40:	280d      	cmp	r0, #13
   2ed42:	d0f9      	beq.n	2ed38 <bsd_os_errno_set+0x22>
   2ed44:	280e      	cmp	r0, #14
   2ed46:	d0f7      	beq.n	2ed38 <bsd_os_errno_set+0x22>
   2ed48:	280c      	cmp	r0, #12
   2ed4a:	e7f4      	b.n	2ed36 <bsd_os_errno_set+0x20>
   2ed4c:	282a      	cmp	r0, #42	; 0x2a
   2ed4e:	d049      	beq.n	2ede4 <bsd_os_errno_set+0xce>
   2ed50:	dc05      	bgt.n	2ed5e <bsd_os_errno_set+0x48>
   2ed52:	2823      	cmp	r0, #35	; 0x23
   2ed54:	d03d      	beq.n	2edd2 <bsd_os_errno_set+0xbc>
   2ed56:	2829      	cmp	r0, #41	; 0x29
   2ed58:	d040      	beq.n	2eddc <bsd_os_errno_set+0xc6>
   2ed5a:	2818      	cmp	r0, #24
   2ed5c:	e7eb      	b.n	2ed36 <bsd_os_errno_set+0x20>
   2ed5e:	282c      	cmp	r0, #44	; 0x2c
   2ed60:	d048      	beq.n	2edf4 <bsd_os_errno_set+0xde>
   2ed62:	db43      	blt.n	2edec <bsd_os_errno_set+0xd6>
   2ed64:	282d      	cmp	r0, #45	; 0x2d
   2ed66:	d049      	beq.n	2edfc <bsd_os_errno_set+0xe6>
		errno = EINVAL;
   2ed68:	f7ff fcef 	bl	2e74a <__errno>
   2ed6c:	2316      	movs	r3, #22
   2ed6e:	e033      	b.n	2edd8 <bsd_os_errno_set+0xc2>
	switch (err_code) {
   2ed70:	2869      	cmp	r0, #105	; 0x69
   2ed72:	d0e1      	beq.n	2ed38 <bsd_os_errno_set+0x22>
   2ed74:	dc16      	bgt.n	2eda4 <bsd_os_errno_set+0x8e>
   2ed76:	2836      	cmp	r0, #54	; 0x36
   2ed78:	d050      	beq.n	2ee1c <bsd_os_errno_set+0x106>
   2ed7a:	dc09      	bgt.n	2ed90 <bsd_os_errno_set+0x7a>
   2ed7c:	2832      	cmp	r0, #50	; 0x32
   2ed7e:	d045      	beq.n	2ee0c <bsd_os_errno_set+0xf6>
   2ed80:	2833      	cmp	r0, #51	; 0x33
   2ed82:	d047      	beq.n	2ee14 <bsd_os_errno_set+0xfe>
   2ed84:	2830      	cmp	r0, #48	; 0x30
   2ed86:	d1ef      	bne.n	2ed68 <bsd_os_errno_set+0x52>
		errno = EADDRINUSE;
   2ed88:	f7ff fcdf 	bl	2e74a <__errno>
   2ed8c:	2370      	movs	r3, #112	; 0x70
   2ed8e:	e023      	b.n	2edd8 <bsd_os_errno_set+0xc2>
	switch (err_code) {
   2ed90:	2839      	cmp	r0, #57	; 0x39
   2ed92:	d047      	beq.n	2ee24 <bsd_os_errno_set+0x10e>
   2ed94:	283c      	cmp	r0, #60	; 0x3c
   2ed96:	d049      	beq.n	2ee2c <bsd_os_errno_set+0x116>
   2ed98:	2838      	cmp	r0, #56	; 0x38
   2ed9a:	d1e5      	bne.n	2ed68 <bsd_os_errno_set+0x52>
		errno = EISCONN;
   2ed9c:	f7ff fcd5 	bl	2e74a <__errno>
   2eda0:	237f      	movs	r3, #127	; 0x7f
   2eda2:	e019      	b.n	2edd8 <bsd_os_errno_set+0xc2>
	switch (err_code) {
   2eda4:	287e      	cmp	r0, #126	; 0x7e
   2eda6:	d04d      	beq.n	2ee44 <bsd_os_errno_set+0x12e>
   2eda8:	dc09      	bgt.n	2edbe <bsd_os_errno_set+0xa8>
   2edaa:	2873      	cmp	r0, #115	; 0x73
   2edac:	d042      	beq.n	2ee34 <bsd_os_errno_set+0x11e>
   2edae:	287d      	cmp	r0, #125	; 0x7d
   2edb0:	d044      	beq.n	2ee3c <bsd_os_errno_set+0x126>
   2edb2:	2870      	cmp	r0, #112	; 0x70
   2edb4:	d1d8      	bne.n	2ed68 <bsd_os_errno_set+0x52>
		errno = EHOSTDOWN;
   2edb6:	f7ff fcc8 	bl	2e74a <__errno>
   2edba:	2375      	movs	r3, #117	; 0x75
   2edbc:	e00c      	b.n	2edd8 <bsd_os_errno_set+0xc2>
	switch (err_code) {
   2edbe:	2880      	cmp	r0, #128	; 0x80
   2edc0:	d04a      	beq.n	2ee58 <bsd_os_errno_set+0x142>
   2edc2:	db44      	blt.n	2ee4e <bsd_os_errno_set+0x138>
   2edc4:	2881      	cmp	r0, #129	; 0x81
   2edc6:	d1cf      	bne.n	2ed68 <bsd_os_errno_set+0x52>
		errno = EKEYREJECTED;
   2edc8:	f7ff fcbf 	bl	2e74a <__errno>
   2edcc:	f240 73d4 	movw	r3, #2004	; 0x7d4
   2edd0:	e002      	b.n	2edd8 <bsd_os_errno_set+0xc2>
		errno = EAGAIN;
   2edd2:	f7ff fcba 	bl	2e74a <__errno>
   2edd6:	230b      	movs	r3, #11
		errno = EINVAL;
   2edd8:	6003      	str	r3, [r0, #0]
}
   2edda:	e7b0      	b.n	2ed3e <bsd_os_errno_set+0x28>
		errno = EPROTOTYPE;
   2eddc:	f7ff fcb5 	bl	2e74a <__errno>
   2ede0:	236b      	movs	r3, #107	; 0x6b
   2ede2:	e7f9      	b.n	2edd8 <bsd_os_errno_set+0xc2>
		errno = ENOPROTOOPT;
   2ede4:	f7ff fcb1 	bl	2e74a <__errno>
   2ede8:	236d      	movs	r3, #109	; 0x6d
   2edea:	e7f5      	b.n	2edd8 <bsd_os_errno_set+0xc2>
		errno = EPROTONOSUPPORT;
   2edec:	f7ff fcad 	bl	2e74a <__errno>
   2edf0:	237b      	movs	r3, #123	; 0x7b
   2edf2:	e7f1      	b.n	2edd8 <bsd_os_errno_set+0xc2>
		errno = ESOCKTNOSUPPORT;
   2edf4:	f7ff fca9 	bl	2e74a <__errno>
   2edf8:	237c      	movs	r3, #124	; 0x7c
   2edfa:	e7ed      	b.n	2edd8 <bsd_os_errno_set+0xc2>
		errno = EOPNOTSUPP;
   2edfc:	f7ff fca5 	bl	2e74a <__errno>
   2ee00:	235f      	movs	r3, #95	; 0x5f
   2ee02:	e7e9      	b.n	2edd8 <bsd_os_errno_set+0xc2>
		errno = EAFNOSUPPORT;
   2ee04:	f7ff fca1 	bl	2e74a <__errno>
   2ee08:	236a      	movs	r3, #106	; 0x6a
   2ee0a:	e7e5      	b.n	2edd8 <bsd_os_errno_set+0xc2>
		errno = ENETDOWN;
   2ee0c:	f7ff fc9d 	bl	2e74a <__errno>
   2ee10:	2373      	movs	r3, #115	; 0x73
   2ee12:	e7e1      	b.n	2edd8 <bsd_os_errno_set+0xc2>
		errno = ENETUNREACH;
   2ee14:	f7ff fc99 	bl	2e74a <__errno>
   2ee18:	2372      	movs	r3, #114	; 0x72
   2ee1a:	e7dd      	b.n	2edd8 <bsd_os_errno_set+0xc2>
		errno = ECONNRESET;
   2ee1c:	f7ff fc95 	bl	2e74a <__errno>
   2ee20:	2368      	movs	r3, #104	; 0x68
   2ee22:	e7d9      	b.n	2edd8 <bsd_os_errno_set+0xc2>
		errno = ENOTCONN;
   2ee24:	f7ff fc91 	bl	2e74a <__errno>
   2ee28:	2380      	movs	r3, #128	; 0x80
   2ee2a:	e7d5      	b.n	2edd8 <bsd_os_errno_set+0xc2>
		errno = ETIMEDOUT;
   2ee2c:	f7ff fc8d 	bl	2e74a <__errno>
   2ee30:	2374      	movs	r3, #116	; 0x74
   2ee32:	e7d1      	b.n	2edd8 <bsd_os_errno_set+0xc2>
		errno = EINPROGRESS;
   2ee34:	f7ff fc89 	bl	2e74a <__errno>
   2ee38:	2377      	movs	r3, #119	; 0x77
   2ee3a:	e7cd      	b.n	2edd8 <bsd_os_errno_set+0xc2>
		errno = ECANCELED;
   2ee3c:	f7ff fc85 	bl	2e74a <__errno>
   2ee40:	238c      	movs	r3, #140	; 0x8c
   2ee42:	e7c9      	b.n	2edd8 <bsd_os_errno_set+0xc2>
		errno = ENOKEY;
   2ee44:	f7ff fc81 	bl	2e74a <__errno>
   2ee48:	f240 73d1 	movw	r3, #2001	; 0x7d1
   2ee4c:	e7c4      	b.n	2edd8 <bsd_os_errno_set+0xc2>
		errno = EKEYEXPIRED;
   2ee4e:	f7ff fc7c 	bl	2e74a <__errno>
   2ee52:	f240 73d2 	movw	r3, #2002	; 0x7d2
   2ee56:	e7bf      	b.n	2edd8 <bsd_os_errno_set+0xc2>
		errno = EKEYREVOKED;
   2ee58:	f7ff fc77 	bl	2e74a <__errno>
   2ee5c:	f240 73d3 	movw	r3, #2003	; 0x7d3
   2ee60:	e7ba      	b.n	2edd8 <bsd_os_errno_set+0xc2>

0002ee62 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   2ee62:	4668      	mov	r0, sp
   2ee64:	f020 0107 	bic.w	r1, r0, #7
   2ee68:	468d      	mov	sp, r1
   2ee6a:	b501      	push	{r0, lr}
   2ee6c:	f7ff fc16 	bl	2e69c <z_arch_isr_direct_header>
	IPC_IRQHandler();
   2ee70:	f7f2 ff38 	bl	21ce4 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2ee74:	f7e4 ff72 	bl	13d5c <_arch_isr_direct_pm>
   2ee78:	f7e4 fcb2 	bl	137e0 <_IntExit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   2ee7c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2ee80:	4685      	mov	sp, r0
   2ee82:	4770      	bx	lr

0002ee84 <trace_task_create>:
{
   2ee84:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   2ee86:	201d      	movs	r0, #29
   2ee88:	2200      	movs	r2, #0
   2ee8a:	2106      	movs	r1, #6
   2ee8c:	f7e4 ff34 	bl	13cf8 <z_irq_priority_set>
}
   2ee90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   2ee94:	201d      	movs	r0, #29
   2ee96:	f7e4 bf0b 	b.w	13cb0 <z_arch_irq_enable>

0002ee9a <read_task_create>:
{
   2ee9a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   2ee9c:	201c      	movs	r0, #28
   2ee9e:	2200      	movs	r2, #0
   2eea0:	2106      	movs	r1, #6
   2eea2:	f7e4 ff29 	bl	13cf8 <z_irq_priority_set>
}
   2eea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   2eeaa:	201c      	movs	r0, #28
   2eeac:	f7e4 bf00 	b.w	13cb0 <z_arch_irq_enable>

0002eeb0 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   2eeb0:	2000      	movs	r0, #0
   2eeb2:	4770      	bx	lr

0002eeb4 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   2eeb4:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   2eeb8:	bf18      	it	ne
   2eeba:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   2eebc:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   2eebe:	bf48      	it	mi
   2eec0:	f043 0308 	orrmi.w	r3, r3, #8
}
   2eec4:	4618      	mov	r0, r3
   2eec6:	4770      	bx	lr

0002eec8 <z_to_nrf_protocol>:
	switch (proto) {
   2eec8:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2eecc:	d017      	beq.n	2eefe <z_to_nrf_protocol+0x36>
   2eece:	dc05      	bgt.n	2eedc <z_to_nrf_protocol+0x14>
   2eed0:	2806      	cmp	r0, #6
   2eed2:	d01a      	beq.n	2ef0a <z_to_nrf_protocol+0x42>
   2eed4:	2811      	cmp	r0, #17
   2eed6:	d010      	beq.n	2eefa <z_to_nrf_protocol+0x32>
   2eed8:	b9a0      	cbnz	r0, 2ef04 <z_to_nrf_protocol+0x3c>
   2eeda:	4770      	bx	lr
   2eedc:	f240 2301 	movw	r3, #513	; 0x201
   2eee0:	4298      	cmp	r0, r3
   2eee2:	d013      	beq.n	2ef0c <z_to_nrf_protocol+0x44>
   2eee4:	f240 2302 	movw	r3, #514	; 0x202
   2eee8:	4298      	cmp	r0, r3
   2eeea:	d00f      	beq.n	2ef0c <z_to_nrf_protocol+0x44>
   2eeec:	f240 1311 	movw	r3, #273	; 0x111
   2eef0:	4298      	cmp	r0, r3
   2eef2:	d107      	bne.n	2ef04 <z_to_nrf_protocol+0x3c>
		return NRF_SPROTO_DTLS1v2;
   2eef4:	f44f 7087 	mov.w	r0, #270	; 0x10e
   2eef8:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   2eefa:	2002      	movs	r0, #2
   2eefc:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   2eefe:	f44f 7082 	mov.w	r0, #260	; 0x104
   2ef02:	4770      	bx	lr
		return -EPROTONOSUPPORT;
   2ef04:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   2ef08:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   2ef0a:	2001      	movs	r0, #1
}
   2ef0c:	4770      	bx	lr

0002ef0e <nrf91_bsdlib_socket_offload_init>:
}
   2ef0e:	2000      	movs	r0, #0
   2ef10:	4770      	bx	lr

0002ef12 <nrf91_socket_offload_freeaddrinfo>:
{
   2ef12:	b538      	push	{r3, r4, r5, lr}
   2ef14:	4604      	mov	r4, r0
	while (next != NULL) {
   2ef16:	b904      	cbnz	r4, 2ef1a <nrf91_socket_offload_freeaddrinfo+0x8>
}
   2ef18:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   2ef1a:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   2ef1c:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   2ef1e:	f001 fc74 	bl	3080a <k_free>
		k_free(this);
   2ef22:	4620      	mov	r0, r4
   2ef24:	f001 fc71 	bl	3080a <k_free>
		next = next->ai_next;
   2ef28:	462c      	mov	r4, r5
   2ef2a:	e7f4      	b.n	2ef16 <nrf91_socket_offload_freeaddrinfo+0x4>

0002ef2c <z_to_nrf_addrinfo_hints>:
{
   2ef2c:	b538      	push	{r3, r4, r5, lr}
   2ef2e:	460c      	mov	r4, r1
   2ef30:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   2ef32:	221c      	movs	r2, #28
   2ef34:	2100      	movs	r1, #0
   2ef36:	1d20      	adds	r0, r4, #4
   2ef38:	f7fb fcd4 	bl	2a8e4 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   2ef3c:	2300      	movs	r3, #0
   2ef3e:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   2ef40:	68ab      	ldr	r3, [r5, #8]
		return NRF_SOCK_MGMT;
   2ef42:	2b04      	cmp	r3, #4
   2ef44:	bf08      	it	eq
   2ef46:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   2ef4a:	60a3      	str	r3, [r4, #8]
	switch (z_family) {
   2ef4c:	88ab      	ldrh	r3, [r5, #4]
   2ef4e:	2b02      	cmp	r3, #2
   2ef50:	d005      	beq.n	2ef5e <z_to_nrf_addrinfo_hints+0x32>
   2ef52:	2b66      	cmp	r3, #102	; 0x66
   2ef54:	d004      	beq.n	2ef60 <z_to_nrf_addrinfo_hints+0x34>
   2ef56:	2b01      	cmp	r3, #1
   2ef58:	d10f      	bne.n	2ef7a <z_to_nrf_addrinfo_hints+0x4e>
		return NRF_AF_INET;
   2ef5a:	2302      	movs	r3, #2
   2ef5c:	e000      	b.n	2ef60 <z_to_nrf_addrinfo_hints+0x34>
		return NRF_AF_INET6;
   2ef5e:	230a      	movs	r3, #10
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2ef60:	68e8      	ldr	r0, [r5, #12]
	nrf_out->ai_family = family;
   2ef62:	6063      	str	r3, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2ef64:	f7ff ffb0 	bl	2eec8 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2ef68:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2ef6c:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2ef6e:	d003      	beq.n	2ef78 <z_to_nrf_addrinfo_hints+0x4c>
	if (z_in->ai_canonname != NULL) {
   2ef70:	69a8      	ldr	r0, [r5, #24]
   2ef72:	b108      	cbz	r0, 2ef78 <z_to_nrf_addrinfo_hints+0x4c>
		nrf_out->ai_canonname = z_in->ai_canonname;
   2ef74:	61a0      	str	r0, [r4, #24]
	return 0;
   2ef76:	2000      	movs	r0, #0
}
   2ef78:	bd38      	pop	{r3, r4, r5, pc}
		return -EAFNOSUPPORT;
   2ef7a:	f06f 0069 	mvn.w	r0, #105	; 0x69
   2ef7e:	e7fb      	b.n	2ef78 <z_to_nrf_addrinfo_hints+0x4c>

0002ef80 <nrf91_socket_offload_send>:
{
   2ef80:	b570      	push	{r4, r5, r6, lr}
   2ef82:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   2ef84:	4618      	mov	r0, r3
{
   2ef86:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   2ef88:	f7ff ff94 	bl	2eeb4 <z_to_nrf_flags>
   2ef8c:	462a      	mov	r2, r5
   2ef8e:	4603      	mov	r3, r0
   2ef90:	4620      	mov	r0, r4
}
   2ef92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   2ef96:	f7f7 bb09 	b.w	265ac <nrf_send>

0002ef9a <nrf91_socket_offload_recv>:
{
   2ef9a:	b570      	push	{r4, r5, r6, lr}
   2ef9c:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   2ef9e:	4618      	mov	r0, r3
{
   2efa0:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   2efa2:	f7ff ff87 	bl	2eeb4 <z_to_nrf_flags>
   2efa6:	462a      	mov	r2, r5
   2efa8:	4603      	mov	r3, r0
   2efaa:	4620      	mov	r0, r4
}
   2efac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   2efb0:	f7f7 bb48 	b.w	26644 <nrf_recv>

0002efb4 <nrf91_socket_offload_poll>:
{
   2efb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2efb6:	b091      	sub	sp, #68	; 0x44
   2efb8:	4605      	mov	r5, r0
   2efba:	460c      	mov	r4, r1
   2efbc:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   2efbe:	2100      	movs	r1, #0
   2efc0:	2240      	movs	r2, #64	; 0x40
   2efc2:	4668      	mov	r0, sp
   2efc4:	f7fb fc8e 	bl	2a8e4 <memset>
	for (int i = 0; i < nfds; i++) {
   2efc8:	2204      	movs	r2, #4
   2efca:	2100      	movs	r1, #0
   2efcc:	42a1      	cmp	r1, r4
   2efce:	db0c      	blt.n	2efea <nrf91_socket_offload_poll+0x36>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   2efd0:	4632      	mov	r2, r6
   2efd2:	4621      	mov	r1, r4
   2efd4:	4668      	mov	r0, sp
   2efd6:	f7f7 fbeb 	bl	267b0 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   2efda:	2200      	movs	r2, #0
   2efdc:	462b      	mov	r3, r5
		fds[i].revents = 0;
   2efde:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   2efe0:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   2efe2:	42a2      	cmp	r2, r4
   2efe4:	db1b      	blt.n	2f01e <nrf91_socket_offload_poll+0x6a>
}
   2efe6:	b011      	add	sp, #68	; 0x44
   2efe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   2efea:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   2efee:	5aa8      	ldrh	r0, [r5, r2]
		tmp[i].handle = fds[i].fd;
   2eff0:	f84d 3031 	str.w	r3, [sp, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   2eff4:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   2eff6:	bf48      	it	mi
   2eff8:	f83d 3002 	ldrhmi.w	r3, [sp, r2]
	for (int i = 0; i < nfds; i++) {
   2effc:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   2f000:	bf44      	itt	mi
   2f002:	f043 0301 	orrmi.w	r3, r3, #1
   2f006:	f82d 3002 	strhmi.w	r3, [sp, r2]
		if (fds[i].events & POLLOUT) {
   2f00a:	0747      	lsls	r7, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   2f00c:	bf42      	ittt	mi
   2f00e:	f83d 3002 	ldrhmi.w	r3, [sp, r2]
   2f012:	f043 0302 	orrmi.w	r3, r3, #2
   2f016:	f82d 3002 	strhmi.w	r3, [sp, r2]
   2f01a:	3208      	adds	r2, #8
   2f01c:	e7d6      	b.n	2efcc <nrf91_socket_offload_poll+0x18>
		if (tmp[i].returned & NRF_POLLIN) {
   2f01e:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   2f022:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   2f024:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   2f026:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   2f028:	bf48      	it	mi
   2f02a:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   2f02c:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   2f02e:	bf48      	it	mi
   2f030:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   2f032:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   2f036:	bf44      	itt	mi
   2f038:	f045 0504 	orrmi.w	r5, r5, #4
   2f03c:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   2f03e:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   2f040:	bf48      	it	mi
   2f042:	88dd      	ldrhmi	r5, [r3, #6]
   2f044:	f103 0308 	add.w	r3, r3, #8
   2f048:	bf44      	itt	mi
   2f04a:	f045 0508 	orrmi.w	r5, r5, #8
   2f04e:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   2f052:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   2f054:	bf42      	ittt	mi
   2f056:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   2f05a:	f045 0520 	orrmi.w	r5, r5, #32
   2f05e:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   2f062:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   2f064:	bf42      	ittt	mi
   2f066:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   2f06a:	f041 0110 	orrmi.w	r1, r1, #16
   2f06e:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   2f072:	e7b6      	b.n	2efe2 <nrf91_socket_offload_poll+0x2e>

0002f074 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   2f074:	f7f7 bb28 	b.w	266c8 <nrf_listen>

0002f078 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   2f078:	f7f7 ba6e 	b.w	26558 <nrf_close>

0002f07c <nrf91_socket_offload_getsockopt>:
{
   2f07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f080:	461c      	mov	r4, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   2f082:	2300      	movs	r3, #0
{
   2f084:	b086      	sub	sp, #24
   2f086:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   2f08a:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2f08e:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   2f092:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   2f096:	4607      	mov	r7, r0
   2f098:	460d      	mov	r5, r1
   2f09a:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2f09c:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   2f09e:	d005      	beq.n	2f0ac <nrf91_socket_offload_getsockopt+0x30>
   2f0a0:	f240 2302 	movw	r3, #514	; 0x202
   2f0a4:	4299      	cmp	r1, r3
   2f0a6:	d001      	beq.n	2f0ac <nrf91_socket_offload_getsockopt+0x30>
   2f0a8:	2901      	cmp	r1, #1
   2f0aa:	d135      	bne.n	2f118 <nrf91_socket_offload_getsockopt+0x9c>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2f0ac:	aa02      	add	r2, sp, #8
   2f0ae:	4631      	mov	r1, r6
   2f0b0:	4628      	mov	r0, r5
   2f0b2:	f7e6 ff23 	bl	15efc <z_to_nrf_optname>
   2f0b6:	2800      	cmp	r0, #0
   2f0b8:	db2e      	blt.n	2f118 <nrf91_socket_offload_getsockopt+0x9c>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   2f0ba:	2d01      	cmp	r5, #1
   2f0bc:	d120      	bne.n	2f100 <nrf91_socket_offload_getsockopt+0x84>
   2f0be:	2e14      	cmp	r6, #20
   2f0c0:	d11e      	bne.n	2f100 <nrf91_socket_offload_getsockopt+0x84>
		nrf_optlen = sizeof(struct nrf_timeval);
   2f0c2:	2308      	movs	r3, #8
   2f0c4:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   2f0c6:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2f0c8:	aa03      	add	r2, sp, #12
   2f0ca:	9200      	str	r2, [sp, #0]
   2f0cc:	4638      	mov	r0, r7
   2f0ce:	9a02      	ldr	r2, [sp, #8]
   2f0d0:	4629      	mov	r1, r5
   2f0d2:	f7f7 fb4d 	bl	26770 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   2f0d6:	4607      	mov	r7, r0
   2f0d8:	b970      	cbnz	r0, 2f0f8 <nrf91_socket_offload_getsockopt+0x7c>
   2f0da:	b16c      	cbz	r4, 2f0f8 <nrf91_socket_offload_getsockopt+0x7c>
		*optlen = nrf_optlen;
   2f0dc:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   2f0de:	2d01      	cmp	r5, #1
		*optlen = nrf_optlen;
   2f0e0:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   2f0e4:	d108      	bne.n	2f0f8 <nrf91_socket_offload_getsockopt+0x7c>
			if (optname == SO_ERROR) {
   2f0e6:	2e04      	cmp	r6, #4
   2f0e8:	d10c      	bne.n	2f104 <nrf91_socket_offload_getsockopt+0x88>
				bsd_os_errno_set(*(int *)optval);
   2f0ea:	6820      	ldr	r0, [r4, #0]
   2f0ec:	f7ff fe13 	bl	2ed16 <bsd_os_errno_set>
				*(int *)optval = errno;
   2f0f0:	f7ff fb2b 	bl	2e74a <__errno>
   2f0f4:	6803      	ldr	r3, [r0, #0]
   2f0f6:	6023      	str	r3, [r4, #0]
}
   2f0f8:	4638      	mov	r0, r7
   2f0fa:	b006      	add	sp, #24
   2f0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f100:	4623      	mov	r3, r4
   2f102:	e7e1      	b.n	2f0c8 <nrf91_socket_offload_getsockopt+0x4c>
			} else if (optname == SO_RCVTIMEO) {
   2f104:	2e14      	cmp	r6, #20
   2f106:	d1f7      	bne.n	2f0f8 <nrf91_socket_offload_getsockopt+0x7c>
				((struct timeval *)optval)->tv_sec =
   2f108:	9b04      	ldr	r3, [sp, #16]
   2f10a:	6023      	str	r3, [r4, #0]
				((struct timeval *)optval)->tv_usec =
   2f10c:	9b05      	ldr	r3, [sp, #20]
   2f10e:	6063      	str	r3, [r4, #4]
				*optlen = sizeof(struct timeval);
   2f110:	2308      	movs	r3, #8
   2f112:	f8c8 3000 	str.w	r3, [r8]
   2f116:	e7ef      	b.n	2f0f8 <nrf91_socket_offload_getsockopt+0x7c>
	errno = ENOPROTOOPT;
   2f118:	f7ff fb17 	bl	2e74a <__errno>
   2f11c:	236d      	movs	r3, #109	; 0x6d
	return retval;
   2f11e:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   2f122:	6003      	str	r3, [r0, #0]
	return retval;
   2f124:	e7e8      	b.n	2f0f8 <nrf91_socket_offload_getsockopt+0x7c>

0002f126 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   2f126:	2903      	cmp	r1, #3
{
   2f128:	b508      	push	{r3, lr}
	switch (cmd) {
   2f12a:	d00b      	beq.n	2f144 <nrf91_socket_offload_fcntl+0x1e>
   2f12c:	2904      	cmp	r1, #4
   2f12e:	d111      	bne.n	2f154 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   2f130:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   2f132:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   2f136:	d10d      	bne.n	2f154 <nrf91_socket_offload_fcntl+0x2e>
}
   2f138:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   2f13c:	1392      	asrs	r2, r2, #14
   2f13e:	2101      	movs	r1, #1
   2f140:	f7f7 bb38 	b.w	267b4 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   2f144:	2200      	movs	r2, #0
   2f146:	2102      	movs	r1, #2
   2f148:	f7f7 fb34 	bl	267b4 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   2f14c:	0380      	lsls	r0, r0, #14
   2f14e:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   2f152:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   2f154:	f7ff faf9 	bl	2e74a <__errno>
   2f158:	2316      	movs	r3, #22
   2f15a:	6003      	str	r3, [r0, #0]
	return retval;
   2f15c:	f04f 30ff 	mov.w	r0, #4294967295
   2f160:	e7f7      	b.n	2f152 <nrf91_socket_offload_fcntl+0x2c>

0002f162 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   2f162:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   2f164:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   2f166:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   2f168:	4603      	mov	r3, r0
{
   2f16a:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   2f16c:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2f170:	f101 0210 	add.w	r2, r1, #16
   2f174:	f102 0410 	add.w	r4, r2, #16
   2f178:	f852 5b04 	ldr.w	r5, [r2], #4
   2f17c:	42a2      	cmp	r2, r4
   2f17e:	f843 5b04 	str.w	r5, [r3], #4
   2f182:	d1f9      	bne.n	2f178 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   2f184:	6a0b      	ldr	r3, [r1, #32]
   2f186:	7503      	strb	r3, [r0, #20]
}
   2f188:	bd30      	pop	{r4, r5, pc}

0002f18a <nrf91_socket_offload_getaddrinfo>:
{
   2f18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f18e:	4614      	mov	r4, r2
   2f190:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   2f192:	2100      	movs	r1, #0
{
   2f194:	b092      	sub	sp, #72	; 0x48
   2f196:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   2f198:	2220      	movs	r2, #32
   2f19a:	a802      	add	r0, sp, #8
{
   2f19c:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   2f19e:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   2f1a0:	f7fb fba0 	bl	2a8e4 <memset>
	if (hints != NULL) {
   2f1a4:	b19c      	cbz	r4, 2f1ce <nrf91_socket_offload_getaddrinfo+0x44>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   2f1a6:	a902      	add	r1, sp, #8
   2f1a8:	4620      	mov	r0, r4
   2f1aa:	f7ff febf 	bl	2ef2c <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   2f1ae:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   2f1b2:	f000 8092 	beq.w	2f2da <nrf91_socket_offload_getaddrinfo+0x150>
		} else if (error == -EAFNOSUPPORT) {
   2f1b6:	306a      	adds	r0, #106	; 0x6a
   2f1b8:	f000 8092 	beq.w	2f2e0 <nrf91_socket_offload_getaddrinfo+0x156>
		if (hints->ai_next != NULL) {
   2f1bc:	69e0      	ldr	r0, [r4, #28]
   2f1be:	b120      	cbz	r0, 2f1ca <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   2f1c0:	ac0a      	add	r4, sp, #40	; 0x28
   2f1c2:	4621      	mov	r1, r4
   2f1c4:	f7ff feb2 	bl	2ef2c <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   2f1c8:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   2f1ca:	aa02      	add	r2, sp, #8
   2f1cc:	e000      	b.n	2f1d0 <nrf91_socket_offload_getaddrinfo+0x46>
	struct nrf_addrinfo *nrf_hints_ptr = NULL;
   2f1ce:	4622      	mov	r2, r4
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   2f1d0:	4631      	mov	r1, r6
   2f1d2:	4628      	mov	r0, r5
   2f1d4:	ab01      	add	r3, sp, #4
   2f1d6:	f7f7 fae7 	bl	267a8 <nrf_getaddrinfo>
	*res = NULL;
   2f1da:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   2f1dc:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   2f1de:	f8c8 7000 	str.w	r7, [r8]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   2f1e2:	4605      	mov	r5, r0
   2f1e4:	2800      	cmp	r0, #0
   2f1e6:	d056      	beq.n	2f296 <nrf91_socket_offload_getaddrinfo+0x10c>
		nrf91_socket_offload_freeaddrinfo(*res);
   2f1e8:	f8d8 0000 	ldr.w	r0, [r8]
   2f1ec:	f7ff fe91 	bl	2ef12 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   2f1f0:	2300      	movs	r3, #0
   2f1f2:	f8c8 3000 	str.w	r3, [r8]
   2f1f6:	e050      	b.n	2f29a <nrf91_socket_offload_getaddrinfo+0x110>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   2f1f8:	2020      	movs	r0, #32
   2f1fa:	f7f7 fe3d 	bl	26e78 <k_malloc>
		if (next_z_res == NULL) {
   2f1fe:	4604      	mov	r4, r0
   2f200:	2800      	cmp	r0, #0
   2f202:	d065      	beq.n	2f2d0 <nrf91_socket_offload_getaddrinfo+0x146>
	family = nrf_to_z_family(nrf_in->ai_family);
   2f204:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2f206:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   2f208:	2a0a      	cmp	r2, #10
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   2f20a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   2f20e:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2f210:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   2f212:	d017      	beq.n	2f244 <nrf91_socket_offload_getaddrinfo+0xba>
   2f214:	2a66      	cmp	r2, #102	; 0x66
   2f216:	d017      	beq.n	2f248 <nrf91_socket_offload_getaddrinfo+0xbe>
   2f218:	2a02      	cmp	r2, #2
   2f21a:	d164      	bne.n	2f2e6 <nrf91_socket_offload_getaddrinfo+0x15c>
		return AF_INET;
   2f21c:	2301      	movs	r3, #1
	z_out->ai_family = family;
   2f21e:	6063      	str	r3, [r4, #4]
	switch (proto) {
   2f220:	68f3      	ldr	r3, [r6, #12]
   2f222:	2b02      	cmp	r3, #2
   2f224:	d040      	beq.n	2f2a8 <nrf91_socket_offload_getaddrinfo+0x11e>
   2f226:	dc11      	bgt.n	2f24c <nrf91_socket_offload_getaddrinfo+0xc2>
   2f228:	b1fb      	cbz	r3, 2f26a <nrf91_socket_offload_getaddrinfo+0xe0>
   2f22a:	2b01      	cmp	r3, #1
   2f22c:	d03e      	beq.n	2f2ac <nrf91_socket_offload_getaddrinfo+0x122>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2f22e:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   2f232:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   2f234:	2300      	movs	r3, #0
   2f236:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   2f238:	4620      	mov	r0, r4
   2f23a:	f001 fae6 	bl	3080a <k_free>
			retval = DNS_EAI_SOCKTYPE;
   2f23e:	f06f 0506 	mvn.w	r5, #6
   2f242:	e7d1      	b.n	2f1e8 <nrf91_socket_offload_getaddrinfo+0x5e>
		return AF_INET6;
   2f244:	2302      	movs	r3, #2
   2f246:	e7ea      	b.n	2f21e <nrf91_socket_offload_getaddrinfo+0x94>
		return AF_LTE;
   2f248:	4613      	mov	r3, r2
   2f24a:	e7e8      	b.n	2f21e <nrf91_socket_offload_getaddrinfo+0x94>
	switch (proto) {
   2f24c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   2f250:	d009      	beq.n	2f266 <nrf91_socket_offload_getaddrinfo+0xdc>
   2f252:	f240 2101 	movw	r1, #513	; 0x201
   2f256:	428b      	cmp	r3, r1
   2f258:	d007      	beq.n	2f26a <nrf91_socket_offload_getaddrinfo+0xe0>
   2f25a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   2f25e:	d1e6      	bne.n	2f22e <nrf91_socket_offload_getaddrinfo+0xa4>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2f260:	f44f 7381 	mov.w	r3, #258	; 0x102
   2f264:	e001      	b.n	2f26a <nrf91_socket_offload_getaddrinfo+0xe0>
   2f266:	f240 1311 	movw	r3, #273	; 0x111
	if (nrf_in->ai_family == NRF_AF_INET) {
   2f26a:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2f26c:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   2f26e:	d11f      	bne.n	2f2b0 <nrf91_socket_offload_getaddrinfo+0x126>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   2f270:	2008      	movs	r0, #8
   2f272:	f7f7 fe01 	bl	26e78 <k_malloc>
   2f276:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   2f278:	b338      	cbz	r0, 2f2ca <nrf91_socket_offload_getaddrinfo+0x140>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   2f27a:	2308      	movs	r3, #8
   2f27c:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   2f27e:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   2f280:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2f282:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   2f284:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   2f286:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2f288:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   2f28a:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   2f28c:	bb1f      	cbnz	r7, 2f2d6 <nrf91_socket_offload_getaddrinfo+0x14c>
			*res = next_z_res;
   2f28e:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   2f292:	4627      	mov	r7, r4
   2f294:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   2f296:	2e00      	cmp	r6, #0
   2f298:	d1ae      	bne.n	2f1f8 <nrf91_socket_offload_getaddrinfo+0x6e>
	nrf_freeaddrinfo(nrf_res);
   2f29a:	9801      	ldr	r0, [sp, #4]
   2f29c:	f7f7 fa86 	bl	267ac <nrf_freeaddrinfo>
}
   2f2a0:	4628      	mov	r0, r5
   2f2a2:	b012      	add	sp, #72	; 0x48
   2f2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2f2a8:	2311      	movs	r3, #17
   2f2aa:	e7de      	b.n	2f26a <nrf91_socket_offload_getaddrinfo+0xe0>
   2f2ac:	2306      	movs	r3, #6
   2f2ae:	e7dc      	b.n	2f26a <nrf91_socket_offload_getaddrinfo+0xe0>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   2f2b0:	2a0a      	cmp	r2, #10
   2f2b2:	d1c1      	bne.n	2f238 <nrf91_socket_offload_getaddrinfo+0xae>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   2f2b4:	2018      	movs	r0, #24
   2f2b6:	f7f7 fddf 	bl	26e78 <k_malloc>
   2f2ba:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   2f2bc:	b128      	cbz	r0, 2f2ca <nrf91_socket_offload_getaddrinfo+0x140>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2f2be:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   2f2c0:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2f2c2:	6123      	str	r3, [r4, #16]
		nrf_to_z_ipv6(z_out->ai_addr,
   2f2c4:	f7ff ff4d 	bl	2f162 <nrf_to_z_ipv6>
   2f2c8:	e7e0      	b.n	2f28c <nrf91_socket_offload_getaddrinfo+0x102>
			k_free(next_z_res);
   2f2ca:	4620      	mov	r0, r4
   2f2cc:	f001 fa9d 	bl	3080a <k_free>
			retval = DNS_EAI_MEMORY;
   2f2d0:	f06f 0509 	mvn.w	r5, #9
   2f2d4:	e788      	b.n	2f1e8 <nrf91_socket_offload_getaddrinfo+0x5e>
			latest_z_res->ai_next = next_z_res;
   2f2d6:	61fc      	str	r4, [r7, #28]
   2f2d8:	e7db      	b.n	2f292 <nrf91_socket_offload_getaddrinfo+0x108>
			return DNS_EAI_SOCKTYPE;
   2f2da:	f06f 0506 	mvn.w	r5, #6
   2f2de:	e7df      	b.n	2f2a0 <nrf91_socket_offload_getaddrinfo+0x116>
			return DNS_EAI_ADDRFAMILY;
   2f2e0:	f06f 0508 	mvn.w	r5, #8
   2f2e4:	e7dc      	b.n	2f2a0 <nrf91_socket_offload_getaddrinfo+0x116>
			k_free(next_z_res);
   2f2e6:	f001 fa90 	bl	3080a <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   2f2ea:	f06f 0508 	mvn.w	r5, #8
   2f2ee:	e77b      	b.n	2f1e8 <nrf91_socket_offload_getaddrinfo+0x5e>

0002f2f0 <z_to_nrf_ipv6>:
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2f2f0:	2224      	movs	r2, #36	; 0x24
{
   2f2f2:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2f2f4:	700a      	strb	r2, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   2f2f6:	8842      	ldrh	r2, [r0, #2]
{
   2f2f8:	4604      	mov	r4, r0
	nrf_out->sin6_port = ptr->sin6_port;
   2f2fa:	810a      	strh	r2, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   2f2fc:	220a      	movs	r2, #10
{
   2f2fe:	460b      	mov	r3, r1
	nrf_out->sin6_family = NRF_AF_INET6;
   2f300:	604a      	str	r2, [r1, #4]
   2f302:	f101 0610 	add.w	r6, r1, #16
   2f306:	1d02      	adds	r2, r0, #4
   2f308:	f100 0714 	add.w	r7, r0, #20
   2f30c:	4635      	mov	r5, r6
   2f30e:	6810      	ldr	r0, [r2, #0]
   2f310:	6851      	ldr	r1, [r2, #4]
   2f312:	3208      	adds	r2, #8
   2f314:	c503      	stmia	r5!, {r0, r1}
   2f316:	42ba      	cmp	r2, r7
   2f318:	462e      	mov	r6, r5
   2f31a:	d1f7      	bne.n	2f30c <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   2f31c:	7d22      	ldrb	r2, [r4, #20]
   2f31e:	621a      	str	r2, [r3, #32]
}
   2f320:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002f322 <nrf91_socket_offload_sendto>:
{
   2f322:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f326:	b08d      	sub	sp, #52	; 0x34
   2f328:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2f32a:	4605      	mov	r5, r0
   2f32c:	460e      	mov	r6, r1
   2f32e:	4617      	mov	r7, r2
   2f330:	4698      	mov	r8, r3
	if (to == NULL) {
   2f332:	b96c      	cbnz	r4, 2f350 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2f334:	4618      	mov	r0, r3
   2f336:	f7ff fdbd 	bl	2eeb4 <z_to_nrf_flags>
   2f33a:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2f33e:	4603      	mov	r3, r0
   2f340:	463a      	mov	r2, r7
   2f342:	4631      	mov	r1, r6
   2f344:	4628      	mov	r0, r5
   2f346:	f7f7 f915 	bl	26574 <nrf_sendto>
}
   2f34a:	b00d      	add	sp, #52	; 0x34
   2f34c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   2f350:	8823      	ldrh	r3, [r4, #0]
   2f352:	2b01      	cmp	r3, #1
   2f354:	d110      	bne.n	2f378 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   2f356:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2f358:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   2f35a:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   2f35e:	2302      	movs	r3, #2
   2f360:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2f362:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2f364:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2f366:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2f368:	f88d 100c 	strb.w	r1, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2f36c:	f7ff fda2 	bl	2eeb4 <z_to_nrf_flags>
   2f370:	ab03      	add	r3, sp, #12
   2f372:	9101      	str	r1, [sp, #4]
   2f374:	9300      	str	r3, [sp, #0]
   2f376:	e7e2      	b.n	2f33e <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   2f378:	2b02      	cmp	r3, #2
   2f37a:	d10c      	bne.n	2f396 <nrf91_socket_offload_sendto+0x74>
		z_to_nrf_ipv6(to, &ipv6);
   2f37c:	f10d 090c 	add.w	r9, sp, #12
   2f380:	4649      	mov	r1, r9
   2f382:	4620      	mov	r0, r4
   2f384:	f7ff ffb4 	bl	2f2f0 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2f388:	4640      	mov	r0, r8
   2f38a:	f7ff fd93 	bl	2eeb4 <z_to_nrf_flags>
   2f38e:	2324      	movs	r3, #36	; 0x24
   2f390:	e9cd 9300 	strd	r9, r3, [sp]
   2f394:	e7d3      	b.n	2f33e <nrf91_socket_offload_sendto+0x1c>
	errno = ENOTSUP;
   2f396:	f7ff f9d8 	bl	2e74a <__errno>
   2f39a:	2386      	movs	r3, #134	; 0x86
   2f39c:	6003      	str	r3, [r0, #0]
	return retval;
   2f39e:	f04f 30ff 	mov.w	r0, #4294967295
   2f3a2:	e7d2      	b.n	2f34a <nrf91_socket_offload_sendto+0x28>

0002f3a4 <nrf91_socket_offload_recvfrom>:
{
   2f3a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f3a8:	4680      	mov	r8, r0
   2f3aa:	b08d      	sub	sp, #52	; 0x34
   2f3ac:	4618      	mov	r0, r3
   2f3ae:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   2f3b2:	4691      	mov	r9, r2
   2f3b4:	f7ff fd7e 	bl	2eeb4 <z_to_nrf_flags>
   2f3b8:	4603      	mov	r3, r0
	if (from == NULL) {
   2f3ba:	b954      	cbnz	r4, 2f3d2 <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2f3bc:	e9cd 4400 	strd	r4, r4, [sp]
   2f3c0:	464a      	mov	r2, r9
   2f3c2:	4640      	mov	r0, r8
   2f3c4:	f7f7 f922 	bl	2660c <nrf_recvfrom>
   2f3c8:	4605      	mov	r5, r0
}
   2f3ca:	4628      	mov	r0, r5
   2f3cc:	b00d      	add	sp, #52	; 0x34
   2f3ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2f3d2:	2224      	movs	r2, #36	; 0x24
   2f3d4:	ad0c      	add	r5, sp, #48	; 0x30
   2f3d6:	f845 2d28 	str.w	r2, [r5, #-40]!
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2f3da:	af03      	add	r7, sp, #12
   2f3dc:	9501      	str	r5, [sp, #4]
   2f3de:	9700      	str	r7, [sp, #0]
   2f3e0:	464a      	mov	r2, r9
   2f3e2:	4640      	mov	r0, r8
   2f3e4:	f7f7 f912 	bl	2660c <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   2f3e8:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2f3ea:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   2f3ec:	2b02      	cmp	r3, #2
   2f3ee:	d109      	bne.n	2f404 <nrf91_socket_offload_recvfrom+0x60>
	ptr->sin_port = nrf_in->sin_port;
   2f3f0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2f3f4:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   2f3f6:	2301      	movs	r3, #1
   2f3f8:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2f3fa:	9b06      	ldr	r3, [sp, #24]
   2f3fc:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   2f3fe:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   2f400:	6033      	str	r3, [r6, #0]
	return retval;
   2f402:	e7e2      	b.n	2f3ca <nrf91_socket_offload_recvfrom+0x26>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   2f404:	2b0a      	cmp	r3, #10
   2f406:	d1e0      	bne.n	2f3ca <nrf91_socket_offload_recvfrom+0x26>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   2f408:	4639      	mov	r1, r7
   2f40a:	4620      	mov	r0, r4
   2f40c:	f7ff fea9 	bl	2f162 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   2f410:	2318      	movs	r3, #24
   2f412:	e7f5      	b.n	2f400 <nrf91_socket_offload_recvfrom+0x5c>

0002f414 <nrf91_socket_offload_connect>:
{
   2f414:	b530      	push	{r4, r5, lr}
	if (addr->sa_family == AF_INET) {
   2f416:	880c      	ldrh	r4, [r1, #0]
{
   2f418:	b08b      	sub	sp, #44	; 0x2c
	if (addr->sa_family == AF_INET) {
   2f41a:	2c01      	cmp	r4, #1
{
   2f41c:	4605      	mov	r5, r0
   2f41e:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   2f420:	d10e      	bne.n	2f440 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   2f422:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2f424:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2f426:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   2f42a:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2f42c:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   2f42e:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2f430:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2f434:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   2f436:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2f438:	f7f7 f934 	bl	266a4 <nrf_connect>
}
   2f43c:	b00b      	add	sp, #44	; 0x2c
   2f43e:	bd30      	pop	{r4, r5, pc}
	} else if (addr->sa_family == AF_INET6) {
   2f440:	2c02      	cmp	r4, #2
   2f442:	d107      	bne.n	2f454 <nrf91_socket_offload_connect+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   2f444:	a901      	add	r1, sp, #4
   2f446:	4618      	mov	r0, r3
   2f448:	f7ff ff52 	bl	2f2f0 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2f44c:	2224      	movs	r2, #36	; 0x24
   2f44e:	a901      	add	r1, sp, #4
   2f450:	4628      	mov	r0, r5
   2f452:	e7f1      	b.n	2f438 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   2f454:	f7f7 f926 	bl	266a4 <nrf_connect>
		if (retval < 0) {
   2f458:	2800      	cmp	r0, #0
   2f45a:	daef      	bge.n	2f43c <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   2f45c:	f7ff f975 	bl	2e74a <__errno>
   2f460:	2386      	movs	r3, #134	; 0x86
   2f462:	6003      	str	r3, [r0, #0]
   2f464:	f04f 30ff 	mov.w	r0, #4294967295
   2f468:	e7e8      	b.n	2f43c <nrf91_socket_offload_connect+0x28>

0002f46a <nrf91_socket_offload_accept>:
{
   2f46a:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   2f46c:	2708      	movs	r7, #8
{
   2f46e:	b085      	sub	sp, #20
   2f470:	4616      	mov	r6, r2
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   2f472:	aa04      	add	r2, sp, #16
{
   2f474:	460c      	mov	r4, r1
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   2f476:	f842 7d0c 	str.w	r7, [r2, #-12]!
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   2f47a:	eb0d 0107 	add.w	r1, sp, r7
   2f47e:	f7f7 f933 	bl	266e8 <nrf_accept>
	if (retval < 0) {
   2f482:	1e05      	subs	r5, r0, #0
   2f484:	db1a      	blt.n	2f4bc <nrf91_socket_offload_accept+0x52>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   2f486:	9b03      	ldr	r3, [sp, #12]
   2f488:	2b02      	cmp	r3, #2
   2f48a:	d10a      	bne.n	2f4a2 <nrf91_socket_offload_accept+0x38>
	ptr->sin_port = nrf_in->sin_port;
   2f48c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   2f490:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   2f492:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   2f494:	2301      	movs	r3, #1
   2f496:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2f498:	9b05      	ldr	r3, [sp, #20]
   2f49a:	6063      	str	r3, [r4, #4]
}
   2f49c:	4628      	mov	r0, r5
   2f49e:	b005      	add	sp, #20
   2f4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   2f4a2:	2b0a      	cmp	r3, #10
   2f4a4:	d106      	bne.n	2f4b4 <nrf91_socket_offload_accept+0x4a>
		*addrlen = sizeof(struct sockaddr_in6);
   2f4a6:	2318      	movs	r3, #24
		nrf_to_z_ipv6(addr, (const struct nrf_sockaddr_in6 *)&nrf_addr);
   2f4a8:	a902      	add	r1, sp, #8
		*addrlen = sizeof(struct sockaddr_in6);
   2f4aa:	6033      	str	r3, [r6, #0]
		nrf_to_z_ipv6(addr, (const struct nrf_sockaddr_in6 *)&nrf_addr);
   2f4ac:	4620      	mov	r0, r4
   2f4ae:	f7ff fe58 	bl	2f162 <nrf_to_z_ipv6>
   2f4b2:	e7f3      	b.n	2f49c <nrf91_socket_offload_accept+0x32>
	errno = ENOTSUP;
   2f4b4:	f7ff f949 	bl	2e74a <__errno>
   2f4b8:	2386      	movs	r3, #134	; 0x86
   2f4ba:	6003      	str	r3, [r0, #0]
		return -1;
   2f4bc:	f04f 35ff 	mov.w	r5, #4294967295
   2f4c0:	e7ec      	b.n	2f49c <nrf91_socket_offload_accept+0x32>

0002f4c2 <nrf91_socket_offload_socket>:
{
   2f4c2:	b510      	push	{r4, lr}
	switch (z_family) {
   2f4c4:	b284      	uxth	r4, r0
   2f4c6:	2c02      	cmp	r4, #2
   2f4c8:	d00a      	beq.n	2f4e0 <nrf91_socket_offload_socket+0x1e>
   2f4ca:	2c66      	cmp	r4, #102	; 0x66
   2f4cc:	d009      	beq.n	2f4e2 <nrf91_socket_offload_socket+0x20>
   2f4ce:	2c01      	cmp	r4, #1
   2f4d0:	d016      	beq.n	2f500 <nrf91_socket_offload_socket+0x3e>
		errno = EAFNOSUPPORT;
   2f4d2:	f7ff f93a 	bl	2e74a <__errno>
   2f4d6:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   2f4d8:	6003      	str	r3, [r0, #0]
}
   2f4da:	f04f 30ff 	mov.w	r0, #4294967295
   2f4de:	bd10      	pop	{r4, pc}
		return NRF_AF_INET6;
   2f4e0:	240a      	movs	r4, #10
	switch (socktype) {
   2f4e2:	2904      	cmp	r1, #4
	proto = z_to_nrf_protocol(proto);
   2f4e4:	4610      	mov	r0, r2
		return NRF_SOCK_MGMT;
   2f4e6:	bf08      	it	eq
   2f4e8:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   2f4ec:	f7ff fcec 	bl	2eec8 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   2f4f0:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   2f4f4:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   2f4f6:	d105      	bne.n	2f504 <nrf91_socket_offload_socket+0x42>
		errno = EPROTONOSUPPORT;
   2f4f8:	f7ff f927 	bl	2e74a <__errno>
   2f4fc:	237b      	movs	r3, #123	; 0x7b
   2f4fe:	e7eb      	b.n	2f4d8 <nrf91_socket_offload_socket+0x16>
		return NRF_AF_INET;
   2f500:	2402      	movs	r4, #2
   2f502:	e7ee      	b.n	2f4e2 <nrf91_socket_offload_socket+0x20>
	retval = nrf_socket(family, type, proto);
   2f504:	4620      	mov	r0, r4
}
   2f506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   2f50a:	f7f7 b813 	b.w	26534 <nrf_socket>

0002f50e <nrf91_socket_offload_setsockopt>:
{
   2f50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   2f512:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   2f516:	b086      	sub	sp, #24
   2f518:	4680      	mov	r8, r0
   2f51a:	460c      	mov	r4, r1
   2f51c:	4617      	mov	r7, r2
   2f51e:	461d      	mov	r5, r3
   2f520:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   2f522:	d005      	beq.n	2f530 <nrf91_socket_offload_setsockopt+0x22>
   2f524:	f240 2302 	movw	r3, #514	; 0x202
   2f528:	4299      	cmp	r1, r3
   2f52a:	d001      	beq.n	2f530 <nrf91_socket_offload_setsockopt+0x22>
   2f52c:	2901      	cmp	r1, #1
   2f52e:	d11a      	bne.n	2f566 <nrf91_socket_offload_setsockopt+0x58>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2f530:	aa03      	add	r2, sp, #12
   2f532:	4639      	mov	r1, r7
   2f534:	4620      	mov	r0, r4
   2f536:	f7e6 fce1 	bl	15efc <z_to_nrf_optname>
   2f53a:	2800      	cmp	r0, #0
   2f53c:	db13      	blt.n	2f566 <nrf91_socket_offload_setsockopt+0x58>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   2f53e:	2c01      	cmp	r4, #1
   2f540:	d107      	bne.n	2f552 <nrf91_socket_offload_setsockopt+0x44>
   2f542:	2f14      	cmp	r7, #20
   2f544:	d105      	bne.n	2f552 <nrf91_socket_offload_setsockopt+0x44>
		nrf_optlen = sizeof(struct nrf_timeval);
   2f546:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   2f548:	682b      	ldr	r3, [r5, #0]
   2f54a:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2f54c:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   2f54e:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2f550:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2f552:	9600      	str	r6, [sp, #0]
   2f554:	462b      	mov	r3, r5
   2f556:	9a03      	ldr	r2, [sp, #12]
   2f558:	4621      	mov	r1, r4
   2f55a:	4640      	mov	r0, r8
   2f55c:	f7f7 f8ec 	bl	26738 <nrf_setsockopt>
}
   2f560:	b006      	add	sp, #24
   2f562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	errno = ENOPROTOOPT;
   2f566:	f7ff f8f0 	bl	2e74a <__errno>
   2f56a:	236d      	movs	r3, #109	; 0x6d
   2f56c:	6003      	str	r3, [r0, #0]
   2f56e:	f04f 30ff 	mov.w	r0, #4294967295
   2f572:	e7f5      	b.n	2f560 <nrf91_socket_offload_setsockopt+0x52>

0002f574 <nrf91_socket_offload_bind>:
{
   2f574:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   2f576:	880a      	ldrh	r2, [r1, #0]
{
   2f578:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   2f57a:	2a01      	cmp	r2, #1
{
   2f57c:	4604      	mov	r4, r0
   2f57e:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   2f580:	d10e      	bne.n	2f5a0 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   2f582:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2f584:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2f586:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   2f58a:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2f58c:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   2f58e:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2f590:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2f594:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   2f596:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2f598:	f7f7 f8bc 	bl	26714 <nrf_bind>
}
   2f59c:	b00a      	add	sp, #40	; 0x28
   2f59e:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2f5a0:	2a02      	cmp	r2, #2
   2f5a2:	d107      	bne.n	2f5b4 <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   2f5a4:	a901      	add	r1, sp, #4
   2f5a6:	4618      	mov	r0, r3
   2f5a8:	f7ff fea2 	bl	2f2f0 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2f5ac:	2224      	movs	r2, #36	; 0x24
   2f5ae:	a901      	add	r1, sp, #4
   2f5b0:	4620      	mov	r0, r4
   2f5b2:	e7f1      	b.n	2f598 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   2f5b4:	f7ff f8c9 	bl	2e74a <__errno>
   2f5b8:	2386      	movs	r3, #134	; 0x86
   2f5ba:	6003      	str	r3, [r0, #0]
   2f5bc:	f04f 30ff 	mov.w	r0, #4294967295
   2f5c0:	e7ec      	b.n	2f59c <nrf91_socket_offload_bind+0x28>

0002f5c2 <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   2f5c2:	ea40 0301 	orr.w	r3, r0, r1
   2f5c6:	f033 030f 	bics.w	r3, r3, #15
   2f5ca:	d101      	bne.n	2f5d0 <dk_set_leds_state+0xe>
   2f5cc:	f7e6 bcce 	b.w	15f6c <dk_set_leds_state.part.1>
}
   2f5d0:	f06f 0015 	mvn.w	r0, #21
   2f5d4:	4770      	bx	lr

0002f5d6 <dk_set_leds>:
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
   2f5d6:	210f      	movs	r1, #15
   2f5d8:	f7ff bff3 	b.w	2f5c2 <dk_set_leds_state>

0002f5dc <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   2f5dc:	6843      	ldr	r3, [r0, #4]
   2f5de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2f5e0:	b103      	cbz	r3, 2f5e4 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   2f5e2:	4718      	bx	r3
}
   2f5e4:	4770      	bx	lr

0002f5e6 <response_handler>:
{
   2f5e6:	b510      	push	{r4, lr}
   2f5e8:	4604      	mov	r4, r0
	int len = strlen(response) + 1;
   2f5ea:	f7fb fb67 	bl	2acbc <strlen>
   2f5ee:	1c41      	adds	r1, r0, #1
	if (len > 1) {
   2f5f0:	2901      	cmp	r1, #1
   2f5f2:	dd04      	ble.n	2f5fe <response_handler+0x18>
		write_uart_string(response, len);
   2f5f4:	4620      	mov	r0, r4
}
   2f5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		write_uart_string(response, len);
   2f5fa:	f7e6 bebb 	b.w	16374 <write_uart_string>
}
   2f5fe:	bd10      	pop	{r4, pc}

0002f600 <at_parser_max_params_from_str>:


int at_parser_max_params_from_str(char *str,
				  struct at_param_list *list,
				  size_t max_params_count)
{
   2f600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f604:	b087      	sub	sp, #28
   2f606:	9003      	str	r0, [sp, #12]
   2f608:	460e      	mov	r6, r1
   2f60a:	4617      	mov	r7, r2
	if (str == NULL || list == NULL || list->params == NULL) {
   2f60c:	2800      	cmp	r0, #0
   2f60e:	f000 80c5 	beq.w	2f79c <at_parser_max_params_from_str+0x19c>
   2f612:	2900      	cmp	r1, #0
   2f614:	f000 80c2 	beq.w	2f79c <at_parser_max_params_from_str+0x19c>
   2f618:	684b      	ldr	r3, [r1, #4]
   2f61a:	2b00      	cmp	r3, #0
   2f61c:	f000 80be 	beq.w	2f79c <at_parser_max_params_from_str+0x19c>
		return -EINVAL;
	}

	at_params_list_clear(list);
   2f620:	4608      	mov	r0, r1
   2f622:	f000 f8f7 	bl	2f814 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   2f626:	6833      	ldr	r3, [r6, #0]

	(void)at_params_space_count_get(&str);
   2f628:	a803      	add	r0, sp, #12
	max_params_count = MIN(max_params_count, list->param_count);
   2f62a:	429f      	cmp	r7, r3
   2f62c:	bf28      	it	cs
   2f62e:	461f      	movcs	r7, r3

	for (size_t i = 0; i < max_params_count; ++i) {
   2f630:	2500      	movs	r5, #0
	(void)at_params_space_count_get(&str);
   2f632:	f000 f8c0 	bl	2f7b6 <at_params_space_count_get>
		check_value = value * 10;
   2f636:	f04f 080a 	mov.w	r8, #10
	for (size_t i = 0; i < max_params_count; ++i) {
   2f63a:	42bd      	cmp	r5, r7
   2f63c:	f000 80aa 	beq.w	2f794 <at_parser_max_params_from_str+0x194>
		size_t consumed;
		int err = at_parse_param(str, list, i, &consumed);
   2f640:	f8dd a00c 	ldr.w	sl, [sp, #12]
	if (at_params_str == NULL || *at_params_str == '\0' ||
   2f644:	f1ba 0f00 	cmp.w	sl, #0
   2f648:	d006      	beq.n	2f658 <at_parser_max_params_from_str+0x58>
   2f64a:	f89a 3000 	ldrb.w	r3, [sl]
   2f64e:	b11b      	cbz	r3, 2f658 <at_parser_max_params_from_str+0x58>
   2f650:	2b2c      	cmp	r3, #44	; 0x2c
   2f652:	d001      	beq.n	2f658 <at_parser_max_params_from_str+0x58>
	    *at_params_str == AT_CMD_PARAM_SEPARATOR ||
   2f654:	2b3b      	cmp	r3, #59	; 0x3b
   2f656:	d113      	bne.n	2f680 <at_parser_max_params_from_str+0x80>
		(void)at_params_clear(list, index);
   2f658:	4629      	mov	r1, r5
   2f65a:	4630      	mov	r0, r6
   2f65c:	f000 f8ef 	bl	2f83e <at_params_clear>
		*consumed = 0;
   2f660:	2400      	movs	r4, #0

		if (err) {
			return err;
		}

		str += consumed;
   2f662:	9b03      	ldr	r3, [sp, #12]

		if (i < (max_params_count - 1) && *str != '\0') {
   2f664:	1e79      	subs	r1, r7, #1
		str += consumed;
   2f666:	191a      	adds	r2, r3, r4
		if (i < (max_params_count - 1) && *str != '\0') {
   2f668:	42a9      	cmp	r1, r5
		str += consumed;
   2f66a:	9203      	str	r2, [sp, #12]
		if (i < (max_params_count - 1) && *str != '\0') {
   2f66c:	d906      	bls.n	2f67c <at_parser_max_params_from_str+0x7c>
   2f66e:	5d1b      	ldrb	r3, [r3, r4]
   2f670:	b123      	cbz	r3, 2f67c <at_parser_max_params_from_str+0x7c>
			if (*str == AT_CMD_PARAM_SEPARATOR) {
   2f672:	2b2c      	cmp	r3, #44	; 0x2c
   2f674:	f040 808c 	bne.w	2f790 <at_parser_max_params_from_str+0x190>
				str++;
   2f678:	3201      	adds	r2, #1
   2f67a:	9203      	str	r2, [sp, #12]
	for (size_t i = 0; i < max_params_count; ++i) {
   2f67c:	3501      	adds	r5, #1
   2f67e:	e7dc      	b.n	2f63a <at_parser_max_params_from_str+0x3a>
	size_t num_spaces = at_params_space_count_get(&at_str);
   2f680:	a804      	add	r0, sp, #16
   2f682:	f8cd a010 	str.w	sl, [sp, #16]
   2f686:	f000 f896 	bl	2f7b6 <at_params_space_count_get>
	u32_t err = at_parse_param_u32(at_str, &val, &consumed_bytes);
   2f68a:	9c04      	ldr	r4, [sp, #16]
	size_t num_spaces = at_params_space_count_get(&at_str);
   2f68c:	4683      	mov	fp, r0
	if (*at_str == '-' && isdigit(*(at_str + 1))) {
   2f68e:	7823      	ldrb	r3, [r4, #0]
   2f690:	2b2d      	cmp	r3, #45	; 0x2d
   2f692:	d127      	bne.n	2f6e4 <at_parser_max_params_from_str+0xe4>
   2f694:	f7fa fdb4 	bl	2a200 <__locale_ctype_ptr>
   2f698:	7863      	ldrb	r3, [r4, #1]
   2f69a:	4418      	add	r0, r3
   2f69c:	7843      	ldrb	r3, [r0, #1]
   2f69e:	075a      	lsls	r2, r3, #29
   2f6a0:	d520      	bpl.n	2f6e4 <at_parser_max_params_from_str+0xe4>
		(*consumed)++;
   2f6a2:	2201      	movs	r2, #1
		at_str++;
   2f6a4:	3401      	adds	r4, #1
	bool negative = false;
   2f6a6:	f04f 0900 	mov.w	r9, #0
   2f6aa:	4611      	mov	r1, r2
   2f6ac:	1b12      	subs	r2, r2, r4
   2f6ae:	1913      	adds	r3, r2, r4
   2f6b0:	9102      	str	r1, [sp, #8]
   2f6b2:	e9cd 3200 	strd	r3, r2, [sp]
	while (isdigit(*at_str)) {
   2f6b6:	f7fa fda3 	bl	2a200 <__locale_ctype_ptr>
   2f6ba:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
   2f6be:	f814 cb01 	ldrb.w	ip, [r4], #1
   2f6c2:	4460      	add	r0, ip
   2f6c4:	7840      	ldrb	r0, [r0, #1]
   2f6c6:	f010 0f04 	tst.w	r0, #4
   2f6ca:	d114      	bne.n	2f6f6 <at_parser_max_params_from_str+0xf6>
	if (negative) {
   2f6cc:	b109      	cbz	r1, 2f6d2 <at_parser_max_params_from_str+0xd2>
		value = (u32_t)(0 - value);
   2f6ce:	f1c9 0900 	rsb	r9, r9, #0
	if (val <= USHRT_MAX) {
   2f6d2:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   2f6d6:	d34e      	bcc.n	2f776 <at_parser_max_params_from_str+0x176>
		err = at_params_int_put(list, index, val);
   2f6d8:	464a      	mov	r2, r9
   2f6da:	4629      	mov	r1, r5
   2f6dc:	4630      	mov	r0, r6
   2f6de:	f000 f8d7 	bl	2f890 <at_params_int_put>
   2f6e2:	e04e      	b.n	2f782 <at_parser_max_params_from_str+0x182>
	} else if (!isdigit(*at_str)) {
   2f6e4:	f7fa fd8c 	bl	2a200 <__locale_ctype_ptr>
   2f6e8:	7823      	ldrb	r3, [r4, #0]
   2f6ea:	4418      	add	r0, r3
   2f6ec:	7843      	ldrb	r3, [r0, #1]
   2f6ee:	075b      	lsls	r3, r3, #29
   2f6f0:	d50b      	bpl.n	2f70a <at_parser_max_params_from_str+0x10a>
	*consumed = 0;
   2f6f2:	2200      	movs	r2, #0
   2f6f4:	e7d7      	b.n	2f6a6 <at_parser_max_params_from_str+0xa6>
		check_value = value * 10;
   2f6f6:	fb08 f009 	mul.w	r0, r8, r9
		value = check_value + ((*at_str) - '0');
   2f6fa:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
   2f6fe:	44e1      	add	r9, ip
		if ((value < check_value) || (value == UINT32_MAX)) {
   2f700:	4548      	cmp	r0, r9
   2f702:	d802      	bhi.n	2f70a <at_parser_max_params_from_str+0x10a>
   2f704:	f1b9 3fff 	cmp.w	r9, #4294967295
   2f708:	d1d1      	bne.n	2f6ae <at_parser_max_params_from_str+0xae>
   2f70a:	f8cd a014 	str.w	sl, [sp, #20]
	if (at_str == NULL || *at_str == '\0') {
   2f70e:	f89a 4000 	ldrb.w	r4, [sl]
   2f712:	2c00      	cmp	r4, #0
   2f714:	d0a5      	beq.n	2f662 <at_parser_max_params_from_str+0x62>
	size_t spaces = at_params_space_count_get(&at_str);
   2f716:	a805      	add	r0, sp, #20
   2f718:	f000 f84d 	bl	2f7b6 <at_params_space_count_get>
	if (*at_str == '\"') {
   2f71c:	9b05      	ldr	r3, [sp, #20]
   2f71e:	781a      	ldrb	r2, [r3, #0]
   2f720:	2a22      	cmp	r2, #34	; 0x22
		in_double_quotes = true;
   2f722:	bf09      	itett	eq
   2f724:	2201      	moveq	r2, #1
	bool in_double_quotes = false;
   2f726:	2200      	movne	r2, #0
		at_str++;
   2f728:	3301      	addeq	r3, #1
   2f72a:	9305      	streq	r3, [sp, #20]
	param_value_start = at_str;
   2f72c:	f8dd c014 	ldr.w	ip, [sp, #20]
	while ((*at_str != '\0') && (*at_str != '\r')
   2f730:	9905      	ldr	r1, [sp, #20]
   2f732:	f891 e000 	ldrb.w	lr, [r1]
   2f736:	f1be 0f00 	cmp.w	lr, #0
   2f73a:	d032      	beq.n	2f7a2 <at_parser_max_params_from_str+0x1a2>
   2f73c:	f1be 0f0d 	cmp.w	lr, #13
   2f740:	d032      	beq.n	2f7a8 <at_parser_max_params_from_str+0x1a8>
		&& ((!in_double_quotes
   2f742:	b312      	cbz	r2, 2f78a <at_parser_max_params_from_str+0x18a>
		|| (in_double_quotes && (*at_str != '\"')))) {
   2f744:	f1be 0f22 	cmp.w	lr, #34	; 0x22
   2f748:	d11f      	bne.n	2f78a <at_parser_max_params_from_str+0x18a>
	str_len = at_str - param_value_start;
   2f74a:	eba1 030c 	sub.w	r3, r1, ip
	*consumed = str_len + spaces;
   2f74e:	b29b      	uxth	r3, r3
   2f750:	18c4      	adds	r4, r0, r3
	if (in_double_quotes && (*at_str == '\"')) {
   2f752:	b12a      	cbz	r2, 2f760 <at_parser_max_params_from_str+0x160>
   2f754:	f1be 0f22 	cmp.w	lr, #34	; 0x22
		at_str++;
   2f758:	bf02      	ittt	eq
   2f75a:	3101      	addeq	r1, #1
   2f75c:	9105      	streq	r1, [sp, #20]
		*consumed += 2;
   2f75e:	3402      	addeq	r4, #2
	return at_params_string_put(list, index, param_value_start, str_len);
   2f760:	4662      	mov	r2, ip
   2f762:	4629      	mov	r1, r5
   2f764:	4630      	mov	r0, r6
   2f766:	f000 f8a8 	bl	2f8ba <at_params_string_put>
		if (err) {
   2f76a:	2800      	cmp	r0, #0
   2f76c:	f43f af79 	beq.w	2f662 <at_parser_max_params_from_str+0x62>
			}
		}
	}

	return 0;
}
   2f770:	b007      	add	sp, #28
   2f772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = at_params_short_put(list, index, (u16_t)(val));
   2f776:	fa1f f289 	uxth.w	r2, r9
   2f77a:	4629      	mov	r1, r5
   2f77c:	4630      	mov	r0, r6
   2f77e:	f000 f872 	bl	2f866 <at_params_short_put>
	*consumed = consumed_bytes + num_spaces;
   2f782:	9b00      	ldr	r3, [sp, #0]
   2f784:	445b      	add	r3, fp
   2f786:	461c      	mov	r4, r3
   2f788:	e76b      	b.n	2f662 <at_parser_max_params_from_str+0x62>
		at_str++;
   2f78a:	3101      	adds	r1, #1
   2f78c:	9105      	str	r1, [sp, #20]
   2f78e:	e7cf      	b.n	2f730 <at_parser_max_params_from_str+0x130>
			} else if ((*str == '\r') || (*str == '\n')) {
   2f790:	2b0d      	cmp	r3, #13
   2f792:	d101      	bne.n	2f798 <at_parser_max_params_from_str+0x198>
				return 0;
   2f794:	2000      	movs	r0, #0
   2f796:	e7eb      	b.n	2f770 <at_parser_max_params_from_str+0x170>
			} else if ((*str == '\r') || (*str == '\n')) {
   2f798:	2b0a      	cmp	r3, #10
   2f79a:	d0fb      	beq.n	2f794 <at_parser_max_params_from_str+0x194>
				return -EINVAL;
   2f79c:	f06f 0015 	mvn.w	r0, #21
   2f7a0:	e7e6      	b.n	2f770 <at_parser_max_params_from_str+0x170>
	if (in_double_quotes &&
   2f7a2:	2a00      	cmp	r2, #0
   2f7a4:	d0d1      	beq.n	2f74a <at_parser_max_params_from_str+0x14a>
   2f7a6:	e7f9      	b.n	2f79c <at_parser_max_params_from_str+0x19c>
   2f7a8:	2a00      	cmp	r2, #0
   2f7aa:	d0ce      	beq.n	2f74a <at_parser_max_params_from_str+0x14a>
	str_len = at_str - param_value_start;
   2f7ac:	eba1 010c 	sub.w	r1, r1, ip
	*consumed = str_len + spaces;
   2f7b0:	b28b      	uxth	r3, r1
   2f7b2:	18c4      	adds	r4, r0, r3
   2f7b4:	e7d4      	b.n	2f760 <at_parser_max_params_from_str+0x160>

0002f7b6 <at_params_space_count_get>:
#include <zephyr/types.h>

#include "at_utils.h"

u32_t at_params_space_count_get(char **str)
{
   2f7b6:	b538      	push	{r3, r4, r5, lr}
	if ((!str) || (!(*str))) {
   2f7b8:	4605      	mov	r5, r0
   2f7ba:	b188      	cbz	r0, 2f7e0 <at_params_space_count_get+0x2a>
   2f7bc:	6804      	ldr	r4, [r0, #0]
   2f7be:	b14c      	cbz	r4, 2f7d4 <at_params_space_count_get+0x1e>
		return 0;
	}

	u32_t space_count = 0;
   2f7c0:	2400      	movs	r4, #0

	while (isspace(**str) && (**str)) {
   2f7c2:	f7fa fd1d 	bl	2a200 <__locale_ctype_ptr>
   2f7c6:	682b      	ldr	r3, [r5, #0]
   2f7c8:	781a      	ldrb	r2, [r3, #0]
   2f7ca:	4410      	add	r0, r2
   2f7cc:	7841      	ldrb	r1, [r0, #1]
   2f7ce:	0709      	lsls	r1, r1, #28
   2f7d0:	d500      	bpl.n	2f7d4 <at_params_space_count_get+0x1e>
   2f7d2:	b90a      	cbnz	r2, 2f7d8 <at_params_space_count_get+0x22>
		space_count++;
		(*str)++;
	}
	return space_count;
}
   2f7d4:	4620      	mov	r0, r4
   2f7d6:	bd38      	pop	{r3, r4, r5, pc}
		(*str)++;
   2f7d8:	3301      	adds	r3, #1
		space_count++;
   2f7da:	3401      	adds	r4, #1
		(*str)++;
   2f7dc:	602b      	str	r3, [r5, #0]
   2f7de:	e7f0      	b.n	2f7c2 <at_params_space_count_get+0xc>
		return 0;
   2f7e0:	4604      	mov	r4, r0
   2f7e2:	e7f7      	b.n	2f7d4 <at_params_space_count_get+0x1e>

0002f7e4 <at_params_list_init>:
}


int at_params_list_init(struct at_param_list *list,
			size_t max_params_count)
{
   2f7e4:	b570      	push	{r4, r5, r6, lr}
   2f7e6:	460e      	mov	r6, r1
	if (list == NULL) {
   2f7e8:	4605      	mov	r5, r0
   2f7ea:	b150      	cbz	r0, 2f802 <at_params_list_init+0x1e>
		return -EINVAL;
	}

	if (list->params != NULL) {
   2f7ec:	6844      	ldr	r4, [r0, #4]
   2f7ee:	b95c      	cbnz	r4, 2f808 <at_params_list_init+0x24>
		return -EACCES;
	}

	list->params = k_calloc(max_params_count,
   2f7f0:	2108      	movs	r1, #8
   2f7f2:	4630      	mov	r0, r6
   2f7f4:	f001 f80e 	bl	30814 <k_calloc>
   2f7f8:	6068      	str	r0, [r5, #4]
				sizeof(struct at_param));
	if (list->params == NULL) {
   2f7fa:	b140      	cbz	r0, 2f80e <at_params_list_init+0x2a>
		return -ENOMEM;
	}

	list->param_count = max_params_count;

	return 0;
   2f7fc:	4620      	mov	r0, r4
	list->param_count = max_params_count;
   2f7fe:	602e      	str	r6, [r5, #0]
}
   2f800:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2f802:	f06f 0015 	mvn.w	r0, #21
   2f806:	e7fb      	b.n	2f800 <at_params_list_init+0x1c>
		return -EACCES;
   2f808:	f06f 000c 	mvn.w	r0, #12
   2f80c:	e7f8      	b.n	2f800 <at_params_list_init+0x1c>
		return -ENOMEM;
   2f80e:	f06f 000b 	mvn.w	r0, #11
   2f812:	e7f5      	b.n	2f800 <at_params_list_init+0x1c>

0002f814 <at_params_list_clear>:


void at_params_list_clear(struct at_param_list *list)
{
   2f814:	b570      	push	{r4, r5, r6, lr}
	if (list == NULL || list->params == NULL) {
   2f816:	4605      	mov	r5, r0
   2f818:	b128      	cbz	r0, 2f826 <at_params_list_clear+0x12>
   2f81a:	6843      	ldr	r3, [r0, #4]
   2f81c:	b11b      	cbz	r3, 2f826 <at_params_list_clear+0x12>
		return;
	}

	for (size_t i = 0; i < list->param_count;
   2f81e:	2400      	movs	r4, #0
   2f820:	682b      	ldr	r3, [r5, #0]
   2f822:	429c      	cmp	r4, r3
   2f824:	d300      	bcc.n	2f828 <at_params_list_clear+0x14>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   2f826:	bd70      	pop	{r4, r5, r6, pc}
		at_param_clear(&params[i]);
   2f828:	686e      	ldr	r6, [r5, #4]
   2f82a:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
   2f82e:	4630      	mov	r0, r6
   2f830:	f7e6 fee4 	bl	165fc <at_param_clear>
		at_param_init(&params[i]);
   2f834:	4630      	mov	r0, r6
   2f836:	f7e6 ff0b 	bl	16650 <at_param_init>
		 ++i) {
   2f83a:	3401      	adds	r4, #1
   2f83c:	e7f0      	b.n	2f820 <at_params_list_clear+0xc>

0002f83e <at_params_clear>:
	list->params = NULL;
}


int at_params_clear(struct at_param_list *list, size_t index)
{
   2f83e:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   2f840:	b910      	cbnz	r0, 2f848 <at_params_clear+0xa>
		return -EINVAL;
   2f842:	f06f 0015 	mvn.w	r0, #21
	}

	at_param_clear(param);
	at_param_init(param);
	return 0;
}
   2f846:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   2f848:	6843      	ldr	r3, [r0, #4]
   2f84a:	2b00      	cmp	r3, #0
   2f84c:	d0f9      	beq.n	2f842 <at_params_clear+0x4>
	struct at_param *param = at_params_get(list, index);
   2f84e:	f7e6 feb3 	bl	165b8 <at_params_get>
	if (param == NULL) {
   2f852:	4604      	mov	r4, r0
   2f854:	2800      	cmp	r0, #0
   2f856:	d0f4      	beq.n	2f842 <at_params_clear+0x4>
	at_param_clear(param);
   2f858:	f7e6 fed0 	bl	165fc <at_param_clear>
	at_param_init(param);
   2f85c:	4620      	mov	r0, r4
   2f85e:	f7e6 fef7 	bl	16650 <at_param_init>
	return 0;
   2f862:	2000      	movs	r0, #0
   2f864:	e7ef      	b.n	2f846 <at_params_clear+0x8>

0002f866 <at_params_short_put>:


int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   2f866:	b538      	push	{r3, r4, r5, lr}
   2f868:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   2f86a:	b910      	cbnz	r0, 2f872 <at_params_short_put+0xc>
		return -EINVAL;
   2f86c:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.short_val = (value & USHRT_MAX);
	return 0;
}
   2f870:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   2f872:	6843      	ldr	r3, [r0, #4]
   2f874:	2b00      	cmp	r3, #0
   2f876:	d0f9      	beq.n	2f86c <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   2f878:	f7e6 fe9e 	bl	165b8 <at_params_get>
	if (param == NULL) {
   2f87c:	4604      	mov	r4, r0
   2f87e:	2800      	cmp	r0, #0
   2f880:	d0f4      	beq.n	2f86c <at_params_short_put+0x6>
	at_param_clear(param);
   2f882:	f7e6 febb 	bl	165fc <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   2f886:	2301      	movs	r3, #1
	param->value.short_val = (value & USHRT_MAX);
   2f888:	80a5      	strh	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   2f88a:	7023      	strb	r3, [r4, #0]
	return 0;
   2f88c:	2000      	movs	r0, #0
   2f88e:	e7ef      	b.n	2f870 <at_params_short_put+0xa>

0002f890 <at_params_int_put>:


int at_params_int_put(const struct at_param_list *list, size_t index,
			u32_t value)
{
   2f890:	b538      	push	{r3, r4, r5, lr}
   2f892:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   2f894:	b910      	cbnz	r0, 2f89c <at_params_int_put+0xc>
		return -EINVAL;
   2f896:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   2f89a:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   2f89c:	6843      	ldr	r3, [r0, #4]
   2f89e:	2b00      	cmp	r3, #0
   2f8a0:	d0f9      	beq.n	2f896 <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   2f8a2:	f7e6 fe89 	bl	165b8 <at_params_get>
	if (param == NULL) {
   2f8a6:	4604      	mov	r4, r0
   2f8a8:	2800      	cmp	r0, #0
   2f8aa:	d0f4      	beq.n	2f896 <at_params_int_put+0x6>
	at_param_clear(param);
   2f8ac:	f7e6 fea6 	bl	165fc <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   2f8b0:	2302      	movs	r3, #2
	param->value.int_val = value;
   2f8b2:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_NUM_INT;
   2f8b4:	7023      	strb	r3, [r4, #0]
	return 0;
   2f8b6:	2000      	movs	r0, #0
   2f8b8:	e7ef      	b.n	2f89a <at_params_int_put+0xa>

0002f8ba <at_params_string_put>:


int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   2f8ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f8bc:	4614      	mov	r4, r2
   2f8be:	461e      	mov	r6, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   2f8c0:	b910      	cbnz	r0, 2f8c8 <at_params_string_put+0xe>
		return -EINVAL;
   2f8c2:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val =	param_value;

	return 0;
}
   2f8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   2f8c8:	6843      	ldr	r3, [r0, #4]
   2f8ca:	2b00      	cmp	r3, #0
   2f8cc:	d0f9      	beq.n	2f8c2 <at_params_string_put+0x8>
   2f8ce:	2a00      	cmp	r2, #0
   2f8d0:	d0f7      	beq.n	2f8c2 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   2f8d2:	f7e6 fe71 	bl	165b8 <at_params_get>
	if (param == NULL) {
   2f8d6:	4605      	mov	r5, r0
   2f8d8:	2800      	cmp	r0, #0
   2f8da:	d0f2      	beq.n	2f8c2 <at_params_string_put+0x8>
	char *param_value = k_malloc(str_len + 1);
   2f8dc:	1c70      	adds	r0, r6, #1
   2f8de:	f7f7 facb 	bl	26e78 <k_malloc>
	if (param_value == NULL) {
   2f8e2:	4607      	mov	r7, r0
   2f8e4:	b168      	cbz	r0, 2f902 <at_params_string_put+0x48>
   2f8e6:	4621      	mov	r1, r4
	param_value[str_len] = '\0';
   2f8e8:	2400      	movs	r4, #0
   2f8ea:	4632      	mov	r2, r6
   2f8ec:	f7de f974 	bl	dbd8 <memcpy>
	at_param_clear(param);
   2f8f0:	4628      	mov	r0, r5
	param_value[str_len] = '\0';
   2f8f2:	55bc      	strb	r4, [r7, r6]
	at_param_clear(param);
   2f8f4:	f7e6 fe82 	bl	165fc <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   2f8f8:	2303      	movs	r3, #3
	param->value.str_val =	param_value;
   2f8fa:	606f      	str	r7, [r5, #4]
	param->type = AT_PARAM_TYPE_STRING;
   2f8fc:	702b      	strb	r3, [r5, #0]
	return 0;
   2f8fe:	4620      	mov	r0, r4
   2f900:	e7e1      	b.n	2f8c6 <at_params_string_put+0xc>
		return -ENOMEM;
   2f902:	f06f 000b 	mvn.w	r0, #11
   2f906:	e7de      	b.n	2f8c6 <at_params_string_put+0xc>

0002f908 <at_params_short_get>:
}


int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   2f908:	b510      	push	{r4, lr}
   2f90a:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2f90c:	b910      	cbnz	r0, 2f914 <at_params_short_get+0xc>
		return -EINVAL;
   2f90e:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.short_val;
	return 0;
}
   2f912:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   2f914:	6843      	ldr	r3, [r0, #4]
   2f916:	2b00      	cmp	r3, #0
   2f918:	d0f9      	beq.n	2f90e <at_params_short_get+0x6>
   2f91a:	2a00      	cmp	r2, #0
   2f91c:	d0f7      	beq.n	2f90e <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   2f91e:	f7e6 fe4b 	bl	165b8 <at_params_get>
	if (param == NULL) {
   2f922:	2800      	cmp	r0, #0
   2f924:	d0f3      	beq.n	2f90e <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   2f926:	7803      	ldrb	r3, [r0, #0]
   2f928:	2b01      	cmp	r3, #1
   2f92a:	d1f0      	bne.n	2f90e <at_params_short_get+0x6>
	*value = param->value.short_val;
   2f92c:	8883      	ldrh	r3, [r0, #4]
	return 0;
   2f92e:	2000      	movs	r0, #0
	*value = param->value.short_val;
   2f930:	8023      	strh	r3, [r4, #0]
	return 0;
   2f932:	e7ee      	b.n	2f912 <at_params_short_get+0xa>

0002f934 <at_params_string_get>:
}


int at_params_string_get(const struct at_param_list *list, size_t index,
			char *value, size_t len)
{
   2f934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f936:	4616      	mov	r6, r2
   2f938:	461f      	mov	r7, r3
	if (list == NULL || list->params == NULL || value == NULL) {
   2f93a:	b910      	cbnz	r0, 2f942 <at_params_string_get+0xe>
		return -EINVAL;
   2f93c:	f06f 0015 	mvn.w	r0, #21
		return -ENOMEM;
	}

	memcpy(value, param->value.str_val, param_len);
	return param_len;
}
   2f940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   2f942:	6843      	ldr	r3, [r0, #4]
   2f944:	2b00      	cmp	r3, #0
   2f946:	d0f9      	beq.n	2f93c <at_params_string_get+0x8>
   2f948:	2a00      	cmp	r2, #0
   2f94a:	d0f7      	beq.n	2f93c <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   2f94c:	f7e6 fe34 	bl	165b8 <at_params_get>
	if (param == NULL) {
   2f950:	4605      	mov	r5, r0
   2f952:	2800      	cmp	r0, #0
   2f954:	d0f2      	beq.n	2f93c <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   2f956:	7803      	ldrb	r3, [r0, #0]
   2f958:	2b03      	cmp	r3, #3
   2f95a:	d1ef      	bne.n	2f93c <at_params_string_get+0x8>
		return strlen(param->value.str_val);
   2f95c:	6840      	ldr	r0, [r0, #4]
   2f95e:	f7fb f9ad 	bl	2acbc <strlen>
	if (len < param_len) {
   2f962:	4287      	cmp	r7, r0
		return strlen(param->value.str_val);
   2f964:	4604      	mov	r4, r0
	if (len < param_len) {
   2f966:	d306      	bcc.n	2f976 <at_params_string_get+0x42>
   2f968:	4602      	mov	r2, r0
   2f96a:	6869      	ldr	r1, [r5, #4]
   2f96c:	4630      	mov	r0, r6
   2f96e:	f7de f933 	bl	dbd8 <memcpy>
	return param_len;
   2f972:	4620      	mov	r0, r4
   2f974:	e7e4      	b.n	2f940 <at_params_string_get+0xc>
		return -ENOMEM;
   2f976:	f06f 000b 	mvn.w	r0, #11
   2f97a:	e7e1      	b.n	2f940 <at_params_string_get+0xc>

0002f97c <at_params_valid_count_get>:


u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   2f97c:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   2f97e:	4605      	mov	r5, r0
   2f980:	b180      	cbz	r0, 2f9a4 <at_params_valid_count_get+0x28>
   2f982:	6844      	ldr	r4, [r0, #4]
   2f984:	b134      	cbz	r4, 2f994 <at_params_valid_count_get+0x18>
		return 0;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   2f986:	2100      	movs	r1, #0
   2f988:	f7e6 fe16 	bl	165b8 <at_params_get>
	size_t valid_i = 0;
   2f98c:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_EMPTY) {
   2f98e:	b108      	cbz	r0, 2f994 <at_params_valid_count_get+0x18>
   2f990:	7803      	ldrb	r3, [r0, #0]
   2f992:	b90b      	cbnz	r3, 2f998 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   2f994:	4620      	mov	r0, r4
   2f996:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   2f998:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   2f99a:	4621      	mov	r1, r4
   2f99c:	4628      	mov	r0, r5
   2f99e:	f7e6 fe0b 	bl	165b8 <at_params_get>
   2f9a2:	e7f4      	b.n	2f98e <at_params_valid_count_get+0x12>
		return 0;
   2f9a4:	4604      	mov	r4, r0
   2f9a6:	e7f5      	b.n	2f994 <at_params_valid_count_get+0x18>

0002f9a8 <unpack_uint16>:
 * @retval 0 if the procedure is successful.
 * @retval -EINVAL if the offset is greater than or equal to the buffer length.
 */
static int unpack_uint16(u16_t *val, u32_t buffer_len, u8_t *buffer,
			 u32_t *offset)
{
   2f9a8:	b510      	push	{r4, lr}
	int err_code = -EINVAL;

	if (buffer_len > *offset) {
   2f9aa:	681c      	ldr	r4, [r3, #0]
   2f9ac:	428c      	cmp	r4, r1
   2f9ae:	d20d      	bcs.n	2f9cc <unpack_uint16+0x24>
		const u32_t available_len = buffer_len - *offset;
   2f9b0:	1b09      	subs	r1, r1, r4

		MQTT_TRC(">> BL:%08x, B:%p, O:%08x A:%08x", buffer_len, buffer,
			 *offset, available_len);

		if (available_len >= sizeof(u16_t)) {
   2f9b2:	2901      	cmp	r1, #1
   2f9b4:	d00a      	beq.n	2f9cc <unpack_uint16+0x24>
			/* Create unit16 value. */
			*val = ((buffer[*offset] & 0x00FF) << 8); /* MSB */
   2f9b6:	5d11      	ldrb	r1, [r2, r4]
			*val |= (buffer[*offset + 1] & 0x00FF); /* LSB */
   2f9b8:	4422      	add	r2, r4
			*val = ((buffer[*offset] & 0x00FF) << 8); /* MSB */
   2f9ba:	0209      	lsls	r1, r1, #8
   2f9bc:	8001      	strh	r1, [r0, #0]
			*val |= (buffer[*offset + 1] & 0x00FF); /* LSB */
   2f9be:	7852      	ldrb	r2, [r2, #1]

			/* Increment offset. */
			*offset += sizeof(u16_t);
   2f9c0:	3402      	adds	r4, #2
			*val |= (buffer[*offset + 1] & 0x00FF); /* LSB */
   2f9c2:	4311      	orrs	r1, r2
   2f9c4:	8001      	strh	r1, [r0, #0]

			/* Indicate success. */
			err_code = 0;
   2f9c6:	2000      	movs	r0, #0
			*offset += sizeof(u16_t);
   2f9c8:	601c      	str	r4, [r3, #0]
	}

	MQTT_TRC("<< result:0x%08x val:0x%04x", err_code, *val);

	return err_code;
}
   2f9ca:	bd10      	pop	{r4, pc}
	int err_code = -EINVAL;
   2f9cc:	f06f 0015 	mvn.w	r0, #21
	return err_code;
   2f9d0:	e7fb      	b.n	2f9ca <unpack_uint16+0x22>

0002f9d2 <packet_length_decode>:
	return err_code;
}

int packet_length_decode(u8_t *buffer, u32_t buffer_len,
			 u32_t *remaining_length, u32_t *offset)
{
   2f9d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t index = *offset;
	u32_t length = 0;
	u8_t shift = 0;
   2f9d4:	2400      	movs	r4, #0
	u32_t length = 0;
   2f9d6:	4626      	mov	r6, r4
	u32_t index = *offset;
   2f9d8:	681d      	ldr	r5, [r3, #0]

	do {
		if (index >= buffer_len) {
   2f9da:	428d      	cmp	r5, r1
   2f9dc:	d210      	bcs.n	2fa00 <packet_length_decode+0x2e>
			return -EINVAL;
		}

		length += ((u32_t)buffer[index] & MQTT_LENGTH_VALUE_MASK)
   2f9de:	f810 c005 	ldrb.w	ip, [r0, r5]
								<< shift;
		shift += MQTT_LENGTH_SHIFT;
	} while ((buffer[index++] & MQTT_LENGTH_CONTINUATION_BIT) != 0);
   2f9e2:	3501      	adds	r5, #1
		length += ((u32_t)buffer[index] & MQTT_LENGTH_VALUE_MASK)
   2f9e4:	f00c 077f 	and.w	r7, ip, #127	; 0x7f
								<< shift;
   2f9e8:	40a7      	lsls	r7, r4
	} while ((buffer[index++] & MQTT_LENGTH_CONTINUATION_BIT) != 0);
   2f9ea:	f01c 0f80 	tst.w	ip, #128	; 0x80
		shift += MQTT_LENGTH_SHIFT;
   2f9ee:	f104 0407 	add.w	r4, r4, #7
		length += ((u32_t)buffer[index] & MQTT_LENGTH_VALUE_MASK)
   2f9f2:	443e      	add	r6, r7
		shift += MQTT_LENGTH_SHIFT;
   2f9f4:	b2e4      	uxtb	r4, r4
	} while ((buffer[index++] & MQTT_LENGTH_CONTINUATION_BIT) != 0);
   2f9f6:	d1f0      	bne.n	2f9da <packet_length_decode+0x8>
	*offset = index;
	*remaining_length = length;

	MQTT_TRC("RL:0x%08x RLS:0x%08x", length, index);

	return 0;
   2f9f8:	2000      	movs	r0, #0
	*offset = index;
   2f9fa:	601d      	str	r5, [r3, #0]
	*remaining_length = length;
   2f9fc:	6016      	str	r6, [r2, #0]
}
   2f9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EINVAL;
   2fa00:	f06f 0015 	mvn.w	r0, #21
   2fa04:	e7fb      	b.n	2f9fe <packet_length_decode+0x2c>

0002fa06 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, u8_t *data,
		       u32_t datalen, u32_t offset,
		       struct mqtt_connack_param *param)
{
   2fa06:	b510      	push	{r4, lr}
	if (buffer_len > *offset) {
   2fa08:	429a      	cmp	r2, r3
{
   2fa0a:	9c02      	ldr	r4, [sp, #8]
	if (buffer_len > *offset) {
   2fa0c:	d802      	bhi.n	2fa14 <connect_ack_decode+0xe>
	int err_code = -EINVAL;
   2fa0e:	f06f 0015 	mvn.w	r0, #21
	if (err_code == 0) {
		param->return_code = (enum mqtt_conn_return_code)ret_code;
	}

	return err_code;
}
   2fa12:	bd10      	pop	{r4, pc}
		if (client->protocol_version == MQTT_VERSION_3_1_1) {
   2fa14:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
   2fa18:	2804      	cmp	r0, #4
				flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   2fa1a:	bf08      	it	eq
   2fa1c:	5cc8      	ldrbeq	r0, [r1, r3]
			*offset += sizeof(u8_t);
   2fa1e:	f103 0301 	add.w	r3, r3, #1
				flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   2fa22:	bf04      	itt	eq
   2fa24:	f000 0001 	andeq.w	r0, r0, #1
			param->session_present_flag =
   2fa28:	7020      	strbeq	r0, [r4, #0]
	if (buffer_len > *offset) {
   2fa2a:	429a      	cmp	r2, r3
   2fa2c:	d9ef      	bls.n	2fa0e <connect_ack_decode+0x8>
			*val = buffer[*offset];
   2fa2e:	5ccb      	ldrb	r3, [r1, r3]
		param->return_code = (enum mqtt_conn_return_code)ret_code;
   2fa30:	2000      	movs	r0, #0
   2fa32:	7063      	strb	r3, [r4, #1]
	return err_code;
   2fa34:	e7ed      	b.n	2fa12 <connect_ack_decode+0xc>

0002fa36 <publish_decode>:

int publish_decode(u8_t *data, u32_t datalen, u32_t offset,
		   struct mqtt_publish_param *param)
{
   2fa36:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2fa3a:	461c      	mov	r4, r3
	int err_code;

	param->dup_flag = data[0] & MQTT_HEADER_DUP_MASK;
   2fa3c:	7d9b      	ldrb	r3, [r3, #22]
{
   2fa3e:	f10d 0810 	add.w	r8, sp, #16
	param->dup_flag = data[0] & MQTT_HEADER_DUP_MASK;
   2fa42:	f36f 0300 	bfc	r3, #0, #1
   2fa46:	75a3      	strb	r3, [r4, #22]
{
   2fa48:	f848 2d0c 	str.w	r2, [r8, #-12]!
	param->retain_flag =
   2fa4c:	7802      	ldrb	r2, [r0, #0]
{
   2fa4e:	4605      	mov	r5, r0
	param->retain_flag =
   2fa50:	f362 0341 	bfi	r3, r2, #1, #1
   2fa54:	75a3      	strb	r3, [r4, #22]
		data[0] & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos =
		((data[0] & MQTT_HEADER_QOS_MASK) >> 1);
   2fa56:	7803      	ldrb	r3, [r0, #0]
	err_code = unpack_uint16(&utf8_strlen, buffer_len, buffer, offset);
   2fa58:	4602      	mov	r2, r0
		((data[0] & MQTT_HEADER_QOS_MASK) >> 1);
   2fa5a:	f3c3 0341 	ubfx	r3, r3, #1, #2
	param->message.topic.qos =
   2fa5e:	7223      	strb	r3, [r4, #8]
	err_code = unpack_uint16(&utf8_strlen, buffer_len, buffer, offset);
   2fa60:	f10d 000e 	add.w	r0, sp, #14
   2fa64:	4643      	mov	r3, r8
{
   2fa66:	460e      	mov	r6, r1
	err_code = unpack_uint16(&utf8_strlen, buffer_len, buffer, offset);
   2fa68:	f7ff ff9e 	bl	2f9a8 <unpack_uint16>
	str->utf8 = NULL;
   2fa6c:	2300      	movs	r3, #0
	if (err_code == 0) {
   2fa6e:	4607      	mov	r7, r0
	str->size = 0;
   2fa70:	e9c4 3300 	strd	r3, r3, [r4]
	if (err_code == 0) {
   2fa74:	bb00      	cbnz	r0, 2fab8 <publish_decode+0x82>
		const u32_t available_len = buffer_len - *offset;
   2fa76:	9b01      	ldr	r3, [sp, #4]
		if (utf8_strlen <= available_len) {
   2fa78:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		const u32_t available_len = buffer_len - *offset;
   2fa7c:	1af1      	subs	r1, r6, r3
		if (utf8_strlen <= available_len) {
   2fa7e:	4291      	cmp	r1, r2
   2fa80:	d30d      	bcc.n	2fa9e <publish_decode+0x68>
			if (utf8_strlen) {
   2fa82:	b10a      	cbz	r2, 2fa88 <publish_decode+0x52>
				str->utf8 = &buffer[*offset];
   2fa84:	18e9      	adds	r1, r5, r3
   2fa86:	6021      	str	r1, [r4, #0]
			*offset += utf8_strlen;
   2fa88:	4413      	add	r3, r2
   2fa8a:	9301      	str	r3, [sp, #4]
	err_code = unpack_utf8_str(
		&param->message.topic.topic,
		datalen, data, &offset);

	if (err_code == 0) {
		if (param->message.topic.qos) {
   2fa8c:	7a23      	ldrb	r3, [r4, #8]
			str->size = utf8_strlen;
   2fa8e:	6062      	str	r2, [r4, #4]
		if (param->message.topic.qos) {
   2fa90:	b943      	cbnz	r3, 2faa4 <publish_decode+0x6e>
	if (buffer_len >= *offset) {
   2fa92:	9a01      	ldr	r2, [sp, #4]
   2fa94:	2300      	movs	r3, #0
   2fa96:	4296      	cmp	r6, r2
   2fa98:	d212      	bcs.n	2fac0 <publish_decode+0x8a>
					  datalen, data, &offset);

		/* Zero length publish messages are permitted. */
		if (err_code != 0) {
			param->message.payload.data = NULL;
			param->message.payload.len = 0;
   2fa9a:	e9c4 3303 	strd	r3, r3, [r4, #12]
	int err_code = -EINVAL;
   2fa9e:	f06f 0715 	mvn.w	r7, #21
		}
	}

	return err_code;
   2faa2:	e009      	b.n	2fab8 <publish_decode+0x82>
			err_code = unpack_uint16(&param->message_id,
   2faa4:	4643      	mov	r3, r8
   2faa6:	462a      	mov	r2, r5
   2faa8:	4631      	mov	r1, r6
   2faaa:	f104 0014 	add.w	r0, r4, #20
   2faae:	f7ff ff7b 	bl	2f9a8 <unpack_uint16>
	if (err_code == 0) {
   2fab2:	2800      	cmp	r0, #0
   2fab4:	d0ed      	beq.n	2fa92 <publish_decode+0x5c>
   2fab6:	4607      	mov	r7, r0
}
   2fab8:	4638      	mov	r0, r7
   2faba:	b004      	add	sp, #16
   2fabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (available_len) {
   2fac0:	1ab6      	subs	r6, r6, r2
		str->len = 0;
   2fac2:	e9c4 3303 	strd	r3, r3, [r4, #12]
		if (available_len) {
   2fac6:	d0f7      	beq.n	2fab8 <publish_decode+0x82>
			str->data = &buffer[*offset];
   2fac8:	4415      	add	r5, r2
			str->len = available_len;
   2faca:	e9c4 5603 	strd	r5, r6, [r4, #12]
   2face:	e7f3      	b.n	2fab8 <publish_decode+0x82>

0002fad0 <publish_ack_decode>:

int publish_ack_decode(u8_t *data, u32_t datalen, u32_t offset,
		       struct mqtt_puback_param *param)
{
   2fad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2fad2:	461d      	mov	r5, r3
   2fad4:	ac02      	add	r4, sp, #8
   2fad6:	f844 2d04 	str.w	r2, [r4, #-4]!
	return unpack_uint16(&param->message_id, datalen, data, &offset);
   2fada:	4623      	mov	r3, r4
   2fadc:	4602      	mov	r2, r0
   2fade:	4628      	mov	r0, r5
   2fae0:	f7ff ff62 	bl	2f9a8 <unpack_uint16>
}
   2fae4:	b003      	add	sp, #12
   2fae6:	bd30      	pop	{r4, r5, pc}

0002fae8 <publish_receive_decode>:

int publish_receive_decode(u8_t *data, u32_t datalen, u32_t offset,
			   struct mqtt_pubrec_param *param)
{
   2fae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2faea:	461d      	mov	r5, r3
   2faec:	ac02      	add	r4, sp, #8
   2faee:	f844 2d04 	str.w	r2, [r4, #-4]!
	return unpack_uint16(&param->message_id, datalen, data, &offset);
   2faf2:	4623      	mov	r3, r4
   2faf4:	4602      	mov	r2, r0
   2faf6:	4628      	mov	r0, r5
   2faf8:	f7ff ff56 	bl	2f9a8 <unpack_uint16>
}
   2fafc:	b003      	add	sp, #12
   2fafe:	bd30      	pop	{r4, r5, pc}

0002fb00 <publish_release_decode>:

int publish_release_decode(u8_t *data, u32_t datalen, u32_t offset,
			   struct mqtt_pubrel_param *param)
{
   2fb00:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2fb02:	461d      	mov	r5, r3
   2fb04:	ac02      	add	r4, sp, #8
   2fb06:	f844 2d04 	str.w	r2, [r4, #-4]!
	return unpack_uint16(&param->message_id, datalen, data, &offset);
   2fb0a:	4623      	mov	r3, r4
   2fb0c:	4602      	mov	r2, r0
   2fb0e:	4628      	mov	r0, r5
   2fb10:	f7ff ff4a 	bl	2f9a8 <unpack_uint16>
}
   2fb14:	b003      	add	sp, #12
   2fb16:	bd30      	pop	{r4, r5, pc}

0002fb18 <publish_complete_decode>:

int publish_complete_decode(u8_t *data, u32_t datalen, u32_t offset,
			    struct mqtt_pubcomp_param *param)
{
   2fb18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2fb1a:	461d      	mov	r5, r3
   2fb1c:	ac02      	add	r4, sp, #8
   2fb1e:	f844 2d04 	str.w	r2, [r4, #-4]!
	return unpack_uint16(&param->message_id, datalen, data, &offset);
   2fb22:	4623      	mov	r3, r4
   2fb24:	4602      	mov	r2, r0
   2fb26:	4628      	mov	r0, r5
   2fb28:	f7ff ff3e 	bl	2f9a8 <unpack_uint16>
}
   2fb2c:	b003      	add	sp, #12
   2fb2e:	bd30      	pop	{r4, r5, pc}

0002fb30 <subscribe_ack_decode>:

int subscribe_ack_decode(u8_t *data, u32_t datalen, u32_t offset,
			 struct mqtt_suback_param *param)
{
   2fb30:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2fb32:	4606      	mov	r6, r0
   2fb34:	461c      	mov	r4, r3
   2fb36:	a802      	add	r0, sp, #8
   2fb38:	f840 2d04 	str.w	r2, [r0, #-4]!
	int err_code;

	err_code = unpack_uint16(&param->message_id, datalen, data, &offset);
   2fb3c:	4603      	mov	r3, r0
   2fb3e:	4632      	mov	r2, r6
   2fb40:	4620      	mov	r0, r4
{
   2fb42:	460d      	mov	r5, r1
	err_code = unpack_uint16(&param->message_id, datalen, data, &offset);
   2fb44:	f7ff ff30 	bl	2f9a8 <unpack_uint16>

	if (err_code == 0) {
   2fb48:	b948      	cbnz	r0, 2fb5e <subscribe_ack_decode+0x2e>
	if (buffer_len >= *offset) {
   2fb4a:	9b01      	ldr	r3, [sp, #4]
   2fb4c:	429d      	cmp	r5, r3
   2fb4e:	d308      	bcc.n	2fb62 <subscribe_ack_decode+0x32>
		if (available_len) {
   2fb50:	1aed      	subs	r5, r5, r3
		str->len = 0;
   2fb52:	e9c4 0001 	strd	r0, r0, [r4, #4]
		if (available_len) {
   2fb56:	d002      	beq.n	2fb5e <subscribe_ack_decode+0x2e>
			str->data = &buffer[*offset];
   2fb58:	441e      	add	r6, r3
			str->len = available_len;
   2fb5a:	e9c4 6501 	strd	r6, r5, [r4, #4]
		err_code = unpack_data(&param->return_codes, datalen,
					  data, &offset);
	}

	return err_code;
}
   2fb5e:	b002      	add	sp, #8
   2fb60:	bd70      	pop	{r4, r5, r6, pc}
	int err_code = -EINVAL;
   2fb62:	f06f 0015 	mvn.w	r0, #21
	return err_code;
   2fb66:	e7fa      	b.n	2fb5e <subscribe_ack_decode+0x2e>

0002fb68 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(u8_t *data, u32_t datalen, u32_t offset,
			   struct mqtt_unsuback_param *param)
{
   2fb68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2fb6a:	461d      	mov	r5, r3
   2fb6c:	ac02      	add	r4, sp, #8
   2fb6e:	f844 2d04 	str.w	r2, [r4, #-4]!
	return unpack_uint16(&param->message_id, datalen, data, &offset);
   2fb72:	4623      	mov	r3, r4
   2fb74:	4602      	mov	r2, r0
   2fb76:	4628      	mov	r0, r5
   2fb78:	f7ff ff16 	bl	2f9a8 <unpack_uint16>
}
   2fb7c:	b003      	add	sp, #12
   2fb7e:	bd30      	pop	{r4, r5, pc}

0002fb80 <pack_uint16.constprop.6>:
static int pack_uint16(u16_t val, u32_t buffer_len, u8_t *buffer,
   2fb80:	b510      	push	{r4, lr}
	if (buffer_len > *offset) {
   2fb82:	f240 74fa 	movw	r4, #2042	; 0x7fa
   2fb86:	6813      	ldr	r3, [r2, #0]
   2fb88:	42a3      	cmp	r3, r4
   2fb8a:	d80e      	bhi.n	2fbaa <pack_uint16.constprop.6+0x2a>
		const u32_t available_len = buffer_len - *offset;
   2fb8c:	f5c3 64ff 	rsb	r4, r3, #2040	; 0x7f8
   2fb90:	3403      	adds	r4, #3
		if (available_len >= sizeof(u16_t)) {
   2fb92:	2c01      	cmp	r4, #1
   2fb94:	d009      	beq.n	2fbaa <pack_uint16.constprop.6+0x2a>
			buffer[*offset] = (val >> 8) & 0xFF;
   2fb96:	0a04      	lsrs	r4, r0, #8
   2fb98:	54cc      	strb	r4, [r1, r3]
			buffer[*offset + 1] = val & 0xFF;
   2fb9a:	6813      	ldr	r3, [r2, #0]
   2fb9c:	4419      	add	r1, r3
   2fb9e:	7048      	strb	r0, [r1, #1]
			err_code = 0;
   2fba0:	2000      	movs	r0, #0
			*offset += sizeof(u16_t);
   2fba2:	6813      	ldr	r3, [r2, #0]
   2fba4:	3302      	adds	r3, #2
   2fba6:	6013      	str	r3, [r2, #0]
}
   2fba8:	bd10      	pop	{r4, pc}
	int err_code = -EINVAL;
   2fbaa:	f06f 0015 	mvn.w	r0, #21
   2fbae:	e7fb      	b.n	2fba8 <pack_uint16.constprop.6+0x28>

0002fbb0 <pack_utf8_str.constprop.5>:
static int pack_utf8_str(const struct mqtt_utf8 *str, u32_t buffer_len,
   2fbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fbb2:	4606      	mov	r6, r0
	if (buffer_len > *offset) {
   2fbb4:	f240 70fa 	movw	r0, #2042	; 0x7fa
   2fbb8:	6813      	ldr	r3, [r2, #0]
static int pack_utf8_str(const struct mqtt_utf8 *str, u32_t buffer_len,
   2fbba:	460f      	mov	r7, r1
	if (buffer_len > *offset) {
   2fbbc:	4283      	cmp	r3, r0
static int pack_utf8_str(const struct mqtt_utf8 *str, u32_t buffer_len,
   2fbbe:	4615      	mov	r5, r2
	if (buffer_len > *offset) {
   2fbc0:	d817      	bhi.n	2fbf2 <pack_utf8_str.constprop.5+0x42>
		if (available_len >= GET_UT8STR_BUFFER_SIZE(str)) {
   2fbc2:	6870      	ldr	r0, [r6, #4]
		const u32_t available_len = buffer_len - *offset;
   2fbc4:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
   2fbc8:	3303      	adds	r3, #3
		if (available_len >= GET_UT8STR_BUFFER_SIZE(str)) {
   2fbca:	1c84      	adds	r4, r0, #2
   2fbcc:	42a3      	cmp	r3, r4
   2fbce:	d313      	bcc.n	2fbf8 <pack_utf8_str.constprop.5+0x48>
			err_code = pack_uint16(str->size, buffer_len,
   2fbd0:	b280      	uxth	r0, r0
   2fbd2:	f7ff ffd5 	bl	2fb80 <pack_uint16.constprop.6>
			if (err_code == 0) {
   2fbd6:	4604      	mov	r4, r0
   2fbd8:	b948      	cbnz	r0, 2fbee <pack_utf8_str.constprop.5+0x3e>
				memcpy(&buffer[*offset], str->utf8,
   2fbda:	6810      	ldr	r0, [r2, #0]
   2fbdc:	e9d6 1200 	ldrd	r1, r2, [r6]
   2fbe0:	4438      	add	r0, r7
   2fbe2:	f7dd fff9 	bl	dbd8 <memcpy>
				*offset += str->size;
   2fbe6:	682b      	ldr	r3, [r5, #0]
   2fbe8:	6872      	ldr	r2, [r6, #4]
   2fbea:	4413      	add	r3, r2
   2fbec:	602b      	str	r3, [r5, #0]
}
   2fbee:	4620      	mov	r0, r4
   2fbf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int err_code = -EINVAL;
   2fbf2:	f06f 0415 	mvn.w	r4, #21
   2fbf6:	e7fa      	b.n	2fbee <pack_utf8_str.constprop.5+0x3e>
			err_code = -ENOMEM;
   2fbf8:	f06f 040b 	mvn.w	r4, #11
   2fbfc:	e7f7      	b.n	2fbee <pack_utf8_str.constprop.5+0x3e>

0002fbfe <mqtt_encode_fixed_header.part.0>:
static u32_t mqtt_encode_fixed_header(u8_t message_type, u32_t length,
   2fbfe:	b570      	push	{r4, r5, r6, lr}
   2fc00:	460b      	mov	r3, r1
	u16_t index = 0;
   2fc02:	2400      	movs	r4, #0
		index++;
   2fc04:	3401      	adds	r4, #1
	} while (remaining_length > 0);
   2fc06:	09db      	lsrs	r3, r3, #7
		index++;
   2fc08:	b2a4      	uxth	r4, r4
	} while (remaining_length > 0);
   2fc0a:	d1fb      	bne.n	2fc04 <mqtt_encode_fixed_header.part.0+0x6>
		u8_t *mqtt_header = *packet - offset;
   2fc0c:	43e4      	mvns	r4, r4
   2fc0e:	6815      	ldr	r5, [r2, #0]
   2fc10:	192e      	adds	r6, r5, r4
		buffer[*offset] = val;
   2fc12:	5528      	strb	r0, [r5, r4]
   2fc14:	460c      	mov	r4, r1
			buff[offset + index] = remaining_length &
   2fc16:	f004 057f 	and.w	r5, r4, #127	; 0x7f
   2fc1a:	b298      	uxth	r0, r3
		if (remaining_length > 0) {
   2fc1c:	09e4      	lsrs	r4, r4, #7
			buff[offset + index] = remaining_length &
   2fc1e:	f100 0001 	add.w	r0, r0, #1
				buff[offset + index] |=
   2fc22:	bf18      	it	ne
   2fc24:	f065 057f 	ornne	r5, r5, #127	; 0x7f
   2fc28:	5435      	strb	r5, [r6, r0]
   2fc2a:	3301      	adds	r3, #1
	} while (remaining_length > 0);
   2fc2c:	2c00      	cmp	r4, #0
   2fc2e:	d1f2      	bne.n	2fc16 <mqtt_encode_fixed_header.part.0+0x18>
		packet_length = (length + offset);
   2fc30:	3101      	adds	r1, #1
		*packet = mqtt_header;
   2fc32:	6016      	str	r6, [r2, #0]
}
   2fc34:	fa11 f080 	uxtah	r0, r1, r0
   2fc38:	bd70      	pop	{r4, r5, r6, pc}

0002fc3a <mqtt_message_id_only_enc.isra.1>:
static int mqtt_message_id_only_enc(const struct mqtt_client *client,
   2fc3a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	u32_t offset = 0;
   2fc3e:	2400      	movs	r4, #0
static int mqtt_message_id_only_enc(const struct mqtt_client *client,
   2fc40:	4688      	mov	r8, r1
   2fc42:	461e      	mov	r6, r3
   2fc44:	9f08      	ldr	r7, [sp, #32]
	u32_t offset = 0;
   2fc46:	9400      	str	r4, [sp, #0]
	if (message_id == 0) {
   2fc48:	4615      	mov	r5, r2
   2fc4a:	b322      	cbz	r2, 2fc96 <mqtt_message_id_only_enc.isra.1+0x5c>
	payload = &client->tx_buf[MQTT_FIXED_HEADER_EXTENDED_SIZE];
   2fc4c:	6803      	ldr	r3, [r0, #0]
__ssp_bos_icheck3(memset, void *, int)
   2fc4e:	f240 72fb 	movw	r2, #2043	; 0x7fb
   2fc52:	3305      	adds	r3, #5
   2fc54:	4621      	mov	r1, r4
   2fc56:	4618      	mov	r0, r3
   2fc58:	9301      	str	r3, [sp, #4]
   2fc5a:	f7fa fe43 	bl	2a8e4 <memset>
	err_code = pack_uint16(message_id,
   2fc5e:	466a      	mov	r2, sp
   2fc60:	4601      	mov	r1, r0
   2fc62:	4628      	mov	r0, r5
   2fc64:	f7ff ff8c 	bl	2fb80 <pack_uint16.constprop.6>
	if (err_code == 0) {
   2fc68:	4605      	mov	r5, r0
   2fc6a:	b988      	cbnz	r0, 2fc90 <mqtt_message_id_only_enc.isra.1+0x56>
		mqtt_packetlen = mqtt_encode_fixed_header(message_type,
   2fc6c:	9900      	ldr	r1, [sp, #0]
	if (length <= MQTT_MAX_PAYLOAD_SIZE) {
   2fc6e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   2fc72:	d20a      	bcs.n	2fc8a <mqtt_message_id_only_enc.isra.1+0x50>
   2fc74:	aa01      	add	r2, sp, #4
   2fc76:	4640      	mov	r0, r8
   2fc78:	f7ff ffc1 	bl	2fbfe <mqtt_encode_fixed_header.part.0>
		*packet = payload;
   2fc7c:	9b01      	ldr	r3, [sp, #4]
		*packet_length = mqtt_packetlen;
   2fc7e:	6038      	str	r0, [r7, #0]
		*packet = payload;
   2fc80:	6033      	str	r3, [r6, #0]
}
   2fc82:	4628      	mov	r0, r5
   2fc84:	b002      	add	sp, #8
   2fc86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	u32_t packet_length = 0xFFFFFFFF;
   2fc8a:	f04f 30ff 	mov.w	r0, #4294967295
   2fc8e:	e7f5      	b.n	2fc7c <mqtt_message_id_only_enc.isra.1+0x42>
		*packet_length = 0;
   2fc90:	603c      	str	r4, [r7, #0]
		*packet = NULL;
   2fc92:	6034      	str	r4, [r6, #0]
   2fc94:	e7f5      	b.n	2fc82 <mqtt_message_id_only_enc.isra.1+0x48>
		return -EINVAL;
   2fc96:	f06f 0515 	mvn.w	r5, #21
   2fc9a:	e7f2      	b.n	2fc82 <mqtt_message_id_only_enc.isra.1+0x48>

0002fc9c <publish_encode>:
{
   2fc9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2fc9e:	461f      	mov	r7, r3
	u32_t offset = 0;
   2fca0:	2300      	movs	r3, #0
   2fca2:	9300      	str	r3, [sp, #0]
	if ((param->message.topic.qos) && (param->message_id == 0)) {
   2fca4:	7a0b      	ldrb	r3, [r1, #8]
{
   2fca6:	460c      	mov	r4, r1
   2fca8:	4616      	mov	r6, r2
	if ((param->message.topic.qos) && (param->message_id == 0)) {
   2fcaa:	b113      	cbz	r3, 2fcb2 <publish_encode+0x16>
   2fcac:	8a8b      	ldrh	r3, [r1, #20]
   2fcae:	2b00      	cmp	r3, #0
   2fcb0:	d054      	beq.n	2fd5c <publish_encode+0xc0>
	payload = &client->tx_buf[MQTT_FIXED_HEADER_EXTENDED_SIZE];
   2fcb2:	6c03      	ldr	r3, [r0, #64]	; 0x40
   2fcb4:	f240 72fb 	movw	r2, #2043	; 0x7fb
   2fcb8:	3305      	adds	r3, #5
   2fcba:	2100      	movs	r1, #0
   2fcbc:	4618      	mov	r0, r3
   2fcbe:	9301      	str	r3, [sp, #4]
   2fcc0:	f7fa fe10 	bl	2a8e4 <memset>
	err_code = pack_utf8_str(&param->message.topic.topic,
   2fcc4:	466a      	mov	r2, sp
   2fcc6:	4601      	mov	r1, r0
   2fcc8:	4620      	mov	r0, r4
   2fcca:	f7ff ff71 	bl	2fbb0 <pack_utf8_str.constprop.5>
	if (err_code == 0) {
   2fcce:	4605      	mov	r5, r0
   2fcd0:	b940      	cbnz	r0, 2fce4 <publish_encode+0x48>
		if (param->message.topic.qos) {
   2fcd2:	7a23      	ldrb	r3, [r4, #8]
   2fcd4:	b95b      	cbnz	r3, 2fcee <publish_encode+0x52>
	if (buffer_len > *offset) {
   2fcd6:	f240 72fa 	movw	r2, #2042	; 0x7fa
   2fcda:	9b00      	ldr	r3, [sp, #0]
   2fcdc:	4293      	cmp	r3, r2
   2fcde:	d90e      	bls.n	2fcfe <publish_encode+0x62>
	int err_code = -EINVAL;
   2fce0:	f06f 0015 	mvn.w	r0, #21
		*packet_length = 0;
   2fce4:	2300      	movs	r3, #0
		*packet = NULL;
   2fce6:	4605      	mov	r5, r0
		*packet_length = 0;
   2fce8:	603b      	str	r3, [r7, #0]
		*packet = NULL;
   2fcea:	6033      	str	r3, [r6, #0]
   2fcec:	e02d      	b.n	2fd4a <publish_encode+0xae>
			err_code = pack_uint16(
   2fcee:	466a      	mov	r2, sp
   2fcf0:	9901      	ldr	r1, [sp, #4]
   2fcf2:	8aa0      	ldrh	r0, [r4, #20]
   2fcf4:	f7ff ff44 	bl	2fb80 <pack_uint16.constprop.6>
	if (err_code == 0) {
   2fcf8:	2800      	cmp	r0, #0
   2fcfa:	d1f3      	bne.n	2fce4 <publish_encode+0x48>
   2fcfc:	e7eb      	b.n	2fcd6 <publish_encode+0x3a>
		if (available_len >= GET_BINSTR_BUFFER_SIZE(str)) {
   2fcfe:	6922      	ldr	r2, [r4, #16]
		const u32_t available_len = buffer_len - *offset;
   2fd00:	f5c3 61ff 	rsb	r1, r3, #2040	; 0x7f8
   2fd04:	3103      	adds	r1, #3
		if (available_len >= GET_BINSTR_BUFFER_SIZE(str)) {
   2fd06:	4291      	cmp	r1, r2
   2fd08:	d325      	bcc.n	2fd56 <publish_encode+0xba>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2fd0a:	9801      	ldr	r0, [sp, #4]
   2fd0c:	68e1      	ldr	r1, [r4, #12]
   2fd0e:	4418      	add	r0, r3
   2fd10:	f7dd ff62 	bl	dbd8 <memcpy>
			*offset += str->len;
   2fd14:	9900      	ldr	r1, [sp, #0]
   2fd16:	6923      	ldr	r3, [r4, #16]
   2fd18:	4419      	add	r1, r3
	if (length <= MQTT_MAX_PAYLOAD_SIZE) {
   2fd1a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
			*offset += str->len;
   2fd1e:	9100      	str	r1, [sp, #0]
	if (length <= MQTT_MAX_PAYLOAD_SIZE) {
   2fd20:	d216      	bcs.n	2fd50 <publish_encode+0xb4>
		const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   2fd22:	7da3      	ldrb	r3, [r4, #22]
   2fd24:	aa01      	add	r2, sp, #4
   2fd26:	f003 0001 	and.w	r0, r3, #1
   2fd2a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   2fd2e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   2fd32:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   2fd36:	7a20      	ldrb	r0, [r4, #8]
   2fd38:	0040      	lsls	r0, r0, #1
   2fd3a:	f000 0006 	and.w	r0, r0, #6
   2fd3e:	4318      	orrs	r0, r3
   2fd40:	f7ff ff5d 	bl	2fbfe <mqtt_encode_fixed_header.part.0>
		*packet = payload;
   2fd44:	9b01      	ldr	r3, [sp, #4]
		*packet_length = mqtt_packetlen;
   2fd46:	6038      	str	r0, [r7, #0]
		*packet = payload;
   2fd48:	6033      	str	r3, [r6, #0]
}
   2fd4a:	4628      	mov	r0, r5
   2fd4c:	b003      	add	sp, #12
   2fd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	u32_t packet_length = 0xFFFFFFFF;
   2fd50:	f04f 30ff 	mov.w	r0, #4294967295
   2fd54:	e7f6      	b.n	2fd44 <publish_encode+0xa8>
			err_code = -ENOMEM;
   2fd56:	f06f 000b 	mvn.w	r0, #11
   2fd5a:	e7c3      	b.n	2fce4 <publish_encode+0x48>
		return -EINVAL;
   2fd5c:	f06f 0515 	mvn.w	r5, #21
   2fd60:	e7f3      	b.n	2fd4a <publish_encode+0xae>

0002fd62 <publish_ack_encode>:
{
   2fd62:	b507      	push	{r0, r1, r2, lr}
	return mqtt_message_id_only_enc(client, message_type, param->message_id,
   2fd64:	8809      	ldrh	r1, [r1, #0]
   2fd66:	9300      	str	r3, [sp, #0]
   2fd68:	4613      	mov	r3, r2
   2fd6a:	460a      	mov	r2, r1
   2fd6c:	2140      	movs	r1, #64	; 0x40
   2fd6e:	4408      	add	r0, r1
   2fd70:	f7ff ff63 	bl	2fc3a <mqtt_message_id_only_enc.isra.1>
}
   2fd74:	b003      	add	sp, #12
   2fd76:	f85d fb04 	ldr.w	pc, [sp], #4

0002fd7a <subscribe_encode>:
{
   2fd7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fd7e:	460d      	mov	r5, r1
	u32_t offset = 0;
   2fd80:	2100      	movs	r1, #0
{
   2fd82:	461f      	mov	r7, r3
	if (param->message_id == 0) {
   2fd84:	88eb      	ldrh	r3, [r5, #6]
{
   2fd86:	4616      	mov	r6, r2
	u32_t offset = 0;
   2fd88:	9100      	str	r1, [sp, #0]
	if (param->message_id == 0) {
   2fd8a:	2b00      	cmp	r3, #0
   2fd8c:	d03a      	beq.n	2fe04 <subscribe_encode+0x8a>
	payload = &client->tx_buf[MQTT_FIXED_HEADER_EXTENDED_SIZE];
   2fd8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
__ssp_bos_icheck3(memset, void *, int)
   2fd90:	f240 72fb 	movw	r2, #2043	; 0x7fb
   2fd94:	3305      	adds	r3, #5
   2fd96:	4618      	mov	r0, r3
   2fd98:	9301      	str	r3, [sp, #4]
   2fd9a:	f7fa fda3 	bl	2a8e4 <memset>
	err_code = pack_uint16(param->message_id,
   2fd9e:	466a      	mov	r2, sp
   2fda0:	4601      	mov	r1, r0
   2fda2:	88e8      	ldrh	r0, [r5, #6]
   2fda4:	f7ff feec 	bl	2fb80 <pack_uint16.constprop.6>
	if (err_code == 0) {
   2fda8:	4604      	mov	r4, r0
   2fdaa:	bb98      	cbnz	r0, 2fe14 <subscribe_encode+0x9a>
	u32_t count = 0;
   2fdac:	4680      	mov	r8, r0
   2fdae:	f04f 090c 	mov.w	r9, #12
	if (buffer_len > *offset) {
   2fdb2:	f240 7afa 	movw	sl, #2042	; 0x7fa
   2fdb6:	fb09 fb08 	mul.w	fp, r9, r8
				&param->list[count].topic,
   2fdba:	6828      	ldr	r0, [r5, #0]
			err_code = pack_utf8_str(
   2fdbc:	466a      	mov	r2, sp
   2fdbe:	9901      	ldr	r1, [sp, #4]
   2fdc0:	4458      	add	r0, fp
   2fdc2:	f7ff fef5 	bl	2fbb0 <pack_utf8_str.constprop.5>
			if (err_code == 0) {
   2fdc6:	4604      	mov	r4, r0
   2fdc8:	bb20      	cbnz	r0, 2fe14 <subscribe_encode+0x9a>
				err_code = pack_uint8(
   2fdca:	682b      	ldr	r3, [r5, #0]
   2fdcc:	445b      	add	r3, fp
   2fdce:	7a19      	ldrb	r1, [r3, #8]
	if (buffer_len > *offset) {
   2fdd0:	e9dd 3200 	ldrd	r3, r2, [sp]
   2fdd4:	4553      	cmp	r3, sl
   2fdd6:	d81b      	bhi.n	2fe10 <subscribe_encode+0x96>
		buffer[*offset] = val;
   2fdd8:	54d1      	strb	r1, [r2, r3]
		*offset += sizeof(u8_t);
   2fdda:	9900      	ldr	r1, [sp, #0]
			 (count < param->list_count));
   2fddc:	88ab      	ldrh	r3, [r5, #4]
			count++;
   2fdde:	f108 0801 	add.w	r8, r8, #1
		*offset += sizeof(u8_t);
   2fde2:	3101      	adds	r1, #1
		} while ((err_code == 0) &&
   2fde4:	4543      	cmp	r3, r8
		*offset += sizeof(u8_t);
   2fde6:	9100      	str	r1, [sp, #0]
		} while ((err_code == 0) &&
   2fde8:	d8e5      	bhi.n	2fdb6 <subscribe_encode+0x3c>
	if (length <= MQTT_MAX_PAYLOAD_SIZE) {
   2fdea:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   2fdee:	d302      	bcc.n	2fdf6 <subscribe_encode+0x7c>
	u32_t packet_length = 0xFFFFFFFF;
   2fdf0:	f04f 30ff 	mov.w	r0, #4294967295
   2fdf4:	e003      	b.n	2fdfe <subscribe_encode+0x84>
   2fdf6:	aa01      	add	r2, sp, #4
   2fdf8:	2082      	movs	r0, #130	; 0x82
   2fdfa:	f7ff ff00 	bl	2fbfe <mqtt_encode_fixed_header.part.0>
		*packet_length = mqtt_packetlen;
   2fdfe:	6038      	str	r0, [r7, #0]
		*packet = payload;
   2fe00:	9b01      	ldr	r3, [sp, #4]
   2fe02:	e009      	b.n	2fe18 <subscribe_encode+0x9e>
		return -EINVAL;
   2fe04:	f06f 0415 	mvn.w	r4, #21
}
   2fe08:	4620      	mov	r0, r4
   2fe0a:	b003      	add	sp, #12
   2fe0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int err_code = -EINVAL;
   2fe10:	f06f 0415 	mvn.w	r4, #21
		*packet_length = 0;
   2fe14:	2300      	movs	r3, #0
   2fe16:	603b      	str	r3, [r7, #0]
		*packet = payload;
   2fe18:	6033      	str	r3, [r6, #0]
   2fe1a:	e7f5      	b.n	2fe08 <subscribe_encode+0x8e>

0002fe1c <unsubscribe_encode>:
{
   2fe1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2fe20:	460e      	mov	r6, r1
	u32_t offset = 0;
   2fe22:	2100      	movs	r1, #0
{
   2fe24:	4698      	mov	r8, r3
	payload = &client->tx_buf[MQTT_FIXED_HEADER_EXTENDED_SIZE];
   2fe26:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
   2fe28:	4617      	mov	r7, r2
	payload = &client->tx_buf[MQTT_FIXED_HEADER_EXTENDED_SIZE];
   2fe2a:	3305      	adds	r3, #5
   2fe2c:	f240 72fb 	movw	r2, #2043	; 0x7fb
   2fe30:	4618      	mov	r0, r3
	u32_t offset = 0;
   2fe32:	9100      	str	r1, [sp, #0]
	payload = &client->tx_buf[MQTT_FIXED_HEADER_EXTENDED_SIZE];
   2fe34:	9301      	str	r3, [sp, #4]
   2fe36:	f7fa fd55 	bl	2a8e4 <memset>
	err_code = pack_uint16(param->message_id,
   2fe3a:	466a      	mov	r2, sp
   2fe3c:	4601      	mov	r1, r0
   2fe3e:	88f0      	ldrh	r0, [r6, #6]
   2fe40:	f7ff fe9e 	bl	2fb80 <pack_uint16.constprop.6>
	if (err_code == 0) {
   2fe44:	4604      	mov	r4, r0
   2fe46:	b9f0      	cbnz	r0, 2fe86 <unsubscribe_encode+0x6a>
	u32_t count = 0;
   2fe48:	4605      	mov	r5, r0
				&param->list[count].topic,
   2fe4a:	f04f 090c 	mov.w	r9, #12
   2fe4e:	6830      	ldr	r0, [r6, #0]
			err_code = pack_utf8_str(
   2fe50:	466a      	mov	r2, sp
   2fe52:	fb09 0005 	mla	r0, r9, r5, r0
   2fe56:	9901      	ldr	r1, [sp, #4]
   2fe58:	f7ff feaa 	bl	2fbb0 <pack_utf8_str.constprop.5>
			count++;
   2fe5c:	3501      	adds	r5, #1
			 (count < param->list_count));
   2fe5e:	4604      	mov	r4, r0
   2fe60:	b988      	cbnz	r0, 2fe86 <unsubscribe_encode+0x6a>
   2fe62:	88b3      	ldrh	r3, [r6, #4]
		} while ((err_code == 0) &&
   2fe64:	42ab      	cmp	r3, r5
   2fe66:	d8f2      	bhi.n	2fe4e <unsubscribe_encode+0x32>
		mqtt_packetlen = mqtt_encode_fixed_header(
   2fe68:	9900      	ldr	r1, [sp, #0]
	if (length <= MQTT_MAX_PAYLOAD_SIZE) {
   2fe6a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   2fe6e:	d302      	bcc.n	2fe76 <unsubscribe_encode+0x5a>
	u32_t packet_length = 0xFFFFFFFF;
   2fe70:	f04f 30ff 	mov.w	r0, #4294967295
   2fe74:	e003      	b.n	2fe7e <unsubscribe_encode+0x62>
   2fe76:	aa01      	add	r2, sp, #4
   2fe78:	20a2      	movs	r0, #162	; 0xa2
   2fe7a:	f7ff fec0 	bl	2fbfe <mqtt_encode_fixed_header.part.0>
		*packet_length = mqtt_packetlen;
   2fe7e:	f8c8 0000 	str.w	r0, [r8]
		*packet = payload;
   2fe82:	9b01      	ldr	r3, [sp, #4]
   2fe84:	e002      	b.n	2fe8c <unsubscribe_encode+0x70>
		*packet_length = 0;
   2fe86:	2300      	movs	r3, #0
   2fe88:	f8c8 3000 	str.w	r3, [r8]
}
   2fe8c:	4620      	mov	r0, r4
		*packet = payload;
   2fe8e:	603b      	str	r3, [r7, #0]
}
   2fe90:	b003      	add	sp, #12
   2fe92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002fe96 <mqtt_handle_rx_data>:
}

u32_t mqtt_handle_rx_data(struct mqtt_client *client, u8_t *data, u32_t datalen)
{
	int err_code = 0;
	u32_t offset = 0;
   2fe96:	2300      	movs	r3, #0
{
   2fe98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fe9c:	4680      	mov	r8, r0
   2fe9e:	468a      	mov	sl, r1
   2fea0:	4616      	mov	r6, r2
   2fea2:	b08f      	sub	sp, #60	; 0x3c
	u32_t offset = 0;
   2fea4:	f10d 0938 	add.w	r9, sp, #56	; 0x38
   2fea8:	f849 3d28 	str.w	r3, [r9, #-40]!

	while (offset < datalen) {
		u32_t start = offset;
		u32_t remaining_length = 0;
   2feac:	9303      	str	r3, [sp, #12]
	while (offset < datalen) {
   2feae:	9f04      	ldr	r7, [sp, #16]
   2feb0:	42b7      	cmp	r7, r6
   2feb2:	d243      	bcs.n	2ff3c <mqtt_handle_rx_data+0xa6>
		u32_t remaining_length = 0;
   2feb4:	9b03      	ldr	r3, [sp, #12]

		offset = 1; /* Skip first byte to offset MQTT packet length. */
		err_code = packet_length_decode(data + start, datalen - start,
   2feb6:	eb0a 0507 	add.w	r5, sl, r7
		u32_t remaining_length = 0;
   2feba:	9305      	str	r3, [sp, #20]
		offset = 1; /* Skip first byte to offset MQTT packet length. */
   2febc:	2301      	movs	r3, #1
		err_code = packet_length_decode(data + start, datalen - start,
   2febe:	aa05      	add	r2, sp, #20
		offset = 1; /* Skip first byte to offset MQTT packet length. */
   2fec0:	9304      	str	r3, [sp, #16]
		err_code = packet_length_decode(data + start, datalen - start,
   2fec2:	1bf1      	subs	r1, r6, r7
   2fec4:	464b      	mov	r3, r9
   2fec6:	4628      	mov	r0, r5
   2fec8:	f7ff fd83 	bl	2f9d2 <packet_length_decode>
						&remaining_length, &offset);
		if (err_code != 0) {
   2fecc:	2800      	cmp	r0, #0
   2fece:	f040 8086 	bne.w	2ffde <mqtt_handle_rx_data+0x148>
			return datalen;
		}

		u32_t packet_length = offset + remaining_length;
   2fed2:	e9dd 2404 	ldrd	r2, r4, [sp, #16]
   2fed6:	4414      	add	r4, r2

		if (packet_length > MQTT_MAX_PACKET_LENGTH) {
   2fed8:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
   2fedc:	d82d      	bhi.n	2ff3a <mqtt_handle_rx_data+0xa4>
			/* We receiving data we cannot handle. */
			return packet_length;
		}

		if (start + packet_length > datalen) {
   2fede:	eb07 0b04 	add.w	fp, r7, r4
   2fee2:	45b3      	cmp	fp, r6
   2fee4:	d87d      	bhi.n	2ffe2 <mqtt_handle_rx_data+0x14c>
	switch (data[0] & 0xF0) {
   2fee6:	f81a 3007 	ldrb.w	r3, [sl, r7]
	evt.result = 0;
   2feea:	900d      	str	r0, [sp, #52]	; 0x34
	switch (data[0] & 0xF0) {
   2feec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   2fef0:	2b50      	cmp	r3, #80	; 0x50
   2fef2:	d050      	beq.n	2ff96 <mqtt_handle_rx_data+0x100>
   2fef4:	d826      	bhi.n	2ff44 <mqtt_handle_rx_data+0xae>
   2fef6:	2b30      	cmp	r3, #48	; 0x30
   2fef8:	d039      	beq.n	2ff6e <mqtt_handle_rx_data+0xd8>
   2fefa:	2b40      	cmp	r3, #64	; 0x40
   2fefc:	d042      	beq.n	2ff84 <mqtt_handle_rx_data+0xee>
   2fefe:	2b20      	cmp	r3, #32
   2ff00:	d125      	bne.n	2ff4e <mqtt_handle_rx_data+0xb8>
		err_code = connect_ack_decode(client, data, datalen, offset,
   2ff02:	ab07      	add	r3, sp, #28
		evt.type = MQTT_EVT_CONNACK;
   2ff04:	f88d 0018 	strb.w	r0, [sp, #24]
		err_code = connect_ack_decode(client, data, datalen, offset,
   2ff08:	9300      	str	r3, [sp, #0]
   2ff0a:	4629      	mov	r1, r5
   2ff0c:	4613      	mov	r3, r2
   2ff0e:	4640      	mov	r0, r8
   2ff10:	4622      	mov	r2, r4
   2ff12:	f7ff fd78 	bl	2fa06 <connect_ack_decode>
		if (err_code == 0) {
   2ff16:	4605      	mov	r5, r0
   2ff18:	bb90      	cbnz	r0, 2ff80 <mqtt_handle_rx_data+0xea>
			if (evt.param.connack.return_code ==
   2ff1a:	f89d 201d 	ldrb.w	r2, [sp, #29]
   2ff1e:	b92a      	cbnz	r2, 2ff2c <mqtt_handle_rx_data+0x96>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   2ff20:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
   2ff24:	f043 0304 	orr.w	r3, r3, #4
   2ff28:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
			evt.result = evt.param.connack.return_code;
   2ff2c:	920d      	str	r2, [sp, #52]	; 0x34
		event_notify(client, &evt, MQTT_EVT_FLAG_NONE);
   2ff2e:	2200      	movs	r2, #0
   2ff30:	a906      	add	r1, sp, #24
   2ff32:	4640      	mov	r0, r8
   2ff34:	f000 f870 	bl	30018 <event_notify>
			return start;
		}

		err_code = mqtt_handle_packet(client, data + start,
					      packet_length, offset);
		if (err_code != 0) {
   2ff38:	b14d      	cbz	r5, 2ff4e <mqtt_handle_rx_data+0xb8>
			return datalen;
   2ff3a:	4626      	mov	r6, r4

		offset = start + packet_length;
	}

	return datalen;
}
   2ff3c:	4630      	mov	r0, r6
   2ff3e:	b00f      	add	sp, #60	; 0x3c
   2ff40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (data[0] & 0xF0) {
   2ff44:	2b70      	cmp	r3, #112	; 0x70
   2ff46:	d038      	beq.n	2ffba <mqtt_handle_rx_data+0x124>
   2ff48:	d804      	bhi.n	2ff54 <mqtt_handle_rx_data+0xbe>
   2ff4a:	2b60      	cmp	r3, #96	; 0x60
   2ff4c:	d02c      	beq.n	2ffa8 <mqtt_handle_rx_data+0x112>
		offset = start + packet_length;
   2ff4e:	f8cd b010 	str.w	fp, [sp, #16]
   2ff52:	e7ac      	b.n	2feae <mqtt_handle_rx_data+0x18>
	switch (data[0] & 0xF0) {
   2ff54:	2b90      	cmp	r3, #144	; 0x90
   2ff56:	d039      	beq.n	2ffcc <mqtt_handle_rx_data+0x136>
   2ff58:	2bb0      	cmp	r3, #176	; 0xb0
   2ff5a:	d1f8      	bne.n	2ff4e <mqtt_handle_rx_data+0xb8>
		evt.type = MQTT_EVT_UNSUBACK;
   2ff5c:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(data, datalen, offset,
   2ff5e:	4621      	mov	r1, r4
		evt.type = MQTT_EVT_UNSUBACK;
   2ff60:	f88d 3018 	strb.w	r3, [sp, #24]
		err_code = unsubscribe_ack_decode(data, datalen, offset,
   2ff64:	4628      	mov	r0, r5
   2ff66:	ab07      	add	r3, sp, #28
   2ff68:	f7ff fdfe 	bl	2fb68 <unsubscribe_ack_decode>
   2ff6c:	e007      	b.n	2ff7e <mqtt_handle_rx_data+0xe8>
		evt.type = MQTT_EVT_PUBLISH;
   2ff6e:	2302      	movs	r3, #2
		err_code = publish_decode(data, datalen, offset,
   2ff70:	4621      	mov	r1, r4
		evt.type = MQTT_EVT_PUBLISH;
   2ff72:	f88d 3018 	strb.w	r3, [sp, #24]
		err_code = publish_decode(data, datalen, offset,
   2ff76:	4628      	mov	r0, r5
   2ff78:	ab07      	add	r3, sp, #28
   2ff7a:	f7ff fd5c 	bl	2fa36 <publish_decode>
		err_code = unsubscribe_ack_decode(data, datalen, offset,
   2ff7e:	4605      	mov	r5, r0
		evt.result = err_code;
   2ff80:	950d      	str	r5, [sp, #52]	; 0x34
   2ff82:	e7d4      	b.n	2ff2e <mqtt_handle_rx_data+0x98>
		evt.type = MQTT_EVT_PUBACK;
   2ff84:	2303      	movs	r3, #3
		err_code = publish_ack_decode(data, datalen, offset,
   2ff86:	4621      	mov	r1, r4
		evt.type = MQTT_EVT_PUBACK;
   2ff88:	f88d 3018 	strb.w	r3, [sp, #24]
		err_code = publish_ack_decode(data, datalen, offset,
   2ff8c:	4628      	mov	r0, r5
   2ff8e:	ab07      	add	r3, sp, #28
   2ff90:	f7ff fd9e 	bl	2fad0 <publish_ack_decode>
   2ff94:	e7f3      	b.n	2ff7e <mqtt_handle_rx_data+0xe8>
		evt.type = MQTT_EVT_PUBREC;
   2ff96:	2304      	movs	r3, #4
		err_code = publish_receive_decode(data, datalen, offset,
   2ff98:	4621      	mov	r1, r4
		evt.type = MQTT_EVT_PUBREC;
   2ff9a:	f88d 3018 	strb.w	r3, [sp, #24]
		err_code = publish_receive_decode(data, datalen, offset,
   2ff9e:	4628      	mov	r0, r5
   2ffa0:	ab07      	add	r3, sp, #28
   2ffa2:	f7ff fda1 	bl	2fae8 <publish_receive_decode>
   2ffa6:	e7ea      	b.n	2ff7e <mqtt_handle_rx_data+0xe8>
		evt.type = MQTT_EVT_PUBREL;
   2ffa8:	2305      	movs	r3, #5
		err_code = publish_release_decode(data, datalen, offset,
   2ffaa:	4621      	mov	r1, r4
		evt.type = MQTT_EVT_PUBREL;
   2ffac:	f88d 3018 	strb.w	r3, [sp, #24]
		err_code = publish_release_decode(data, datalen, offset,
   2ffb0:	4628      	mov	r0, r5
   2ffb2:	ab07      	add	r3, sp, #28
   2ffb4:	f7ff fda4 	bl	2fb00 <publish_release_decode>
   2ffb8:	e7e1      	b.n	2ff7e <mqtt_handle_rx_data+0xe8>
		evt.type = MQTT_EVT_PUBCOMP;
   2ffba:	2306      	movs	r3, #6
		err_code = publish_complete_decode(data, datalen, offset,
   2ffbc:	4621      	mov	r1, r4
		evt.type = MQTT_EVT_PUBCOMP;
   2ffbe:	f88d 3018 	strb.w	r3, [sp, #24]
		err_code = publish_complete_decode(data, datalen, offset,
   2ffc2:	4628      	mov	r0, r5
   2ffc4:	ab07      	add	r3, sp, #28
   2ffc6:	f7ff fda7 	bl	2fb18 <publish_complete_decode>
   2ffca:	e7d8      	b.n	2ff7e <mqtt_handle_rx_data+0xe8>
		evt.type = MQTT_EVT_SUBACK;
   2ffcc:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(data, datalen, offset,
   2ffce:	4621      	mov	r1, r4
		evt.type = MQTT_EVT_SUBACK;
   2ffd0:	f88d 3018 	strb.w	r3, [sp, #24]
		err_code = subscribe_ack_decode(data, datalen, offset,
   2ffd4:	4628      	mov	r0, r5
   2ffd6:	ab07      	add	r3, sp, #28
   2ffd8:	f7ff fdaa 	bl	2fb30 <subscribe_ack_decode>
   2ffdc:	e7cf      	b.n	2ff7e <mqtt_handle_rx_data+0xe8>
   2ffde:	4634      	mov	r4, r6
   2ffe0:	e7ab      	b.n	2ff3a <mqtt_handle_rx_data+0xa4>
	while (offset < datalen) {
   2ffe2:	463c      	mov	r4, r7
   2ffe4:	e7a9      	b.n	2ff3a <mqtt_handle_rx_data+0xa4>

0002ffe6 <mqtt_client_tcp_disconnect>:
 * @param[in] client Identifies the client on which the procedure is requested.
 *
 * @retval 0 or an error code indicating reason for failure.
 */
int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   2ffe6:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   2ffe8:	6840      	ldr	r0, [r0, #4]
   2ffea:	f7e6 fdc3 	bl	16b74 <close>
	if (ret < 0) {
   2ffee:	2800      	cmp	r0, #0
   2fff0:	da04      	bge.n	2fffc <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   2fff2:	f7fe fbaa 	bl	2e74a <__errno>
   2fff6:	6800      	ldr	r0, [r0, #0]
   2fff8:	4240      	negs	r0, r0
	}

	return 0;
}
   2fffa:	bd08      	pop	{r3, pc}
	return 0;
   2fffc:	2000      	movs	r0, #0
   2fffe:	e7fc      	b.n	2fffa <mqtt_client_tcp_disconnect+0x14>

00030000 <verify_tx_state.isra.0>:
	if (MQTT_VERIFY_STATE(client, MQTT_STATE_PENDING_WRITE)) {
   30000:	0703      	lsls	r3, r0, #28
   30002:	d406      	bmi.n	30012 <verify_tx_state.isra.0+0x12>
	if (!MQTT_VERIFY_STATE(client, MQTT_STATE_CONNECTED)) {
   30004:	f010 0f04 	tst.w	r0, #4
	return 0;
   30008:	bf0c      	ite	eq
   3000a:	f06f 007f 	mvneq.w	r0, #127	; 0x7f
   3000e:	2000      	movne	r0, #0
   30010:	4770      	bx	lr
		return -EBUSY;
   30012:	f06f 000f 	mvn.w	r0, #15
}
   30016:	4770      	bx	lr

00030018 <event_notify>:
{
   30018:	b570      	push	{r4, r5, r6, lr}
	const mqtt_evt_cb_t evt_cb = client->evt_cb;
   3001a:	6b44      	ldr	r4, [r0, #52]	; 0x34
{
   3001c:	4605      	mov	r5, r0
   3001e:	460e      	mov	r6, r1
	if (evt_cb != NULL) {
   30020:	b144      	cbz	r4, 30034 <event_notify+0x1c>
		mqtt_mutex_unlock();
   30022:	f7e6 feef 	bl	16e04 <mqtt_mutex_unlock>
		evt_cb(client, evt);
   30026:	4631      	mov	r1, r6
   30028:	4628      	mov	r0, r5
   3002a:	47a0      	blx	r4
}
   3002c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		mqtt_mutex_lock();
   30030:	f7e6 beee 	b.w	16e10 <mqtt_mutex_lock>
}
   30034:	bd70      	pop	{r4, r5, r6, pc}

00030036 <client_abort>:
{
   30036:	b510      	push	{r4, lr}
   30038:	4604      	mov	r4, r0
	if (mqtt_transport_disconnect(client) < 0) {
   3003a:	f7e6 fedb 	bl	16df4 <mqtt_transport_disconnect>
   3003e:	2800      	cmp	r0, #0
   30040:	db06      	blt.n	30050 <client_abort+0x1a>
		disconnect_event_notify(client, -ECONNABORTED);
   30042:	4620      	mov	r0, r4
}
   30044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		disconnect_event_notify(client, -ECONNABORTED);
   30048:	f06f 0170 	mvn.w	r1, #112	; 0x70
   3004c:	f7e6 bf04 	b.w	16e58 <disconnect_event_notify>
}
   30050:	bd10      	pop	{r4, pc}

00030052 <client_disconnect>:
	if (MQTT_VERIFY_STATE(client, MQTT_STATE_TCP_CONNECTED) ||
   30052:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   30054:	b570      	push	{r4, r5, r6, lr}
	if (MQTT_VERIFY_STATE(client, MQTT_STATE_TCP_CONNECTED) ||
   30056:	f013 0f12 	tst.w	r3, #18
{
   3005a:	4605      	mov	r5, r0
   3005c:	460e      	mov	r6, r1
	if (MQTT_VERIFY_STATE(client, MQTT_STATE_TCP_CONNECTED) ||
   3005e:	d009      	beq.n	30074 <client_disconnect+0x22>
		err_code = mqtt_transport_disconnect(client);
   30060:	f7e6 fec8 	bl	16df4 <mqtt_transport_disconnect>
		if (err_code < 0) {
   30064:	1e04      	subs	r4, r0, #0
   30066:	db03      	blt.n	30070 <client_disconnect+0x1e>
			disconnect_event_notify(client, result);
   30068:	4631      	mov	r1, r6
   3006a:	4628      	mov	r0, r5
   3006c:	f7e6 fef4 	bl	16e58 <disconnect_event_notify>
}
   30070:	4620      	mov	r0, r4
   30072:	bd70      	pop	{r4, r5, r6, pc}
	int err_code = -EACCES;
   30074:	f06f 040c 	mvn.w	r4, #12
	return err_code;
   30078:	e7fa      	b.n	30070 <client_disconnect+0x1e>

0003007a <client_write>:
{
   3007a:	b538      	push	{r3, r4, r5, lr}
	MQTT_SET_STATE(client, MQTT_STATE_PENDING_WRITE);
   3007c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   3007e:	4604      	mov	r4, r0
	MQTT_SET_STATE(client, MQTT_STATE_PENDING_WRITE);
   30080:	f043 0308 	orr.w	r3, r3, #8
   30084:	63c3      	str	r3, [r0, #60]	; 0x3c
	err_code = mqtt_transport_write(client, data, datalen);
   30086:	f7e6 fe9d 	bl	16dc4 <mqtt_transport_write>
	MQTT_RESET_STATE(client, MQTT_STATE_PENDING_WRITE);
   3008a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	if (err_code != 0) {
   3008c:	4605      	mov	r5, r0
	MQTT_RESET_STATE(client, MQTT_STATE_PENDING_WRITE);
   3008e:	f023 0308 	bic.w	r3, r3, #8
   30092:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (err_code != 0) {
   30094:	b138      	cbz	r0, 300a6 <client_write+0x2c>
		client_disconnect(client, err_code);
   30096:	4601      	mov	r1, r0
   30098:	4620      	mov	r0, r4
   3009a:	f7ff ffda 	bl	30052 <client_disconnect>
		return -EIO;
   3009e:	f06f 0504 	mvn.w	r5, #4
}
   300a2:	4628      	mov	r0, r5
   300a4:	bd38      	pop	{r3, r4, r5, pc}
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   300a6:	f000 fc87 	bl	309b8 <z_impl_k_uptime_get_32>
	client->last_activity = mqtt_sys_tick_in_ms_get();
   300aa:	63a0      	str	r0, [r4, #56]	; 0x38
	return 0;
   300ac:	e7f9      	b.n	300a2 <client_write+0x28>

000300ae <mqtt_publish>:
{
   300ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   300b0:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   300b2:	4605      	mov	r5, r0
   300b4:	b1d0      	cbz	r0, 300ec <mqtt_publish+0x3e>
	NULL_PARAM_CHECK(param);
   300b6:	b1c9      	cbz	r1, 300ec <mqtt_publish+0x3e>
	mqtt_mutex_lock();
   300b8:	f7e6 feaa 	bl	16e10 <mqtt_mutex_lock>
	err_code = verify_tx_state(client);
   300bc:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   300be:	f7ff ff9f 	bl	30000 <verify_tx_state.isra.0>
	if (err_code == 0) {
   300c2:	4604      	mov	r4, r0
   300c4:	b968      	cbnz	r0, 300e2 <mqtt_publish+0x34>
		err_code = publish_encode(client, param, &packet, &packetlen);
   300c6:	ab01      	add	r3, sp, #4
   300c8:	466a      	mov	r2, sp
   300ca:	4631      	mov	r1, r6
   300cc:	4628      	mov	r0, r5
   300ce:	f7ff fde5 	bl	2fc9c <publish_encode>
		if (err_code == 0) {
   300d2:	4604      	mov	r4, r0
   300d4:	b928      	cbnz	r0, 300e2 <mqtt_publish+0x34>
			err_code = client_write(client, packet, packetlen);
   300d6:	e9dd 1200 	ldrd	r1, r2, [sp]
   300da:	4628      	mov	r0, r5
   300dc:	f7ff ffcd 	bl	3007a <client_write>
   300e0:	4604      	mov	r4, r0
	mqtt_mutex_unlock();
   300e2:	f7e6 fe8f 	bl	16e04 <mqtt_mutex_unlock>
}
   300e6:	4620      	mov	r0, r4
   300e8:	b002      	add	sp, #8
   300ea:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   300ec:	f06f 0415 	mvn.w	r4, #21
   300f0:	e7f9      	b.n	300e6 <mqtt_publish+0x38>

000300f2 <mqtt_publish_qos1_ack>:
{
   300f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   300f4:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   300f6:	4605      	mov	r5, r0
   300f8:	b1d0      	cbz	r0, 30130 <mqtt_publish_qos1_ack+0x3e>
	NULL_PARAM_CHECK(param);
   300fa:	b1c9      	cbz	r1, 30130 <mqtt_publish_qos1_ack+0x3e>
	mqtt_mutex_lock();
   300fc:	f7e6 fe88 	bl	16e10 <mqtt_mutex_lock>
	err_code = verify_tx_state(client);
   30100:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   30102:	f7ff ff7d 	bl	30000 <verify_tx_state.isra.0>
	if (err_code == 0) {
   30106:	4604      	mov	r4, r0
   30108:	b968      	cbnz	r0, 30126 <mqtt_publish_qos1_ack+0x34>
		err_code = publish_ack_encode(client, param, &packet,
   3010a:	ab01      	add	r3, sp, #4
   3010c:	466a      	mov	r2, sp
   3010e:	4631      	mov	r1, r6
   30110:	4628      	mov	r0, r5
   30112:	f7ff fe26 	bl	2fd62 <publish_ack_encode>
		if (err_code == 0) {
   30116:	4604      	mov	r4, r0
   30118:	b928      	cbnz	r0, 30126 <mqtt_publish_qos1_ack+0x34>
			err_code = client_write(client, packet, packetlen);
   3011a:	e9dd 1200 	ldrd	r1, r2, [sp]
   3011e:	4628      	mov	r0, r5
   30120:	f7ff ffab 	bl	3007a <client_write>
   30124:	4604      	mov	r4, r0
	mqtt_mutex_unlock();
   30126:	f7e6 fe6d 	bl	16e04 <mqtt_mutex_unlock>
}
   3012a:	4620      	mov	r0, r4
   3012c:	b002      	add	sp, #8
   3012e:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   30130:	f06f 0415 	mvn.w	r4, #21
   30134:	e7f9      	b.n	3012a <mqtt_publish_qos1_ack+0x38>

00030136 <mqtt_disconnect>:
{
   30136:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   30138:	4605      	mov	r5, r0
   3013a:	b1d8      	cbz	r0, 30174 <mqtt_disconnect+0x3e>
	mqtt_mutex_lock();
   3013c:	f7e6 fe68 	bl	16e10 <mqtt_mutex_lock>
	err_code = verify_tx_state(client);
   30140:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   30142:	f7ff ff5d 	bl	30000 <verify_tx_state.isra.0>
	if (err_code == 0) {
   30146:	4604      	mov	r4, r0
   30148:	b978      	cbnz	r0, 3016a <mqtt_disconnect+0x34>
		err_code = disconnect_encode(client, &packet, &packetlen);
   3014a:	aa01      	add	r2, sp, #4
   3014c:	4669      	mov	r1, sp
   3014e:	4628      	mov	r0, r5
   30150:	f7e6 fd00 	bl	16b54 <disconnect_encode>
		if (err_code == 0) {
   30154:	4604      	mov	r4, r0
   30156:	b940      	cbnz	r0, 3016a <mqtt_disconnect+0x34>
			err_code = client_write(client, packet, packetlen);
   30158:	e9dd 1200 	ldrd	r1, r2, [sp]
   3015c:	4628      	mov	r0, r5
   3015e:	f7ff ff8c 	bl	3007a <client_write>
		if (err_code == 0) {
   30162:	4604      	mov	r4, r0
   30164:	b908      	cbnz	r0, 3016a <mqtt_disconnect+0x34>
			MQTT_SET_STATE_EXCLUSIVE(client,
   30166:	2310      	movs	r3, #16
   30168:	63eb      	str	r3, [r5, #60]	; 0x3c
	mqtt_mutex_unlock();
   3016a:	f7e6 fe4b 	bl	16e04 <mqtt_mutex_unlock>
}
   3016e:	4620      	mov	r0, r4
   30170:	b003      	add	sp, #12
   30172:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   30174:	f06f 0415 	mvn.w	r4, #21
   30178:	e7f9      	b.n	3016e <mqtt_disconnect+0x38>

0003017a <mqtt_subscribe>:
{
   3017a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3017c:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3017e:	4605      	mov	r5, r0
   30180:	b1d0      	cbz	r0, 301b8 <mqtt_subscribe+0x3e>
	NULL_PARAM_CHECK(param);
   30182:	b1c9      	cbz	r1, 301b8 <mqtt_subscribe+0x3e>
	mqtt_mutex_lock();
   30184:	f7e6 fe44 	bl	16e10 <mqtt_mutex_lock>
	err_code = verify_tx_state(client);
   30188:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   3018a:	f7ff ff39 	bl	30000 <verify_tx_state.isra.0>
	if (err_code == 0) {
   3018e:	4604      	mov	r4, r0
   30190:	b968      	cbnz	r0, 301ae <mqtt_subscribe+0x34>
		err_code = subscribe_encode(client, param, &packet, &packetlen);
   30192:	ab01      	add	r3, sp, #4
   30194:	466a      	mov	r2, sp
   30196:	4631      	mov	r1, r6
   30198:	4628      	mov	r0, r5
   3019a:	f7ff fdee 	bl	2fd7a <subscribe_encode>
		if (err_code == 0) {
   3019e:	4604      	mov	r4, r0
   301a0:	b928      	cbnz	r0, 301ae <mqtt_subscribe+0x34>
			err_code = client_write(client, packet, packetlen);
   301a2:	e9dd 1200 	ldrd	r1, r2, [sp]
   301a6:	4628      	mov	r0, r5
   301a8:	f7ff ff67 	bl	3007a <client_write>
   301ac:	4604      	mov	r4, r0
	mqtt_mutex_unlock();
   301ae:	f7e6 fe29 	bl	16e04 <mqtt_mutex_unlock>
}
   301b2:	4620      	mov	r0, r4
   301b4:	b002      	add	sp, #8
   301b6:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   301b8:	f06f 0415 	mvn.w	r4, #21
   301bc:	e7f9      	b.n	301b2 <mqtt_subscribe+0x38>

000301be <mqtt_unsubscribe>:
{
   301be:	b573      	push	{r0, r1, r4, r5, r6, lr}
   301c0:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   301c2:	4605      	mov	r5, r0
   301c4:	b1d0      	cbz	r0, 301fc <mqtt_unsubscribe+0x3e>
	NULL_PARAM_CHECK(param);
   301c6:	b1c9      	cbz	r1, 301fc <mqtt_unsubscribe+0x3e>
	mqtt_mutex_lock();
   301c8:	f7e6 fe22 	bl	16e10 <mqtt_mutex_lock>
	err_code = verify_tx_state(client);
   301cc:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   301ce:	f7ff ff17 	bl	30000 <verify_tx_state.isra.0>
	if (err_code == 0) {
   301d2:	4604      	mov	r4, r0
   301d4:	b968      	cbnz	r0, 301f2 <mqtt_unsubscribe+0x34>
		err_code = unsubscribe_encode(client, param, &packet,
   301d6:	ab01      	add	r3, sp, #4
   301d8:	466a      	mov	r2, sp
   301da:	4631      	mov	r1, r6
   301dc:	4628      	mov	r0, r5
   301de:	f7ff fe1d 	bl	2fe1c <unsubscribe_encode>
		if (err_code == 0) {
   301e2:	4604      	mov	r4, r0
   301e4:	b928      	cbnz	r0, 301f2 <mqtt_unsubscribe+0x34>
			err_code = client_write(client, packet, packetlen);
   301e6:	e9dd 1200 	ldrd	r1, r2, [sp]
   301ea:	4628      	mov	r0, r5
   301ec:	f7ff ff45 	bl	3007a <client_write>
   301f0:	4604      	mov	r4, r0
	mqtt_mutex_unlock();
   301f2:	f7e6 fe07 	bl	16e04 <mqtt_mutex_unlock>
}
   301f6:	4620      	mov	r0, r4
   301f8:	b002      	add	sp, #8
   301fa:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   301fc:	f06f 0415 	mvn.w	r4, #21
   30200:	e7f9      	b.n	301f6 <mqtt_unsubscribe+0x38>

00030202 <mqtt_ping>:
{
   30202:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   30204:	4605      	mov	r5, r0
   30206:	b1c0      	cbz	r0, 3023a <mqtt_ping+0x38>
	mqtt_mutex_lock();
   30208:	f7e6 fe02 	bl	16e10 <mqtt_mutex_lock>
	err_code = verify_tx_state(client);
   3020c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   3020e:	f7ff fef7 	bl	30000 <verify_tx_state.isra.0>
	if (err_code == 0) {
   30212:	4604      	mov	r4, r0
   30214:	b960      	cbnz	r0, 30230 <mqtt_ping+0x2e>
		err_code = ping_request_encode(client, &packet, &packetlen);
   30216:	aa01      	add	r2, sp, #4
   30218:	4669      	mov	r1, sp
   3021a:	4628      	mov	r0, r5
   3021c:	f7e6 fca2 	bl	16b64 <ping_request_encode>
		if (err_code == 0) {
   30220:	4604      	mov	r4, r0
   30222:	b928      	cbnz	r0, 30230 <mqtt_ping+0x2e>
			err_code = client_write(client, packet, packetlen);
   30224:	e9dd 1200 	ldrd	r1, r2, [sp]
   30228:	4628      	mov	r0, r5
   3022a:	f7ff ff26 	bl	3007a <client_write>
   3022e:	4604      	mov	r4, r0
	mqtt_mutex_unlock();
   30230:	f7e6 fde8 	bl	16e04 <mqtt_mutex_unlock>
}
   30234:	4620      	mov	r0, r4
   30236:	b003      	add	sp, #12
   30238:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   3023a:	f06f 0415 	mvn.w	r4, #21
   3023e:	e7f9      	b.n	30234 <mqtt_ping+0x32>

00030240 <mqtt_input>:

int mqtt_input(struct mqtt_client *client)
{
   30240:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int err_code;

	NULL_PARAM_CHECK(client);
   30242:	4604      	mov	r4, r0
   30244:	2800      	cmp	r0, #0
   30246:	d049      	beq.n	302dc <mqtt_input+0x9c>

	mqtt_mutex_lock();
   30248:	f7e6 fde2 	bl	16e10 <mqtt_mutex_lock>

	MQTT_TRC("state:0x%08x", client->state);

	if (MQTT_VERIFY_STATE(client, MQTT_STATE_DISCONNECTING)) {
   3024c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   3024e:	f013 0610 	ands.w	r6, r3, #16
   30252:	d005      	beq.n	30260 <mqtt_input+0x20>
		err_code = client_disconnect(client, 0);
   30254:	2100      	movs	r1, #0
			err_code = client_disconnect(client, 0);
   30256:	4620      	mov	r0, r4
   30258:	f7ff fefb 	bl	30052 <client_disconnect>
   3025c:	4605      	mov	r5, r0
   3025e:	e014      	b.n	3028a <mqtt_input+0x4a>
	} else if (MQTT_VERIFY_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   30260:	079b      	lsls	r3, r3, #30
   30262:	d538      	bpl.n	302d6 <mqtt_input+0x96>
	u32_t data_len = MQTT_MAX_PACKET_LENGTH - client->rx_buf_datalen;
   30264:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   30266:	aa02      	add	r2, sp, #8
   30268:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   3026c:	f842 1d04 	str.w	r1, [r2, #-4]!
	err_code = mqtt_transport_read(client,
   30270:	6c61      	ldr	r1, [r4, #68]	; 0x44
   30272:	4620      	mov	r0, r4
   30274:	4419      	add	r1, r3
   30276:	f7e6 fdb1 	bl	16ddc <mqtt_transport_read>
	if (err_code < 0) {
   3027a:	1e05      	subs	r5, r0, #0
   3027c:	da0a      	bge.n	30294 <mqtt_input+0x54>
		if (err_code == -EAGAIN) {
   3027e:	f115 0f0b 	cmn.w	r5, #11
   30282:	d026      	beq.n	302d2 <mqtt_input+0x92>
			client_abort(client);
   30284:	4620      	mov	r0, r4
   30286:	f7ff fed6 	bl	30036 <client_abort>
		err_code = client_read(client);
	} else {
		err_code = -EACCES;
	}

	mqtt_mutex_unlock();
   3028a:	f7e6 fdbb 	bl	16e04 <mqtt_mutex_unlock>

	return err_code;
}
   3028e:	4628      	mov	r0, r5
   30290:	b002      	add	sp, #8
   30292:	bd70      	pop	{r4, r5, r6, pc}
		if (data_len == 0) {
   30294:	9901      	ldr	r1, [sp, #4]
   30296:	2900      	cmp	r1, #0
   30298:	d0dd      	beq.n	30256 <mqtt_input+0x16>
			client->rx_buf_datalen += data_len;
   3029a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
			processed_length =
   3029c:	4620      	mov	r0, r4
			client->rx_buf_datalen += data_len;
   3029e:	440a      	add	r2, r1
   302a0:	64a2      	str	r2, [r4, #72]	; 0x48
			processed_length =
   302a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   302a4:	f7ff fdf7 	bl	2fe96 <mqtt_handle_rx_data>
			if (processed_length > client->rx_buf_datalen) {
   302a8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
			processed_length =
   302aa:	4601      	mov	r1, r0
			if (processed_length > client->rx_buf_datalen) {
   302ac:	4290      	cmp	r0, r2
   302ae:	d907      	bls.n	302c0 <mqtt_input+0x80>
				client_disconnect(client, -EIO);
   302b0:	f06f 0104 	mvn.w	r1, #4
   302b4:	4620      	mov	r0, r4
   302b6:	f7ff fecc 	bl	30052 <client_disconnect>
				err_code = -EIO;
   302ba:	f06f 0504 	mvn.w	r5, #4
   302be:	e7e4      	b.n	3028a <mqtt_input+0x4a>
				client->rx_buf_datalen -= processed_length;
   302c0:	1a12      	subs	r2, r2, r0
   302c2:	64a2      	str	r2, [r4, #72]	; 0x48
				if (client->rx_buf_datalen > 0) {
   302c4:	2a00      	cmp	r2, #0
   302c6:	d0e0      	beq.n	3028a <mqtt_input+0x4a>
					memmove(
   302c8:	6c60      	ldr	r0, [r4, #68]	; 0x44
__ssp_bos_icheck3(memmove, void *, const void *)
   302ca:	4401      	add	r1, r0
   302cc:	f7fa faa8 	bl	2a820 <memmove>
   302d0:	e7db      	b.n	3028a <mqtt_input+0x4a>
			err_code = 0;
   302d2:	4635      	mov	r5, r6
   302d4:	e7d9      	b.n	3028a <mqtt_input+0x4a>
		err_code = -EACCES;
   302d6:	f06f 050c 	mvn.w	r5, #12
   302da:	e7d6      	b.n	3028a <mqtt_input+0x4a>
	NULL_PARAM_CHECK(client);
   302dc:	f06f 0515 	mvn.w	r5, #21
   302e0:	e7d5      	b.n	3028e <mqtt_input+0x4e>

000302e2 <mqtt_client_tls_disconnect>:
 * @param[in] client Identifies the client on which the procedure is requested.
 *
 * @retval 0 or an error code indicating reason for failure.
 */
int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   302e2:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = close(client->transport.tls.sock);
   302e4:	6840      	ldr	r0, [r0, #4]
   302e6:	f7e6 fe93 	bl	17010 <close>
	if (ret < 0) {
   302ea:	2800      	cmp	r0, #0
   302ec:	da04      	bge.n	302f8 <mqtt_client_tls_disconnect+0x16>
		return -errno;
   302ee:	f7fe fa2c 	bl	2e74a <__errno>
   302f2:	6800      	ldr	r0, [r0, #0]
   302f4:	4240      	negs	r0, r0
	}

	return 0;
}
   302f6:	bd08      	pop	{r3, pc}
	return 0;
   302f8:	2000      	movs	r0, #0
   302fa:	e7fc      	b.n	302f6 <mqtt_client_tls_disconnect+0x14>

000302fc <nrf_cloud_process>:
}

void nrf_cloud_process(void)
{
	nct_process();
   302fc:	f7e7 bfc4 	b.w	18288 <nct_process>

00030300 <encode_ua_button_sequence>:
{
   30300:	b570      	push	{r4, r5, r6, lr}
   30302:	460d      	mov	r5, r1
	u32_t *encoded = nrf_cloud_calloc((sequence->len / 2) + 1, 1);
   30304:	2101      	movs	r1, #1
{
   30306:	4606      	mov	r6, r0
	u32_t *encoded = nrf_cloud_calloc((sequence->len / 2) + 1, 1);
   30308:	e9d0 0400 	ldrd	r0, r4, [r0]
   3030c:	0840      	lsrs	r0, r0, #1
   3030e:	4408      	add	r0, r1
   30310:	f000 fa80 	bl	30814 <k_calloc>
	if (encoded == NULL) {
   30314:	b180      	cbz	r0, 30338 <encode_ua_button_sequence+0x38>
   30316:	2300      	movs	r3, #0
	for (u32_t i = 0; i < sequence->len; i += 2) {
   30318:	6832      	ldr	r2, [r6, #0]
   3031a:	0059      	lsls	r1, r3, #1
   3031c:	428a      	cmp	r2, r1
   3031e:	d80c      	bhi.n	3033a <encode_ua_button_sequence+0x3a>
	if (sequence->len % 2) {
   30320:	07d1      	lsls	r1, r2, #31
   30322:	d507      	bpl.n	30334 <encode_ua_button_sequence+0x34>
		encoded[len++] = ((input[sequence->len - 1] << 4) & 0xF0);
   30324:	4414      	add	r4, r2
   30326:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   3032a:	0112      	lsls	r2, r2, #4
   3032c:	b2d2      	uxtb	r2, r2
   3032e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   30332:	3301      	adds	r3, #1
	output->len = len;
   30334:	e9c5 3000 	strd	r3, r0, [r5]
}
   30338:	bd70      	pop	{r4, r5, r6, pc}
		    ((input[i] << 4) & 0xF0) + (input[i + 1] & 0x0F);
   3033a:	f814 2013 	ldrb.w	r2, [r4, r3, lsl #1]
   3033e:	4421      	add	r1, r4
   30340:	7849      	ldrb	r1, [r1, #1]
   30342:	0112      	lsls	r2, r2, #4
   30344:	b2d2      	uxtb	r2, r2
   30346:	f001 010f 	and.w	r1, r1, #15
   3034a:	440a      	add	r2, r1
		encoded[len++] =
   3034c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   30350:	3301      	adds	r3, #1
   30352:	e7e1      	b.n	30318 <encode_ua_button_sequence+0x18>

00030354 <json_add_num>:
{
   30354:	b538      	push	{r3, r4, r5, lr}
	json_num = cJSON_CreateNumber(num);
   30356:	ec43 2b10 	vmov	d0, r2, r3
{
   3035a:	4604      	mov	r4, r0
   3035c:	460d      	mov	r5, r1
	json_num = cJSON_CreateNumber(num);
   3035e:	f7fe fc66 	bl	2ec2e <cJSON_CreateNumber>
	if (json_num == NULL) {
   30362:	4602      	mov	r2, r0
   30364:	b128      	cbz	r0, 30372 <json_add_num+0x1e>
	cJSON_AddItemToObject(parent, str, item);
   30366:	4620      	mov	r0, r4
   30368:	4629      	mov	r1, r5
   3036a:	f7e5 fc83 	bl	15c74 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_num);
   3036e:	2000      	movs	r0, #0
}
   30370:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   30372:	f06f 000b 	mvn.w	r0, #11
   30376:	e7fb      	b.n	30370 <json_add_num+0x1c>

00030378 <json_add_str>:
{
   30378:	b538      	push	{r3, r4, r5, lr}
   3037a:	4604      	mov	r4, r0
	json_str = cJSON_CreateString(item);
   3037c:	4610      	mov	r0, r2
{
   3037e:	460d      	mov	r5, r1
	json_str = cJSON_CreateString(item);
   30380:	f7fe fc6a 	bl	2ec58 <cJSON_CreateString>
	if (json_str == NULL) {
   30384:	4602      	mov	r2, r0
   30386:	b128      	cbz	r0, 30394 <json_add_str+0x1c>
	cJSON_AddItemToObject(parent, str, item);
   30388:	4620      	mov	r0, r4
   3038a:	4629      	mov	r1, r5
   3038c:	f7e5 fc72 	bl	15c74 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   30390:	2000      	movs	r0, #0
}
   30392:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   30394:	f06f 000b 	mvn.w	r0, #11
   30398:	e7fb      	b.n	30392 <json_add_str+0x1a>

0003039a <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   3039a:	b108      	cbz	r0, 303a0 <json_object_decode+0x6>
   3039c:	f7fe bc27 	b.w	2ebee <cJSON_GetObjectItem>
}
   303a0:	4770      	bx	lr

000303a2 <compare>:
{
   303a2:	b538      	push	{r3, r4, r5, lr}
   303a4:	4605      	mov	r5, r0
	return !strncmp(s1, s2, strlen(s2));
   303a6:	4608      	mov	r0, r1
{
   303a8:	460c      	mov	r4, r1
	return !strncmp(s1, s2, strlen(s2));
   303aa:	f7fa fc87 	bl	2acbc <strlen>
   303ae:	4621      	mov	r1, r4
   303b0:	4602      	mov	r2, r0
   303b2:	4628      	mov	r0, r5
   303b4:	f7fa fcb0 	bl	2ad18 <strncmp>
}
   303b8:	fab0 f080 	clz	r0, r0
   303bc:	0940      	lsrs	r0, r0, #5
   303be:	bd38      	pop	{r3, r4, r5, pc}

000303c0 <json_add_null>:
{
   303c0:	b538      	push	{r3, r4, r5, lr}
   303c2:	4604      	mov	r4, r0
   303c4:	460d      	mov	r5, r1
	json_null = cJSON_CreateNull();
   303c6:	f7fe fc2b 	bl	2ec20 <cJSON_CreateNull>
	if (json_null == NULL) {
   303ca:	4602      	mov	r2, r0
   303cc:	b128      	cbz	r0, 303da <json_add_null+0x1a>
	cJSON_AddItemToObject(parent, str, item);
   303ce:	4620      	mov	r0, r4
   303d0:	4629      	mov	r1, r5
   303d2:	f7e5 fc4f 	bl	15c74 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_null);
   303d6:	2000      	movs	r0, #0
}
   303d8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   303da:	f06f 000b 	mvn.w	r0, #11
   303de:	e7fb      	b.n	303d8 <json_add_null+0x18>

000303e0 <json_decode_and_alloc>:
{
   303e0:	b538      	push	{r3, r4, r5, lr}
   303e2:	460d      	mov	r5, r1
	if (obj == NULL || (obj->type != cJSON_String)) {
   303e4:	4604      	mov	r4, r0
   303e6:	b110      	cbz	r0, 303ee <json_decode_and_alloc+0xe>
   303e8:	68c3      	ldr	r3, [r0, #12]
   303ea:	2b04      	cmp	r3, #4
   303ec:	d004      	beq.n	303f8 <json_decode_and_alloc+0x18>
		data->ptr = NULL;
   303ee:	2300      	movs	r3, #0
		return -ENOENT;
   303f0:	f06f 0001 	mvn.w	r0, #1
		data->ptr = NULL;
   303f4:	606b      	str	r3, [r5, #4]
}
   303f6:	bd38      	pop	{r3, r4, r5, pc}
	data->len = strlen(obj->valuestring);
   303f8:	6900      	ldr	r0, [r0, #16]
   303fa:	f7fa fc5f 	bl	2acbc <strlen>
   303fe:	6028      	str	r0, [r5, #0]
	data->ptr = nrf_cloud_malloc(data->len + 1);
   30400:	3001      	adds	r0, #1
   30402:	f7f6 fd39 	bl	26e78 <k_malloc>
   30406:	6068      	str	r0, [r5, #4]
	if (data->ptr == NULL) {
   30408:	b130      	cbz	r0, 30418 <json_decode_and_alloc+0x38>
	strncpy((char *)data->ptr, obj->valuestring, data->len + 1);
   3040a:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   3040c:	6921      	ldr	r1, [r4, #16]
   3040e:	3201      	adds	r2, #1
   30410:	f7fa fcc8 	bl	2ada4 <strncpy>
	return 0;
   30414:	2000      	movs	r0, #0
   30416:	e7ee      	b.n	303f6 <json_decode_and_alloc+0x16>
		return -ENOMEM;
   30418:	f06f 000b 	mvn.w	r0, #11
   3041c:	e7eb      	b.n	303f6 <json_decode_and_alloc+0x16>

0003041e <nrf_codec_init>:
{
   3041e:	b508      	push	{r3, lr}
	cJSON_Init();
   30420:	f7e5 fc40 	bl	15ca4 <cJSON_Init>
}
   30424:	2000      	movs	r0, #0
   30426:	bd08      	pop	{r3, pc}

00030428 <drop_event_handler>:
}
   30428:	2000      	movs	r0, #0
   3042a:	4770      	bx	lr

0003042c <disconnection_handler>:
{
   3042c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct nrf_cloud_evt evt = {
   3042e:	2214      	movs	r2, #20
   30430:	2100      	movs	r1, #0
   30432:	a801      	add	r0, sp, #4
   30434:	f7fa fa56 	bl	2a8e4 <memset>
   30438:	2308      	movs	r3, #8
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   3043a:	a901      	add	r1, sp, #4
   3043c:	2001      	movs	r0, #1
	const struct nrf_cloud_evt evt = {
   3043e:	f88d 3004 	strb.w	r3, [sp, #4]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   30442:	f7e6 ff79 	bl	17338 <nfsm_set_current_state_and_notify>
}
   30446:	2000      	movs	r0, #0
   30448:	b007      	add	sp, #28
   3044a:	f85d fb04 	ldr.w	pc, [sp], #4

0003044e <dc_rx_data_handler>:
	}
	return 0;
}

static int dc_rx_data_handler(const struct nct_evt *nct_evt)
{
   3044e:	b510      	push	{r4, lr}
   30450:	b086      	sub	sp, #24
   30452:	4604      	mov	r4, r0
	struct nrf_cloud_evt cloud_evt = {
   30454:	2214      	movs	r2, #20
   30456:	2100      	movs	r1, #0
   30458:	a801      	add	r0, sp, #4
   3045a:	f7fa fa43 	bl	2a8e4 <memset>
   3045e:	2306      	movs	r3, #6
   30460:	6862      	ldr	r2, [r4, #4]
   30462:	f88d 3004 	strb.w	r3, [sp, #4]
   30466:	ab03      	add	r3, sp, #12
   30468:	e892 0003 	ldmia.w	r2, {r0, r1}
   3046c:	e883 0003 	stmia.w	r3, {r0, r1}
		.type = NRF_CLOUD_EVT_RX_DATA,
		.param.data = nct_evt->param.dc->data,
	};

	/* All data is forwared to the app */
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   30470:	f7e6 ff5c 	bl	1732c <nfsm_get_current_state>
   30474:	a901      	add	r1, sp, #4
   30476:	f7e6 ff5f 	bl	17338 <nfsm_set_current_state_and_notify>

	return 0;
}
   3047a:	2000      	movs	r0, #0
   3047c:	b006      	add	sp, #24
   3047e:	bd10      	pop	{r4, pc}

00030480 <state_ua_initiate>:
{
   30480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct nct_cc_data msg = {
   30482:	2210      	movs	r2, #16
   30484:	2100      	movs	r1, #0
   30486:	4668      	mov	r0, sp
   30488:	f7fa fa2c 	bl	2a8e4 <memset>
   3048c:	f641 2385 	movw	r3, #6789	; 0x1a85
   30490:	9302      	str	r3, [sp, #8]
   30492:	2301      	movs	r3, #1
	err = nrf_cloud_encode_state(STATE_UA_INITIATE, &msg.data);
   30494:	4669      	mov	r1, sp
   30496:	2006      	movs	r0, #6
	struct nct_cc_data msg = {
   30498:	f88d 300c 	strb.w	r3, [sp, #12]
	err = nrf_cloud_encode_state(STATE_UA_INITIATE, &msg.data);
   3049c:	f7e7 fa06 	bl	178ac <nrf_cloud_encode_state>
	if (err) {
   304a0:	4604      	mov	r4, r0
   304a2:	b950      	cbnz	r0, 304ba <state_ua_initiate+0x3a>
	err = nct_cc_send(&msg);
   304a4:	4668      	mov	r0, sp
   304a6:	f7e7 fe63 	bl	18170 <nct_cc_send>
   304aa:	4604      	mov	r4, r0
	nrf_cloud_free((void *)msg.data.ptr);
   304ac:	9801      	ldr	r0, [sp, #4]
   304ae:	f000 f9ac 	bl	3080a <k_free>
	nfsm_set_current_state_and_notify(STATE_UA_INITIATE, NULL);
   304b2:	2100      	movs	r1, #0
   304b4:	2006      	movs	r0, #6
   304b6:	f7e6 ff3f 	bl	17338 <nfsm_set_current_state_and_notify>
}
   304ba:	4620      	mov	r0, r4
   304bc:	b004      	add	sp, #16
   304be:	bd10      	pop	{r4, pc}

000304c0 <initiate_cmd_handler>:
{
   304c0:	b507      	push	{r0, r1, r2, lr}
	err = nrf_cloud_decode_requested_state(payload, &expected_state);
   304c2:	6840      	ldr	r0, [r0, #4]
   304c4:	f10d 0107 	add.w	r1, sp, #7
   304c8:	f7e7 f952 	bl	17770 <nrf_cloud_decode_requested_state>
	if (err) {
   304cc:	b928      	cbnz	r0, 304da <initiate_cmd_handler+0x1a>
	if (expected_state == STATE_UA_INITIATE) {
   304ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   304d2:	2b06      	cmp	r3, #6
   304d4:	d101      	bne.n	304da <initiate_cmd_handler+0x1a>
		return state_ua_initiate();
   304d6:	f7ff ffd3 	bl	30480 <state_ua_initiate>
}
   304da:	b003      	add	sp, #12
   304dc:	f85d fb04 	ldr.w	pc, [sp], #4

000304e0 <state_ua_input_wait>:
{
   304e0:	b510      	push	{r4, lr}
   304e2:	b08a      	sub	sp, #40	; 0x28
	struct nct_cc_data msg = {
   304e4:	2210      	movs	r2, #16
   304e6:	2100      	movs	r1, #0
   304e8:	a801      	add	r0, sp, #4
   304ea:	f7fa f9fb 	bl	2a8e4 <memset>
   304ee:	2301      	movs	r3, #1
	err = nrf_cloud_encode_state(STATE_UA_INPUT_WAIT, &msg.data);
   304f0:	a901      	add	r1, sp, #4
   304f2:	2007      	movs	r0, #7
	struct nct_cc_data msg = {
   304f4:	9303      	str	r3, [sp, #12]
   304f6:	f88d 3010 	strb.w	r3, [sp, #16]
	err = nrf_cloud_encode_state(STATE_UA_INPUT_WAIT, &msg.data);
   304fa:	f7e7 f9d7 	bl	178ac <nrf_cloud_encode_state>
	if (err) {
   304fe:	4604      	mov	r4, r0
   30500:	b9a8      	cbnz	r0, 3052e <state_ua_input_wait+0x4e>
	err = nct_cc_send(&msg);
   30502:	a801      	add	r0, sp, #4
   30504:	f7e7 fe34 	bl	18170 <nct_cc_send>
   30508:	4604      	mov	r4, r0
	nrf_cloud_free((void *)msg.data.ptr);
   3050a:	9802      	ldr	r0, [sp, #8]
   3050c:	f000 f97d 	bl	3080a <k_free>
	struct nrf_cloud_evt evt = {
   30510:	2214      	movs	r2, #20
   30512:	2100      	movs	r1, #0
   30514:	eb0d 0002 	add.w	r0, sp, r2
   30518:	f7fa f9e4 	bl	2a8e4 <memset>
   3051c:	2302      	movs	r3, #2
   3051e:	f88d 3014 	strb.w	r3, [sp, #20]
   30522:	2306      	movs	r3, #6
	nfsm_set_current_state_and_notify(STATE_UA_INPUT_WAIT, &evt);
   30524:	a905      	add	r1, sp, #20
   30526:	2007      	movs	r0, #7
	struct nrf_cloud_evt evt = {
   30528:	9308      	str	r3, [sp, #32]
	nfsm_set_current_state_and_notify(STATE_UA_INPUT_WAIT, &evt);
   3052a:	f7e6 ff05 	bl	17338 <nfsm_set_current_state_and_notify>
}
   3052e:	4620      	mov	r0, r4
   30530:	b00a      	add	sp, #40	; 0x28
   30532:	bd10      	pop	{r4, pc}

00030534 <state_ua_complete>:
{
   30534:	b510      	push	{r4, lr}
   30536:	b08a      	sub	sp, #40	; 0x28
	struct nct_cc_data msg = {
   30538:	2210      	movs	r2, #16
   3053a:	2100      	movs	r1, #0
   3053c:	a801      	add	r0, sp, #4
   3053e:	f7fa f9d1 	bl	2a8e4 <memset>
   30542:	f641 63d2 	movw	r3, #7890	; 0x1ed2
   30546:	9303      	str	r3, [sp, #12]
   30548:	2301      	movs	r3, #1
	err = nrf_cloud_encode_state(STATE_UA_COMPLETE, &msg.data);
   3054a:	a901      	add	r1, sp, #4
   3054c:	200a      	movs	r0, #10
	struct nct_cc_data msg = {
   3054e:	f88d 3010 	strb.w	r3, [sp, #16]
	err = nrf_cloud_encode_state(STATE_UA_COMPLETE, &msg.data);
   30552:	f7e7 f9ab 	bl	178ac <nrf_cloud_encode_state>
	if (err) {
   30556:	4604      	mov	r4, r0
   30558:	b998      	cbnz	r0, 30582 <state_ua_complete+0x4e>
	err = nct_cc_send(&msg);
   3055a:	a801      	add	r0, sp, #4
   3055c:	f7e7 fe08 	bl	18170 <nct_cc_send>
   30560:	4604      	mov	r4, r0
	nrf_cloud_free((void *)msg.data.ptr);
   30562:	9802      	ldr	r0, [sp, #8]
   30564:	f000 f951 	bl	3080a <k_free>
	struct nrf_cloud_evt evt = {
   30568:	2214      	movs	r2, #20
   3056a:	2100      	movs	r1, #0
   3056c:	eb0d 0002 	add.w	r0, sp, r2
   30570:	f7fa f9b8 	bl	2a8e4 <memset>
   30574:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_COMPLETE, &evt);
   30576:	a905      	add	r1, sp, #20
   30578:	200a      	movs	r0, #10
	struct nrf_cloud_evt evt = {
   3057a:	f88d 3014 	strb.w	r3, [sp, #20]
	nfsm_set_current_state_and_notify(STATE_UA_COMPLETE, &evt);
   3057e:	f7e6 fedb 	bl	17338 <nfsm_set_current_state_and_notify>
}
   30582:	4620      	mov	r0, r4
   30584:	b00a      	add	sp, #40	; 0x28
   30586:	bd10      	pop	{r4, pc}

00030588 <initiate_n_complete_request_handler>:
{
   30588:	b510      	push	{r4, lr}
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   3058a:	6844      	ldr	r4, [r0, #4]
{
   3058c:	b086      	sub	sp, #24
	err = nrf_cloud_decode_requested_state(payload, &expected_state);
   3058e:	f10d 0107 	add.w	r1, sp, #7
   30592:	4620      	mov	r0, r4
   30594:	f7e7 f8ec 	bl	17770 <nrf_cloud_decode_requested_state>
	if (err) {
   30598:	b948      	cbnz	r0, 305ae <initiate_n_complete_request_handler+0x26>
	switch (expected_state) {
   3059a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3059e:	2b07      	cmp	r3, #7
   305a0:	d007      	beq.n	305b2 <initiate_n_complete_request_handler+0x2a>
   305a2:	2b0a      	cmp	r3, #10
   305a4:	d008      	beq.n	305b8 <initiate_n_complete_request_handler+0x30>
   305a6:	2b06      	cmp	r3, #6
   305a8:	d101      	bne.n	305ae <initiate_n_complete_request_handler+0x26>
		return state_ua_initiate();
   305aa:	f7ff ff69 	bl	30480 <state_ua_initiate>
}
   305ae:	b006      	add	sp, #24
   305b0:	bd10      	pop	{r4, pc}
		return state_ua_input_wait();
   305b2:	f7ff ff95 	bl	304e0 <state_ua_input_wait>
   305b6:	e7fa      	b.n	305ae <initiate_n_complete_request_handler+0x26>
		err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx);
   305b8:	aa02      	add	r2, sp, #8
   305ba:	a904      	add	r1, sp, #16
   305bc:	4620      	mov	r0, r4
   305be:	f7e7 faa1 	bl	17b04 <nrf_cloud_decode_data_endpoint>
		if (err) {
   305c2:	2800      	cmp	r0, #0
   305c4:	d1f3      	bne.n	305ae <initiate_n_complete_request_handler+0x26>
		nct_dc_endpoint_set(&tx, &rx);
   305c6:	a902      	add	r1, sp, #8
   305c8:	a804      	add	r0, sp, #16
   305ca:	f7e7 fe01 	bl	181d0 <nct_dc_endpoint_set>
		return state_ua_complete();
   305ce:	f7ff ffb1 	bl	30534 <state_ua_complete>
   305d2:	e7ec      	b.n	305ae <initiate_n_complete_request_handler+0x26>

000305d4 <all_ua_request_handler>:
{
   305d4:	b530      	push	{r4, r5, lr}
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   305d6:	6845      	ldr	r5, [r0, #4]
{
   305d8:	b08b      	sub	sp, #44	; 0x2c
	err = nrf_cloud_decode_requested_state(payload, &expected_state);
   305da:	f10d 0103 	add.w	r1, sp, #3
   305de:	4628      	mov	r0, r5
   305e0:	f7e7 f8c6 	bl	17770 <nrf_cloud_decode_requested_state>
	if (err) {
   305e4:	4604      	mov	r4, r0
   305e6:	b960      	cbnz	r0, 30602 <all_ua_request_handler+0x2e>
	switch (expected_state) {
   305e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   305ec:	3b06      	subs	r3, #6
   305ee:	2b04      	cmp	r3, #4
   305f0:	d807      	bhi.n	30602 <all_ua_request_handler+0x2e>
   305f2:	e8df f003 	tbb	[pc, r3]
   305f6:	0903      	.short	0x0903
   305f8:	451e      	.short	0x451e
   305fa:	0c          	.byte	0x0c
   305fb:	00          	.byte	0x00
		return state_ua_initiate();
   305fc:	f7ff ff40 	bl	30480 <state_ua_initiate>
		return state_ua_input_wait();
   30600:	4604      	mov	r4, r0
}
   30602:	4620      	mov	r0, r4
   30604:	b00b      	add	sp, #44	; 0x2c
   30606:	bd30      	pop	{r4, r5, pc}
		return state_ua_input_wait();
   30608:	f7ff ff6a 	bl	304e0 <state_ua_input_wait>
   3060c:	e7f8      	b.n	30600 <all_ua_request_handler+0x2c>
		err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx);
   3060e:	aa01      	add	r2, sp, #4
   30610:	a905      	add	r1, sp, #20
   30612:	4628      	mov	r0, r5
   30614:	f7e7 fa76 	bl	17b04 <nrf_cloud_decode_data_endpoint>
		if (err) {
   30618:	4604      	mov	r4, r0
   3061a:	2800      	cmp	r0, #0
   3061c:	d1f1      	bne.n	30602 <all_ua_request_handler+0x2e>
		nct_dc_endpoint_set(&tx, &rx);
   3061e:	a901      	add	r1, sp, #4
   30620:	a805      	add	r0, sp, #20
   30622:	f7e7 fdd5 	bl	181d0 <nct_dc_endpoint_set>
		err = state_ua_complete();
   30626:	f7ff ff85 	bl	30534 <state_ua_complete>
   3062a:	4604      	mov	r4, r0
		(void) nct_disconnect();
   3062c:	f7e7 fe22 	bl	18274 <nct_disconnect>
		return err;
   30630:	e7e7      	b.n	30602 <all_ua_request_handler+0x2e>
	struct nct_cc_data msg = {
   30632:	2210      	movs	r2, #16
   30634:	2100      	movs	r1, #0
   30636:	a801      	add	r0, sp, #4
   30638:	f7fa f954 	bl	2a8e4 <memset>
   3063c:	2301      	movs	r3, #1
	err = nrf_cloud_encode_state(STATE_UA_INPUT_MISMATCH, &msg.data);
   3063e:	a901      	add	r1, sp, #4
   30640:	2008      	movs	r0, #8
	struct nct_cc_data msg = {
   30642:	9303      	str	r3, [sp, #12]
   30644:	f88d 3010 	strb.w	r3, [sp, #16]
	err = nrf_cloud_encode_state(STATE_UA_INPUT_MISMATCH, &msg.data);
   30648:	f7e7 f930 	bl	178ac <nrf_cloud_encode_state>
	if (err) {
   3064c:	4604      	mov	r4, r0
   3064e:	2800      	cmp	r0, #0
   30650:	d1d7      	bne.n	30602 <all_ua_request_handler+0x2e>
	err = nct_cc_send(&msg);
   30652:	a801      	add	r0, sp, #4
   30654:	f7e7 fd8c 	bl	18170 <nct_cc_send>
   30658:	4604      	mov	r4, r0
	nrf_cloud_free((void *)msg.data.ptr);
   3065a:	9802      	ldr	r0, [sp, #8]
   3065c:	f000 f8d5 	bl	3080a <k_free>
	struct nrf_cloud_evt evt = {
   30660:	2214      	movs	r2, #20
   30662:	2100      	movs	r1, #0
   30664:	eb0d 0002 	add.w	r0, sp, r2
   30668:	f7fa f93c 	bl	2a8e4 <memset>
   3066c:	2302      	movs	r3, #2
   3066e:	f88d 3014 	strb.w	r3, [sp, #20]
   30672:	2306      	movs	r3, #6
	nfsm_set_current_state_and_notify(STATE_UA_INPUT_WAIT, &evt);
   30674:	2007      	movs	r0, #7
	struct nrf_cloud_evt evt = {
   30676:	9308      	str	r3, [sp, #32]
	nfsm_set_current_state_and_notify(STATE_UA_INPUT_WAIT, &evt);
   30678:	a905      	add	r1, sp, #20
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   3067a:	f7e6 fe5d 	bl	17338 <nfsm_set_current_state_and_notify>
   3067e:	e7c0      	b.n	30602 <all_ua_request_handler+0x2e>
		const struct nrf_cloud_evt evt = {
   30680:	2214      	movs	r2, #20
   30682:	2100      	movs	r1, #0
   30684:	eb0d 0002 	add.w	r0, sp, r2
   30688:	f7fa f92c 	bl	2a8e4 <memset>
   3068c:	23ff      	movs	r3, #255	; 0xff
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   3068e:	a905      	add	r1, sp, #20
		const struct nrf_cloud_evt evt = {
   30690:	f88d 3014 	strb.w	r3, [sp, #20]
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   30694:	200f      	movs	r0, #15
   30696:	e7f0      	b.n	3067a <all_ua_request_handler+0xa6>

00030698 <dc_connection_handler>:
{
   30698:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (nct_evt->status == 0) {
   3069a:	6801      	ldr	r1, [r0, #0]
   3069c:	b959      	cbnz	r1, 306b6 <dc_connection_handler+0x1e>
		struct nrf_cloud_evt evt = {
   3069e:	2214      	movs	r2, #20
   306a0:	a801      	add	r0, sp, #4
   306a2:	f7fa f91f 	bl	2a8e4 <memset>
   306a6:	2304      	movs	r3, #4
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   306a8:	200c      	movs	r0, #12
   306aa:	eb0d 0103 	add.w	r1, sp, r3
		struct nrf_cloud_evt evt = {
   306ae:	f88d 3004 	strb.w	r3, [sp, #4]
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   306b2:	f7e6 fe41 	bl	17338 <nfsm_set_current_state_and_notify>
}
   306b6:	2000      	movs	r0, #0
   306b8:	b007      	add	sp, #28
   306ba:	f85d fb04 	ldr.w	pc, [sp], #4

000306be <cc_tx_cnf_in_state_requested_handler>:
{
   306be:	b508      	push	{r3, lr}
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   306c0:	f241 632e 	movw	r3, #5678	; 0x162e
   306c4:	6842      	ldr	r2, [r0, #4]
   306c6:	429a      	cmp	r2, r3
   306c8:	d103      	bne.n	306d2 <cc_tx_cnf_in_state_requested_handler+0x14>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   306ca:	2100      	movs	r1, #0
   306cc:	2005      	movs	r0, #5
   306ce:	f7e6 fe33 	bl	17338 <nfsm_set_current_state_and_notify>
}
   306d2:	2000      	movs	r0, #0
   306d4:	bd08      	pop	{r3, pc}

000306d6 <cc_tx_cnf_handler>:
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   306d6:	f241 622e 	movw	r2, #5678	; 0x162e
   306da:	6843      	ldr	r3, [r0, #4]
{
   306dc:	b510      	push	{r4, lr}
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   306de:	4293      	cmp	r3, r2
   306e0:	d105      	bne.n	306ee <cc_tx_cnf_handler+0x18>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   306e2:	2100      	movs	r1, #0
   306e4:	2005      	movs	r0, #5
   306e6:	f7e6 fe27 	bl	17338 <nfsm_set_current_state_and_notify>
	return 0;
   306ea:	2400      	movs	r4, #0
   306ec:	e00b      	b.n	30706 <cc_tx_cnf_handler+0x30>
	if (nct_evt->param.data_id == PAIRING_STATUS_REPORT_ID) {
   306ee:	f641 62d2 	movw	r2, #7890	; 0x1ed2
   306f2:	4293      	cmp	r3, r2
   306f4:	d1f9      	bne.n	306ea <cc_tx_cnf_handler+0x14>
		err = nct_dc_connect();
   306f6:	f7e7 fd91 	bl	1821c <nct_dc_connect>
		if (err) {
   306fa:	4604      	mov	r4, r0
   306fc:	b918      	cbnz	r0, 30706 <cc_tx_cnf_handler+0x30>
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTING, NULL);
   306fe:	4601      	mov	r1, r0
   30700:	200b      	movs	r0, #11
   30702:	f7e6 fe19 	bl	17338 <nfsm_set_current_state_and_notify>
}
   30706:	4620      	mov	r0, r4
   30708:	bd10      	pop	{r4, pc}

0003070a <initiate_cmd_in_dc_conn_handler>:
{
   3070a:	b507      	push	{r0, r1, r2, lr}
	err = nrf_cloud_decode_requested_state(payload, &expected_state);
   3070c:	6840      	ldr	r0, [r0, #4]
   3070e:	f10d 0107 	add.w	r1, sp, #7
   30712:	f7e7 f82d 	bl	17770 <nrf_cloud_decode_requested_state>
	if (err) {
   30716:	b938      	cbnz	r0, 30728 <initiate_cmd_in_dc_conn_handler+0x1e>
	if (expected_state == STATE_UA_INITIATE) {
   30718:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3071c:	2b06      	cmp	r3, #6
   3071e:	d103      	bne.n	30728 <initiate_cmd_in_dc_conn_handler+0x1e>
		(void) nct_dc_disconnect();
   30720:	f7e7 fd96 	bl	18250 <nct_dc_disconnect>
		return state_ua_initiate();
   30724:	f7ff feac 	bl	30480 <state_ua_initiate>
}
   30728:	b003      	add	sp, #12
   3072a:	f85d fb04 	ldr.w	pc, [sp], #4

0003072e <connection_handler>:
{
   3072e:	b510      	push	{r4, lr}
	if (nct_evt->status != 0) {
   30730:	6803      	ldr	r3, [r0, #0]
{
   30732:	b086      	sub	sp, #24
	if (nct_evt->status != 0) {
   30734:	b153      	cbz	r3, 3074c <connection_handler+0x1e>
		evt.type = NRF_CLOUD_EVT_ERROR;
   30736:	23ff      	movs	r3, #255	; 0xff
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   30738:	a901      	add	r1, sp, #4
   3073a:	2002      	movs	r0, #2
		evt.type = NRF_CLOUD_EVT_ERROR;
   3073c:	f88d 3004 	strb.w	r3, [sp, #4]
		return 0;
   30740:	2400      	movs	r4, #0
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   30742:	f7e6 fdf9 	bl	17338 <nfsm_set_current_state_and_notify>
}
   30746:	4620      	mov	r0, r4
   30748:	b006      	add	sp, #24
   3074a:	bd10      	pop	{r4, pc}
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   3074c:	2301      	movs	r3, #1
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   3074e:	a901      	add	r1, sp, #4
   30750:	2002      	movs	r0, #2
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   30752:	f88d 3004 	strb.w	r3, [sp, #4]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   30756:	f7e6 fdef 	bl	17338 <nfsm_set_current_state_and_notify>
	err = nct_cc_connect();
   3075a:	f7e7 fcf7 	bl	1814c <nct_cc_connect>
	if (err) {
   3075e:	4604      	mov	r4, r0
   30760:	2800      	cmp	r0, #0
   30762:	d1f0      	bne.n	30746 <connection_handler+0x18>
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTING, NULL);
   30764:	4601      	mov	r1, r0
   30766:	2003      	movs	r0, #3
   30768:	f7e6 fde6 	bl	17338 <nfsm_set_current_state_and_notify>
   3076c:	e7eb      	b.n	30746 <connection_handler+0x18>

0003076e <dc_tx_cnf_handler>:
   3076e:	2000      	movs	r0, #0
   30770:	4770      	bx	lr

00030772 <dc_disconnection_handler>:
   30772:	2000      	movs	r0, #0
   30774:	4770      	bx	lr

00030776 <cc_disconnection_handler>:
   30776:	2000      	movs	r0, #0
   30778:	4770      	bx	lr

0003077a <nfsm_init>:
}
   3077a:	2000      	movs	r0, #0
   3077c:	4770      	bx	lr

0003077e <nct_dc_send>:
	return dc_send(dc_data, MQTT_QOS_1_AT_LEAST_ONCE);
   3077e:	2101      	movs	r1, #1
   30780:	f7e7 bab8 	b.w	17cf4 <dc_send>

00030784 <nct_dc_stream>:
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
   30784:	2100      	movs	r1, #0
   30786:	f7e7 bab5 	b.w	17cf4 <dc_send>

0003078a <callback_worker>:
{
   3078a:	b510      	push	{r4, lr}
	if ((data != NULL) && (data->callback != NULL)) {
   3078c:	4604      	mov	r4, r0
   3078e:	b120      	cbz	r0, 3079a <callback_worker+0x10>
   30790:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   30794:	b10b      	cbz	r3, 3079a <callback_worker+0x10>
		data->callback(data->data);
   30796:	300c      	adds	r0, #12
   30798:	4798      	blx	r3
	k_free(data);
   3079a:	4620      	mov	r0, r4
}
   3079c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_free(data);
   307a0:	f000 b833 	b.w	3080a <k_free>

000307a4 <sensor_sim_trigger_set>:
	struct sensor_sim_data *drv_data = dev->driver_data;
   307a4:	6883      	ldr	r3, [r0, #8]
	switch (trig->type) {
   307a6:	8808      	ldrh	r0, [r1, #0]
   307a8:	2801      	cmp	r0, #1
		drv_data->drdy_trigger = *trig;
   307aa:	bf01      	itttt	eq
   307ac:	6808      	ldreq	r0, [r1, #0]
		drv_data->drdy_handler = handler;
   307ae:	631a      	streq	r2, [r3, #48]	; 0x30
		drv_data->drdy_trigger = *trig;
   307b0:	6358      	streq	r0, [r3, #52]	; 0x34
	int ret = 0;
   307b2:	2000      	moveq	r0, #0
		ret = -ENOTSUP;
   307b4:	bf18      	it	ne
   307b6:	f06f 0085 	mvnne.w	r0, #133	; 0x85
}
   307ba:	4770      	bx	lr

000307bc <sensor_sim_attr_set>:
}
   307bc:	2000      	movs	r0, #0
   307be:	4770      	bx	lr

000307c0 <sensor_sim_thread>:
{
   307c0:	b570      	push	{r4, r5, r6, lr}
   307c2:	4604      	mov	r4, r0
	struct sensor_sim_data *drv_data = dev->driver_data;
   307c4:	6885      	ldr	r5, [r0, #8]
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   307c6:	f105 0634 	add.w	r6, r5, #52	; 0x34
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, ms)
   307ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   307ce:	f7f8 f80b 	bl	287e8 <z_impl_k_sleep>
		if (drv_data->drdy_handler != NULL) {
   307d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   307d4:	2b00      	cmp	r3, #0
   307d6:	d0f8      	beq.n	307ca <sensor_sim_thread+0xa>
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   307d8:	4631      	mov	r1, r6
   307da:	4620      	mov	r0, r4
   307dc:	4798      	blx	r3
   307de:	e7f4      	b.n	307ca <sensor_sim_thread+0xa>

000307e0 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   307e0:	f7fd bf56 	b.w	2e690 <z_clock_idle_exit>

000307e4 <k_mem_pool_malloc>:
{
   307e4:	b507      	push	{r0, r1, r2, lr}
   307e6:	2204      	movs	r2, #4
   307e8:	188a      	adds	r2, r1, r2
   307ea:	d204      	bcs.n	307f6 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   307ec:	2300      	movs	r3, #0
   307ee:	4669      	mov	r1, sp
   307f0:	f7f6 fa58 	bl	26ca4 <k_mem_pool_alloc>
   307f4:	b118      	cbz	r0, 307fe <k_mem_pool_malloc+0x1a>
		return NULL;
   307f6:	2000      	movs	r0, #0
}
   307f8:	b003      	add	sp, #12
   307fa:	f85d fb04 	ldr.w	pc, [sp], #4
   307fe:	e9dd 3200 	ldrd	r3, r2, [sp]
   30802:	601a      	str	r2, [r3, #0]
	return (char *)block.data + sizeof(struct k_mem_block_id);
   30804:	9800      	ldr	r0, [sp, #0]
   30806:	3004      	adds	r0, #4
   30808:	e7f6      	b.n	307f8 <k_mem_pool_malloc+0x14>

0003080a <k_free>:
	if (ptr != NULL) {
   3080a:	b110      	cbz	r0, 30812 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   3080c:	3804      	subs	r0, #4
   3080e:	f7f6 bad7 	b.w	26dc0 <k_mem_pool_free_id>
}
   30812:	4770      	bx	lr

00030814 <k_calloc>:
{
   30814:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   30816:	fb01 f400 	mul.w	r4, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   3081a:	b118      	cbz	r0, 30824 <k_calloc+0x10>
   3081c:	fbb4 f0f0 	udiv	r0, r4, r0
   30820:	4281      	cmp	r1, r0
   30822:	d10a      	bne.n	3083a <k_calloc+0x26>
	ret = k_malloc(bounds);
   30824:	4620      	mov	r0, r4
   30826:	f7f6 fb27 	bl	26e78 <k_malloc>
	if (ret != NULL) {
   3082a:	4605      	mov	r5, r0
   3082c:	b118      	cbz	r0, 30836 <k_calloc+0x22>
__ssp_bos_icheck3(memset, void *, int)
   3082e:	4622      	mov	r2, r4
   30830:	2100      	movs	r1, #0
   30832:	f7fa f857 	bl	2a8e4 <memset>
}
   30836:	4628      	mov	r0, r5
   30838:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   3083a:	2500      	movs	r5, #0
   3083c:	e7fb      	b.n	30836 <k_calloc+0x22>

0003083e <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   3083e:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   30840:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   30844:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   30848:	4770      	bx	lr

0003084a <z_queue_node_peek>:
{
   3084a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   3084c:	4604      	mov	r4, r0
   3084e:	b130      	cbz	r0, 3085e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30850:	6802      	ldr	r2, [r0, #0]
   30852:	0793      	lsls	r3, r2, #30
   30854:	d003      	beq.n	3085e <z_queue_node_peek+0x14>
		ret = anode->data;
   30856:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   30858:	b109      	cbz	r1, 3085e <z_queue_node_peek+0x14>
			k_free(anode);
   3085a:	f7ff ffd6 	bl	3080a <k_free>
}
   3085e:	4620      	mov	r0, r4
   30860:	bd10      	pop	{r4, pc}

00030862 <z_impl_k_queue_init>:
	list->head = NULL;
   30862:	2300      	movs	r3, #0
	list->tail = NULL;
   30864:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   30868:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   3086a:	f100 030c 	add.w	r3, r0, #12
   3086e:	e9c0 3303 	strd	r3, r3, [r0, #12]
}
   30872:	4770      	bx	lr

00030874 <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   30874:	460a      	mov	r2, r1
   30876:	2300      	movs	r3, #0
   30878:	6841      	ldr	r1, [r0, #4]
   3087a:	f7f6 be03 	b.w	27484 <queue_insert>

0003087e <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3087e:	7b43      	ldrb	r3, [r0, #13]
   30880:	06db      	lsls	r3, r3, #27
   30882:	bf03      	ittte	eq
   30884:	6980      	ldreq	r0, [r0, #24]
   30886:	fab0 f080 	clzeq	r0, r0
   3088a:	0940      	lsreq	r0, r0, #5
   3088c:	2000      	movne	r0, #0
}
   3088e:	4770      	bx	lr

00030890 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   30890:	f990 000e 	ldrsb.w	r0, [r0, #14]
   30894:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   30898:	4298      	cmp	r0, r3
   3089a:	bfac      	ite	ge
   3089c:	2000      	movge	r0, #0
   3089e:	2001      	movlt	r0, #1
   308a0:	4770      	bx	lr

000308a2 <z_reschedule_irqlock>:
{
   308a2:	b508      	push	{r3, lr}
   308a4:	4602      	mov	r2, r0
	if (resched()) {
   308a6:	f7f6 ff61 	bl	2776c <resched>
   308aa:	b120      	cbz	r0, 308b6 <z_reschedule_irqlock+0x14>
}
   308ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   308b0:	4610      	mov	r0, r2
   308b2:	f7e3 b863 	b.w	1397c <__swap>
   308b6:	f382 8811 	msr	BASEPRI, r2
   308ba:	f3bf 8f6f 	isb	sy
   308be:	bd08      	pop	{r3, pc}

000308c0 <z_reschedule_unlocked>:
	__asm__ volatile(
   308c0:	f04f 0320 	mov.w	r3, #32
   308c4:	f3ef 8011 	mrs	r0, BASEPRI
   308c8:	f383 8811 	msr	BASEPRI, r3
   308cc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   308d0:	f7ff bfe7 	b.w	308a2 <z_reschedule_irqlock>

000308d4 <z_priq_dumb_best>:
	return list->head == list;
   308d4:	6803      	ldr	r3, [r0, #0]
}
   308d6:	4298      	cmp	r0, r3
   308d8:	bf14      	ite	ne
   308da:	4618      	movne	r0, r3
   308dc:	2000      	moveq	r0, #0
   308de:	4770      	bx	lr

000308e0 <z_unpend_all>:
{
   308e0:	b570      	push	{r4, r5, r6, lr}
   308e2:	4606      	mov	r6, r0
	int need_sched = 0;
   308e4:	2500      	movs	r5, #0
   308e6:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   308e8:	42a6      	cmp	r6, r4
   308ea:	d000      	beq.n	308ee <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   308ec:	b90c      	cbnz	r4, 308f2 <z_unpend_all+0x12>
}
   308ee:	4628      	mov	r0, r5
   308f0:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   308f2:	4620      	mov	r0, r4
   308f4:	f7f7 f90e 	bl	27b14 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   308f8:	4620      	mov	r0, r4
   308fa:	f7ff ffc0 	bl	3087e <z_is_thread_ready>
		need_sched = 1;
   308fe:	2501      	movs	r5, #1
   30900:	2800      	cmp	r0, #0
   30902:	d0f0      	beq.n	308e6 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   30904:	4620      	mov	r0, r4
   30906:	f7f7 fa11 	bl	27d2c <z_add_thread_to_ready_q>
   3090a:	e7ec      	b.n	308e6 <z_unpend_all+0x6>

0003090c <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3090c:	7b43      	ldrb	r3, [r0, #13]
   3090e:	06db      	lsls	r3, r3, #27
   30910:	bf03      	ittte	eq
   30912:	6980      	ldreq	r0, [r0, #24]
   30914:	fab0 f080 	clzeq	r0, r0
   30918:	0940      	lsreq	r0, r0, #5
   3091a:	2000      	movne	r0, #0
}
   3091c:	4770      	bx	lr

0003091e <z_impl_k_thread_name_set>:
}
   3091e:	4770      	bx	lr

00030920 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   30920:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   30922:	b510      	push	{r4, lr}
   30924:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   30926:	b103      	cbz	r3, 3092a <z_thread_single_abort+0xa>
		thread->fn_abort();
   30928:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   3092a:	4620      	mov	r0, r4
   3092c:	f7ff ffee 	bl	3090c <z_is_thread_ready>
   30930:	b138      	cbz	r0, 30942 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   30932:	4620      	mov	r0, r4
   30934:	f7f7 fba0 	bl	28078 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   30938:	7b63      	ldrb	r3, [r4, #13]
   3093a:	f043 0308 	orr.w	r3, r3, #8
   3093e:	7363      	strb	r3, [r4, #13]
}
   30940:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   30942:	7b63      	ldrb	r3, [r4, #13]
   30944:	079b      	lsls	r3, r3, #30
   30946:	d502      	bpl.n	3094e <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   30948:	4620      	mov	r0, r4
   3094a:	f7f6 ffab 	bl	278a4 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   3094e:	69a3      	ldr	r3, [r4, #24]
   30950:	2b00      	cmp	r3, #0
   30952:	d0f1      	beq.n	30938 <z_thread_single_abort+0x18>
	return z_abort_timeout(&thread->base.timeout);
   30954:	f104 0018 	add.w	r0, r4, #24
   30958:	f7f8 fbf2 	bl	29140 <z_abort_timeout>
   3095c:	e7ec      	b.n	30938 <z_thread_single_abort+0x18>

0003095e <z_init_thread_base>:
	thread_base->user_options = (u8_t)options;
   3095e:	7303      	strb	r3, [r0, #12]
	thread_base->sched_locked = 0U;
   30960:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   30962:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   30964:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   30966:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   30968:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
   3096c:	4770      	bx	lr

0003096e <k_work_submit_to_queue>:
{
   3096e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   30970:	f101 0308 	add.w	r3, r1, #8
   30974:	e8d3 2fef 	ldaex	r2, [r3]
   30978:	f042 0c01 	orr.w	ip, r2, #1
   3097c:	e8c3 cfee 	stlex	lr, ip, [r3]
   30980:	f1be 0f00 	cmp.w	lr, #0
   30984:	d1f6      	bne.n	30974 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   30986:	07d3      	lsls	r3, r2, #31
   30988:	d403      	bmi.n	30992 <k_work_submit_to_queue+0x24>
}
   3098a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   3098e:	f7ff bf71 	b.w	30874 <k_queue_append>
}
   30992:	f85d fb04 	ldr.w	pc, [sp], #4

00030996 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   30996:	f1a0 010c 	sub.w	r1, r0, #12
   3099a:	6900      	ldr	r0, [r0, #16]
   3099c:	f7ff bfe7 	b.w	3096e <k_work_submit_to_queue>

000309a0 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   309a0:	2300      	movs	r3, #0
   309a2:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   309a6:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   309aa:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   309ac:	61c3      	str	r3, [r0, #28]
}
   309ae:	4770      	bx	lr

000309b0 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   309b0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   309b2:	f7f8 fd53 	bl	2945c <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   309b6:	bd08      	pop	{r3, pc}

000309b8 <z_impl_k_uptime_get_32>:

u32_t z_impl_k_uptime_get_32(void)
{
   309b8:	b508      	push	{r3, lr}
	return __ticks_to_ms(z_tick_get_32());
   309ba:	f7ff fff9 	bl	309b0 <z_tick_get_32>
	return (u64_t)ticks * MSEC_PER_SEC /
   309be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   309c2:	fba0 2302 	umull	r2, r3, r0, r2
   309c6:	09d0      	lsrs	r0, r2, #7
}
   309c8:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
   309cc:	bd08      	pop	{r3, pc}

000309ce <z_impl_k_uptime_get>:
	return z_impl_k_uptime_get_32();
}
#endif

s64_t z_impl_k_uptime_get(void)
{
   309ce:	b510      	push	{r4, lr}
	return __ticks_to_ms(z_tick_get());
   309d0:	f7f8 fd44 	bl	2945c <z_tick_get>
   309d4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   309d8:	fba0 2304 	umull	r2, r3, r0, r4
   309dc:	fb04 3301 	mla	r3, r4, r1, r3
   309e0:	09d0      	lsrs	r0, r2, #7
}
   309e2:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
   309e6:	09d9      	lsrs	r1, r3, #7
   309e8:	bd10      	pop	{r4, pc}

000309ea <add_event>:
{
   309ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   309ec:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   309ee:	e9d0 2300 	ldrd	r2, r3, [r0]
   309f2:	4290      	cmp	r0, r2
   309f4:	4604      	mov	r4, r0
   309f6:	460d      	mov	r5, r1
   309f8:	d106      	bne.n	30a08 <add_event+0x1e>
	node->prev = list->tail;
   309fa:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   309fc:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   309fe:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   30a00:	6863      	ldr	r3, [r4, #4]
   30a02:	601d      	str	r5, [r3, #0]
	list->tail = node;
   30a04:	6065      	str	r5, [r4, #4]
   30a06:	e019      	b.n	30a3c <add_event+0x52>
	if ((pending == NULL) ||
   30a08:	2b00      	cmp	r3, #0
   30a0a:	d0f6      	beq.n	309fa <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   30a0c:	689b      	ldr	r3, [r3, #8]
   30a0e:	6839      	ldr	r1, [r7, #0]
   30a10:	6818      	ldr	r0, [r3, #0]
   30a12:	f7ff ff3d 	bl	30890 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   30a16:	2800      	cmp	r0, #0
   30a18:	d1ef      	bne.n	309fa <add_event+0x10>
	return list->head == list;
   30a1a:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30a1c:	42b4      	cmp	r4, r6
   30a1e:	d0ec      	beq.n	309fa <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   30a20:	2e00      	cmp	r6, #0
   30a22:	d0ea      	beq.n	309fa <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   30a24:	68b3      	ldr	r3, [r6, #8]
   30a26:	6838      	ldr	r0, [r7, #0]
   30a28:	6819      	ldr	r1, [r3, #0]
   30a2a:	f7ff ff31 	bl	30890 <z_is_t1_higher_prio_than_t2>
   30a2e:	b130      	cbz	r0, 30a3e <add_event+0x54>
	node->prev = successor->prev;
   30a30:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   30a32:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   30a36:	6873      	ldr	r3, [r6, #4]
   30a38:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   30a3a:	6075      	str	r5, [r6, #4]
}
   30a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   30a3e:	6863      	ldr	r3, [r4, #4]
   30a40:	429e      	cmp	r6, r3
   30a42:	d0da      	beq.n	309fa <add_event+0x10>
   30a44:	6836      	ldr	r6, [r6, #0]
   30a46:	e7eb      	b.n	30a20 <add_event+0x36>

00030a48 <z_handle_obj_poll_events>:
	return list->head == list;
   30a48:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   30a4a:	4298      	cmp	r0, r3
   30a4c:	d00a      	beq.n	30a64 <z_handle_obj_poll_events+0x1c>
	node->prev->next = node->next;
   30a4e:	e9d3 0200 	ldrd	r0, r2, [r3]
   30a52:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   30a54:	6818      	ldr	r0, [r3, #0]
   30a56:	6042      	str	r2, [r0, #4]
	node->next = NULL;
   30a58:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   30a5a:	4618      	mov	r0, r3
	node->prev = NULL;
   30a5c:	e9c3 2200 	strd	r2, r2, [r3]
   30a60:	f7f8 bdfe 	b.w	29660 <signal_poll_event>
	}
}
   30a64:	4770      	bx	lr

00030a66 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   30a66:	4770      	bx	lr
